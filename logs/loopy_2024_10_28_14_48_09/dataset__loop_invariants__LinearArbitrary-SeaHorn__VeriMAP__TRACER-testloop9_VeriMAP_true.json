{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  while (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i < 10 ==> x == 1;\nloop invariant i < 10 ==> y == 3;\nloop invariant i < 9 ==> x == 2;\nloop invariant i < 9 ==> y == 4;\nloop invariant i < 8 ==> x == 3;\nloop invariant i < 8 ==> y == 5;\nloop invariant i < 7 ==> x == 1;\nloop invariant i < 7 ==> y == 6;\nloop invariant i < 6 ==> x == 2;\nloop invariant i < 6 ==> y == 3;\nloop invariant i < 5 ==> x == 3;\nloop invariant i < 5 ==> y == 4;\nloop invariant i < 4 ==> x == 1;\nloop invariant i < 4 ==> y == 5;\nloop invariant i < 3 ==> x == 2;\nloop invariant i < 3 ==> y == 6;\nloop invariant i < 2 ==> x == 3;\nloop invariant i < 2 ==> y == 4;\nloop invariant i < 1 ==> x == 1;\nloop invariant i < 1 ==> y == 5;\nloop invariant i < 0 ==> x == 2;\nloop invariant i < 0 ==> y == 3;\nloop invariant i == 10 ==> x == 2;\nloop invariant i == 10 ==> y == 4;\nloop invariant i == 9 ==> x == 3;\nloop invariant i == 9 ==> y == 5;\nloop invariant i == 8 ==> x == 1;\nloop invariant i == 8 ==> y == 6;\nloop invariant i == 7 ==> x == 2;\nloop invariant i == 7 ==> y == 3;\nloop invariant i == 6 ==> x == 3;\nloop invariant i == 6 ==> y == 4;\nloop invariant i == 5 ==> x == 1;\nloop invariant i == 5 ==> y == 5;\nloop invariant i == 4 ==> x == 2;\nloop invariant i == 4 ==> y == 6;\nloop invariant i == 3 ==> x == 3;\nloop invariant i == 3 ==> y == 4;\nloop invariant i == 2 ==> x == 1;\nloop invariant i == 2 ==> y == 5;\nloop invariant i == 1 ==> x == 2;\nloop invariant i == 1 ==> y == 3;\nloop invariant i == 0 ==> x == 3;\nloop invariant i == 0 ==> y == 4;\nloop invariant i == 10 ==> x >= 3;\nloop invariant i == 10 ==> y >= 4;\nloop invariant i == 9 ==> x >= 3;\nloop invariant i == 9 ==> y >= 5;\nloop invariant i == 8 ==> x >= 3;\nloop invariant i == 8 ==> y >= 6;\nloop invariant i == 7 ==> x >= 3;\nloop invariant i == 7 ==> y >= 3;\nloop invariant i == 6 ==> x >= 3;\nloop invariant i == 6 ==> y >= 4;\nloop invariant i == 5 ==> x >= 3;\nloop invariant i == 5 ==> y >= 5;\nloop invariant i == 4 ==> x >= 3;\nloop invariant i == 4 ==> y >= 6;\nloop invariant i == 3 ==> x >= 3;\nloop invariant i == 3 ==> y >= 4;\nloop invariant i == 2 ==> x >= 3;\nloop invariant i == 2 ==> y >= 5;\nloop invariant i == 1 ==> x >= 3;\nloop invariant i == 1 ==> y >= 3;\nloop invariant i == 0 ==> x >= 3;\nloop invariant i == 0 ==> y >= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == (1 + (i - 1) * (i - 2) / 2);\nloop invariant y == (3 + (i - 1) * (i - 2) / 2);\nloop invariant (i < 10) ==> (x != 4);\nloop invariant (i < 10) ==> (y != 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant !( (i == 10) && (x == 1) && (y == 6) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y <= 6;\nloop invariant i == 10 ==> !( y == 6 );\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= i <= 10;\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i < 10 ==> y in {3,4,6});\nloop invariant (i < 10 ==> x in {3,4});\nloop invariant (i==1 ==> x == 1);\nloop invariant (i==1 ==> y in {3,4});\nloop invariant (i==2 ==> x == 2);\nloop invariant (i==2 ==> y == 3);\nloop invariant (i==3 ==> x == 3);\nloop invariant (i==3 ==> y == 4);\nloop invariant (i==4 ==> x == 1);\nloop invariant (i==4 ==> y == 5);\nloop invariant (i==5 ==> x == 2);\nloop invariant (i==5 ==> y == 6);\nloop invariant (i==6 ==> x == 3);\nloop invariant (i==6 ==> y in {4,6});\nloop invariant (i==7 ==> x == 1);\nloop invariant (i==7 ==> y in {5,6});\nloop invariant (i==8 ==> x == 2);\nloop invariant (i==8 ==> y in {6});\nloop invariant (i==9 ==> x == 3);\nloop invariant (i==9 ==> y in {6});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 2 ==> y == 3);\nloop invariant (x == 3 ==> y == 4);\nloop invariant (x == 1 ==> y == 5);\nloop invariant (x == 4 ==> y == 6);\nloop invariant (x != 1 ==> x != 3 ==> x != 4 ==> y == 1);\nloop invariant (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant i >= x - 1;\nloop invariant y == 3 * i + 1;\nloop invariant !(x==4 && y==6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\nloop invariant !(x == 4 && y == 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= 4;\nloop invariant y <= 6;\nloop invariant i + x >= 2;\nloop invariant i + x <= 14;\nloop invariant i + x + y >= 3;\nloop invariant i + x + y <= 15;\nloop invariant x == 1 ==> y == 5;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 3 ==> y == 3;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 4 ==> i == 9;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 3 ==> i == 8;\nloop invariant x == 3 ==> y == 5;\nloop invariant x == 2 ==> i == 7;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 1 ==> i == 6;\nloop invariant x == 1 ==> y == 3;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x == 2 ==> y >= 4;\nloop invariant x == 3 ==> y >= 3;\nloop invariant x == 4 ==> y >= 6;\nloop invariant x <= 4 ==> y <= 6;\nloop invariant x <= 4 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant (i >= 0 && i <= 9);\nloop invariant (x >= 1 && x <= 4);\nloop invariant (y >= 0 && y <= 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 2 ==> y == 3;\nloop invariant x == 3 ==> y == 4;\nloop invariant x == 1 ==> y == 5 || y == 6;\nloop invariant x == 2 ==> y == 3;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant ( i >= 0 );\nloop invariant ( i <= 10 );\nloop invariant ( x == 1 || x == 2 || x == 3 || x == 4 );\nloop invariant ( y == 3 || y == 4 || y == 5 || y == 6 );\n*/\n```",
            "```\n/*@\nloop invariant ( i >= 0 ) && ( i <= 10 );\nloop invariant ( x == ( ( i % 4 ) + 1 ) );\nloop invariant ( y == ( ( ( ( i % 4 ) * 2 ) + 3 ) + ( ( i / 4 ) * 5 ) ) );\nloop invariant !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 3 <= y <= 6 is preserved but not established.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 23,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i < 10 ==> x == 1;\nloop invariant i < 10 ==> y == 3;\nloop invariant i < 9 ==> x == 2;\nloop invariant i < 9 ==> y == 4;\nloop invariant i < 8 ==> x == 3;\nloop invariant i < 8 ==> y == 5;\nloop invariant i < 7 ==> x == 1;\nloop invariant i < 7 ==> y == 6;\nloop invariant i < 6 ==> x == 2;\nloop invariant i < 6 ==> y == 3;\nloop invariant i < 5 ==> x == 3;\nloop invariant i < 5 ==> y == 4;\nloop invariant i < 4 ==> x == 1;\nloop invariant i < 4 ==> y == 5;\nloop invariant i < 3 ==> x == 2;\nloop invariant i < 3 ==> y == 6;\nloop invariant i < 2 ==> x == 3;\nloop invariant i < 2 ==> y == 4;\nloop invariant i < 1 ==> x == 1;\nloop invariant i < 1 ==> y == 5;\nloop invariant i < 0 ==> x == 2;\nloop invariant i < 0 ==> y == 3;\nloop invariant i == 10 ==> x == 2;\nloop invariant i == 10 ==> y == 4;\nloop invariant i == 9 ==> x == 3;\nloop invariant i == 9 ==> y == 5;\nloop invariant i == 8 ==> x == 1;\nloop invariant i == 8 ==> y == 6;\nloop invariant i == 7 ==> x == 2;\nloop invariant i == 7 ==> y == 3;\nloop invariant i == 6 ==> x == 3;\nloop invariant i == 6 ==> y == 4;\nloop invariant i == 5 ==> x == 1;\nloop invariant i == 5 ==> y == 5;\nloop invariant i == 4 ==> x == 2;\nloop invariant i == 4 ==> y == 6;\nloop invariant i == 3 ==> x == 3;\nloop invariant i == 3 ==> y == 4;\nloop invariant i == 2 ==> x == 1;\nloop invariant i == 2 ==> y == 5;\nloop invariant i == 1 ==> x == 2;\nloop invariant i == 1 ==> y == 3;\nloop invariant i == 0 ==> x == 3;\nloop invariant i == 0 ==> y == 4;\nloop invariant i == 10 ==> x >= 3;\nloop invariant i == 10 ==> y >= 4;\nloop invariant i == 9 ==> x >= 3;\nloop invariant i == 9 ==> y >= 5;\nloop invariant i == 8 ==> x >= 3;\nloop invariant i == 8 ==> y >= 6;\nloop invariant i == 7 ==> x >= 3;\nloop invariant i == 7 ==> y >= 3;\nloop invariant i == 6 ==> x >= 3;\nloop invariant i == 6 ==> y >= 4;\nloop invariant i == 5 ==> x >= 3;\nloop invariant i == 5 ==> y >= 5;\nloop invariant i == 4 ==> x >= 3;\nloop invariant i == 4 ==> y >= 6;\nloop invariant i == 3 ==> x >= 3;\nloop invariant i == 3 ==> y >= 4;\nloop invariant i == 2 ==> x >= 3;\nloop invariant i == 2 ==> y >= 5;\nloop invariant i == 1 ==> x >= 3;\nloop invariant i == 1 ==> y >= 3;\nloop invariant i == 0 ==> x >= 3;\nloop invariant i == 0 ==> y >= 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant i < 10 ==> x == 1 is partially proven to be inductive.\nloop invariant i < 10 ==> y == 3 is preserved but not established.\nloop invariant i < 9 ==> x == 2 is preserved but not established.\nloop invariant i < 9 ==> y == 4 is partially proven to be inductive.\nloop invariant i < 8 ==> x == 3 is partially proven to be inductive.\nloop invariant i < 8 ==> y == 5 is partially proven to be inductive.\nloop invariant i < 7 ==> x == 1 is partially proven to be inductive.\nloop invariant i < 7 ==> y == 6 is partially proven to be inductive.\nloop invariant i < 6 ==> x == 2 is partially proven to be inductive.\nloop invariant i < 6 ==> y == 3 is partially proven to be inductive.\nloop invariant i < 5 ==> x == 3 is partially proven to be inductive.\nloop invariant i < 5 ==> y == 4 is partially proven to be inductive.\nloop invariant i < 4 ==> x == 1 is partially proven to be inductive.\nloop invariant i < 4 ==> y == 5 is partially proven to be inductive.\nloop invariant i < 3 ==> x == 2 is partially proven to be inductive.\nloop invariant i < 3 ==> y == 6 is partially proven to be inductive.\nloop invariant i < 2 ==> x == 3 is partially proven to be inductive.\nloop invariant i < 2 ==> y == 4 is partially proven to be inductive.\nloop invariant i < 1 ==> x == 1 is partially proven to be inductive.\nloop invariant i < 1 ==> y == 5 is partially proven to be inductive.\nloop invariant i < 0 ==> x == 2 is partially proven to be inductive.\nloop invariant i < 0 ==> y == 3 is partially proven to be inductive.\nloop invariant i == 10 ==> x == 2 is partially proven to be inductive.\nloop invariant i == 10 ==> y == 4 is partially proven to be inductive.\nloop invariant i == 9 ==> x == 3 is partially proven to be inductive.\nloop invariant i == 9 ==> y == 5 is partially proven to be inductive.\nloop invariant i == 8 ==> x == 1 is partially proven to be inductive.\nloop invariant i == 8 ==> y == 6 is partially proven to be inductive.\nloop invariant i == 7 ==> x == 2 is partially proven to be inductive.\nloop invariant i == 7 ==> y == 3 is partially proven to be inductive.\nloop invariant i == 6 ==> x == 3 is partially proven to be inductive.\nloop invariant i == 6 ==> y == 4 is partially proven to be inductive.\nloop invariant i == 5 ==> x == 1 is partially proven to be inductive.\nloop invariant i == 5 ==> y == 5 is partially proven to be inductive.\nloop invariant i == 4 ==> x == 2 is partially proven to be inductive.\nloop invariant i == 4 ==> y == 6 is partially proven to be inductive.\nloop invariant i == 3 ==> x == 3 is partially proven to be inductive.\nloop invariant i == 3 ==> y == 4 is partially proven to be inductive.\nloop invariant i == 2 ==> x == 1 is partially proven to be inductive.\nloop invariant i == 2 ==> y == 5 is partially proven to be inductive.\nloop invariant i == 1 ==> x == 2 is partially proven to be inductive.\nloop invariant i == 1 ==> y == 3 is partially proven to be inductive.\nloop invariant i == 0 ==> x == 3 is partially proven to be inductive.\nloop invariant i == 0 ==> y == 4 is partially proven to be inductive.\nloop invariant i == 10 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 10 ==> y >= 4 is partially proven to be inductive.\nloop invariant i == 9 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 9 ==> y >= 5 is partially proven to be inductive.\nloop invariant i == 8 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 8 ==> y >= 6 is partially proven to be inductive.\nloop invariant i == 7 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 7 ==> y >= 3 is partially proven to be inductive.\nloop invariant i == 6 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 6 ==> y >= 4 is partially proven to be inductive.\nloop invariant i == 5 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 5 ==> y >= 5 is partially proven to be inductive.\nloop invariant i == 4 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 4 ==> y >= 6 is partially proven to be inductive.\nloop invariant i == 3 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 3 ==> y >= 4 is partially proven to be inductive.\nloop invariant i == 2 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 2 ==> y >= 5 is partially proven to be inductive.\nloop invariant i == 1 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 1 ==> y >= 3 is partially proven to be inductive.\nloop invariant i == 0 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 0 ==> y >= 4 is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: i < 1 ==> x == 1;\n\nloop invariant i22: i < 0 ==> x == 2;\nloop invariant i23: i < 0 ==> y == 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i42: i == 1 ==> x == 2;\nloop invariant i43: i == 1 ==> y == 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i62: i == 2 ==> x >= 3;\n\n\nloop invariant i65: i == 1 ==> y >= 3;\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == (1 + (i - 1) * (i - 2) / 2);\nloop invariant y == (3 + (i - 1) * (i - 2) / 2);\nloop invariant (i < 10) ==> (x != 4);\nloop invariant (i < 10) ==> (y != 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == (1 + (i - 1) * (i - 2) / 2) is preserved but not established.\nloop invariant y == (3 + (i - 1) * (i - 2) / 2) is partially proven to be inductive.\nloop invariant (i < 10) ==> (x != 4) is partially proven to be inductive.\nloop invariant (i < 10) ==> (y != 6) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\nloop invariant i4: (i < 10) ==> (x != 4);\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant !( (i == 10) && (x == 1) && (y == 6) );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is preserved but not established.\nloop invariant !( (i == 10) && (x == 1) && (y == 6) ) is established but not preserved.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y <= 6;\nloop invariant i == 10 ==> !( y == 6 );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant y <= 6 is preserved but not established.\nloop invariant i == 10 ==> !( y == 6 ) is established but not preserved.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x == 1 || x == 2 || x == 3 || x == 4;\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= i <= 10;\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i < 10 ==> y in {3,4,6});\nloop invariant (i < 10 ==> x in {3,4});\nloop invariant (i==1 ==> x == 1);\nloop invariant (i==1 ==> y in {3,4});\nloop invariant (i==2 ==> x == 2);\nloop invariant (i==2 ==> y == 3);\nloop invariant (i==3 ==> x == 3);\nloop invariant (i==3 ==> y == 4);\nloop invariant (i==4 ==> x == 1);\nloop invariant (i==4 ==> y == 5);\nloop invariant (i==5 ==> x == 2);\nloop invariant (i==5 ==> y == 6);\nloop invariant (i==6 ==> x == 3);\nloop invariant (i==6 ==> y in {4,6});\nloop invariant (i==7 ==> x == 1);\nloop invariant (i==7 ==> y in {5,6});\nloop invariant (i==8 ==> x == 2);\nloop invariant (i==8 ==> y in {6});\nloop invariant (i==9 ==> x == 3);\nloop invariant (i==9 ==> y in {6});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token 'in'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 1 <= x <= 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: (i==10 ==> i==10);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 2 ==> y == 3);\nloop invariant (x == 3 ==> y == 4);\nloop invariant (x == 1 ==> y == 5);\nloop invariant (x == 4 ==> y == 6);\nloop invariant (x != 1 ==> x != 3 ==> x != 4 ==> y == 1);\nloop invariant (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 2 ==> y == 3) is established but not preserved.\nloop invariant (x == 3 ==> y == 4) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 5) is neither established nor preserved.\nloop invariant (x == 4 ==> y == 6) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 3 ==> x != 4 ==> y == 1) is established but not preserved.\nloop invariant (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4) is partially proven to be inductive.\nloop invariant (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4) is partially proven to be inductive.\nloop invariant (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4) is partially proven to be inductive.\nloop invariant (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3) is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: (x == 3 ==> y == 4);\n\nloop invariant i5: (x == 4 ==> y == 6);\n\nloop invariant i7: (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant i8: (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant i9: (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant i10: (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant i >= x - 1;\nloop invariant y == 3 * i + 1;\nloop invariant !(x==4 && y==6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant i >= x - 1 is partially proven to be inductive.\nloop invariant y == 3 * i + 1 is neither established nor preserved.\nloop invariant !(x==4 && y==6) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\nloop invariant i3: i >= x - 1;\n\nloop invariant i5: !(x==4 && y==6);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\nloop invariant !(x == 4 && y == 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 3 <= y <= 6 is preserved but not established.\nloop invariant !(x == 4 && y == 6) is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\nloop invariant i4: !(x == 4 && y == 6);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= 4;\nloop invariant y <= 6;\nloop invariant i + x >= 2;\nloop invariant i + x <= 14;\nloop invariant i + x + y >= 3;\nloop invariant i + x + y <= 15;\nloop invariant x == 1 ==> y == 5;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 3 ==> y == 3;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 4 ==> i == 9;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 3 ==> i == 8;\nloop invariant x == 3 ==> y == 5;\nloop invariant x == 2 ==> i == 7;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 1 ==> i == 6;\nloop invariant x == 1 ==> y == 3;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x == 2 ==> y >= 4;\nloop invariant x == 3 ==> y >= 3;\nloop invariant x == 4 ==> y >= 6;\nloop invariant x <= 4 ==> y <= 6;\nloop invariant x <= 4 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y <= 6 is preserved but not established.\nloop invariant i + x >= 2 is preserved but not established.\nloop invariant i + x <= 14 is partially proven to be inductive.\nloop invariant i + x + y >= 3 is partially proven to be inductive.\nloop invariant i + x + y <= 15 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 5 is partially proven to be inductive.\nloop invariant x == 2 ==> y == 4 is partially proven to be inductive.\nloop invariant x == 3 ==> y == 3 is partially proven to be inductive.\nloop invariant x == 4 ==> y == 6 is partially proven to be inductive.\nloop invariant x == 4 ==> i == 9 is partially proven to be inductive.\nloop invariant x == 3 ==> i == 8 is partially proven to be inductive.\nloop invariant x == 3 ==> y == 5 is partially proven to be inductive.\nloop invariant x == 2 ==> i == 7 is partially proven to be inductive.\nloop invariant x == 1 ==> i == 6 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 3 is partially proven to be inductive.\nloop invariant x >= 1 ==> y <= 6 is partially proven to be inductive.\nloop invariant x == 2 ==> y >= 4 is partially proven to be inductive.\nloop invariant x == 3 ==> y >= 3 is partially proven to be inductive.\nloop invariant x == 4 ==> y >= 6 is partially proven to be inductive.\nloop invariant x <= 4 ==> y <= 6 is partially proven to be inductive.\nloop invariant x <= 4 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= 1 ==> y >= 1 is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 1;\n\nloop invariant i4: x <= 4;\n\n\nloop invariant i7: i + x <= 14;\n\n\n\n\n\nloop invariant i13: x == 4 ==> y == 6;\nloop invariant i14: x == 4 ==> i == 9;\n\n\n\n\n\n\n\nloop invariant i22: x == 3 ==> y >= 3;\nloop invariant i23: x == 4 ==> y >= 6;\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant (i >= 0 && i <= 9);\nloop invariant (x >= 1 && x <= 4);\nloop invariant (y >= 0 && y <= 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant (i >= 0 && i <= 9) is established but not preserved.\nloop invariant (x >= 1 && x <= 4) is partially proven to be inductive.\nloop invariant (y >= 0 && y <= 6) is preserved but not established.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\n\nloop invariant i2: (x >= 1 && x <= 4);\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 2 ==> y == 3;\nloop invariant x == 3 ==> y == 4;\nloop invariant x == 1 ==> y == 5 || y == 6;\nloop invariant x == 2 ==> y == 3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == 2 ==> y == 3 is established but not preserved.\nloop invariant x == 3 ==> y == 4 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 5 || y == 6 is preserved but not established.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: x == 3 ==> y == 4;\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( i >= 0 );\nloop invariant ( i <= 10 );\nloop invariant ( x == 1 || x == 2 || x == 3 || x == 4 );\nloop invariant ( y == 3 || y == 4 || y == 5 || y == 6 );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( i >= 0 ) is partially proven to be inductive.\nloop invariant ( i <= 10 ) is partially proven to be inductive.\nloop invariant ( x == 1 || x == 2 || x == 3 || x == 4 ) is partially proven to be inductive.\nloop invariant ( y == 3 || y == 4 || y == 5 || y == 6 ) is preserved but not established.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: ( i >= 0 );\nloop invariant i2: ( i <= 10 );\nloop invariant i3: ( x == 1 || x == 2 || x == 3 || x == 4 );\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( i >= 0 ) && ( i <= 10 );\nloop invariant ( x == ( ( i % 4 ) + 1 ) );\nloop invariant ( y == ( ( ( ( i % 4 ) * 2 ) + 3 ) + ( ( i / 4 ) * 5 ) ) );\nloop invariant !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( i >= 0 ) && ( i <= 10 ) is partially proven to be inductive.\nloop invariant ( x == ( ( i % 4 ) + 1 ) ) is established but not preserved.\nloop invariant ( y == ( ( ( ( i % 4 ) * 2 ) + 3 ) + ( ( i / 4 ) * 5 ) ) ) is neither established nor preserved.\nloop invariant !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) ) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: ( i >= 0 ) && ( i <= 10 );\n\n\nloop invariant i4: !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 96: unexpected token 'in'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\nloop invariant i3: 3 <= y <= 6;\nloop invariant i4: i < 10 ==> x == 1;\nloop invariant i5: i < 10 ==> y == 3;\nloop invariant i6: i < 9 ==> x == 2;\nloop invariant i7: i < 9 ==> y == 4;\nloop invariant i8: i < 8 ==> x == 3;\nloop invariant i9: i < 8 ==> y == 5;\nloop invariant i10: i < 7 ==> x == 1;\nloop invariant i11: i < 7 ==> y == 6;\nloop invariant i12: i < 6 ==> x == 2;\nloop invariant i13: i < 6 ==> y == 3;\nloop invariant i14: i < 5 ==> x == 3;\nloop invariant i15: i < 5 ==> y == 4;\nloop invariant i16: i < 4 ==> x == 1;\nloop invariant i17: i < 4 ==> y == 5;\nloop invariant i18: i < 3 ==> x == 2;\nloop invariant i19: i < 3 ==> y == 6;\nloop invariant i20: i < 2 ==> x == 3;\nloop invariant i21: i < 2 ==> y == 4;\nloop invariant i22: i < 1 ==> x == 1;\nloop invariant i23: i < 1 ==> y == 5;\nloop invariant i24: i < 0 ==> x == 2;\nloop invariant i25: i < 0 ==> y == 3;\nloop invariant i26: i == 10 ==> x == 2;\nloop invariant i27: i == 10 ==> y == 4;\nloop invariant i28: i == 9 ==> x == 3;\nloop invariant i29: i == 9 ==> y == 5;\nloop invariant i30: i == 8 ==> x == 1;\nloop invariant i31: i == 8 ==> y == 6;\nloop invariant i32: i == 7 ==> x == 2;\nloop invariant i33: i == 7 ==> y == 3;\nloop invariant i34: i == 6 ==> x == 3;\nloop invariant i35: i == 6 ==> y == 4;\nloop invariant i36: i == 5 ==> x == 1;\nloop invariant i37: i == 5 ==> y == 5;\nloop invariant i38: i == 4 ==> x == 2;\nloop invariant i39: i == 4 ==> y == 6;\nloop invariant i40: i == 3 ==> x == 3;\nloop invariant i41: i == 3 ==> y == 4;\nloop invariant i42: i == 2 ==> x == 1;\nloop invariant i43: i == 2 ==> y == 5;\nloop invariant i44: i == 1 ==> x == 2;\nloop invariant i45: i == 1 ==> y == 3;\nloop invariant i46: i == 0 ==> x == 3;\nloop invariant i47: i == 0 ==> y == 4;\nloop invariant i48: i == 10 ==> x >= 3;\nloop invariant i49: i == 10 ==> y >= 4;\nloop invariant i50: i == 9 ==> x >= 3;\nloop invariant i51: i == 9 ==> y >= 5;\nloop invariant i52: i == 8 ==> x >= 3;\nloop invariant i53: i == 8 ==> y >= 6;\nloop invariant i54: i == 7 ==> x >= 3;\nloop invariant i55: i == 7 ==> y >= 3;\nloop invariant i56: i == 6 ==> x >= 3;\nloop invariant i57: i == 6 ==> y >= 4;\nloop invariant i58: i == 5 ==> x >= 3;\nloop invariant i59: i == 5 ==> y >= 5;\nloop invariant i60: i == 4 ==> x >= 3;\nloop invariant i61: i == 4 ==> y >= 6;\nloop invariant i62: i == 3 ==> x >= 3;\nloop invariant i63: i == 3 ==> y >= 4;\nloop invariant i64: i == 2 ==> x >= 3;\nloop invariant i65: i == 2 ==> y >= 5;\nloop invariant i66: i == 1 ==> x >= 3;\nloop invariant i67: i == 1 ==> y >= 3;\nloop invariant i68: i == 0 ==> x >= 3;\nloop invariant i69: i == 0 ==> y >= 4;\nloop invariant i70: x == (1 + (i - 1) * (i - 2) / 2);\nloop invariant i71: y == (3 + (i - 1) * (i - 2) / 2);\nloop invariant i72: (i < 10) ==> (x != 4);\nloop invariant i73: (i < 10) ==> (y != 6);\nloop invariant i74: 1 <= y <= 6;\nloop invariant i75: !( (i == 10) && (x == 1) && (y == 6) );\nloop invariant i76: x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i77: y <= 6;\nloop invariant i78: i == 10 ==> !( y == 6 );\nloop invariant i79: 1 <= i <= 10;\nloop invariant i80: (i==10 ==> y in {1,5});\nloop invariant i81: (i==10 ==> x in {1,2});\nloop invariant i82: (i < 10 ==> y in {3,4,6});\nloop invariant i83: (i < 10 ==> x in {3,4});\nloop invariant i84: (i==1 ==> x == 1);\nloop invariant i85: (i==1 ==> y in {3,4});\nloop invariant i86: (i==2 ==> x == 2);\nloop invariant i87: (i==2 ==> y == 3);\nloop invariant i88: (i==3 ==> x == 3);\nloop invariant i89: (i==3 ==> y == 4);\nloop invariant i90: (i==4 ==> x == 1);\nloop invariant i91: (i==4 ==> y == 5);\nloop invariant i92: (i==5 ==> x == 2);\nloop invariant i93: (i==5 ==> y == 6);\nloop invariant i94: (i==6 ==> x == 3);\nloop invariant i95: (i==6 ==> y in {4,6});\nloop invariant i96: (i==7 ==> x == 1);\nloop invariant i97: (i==7 ==> y in {5,6});\nloop invariant i98: (i==8 ==> x == 2);\nloop invariant i99: (i==8 ==> y in {6});\nloop invariant i100: (i==9 ==> x == 3);\nloop invariant i101: (i==9 ==> y in {6});\nloop invariant i102: (i==10 ==> i==10);\nloop invariant i103: (x == 2 ==> y == 3);\nloop invariant i104: (x == 3 ==> y == 4);\nloop invariant i105: (x == 1 ==> y == 5);\nloop invariant i106: (x == 4 ==> y == 6);\nloop invariant i107: (x != 1 ==> x != 3 ==> x != 4 ==> y == 1);\nloop invariant i108: (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant i109: (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant i110: (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant i111: (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\nloop invariant i112: i >= x - 1;\nloop invariant i113: y == 3 * i + 1;\nloop invariant i114: !(x==4 && y==6);\nloop invariant i115: !(x == 4 && y == 6);\nloop invariant i116: x >= 1;\nloop invariant i117: y >= 1;\nloop invariant i118: x <= 4;\nloop invariant i119: i + x >= 2;\nloop invariant i120: i + x <= 14;\nloop invariant i121: i + x + y >= 3;\nloop invariant i122: i + x + y <= 15;\nloop invariant i123: x == 1 ==> y == 5;\nloop invariant i124: x == 2 ==> y == 4;\nloop invariant i125: x == 3 ==> y == 3;\nloop invariant i126: x == 4 ==> y == 6;\nloop invariant i127: x == 4 ==> i == 9;\nloop invariant i128: x == 3 ==> i == 8;\nloop invariant i129: x == 3 ==> y == 5;\nloop invariant i130: x == 2 ==> i == 7;\nloop invariant i131: x == 1 ==> i == 6;\nloop invariant i132: x == 1 ==> y == 3;\nloop invariant i133: x >= 1 ==> y <= 6;\nloop invariant i134: x == 2 ==> y >= 4;\nloop invariant i135: x == 3 ==> y >= 3;\nloop invariant i136: x == 4 ==> y >= 6;\nloop invariant i137: x <= 4 ==> y <= 6;\nloop invariant i138: x <= 4 ==> y >= 1;\nloop invariant i139: x >= 1 ==> y >= 1;\nloop invariant i140: (i >= 0 && i <= 9);\nloop invariant i141: (x >= 1 && x <= 4);\nloop invariant i142: (y >= 0 && y <= 6);\nloop invariant i143: x == 2 ==> y == 3;\nloop invariant i144: x == 3 ==> y == 4;\nloop invariant i145: x == 1 ==> y == 5 || y == 6;\nloop invariant i146: ( i >= 0 );\nloop invariant i147: ( i <= 10 );\nloop invariant i148: ( x == 1 || x == 2 || x == 3 || x == 4 );\nloop invariant i149: ( y == 3 || y == 4 || y == 5 || y == 6 );\nloop invariant i150: ( i >= 0 ) && ( i <= 10 );\nloop invariant i151: ( x == ( ( i % 4 ) + 1 ) );\nloop invariant i152: ( y == ( ( ( ( i % 4 ) * 2 ) + 3 ) + ( ( i / 4 ) * 5 ) ) );\nloop invariant i153: !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 65,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i22: i < 1 ==> x == 1;\n\nloop invariant i24: i < 0 ==> x == 2;\nloop invariant i25: i < 0 ==> y == 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: i == 1 ==> x == 2;\nloop invariant i45: i == 1 ==> y == 3;\n\n\n\n\n\n\n\n\n\nloop invariant i55: i == 7 ==> y >= 3;\n\n\n\n\n\n\n\nloop invariant i63: i == 3 ==> y >= 4;\nloop invariant i64: i == 2 ==> x >= 3;\n\n\nloop invariant i67: i == 1 ==> y >= 3;\n\n\n\n\nloop invariant i72: (i < 10) ==> (x != 4);\n\n\nloop invariant i75: !( (i == 10) && (x == 1) && (y == 6) );\nloop invariant i76: x == 1 || x == 2 || x == 3 || x == 4;\n\nloop invariant i78: i == 10 ==> !( y == 6 );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i102: (i==10 ==> i==10);\nloop invariant i103: (x == 2 ==> y == 3);\nloop invariant i104: (x == 3 ==> y == 4);\n\nloop invariant i106: (x == 4 ==> y == 6);\n\nloop invariant i108: (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant i109: (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant i110: (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant i111: (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\nloop invariant i112: i >= x - 1;\n\nloop invariant i114: !(x==4 && y==6);\nloop invariant i115: !(x == 4 && y == 6);\nloop invariant i116: x >= 1;\n\nloop invariant i118: x <= 4;\n\nloop invariant i120: i + x <= 14;\n\n\n\n\n\nloop invariant i126: x == 4 ==> y == 6;\nloop invariant i127: x == 4 ==> i == 9;\n\n\n\n\n\n\n\nloop invariant i135: x == 3 ==> y >= 3;\nloop invariant i136: x == 4 ==> y >= 6;\n\n\n\n\nloop invariant i141: (x >= 1 && x <= 4);\n\nloop invariant i143: x == 2 ==> y == 3;\nloop invariant i144: x == 3 ==> y == 4;\n\nloop invariant i146: ( i >= 0 );\nloop invariant i147: ( i <= 10 );\nloop invariant i148: ( x == 1 || x == 2 || x == 3 || x == 4 );\n\nloop invariant i150: ( i >= 0 ) && ( i <= 10 );\n\n\nloop invariant i153: !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c"
        ],
        "skipped": [],
        "total": 4,
        "success_count": 1,
        "failure_count": 3,
        "success_rate": 0.25
    }
}