{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant flag < 1;\nloop invariant 0 <= y <= 50;\nloop invariant 0 <= x <= 50;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 99 ==> y == -2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag < 1 ==> y < 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> flag < 1;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant -50 <= y <= 49;\nloop invariant flag >= 0 & flag <= 1;\nloop invariant x >= 0 ==> y >= -50 & y <= 49;\nloop invariant flag >= 1 ==> y < 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y <= 2 * x - 1;\nloop invariant y >= 2 * x - 100;\nloop invariant y <= 2 * x + 1;\nloop invariant y >= 2 * x - 101;\nloop invariant y <= 2 * x + 100;\nloop invariant y >= 2 * x - 102;\nloop invariant y <= 2 * x + 101;\nloop invariant y >= 2 * x - 103;\nloop invariant y <= 2 * x + 102;\nloop invariant y >= 2 * x - 104;\nloop invariant y <= 2 * x + 103;\nloop invariant y >= 2 * x - 105;\nloop invariant y <= 2 * x + 104;\nloop invariant y >= 2 * x - 106;\nloop invariant y <= 2 * x + 105;\nloop invariant y >= 2 * x - 107;\nloop invariant y <= 2 * x + 106;\nloop invariant y >= 2 * x - 108;\nloop invariant y <= 2 * x + 107;\nloop invariant y >= 2 * x - 109;\nloop invariant y <= 2 * x + 108;\nloop invariant y >= 2 * x - 110;\nloop invariant y <= 2 * x + 109;\nloop invariant y >= 2 * x - 111;\nloop invariant y <= 2 * x + 110;\nloop invariant y >= 2 * x - 112;\nloop invariant y <= 2 * x + 111;\nloop invariant y >= 2 * x - 113;\nloop invariant y <= 2 * x + 112;\nloop invariant y >= 2 * x - 114;\nloop invariant y <= 2 * x + 113;\nloop invariant y >= 2 * x - 115;\nloop invariant y <= 2 * x + 114;\nloop invariant y >= 2 * x - 116;\nloop invariant y <= 2 * x + 115;\nloop invariant y >= 2 * x - 117;\nloop invariant y <= 2 * x + 116;\nloop invariant y >= 2 * x - 118;\nloop invariant y <= 2 * x + 117;\nloop invariant y >= 2 * x - 119;\nloop invariant y <= 2 * x + 118;\nloop invariant y >= 2 * x - 120;\nloop invariant y <= 2 * x + 119;\nloop invariant y >= 2 * x - 121;\nloop invariant y <= 2 * x + 120;\nloop invariant y >= 2 * x - 122;\nloop invariant y <= 2 * x + 121;\nloop invariant y >= 2 * x - 123;\nloop invariant y <= 2 * x + 122;\nloop invariant y >= 2 * x - 124;\nloop invariant y <= 2 * x + 123;\nloop invariant y >= 2 * x - 125;\nloop invariant y <= 2 * x + 124;\nloop invariant y >= 2 * x - 126;\nloop invariant y <= 2 * x + 125;\nloop invariant y >= 2 * x - 127;\nloop invariant y <= 2 * x + 126;\nloop invariant y >= 2 * x - 128;\nloop invariant y <= 2 * x + 127;\nloop invariant y >= 2 * x - 129;\nloop invariant y <= 2 * x + 128;\nloop invariant y >= 2 * x - 130;\nloop invariant y <= 2 * x + 129;\nloop invariant y >= 2 * x - 131;\nloop invariant y <= 2 * x + 130;\nloop invariant y >= 2 * x - 132;\nloop invariant y <= 2 * x + 131;\nloop invariant y >= 2 * x - 133;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x <= 99;\nloop invariant y == -2 ==> flag == 1;\nloop invariant y != -2 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x != 99 ==> flag == 0;\nloop invariant x > 49 ==> y == 50;\nloop invariant x <= 49 ==> y == 0;\nloop invariant y == 50 ==> x > 49;\nloop invariant y == 0 ==> x <= 49;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 99 ==> y == -2;\nloop invariant y == 0 ==> x < 50;\nloop invariant x == 49 ==> y == 0;\nloop invariant y == 50 ==> x > 49;\nloop invariant x == 0 ==> y <= 50;\nloop invariant y == -2 ==> x == 99;\nloop invariant x == 50 ==> y == 50;\nloop invariant y == 0 ==> x >= 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> y == -2;\nloop invariant x == 50 ==> y == 50;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant flag == 0 ==> x == y;\nloop invariant flag == 1 ==> y == -2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant -1 <= y <= 1;\nloop invariant flag == (1 + (y == 0));\nloop invariant x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x < 50;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + 1 < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + 1 >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + 1 <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (y == 0) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (y == 0) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (y == 0) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 100;\nloop invariant flag == 0 ==> y == 0;\nloop invariant flag == 1 ==> y == -2;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 1 ==> x == 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 2;\nloop invariant flag == 0 ==> x == 0 && y == 0;\nloop invariant flag == 1 ==> x == 99 && y == -2;\nloop invariant x <= 50 ==> y <= 2;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y < 0 ==> flag == 1;\nloop invariant x < 50 ==> y < 2;\nloop invariant x >= 50 ==> y >= 1;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant flag < 1;\nloop invariant 0 <= y <= 50;\nloop invariant 0 <= x <= 50;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 99 ==> y == -2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant flag < 1 is partially proven to be inductive.\nloop invariant 0 <= y <= 50 is established but not preserved.\nloop invariant 0 <= x <= 50 is established but not preserved.\nloop invariant x == 99 ==> flag == 1 is partially proven to be inductive.\nloop invariant x == 99 ==> y == -2 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag < 1 ==> y < 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> flag < 1;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant flag < 1 ==> y < 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x < 50 is partially proven to be inductive.\nloop invariant flag < 1 ==> flag < 1 is partially proven to be inductive.\nloop invariant flag < 1 ==> y >= 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x >= 0 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\nloop invariant i5: flag < 1 ==> flag < 1;\n\nloop invariant i7: flag < 1 ==> x >= 0;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant -50 <= y <= 49;\nloop invariant flag >= 0 & flag <= 1;\nloop invariant x >= 0 ==> y >= -50 & y <= 49;\nloop invariant flag >= 1 ==> y < 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: invalid operands to binary &; unexpected 𝔹 and 𝔹. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 37,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y <= 2 * x - 1;\nloop invariant y >= 2 * x - 100;\nloop invariant y <= 2 * x + 1;\nloop invariant y >= 2 * x - 101;\nloop invariant y <= 2 * x + 100;\nloop invariant y >= 2 * x - 102;\nloop invariant y <= 2 * x + 101;\nloop invariant y >= 2 * x - 103;\nloop invariant y <= 2 * x + 102;\nloop invariant y >= 2 * x - 104;\nloop invariant y <= 2 * x + 103;\nloop invariant y >= 2 * x - 105;\nloop invariant y <= 2 * x + 104;\nloop invariant y >= 2 * x - 106;\nloop invariant y <= 2 * x + 105;\nloop invariant y >= 2 * x - 107;\nloop invariant y <= 2 * x + 106;\nloop invariant y >= 2 * x - 108;\nloop invariant y <= 2 * x + 107;\nloop invariant y >= 2 * x - 109;\nloop invariant y <= 2 * x + 108;\nloop invariant y >= 2 * x - 110;\nloop invariant y <= 2 * x + 109;\nloop invariant y >= 2 * x - 111;\nloop invariant y <= 2 * x + 110;\nloop invariant y >= 2 * x - 112;\nloop invariant y <= 2 * x + 111;\nloop invariant y >= 2 * x - 113;\nloop invariant y <= 2 * x + 112;\nloop invariant y >= 2 * x - 114;\nloop invariant y <= 2 * x + 113;\nloop invariant y >= 2 * x - 115;\nloop invariant y <= 2 * x + 114;\nloop invariant y >= 2 * x - 116;\nloop invariant y <= 2 * x + 115;\nloop invariant y >= 2 * x - 117;\nloop invariant y <= 2 * x + 116;\nloop invariant y >= 2 * x - 118;\nloop invariant y <= 2 * x + 117;\nloop invariant y >= 2 * x - 119;\nloop invariant y <= 2 * x + 118;\nloop invariant y >= 2 * x - 120;\nloop invariant y <= 2 * x + 119;\nloop invariant y >= 2 * x - 121;\nloop invariant y <= 2 * x + 120;\nloop invariant y >= 2 * x - 122;\nloop invariant y <= 2 * x + 121;\nloop invariant y >= 2 * x - 123;\nloop invariant y <= 2 * x + 122;\nloop invariant y >= 2 * x - 124;\nloop invariant y <= 2 * x + 123;\nloop invariant y >= 2 * x - 125;\nloop invariant y <= 2 * x + 124;\nloop invariant y >= 2 * x - 126;\nloop invariant y <= 2 * x + 125;\nloop invariant y >= 2 * x - 127;\nloop invariant y <= 2 * x + 126;\nloop invariant y >= 2 * x - 128;\nloop invariant y <= 2 * x + 127;\nloop invariant y >= 2 * x - 129;\nloop invariant y <= 2 * x + 128;\nloop invariant y >= 2 * x - 130;\nloop invariant y <= 2 * x + 129;\nloop invariant y >= 2 * x - 131;\nloop invariant y <= 2 * x + 130;\nloop invariant y >= 2 * x - 132;\nloop invariant y <= 2 * x + 131;\nloop invariant y >= 2 * x - 133;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 50 is preserved but not established.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y <= 2 * x - 1 is partially proven to be inductive.\nloop invariant y >= 2 * x - 100 is partially proven to be inductive.\nloop invariant y <= 2 * x + 1 is partially proven to be inductive.\nloop invariant y >= 2 * x - 101 is partially proven to be inductive.\nloop invariant y <= 2 * x + 100 is partially proven to be inductive.\nloop invariant y >= 2 * x - 102 is partially proven to be inductive.\nloop invariant y <= 2 * x + 101 is partially proven to be inductive.\nloop invariant y >= 2 * x - 103 is partially proven to be inductive.\nloop invariant y <= 2 * x + 102 is partially proven to be inductive.\nloop invariant y >= 2 * x - 104 is partially proven to be inductive.\nloop invariant y <= 2 * x + 103 is partially proven to be inductive.\nloop invariant y >= 2 * x - 105 is partially proven to be inductive.\nloop invariant y <= 2 * x + 104 is partially proven to be inductive.\nloop invariant y >= 2 * x - 106 is partially proven to be inductive.\nloop invariant y <= 2 * x + 105 is partially proven to be inductive.\nloop invariant y >= 2 * x - 107 is partially proven to be inductive.\nloop invariant y <= 2 * x + 106 is partially proven to be inductive.\nloop invariant y >= 2 * x - 108 is partially proven to be inductive.\nloop invariant y <= 2 * x + 107 is partially proven to be inductive.\nloop invariant y >= 2 * x - 109 is partially proven to be inductive.\nloop invariant y <= 2 * x + 108 is partially proven to be inductive.\nloop invariant y >= 2 * x - 110 is partially proven to be inductive.\nloop invariant y <= 2 * x + 109 is partially proven to be inductive.\nloop invariant y >= 2 * x - 111 is partially proven to be inductive.\nloop invariant y <= 2 * x + 110 is partially proven to be inductive.\nloop invariant y >= 2 * x - 112 is partially proven to be inductive.\nloop invariant y <= 2 * x + 111 is partially proven to be inductive.\nloop invariant y >= 2 * x - 113 is partially proven to be inductive.\nloop invariant y <= 2 * x + 112 is partially proven to be inductive.\nloop invariant y >= 2 * x - 114 is partially proven to be inductive.\nloop invariant y <= 2 * x + 113 is partially proven to be inductive.\nloop invariant y >= 2 * x - 115 is partially proven to be inductive.\nloop invariant y <= 2 * x + 114 is partially proven to be inductive.\nloop invariant y >= 2 * x - 116 is partially proven to be inductive.\nloop invariant y <= 2 * x + 115 is partially proven to be inductive.\nloop invariant y >= 2 * x - 117 is partially proven to be inductive.\nloop invariant y <= 2 * x + 116 is partially proven to be inductive.\nloop invariant y >= 2 * x - 118 is partially proven to be inductive.\nloop invariant y <= 2 * x + 117 is partially proven to be inductive.\nloop invariant y >= 2 * x - 119 is partially proven to be inductive.\nloop invariant y <= 2 * x + 118 is partially proven to be inductive.\nloop invariant y >= 2 * x - 120 is partially proven to be inductive.\nloop invariant y <= 2 * x + 119 is partially proven to be inductive.\nloop invariant y >= 2 * x - 121 is partially proven to be inductive.\nloop invariant y <= 2 * x + 120 is partially proven to be inductive.\nloop invariant y >= 2 * x - 122 is partially proven to be inductive.\nloop invariant y <= 2 * x + 121 is partially proven to be inductive.\nloop invariant y >= 2 * x - 123 is partially proven to be inductive.\nloop invariant y <= 2 * x + 122 is partially proven to be inductive.\nloop invariant y >= 2 * x - 124 is partially proven to be inductive.\nloop invariant y <= 2 * x + 123 is partially proven to be inductive.\nloop invariant y >= 2 * x - 125 is partially proven to be inductive.\nloop invariant y <= 2 * x + 124 is partially proven to be inductive.\nloop invariant y >= 2 * x - 126 is partially proven to be inductive.\nloop invariant y <= 2 * x + 125 is partially proven to be inductive.\nloop invariant y >= 2 * x - 127 is partially proven to be inductive.\nloop invariant y <= 2 * x + 126 is partially proven to be inductive.\nloop invariant y >= 2 * x - 128 is partially proven to be inductive.\nloop invariant y <= 2 * x + 127 is partially proven to be inductive.\nloop invariant y >= 2 * x - 129 is partially proven to be inductive.\nloop invariant y <= 2 * x + 128 is partially proven to be inductive.\nloop invariant y >= 2 * x - 130 is partially proven to be inductive.\nloop invariant y <= 2 * x + 129 is partially proven to be inductive.\nloop invariant y >= 2 * x - 131 is partially proven to be inductive.\nloop invariant y <= 2 * x + 130 is partially proven to be inductive.\nloop invariant y >= 2 * x - 132 is partially proven to be inductive.\nloop invariant y <= 2 * x + 131 is partially proven to be inductive.\nloop invariant y >= 2 * x - 133 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is established but not preserved.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x <= 99;\nloop invariant y == -2 ==> flag == 1;\nloop invariant y != -2 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x != 99 ==> flag == 0;\nloop invariant x > 49 ==> y == 50;\nloop invariant x <= 49 ==> y == 0;\nloop invariant y == 50 ==> x > 49;\nloop invariant y == 0 ==> x <= 49;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 99 ==> y == -2;\nloop invariant y == 0 ==> x < 50;\nloop invariant x == 49 ==> y == 0;\nloop invariant y == 50 ==> x > 49;\nloop invariant x == 0 ==> y <= 50;\nloop invariant y == -2 ==> x == 99;\nloop invariant x == 50 ==> y == 50;\nloop invariant y == 0 ==> x >= 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> y == -2;\nloop invariant x == 50 ==> y == 50;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 50 is established but not preserved.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y == -2 ==> flag == 1 is partially proven to be inductive.\nloop invariant y != -2 ==> flag == 0 is partially proven to be inductive.\nloop invariant x == 99 ==> flag == 1 is established but not preserved.\nloop invariant x != 99 ==> flag == 0 is partially proven to be inductive.\nloop invariant x > 49 ==> y == 50 is established but not preserved.\nloop invariant x <= 49 ==> y == 0 is established but not preserved.\nloop invariant y == 50 ==> x > 49 is partially proven to be inductive.\nloop invariant y == 0 ==> x <= 49 is partially proven to be inductive.\nloop invariant x == 0 ==> y == 0 is partially proven to be inductive.\nloop invariant x == 99 ==> y == -2 is partially proven to be inductive.\nloop invariant y == 0 ==> x < 50 is partially proven to be inductive.\nloop invariant x == 49 ==> y == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> y <= 50 is partially proven to be inductive.\nloop invariant y == -2 ==> x == 99 is partially proven to be inductive.\nloop invariant x == 50 ==> y == 50 is partially proven to be inductive.\nloop invariant y == 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x == 0 ==> flag == 0 is partially proven to be inductive.\nloop invariant x == 50 ==> flag == 0 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant i3: y == -2 ==> flag == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant flag == 0 ==> x == y;\nloop invariant flag == 1 ==> y == -2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is established but not preserved.\nloop invariant 0 <= y <= 100 is established but not preserved.\nloop invariant flag == 0 ==> x == y is established but not preserved.\nloop invariant flag == 1 ==> y == -2 is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is established but not preserved.\nloop invariant 0 <= y <= 100 is established but not preserved.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant 0 <= x <= 50 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x <= 50 is partially proven to be inductive.\nloop invariant y >= -2 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant -1 <= y <= 1;\nloop invariant flag == (1 + (y == 0));\nloop invariant x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x < 50;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + 1 < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + 1 >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + 1 <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (y == 0) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (y == 0) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (y == 0) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: invalid operands to binary +; unexpected ℤ and 𝔹. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 100;\nloop invariant flag == 0 ==> y == 0;\nloop invariant flag == 1 ==> y == -2;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 1 ==> x == 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= x <= 100 is established but not preserved.\nloop invariant flag == 0 ==> y == 0 is established but not preserved.\nloop invariant flag == 1 ==> y == -2 is partially proven to be inductive.\nloop invariant flag == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant flag == 1 ==> x == 99 is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 2;\nloop invariant flag == 0 ==> x == 0 && y == 0;\nloop invariant flag == 1 ==> x == 99 && y == -2;\nloop invariant x <= 50 ==> y <= 2;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y < 0 ==> flag == 1;\nloop invariant x < 50 ==> y < 2;\nloop invariant x >= 50 ==> y >= 1;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant flag == 0 ==> x == 0 && y == 0 is established but not preserved.\nloop invariant flag == 1 ==> x == 99 && y == -2 is partially proven to be inductive.\nloop invariant x <= 50 ==> y <= 2 is partially proven to be inductive.\nloop invariant x >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant y < 0 ==> flag == 1 is partially proven to be inductive.\nloop invariant x < 50 ==> y < 2 is established but not preserved.\nloop invariant x >= 50 ==> y >= 1 is established but not preserved.\nloop invariant flag < 1 ==> x <= 49 is partially proven to be inductive.\nloop invariant flag < 1 ==> x >= 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> y <= 1 is partially proven to be inductive.\nloop invariant flag < 1 ==> y >= 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x < 50 is partially proven to be inductive.\nloop invariant flag < 1 ==> y < 2 is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: flag < 1 ==> x >= 0;\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 28: invalid operands to binary &; unexpected 𝔹 and 𝔹. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: flag < 1;\nloop invariant i2: 0 <= y <= 50;\nloop invariant i3: 0 <= x <= 50;\nloop invariant i4: x == 99 ==> flag == 1;\nloop invariant i5: x == 99 ==> y == -2;\nloop invariant i6: 0 <= y <= 100000;\nloop invariant i7: x >= (1 + (y - 1) * y / 2);\nloop invariant i8: flag < 1 ==> y < 0;\nloop invariant i9: flag < 1 ==> x < 50;\nloop invariant i10: flag < 1 ==> flag < 1;\nloop invariant i11: flag < 1 ==> y >= 0;\nloop invariant i12: flag < 1 ==> x >= 0;\nloop invariant i13: 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\nloop invariant i14: 0 <= x <= 99;\nloop invariant i15: -50 <= y <= 49;\nloop invariant i16: flag >= 0 & flag <= 1;\nloop invariant i17: x >= 0 ==> y >= -50 & y <= 49;\nloop invariant i18: flag >= 1 ==> y < 0;\nloop invariant i19: 1 <= x <= 50;\nloop invariant i20: 0 <= y <= 100;\nloop invariant i21: x >= (y - 1) * y / 2;\nloop invariant i22: y <= 2 * x - 1;\nloop invariant i23: y >= 2 * x - 100;\nloop invariant i24: y <= 2 * x + 1;\nloop invariant i25: y >= 2 * x - 101;\nloop invariant i26: y <= 2 * x + 100;\nloop invariant i27: y >= 2 * x - 102;\nloop invariant i28: y <= 2 * x + 101;\nloop invariant i29: y >= 2 * x - 103;\nloop invariant i30: y <= 2 * x + 102;\nloop invariant i31: y >= 2 * x - 104;\nloop invariant i32: y <= 2 * x + 103;\nloop invariant i33: y >= 2 * x - 105;\nloop invariant i34: y <= 2 * x + 104;\nloop invariant i35: y >= 2 * x - 106;\nloop invariant i36: y <= 2 * x + 105;\nloop invariant i37: y >= 2 * x - 107;\nloop invariant i38: y <= 2 * x + 106;\nloop invariant i39: y >= 2 * x - 108;\nloop invariant i40: y <= 2 * x + 107;\nloop invariant i41: y >= 2 * x - 109;\nloop invariant i42: y <= 2 * x + 108;\nloop invariant i43: y >= 2 * x - 110;\nloop invariant i44: y <= 2 * x + 109;\nloop invariant i45: y >= 2 * x - 111;\nloop invariant i46: y <= 2 * x + 110;\nloop invariant i47: y >= 2 * x - 112;\nloop invariant i48: y <= 2 * x + 111;\nloop invariant i49: y >= 2 * x - 113;\nloop invariant i50: y <= 2 * x + 112;\nloop invariant i51: y >= 2 * x - 114;\nloop invariant i52: y <= 2 * x + 113;\nloop invariant i53: y >= 2 * x - 115;\nloop invariant i54: y <= 2 * x + 114;\nloop invariant i55: y >= 2 * x - 116;\nloop invariant i56: y <= 2 * x + 115;\nloop invariant i57: y >= 2 * x - 117;\nloop invariant i58: y <= 2 * x + 116;\nloop invariant i59: y >= 2 * x - 118;\nloop invariant i60: y <= 2 * x + 117;\nloop invariant i61: y >= 2 * x - 119;\nloop invariant i62: y <= 2 * x + 118;\nloop invariant i63: y >= 2 * x - 120;\nloop invariant i64: y <= 2 * x + 119;\nloop invariant i65: y >= 2 * x - 121;\nloop invariant i66: y <= 2 * x + 120;\nloop invariant i67: y >= 2 * x - 122;\nloop invariant i68: y <= 2 * x + 121;\nloop invariant i69: y >= 2 * x - 123;\nloop invariant i70: y <= 2 * x + 122;\nloop invariant i71: y >= 2 * x - 124;\nloop invariant i72: y <= 2 * x + 123;\nloop invariant i73: y >= 2 * x - 125;\nloop invariant i74: y <= 2 * x + 124;\nloop invariant i75: y >= 2 * x - 126;\nloop invariant i76: y <= 2 * x + 125;\nloop invariant i77: y >= 2 * x - 127;\nloop invariant i78: y <= 2 * x + 126;\nloop invariant i79: y >= 2 * x - 128;\nloop invariant i80: y <= 2 * x + 127;\nloop invariant i81: y >= 2 * x - 129;\nloop invariant i82: y <= 2 * x + 128;\nloop invariant i83: y >= 2 * x - 130;\nloop invariant i84: y <= 2 * x + 129;\nloop invariant i85: y >= 2 * x - 131;\nloop invariant i86: y <= 2 * x + 130;\nloop invariant i87: y >= 2 * x - 132;\nloop invariant i88: y <= 2 * x + 131;\nloop invariant i89: y >= 2 * x - 133;\nloop invariant i90: x <= 99;\nloop invariant i91: y == -2 ==> flag == 1;\nloop invariant i92: y != -2 ==> flag == 0;\nloop invariant i93: x != 99 ==> flag == 0;\nloop invariant i94: x > 49 ==> y == 50;\nloop invariant i95: x <= 49 ==> y == 0;\nloop invariant i96: y == 50 ==> x > 49;\nloop invariant i97: y == 0 ==> x <= 49;\nloop invariant i98: x == 0 ==> y == 0;\nloop invariant i99: y == 0 ==> x < 50;\nloop invariant i100: x == 49 ==> y == 0;\nloop invariant i101: x == 0 ==> y <= 50;\nloop invariant i102: y == -2 ==> x == 99;\nloop invariant i103: x == 50 ==> y == 50;\nloop invariant i104: y == 0 ==> x >= 0;\nloop invariant i105: x == 0 ==> flag == 0;\nloop invariant i106: x == 50 ==> flag == 0;\nloop invariant i107: flag == 0 ==> x == y;\nloop invariant i108: flag == 1 ==> y == -2;\nloop invariant i109: x >= y;\nloop invariant i110: x <= 50;\nloop invariant i111: y >= -2;\nloop invariant i112: y <= 100000;\nloop invariant i113: -1 <= y <= 1;\nloop invariant i114: flag == (1 + (y == 0));\nloop invariant i115: x + (1 + (y == 0)) < 51;\nloop invariant i116: x + (1 + (y == 0)) >= 0;\nloop invariant i117: x + (1 + (y == 0)) <= 50;\nloop invariant i118: x + (1 + (y == 0)) < 51 ==> x < 50;\nloop invariant i119: x + (1 + (y == 0)) >= 0 ==> x >= 0;\nloop invariant i120: x + (1 + (y == 0)) <= 50 ==> x <= 50;\nloop invariant i121: x + (1 + (y == 0)) < 51 ==> x + 1 < 51;\nloop invariant i122: x + (1 + (y == 0)) >= 0 ==> x + 1 >= 0;\nloop invariant i123: x + (1 + (y == 0)) <= 50 ==> x + 1 <= 50;\nloop invariant i124: x + (1 + (y == 0)) < 51 ==> x + (y == 0) < 51;\nloop invariant i125: x + (1 + (y == 0)) >= 0 ==> x + (y == 0) >= 0;\nloop invariant i126: x + (1 + (y == 0)) <= 50 ==> x + (y == 0) <= 50;\nloop invariant i127: x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant i128: x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant i129: x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant i130: 0 <= y <= 2;\nloop invariant i131: 0 <= x <= 100;\nloop invariant i132: flag == 0 ==> y == 0;\nloop invariant i133: flag == 0 ==> x == 0;\nloop invariant i134: flag == 1 ==> x == 99;\nloop invariant i135: flag == 0 ==> x == 0 && y == 0;\nloop invariant i136: flag == 1 ==> x == 99 && y == -2;\nloop invariant i137: x <= 50 ==> y <= 2;\nloop invariant i138: x >= 0 ==> y >= 0;\nloop invariant i139: y < 0 ==> flag == 1;\nloop invariant i140: x < 50 ==> y < 2;\nloop invariant i141: x >= 50 ==> y >= 1;\nloop invariant i142: flag < 1 ==> x <= 49;\nloop invariant i143: flag < 1 ==> y <= 1;\nloop invariant i144: flag < 1 ==> y < 2;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: flag < 1;\nloop invariant i2: 0 <= y <= 50;\nloop invariant i3: 0 <= x <= 50;\nloop invariant i4: x == 99 ==> flag == 1;\nloop invariant i5: x == 99 ==> y == -2;\nloop invariant i6: 0 <= y <= 100000;\n\n\nloop invariant i9: flag < 1 ==> x < 50;\nloop invariant i10: flag < 1 ==> flag < 1;\nloop invariant i11: flag < 1 ==> y >= 0;\nloop invariant i12: flag < 1 ==> x >= 0;\nloop invariant i13: 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\nloop invariant i14: 0 <= x <= 99;\nloop invariant i15: -50 <= y <= 49;\n\n\nloop invariant i18: flag >= 1 ==> y < 0;\nloop invariant i19: 1 <= x <= 50;\nloop invariant i20: 0 <= y <= 100;\nloop invariant i21: x >= (y - 1) * y / 2;\nloop invariant i22: y <= 2 * x - 1;\nloop invariant i23: y >= 2 * x - 100;\nloop invariant i24: y <= 2 * x + 1;\nloop invariant i25: y >= 2 * x - 101;\nloop invariant i26: y <= 2 * x + 100;\nloop invariant i27: y >= 2 * x - 102;\nloop invariant i28: y <= 2 * x + 101;\nloop invariant i29: y >= 2 * x - 103;\nloop invariant i30: y <= 2 * x + 102;\nloop invariant i31: y >= 2 * x - 104;\nloop invariant i32: y <= 2 * x + 103;\nloop invariant i33: y >= 2 * x - 105;\nloop invariant i34: y <= 2 * x + 104;\nloop invariant i35: y >= 2 * x - 106;\nloop invariant i36: y <= 2 * x + 105;\nloop invariant i37: y >= 2 * x - 107;\nloop invariant i38: y <= 2 * x + 106;\nloop invariant i39: y >= 2 * x - 108;\nloop invariant i40: y <= 2 * x + 107;\nloop invariant i41: y >= 2 * x - 109;\nloop invariant i42: y <= 2 * x + 108;\nloop invariant i43: y >= 2 * x - 110;\nloop invariant i44: y <= 2 * x + 109;\nloop invariant i45: y >= 2 * x - 111;\nloop invariant i46: y <= 2 * x + 110;\nloop invariant i47: y >= 2 * x - 112;\nloop invariant i48: y <= 2 * x + 111;\nloop invariant i49: y >= 2 * x - 113;\nloop invariant i50: y <= 2 * x + 112;\nloop invariant i51: y >= 2 * x - 114;\nloop invariant i52: y <= 2 * x + 113;\nloop invariant i53: y >= 2 * x - 115;\nloop invariant i54: y <= 2 * x + 114;\nloop invariant i55: y >= 2 * x - 116;\nloop invariant i56: y <= 2 * x + 115;\nloop invariant i57: y >= 2 * x - 117;\nloop invariant i58: y <= 2 * x + 116;\nloop invariant i59: y >= 2 * x - 118;\nloop invariant i60: y <= 2 * x + 117;\nloop invariant i61: y >= 2 * x - 119;\nloop invariant i62: y <= 2 * x + 118;\nloop invariant i63: y >= 2 * x - 120;\nloop invariant i64: y <= 2 * x + 119;\nloop invariant i65: y >= 2 * x - 121;\nloop invariant i66: y <= 2 * x + 120;\nloop invariant i67: y >= 2 * x - 122;\nloop invariant i68: y <= 2 * x + 121;\nloop invariant i69: y >= 2 * x - 123;\nloop invariant i70: y <= 2 * x + 122;\nloop invariant i71: y >= 2 * x - 124;\nloop invariant i72: y <= 2 * x + 123;\nloop invariant i73: y >= 2 * x - 125;\nloop invariant i74: y <= 2 * x + 124;\nloop invariant i75: y >= 2 * x - 126;\nloop invariant i76: y <= 2 * x + 125;\nloop invariant i77: y >= 2 * x - 127;\nloop invariant i78: y <= 2 * x + 126;\nloop invariant i79: y >= 2 * x - 128;\nloop invariant i80: y <= 2 * x + 127;\nloop invariant i81: y >= 2 * x - 129;\nloop invariant i82: y <= 2 * x + 128;\nloop invariant i83: y >= 2 * x - 130;\nloop invariant i84: y <= 2 * x + 129;\nloop invariant i85: y >= 2 * x - 131;\nloop invariant i86: y <= 2 * x + 130;\nloop invariant i87: y >= 2 * x - 132;\nloop invariant i88: y <= 2 * x + 131;\nloop invariant i89: y >= 2 * x - 133;\nloop invariant i90: x <= 99;\nloop invariant i91: y == -2 ==> flag == 1;\nloop invariant i92: y != -2 ==> flag == 0;\nloop invariant i93: x != 99 ==> flag == 0;\nloop invariant i94: x > 49 ==> y == 50;\nloop invariant i95: x <= 49 ==> y == 0;\nloop invariant i96: y == 50 ==> x > 49;\nloop invariant i97: y == 0 ==> x <= 49;\nloop invariant i98: x == 0 ==> y == 0;\nloop invariant i99: y == 0 ==> x < 50;\nloop invariant i100: x == 49 ==> y == 0;\nloop invariant i101: x == 0 ==> y <= 50;\nloop invariant i102: y == -2 ==> x == 99;\nloop invariant i103: x == 50 ==> y == 50;\nloop invariant i104: y == 0 ==> x >= 0;\nloop invariant i105: x == 0 ==> flag == 0;\nloop invariant i106: x == 50 ==> flag == 0;\nloop invariant i107: flag == 0 ==> x == y;\nloop invariant i108: flag == 1 ==> y == -2;\nloop invariant i109: x >= y;\nloop invariant i110: x <= 50;\nloop invariant i111: y >= -2;\nloop invariant i112: y <= 100000;\nloop invariant i113: -1 <= y <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i130: 0 <= y <= 2;\nloop invariant i131: 0 <= x <= 100;\nloop invariant i132: flag == 0 ==> y == 0;\nloop invariant i133: flag == 0 ==> x == 0;\nloop invariant i134: flag == 1 ==> x == 99;\nloop invariant i135: flag == 0 ==> x == 0 && y == 0;\nloop invariant i136: flag == 1 ==> x == 99 && y == -2;\nloop invariant i137: x <= 50 ==> y <= 2;\nloop invariant i138: x >= 0 ==> y >= 0;\nloop invariant i139: y < 0 ==> flag == 1;\nloop invariant i140: x < 50 ==> y < 2;\nloop invariant i141: x >= 50 ==> y >= 1;\nloop invariant i142: flag < 1 ==> x <= 49;\nloop invariant i143: flag < 1 ==> y <= 1;\nloop invariant i144: flag < 1 ==> y < 2;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c"
        ],
        "skipped": [],
        "total": 16,
        "success_count": 4,
        "failure_count": 12,
        "success_rate": 0.25
    }
}