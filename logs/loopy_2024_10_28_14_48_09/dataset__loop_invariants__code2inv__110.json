{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/110.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn == i - 1 ==> sn == n;\nloop invariant sn != n ==> sn <= i - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n <= sn <= n * (n + 1) / 2;\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn != n) ==> (i <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 1;\nloop invariant sn <= n;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant i == (n - sn + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1 && i <= n+1;\nloop invariant sn >= 0 && sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 0;\nloop invariant 0 <= sn <= n;\nloop invariant i == (1 + sn);\nloop invariant i == n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i <= n ==> sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - (n - i + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i - 1);\nloop invariant i - 1 == sn;\nloop invariant i - 1 <= n;\nloop invariant sn <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn == i - 1 ==> sn == n;\nloop invariant sn != n ==> sn <= i - 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == i - 1 ==> sn == n is preserved but not established.\nloop invariant sn != n ==> sn <= i - 2 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i >= 1;\nloop invariant i4: sn >= 0;\nloop invariant i5: sn <= i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n <= sn <= n * (n + 1) / 2;\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn != n) ==> (i <= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant n <= sn <= n * (n + 1) / 2 is preserved but not established.\nloop invariant (sn == n) ==> (i == n + 1) is partially proven to be inductive.\nloop invariant (sn != n) ==> (i <= n) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 1;\nloop invariant sn <= n;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant i == (n - sn + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (n - sn + 1) is preserved but not established.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 1 && i <= n+1;\nloop invariant sn >= 0 && sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 && i <= n+1 is preserved but not established.\nloop invariant sn >= 0 && sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 0;\nloop invariant 0 <= sn <= n;\nloop invariant i == (1 + sn);\nloop invariant i == n + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i == (1 + sn) is partially proven to be inductive.\nloop invariant i == n + 1 is preserved but not established.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: i == (1 + sn);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i <= n ==> sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i == n + 1 ==> sn == n is partially proven to be inductive.\nloop invariant i <= n ==> sn <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: sn == i - 1;\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: i == n + 1 ==> sn == n;\nloop invariant i7: i <= n ==> sn <= n;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - (n - i + 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == (n - (n - i + 1)) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn == (n - (n - i + 1));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i - 1);\nloop invariant i - 1 == sn;\nloop invariant i - 1 <= n;\nloop invariant sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n is preserved but not established.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i - 1 == sn is partially proven to be inductive.\nloop invariant i - 1 <= n is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: i - 1 == sn;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == i - 1 ==> sn == n is preserved but not established.\nloop invariant sn != n ==> sn <= i - 2 is partially proven to be inductive.\nloop invariant n <= sn <= n * (n + 1) / 2 is partially proven to be inductive.\nloop invariant (sn == n) ==> (i == n + 1) is partially proven to be inductive.\nloop invariant (sn != n) ==> (i <= n) is partially proven to be inductive.\nloop invariant sn >= 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2 is partially proven to be inductive.\nloop invariant 1 <= i <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (n - sn + 1) is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant i >= 1 && i <= n+1 is partially proven to be inductive.\nloop invariant sn >= 0 && sn <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i == (1 + sn) is partially proven to be inductive.\nloop invariant i == n + 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant i == n + 1 ==> sn == n is partially proven to be inductive.\nloop invariant i <= n ==> sn <= n is partially proven to be inductive.\nloop invariant sn == (n - (n - i + 1)) is partially proven to be inductive.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant i - 1 == sn is partially proven to be inductive.\nloop invariant i - 1 <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= sn <= n;\nloop invariant i3: sn == i - 1;\nloop invariant i4: i <= n;\nloop invariant i5: i >= 1;\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= i - 1;\nloop invariant i8: sn == i - 1 ==> sn == n;\nloop invariant i9: sn != n ==> sn <= i - 2;\nloop invariant i10: n <= sn <= n * (n + 1) / 2;\nloop invariant i11: (sn == n) ==> (i == n + 1);\nloop invariant i12: (sn != n) ==> (i <= n);\nloop invariant i13: sn >= 1;\nloop invariant i14: sn <= n;\nloop invariant i15: (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant i16: 1 <= i <= n;\nloop invariant i17: sn == (i - 1);\nloop invariant i18: i == (n - sn + 1);\nloop invariant i19: i == sn + 1;\nloop invariant i20: i >= 1 && i <= n+1;\nloop invariant i21: sn >= 0 && sn <= n;\nloop invariant i22: n >= 0;\nloop invariant i23: i == (1 + sn);\nloop invariant i24: i == n + 1;\nloop invariant i25: i <= n + 1;\nloop invariant i26: i == n + 1 ==> sn == n;\nloop invariant i27: i <= n ==> sn <= n;\nloop invariant i28: sn == (n - (n - i + 1));\nloop invariant i29: 1 <= i <= n+1;\nloop invariant i30: i - 1 == sn;\nloop invariant i31: i - 1 <= n;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\nloop invariant i5: i >= 1;\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= i - 1;\n\n\n\nloop invariant i11: (sn == n) ==> (i == n + 1);\n\n\n\n\n\nloop invariant i17: sn == (i - 1);\n\nloop invariant i19: i == sn + 1;\n\n\n\nloop invariant i23: i == (1 + sn);\n\n\nloop invariant i26: i == n + 1 ==> sn == n;\nloop invariant i27: i <= n ==> sn <= n;\nloop invariant i28: sn == (n - (n - i + 1));\n\nloop invariant i30: i - 1 == sn;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/code2inv/104.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/110.c"
        ],
        "skipped": [],
        "total": 19,
        "success_count": 5,
        "failure_count": 14,
        "success_rate": 0.2631578947368421
    }
}