{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 < y <= 1000000;\nloop invariant x >= -50 + (y - 1) * y / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= LARGE_INT;\nloop invariant (x + y) >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < LARGE_INT;\nloop invariant -1000 < x < LARGE_INT;\nloop invariant x >= (y * (y - 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y;\nloop invariant x <= -50 + y;\nloop invariant x < 0;\nloop invariant x < 0 ==> (x + y < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant -1000 <= y <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= y * (-LARGE_INT) / 2;\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant y > -1000;\nloop invariant y < LARGE_INT;\nloop invariant x >= -50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y && y < LARGE_INT;\nloop invariant x >= (-50 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant x >= y;\nloop invariant x >= -50 + y - 1;\n*/\n```",
            "```\n/*@\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 1000000;\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant - x <= 0;\nloop invariant 0 <= y < LARGE_INT;\nloop invariant 1000 < y < LARGE_INT ==> x >= 0;\nloop invariant x == -50 ==> y == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant - x >= -50;\nloop invariant - x < 0;\nloop invariant - -1000 < y && y < LARGE_INT;\nloop invariant - y > 0;\n*/\n```",
            "```\n/*@\nloop invariant ( y > -1000 ) ==> ( x >= -50 );\nloop invariant ( y > 0 ) ==> ( x >= y );\n*/\n```",
            "```\n/*@\nloop invariant -1000 <= y <= LARGE_INT;\nloop invariant 0 <= x;\nloop invariant y > 0 ==> (x >= 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 < y <= 1000000;\nloop invariant x >= -50 + (y - 1) * y / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 < y <= 1000000 is preserved but not established.\nloop invariant x >= -50 + (y - 1) * y / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= LARGE_INT;\nloop invariant (x + y) >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is neither established nor preserved.\nloop invariant -50 <= x <= LARGE_INT is partially proven to be inductive.\nloop invariant (x + y) >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y < LARGE_INT;\nloop invariant -1000 < x < LARGE_INT;\nloop invariant x >= (y * (y - 1)) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y < LARGE_INT is preserved but not established.\nloop invariant -1000 < x < LARGE_INT is partially proven to be inductive.\nloop invariant x >= (y * (y - 1)) / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y;\nloop invariant x <= -50 + y;\nloop invariant x < 0;\nloop invariant x < 0 ==> (x + y < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= -50 + y is preserved but not established.\nloop invariant x <= -50 + y is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0) is preserved but not established.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\nloop invariant i9: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant i10: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant i11: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i12: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i13: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i14: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i15: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i16: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i17: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i18: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i19: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i20: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i21: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i22: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant -1000 <= y <= LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant -1000 <= y <= LARGE_INT is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= y * (-LARGE_INT) / 2;\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x < 0 is established but not preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y < LARGE_INT is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= y * (-LARGE_INT) / 2 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y > -1000;\nloop invariant y < LARGE_INT;\nloop invariant x >= -50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y > -1000 is partially proven to be inductive.\nloop invariant y < LARGE_INT is established but not preserved.\nloop invariant x >= -50 is established but not preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: y > -1000;\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 1000000 is neither established nor preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y && y < LARGE_INT;\nloop invariant x >= (-50 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant x >= y;\nloop invariant x >= -50 + y - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y && y < LARGE_INT is preserved but not established.\nloop invariant x >= (-50 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= y is preserved but not established.\nloop invariant x >= -50 + y - 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unbound logic function old. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 1000000;\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 1000000 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant - x <= 0;\nloop invariant 0 <= y < LARGE_INT;\nloop invariant 1000 < y < LARGE_INT ==> x >= 0;\nloop invariant x == -50 ==> y == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant - x >= -50;\nloop invariant - x < 0;\nloop invariant - -1000 < y && y < LARGE_INT;\nloop invariant - y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant - x >= -50 is partially proven to be inductive.\nloop invariant - x < 0 is preserved but not established.\nloop invariant - -1000 < y && y < LARGE_INT is partially proven to be inductive.\nloop invariant - y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( y > -1000 ) ==> ( x >= -50 );\nloop invariant ( y > 0 ) ==> ( x >= y );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( y > -1000 ) ==> ( x >= -50 ) is established but not preserved.\nloop invariant ( y > 0 ) ==> ( x >= y ) is neither established nor preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant -1000 <= y <= LARGE_INT;\nloop invariant 0 <= x;\nloop invariant y > 0 ==> (x >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant -1000 <= y <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= x is preserved but not established.\nloop invariant y > 0 ==> (x >= 0) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 67: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 < y <= 1000000;\nloop invariant i2: x >= -50 + (y - 1) * y / 2;\nloop invariant i3: 0 <= y <= LARGE_INT;\nloop invariant i4: -50 <= x <= LARGE_INT;\nloop invariant i5: (x + y) >= 0;\nloop invariant i6: 0 <= y < LARGE_INT;\nloop invariant i7: -1000 < x < LARGE_INT;\nloop invariant i8: x >= (y * (y - 1)) / 2;\nloop invariant i9: 0 <= y;\nloop invariant i10: x >= -50;\nloop invariant i11: x >= -50 + y;\nloop invariant i12: x <= -50 + y;\nloop invariant i13: x < 0;\nloop invariant i14: x < 0 ==> (x + y < 0);\nloop invariant i15: x < 0 ==> (x + y < 0 ==> y > 0);\nloop invariant i16: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i17: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant i18: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant i19: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i20: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i21: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i22: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i23: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i24: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i25: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i26: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i27: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i28: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i29: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i30: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i31: 0 <= x <= -50;\nloop invariant i32: -1000 <= y <= LARGE_INT;\nloop invariant i33: y >= 0;\nloop invariant i34: y < LARGE_INT;\nloop invariant i35: x >= y * (-LARGE_INT) / 2;\nloop invariant i36: y > 0;\nloop invariant i37: y > -1000;\nloop invariant i38: 0 <= y <= 1000000;\nloop invariant i39: 0 <= y && y < LARGE_INT;\nloop invariant i40: x >= (-50 + (y - 1) * y / 2);\nloop invariant i41: x >= y;\nloop invariant i42: x >= -50 + y - 1;\nloop invariant i43: -1000 < y < 1000000;\nloop invariant i44: x + y == old(x) + old(y);\nloop invariant i45: x >= old(x);\nloop invariant i46: y >= old(y);\nloop invariant i47: 1 <= x <= 1000000;\nloop invariant i48: x >= 0;\nloop invariant i49: - x <= 0;\nloop invariant i50: 1000 < y < LARGE_INT ==> x >= 0;\nloop invariant i51: x == -50 ==> y == unknown_int();\nloop invariant i52: - x >= -50;\nloop invariant i53: - x < 0;\nloop invariant i54: - -1000 < y && y < LARGE_INT;\nloop invariant i55: - y > 0;\nloop invariant i56: ( y > -1000 ) ==> ( x >= -50 );\nloop invariant i57: ( y > 0 ) ==> ( x >= y );\nloop invariant i58: 0 <= x;\nloop invariant i59: y > 0 ==> (x >= 0);\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant i18: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant i19: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i20: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i21: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i22: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i23: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i24: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i25: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i26: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i27: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i28: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i29: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i30: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\n\n\n\n\n\n\nloop invariant i37: y > -1000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 17,
        "success_count": 4,
        "failure_count": 13,
        "success_rate": 0.23529411764705882
    }
}