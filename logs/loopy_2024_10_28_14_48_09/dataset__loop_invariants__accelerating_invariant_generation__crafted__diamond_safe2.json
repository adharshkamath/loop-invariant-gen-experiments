{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant x % 2 == y % 2;\nloop invariant x >= y;\nloop invariant x <= 99;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x - y % 2 == 0;\nloop invariant y % 2 == 0 ==> x == 0;\nloop invariant y % 2 == 1 ==> x == 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 2;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 4;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 6;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 8;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 10;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 12;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 4 == y % 4;\nloop invariant x % 8 == y % 8;\nloop invariant x % 16 == y % 16;\nloop invariant x % 32 == y % 32;\nloop invariant x % 64 == y % 64;\nloop invariant x % 128 == y % 128;\nloop invariant x % 256 == y % 256;\nloop invariant x % 512 == y % 512;\nloop invariant x % 1024 == y % 1024;\nloop invariant x % 2048 == y % 2048;\nloop invariant x % 4096 == y % 4096;\nloop invariant x % 8192 == y % 8192;\nloop invariant x % 16384 == y % 16384;\nloop invariant x % 32768 == y % 32768;\nloop invariant x % 65536 == y % 65536;\nloop invariant x % 131072 == y % 131072;\nloop invariant x % 262144 == y % 262144;\nloop invariant x % 524288 == y % 524288;\nloop invariant x % 1048576 == y % 1048576;\nloop invariant x % 2097152 == y % 2097152;\nloop invariant x % 4194304 == y % 4194304;\nloop invariant x % 8388608 == y % 8388608;\nloop invariant x % 16777216 == y % 16777216;\nloop invariant x % 33554432 == y % 33554432;\nloop invariant x % 67108864 == y % 67108864;\nloop invariant x % 134217728 == y % 134217728;\nloop invariant x % 268435456 == y % 268435456;\nloop invariant x % 536870912 == y % 536870912;\nloop invariant x % 1073741824 == y % 1073741824;\nloop invariant x % 2147483648 == y % 2147483648;\nloop invariant x % 4294967296 == y % 4294967296;\nloop invariant x % 8589934592 == y % 8589934592;\nloop invariant x % 17179869184 == y % 17179869184;\nloop invariant x % 34359738368 == y % 34359738368;\nloop invariant x % 68719476736 == y % 68719476736;\nloop invariant x % 137438953472 == y % 137438953472;\nloop invariant x % 274877906944 == y % 274877906944;\nloop invariant x % 549755813888 == y % 549755813888;\nloop invariant x % 1099511627776 == y % 1099511627776;\nloop invariant x % 2199023255552 == y % 2199023255552;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (2 + (y - 1) * y / 2);\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant x + 2 <= 99;\nloop invariant x - 2 >= 0;\nloop invariant x + 2 <= x + 1;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x + 4 <= x + 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x - 4 <= x - 2;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 2 <= x - 2;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 98;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant ( x + 2 * (y % 2) >= 0 );\nloop invariant ( x - 2 * ((y % 2) + 1) <= 98 );\nloop invariant ( y % 2 == (x % 2) );\nloop invariant ( x % 4 == y % 4 );\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant x % 2 == y % 2;\nloop invariant x >= y;\nloop invariant x <= 99;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y == 0 is preserved but not established.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x - y % 2 == 0;\nloop invariant y % 2 == 0 ==> x == 0;\nloop invariant y % 2 == 1 ==> x == 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 2;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 4;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 6;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 8;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 10;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 12;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x - y % 2 == 0 is established but not preserved.\nloop invariant y % 2 == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x - y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 12 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 4 == y % 4;\nloop invariant x % 8 == y % 8;\nloop invariant x % 16 == y % 16;\nloop invariant x % 32 == y % 32;\nloop invariant x % 64 == y % 64;\nloop invariant x % 128 == y % 128;\nloop invariant x % 256 == y % 256;\nloop invariant x % 512 == y % 512;\nloop invariant x % 1024 == y % 1024;\nloop invariant x % 2048 == y % 2048;\nloop invariant x % 4096 == y % 4096;\nloop invariant x % 8192 == y % 8192;\nloop invariant x % 16384 == y % 16384;\nloop invariant x % 32768 == y % 32768;\nloop invariant x % 65536 == y % 65536;\nloop invariant x % 131072 == y % 131072;\nloop invariant x % 262144 == y % 262144;\nloop invariant x % 524288 == y % 524288;\nloop invariant x % 1048576 == y % 1048576;\nloop invariant x % 2097152 == y % 2097152;\nloop invariant x % 4194304 == y % 4194304;\nloop invariant x % 8388608 == y % 8388608;\nloop invariant x % 16777216 == y % 16777216;\nloop invariant x % 33554432 == y % 33554432;\nloop invariant x % 67108864 == y % 67108864;\nloop invariant x % 134217728 == y % 134217728;\nloop invariant x % 268435456 == y % 268435456;\nloop invariant x % 536870912 == y % 536870912;\nloop invariant x % 1073741824 == y % 1073741824;\nloop invariant x % 2147483648 == y % 2147483648;\nloop invariant x % 4294967296 == y % 4294967296;\nloop invariant x % 8589934592 == y % 8589934592;\nloop invariant x % 17179869184 == y % 17179869184;\nloop invariant x % 34359738368 == y % 34359738368;\nloop invariant x % 68719476736 == y % 68719476736;\nloop invariant x % 137438953472 == y % 137438953472;\nloop invariant x % 274877906944 == y % 274877906944;\nloop invariant x % 549755813888 == y % 549755813888;\nloop invariant x % 1099511627776 == y % 1099511627776;\nloop invariant x % 2199023255552 == y % 2199023255552;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant x % 4 == y % 4 is neither established nor preserved.\nloop invariant x % 8 == y % 8 is neither established nor preserved.\nloop invariant x % 16 == y % 16 is neither established nor preserved.\nloop invariant x % 32 == y % 32 is neither established nor preserved.\nloop invariant x % 64 == y % 64 is neither established nor preserved.\nloop invariant x % 128 == y % 128 is neither established nor preserved.\nloop invariant x % 256 == y % 256 is established but not preserved.\nloop invariant x % 512 == y % 512 is established but not preserved.\nloop invariant x % 1024 == y % 1024 is established but not preserved.\nloop invariant x % 2048 == y % 2048 is established but not preserved.\nloop invariant x % 4096 == y % 4096 is established but not preserved.\nloop invariant x % 8192 == y % 8192 is established but not preserved.\nloop invariant x % 16384 == y % 16384 is established but not preserved.\nloop invariant x % 32768 == y % 32768 is established but not preserved.\nloop invariant x % 65536 == y % 65536 is established but not preserved.\nloop invariant x % 131072 == y % 131072 is established but not preserved.\nloop invariant x % 262144 == y % 262144 is established but not preserved.\nloop invariant x % 524288 == y % 524288 is established but not preserved.\nloop invariant x % 1048576 == y % 1048576 is established but not preserved.\nloop invariant x % 2097152 == y % 2097152 is established but not preserved.\nloop invariant x % 4194304 == y % 4194304 is established but not preserved.\nloop invariant x % 8388608 == y % 8388608 is established but not preserved.\nloop invariant x % 16777216 == y % 16777216 is established but not preserved.\nloop invariant x % 33554432 == y % 33554432 is established but not preserved.\nloop invariant x % 67108864 == y % 67108864 is established but not preserved.\nloop invariant x % 134217728 == y % 134217728 is established but not preserved.\nloop invariant x % 268435456 == y % 268435456 is established but not preserved.\nloop invariant x % 536870912 == y % 536870912 is established but not preserved.\nloop invariant x % 1073741824 == y % 1073741824 is established but not preserved.\nloop invariant x % 2147483648 == y % 2147483648 is established but not preserved.\nloop invariant x % 4294967296 == y % 4294967296 is established but not preserved.\nloop invariant x % 8589934592 == y % 8589934592 is partially proven to be inductive.\nloop invariant x % 17179869184 == y % 17179869184 is partially proven to be inductive.\nloop invariant x % 34359738368 == y % 34359738368 is partially proven to be inductive.\nloop invariant x % 68719476736 == y % 68719476736 is partially proven to be inductive.\nloop invariant x % 137438953472 == y % 137438953472 is partially proven to be inductive.\nloop invariant x % 274877906944 == y % 274877906944 is partially proven to be inductive.\nloop invariant x % 549755813888 == y % 549755813888 is partially proven to be inductive.\nloop invariant x % 1099511627776 == y % 1099511627776 is partially proven to be inductive.\nloop invariant x % 2199023255552 == y % 2199023255552 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (2 + (y - 1) * y / 2);\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= (2 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= y;\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant x == y is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: y >= 0;\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant x + 2 <= 99;\nloop invariant x - 2 >= 0;\nloop invariant x + 2 <= x + 1;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x + 4 <= x + 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x - 4 <= x - 2;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 2 <= x - 2;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is preserved but not established.\nloop invariant x + 2 <= 99 is partially proven to be inductive.\nloop invariant x - 2 >= 0 is preserved but not established.\nloop invariant x + 2 <= x + 1 is partially proven to be inductive.\nloop invariant x + 2 <= x - 2 is partially proven to be inductive.\nloop invariant x + 2 <= x + 2 is partially proven to be inductive.\nloop invariant x + 2 <= x - 4 is partially proven to be inductive.\nloop invariant x + 4 <= x + 2 is partially proven to be inductive.\nloop invariant x - 4 <= x - 2 is partially proven to be inductive.\nloop invariant x - 4 <= x - 4 is partially proven to be inductive.\nloop invariant x - 2 <= x - 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\nloop invariant i8: x + 2 <= x + 2;\n\n\nloop invariant i11: x - 4 <= x - 2;\nloop invariant i12: x - 4 <= x - 4;\nloop invariant i13: x - 2 <= x - 2;\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 98 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y == 0 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 98;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 98 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 198 is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( x + 2 * (y % 2) >= 0 );\nloop invariant ( x - 2 * ((y % 2) + 1) <= 98 );\nloop invariant ( y % 2 == (x % 2) );\nloop invariant ( x % 4 == y % 4 );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( x + 2 * (y % 2) >= 0 ) is partially proven to be inductive.\nloop invariant ( x - 2 * ((y % 2) + 1) <= 98 ) is established but not preserved.\nloop invariant ( y % 2 == (x % 2) ) is neither established nor preserved.\nloop invariant ( x % 4 == y % 4 ) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: ( x + 2 * (y % 2) >= 0 );\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 73: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: y == 0;\nloop invariant i3: x % 2 == y % 2;\nloop invariant i4: x >= y;\nloop invariant i5: x <= 99;\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: y <= 99;\nloop invariant i9: 0 <= y <= 99;\nloop invariant i10: x - y % 2 == 0;\nloop invariant i11: y % 2 == 0 ==> x == 0;\nloop invariant i12: y % 2 == 1 ==> x == 1;\nloop invariant i13: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i14: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i15: y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant i16: y % 2 == 1 ==> x - y % 2 == 2;\nloop invariant i17: y % 2 == 1 ==> x - y % 2 == 4;\nloop invariant i18: y % 2 == 1 ==> x - y % 2 == 6;\nloop invariant i19: y % 2 == 1 ==> x - y % 2 == 8;\nloop invariant i20: y % 2 == 1 ==> x - y % 2 == 10;\nloop invariant i21: y % 2 == 1 ==> x - y % 2 == 12;\nloop invariant i22: x % 4 == y % 4;\nloop invariant i23: x % 8 == y % 8;\nloop invariant i24: x % 16 == y % 16;\nloop invariant i25: x % 32 == y % 32;\nloop invariant i26: x % 64 == y % 64;\nloop invariant i27: x % 128 == y % 128;\nloop invariant i28: x % 256 == y % 256;\nloop invariant i29: x % 512 == y % 512;\nloop invariant i30: x % 1024 == y % 1024;\nloop invariant i31: x % 2048 == y % 2048;\nloop invariant i32: x % 4096 == y % 4096;\nloop invariant i33: x % 8192 == y % 8192;\nloop invariant i34: x % 16384 == y % 16384;\nloop invariant i35: x % 32768 == y % 32768;\nloop invariant i36: x % 65536 == y % 65536;\nloop invariant i37: x % 131072 == y % 131072;\nloop invariant i38: x % 262144 == y % 262144;\nloop invariant i39: x % 524288 == y % 524288;\nloop invariant i40: x % 1048576 == y % 1048576;\nloop invariant i41: x % 2097152 == y % 2097152;\nloop invariant i42: x % 4194304 == y % 4194304;\nloop invariant i43: x % 8388608 == y % 8388608;\nloop invariant i44: x % 16777216 == y % 16777216;\nloop invariant i45: x % 33554432 == y % 33554432;\nloop invariant i46: x % 67108864 == y % 67108864;\nloop invariant i47: x % 134217728 == y % 134217728;\nloop invariant i48: x % 268435456 == y % 268435456;\nloop invariant i49: x % 536870912 == y % 536870912;\nloop invariant i50: x % 1073741824 == y % 1073741824;\nloop invariant i51: x % 2147483648 == y % 2147483648;\nloop invariant i52: x % 4294967296 == y % 4294967296;\nloop invariant i53: x % 8589934592 == y % 8589934592;\nloop invariant i54: x % 17179869184 == y % 17179869184;\nloop invariant i55: x % 34359738368 == y % 34359738368;\nloop invariant i56: x % 68719476736 == y % 68719476736;\nloop invariant i57: x % 137438953472 == y % 137438953472;\nloop invariant i58: x % 274877906944 == y % 274877906944;\nloop invariant i59: x % 549755813888 == y % 549755813888;\nloop invariant i60: x % 1099511627776 == y % 1099511627776;\nloop invariant i61: x % 2199023255552 == y % 2199023255552;\nloop invariant i62: i1;\nloop invariant i63: i2;\nloop invariant i64: i3;\nloop invariant i65: i4;\nloop invariant i66: i5;\nloop invariant i67: i6;\nloop invariant i68: i7;\nloop invariant i69: i8;\nloop invariant i70: i9;\nloop invariant i71: i10;\nloop invariant i72: i11;\nloop invariant i73: i12;\nloop invariant i74: i13;\nloop invariant i75: i14;\nloop invariant i76: i15;\nloop invariant i77: i16;\nloop invariant i78: i17;\nloop invariant i79: i18;\nloop invariant i80: i19;\nloop invariant i81: i20;\nloop invariant i82: i21;\nloop invariant i83: i22;\nloop invariant i84: i23;\nloop invariant i85: i24;\nloop invariant i86: i25;\nloop invariant i87: i26;\nloop invariant i88: i27;\nloop invariant i89: i28;\nloop invariant i90: i29;\nloop invariant i91: i30;\nloop invariant i92: i31;\nloop invariant i93: i32;\nloop invariant i94: i33;\nloop invariant i95: i34;\nloop invariant i96: i35;\nloop invariant i97: i36;\nloop invariant i98: i37;\nloop invariant i99: i38;\nloop invariant i100: i39;\nloop invariant i101: i40;\nloop invariant i102: i41;\nloop invariant i103: i42;\nloop invariant i104: i43;\nloop invariant i105: i44;\nloop invariant i106: i45;\nloop invariant i107: i46;\nloop invariant i108: i47;\nloop invariant i109: i48;\nloop invariant i110: i49;\nloop invariant i111: i50;\nloop invariant i112: i51;\nloop invariant i113: i52;\nloop invariant i114: i53;\nloop invariant i115: i54;\nloop invariant i116: i55;\nloop invariant i117: i56;\nloop invariant i118: i57;\nloop invariant i119: i58;\nloop invariant i120: i59;\nloop invariant i121: i60;\nloop invariant i122: i61;\nloop invariant i123: i62;\nloop invariant i124: i63;\nloop invariant i125: i64;\nloop invariant i126: i65;\nloop invariant i127: i66;\nloop invariant i128: i67;\nloop invariant i129: i68;\nloop invariant i130: i69;\nloop invariant i131: i70;\nloop invariant i132: i71;\nloop invariant i133: i72;\nloop invariant i134: i73;\nloop invariant i135: i74;\nloop invariant i136: i75;\nloop invariant i137: i76;\nloop invariant i138: i77;\nloop invariant i139: i78;\nloop invariant i140: i79;\nloop invariant i141: i80;\nloop invariant i142: i81;\nloop invariant i143: i82;\nloop invariant i144: i83;\nloop invariant i145: i84;\nloop invariant i146: i85;\nloop invariant i147: i86;\nloop invariant i148: i87;\nloop invariant i149: i88;\nloop invariant i150: i89;\nloop invariant i151: i90;\nloop invariant i152: i91;\nloop invariant i153: i92;\nloop invariant i154: i93;\nloop invariant i155: i94;\nloop invariant i156: i95;\nloop invariant i157: i96;\nloop invariant i158: i97;\nloop invariant i159: i98;\nloop invariant i160: i99;\nloop invariant i161: i100;\nloop invariant i162: i101;\nloop invariant i163: i102;\nloop invariant i164: i103;\nloop invariant i165: i104;\nloop invariant i166: i105;\nloop invariant i167: i106;\nloop invariant i168: i107;\nloop invariant i169: i108;\nloop invariant i170: i109;\nloop invariant i171: i110;\nloop invariant i172: i111;\nloop invariant i173: i112;\nloop invariant i174: i113;\nloop invariant i175: i114;\nloop invariant i176: i115;\nloop invariant i177: i116;\nloop invariant i178: i117;\nloop invariant i179: i118;\nloop invariant i180: i119;\nloop invariant i181: i120;\nloop invariant i182: i121;\nloop invariant i183: i122;\nloop invariant i184: i123;\nloop invariant i185: i124;\nloop invariant i186: i125;\nloop invariant i187: i126;\nloop invariant i188: i127;\nloop invariant i189: i128;\nloop invariant i190: i129;\nloop invariant i191: i130;\nloop invariant i192: i131;\nloop invariant i193: i132;\nloop invariant i194: i133;\nloop invariant i195: i134;\nloop invariant i196: i135;\nloop invariant i197: i136;\nloop invariant i198: i137;\nloop invariant i199: i138;\nloop invariant i200: i139;\nloop invariant i201: i140;\nloop invariant i202: i141;\nloop invariant i203: i142;\nloop invariant i204: i143;\nloop invariant i205: i144;\nloop invariant i206: i145;\nloop invariant i207: i146;\nloop invariant i208: i147;\nloop invariant i209: i148;\nloop invariant i210: i149;\nloop invariant i211: i150;\nloop invariant i212: i151;\nloop invariant i213: i152;\nloop invariant i214: i153;\nloop invariant i215: i154;\nloop invariant i216: i155;\nloop invariant i217: i156;\nloop invariant i218: i157;\nloop invariant i219: i158;\nloop invariant i220: 0 <= y;\nloop invariant i221: x >= (2 + (y - 1) * y / 2);\nloop invariant i222: x == y;\nloop invariant i223: 0 <= y <= 100000;\nloop invariant i224: x >= (1 + (y - 1) * y / 2);\nloop invariant i225: x + 2 <= 99;\nloop invariant i226: x - 2 >= 0;\nloop invariant i227: x + 2 <= x + 1;\nloop invariant i228: x + 2 <= x - 2;\nloop invariant i229: x + 2 <= x + 2;\nloop invariant i230: x + 2 <= x - 4;\nloop invariant i231: x + 4 <= x + 2;\nloop invariant i232: x - 4 <= x - 2;\nloop invariant i233: x - 4 <= x - 4;\nloop invariant i234: x - 2 <= x - 2;\nloop invariant i235: x <= 98;\nloop invariant i236: (x % 2) == (y % 2);\nloop invariant i237: 0 <= x <= 98;\nloop invariant i238: 0 <= x <= 198;\nloop invariant i239: ( x + 2 * (y % 2) >= 0 );\nloop invariant i240: ( x - 2 * ((y % 2) + 1) <= 98 );\nloop invariant i241: ( y % 2 == (x % 2) );\nloop invariant i242: ( x % 4 == y % 4 );\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 179,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\n\n\n\n\n\nloop invariant i13: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i220: 0 <= y;\n\n\n\n\n\n\n\n\nloop invariant i229: x + 2 <= x + 2;\n\n\nloop invariant i232: x - 4 <= x - 2;\nloop invariant i233: x - 4 <= x - 4;\nloop invariant i234: x - 2 <= x - 2;\n\n\n\n\nloop invariant i239: ( x + 2 * (y % 2) >= 0 );\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c"
        ],
        "skipped": [],
        "total": 10,
        "success_count": 3,
        "failure_count": 7,
        "success_rate": 0.3
    }
}