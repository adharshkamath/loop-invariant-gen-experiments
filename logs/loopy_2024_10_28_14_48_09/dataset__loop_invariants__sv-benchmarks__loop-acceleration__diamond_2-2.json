{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 4 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 0;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2;\nloop invariant (x % 2) == (y % 2);\nloop invariant x % 4 == (y % 4) ==> y % 4 == 0 || y % 4 == 2;\nloop invariant x % 8 == (y % 8) ==> y % 8 == 0 || y % 8 == 2 || y % 8 == 4 || y % 8 == 6;\nloop invariant x % 16 == (y % 16) ==> y % 16 == 0 || y % 16 == 2 || y % 16 == 4 || y % 16 == 6 || y % 16 == 8 || y % 16 == 10 || y % 16 == 12 || y % 16 == 14;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 255;\nloop invariant (x % 2) == (y % 2) ==> x % 4 == y % 4;\nloop invariant (x % 2) == (y % 2) ==> x % 8 == y % 8;\nloop invariant (x % 2) == (y % 2) ==> x % 16 == y % 16;\nloop invariant (x % 2) == (y % 2) ==> x % 32 == y % 32;\nloop invariant (x % 2) == (y % 2) ==> x % 64 == y % 64;\nloop invariant (x % 2) == (y % 2) ==> x % 128 == y % 128;\nloop invariant (x % 2) == (y % 2) ==> x % 256 == y % 256;\nloop invariant (x % 2) == (y % 2) ==> x % 512 == y % 512;\nloop invariant (x % 2) == (y % 2) ==> x % 1024 == y % 1024;\nloop invariant (x % 2) == (y % 2) ==> x % 2048 == y % 2048;\nloop invariant (x % 2) == (y % 2) ==> x % 4096 == y % 4096;\nloop invariant (x % 2) == (y % 2) ==> x % 8192 == y % 8192;\nloop invariant (x % 2) == (y % 2) ==> x % 16384 == y % 16384;\nloop invariant (x % 2) == (y % 2) ==> x % 32768 == y % 32768;\nloop invariant (x % 2) == (y % 2) ==> x % 65536 == y % 65536;\nloop invariant (x % 2) == (y % 2) ==> x % 131072 == y % 131072;\nloop invariant (x % 2) == (y % 2) ==> x % 262144 == y % 262144;\nloop invariant (x % 2) == (y % 2) ==> x % 524288 == y % 524288;\nloop invariant (x % 2) == (y % 2) ==> x % 1048576 == y % 1048576;\nloop invariant (x % 2) == (y % 2) ==> x % 2097152 == y % 2097152;\nloop invariant (x % 2) == (y % 2) ==> x % 4194304 == y % 4194304;\nloop invariant (x % 2) == (y % 2) ==> x % 8388608 == y % 8388608;\nloop invariant (x % 2) == (y % 2) ==> x % 16777216 == y % 16777216;\nloop invariant (x % 2) == (y % 2) ==> x % 33554432 == y % 33554432;\nloop invariant (x % 2) == (y % 2) ==> x % 67108864 == y % 67108864;\nloop invariant (x % 2) == (y % 2) ==> x % 134217728 == y % 134217728;\nloop invariant (x % 2) == (y % 2) ==> x % 268435456 == y % 268435456;\nloop invariant (x % 2) == (y % 2) ==> x % 536870912 == y % 536870912;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant (x % 2) == (y % 2);\nloop invariant x <= y + 99;\nloop invariant x >= y;\nloop invariant x % 6 == y % 6;\nloop invariant x % 12 == y % 12;\nloop invariant x % 24 == y % 24;\nloop invariant x % 48 == y % 48;\nloop invariant x % 96 == y % 96;\nloop invariant x % 192 == y % 192;\nloop invariant x % 384 == y % 384;\nloop invariant x % 768 == y % 768;\nloop invariant x % 1536 == y % 1536;\nloop invariant x % 3072 == y % 3072;\nloop invariant x % 6144 == y % 6144;\nloop invariant x % 12288 == y % 12288;\nloop invariant x % 24576 == y % 24576;\nloop invariant x % 49152 == y % 49152;\nloop invariant x % 98304 == y % 98304;\nloop invariant x % 196608 == y % 196608;\nloop invariant x % 393216 == y % 393216;\nloop invariant x % 786432 == y % 786432;\nloop invariant x % 1572864 == y % 1572864;\nloop invariant x % 3145728 == y % 3145728;\nloop invariant x % 6291456 == y % 6291456;\nloop invariant x % 12582912 == y % 12582912;\nloop invariant x % 25165824 == y % 25165824;\nloop invariant x % 50331648 == y % 50331648;\nloop invariant x % 100663296 == y % 100663296;\nloop invariant x % 201326592 == y % 201326592;\nloop invariant x % 402653184 == y % 402653184;\nloop invariant x % 805306368 == y % 805306368;\nloop invariant x % 1610612736 == y % 1610612736;\nloop invariant x % 3221225472 == y % 3221225472;\nloop invariant x % 6442450944 == y % 6442450944;\nloop invariant x % 12884901888 == y % 12884901888;\nloop invariant x % 25769803776 == y % 25769803776;\nloop invariant x % 51539607552 == y % 51539607552;\nloop invariant x % 103079215104 == y % 103079215104;\nloop invariant x % 206158430208 == y % 206158430208;\nloop invariant x % 412316860416 == y % 412316860416;\nloop invariant x % 824633720832 == y % 824633720832;\nloop invariant x % 1649267441664 == y % 1649267441664;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= UINT_MAX;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= unknown_uint;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\nloop invariant (x % 2) == (y % 2) ==> (x % 8) == (y % 8);\nloop invariant (x % 2) == (y % 2) ==> (x % 16) == (y % 16);\nloop invariant (x % 2) == (y % 2) ==> (x % 32) == (y % 32);\nloop invariant (x % 2) == (y % 2) ==> (x % 64) == (y % 64);\nloop invariant (x % 2) == (y % 2) ==> (x % 128) == (y % 128);\nloop invariant (x % 2) == (y % 2) ==> (x % 256) == (y % 256);\nloop invariant (x % 2) == (y % 2) ==> (x % 512) == (y % 512);\nloop invariant (x % 2) == (y % 2) ==> (x % 1024) == (y % 1024);\nloop invariant (x % 2) == (y % 2) ==> (x % 2048) == (y % 2048);\nloop invariant (x % 2) == (y % 2) ==> (x % 4096) == (y % 4096);\nloop invariant (x % 2) == (y % 2) ==> (x % 8192) == (y % 8192);\nloop invariant (x % 2) == (y % 2) ==> (x % 16384) == (y % 16384);\nloop invariant (x % 2) == (y % 2) ==> (x % 32768) == (y % 32768);\nloop invariant (x % 2) == (y % 2) ==> (x % 65536) == (y % 65536);\nloop invariant (x % 2) == (y % 2) ==> (x % 131072) == (y % 131072);\nloop invariant (x % 2) == (y % 2) ==> (x % 262144) == (y % 262144);\nloop invariant (x % 2) == (y % 2) ==> (x % 524288) == (y % 524288);\nloop invariant (x % 2) == (y % 2) ==> (x % 1048576) == (y % 1048576);\nloop invariant (x % 2) == (y % 2) ==> (x % 2097152) == (y % 2097152);\nloop invariant (x % 2) == (y % 2) ==> (x % 4194304) == (y % 4194304);\nloop invariant (x % 2) == (y % 2) ==> (x % 8388608) == (y % 8388608);\nloop invariant (x % 2) == (y % 2) ==> (x % 16777216) == (y % 16777216);\nloop invariant (x % 2) == (y % 2) ==> (x % 33554432) == (y % 33554432);\nloop invariant (x % 2) == (y % 2) ==> (x % 67108864) == (y % 67108864);\nloop invariant (x % 2) == (y % 2) ==> (x % 134217728) == (y % 134217728);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0;\nloop invariant y % 2 == 0;\nloop invariant x % 2 == 1;\nloop invariant y % 2 == 1;\nloop invariant x <= y + 1;\nloop invariant x >= y - 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2147483647;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0 ==> x % 4 == 0;\nloop invariant (x % 2 != 0) ==> (x % 4 == 2 || x % 4 == 0);\nloop invariant x % 4 == 0 ==> x % 8 == 0;\nloop invariant (x % 4 != 0) ==> (x % 8 == 2 || x % 8 == 4 || x % 8 == 0);\nloop invariant (x % 8 != 0) ==> (x % 16 == 4 || x % 16 == 8 || x % 16 == 0);\nloop invariant (x % 16 != 0) ==> (x % 32 == 8 || x % 32 == 16 || x % 32 == 0);\nloop invariant (x % 32 != 0) ==> (x % 64 == 16 || x % 64 == 32 || x % 64 == 0);\nloop invariant (x % 64 != 0) ==> (x % 128 == 32 || x % 128 == 64 || x % 128 == 0);\nloop invariant (x % 128 != 0) ==> (x % 256 == 64 || x % 256 == 128 || x % 256 == 0);\nloop invariant (x % 256 != 0) ==> (x % 512 == 128 || x % 512 == 256 || x % 512 == 0);\nloop invariant (x % 512 != 0) ==> (x % 1024 == 256 || x % 1024 == 512 || x % 1024 == 0);\nloop invariant (x % 1024 != 0) ==> (x % 2048 == 512 || x % 2048 == 1024 || x % 2048 == 0);\nloop invariant (x % 2048 != 0) ==> (x % 4096 == 1024 || x % 4096 == 2048 || x % 4096 == 0);\nloop invariant (x % 4096 != 0) ==> (x % 8192 == 2048 || x % 8192 == 4096 || x % 8192 == 0);\nloop invariant (x % 8192 != 0) ==> (x % 16384 == 4096 || x % 16384 == 8192 || x % 16384 == 0);\nloop invariant (x % 16384 != 0) ==> (x % 32768 == 8192 || x % 32768 == 16384 || x % 32768 == 0);\nloop invariant (x % 32768 != 0) ==> (x % 65536 == 16384 || x % 65536 == 32768 || x % 65536 == 0);\nloop invariant (x % 65536 != 0) ==> (x % 131072 == 32768 || x % 131072 == 65536 || x % 131072 == 0);\nloop invariant (x % 131072 != 0) ==> (x % 262144 == 65536 || x % 262144 == 131072 || x % 262144 == 0);\nloop invariant (x % 262144 != 0) ==> (x % 524288 == 131072 || x % 524288 == 262144 || x % 524288 == 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 4 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 4 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 0;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 0 is preserved but not established.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: y % 2 == 0 ==> x % 2 == 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2;\nloop invariant (x % 2) == (y % 2);\nloop invariant x % 4 == (y % 4) ==> y % 4 == 0 || y % 4 == 2;\nloop invariant x % 8 == (y % 8) ==> y % 8 == 0 || y % 8 == 2 || y % 8 == 4 || y % 8 == 6;\nloop invariant x % 16 == (y % 16) ==> y % 16 == 0 || y % 16 == 2 || y % 16 == 4 || y % 16 == 6 || y % 16 == 8 || y % 16 == 10 || y % 16 == 12 || y % 16 == 14;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 2 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant x % 4 == (y % 4) ==> y % 4 == 0 || y % 4 == 2 is established but not preserved.\nloop invariant x % 8 == (y % 8) ==> y % 8 == 0 || y % 8 == 2 || y % 8 == 4 || y % 8 == 6 is partially proven to be inductive.\nloop invariant x % 16 == (y % 16) ==> y % 16 == 0 || y % 16 == 2 || y % 16 == 4 || y % 16 == 6 || y % 16 == 8 || y % 16 == 10 || y % 16 == 12 || y % 16 == 14 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 255;\nloop invariant (x % 2) == (y % 2) ==> x % 4 == y % 4;\nloop invariant (x % 2) == (y % 2) ==> x % 8 == y % 8;\nloop invariant (x % 2) == (y % 2) ==> x % 16 == y % 16;\nloop invariant (x % 2) == (y % 2) ==> x % 32 == y % 32;\nloop invariant (x % 2) == (y % 2) ==> x % 64 == y % 64;\nloop invariant (x % 2) == (y % 2) ==> x % 128 == y % 128;\nloop invariant (x % 2) == (y % 2) ==> x % 256 == y % 256;\nloop invariant (x % 2) == (y % 2) ==> x % 512 == y % 512;\nloop invariant (x % 2) == (y % 2) ==> x % 1024 == y % 1024;\nloop invariant (x % 2) == (y % 2) ==> x % 2048 == y % 2048;\nloop invariant (x % 2) == (y % 2) ==> x % 4096 == y % 4096;\nloop invariant (x % 2) == (y % 2) ==> x % 8192 == y % 8192;\nloop invariant (x % 2) == (y % 2) ==> x % 16384 == y % 16384;\nloop invariant (x % 2) == (y % 2) ==> x % 32768 == y % 32768;\nloop invariant (x % 2) == (y % 2) ==> x % 65536 == y % 65536;\nloop invariant (x % 2) == (y % 2) ==> x % 131072 == y % 131072;\nloop invariant (x % 2) == (y % 2) ==> x % 262144 == y % 262144;\nloop invariant (x % 2) == (y % 2) ==> x % 524288 == y % 524288;\nloop invariant (x % 2) == (y % 2) ==> x % 1048576 == y % 1048576;\nloop invariant (x % 2) == (y % 2) ==> x % 2097152 == y % 2097152;\nloop invariant (x % 2) == (y % 2) ==> x % 4194304 == y % 4194304;\nloop invariant (x % 2) == (y % 2) ==> x % 8388608 == y % 8388608;\nloop invariant (x % 2) == (y % 2) ==> x % 16777216 == y % 16777216;\nloop invariant (x % 2) == (y % 2) ==> x % 33554432 == y % 33554432;\nloop invariant (x % 2) == (y % 2) ==> x % 67108864 == y % 67108864;\nloop invariant (x % 2) == (y % 2) ==> x % 134217728 == y % 134217728;\nloop invariant (x % 2) == (y % 2) ==> x % 268435456 == y % 268435456;\nloop invariant (x % 2) == (y % 2) ==> x % 536870912 == y % 536870912;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 255 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> x % 4 == y % 4 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 8 == y % 8 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 16 == y % 16 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 32 == y % 32 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 64 == y % 64 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 128 == y % 128 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 256 == y % 256 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 512 == y % 512 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 1024 == y % 1024 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 2048 == y % 2048 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 4096 == y % 4096 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 8192 == y % 8192 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 16384 == y % 16384 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 32768 == y % 32768 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 65536 == y % 65536 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 131072 == y % 131072 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 262144 == y % 262144 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 524288 == y % 524288 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 1048576 == y % 1048576 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 2097152 == y % 2097152 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 4194304 == y % 4194304 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 8388608 == y % 8388608 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 16777216 == y % 16777216 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 33554432 == y % 33554432 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 67108864 == y % 67108864 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 134217728 == y % 134217728 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 268435456 == y % 268435456 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 536870912 == y % 536870912 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant (x % 2) == (y % 2);\nloop invariant x <= y + 99;\nloop invariant x >= y;\nloop invariant x % 6 == y % 6;\nloop invariant x % 12 == y % 12;\nloop invariant x % 24 == y % 24;\nloop invariant x % 48 == y % 48;\nloop invariant x % 96 == y % 96;\nloop invariant x % 192 == y % 192;\nloop invariant x % 384 == y % 384;\nloop invariant x % 768 == y % 768;\nloop invariant x % 1536 == y % 1536;\nloop invariant x % 3072 == y % 3072;\nloop invariant x % 6144 == y % 6144;\nloop invariant x % 12288 == y % 12288;\nloop invariant x % 24576 == y % 24576;\nloop invariant x % 49152 == y % 49152;\nloop invariant x % 98304 == y % 98304;\nloop invariant x % 196608 == y % 196608;\nloop invariant x % 393216 == y % 393216;\nloop invariant x % 786432 == y % 786432;\nloop invariant x % 1572864 == y % 1572864;\nloop invariant x % 3145728 == y % 3145728;\nloop invariant x % 6291456 == y % 6291456;\nloop invariant x % 12582912 == y % 12582912;\nloop invariant x % 25165824 == y % 25165824;\nloop invariant x % 50331648 == y % 50331648;\nloop invariant x % 100663296 == y % 100663296;\nloop invariant x % 201326592 == y % 201326592;\nloop invariant x % 402653184 == y % 402653184;\nloop invariant x % 805306368 == y % 805306368;\nloop invariant x % 1610612736 == y % 1610612736;\nloop invariant x % 3221225472 == y % 3221225472;\nloop invariant x % 6442450944 == y % 6442450944;\nloop invariant x % 12884901888 == y % 12884901888;\nloop invariant x % 25769803776 == y % 25769803776;\nloop invariant x % 51539607552 == y % 51539607552;\nloop invariant x % 103079215104 == y % 103079215104;\nloop invariant x % 206158430208 == y % 206158430208;\nloop invariant x % 412316860416 == y % 412316860416;\nloop invariant x % 824633720832 == y % 824633720832;\nloop invariant x % 1649267441664 == y % 1649267441664;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant x <= y + 99 is partially proven to be inductive.\nloop invariant x >= y is neither established nor preserved.\nloop invariant x % 6 == y % 6 is established but not preserved.\nloop invariant x % 12 == y % 12 is established but not preserved.\nloop invariant x % 24 == y % 24 is established but not preserved.\nloop invariant x % 48 == y % 48 is established but not preserved.\nloop invariant x % 96 == y % 96 is established but not preserved.\nloop invariant x % 192 == y % 192 is established but not preserved.\nloop invariant x % 384 == y % 384 is partially proven to be inductive.\nloop invariant x % 768 == y % 768 is partially proven to be inductive.\nloop invariant x % 1536 == y % 1536 is partially proven to be inductive.\nloop invariant x % 3072 == y % 3072 is partially proven to be inductive.\nloop invariant x % 6144 == y % 6144 is partially proven to be inductive.\nloop invariant x % 12288 == y % 12288 is partially proven to be inductive.\nloop invariant x % 24576 == y % 24576 is partially proven to be inductive.\nloop invariant x % 49152 == y % 49152 is partially proven to be inductive.\nloop invariant x % 98304 == y % 98304 is partially proven to be inductive.\nloop invariant x % 196608 == y % 196608 is partially proven to be inductive.\nloop invariant x % 393216 == y % 393216 is partially proven to be inductive.\nloop invariant x % 786432 == y % 786432 is partially proven to be inductive.\nloop invariant x % 1572864 == y % 1572864 is partially proven to be inductive.\nloop invariant x % 3145728 == y % 3145728 is partially proven to be inductive.\nloop invariant x % 6291456 == y % 6291456 is partially proven to be inductive.\nloop invariant x % 12582912 == y % 12582912 is partially proven to be inductive.\nloop invariant x % 25165824 == y % 25165824 is partially proven to be inductive.\nloop invariant x % 50331648 == y % 50331648 is partially proven to be inductive.\nloop invariant x % 100663296 == y % 100663296 is partially proven to be inductive.\nloop invariant x % 201326592 == y % 201326592 is partially proven to be inductive.\nloop invariant x % 402653184 == y % 402653184 is partially proven to be inductive.\nloop invariant x % 805306368 == y % 805306368 is partially proven to be inductive.\nloop invariant x % 1610612736 == y % 1610612736 is partially proven to be inductive.\nloop invariant x % 3221225472 == y % 3221225472 is partially proven to be inductive.\nloop invariant x % 6442450944 == y % 6442450944 is partially proven to be inductive.\nloop invariant x % 12884901888 == y % 12884901888 is partially proven to be inductive.\nloop invariant x % 25769803776 == y % 25769803776 is partially proven to be inductive.\nloop invariant x % 51539607552 == y % 51539607552 is partially proven to be inductive.\nloop invariant x % 103079215104 == y % 103079215104 is partially proven to be inductive.\nloop invariant x % 206158430208 == y % 206158430208 is partially proven to be inductive.\nloop invariant x % 412316860416 == y % 412316860416 is partially proven to be inductive.\nloop invariant x % 824633720832 == y % 824633720832 is partially proven to be inductive.\nloop invariant x % 1649267441664 == y % 1649267441664 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == x % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= UINT_MAX;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= UINT_MAX is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 is established but not preserved.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y <= UINT_MAX;\n\n\nloop invariant i5: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i6: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\n\n\nloop invariant i9: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant i10: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant i11: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant i12: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant i13: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant i14: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant i15: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant i16: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant i17: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant i18: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant i19: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant i20: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant i21: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant i22: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant i23: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant i24: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant i25: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant i26: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant i27: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= unknown_uint;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\nloop invariant (x % 2) == (y % 2) ==> (x % 8) == (y % 8);\nloop invariant (x % 2) == (y % 2) ==> (x % 16) == (y % 16);\nloop invariant (x % 2) == (y % 2) ==> (x % 32) == (y % 32);\nloop invariant (x % 2) == (y % 2) ==> (x % 64) == (y % 64);\nloop invariant (x % 2) == (y % 2) ==> (x % 128) == (y % 128);\nloop invariant (x % 2) == (y % 2) ==> (x % 256) == (y % 256);\nloop invariant (x % 2) == (y % 2) ==> (x % 512) == (y % 512);\nloop invariant (x % 2) == (y % 2) ==> (x % 1024) == (y % 1024);\nloop invariant (x % 2) == (y % 2) ==> (x % 2048) == (y % 2048);\nloop invariant (x % 2) == (y % 2) ==> (x % 4096) == (y % 4096);\nloop invariant (x % 2) == (y % 2) ==> (x % 8192) == (y % 8192);\nloop invariant (x % 2) == (y % 2) ==> (x % 16384) == (y % 16384);\nloop invariant (x % 2) == (y % 2) ==> (x % 32768) == (y % 32768);\nloop invariant (x % 2) == (y % 2) ==> (x % 65536) == (y % 65536);\nloop invariant (x % 2) == (y % 2) ==> (x % 131072) == (y % 131072);\nloop invariant (x % 2) == (y % 2) ==> (x % 262144) == (y % 262144);\nloop invariant (x % 2) == (y % 2) ==> (x % 524288) == (y % 524288);\nloop invariant (x % 2) == (y % 2) ==> (x % 1048576) == (y % 1048576);\nloop invariant (x % 2) == (y % 2) ==> (x % 2097152) == (y % 2097152);\nloop invariant (x % 2) == (y % 2) ==> (x % 4194304) == (y % 4194304);\nloop invariant (x % 2) == (y % 2) ==> (x % 8388608) == (y % 8388608);\nloop invariant (x % 2) == (y % 2) ==> (x % 16777216) == (y % 16777216);\nloop invariant (x % 2) == (y % 2) ==> (x % 33554432) == (y % 33554432);\nloop invariant (x % 2) == (y % 2) ==> (x % 67108864) == (y % 67108864);\nloop invariant (x % 2) == (y % 2) ==> (x % 134217728) == (y % 134217728);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: comparison of incompatible types: unsigned int and unsigned int (*)(void). Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4) is neither established nor preserved.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0;\nloop invariant y % 2 == 0;\nloop invariant x % 2 == 1;\nloop invariant y % 2 == 1;\nloop invariant x <= y + 1;\nloop invariant x >= y - 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= y is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 is preserved but not established.\nloop invariant y % 2 == 1 is partially proven to be inductive.\nloop invariant x <= y + 1 is partially proven to be inductive.\nloop invariant x >= y - 1 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x == y is partially proven to be inductive.\nloop invariant x != y is partially proven to be inductive.\nloop invariant x < y is partially proven to be inductive.\nloop invariant x > y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2147483647;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 2147483647 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0 ==> x % 4 == 0;\nloop invariant (x % 2 != 0) ==> (x % 4 == 2 || x % 4 == 0);\nloop invariant x % 4 == 0 ==> x % 8 == 0;\nloop invariant (x % 4 != 0) ==> (x % 8 == 2 || x % 8 == 4 || x % 8 == 0);\nloop invariant (x % 8 != 0) ==> (x % 16 == 4 || x % 16 == 8 || x % 16 == 0);\nloop invariant (x % 16 != 0) ==> (x % 32 == 8 || x % 32 == 16 || x % 32 == 0);\nloop invariant (x % 32 != 0) ==> (x % 64 == 16 || x % 64 == 32 || x % 64 == 0);\nloop invariant (x % 64 != 0) ==> (x % 128 == 32 || x % 128 == 64 || x % 128 == 0);\nloop invariant (x % 128 != 0) ==> (x % 256 == 64 || x % 256 == 128 || x % 256 == 0);\nloop invariant (x % 256 != 0) ==> (x % 512 == 128 || x % 512 == 256 || x % 512 == 0);\nloop invariant (x % 512 != 0) ==> (x % 1024 == 256 || x % 1024 == 512 || x % 1024 == 0);\nloop invariant (x % 1024 != 0) ==> (x % 2048 == 512 || x % 2048 == 1024 || x % 2048 == 0);\nloop invariant (x % 2048 != 0) ==> (x % 4096 == 1024 || x % 4096 == 2048 || x % 4096 == 0);\nloop invariant (x % 4096 != 0) ==> (x % 8192 == 2048 || x % 8192 == 4096 || x % 8192 == 0);\nloop invariant (x % 8192 != 0) ==> (x % 16384 == 4096 || x % 16384 == 8192 || x % 16384 == 0);\nloop invariant (x % 16384 != 0) ==> (x % 32768 == 8192 || x % 32768 == 16384 || x % 32768 == 0);\nloop invariant (x % 32768 != 0) ==> (x % 65536 == 16384 || x % 65536 == 32768 || x % 65536 == 0);\nloop invariant (x % 65536 != 0) ==> (x % 131072 == 32768 || x % 131072 == 65536 || x % 131072 == 0);\nloop invariant (x % 131072 != 0) ==> (x % 262144 == 65536 || x % 262144 == 131072 || x % 262144 == 0);\nloop invariant (x % 262144 != 0) ==> (x % 524288 == 131072 || x % 524288 == 262144 || x % 524288 == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 2 == 0 ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 != 0) ==> (x % 4 == 2 || x % 4 == 0) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x % 8 == 0 is established but not preserved.\nloop invariant (x % 4 != 0) ==> (x % 8 == 2 || x % 8 == 4 || x % 8 == 0) is partially proven to be inductive.\nloop invariant (x % 8 != 0) ==> (x % 16 == 4 || x % 16 == 8 || x % 16 == 0) is partially proven to be inductive.\nloop invariant (x % 16 != 0) ==> (x % 32 == 8 || x % 32 == 16 || x % 32 == 0) is partially proven to be inductive.\nloop invariant (x % 32 != 0) ==> (x % 64 == 16 || x % 64 == 32 || x % 64 == 0) is partially proven to be inductive.\nloop invariant (x % 64 != 0) ==> (x % 128 == 32 || x % 128 == 64 || x % 128 == 0) is partially proven to be inductive.\nloop invariant (x % 128 != 0) ==> (x % 256 == 64 || x % 256 == 128 || x % 256 == 0) is partially proven to be inductive.\nloop invariant (x % 256 != 0) ==> (x % 512 == 128 || x % 512 == 256 || x % 512 == 0) is partially proven to be inductive.\nloop invariant (x % 512 != 0) ==> (x % 1024 == 256 || x % 1024 == 512 || x % 1024 == 0) is partially proven to be inductive.\nloop invariant (x % 1024 != 0) ==> (x % 2048 == 512 || x % 2048 == 1024 || x % 2048 == 0) is partially proven to be inductive.\nloop invariant (x % 2048 != 0) ==> (x % 4096 == 1024 || x % 4096 == 2048 || x % 4096 == 0) is partially proven to be inductive.\nloop invariant (x % 4096 != 0) ==> (x % 8192 == 2048 || x % 8192 == 4096 || x % 8192 == 0) is partially proven to be inductive.\nloop invariant (x % 8192 != 0) ==> (x % 16384 == 4096 || x % 16384 == 8192 || x % 16384 == 0) is partially proven to be inductive.\nloop invariant (x % 16384 != 0) ==> (x % 32768 == 8192 || x % 32768 == 16384 || x % 32768 == 0) is partially proven to be inductive.\nloop invariant (x % 32768 != 0) ==> (x % 65536 == 16384 || x % 65536 == 32768 || x % 65536 == 0) is partially proven to be inductive.\nloop invariant (x % 65536 != 0) ==> (x % 131072 == 32768 || x % 131072 == 65536 || x % 131072 == 0) is partially proven to be inductive.\nloop invariant (x % 131072 != 0) ==> (x % 262144 == 65536 || x % 262144 == 131072 || x % 262144 == 0) is partially proven to be inductive.\nloop invariant (x % 262144 != 0) ==> (x % 524288 == 131072 || x % 524288 == 262144 || x % 524288 == 0) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: i3;\nloop invariant i4: i4;\nloop invariant i5: i5;\nloop invariant i6: i6;\nloop invariant i7: i7;\nloop invariant i8: i8;\nloop invariant i9: i9;\nloop invariant i10: i10;\nloop invariant i11: i11;\nloop invariant i12: i12;\nloop invariant i13: i13;\nloop invariant i14: i14;\nloop invariant i15: i15;\nloop invariant i16: i16;\nloop invariant i17: i17;\nloop invariant i18: i18;\nloop invariant i19: i19;\nloop invariant i20: i20;\nloop invariant i21: i21;\nloop invariant i22: i22;\nloop invariant i23: i23;\nloop invariant i24: i24;\nloop invariant i25: i25;\nloop invariant i26: i26;\nloop invariant i27: i27;\nloop invariant i28: i28;\nloop invariant i29: i29;\nloop invariant i30: i30;\nloop invariant i31: i31;\nloop invariant i32: i32;\nloop invariant i33: i33;\nloop invariant i34: i34;\nloop invariant i35: i35;\nloop invariant i36: i36;\nloop invariant i37: i37;\nloop invariant i38: i38;\nloop invariant i39: i39;\nloop invariant i40: i40;\nloop invariant i41: i41;\nloop invariant i42: i42;\nloop invariant i43: i43;\nloop invariant i44: i44;\nloop invariant i45: i45;\nloop invariant i46: i46;\nloop invariant i47: i47;\nloop invariant i48: i48;\nloop invariant i49: i49;\nloop invariant i50: i50;\nloop invariant i51: i51;\nloop invariant i52: i52;\nloop invariant i53: i53;\nloop invariant i54: i54;\nloop invariant i55: i55;\nloop invariant i56: i56;\nloop invariant i57: i57;\nloop invariant i58: i58;\nloop invariant i59: i59;\nloop invariant i60: i60;\nloop invariant i61: i61;\nloop invariant i62: i62;\nloop invariant i63: i63;\nloop invariant i64: i64;\nloop invariant i65: i65;\nloop invariant i66: i66;\nloop invariant i67: i67;\nloop invariant i68: i68;\nloop invariant i69: i69;\nloop invariant i70: i70;\nloop invariant i71: i71;\nloop invariant i72: i72;\nloop invariant i73: i73;\nloop invariant i74: i74;\nloop invariant i75: i75;\nloop invariant i76: i76;\nloop invariant i77: i77;\nloop invariant i78: i78;\nloop invariant i79: i79;\nloop invariant i80: i80;\nloop invariant i81: i81;\nloop invariant i82: i82;\nloop invariant i83: i83;\nloop invariant i84: i84;\nloop invariant i85: i85;\nloop invariant i86: i86;\nloop invariant i87: i87;\nloop invariant i88: i88;\nloop invariant i89: i89;\nloop invariant i90: i90;\nloop invariant i91: i91;\nloop invariant i92: i92;\nloop invariant i93: i93;\nloop invariant i94: i94;\nloop invariant i95: i95;\nloop invariant i96: i96;\nloop invariant i97: i97;\nloop invariant i98: i98;\nloop invariant i99: i99;\nloop invariant i100: i100;\nloop invariant i101: i101;\nloop invariant i102: i102;\nloop invariant i103: i103;\nloop invariant i104: i104;\nloop invariant i105: i105;\nloop invariant i106: i106;\nloop invariant i107: i107;\nloop invariant i108: i108;\nloop invariant i109: i109;\nloop invariant i110: i110;\nloop invariant i111: i111;\nloop invariant i112: i112;\nloop invariant i113: i113;\nloop invariant i114: i114;\nloop invariant i115: i115;\nloop invariant i116: i116;\nloop invariant i117: i117;\nloop invariant i118: i118;\nloop invariant i119: i119;\nloop invariant i120: i120;\nloop invariant i121: i121;\nloop invariant i122: i122;\nloop invariant i123: i123;\nloop invariant i124: i124;\nloop invariant i125: i125;\nloop invariant i126: i126;\nloop invariant i127: i127;\nloop invariant i128: i128;\nloop invariant i129: i129;\nloop invariant i130: i130;\nloop invariant i131: i131;\nloop invariant i132: i132;\nloop invariant i133: i133;\nloop invariant i134: i134;\nloop invariant i135: i135;\nloop invariant i136: i136;\nloop invariant i137: i137;\nloop invariant i138: i138;\nloop invariant i139: i139;\nloop invariant i140: i140;\nloop invariant i141: i141;\nloop invariant i142: i142;\nloop invariant i143: i143;\nloop invariant i144: i144;\nloop invariant i145: i145;\nloop invariant i146: i146;\nloop invariant i147: i147;\nloop invariant i148: i148;\nloop invariant i149: i149;\nloop invariant i150: i150;\nloop invariant i151: i151;\nloop invariant i152: i152;\nloop invariant i153: i153;\nloop invariant i154: i154;\nloop invariant i155: i155;\nloop invariant i156: i156;\nloop invariant i157: i157;\nloop invariant i158: i158;\nloop invariant i159: 0 <= x <= 99;\nloop invariant i160: 0 <= y <= 99;\nloop invariant i161: x % 2 == y % 2;\nloop invariant i162: x % 4 == 0;\nloop invariant i163: 0 <= y <= 0;\nloop invariant i164: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i165: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i166: 0 <= y <= 2;\nloop invariant i167: (x % 2) == (y % 2);\nloop invariant i168: x % 4 == (y % 4) ==> y % 4 == 0 || y % 4 == 2;\nloop invariant i169: x % 8 == (y % 8) ==> y % 8 == 0 || y % 8 == 2 || y % 8 == 4 || y % 8 == 6;\nloop invariant i170: x % 16 == (y % 16) ==> y % 16 == 0 || y % 16 == 2 || y % 16 == 4 || y % 16 == 6 || y % 16 == 8 || y % 16 == 10 || y % 16 == 12 || y % 16 == 14;\nloop invariant i171: 0 <= y;\nloop invariant i172: 0 <= y <= 255;\nloop invariant i173: (x % 2) == (y % 2) ==> x % 4 == y % 4;\nloop invariant i174: (x % 2) == (y % 2) ==> x % 8 == y % 8;\nloop invariant i175: (x % 2) == (y % 2) ==> x % 16 == y % 16;\nloop invariant i176: (x % 2) == (y % 2) ==> x % 32 == y % 32;\nloop invariant i177: (x % 2) == (y % 2) ==> x % 64 == y % 64;\nloop invariant i178: (x % 2) == (y % 2) ==> x % 128 == y % 128;\nloop invariant i179: (x % 2) == (y % 2) ==> x % 256 == y % 256;\nloop invariant i180: (x % 2) == (y % 2) ==> x % 512 == y % 512;\nloop invariant i181: (x % 2) == (y % 2) ==> x % 1024 == y % 1024;\nloop invariant i182: (x % 2) == (y % 2) ==> x % 2048 == y % 2048;\nloop invariant i183: (x % 2) == (y % 2) ==> x % 4096 == y % 4096;\nloop invariant i184: (x % 2) == (y % 2) ==> x % 8192 == y % 8192;\nloop invariant i185: (x % 2) == (y % 2) ==> x % 16384 == y % 16384;\nloop invariant i186: (x % 2) == (y % 2) ==> x % 32768 == y % 32768;\nloop invariant i187: (x % 2) == (y % 2) ==> x % 65536 == y % 65536;\nloop invariant i188: (x % 2) == (y % 2) ==> x % 131072 == y % 131072;\nloop invariant i189: (x % 2) == (y % 2) ==> x % 262144 == y % 262144;\nloop invariant i190: (x % 2) == (y % 2) ==> x % 524288 == y % 524288;\nloop invariant i191: (x % 2) == (y % 2) ==> x % 1048576 == y % 1048576;\nloop invariant i192: (x % 2) == (y % 2) ==> x % 2097152 == y % 2097152;\nloop invariant i193: (x % 2) == (y % 2) ==> x % 4194304 == y % 4194304;\nloop invariant i194: (x % 2) == (y % 2) ==> x % 8388608 == y % 8388608;\nloop invariant i195: (x % 2) == (y % 2) ==> x % 16777216 == y % 16777216;\nloop invariant i196: (x % 2) == (y % 2) ==> x % 33554432 == y % 33554432;\nloop invariant i197: (x % 2) == (y % 2) ==> x % 67108864 == y % 67108864;\nloop invariant i198: (x % 2) == (y % 2) ==> x % 134217728 == y % 134217728;\nloop invariant i199: (x % 2) == (y % 2) ==> x % 268435456 == y % 268435456;\nloop invariant i200: (x % 2) == (y % 2) ==> x % 536870912 == y % 536870912;\nloop invariant i201: y >= 0;\nloop invariant i202: x <= y + 99;\nloop invariant i203: x >= y;\nloop invariant i204: x % 6 == y % 6;\nloop invariant i205: x % 12 == y % 12;\nloop invariant i206: x % 24 == y % 24;\nloop invariant i207: x % 48 == y % 48;\nloop invariant i208: x % 96 == y % 96;\nloop invariant i209: x % 192 == y % 192;\nloop invariant i210: x % 384 == y % 384;\nloop invariant i211: x % 768 == y % 768;\nloop invariant i212: x % 1536 == y % 1536;\nloop invariant i213: x % 3072 == y % 3072;\nloop invariant i214: x % 6144 == y % 6144;\nloop invariant i215: x % 12288 == y % 12288;\nloop invariant i216: x % 24576 == y % 24576;\nloop invariant i217: x % 49152 == y % 49152;\nloop invariant i218: x % 98304 == y % 98304;\nloop invariant i219: x % 196608 == y % 196608;\nloop invariant i220: x % 393216 == y % 393216;\nloop invariant i221: x % 786432 == y % 786432;\nloop invariant i222: x % 1572864 == y % 1572864;\nloop invariant i223: x % 3145728 == y % 3145728;\nloop invariant i224: x % 6291456 == y % 6291456;\nloop invariant i225: x % 12582912 == y % 12582912;\nloop invariant i226: x % 25165824 == y % 25165824;\nloop invariant i227: x % 50331648 == y % 50331648;\nloop invariant i228: x % 100663296 == y % 100663296;\nloop invariant i229: x % 201326592 == y % 201326592;\nloop invariant i230: x % 402653184 == y % 402653184;\nloop invariant i231: x % 805306368 == y % 805306368;\nloop invariant i232: x % 1610612736 == y % 1610612736;\nloop invariant i233: x % 3221225472 == y % 3221225472;\nloop invariant i234: x % 6442450944 == y % 6442450944;\nloop invariant i235: x % 12884901888 == y % 12884901888;\nloop invariant i236: x % 25769803776 == y % 25769803776;\nloop invariant i237: x % 51539607552 == y % 51539607552;\nloop invariant i238: x % 103079215104 == y % 103079215104;\nloop invariant i239: x % 206158430208 == y % 206158430208;\nloop invariant i240: x % 412316860416 == y % 412316860416;\nloop invariant i241: x % 824633720832 == y % 824633720832;\nloop invariant i242: x % 1649267441664 == y % 1649267441664;\nloop invariant i243: y % 2 == x % 2;\nloop invariant i244: 0 <= y <= UINT_MAX;\nloop invariant i245: x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant i246: x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant i247: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i248: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i249: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 0;\nloop invariant i250: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 1;\nloop invariant i251: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant i252: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant i253: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant i254: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant i255: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant i256: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant i257: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant i258: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant i259: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant i260: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant i261: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant i262: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant i263: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant i264: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant i265: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant i266: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant i267: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant i268: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant i269: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\nloop invariant i270: 0 <= y <= unknown_uint;\nloop invariant i271: (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\nloop invariant i272: (x % 2) == (y % 2) ==> (x % 8) == (y % 8);\nloop invariant i273: (x % 2) == (y % 2) ==> (x % 16) == (y % 16);\nloop invariant i274: (x % 2) == (y % 2) ==> (x % 32) == (y % 32);\nloop invariant i275: (x % 2) == (y % 2) ==> (x % 64) == (y % 64);\nloop invariant i276: (x % 2) == (y % 2) ==> (x % 128) == (y % 128);\nloop invariant i277: (x % 2) == (y % 2) ==> (x % 256) == (y % 256);\nloop invariant i278: (x % 2) == (y % 2) ==> (x % 512) == (y % 512);\nloop invariant i279: (x % 2) == (y % 2) ==> (x % 1024) == (y % 1024);\nloop invariant i280: (x % 2) == (y % 2) ==> (x % 2048) == (y % 2048);\nloop invariant i281: (x % 2) == (y % 2) ==> (x % 4096) == (y % 4096);\nloop invariant i282: (x % 2) == (y % 2) ==> (x % 8192) == (y % 8192);\nloop invariant i283: (x % 2) == (y % 2) ==> (x % 16384) == (y % 16384);\nloop invariant i284: (x % 2) == (y % 2) ==> (x % 32768) == (y % 32768);\nloop invariant i285: (x % 2) == (y % 2) ==> (x % 65536) == (y % 65536);\nloop invariant i286: (x % 2) == (y % 2) ==> (x % 131072) == (y % 131072);\nloop invariant i287: (x % 2) == (y % 2) ==> (x % 262144) == (y % 262144);\nloop invariant i288: (x % 2) == (y % 2) ==> (x % 524288) == (y % 524288);\nloop invariant i289: (x % 2) == (y % 2) ==> (x % 1048576) == (y % 1048576);\nloop invariant i290: (x % 2) == (y % 2) ==> (x % 2097152) == (y % 2097152);\nloop invariant i291: (x % 2) == (y % 2) ==> (x % 4194304) == (y % 4194304);\nloop invariant i292: (x % 2) == (y % 2) ==> (x % 8388608) == (y % 8388608);\nloop invariant i293: (x % 2) == (y % 2) ==> (x % 16777216) == (y % 16777216);\nloop invariant i294: (x % 2) == (y % 2) ==> (x % 33554432) == (y % 33554432);\nloop invariant i295: (x % 2) == (y % 2) ==> (x % 67108864) == (y % 67108864);\nloop invariant i296: (x % 2) == (y % 2) ==> (x % 134217728) == (y % 134217728);\nloop invariant i297: 0 <= x <= y;\nloop invariant i298: x % 2 == 0;\nloop invariant i299: y % 2 == 0;\nloop invariant i300: x % 2 == 1;\nloop invariant i301: y % 2 == 1;\nloop invariant i302: x <= y + 1;\nloop invariant i303: x >= y - 1;\nloop invariant i304: x <= y;\nloop invariant i305: x == y;\nloop invariant i306: x != y;\nloop invariant i307: x < y;\nloop invariant i308: x > y;\nloop invariant i309: 0 <= y <= 2147483647;\nloop invariant i310: x % 2 == 0 ==> x % 4 == 0;\nloop invariant i311: (x % 2 != 0) ==> (x % 4 == 2 || x % 4 == 0);\nloop invariant i312: x % 4 == 0 ==> x % 8 == 0;\nloop invariant i313: (x % 4 != 0) ==> (x % 8 == 2 || x % 8 == 4 || x % 8 == 0);\nloop invariant i314: (x % 8 != 0) ==> (x % 16 == 4 || x % 16 == 8 || x % 16 == 0);\nloop invariant i315: (x % 16 != 0) ==> (x % 32 == 8 || x % 32 == 16 || x % 32 == 0);\nloop invariant i316: (x % 32 != 0) ==> (x % 64 == 16 || x % 64 == 32 || x % 64 == 0);\nloop invariant i317: (x % 64 != 0) ==> (x % 128 == 32 || x % 128 == 64 || x % 128 == 0);\nloop invariant i318: (x % 128 != 0) ==> (x % 256 == 64 || x % 256 == 128 || x % 256 == 0);\nloop invariant i319: (x % 256 != 0) ==> (x % 512 == 128 || x % 512 == 256 || x % 512 == 0);\nloop invariant i320: (x % 512 != 0) ==> (x % 1024 == 256 || x % 1024 == 512 || x % 1024 == 0);\nloop invariant i321: (x % 1024 != 0) ==> (x % 2048 == 512 || x % 2048 == 1024 || x % 2048 == 0);\nloop invariant i322: (x % 2048 != 0) ==> (x % 4096 == 1024 || x % 4096 == 2048 || x % 4096 == 0);\nloop invariant i323: (x % 4096 != 0) ==> (x % 8192 == 2048 || x % 8192 == 4096 || x % 8192 == 0);\nloop invariant i324: (x % 8192 != 0) ==> (x % 16384 == 4096 || x % 16384 == 8192 || x % 16384 == 0);\nloop invariant i325: (x % 16384 != 0) ==> (x % 32768 == 8192 || x % 32768 == 16384 || x % 32768 == 0);\nloop invariant i326: (x % 32768 != 0) ==> (x % 65536 == 16384 || x % 65536 == 32768 || x % 65536 == 0);\nloop invariant i327: (x % 65536 != 0) ==> (x % 131072 == 32768 || x % 131072 == 65536 || x % 131072 == 0);\nloop invariant i328: (x % 131072 != 0) ==> (x % 262144 == 65536 || x % 262144 == 131072 || x % 262144 == 0);\nloop invariant i329: (x % 262144 != 0) ==> (x % 524288 == 131072 || x % 524288 == 262144 || x % 524288 == 0);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 180,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i164: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\nloop invariant i171: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i201: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i244: 0 <= y <= UINT_MAX;\n\n\nloop invariant i247: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i248: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\n\n\nloop invariant i251: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant i252: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant i253: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant i254: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant i255: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant i256: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant i257: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant i258: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant i259: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant i260: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant i261: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant i262: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant i263: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant i264: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant i265: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant i266: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant i267: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant i268: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant i269: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c"
        ],
        "skipped": [],
        "total": 8,
        "success_count": 2,
        "failure_count": 6,
        "success_rate": 0.25
    }
}