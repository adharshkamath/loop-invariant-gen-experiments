{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 500000;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant x <= y;\nloop invariant x >= y - 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 1 <= y <= 500000;\nloop invariant x <= y + 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x == 1000000 ==> (x < 500000 ==> y == 500000) && (500000 <= x < 750000 ==> y == 750000) && (x >= 750000 ==> y == 1000000);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant (0 <= x <= 1000000);\nloop invariant (500000 <= y <= 1000000);\nloop invariant (z == 0);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 1000000;\nloop invariant y >= 0;\nloop invariant y <= 500000;\nloop invariant x - y >= 0;\nloop invariant x - y <= 1000000;\nloop invariant (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant (x == (x + 2) ==> (y == y + 1 && x >= 750000));\nloop invariant (x == 1000000 ==> (y == 500000));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 100000000000;\nloop invariant x >= y;\nloop invariant x >= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x + 2 * y + 2 * z >= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant x >= 500000 ==> x <= 750000;\nloop invariant x < 500000 ==> x < 1000000;\nloop invariant y >= 500001 ==> y <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000;\nloop invariant 0 <= z <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000;\nloop invariant x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2) ==> y >= 750000;\nloop invariant x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 750000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant 500000 <= y <= 750000;\nloop invariant x <= 1000000;\nloop invariant x <= 2*y;\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant 0 <= z <= 1;\nloop invariant (if x < 500000 then x = 0 else (if x < 750000 then x = y - 1 else x = y - 2));\nloop invariant (if x < 500000 then y = 500000 else (if x < 750000 then y = 500000 else y = 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant (if x < 500000 then 0 <= y <= 500000 else (if x < 750000 then 500000 <= y <= 750000 else 750000 <= y <= 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant (if x < 500000 then y = 500000 else (if x < 750000 then y = 750000 else y = 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant z == 0;\nloop invariant (x == 1000000 ==> y == 500000);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant x%2==0 ==> x%2==0;\nloop invariant x%2==1 ==> x%2==1;\nloop invariant x%2==0 ==> y%2==0;\nloop invariant x%2==1 ==> y%2==1;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant x%2==0 ==> x%2==0;\nloop invariant x%2==1 ==> x%2==1;\nloop invariant x%2==0 ==> y%2==0;\nloop invariant x%2==1 ==> y%2==1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 500000;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant x <= y;\nloop invariant x >= y - 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 500000 is partially proven to be inductive.\nloop invariant x <= 1000000 is established but not preserved.\nloop invariant y <= 1000000 is established but not preserved.\nloop invariant x <= y is established but not preserved.\nloop invariant x >= y - 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 500000;\n\n\n\nloop invariant i6: x >= y - 1000000;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant z == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 0 <= y <= 500000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 1 <= y <= 500000;\nloop invariant x <= y + 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x == 1000000 ==> (x < 500000 ==> y == 500000) && (500000 <= x < 750000 ==> y == 750000) && (x >= 750000 ==> y == 1000000);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 1 <= y <= 500000 is established but not preserved.\nloop invariant x <= y + 1000000 is partially proven to be inductive.\nloop invariant 0 <= z <= 1000000 is partially proven to be inductive.\nloop invariant x == 1000000 ==> (x < 500000 ==> y == 500000) && (500000 <= x < 750000 ==> y == 750000) && (x >= 750000 ==> y == 1000000) is established but not preserved.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\nloop invariant i4: 0 <= z <= 1000000;\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant (0 <= x <= 1000000);\nloop invariant (500000 <= y <= 1000000);\nloop invariant (z == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant (0 <= x <= 1000000) is partially proven to be inductive.\nloop invariant (500000 <= y <= 1000000) is partially proven to be inductive.\nloop invariant (z == 0) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n\nloop invariant i6: (z == 0);\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 1000000;\nloop invariant y >= 0;\nloop invariant y <= 500000;\nloop invariant x - y >= 0;\nloop invariant x - y <= 1000000;\nloop invariant (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant (x == (x + 2) ==> (y == y + 1 && x >= 750000));\nloop invariant (x == 1000000 ==> (y == 500000));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 1000000 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 500000 is partially proven to be inductive.\nloop invariant x - y >= 0 is preserved but not established.\nloop invariant x - y <= 1000000 is partially proven to be inductive.\nloop invariant (x == (x + 1) ==> (y == y + 1 && x < 500000)) is partially proven to be inductive.\nloop invariant (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000)) is partially proven to be inductive.\nloop invariant (x == (x + 2) ==> (y == y + 1 && x >= 750000)) is partially proven to be inductive.\nloop invariant (x == 1000000 ==> (y == 500000)) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n\nloop invariant i6: x - y <= 1000000;\nloop invariant i7: (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant i8: (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant i9: (x == (x + 2) ==> (y == y + 1 && x >= 750000));\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 100000000000;\nloop invariant x >= y;\nloop invariant x >= z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 100000000000 is partially proven to be inductive.\nloop invariant x >= y is preserved but not established.\nloop invariant x >= z is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\nloop invariant i2: 500000 <= y <= 100000000000;\n\nloop invariant i4: x >= z;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x + 2 * y + 2 * z >= 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant 0 <= z <= 1000000 is partially proven to be inductive.\nloop invariant x + 2 * y + 2 * z >= 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 1000000;\nloop invariant i4: x + 2 * y + 2 * z >= 1000000;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant x >= 500000 ==> x <= 750000;\nloop invariant x < 500000 ==> x < 1000000;\nloop invariant y >= 500001 ==> y <= 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant x >= 500000 ==> x <= 750000 is established but not preserved.\nloop invariant x < 500000 ==> x < 1000000 is partially proven to be inductive.\nloop invariant y >= 500001 ==> y <= 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\nloop invariant i4: x < 500000 ==> x < 1000000;\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000;\nloop invariant 0 <= z <= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 500000 is established but not preserved.\nloop invariant 0 <= z <= 0 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000;\nloop invariant x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2) ==> y >= 750000;\nloop invariant x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 750000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant 0 <= z <= 1000000 is partially proven to be inductive.\nloop invariant x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000 is partially proven to be inductive.\nloop invariant x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2) ==> y >= 750000 is established but not preserved.\nloop invariant x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1 is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 750000 is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000 is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0 is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000 is established but not preserved.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2) is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 1000000;\n\n\n\n\n\nloop invariant i9: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\n\nloop invariant i11: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant i12: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant 500000 <= y <= 750000;\nloop invariant x <= 1000000;\nloop invariant x <= 2*y;\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant 500000 <= y <= 750000 is established but not preserved.\nloop invariant x <= 1000000 is established but not preserved.\nloop invariant x <= 2*y is partially proven to be inductive.\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000) is established but not preserved.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant 0 <= z <= 1;\nloop invariant (if x < 500000 then x = 0 else (if x < 750000 then x = y - 1 else x = y - 2));\nloop invariant (if x < 500000 then y = 500000 else (if x < 750000 then y = 500000 else y = 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant (if x < 500000 then 0 <= y <= 500000 else (if x < 750000 then 500000 <= y <= 750000 else 750000 <= y <= 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant (if x < 500000 then y = 500000 else (if x < 750000 then y = 750000 else y = 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'x'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 1;\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant z == 0;\nloop invariant (x == 1000000 ==> y == 500000);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 0 <= y <= 500000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant (x == 1000000 ==> y == 500000) is established but not preserved.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant x%2==0 ==> x%2==0;\nloop invariant x%2==1 ==> x%2==1;\nloop invariant x%2==0 ==> y%2==0;\nloop invariant x%2==1 ==> y%2==1;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant x%2==0 ==> x%2==0;\nloop invariant x%2==1 ==> x%2==1;\nloop invariant x%2==0 ==> y%2==0;\nloop invariant x%2==1 ==> y%2==1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 0 <= y <= 500000 is established but not preserved.\nloop invariant x%2==0 ==> x%2==0 is partially proven to be inductive.\nloop invariant x%2==1 ==> x%2==1 is partially proven to be inductive.\nloop invariant x%2==0 ==> y%2==0 is established but not preserved.\nloop invariant x%2==1 ==> y%2==1 is established but not preserved.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: x%2==0 ==> x%2==0;\nloop invariant i4: x%2==1 ==> x%2==1;\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 62: unexpected token 'x'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 500000;\nloop invariant i3: x <= 1000000;\nloop invariant i4: y <= 1000000;\nloop invariant i5: x <= y;\nloop invariant i6: x >= y - 1000000;\nloop invariant i7: 0 <= y <= 100000;\nloop invariant i8: x >= (1 + (y - 1) * y / 2);\nloop invariant i9: 0 <= x <= 1000000;\nloop invariant i10: 0 <= y <= 500000;\nloop invariant i11: z == 0;\nloop invariant i12: 1 <= y <= 500000;\nloop invariant i13: x <= y + 1000000;\nloop invariant i14: 0 <= z <= 1000000;\nloop invariant i15: x == 1000000 ==> (x < 500000 ==> y == 500000) && (500000 <= x < 750000 ==> y == 750000) && (x >= 750000 ==> y == 1000000);\nloop invariant i16: 500000 <= y <= 1000000;\nloop invariant i17: (0 <= x <= 1000000);\nloop invariant i18: (500000 <= y <= 1000000);\nloop invariant i19: (z == 0);\nloop invariant i20: y >= 0;\nloop invariant i21: y <= 500000;\nloop invariant i22: x - y >= 0;\nloop invariant i23: x - y <= 1000000;\nloop invariant i24: (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant i25: (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant i26: (x == (x + 2) ==> (y == y + 1 && x >= 750000));\nloop invariant i27: (x == 1000000 ==> (y == 500000));\nloop invariant i28: 500000 <= y <= 100000000000;\nloop invariant i29: x >= y;\nloop invariant i30: x >= z;\nloop invariant i31: x + 2 * y + 2 * z >= 1000000;\nloop invariant i32: x >= 500000 ==> x <= 750000;\nloop invariant i33: x < 500000 ==> x < 1000000;\nloop invariant i34: y >= 500001 ==> y <= 1000000;\nloop invariant i35: 500000 <= y <= 500000;\nloop invariant i36: 0 <= z <= 0;\nloop invariant i37: x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000;\nloop invariant i38: x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2) ==> y >= 750000;\nloop invariant i39: x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1;\nloop invariant i40: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 750000;\nloop invariant i41: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000;\nloop invariant i42: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\nloop invariant i43: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000;\nloop invariant i44: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant i45: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\nloop invariant i46: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000;\nloop invariant i47: 500000 <= y <= 750000;\nloop invariant i48: x <= 2*y;\nloop invariant i49: x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant i50: 0 <= z <= 1;\nloop invariant i51: (if x < 500000 then x = 0 else (if x < 750000 then x = y - 1 else x = y - 2));\nloop invariant i52: (if x < 500000 then y = 500000 else (if x < 750000 then y = 500000 else y = 750000));\nloop invariant i53: (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant i54: (if x < 500000 then 0 <= y <= 500000 else (if x < 750000 then 500000 <= y <= 750000 else 750000 <= y <= 750000));\nloop invariant i55: (if x < 500000 then y = 500000 else (if x < 750000 then y = 750000 else y = 750000));\nloop invariant i56: (x == 1000000 ==> y == 500000);\nloop invariant i57: x%2==0 ==> x%2==0;\nloop invariant i58: x%2==1 ==> x%2==1;\nloop invariant i59: x%2==0 ==> y%2==0;\nloop invariant i60: x%2==1 ==> y%2==1;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 20,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 500000;\n\n\n\nloop invariant i6: x >= y - 1000000;\n\n\n\n\nloop invariant i11: z == 0;\n\nloop invariant i13: x <= y + 1000000;\nloop invariant i14: 0 <= z <= 1000000;\n\n\n\n\nloop invariant i19: (z == 0);\nloop invariant i20: y >= 0;\n\n\nloop invariant i23: x - y <= 1000000;\nloop invariant i24: (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant i25: (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant i26: (x == (x + 2) ==> (y == y + 1 && x >= 750000));\n\nloop invariant i28: 500000 <= y <= 100000000000;\n\nloop invariant i30: x >= z;\nloop invariant i31: x + 2 * y + 2 * z >= 1000000;\n\nloop invariant i33: x < 500000 ==> x < 1000000;\n\n\nloop invariant i36: 0 <= z <= 0;\nloop invariant i37: x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000;\n\nloop invariant i39: x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1;\n\nloop invariant i41: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000;\nloop invariant i42: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\nloop invariant i43: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000;\nloop invariant i44: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant i45: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\nloop invariant i46: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000;\n\nloop invariant i48: x <= 2*y;\n\nloop invariant i50: 0 <= z <= 1;\n\n\n\n\n\n\nloop invariant i57: x%2==0 ==> x%2==0;\nloop invariant i58: x%2==1 ==> x%2==1;\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c"
        ],
        "skipped": [],
        "total": 15,
        "success_count": 4,
        "failure_count": 11,
        "success_rate": 0.26666666666666666
    }
}