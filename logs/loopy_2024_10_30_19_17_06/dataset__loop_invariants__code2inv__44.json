{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/44.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (unknown()) then (c <= n) else (c == n);\nloop invariant if (unknown()) then (c <= n) else (c == 1);\nloop invariant if (unknown()) then (c <= n) else (c == n);\nloop invariant if (unknown()) then (c <= n) else (c == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n ==> c != n);\nloop invariant (c > n ==> c >= n + 1);\nloop invariant 0 <= c <= n ==> c == n || c != n;\nloop invariant (c == n ==> c == n + 1);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\n*/\n```",
            "```\n/*@\nloop invariant c <= n;\nloop invariant c != n ==> c != 0;\nloop invariant c != n ==> c != 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c != n ==> c != 0;\nloop invariant c != n ==> c != 1;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if ( unknown() ) then c < n else c <= n;\nloop invariant if ( unknown() ) then c >= 1 else c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (n <= -1) ==> c != n;\nloop invariant if (n > -1) ==> c == n || c > n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n; loop invariant c <= n; loop invariant (n > 0) ==> (c <= n); loop invariant n <= -1 ==> (c != n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (n <= -1) then (c != n) else true;\nloop invariant if (n <= -1) then (c >= 1) else true;\nloop invariant if (n <= -1) then (c <= c + 1) else true;\nloop invariant if (n <= -1) then (c >= n + 1) else true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 1 ==> n <= -1;\nloop invariant c != n ==> n > 0;\nloop invariant c == n ==> n > 0;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant c >= 0;\nloop invariant n >= 0;\nloop invariant c <= n;\nloop invariant unknown ==> (c == 1);\nloop invariant c == n ==> unknown ==> (c > n);\nloop invariant !unknown ==> (c >= 1);\nloop invariant unknown ==> !unknown ==> (c <= n);\nloop invariant (c >= 1) ==> (c < n) ==> (c <= n);\nloop invariant (c == n) ==> (c > n) ==> (c > n);\nloop invariant (c < n) ==> (c > n) ==> (c >= 1);\nloop invariant (c > n) ==> (c <= n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c > n);\nloop invariant (c >= 1) ==> (c > n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c > n) ==> (c == n);\nloop invariant (c > n) ==> (c < n) ==> (c > n);\nloop invariant (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant (c > n) ==> (c < n) ==> (c == 1);\nloop invariant (c >= 1) ==> (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c < n) ==> (c == 1);\nloop invariant (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant (c > n) ==> (c < n) ==> (c == 1);\nloop invariant (c >= 1) ==> (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c < n) ==> (c > n);\nloop invariant (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant (c >= 1) ==> (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant c >= 1 + (n - 1) * n / 2;\nloop invariant c <= n;\nloop invariant c <= n + 1;\nloop invariant c >= 1;\nloop invariant c >= 0;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c >= 1 ==> c >= n ==> c == n + 1;\nloop invariant c >= 1 ==> c < n ==> c <= n + 1;\nloop invariant c >= 1 ==> c < n ==> c >= n ==> c == n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (n > 0) ==> ((c == n) || (c > n));\nloop invariant (n > 0) ==> (c < n) || (c == n);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (unknown()) then (c <= n) else (c == n);\nloop invariant if (unknown()) then (c <= n) else (c == 1);\nloop invariant if (unknown()) then (c <= n) else (c == n);\nloop invariant if (unknown()) then (c <= n) else (c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n ==> c != n);\nloop invariant (c > n ==> c >= n + 1);\nloop invariant 0 <= c <= n ==> c == n || c != n;\nloop invariant (c == n ==> c == n + 1);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\nloop invariant (c > n ==> c == n + 1);\nloop invariant (c == n ==> c != n);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != n + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c <= n ==> c != n);\nloop invariant i3: (c > n ==> c >= n + 1);\nloop invariant i4: 0 <= c <= n ==> c == n || c != n;\nloop invariant i5: (c == n ==> c == n + 1);\nloop invariant i6: (c > n ==> c == n);\nloop invariant i7: (c == n ==> c != n + 1);\nloop invariant i8: (c > n ==> c == n + 1);\nloop invariant i9: (c == n ==> c != n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant c <= n;\nloop invariant c != n ==> c != 0;\nloop invariant c != n ==> c != 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c != n ==> c != 0;\nloop invariant c != n ==> c != 1;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if ( unknown() ) then c < n else c <= n;\nloop invariant if ( unknown() ) then c >= 1 else c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (n <= -1) ==> c != n;\nloop invariant if (n > -1) ==> c == n || c > n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n; loop invariant c <= n; loop invariant (n > 0) ==> (c <= n); loop invariant n <= -1 ==> (c != n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (n <= -1) then (c != n) else true;\nloop invariant if (n <= -1) then (c >= 1) else true;\nloop invariant if (n <= -1) then (c <= c + 1) else true;\nloop invariant if (n <= -1) then (c >= n + 1) else true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 1 ==> n <= -1;\nloop invariant c != n ==> n > 0;\nloop invariant c == n ==> n > 0;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\nloop invariant c + 1 == n ==> c + 1 == n;\nloop invariant c + 1 != n ==> c + 1 != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != 1 ==> c != 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c + 1 <= n ==> c + 1 <= n;\nloop invariant c + 1 > n ==> c + 1 > n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\nloop invariant i3: c != n ==> n > 0;\nloop invariant i4: c == n ==> n > 0;\nloop invariant i5: c > n ==> c > n;\nloop invariant i6: c <= n ==> c <= n;\nloop invariant i7: c + 1 <= n ==> c + 1 <= n;\nloop invariant i8: c + 1 > n ==> c + 1 > n;\nloop invariant i9: c + 1 == n ==> c + 1 == n;\nloop invariant i10: c + 1 != n ==> c + 1 != n;\nloop invariant i11: c == 1 ==> c == 1;\nloop invariant i12: c != 1 ==> c != 1;\nloop invariant i13: c == n ==> c == n;\nloop invariant i14: c != n ==> c != n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant c >= 0;\nloop invariant n >= 0;\nloop invariant c <= n;\nloop invariant unknown ==> (c == 1);\nloop invariant c == n ==> unknown ==> (c > n);\nloop invariant !unknown ==> (c >= 1);\nloop invariant unknown ==> !unknown ==> (c <= n);\nloop invariant (c >= 1) ==> (c < n) ==> (c <= n);\nloop invariant (c == n) ==> (c > n) ==> (c > n);\nloop invariant (c < n) ==> (c > n) ==> (c >= 1);\nloop invariant (c > n) ==> (c <= n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c > n);\nloop invariant (c >= 1) ==> (c > n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c > n) ==> (c == n);\nloop invariant (c > n) ==> (c < n) ==> (c > n);\nloop invariant (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant (c > n) ==> (c < n) ==> (c == 1);\nloop invariant (c >= 1) ==> (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c < n) ==> (c == 1);\nloop invariant (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant (c > n) ==> (c < n) ==> (c == 1);\nloop invariant (c >= 1) ==> (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c < n) ==> (c > n);\nloop invariant (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant (c >= 1) ==> (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant (c > n) ==> (c < n) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n) ==> (c < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\nloop invariant i3: n >= 0;\nloop invariant i4: c <= n;\n\nloop invariant i6: c == n ==> unknown ==> (c > n);\nloop invariant i7: !unknown ==> (c >= 1);\nloop invariant i8: unknown ==> !unknown ==> (c <= n);\nloop invariant i9: (c >= 1) ==> (c < n) ==> (c <= n);\nloop invariant i10: (c == n) ==> (c > n) ==> (c > n);\nloop invariant i11: (c < n) ==> (c > n) ==> (c >= 1);\nloop invariant i12: (c > n) ==> (c <= n) ==> (c == n);\nloop invariant i13: (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant i14: (c > n) ==> (c < n) ==> (c > n);\nloop invariant i15: (c >= 1) ==> (c > n) ==> (c < n);\nloop invariant i16: (c > n) ==> (c < n) ==> (c == n);\nloop invariant i17: (c >= 1) ==> (c < n) ==> (c == n);\nloop invariant i18: (c >= 1) ==> (c > n) ==> (c == n);\nloop invariant i19: (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant i20: (c > n) ==> (c < n) ==> (c == 1);\nloop invariant i21: (c >= 1) ==> (c == n) ==> (c <= n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant c >= 1 + (n - 1) * n / 2;\nloop invariant c <= n;\nloop invariant c <= n + 1;\nloop invariant c >= 1;\nloop invariant c >= 0;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\nloop invariant c >= 1;\nloop invariant c >= (0 + 1) * (1 - 1) / 2;\nloop invariant c <= (n + 1) * n / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: c >= 0;\nloop invariant i8: c >= (0 + 1) * (1 - 1) / 2;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c >= 1 ==> c >= n ==> c == n + 1;\nloop invariant c >= 1 ==> c < n ==> c <= n + 1;\nloop invariant c >= 1 ==> c < n ==> c >= n ==> c == n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: c >= 1 ==> c < n ==> c <= n + 1;\nloop invariant i5: c >= 1 ==> c < n ==> c >= n ==> c == n + 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (n > 0) ==> ((c == n) || (c > n));\nloop invariant (n > 0) ==> (c < n) || (c == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: (n > 0) ==> (c < n) || (c == n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: if (unknown()) then (c <= n) else (c == n);\nloop invariant i3: if (unknown()) then (c <= n) else (c == 1);\nloop invariant i4: (c <= n ==> c != n);\nloop invariant i5: (c > n ==> c >= n + 1);\nloop invariant i6: 0 <= c <= n ==> c == n || c != n;\nloop invariant i7: (c == n ==> c == n + 1);\nloop invariant i8: (c > n ==> c == n);\nloop invariant i9: (c == n ==> c != n + 1);\nloop invariant i10: (c > n ==> c == n + 1);\nloop invariant i11: (c == n ==> c != n);\nloop invariant i12: c <= n;\nloop invariant i13: c != n ==> c != 0;\nloop invariant i14: c != n ==> c != 1;\nloop invariant i15: c >= 0;\nloop invariant i16: if ( unknown() ) then c < n else c <= n;\nloop invariant i17: if ( unknown() ) then c >= 1 else c == 1;\nloop invariant i18: if (n <= -1) ==> c != n;\nloop invariant i19: if (n > -1) ==> c == n || c > n;\nloop invariant i20: 0 <= c <= n; loop invariant c <= n; loop invariant (n > 0) ==> (c <= n); loop invariant n <= -1 ==> (c != n);\nloop invariant i21: if (n <= -1) then (c != n) else true;\nloop invariant i22: if (n <= -1) then (c >= 1) else true;\nloop invariant i23: if (n <= -1) then (c <= c + 1) else true;\nloop invariant i24: if (n <= -1) then (c >= n + 1) else true;\nloop invariant i25: c == 1 ==> n <= -1;\nloop invariant i26: c != n ==> n > 0;\nloop invariant i27: c == n ==> n > 0;\nloop invariant i28: c > n ==> c > n;\nloop invariant i29: c <= n ==> c <= n;\nloop invariant i30: c + 1 <= n ==> c + 1 <= n;\nloop invariant i31: c + 1 > n ==> c + 1 > n;\nloop invariant i32: c + 1 == n ==> c + 1 == n;\nloop invariant i33: c + 1 != n ==> c + 1 != n;\nloop invariant i34: c == 1 ==> c == 1;\nloop invariant i35: c != 1 ==> c != 1;\nloop invariant i36: c == n ==> c == n;\nloop invariant i37: c != n ==> c != n;\nloop invariant i38: x >= 0;\nloop invariant i39: n >= 0;\nloop invariant i40: unknown ==> (c == 1);\nloop invariant i41: c == n ==> unknown ==> (c > n);\nloop invariant i42: !unknown ==> (c >= 1);\nloop invariant i43: unknown ==> !unknown ==> (c <= n);\nloop invariant i44: (c >= 1) ==> (c < n) ==> (c <= n);\nloop invariant i45: (c == n) ==> (c > n) ==> (c > n);\nloop invariant i46: (c < n) ==> (c > n) ==> (c >= 1);\nloop invariant i47: (c > n) ==> (c <= n) ==> (c == n);\nloop invariant i48: (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant i49: (c > n) ==> (c < n) ==> (c > n);\nloop invariant i50: (c >= 1) ==> (c > n) ==> (c < n);\nloop invariant i51: (c > n) ==> (c < n) ==> (c == n);\nloop invariant i52: (c >= 1) ==> (c < n) ==> (c == n);\nloop invariant i53: (c >= 1) ==> (c > n) ==> (c == n);\nloop invariant i54: (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant i55: (c > n) ==> (c < n) ==> (c == 1);\nloop invariant i56: (c >= 1) ==> (c == n) ==> (c <= n);\nloop invariant i57: 0 <= n <= 100000;\nloop invariant i58: c >= 1 + (n - 1) * n / 2;\nloop invariant i59: c <= n + 1;\nloop invariant i60: c >= 1;\nloop invariant i61: c >= (0 + 1) * (1 - 1) / 2;\nloop invariant i62: c <= (n + 1) * n / 2;\nloop invariant i63: c >= 1 ==> c <= n;\nloop invariant i64: c >= 1 ==> c >= n ==> c == n + 1;\nloop invariant i65: c >= 1 ==> c < n ==> c <= n + 1;\nloop invariant i66: c >= 1 ==> c < n ==> c >= n ==> c == n + 1;\nloop invariant i67: (n > 0) ==> ((c == n) || (c > n));\nloop invariant i68: (n > 0) ==> (c < n) || (c == n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\n\nloop invariant i4: (c <= n ==> c != n);\nloop invariant i5: (c > n ==> c >= n + 1);\nloop invariant i6: 0 <= c <= n ==> c == n || c != n;\nloop invariant i7: (c == n ==> c == n + 1);\nloop invariant i8: (c > n ==> c == n);\nloop invariant i9: (c == n ==> c != n + 1);\nloop invariant i10: (c > n ==> c == n + 1);\nloop invariant i11: (c == n ==> c != n);\nloop invariant i12: c <= n;\n\nloop invariant i14: c != n ==> c != 1;\nloop invariant i15: c >= 0;\n\n\n\n\nloop invariant i20: 0 <= c <= n; loop invariant c <= n; loop invariant (n > 0) ==> (c <= n); loop invariant n <= -1 ==> (c != n);\n\n\n\n\nloop invariant i25: c == 1 ==> n <= -1;\nloop invariant i26: c != n ==> n > 0;\nloop invariant i27: c == n ==> n > 0;\nloop invariant i28: c > n ==> c > n;\nloop invariant i29: c <= n ==> c <= n;\nloop invariant i30: c + 1 <= n ==> c + 1 <= n;\nloop invariant i31: c + 1 > n ==> c + 1 > n;\nloop invariant i32: c + 1 == n ==> c + 1 == n;\nloop invariant i33: c + 1 != n ==> c + 1 != n;\nloop invariant i34: c == 1 ==> c == 1;\nloop invariant i35: c != 1 ==> c != 1;\nloop invariant i36: c == n ==> c == n;\nloop invariant i37: c != n ==> c != n;\n\nloop invariant i39: n >= 0;\n\nloop invariant i41: c == n ==> unknown ==> (c > n);\nloop invariant i42: !unknown ==> (c >= 1);\nloop invariant i43: unknown ==> !unknown ==> (c <= n);\nloop invariant i44: (c >= 1) ==> (c < n) ==> (c <= n);\nloop invariant i45: (c == n) ==> (c > n) ==> (c > n);\nloop invariant i46: (c < n) ==> (c > n) ==> (c >= 1);\nloop invariant i47: (c > n) ==> (c <= n) ==> (c == n);\nloop invariant i48: (c >= 1) ==> (c == n) ==> (c < n);\nloop invariant i49: (c > n) ==> (c < n) ==> (c > n);\nloop invariant i50: (c >= 1) ==> (c > n) ==> (c < n);\nloop invariant i51: (c > n) ==> (c < n) ==> (c == n);\nloop invariant i52: (c >= 1) ==> (c < n) ==> (c == n);\nloop invariant i53: (c >= 1) ==> (c > n) ==> (c == n);\nloop invariant i54: (c >= 1) ==> (c == n) ==> (c > n);\nloop invariant i55: (c > n) ==> (c < n) ==> (c == 1);\nloop invariant i56: (c >= 1) ==> (c == n) ==> (c <= n);\n\n\nloop invariant i59: c <= n + 1;\n\nloop invariant i61: c >= (0 + 1) * (1 - 1) / 2;\nloop invariant i62: c <= (n + 1) * n / 2;\nloop invariant i63: c >= 1 ==> c <= n;\nloop invariant i64: c >= 1 ==> c >= n ==> c == n + 1;\nloop invariant i65: c >= 1 ==> c < n ==> c <= n + 1;\nloop invariant i66: c >= 1 ==> c < n ==> c >= n ==> c == n + 1;\n\nloop invariant i68: (n > 0) ==> (c < n) || (c == n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 36,
        "success_count": 29,
        "failure_count": 7,
        "success_rate": 0.8055555555555556
    }
}