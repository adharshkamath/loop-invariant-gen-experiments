{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  while (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i = k;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant n >= i;\nloop invariant i + k = n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == k;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i;\nloop invariant k <= 2 * n;\nloop invariant i == k - n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i;\nloop invariant k <= (i + 1);\nloop invariant i < n ==> k == (i + 1);\nloop invariant i >= n ==> k == n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0; loop invariant k >= 0; loop invariant i <= n; loop invariant k <= n; loop invariant i <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant k == i;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant k == i;\nloop invariant i >= n;\nloop invariant k >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i == k;\nloop invariant k == i;\nloop invariant i == k && i <= n;\nloop invariant k == i && k <= n;\nloop invariant i == k && i <= n && k <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant 0 <= i <= n;\nloop invariant i == k - n;\nloop invariant i >= 0 ==> i < n;\nloop invariant k >= 0 ==> k <= n;\nloop invariant k >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i;\nloop invariant k >= 0;\nloop invariant k <= n;\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant i <= n;\nloop invariant k >= i;\nloop invariant i <= n ==> k >= n;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i == k;\nloop invariant k >= i;\nloop invariant n >= i;\nloop invariant n >= k;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i == k ==> n >= i;\nloop invariant i == k ==> n >= k;\nloop invariant i == k ==> i <= n;\nloop invariant i == k ==> k <= n;\nloop invariant i == k ==> n >= i;\nloop invariant i == k ==> n >= k;\nloop invariant i == k ==> i <= n;\nloop invariant i == k ==> k <= n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n + i;\nloop invariant n >= 0;\nloop invariant n <= 100000000;\nloop invariant unknown_int() >= 0;\nloop invariant unknown_int() <= 100000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i;\nloop invariant k <= i + (n - i) * (n - i + 1) / 2;\nloop invariant k >= n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant k >= i;\nloop invariant k <= n + i;\nloop invariant k >= 0;\nloop invariant k <= n + i;\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i = k;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant n >= i;\nloop invariant i + k = n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: k >= 0;\n\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == k;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\nloop invariant k <= i;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\n\nloop invariant i3: i == k;\nloop invariant i4: i >= 0;\nloop invariant i5: k >= 0;\n\n\n\nloop invariant i9: i <= k;\nloop invariant i10: k <= i;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i;\nloop invariant k <= 2 * n;\nloop invariant i == k - n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\nloop invariant i2: k >= i;\n\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i;\nloop invariant k <= (i + 1);\nloop invariant i < n ==> k == (i + 1);\nloop invariant i >= n ==> k == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\nloop invariant i2: k >= i;\nloop invariant i3: k <= (i + 1);\n\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0; loop invariant k >= 0; loop invariant i <= n; loop invariant k <= n; loop invariant i <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\nloop invariant i1: i >= 0; loop invariant k >= 0; loop invariant i <= n; loop invariant k <= n; loop invariant i <= k;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant k == i;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant k == i;\nloop invariant i >= n;\nloop invariant k >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: k == i;\n\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i == k;\nloop invariant k == i;\nloop invariant i == k && i <= n;\nloop invariant k == i && k <= n;\nloop invariant i == k && i <= n && k <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\n\n\nloop invariant i4: i == k;\nloop invariant i5: k == i;\n\n\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant 0 <= i <= n;\nloop invariant i == k - n;\nloop invariant i >= 0 ==> i < n;\nloop invariant k >= 0 ==> k <= n;\nloop invariant k >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\n\n\n\n\nloop invariant i6: k >= i;\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i;\nloop invariant k >= 0;\nloop invariant k <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\nloop invariant i2: k >= i;\nloop invariant i3: k >= 0;\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant i <= n;\nloop invariant k >= i;\nloop invariant i <= n ==> k >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\n\n\nloop invariant i4: k >= i;\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i == k;\nloop invariant k >= i;\nloop invariant n >= i;\nloop invariant n >= k;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i == k ==> n >= i;\nloop invariant i == k ==> n >= k;\nloop invariant i == k ==> i <= n;\nloop invariant i == k ==> k <= n;\nloop invariant i == k ==> n >= i;\nloop invariant i == k ==> n >= k;\nloop invariant i == k ==> i <= n;\nloop invariant i == k ==> k <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\nloop invariant i2: i == k;\nloop invariant i3: k >= i;\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n + i;\nloop invariant n >= 0;\nloop invariant n <= 100000000;\nloop invariant unknown_int() >= 0;\nloop invariant unknown_int() <= 100000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: k >= 0;\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i;\nloop invariant k <= i + (n - i) * (n - i + 1) / 2;\nloop invariant k >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\nloop invariant i2: k >= i;\n\n\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant k >= i;\nloop invariant k <= n + i;\nloop invariant k >= 0;\nloop invariant k <= n + i;\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\nloop invariant (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: k >= i;\n\nloop invariant i5: k >= 0;\nloop invariant i6: (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\nloop invariant i1: i = k;\nloop invariant i2: i >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: n >= i;\nloop invariant i5: i + k = n;\nloop invariant i6: 0 <= i <= n;\nloop invariant i7: 0 <= k <= n;\nloop invariant i8: i == k;\nloop invariant i9: n >= 0;\nloop invariant i10: i <= n;\nloop invariant i11: k <= n;\nloop invariant i12: i <= k;\nloop invariant i13: k <= i;\nloop invariant i14: k >= i;\nloop invariant i15: k <= 2 * n;\nloop invariant i16: i == k - n;\nloop invariant i17: k <= (i + 1);\nloop invariant i18: i < n ==> k == (i + 1);\nloop invariant i19: i >= n ==> k == n;\nloop invariant i20: i >= 0; loop invariant k >= 0; loop invariant i <= n; loop invariant k <= n; loop invariant i <= k;\nloop invariant i21: i == 0;\nloop invariant i22: k == 0;\nloop invariant i23: k == i;\nloop invariant i24: i >= n;\nloop invariant i25: k >= n;\nloop invariant i26: i == k && i <= n;\nloop invariant i27: k == i && k <= n;\nloop invariant i28: i == k && i <= n && k <= n;\nloop invariant i29: i >= 0 ==> i < n;\nloop invariant i30: k >= 0 ==> k <= n;\nloop invariant i31: i <= n ==> k >= n;\nloop invariant i32: n >= k;\nloop invariant i33: i == k ==> n >= i;\nloop invariant i34: i == k ==> n >= k;\nloop invariant i35: i == k ==> i <= n;\nloop invariant i36: i == k ==> k <= n;\nloop invariant i37: k <= n + i;\nloop invariant i38: n <= 100000000;\nloop invariant i39: unknown_int() >= 0;\nloop invariant i40: unknown_int() <= 100000000;\nloop invariant i41: k <= i + (n - i) * (n - i + 1) / 2;\nloop invariant i42: (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: k >= 0;\n\n\n\n\nloop invariant i8: i == k;\n\n\n\nloop invariant i12: i <= k;\nloop invariant i13: k <= i;\nloop invariant i14: k >= i;\n\n\nloop invariant i17: k <= (i + 1);\n\n\nloop invariant i20: i >= 0; loop invariant k >= 0; loop invariant i <= n; loop invariant k <= n; loop invariant i <= k;\n\n\nloop invariant i23: k == i;\n\n\nloop invariant i26: i == k && i <= n;\nloop invariant i27: k == i && k <= n;\nloop invariant i28: i == k && i <= n && k <= n;\n\nloop invariant i30: k >= 0 ==> k <= n;\n\nloop invariant i32: n >= k;\nloop invariant i33: i == k ==> n >= i;\nloop invariant i34: i == k ==> n >= k;\nloop invariant i35: i == k ==> i <= n;\nloop invariant i36: i == k ==> k <= n;\nloop invariant i37: k <= n + i;\n\n\n\nloop invariant i41: k <= i + (n - i) * (n - i + 1) / 2;\nloop invariant i42: (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i) ==> (i >= 0 && i <= n && k >= i && k <= n + i && k >= 0 && k <= n + i);\n*/\nwhile (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 138,
        "success_count": 119,
        "failure_count": 19,
        "success_rate": 0.8623188405797102
    }
}