{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/58.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == 1 ==> n == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c == n - 1 && c != 0;\nloop invariant c != n ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (if (c != n) then (c >= 0) else (c == 1));\nloop invariant (if (c != n) then (c <= n) else (c == 1));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c == n) then (c == 1) else (c <= n));\nloop invariant (if (c != n) then (c <= n) else (c == 1));\nloop invariant (if (c == n) then (c == 1) else (c <= n));\nloop invariant (if (c != n) then (c >= 0) else (c == 1));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;loop invariant c >= 0;loop invariant n > 0;loop invariant c != n ==> c < n;loop invariant c != n ==> c <= n;loop invariant c != n ==> c > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n ==> c == 1);\nloop invariant (c != n ==> c >= 0);\nloop invariant (c != n ==> c < n);\nloop invariant (c != n ==> c != 1);\nloop invariant (c == n ==> c == n);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n == (c == n);\nloop invariant (c != n) ==> c >= 0;\nloop invariant (c == n) ==> c == 1;\nloop invariant (c != n) ==> c == n;\nloop invariant (c == n) ==> c != n;\nloop invariant c == n == (c != n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant !unknown() ==> c == 1;\nloop invariant unknown() ==> c == n;\nloop invariant !(unknown() && c != n) ==> c <= n;\nloop invariant !(unknown() && c != n) ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 1 ==> c >= n;\nloop invariant c != n ==> c < n;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c == 0 || c == 1;\nloop invariant c != n ==> c == 0 || c == 1 || c == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant (c <= n) ==> (n > 0);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 1 ==> (c != n);\nloop invariant c == n ==> (c == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant c != n ==> unknown() ==> c < n;\nloop invariant c == n ==> !unknown() ==> c == 1;\nloop invariant c != n ==> unknown() ==> c == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == 1 ==> n == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c == n - 1 && c != 0;\nloop invariant c != n ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c != n ==> c >= 0;\n\n\nloop invariant i6: c == n ==> c == n - 1 && c != 0 ==> c == n - 1;\nloop invariant i7: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i8: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1;\nloop invariant i9: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i10: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i11: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i12: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i13: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i14: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i15: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i16: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i17: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i18: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i19: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i20: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (if (c != n) then (c >= 0) else (c == 1));\nloop invariant (if (c != n) then (c <= n) else (c == 1));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c == n) then (c == 1) else (c <= n));\nloop invariant (if (c != n) then (c <= n) else (c == 1));\nloop invariant (if (c == n) then (c == 1) else (c <= n));\nloop invariant (if (c != n) then (c >= 0) else (c == 1));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\nloop invariant (if (c == n) then (c == 1) else (c >= 0));\nloop invariant (if (c != n) then (c >= 0) else (c <= n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;loop invariant c >= 0;loop invariant n > 0;loop invariant c != n ==> c < n;loop invariant c != n ==> c <= n;loop invariant c != n ==> c > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;loop invariant c >= 0;loop invariant n > 0;loop invariant c != n ==> c < n;loop invariant c != n ==> c <= n;loop invariant c != n ==> c > 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n ==> c == 1);\nloop invariant (c != n ==> c >= 0);\nloop invariant (c != n ==> c < n);\nloop invariant (c != n ==> c != 1);\nloop invariant (c == n ==> c == n);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: (c != n ==> c >= 0);\n\n\nloop invariant i6: (c == n ==> c == n);\nloop invariant i7: (c == n ==> c <= n);\nloop invariant i8: (c == n ==> c >= n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (c != n) ==> (c >= 0);\n\n\nloop invariant i5: (c == n) ==> (c >= n);\n\nloop invariant i7: (c == n) ==> (c <= n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n == (c == n);\nloop invariant (c != n) ==> c >= 0;\nloop invariant (c == n) ==> c == 1;\nloop invariant (c != n) ==> c == n;\nloop invariant (c == n) ==> c != n;\nloop invariant c == n == (c != n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: (c != n) ==> c >= 0;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant !unknown() ==> c == 1;\nloop invariant unknown() ==> c == n;\nloop invariant !(unknown() && c != n) ==> c <= n;\nloop invariant !(unknown() && c != n) ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 1 ==> c >= n;\nloop invariant c != n ==> c < n;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c == 0 || c == 1;\nloop invariant c != n ==> c == 0 || c == 1 || c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\n\n\n\nloop invariant i5: c != n ==> c >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant (c <= n) ==> (n > 0);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 1 ==> (c != n);\nloop invariant c == n ==> (c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: (c <= n) ==> (n > 0);\nloop invariant i3: c >= 0;\nloop invariant i4: c <= n;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant c != n ==> unknown() ==> c < n;\nloop invariant c == n ==> !unknown() ==> c == 1;\nloop invariant c != n ==> unknown() ==> c == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\nloop invariant c != n ==> c <= c;\nloop invariant c == n ==> c <= c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n\nloop invariant i4: c == n ==> c == n;\nloop invariant i5: c == n ==> c >= 0;\nloop invariant i6: c != n ==> c >= 0;\nloop invariant i7: c != n ==> c <= c;\nloop invariant i8: c == n ==> c <= c;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 45: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 1 <= c <= n;\nloop invariant i2: c == 1 ==> n == 0;\nloop invariant i3: 0 <= c <= n;\nloop invariant i4: c == n ==> c == 1;\nloop invariant i5: c != n ==> c >= 0;\nloop invariant i6: c == n ==> c == n - 1 && c != 0;\nloop invariant i7: c != n ==> c != n - 1 || c == 0;\nloop invariant i8: c == n ==> c == n - 1 && c != 0 ==> c == n - 1;\nloop invariant i9: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i10: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1;\nloop invariant i11: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i12: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i13: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i14: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i15: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i16: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i17: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i18: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i19: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i20: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i21: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i22: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i23: c >= 0;\nloop invariant i24: c <= n;\nloop invariant i25: (if (c != n) then (c >= 0) else (c == 1));\nloop invariant i26: (if (c != n) then (c <= n) else (c == 1));\nloop invariant i27: (if (c == n) then (c == 1) else (c >= 0));\nloop invariant i28: (if (c == n) then (c == 1) else (c <= n));\nloop invariant i29: (if (c != n) then (c >= 0) else (c <= n));\nloop invariant i30: 0 <= c <= n;loop invariant c >= 0;loop invariant n > 0;loop invariant c != n ==> c < n;loop invariant c != n ==> c <= n;loop invariant c != n ==> c > 0;\nloop invariant i31: (c == n ==> c == 1);\nloop invariant i32: (c != n ==> c >= 0);\nloop invariant i33: (c != n ==> c < n);\nloop invariant i34: (c != n ==> c != 1);\nloop invariant i35: (c == n ==> c == n);\nloop invariant i36: (c == n ==> c <= n);\nloop invariant i37: (c == n ==> c >= n);\nloop invariant i38: (c != n) ==> (c >= 0);\nloop invariant i39: (c == n) ==> (c == 1);\nloop invariant i40: (c != n) ==> (c < n);\nloop invariant i41: (c == n) ==> (c >= n);\nloop invariant i42: (c != n) ==> (c <= n);\nloop invariant i43: (c == n) ==> (c <= n);\nloop invariant i44: c == n == (c == n);\nloop invariant i45: (c != n) ==> c >= 0;\nloop invariant i46: (c == n) ==> c == 1;\nloop invariant i47: (c != n) ==> c == n;\nloop invariant i48: (c == n) ==> c != n;\nloop invariant i49: c == n == (c != n);\nloop invariant i50: !unknown() ==> c == 1;\nloop invariant i51: unknown() ==> c == n;\nloop invariant i52: !(unknown() && c != n) ==> c <= n;\nloop invariant i53: !(unknown() && c != n) ==> c >= 0;\nloop invariant i54: 0 <= c; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0;\nloop invariant i55: c == 1 ==> c >= n;\nloop invariant i56: c != n ==> c < n;\nloop invariant i57: c != n ==> c <= n;\nloop invariant i58: c != n ==> c == 0 || c == 1;\nloop invariant i59: c != n ==> c == 0 || c == 1 || c == n;\nloop invariant i60: 0 <= c;\nloop invariant i61: (c <= n) ==> (n > 0);\nloop invariant i62: c == 1 ==> (c != n);\nloop invariant i63: c == n ==> (c == 1);\nloop invariant i64: 0 <= n;\nloop invariant i65: c != n ==> unknown() ==> c < n;\nloop invariant i66: c == n ==> !unknown() ==> c == 1;\nloop invariant i67: c != n ==> unknown() ==> c == 0;\nloop invariant i68: c == n ==> c == n;\nloop invariant i69: c == n ==> c >= 0;\nloop invariant i70: c != n ==> c <= c;\nloop invariant i71: c == n ==> c <= c;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c == 1 ==> n == 0;\nloop invariant i3: 0 <= c <= n;\nloop invariant i4: c == n ==> c == 1;\nloop invariant i5: c != n ==> c >= 0;\nloop invariant i6: c == n ==> c == n - 1 && c != 0;\nloop invariant i7: c != n ==> c != n - 1 || c == 0;\nloop invariant i8: c == n ==> c == n - 1 && c != 0 ==> c == n - 1;\nloop invariant i9: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i10: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1;\nloop invariant i11: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i12: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i13: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i14: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i15: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i16: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i17: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i18: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i19: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i20: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i21: c != n ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0 ==> c != n - 1 || c == 0;\nloop invariant i22: c == n ==> c == n - 1 && c != 0 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1 ==> c == n - 1;\nloop invariant i23: c >= 0;\nloop invariant i24: c <= n;\n\n\n\n\n\nloop invariant i30: 0 <= c <= n;loop invariant c >= 0;loop invariant n > 0;loop invariant c != n ==> c < n;loop invariant c != n ==> c <= n;loop invariant c != n ==> c > 0;\nloop invariant i31: (c == n ==> c == 1);\nloop invariant i32: (c != n ==> c >= 0);\nloop invariant i33: (c != n ==> c < n);\nloop invariant i34: (c != n ==> c != 1);\nloop invariant i35: (c == n ==> c == n);\nloop invariant i36: (c == n ==> c <= n);\nloop invariant i37: (c == n ==> c >= n);\nloop invariant i38: (c != n) ==> (c >= 0);\nloop invariant i39: (c == n) ==> (c == 1);\nloop invariant i40: (c != n) ==> (c < n);\nloop invariant i41: (c == n) ==> (c >= n);\nloop invariant i42: (c != n) ==> (c <= n);\nloop invariant i43: (c == n) ==> (c <= n);\nloop invariant i44: c == n == (c == n);\nloop invariant i45: (c != n) ==> c >= 0;\nloop invariant i46: (c == n) ==> c == 1;\nloop invariant i47: (c != n) ==> c == n;\nloop invariant i48: (c == n) ==> c != n;\nloop invariant i49: c == n == (c != n);\n\n\n\n\nloop invariant i54: 0 <= c; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0; loop invariant c <= n; loop invariant c >= 0;\nloop invariant i55: c == 1 ==> c >= n;\nloop invariant i56: c != n ==> c < n;\nloop invariant i57: c != n ==> c <= n;\nloop invariant i58: c != n ==> c == 0 || c == 1;\nloop invariant i59: c != n ==> c == 0 || c == 1 || c == n;\nloop invariant i60: 0 <= c;\nloop invariant i61: (c <= n) ==> (n > 0);\nloop invariant i62: c == 1 ==> (c != n);\nloop invariant i63: c == n ==> (c == 1);\nloop invariant i64: 0 <= n;\n\n\n\nloop invariant i68: c == n ==> c == n;\nloop invariant i69: c == n ==> c >= 0;\nloop invariant i70: c != n ==> c <= c;\nloop invariant i71: c == n ==> c <= c;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c"
        ],
        "skipped": [],
        "total": 51,
        "success_count": 43,
        "failure_count": 8,
        "success_rate": 0.8431372549019608
    }
}