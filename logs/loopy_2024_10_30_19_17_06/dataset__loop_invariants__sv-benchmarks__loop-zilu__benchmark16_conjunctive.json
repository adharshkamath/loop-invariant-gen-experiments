{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  while (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1 ==> k == 1;\nloop invariant i == 1 ==> k == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= 2;\nloop invariant k <= 0;\nloop invariant 0 <= k;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i;\nloop invariant 0 <= k <= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1 ==> k == 0;\nloop invariant k < 0 ==> i == 1;\nloop invariant k == 0 ==> i + k == 1;\nloop invariant k < 0 ==> i + k == 2;\nloop invariant k == 0 ==> i >= 1 ==> i + k == 1;\nloop invariant k < 0 ==> i == 1 ==> i + k == 2;\nloop invariant k < 0 ==> i >= 1 ==> i + k == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i && i <= k + 1;\nloop invariant 0 <= k && k <= 1;\nloop invariant 0 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant k <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= 2;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k == 2 ==> k == 1 && i == 2;\nloop invariant i + k == 1 ==> k == 1 && i == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1 + k;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant 0 <= i <= 1 + k;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= i;\nloop invariant i + k <= 2;\nloop invariant i + k <= i + k;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i == 1 ==> k == 1;\nloop invariant i == 1 ==> k == 0;\nloop invariant i == 1 ==> k == 1 ==> i + k == 2;\nloop invariant i == 1 ==> k == 0 ==> i + k == 1;\nloop invariant i >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1 && k >= 0;\nloop invariant i == 1 + unknown_int();\nloop invariant k == unknown_int() - unknown_int();\nloop invariant i + k == unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1 && 1 <= i <= 2;\nloop invariant i - k == 1 ==> k == 0;\nloop invariant i - k == 1 ==> i == 1;\nloop invariant i - k == 2 ==> i == 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i >= 1;\nloop invariant i <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= k <= 1;\nloop invariant i + k == 1;\nloop invariant (unknown_bool() ==> i == 1 && k == 0);\n*/\n```",
            "```\n/*@\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i == 1 ==> k == 1;\nloop invariant !unknown_bool() ==> i == 2 && k == 0;\n*/\n```",
            "```\n/*@\nloop invariant k >= 0;\nloop invariant i >= 1;\nloop invariant i - 1 >= k;\nloop invariant i <= 2;\nloop invariant k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1 ==> k == 1;\nloop invariant i == 1 ==> k == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: i + k >= 1;\nloop invariant i4: i + k <= 2;\n\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: i >= 1;\nloop invariant i4: i + k >= 1;\nloop invariant i5: i + k <= 4;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= 2;\nloop invariant k <= 0;\nloop invariant 0 <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\n\n\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i;\nloop invariant 0 <= k <= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1 ==> k == 0;\nloop invariant k < 0 ==> i == 1;\nloop invariant k == 0 ==> i + k == 1;\nloop invariant k < 0 ==> i + k == 2;\nloop invariant k == 0 ==> i >= 1 ==> i + k == 1;\nloop invariant k < 0 ==> i == 1 ==> i + k == 2;\nloop invariant k < 0 ==> i >= 1 ==> i + k == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 1 <= i;\n\nloop invariant i3: i + k <= 2;\n\n\n\n\n\nloop invariant i9: k < 0 ==> i == 1 ==> i + k == 2;\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i && i <= k + 1;\nloop invariant 0 <= k && k <= 1;\nloop invariant 0 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant k <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: 0 <= i + k && i + k <= 2;\nloop invariant i4: i >= 1;\nloop invariant i5: k <= i;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= 2;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k == 2 ==> k == 1 && i == 2;\nloop invariant i + k == 1 ==> k == 1 && i == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\nloop invariant i + k == 1 ==> i + k == 1;\nloop invariant i + k == 2 ==> i + k == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: i + k <= 2;\nloop invariant i4: i >= 1;\nloop invariant i5: i + k >= 1;\n\n\nloop invariant i8: i + k == 2 ==> i + k == 2;\nloop invariant i9: i + k == 1 ==> i + k == 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1 + k;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant 0 <= i <= 1 + k;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: i + k >= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= i;\nloop invariant i + k <= 2;\nloop invariant i + k <= i + k;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\nloop invariant i + k <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: i + k >= 1;\nloop invariant i4: i + k <= 2;\nloop invariant i5: i >= 1;\n\nloop invariant i7: i + k <= i + k;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i == 1 ==> k == 1;\nloop invariant i == 1 ==> k == 0;\nloop invariant i == 1 ==> k == 1 ==> i + k == 2;\nloop invariant i == 1 ==> k == 0 ==> i + k == 1;\nloop invariant i >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\nloop invariant i2: 1 <= i + k && i + k <= 2;\nloop invariant i3: i >= 1;\n\n\nloop invariant i6: k <= 1;\n\n\nloop invariant i9: i == 1 ==> k == 1 ==> i + k == 2;\nloop invariant i10: i == 1 ==> k == 0 ==> i + k == 1;\nloop invariant i11: i >= 1 ==> i + k <= 2;\nloop invariant i12: i >= 1 ==> i + k >= 1;\nloop invariant i13: i <= 2 ==> i + k <= 2;\nloop invariant i14: i <= 2 ==> i + k >= 1;\nloop invariant i15: i >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i16: i >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i17: i <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i18: i <= 2 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i19: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i20: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i21: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i22: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i23: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i24: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i25: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i26: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i27: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i28: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i29: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i30: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i31: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i32: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i33: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i34: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i35: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i36: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1 && k >= 0;\nloop invariant i == 1 + unknown_int();\nloop invariant k == unknown_int() - unknown_int();\nloop invariant i + k == unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1 && 1 <= i <= 2;\nloop invariant i - k == 1 ==> k == 0;\nloop invariant i - k == 1 ==> i == 1;\nloop invariant i - k == 2 ==> i == 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i >= 1;\nloop invariant i <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\nloop invariant i2: i - k == 1 ==> k == 0;\nloop invariant i3: i - k == 1 ==> i == 1;\nloop invariant i4: i - k == 2 ==> i == 2;\n\nloop invariant i6: k <= 1;\nloop invariant i7: i >= 1;\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= k <= 1;\nloop invariant i + k == 1;\nloop invariant (unknown_bool() ==> i == 1 && k == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i >= 1;\nloop invariant i <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i == 1 ==> k == 1;\nloop invariant !unknown_bool() ==> i == 2 && k == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\nloop invariant i2: k <= 1;\nloop invariant i3: i >= 1;\n\nloop invariant i5: i + k >= 1;\nloop invariant i6: i + k <= 2;\n\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant k >= 0;\nloop invariant i >= 1;\nloop invariant i - 1 >= k;\nloop invariant i <= 2;\nloop invariant k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\nloop invariant i2: i >= 1;\n\n\nloop invariant i5: k <= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\nloop invariant i2: 1 <= i + k <= 2;\nloop invariant i3: i >= 1;\nloop invariant i4: i + k >= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 83: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= k <= 1;\nloop invariant i2: i >= 1;\nloop invariant i3: i + k >= 1;\nloop invariant i4: i + k <= 2;\nloop invariant i5: i >= 1 ==> k == 1;\nloop invariant i6: i == 1 ==> k == 0;\nloop invariant i7: 0 <= i <= 2;\nloop invariant i8: i + k <= 4;\nloop invariant i9: 0 <= i;\nloop invariant i10: i <= 2;\nloop invariant i11: k <= 0;\nloop invariant i12: 0 <= k;\nloop invariant i13: 1 <= i;\nloop invariant i14: i >= 1 ==> k == 0;\nloop invariant i15: k < 0 ==> i == 1;\nloop invariant i16: k == 0 ==> i + k == 1;\nloop invariant i17: k < 0 ==> i + k == 2;\nloop invariant i18: k == 0 ==> i >= 1 ==> i + k == 1;\nloop invariant i19: k < 0 ==> i == 1 ==> i + k == 2;\nloop invariant i20: k < 0 ==> i >= 1 ==> i + k == 2;\nloop invariant i21: 0 <= i && i <= k + 1;\nloop invariant i22: 0 <= k && k <= 1;\nloop invariant i23: 0 <= i + k && i + k <= 2;\nloop invariant i24: k <= i;\nloop invariant i25: 1 <= i <= 2;\nloop invariant i26: i + k == 2 ==> k == 1 && i == 2;\nloop invariant i27: i + k == 1 ==> k == 1 && i == 1;\nloop invariant i28: i + k == 2 ==> i + k == 2;\nloop invariant i29: i + k == 1 ==> i + k == 1;\nloop invariant i30: 0 <= i <= 1 + k;\nloop invariant i31: i + k <= i;\nloop invariant i32: i + k <= i + k;\nloop invariant i33: 1 <= i + k && i + k <= 2;\nloop invariant i34: k >= 0;\nloop invariant i35: k <= 1;\nloop invariant i36: i == 1 ==> k == 1;\nloop invariant i37: i == 1 ==> k == 1 ==> i + k == 2;\nloop invariant i38: i == 1 ==> k == 0 ==> i + k == 1;\nloop invariant i39: i >= 1 ==> i + k <= 2;\nloop invariant i40: i >= 1 ==> i + k >= 1;\nloop invariant i41: i <= 2 ==> i + k <= 2;\nloop invariant i42: i <= 2 ==> i + k >= 1;\nloop invariant i43: i >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i44: i >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i45: i <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i46: i <= 2 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i47: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i48: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i49: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i50: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i51: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i52: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i53: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i54: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i55: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i56: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i57: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i58: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i59: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i60: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i61: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i62: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i63: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i64: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i65: 1 <= i + k && i + k <= 2 && i >= 1 && k >= 0;\nloop invariant i66: i == 1 + unknown_int();\nloop invariant i67: k == unknown_int() - unknown_int();\nloop invariant i68: i + k == unknown_int() + unknown_int();\nloop invariant i69: i + k == unknown_int() + unknown_int() + unknown_int();\nloop invariant i70: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i71: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i72: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i73: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i74: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i75: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i76: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i77: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i78: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i79: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i80: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i81: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i82: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i83: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i84: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i85: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i86: i + k == unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int() + unknown_int();\nloop invariant i87: 0 <= k <= 1 && 1 <= i <= 2;\nloop invariant i88: i - k == 1 ==> k == 0;\nloop invariant i89: i - k == 1 ==> i == 1;\nloop invariant i90: i - k == 2 ==> i == 2;\nloop invariant i91: 0 <= i <= 1;\nloop invariant i92: i + k == 1;\nloop invariant i93: (unknown_bool() ==> i == 1 && k == 0);\nloop invariant i94: !unknown_bool() ==> i == 2 && k == 0;\nloop invariant i95: i - 1 >= k;\nloop invariant i96: 1 <= i + k <= 2;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 38,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: i + k >= 1;\nloop invariant i4: i + k <= 2;\n\n\n\nloop invariant i8: i + k <= 4;\nloop invariant i9: 0 <= i;\n\n\n\nloop invariant i13: 1 <= i;\n\n\n\n\n\nloop invariant i19: k < 0 ==> i == 1 ==> i + k == 2;\n\n\n\nloop invariant i23: 0 <= i + k && i + k <= 2;\nloop invariant i24: k <= i;\n\n\n\nloop invariant i28: i + k == 2 ==> i + k == 2;\nloop invariant i29: i + k == 1 ==> i + k == 1;\n\n\nloop invariant i32: i + k <= i + k;\nloop invariant i33: 1 <= i + k && i + k <= 2;\n\nloop invariant i35: k <= 1;\n\nloop invariant i37: i == 1 ==> k == 1 ==> i + k == 2;\nloop invariant i38: i == 1 ==> k == 0 ==> i + k == 1;\nloop invariant i39: i >= 1 ==> i + k <= 2;\nloop invariant i40: i >= 1 ==> i + k >= 1;\nloop invariant i41: i <= 2 ==> i + k <= 2;\nloop invariant i42: i <= 2 ==> i + k >= 1;\nloop invariant i43: i >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i44: i >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i45: i <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i46: i <= 2 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i47: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i48: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i49: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i50: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i51: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i52: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i53: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i54: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i55: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i56: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i57: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i58: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i59: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i60: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\nloop invariant i61: i <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i62: i <= 2 ==> i + k >= 1 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2 ==> i + k <= 2;\nloop invariant i63: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k <= 2;\nloop invariant i64: i >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1 ==> i + k >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i88: i - k == 1 ==> k == 0;\nloop invariant i89: i - k == 1 ==> i == 1;\nloop invariant i90: i - k == 2 ==> i == 2;\n\n\n\n\n\nloop invariant i96: 1 <= i + k <= 2;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 137,
        "success_count": 118,
        "failure_count": 19,
        "success_rate": 0.8613138686131386
    }
}