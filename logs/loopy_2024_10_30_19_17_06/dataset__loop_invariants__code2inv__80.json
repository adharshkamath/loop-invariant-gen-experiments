{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/80.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant (i < x) ==> (i < y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i == y || i == y - 1;\nloop invariant i == y - 1 || i == y;\nloop invariant i == y - 1 || i == y || i == y - 2;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 || i == y - 14;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 || i == y - 14 || i == y - 15;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < z1);\nloop invariant i < y ==> (i < z2);\nloop invariant i < y ==> (i < z3);\nloop invariant i < y ==> (i < y);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant y <= i + 1 ==> i < x;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i + 1 < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= i;\nloop invariant i < y ==> x >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant z1 ==> (i < y);\nloop invariant z2 ==> (i >= y);\nloop invariant z3 ==> (i < x);\nloop invariant z3 ==> (i >= x);\nloop invariant z3 ==> (i < y);\nloop invariant z3 ==> (i >= y);\nloop invariant z3 ==> (i < x);\nloop invariant z3 ==> (i >= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= y;\nloop invariant i < x;\nloop invariant x >= y;\nloop invariant i < y ==> (i < x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i < y ==> i < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= (y + i);\nloop invariant i <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= (i + y);\nloop invariant (i < y) ==> (i < x);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= y;\nloop invariant i >= 1;\nloop invariant i <= y;\nloop invariant (i < y) ==> (i < x);\nloop invariant (i < y) ==> (i <= y);\nloop invariant (i < y) ==> (x >= i);\nloop invariant (i < y) ==> (x >= y);\nloop invariant (i < y) ==> (x >= (y - 1));\nloop invariant (i < y) ==> (x >= 0);\nloop invariant (i < y) ==> (x >= (y - i));\nloop invariant (i < y) ==> (x >= (y - i + 1));\nloop invariant (i < y) ==> (x >= (y - i + 2));\nloop invariant (i < y) ==> (x >= (y - i + 3));\nloop invariant (i < y) ==> (x >= (y - i + 4));\nloop invariant (i < y) ==> (x >= (y - i + 5));\nloop invariant (i < y) ==> (x >= (y - i + 6));\nloop invariant (i < y) ==> (x >= (y - i + 7));\nloop invariant (i < y) ==> (x >= (y - i + 8));\nloop invariant (i < y) ==> (x >= (y - i + 9));\nloop invariant (i < y) ==> (x >= (y - i + 10));\nloop invariant (i < y) ==> (x >= (y - i + 11));\nloop invariant (i < y) ==> (x >= (y - i + 12));\nloop invariant (i < y) ==> (x >= (y - i + 13));\nloop invariant (i < y) ==> (x >= (y - i + 14));\nloop invariant (i < y) ==> (x >= (y - i + 15));\nloop invariant (i < y) ==> (x >= (y - i + 16));\nloop invariant (i < y) ==> (x >= (y - i + 17));\nloop invariant (i < y) ==> (x >= (y - i + 18));\nloop invariant (i < y) ==> (x >= (y - i + 19));\nloop invariant (i < y) ==> (x >= (y - i + 20));\nloop invariant (i < y) ==> (x >= (y - i + 21));\nloop invariant (i < y) ==> (x >= (y - i + 22));\nloop invariant (i < y) ==> (x >= (y - i + 23));\nloop invariant (i < y) ==> (x >= (y - i + 24));\nloop invariant (i < y) ==> (x >= (y - i + 25));\nloop invariant (i < y) ==> (x >= (y - i + 26));\nloop invariant (i < y) ==> (x >= (y - i + 27));\nloop invariant (i < y) ==> (x >= (y - i + 28));\nloop invariant (i < y) ==> (x >= (y - i + 29));\nloop invariant (i < y) ==> (x >= (y - i + 30));\nloop invariant (i < y) ==> (x >= (y - i + 31));\nloop invariant (i < y) ==> (x >= (y - i + 32));\nloop invariant (i < y) ==> (x >= (y - i + 33));\nloop invariant (i < y) ==> (x >= (y - i + 34));\nloop invariant (i < y) ==> (x >= (y - i + 35));\nloop invariant (i < y) ==> (x >= (y - i + 36));\nloop invariant (i < y) ==> (x >= (y - i + 37));\nloop invariant (i < y) ==> (x >= (y - i + 38));\nloop invariant (i < y) ==> (x >= (y - i + 39));\nloop invariant (i < y) ==> (x >= (y - i + 40));\nloop invariant (i < y) ==> (x >= (y - i + 41));\nloop invariant (i < y) ==> (x >= (y - i + 42));\nloop invariant (i < y) ==> (x >= (y - i + 43));\nloop invariant (i < y) ==> (x >= (y - i + 44));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i < y ==> (i < x);\nloop invariant i3: i < y ==> x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant (i < x) ==> (i < y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i == y || i == y - 1;\nloop invariant i == y - 1 || i == y;\nloop invariant i == y - 1 || i == y || i == y - 2;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 || i == y - 14;\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 || i == y - 14 || i == y - 15;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < z1);\nloop invariant i < y ==> (i < z2);\nloop invariant i < y ==> (i < z3);\nloop invariant i < y ==> (i < y);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n\n\n\nloop invariant i6: i < y ==> (i < y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i >= 0;\nloop invariant i3: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant i >= 0;\nloop invariant i <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i <= y;\nloop invariant i2: i >= 0;\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant y <= i + 1 ==> i < x;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i + 1 < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\nloop invariant i + 1 < y ==> i < x + 1;\nloop invariant i + 1 < y ==> i < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= i;\nloop invariant i < y ==> x >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\nloop invariant i3: x >= i;\nloop invariant i4: y >= i;\nloop invariant i5: i < y ==> x >= i;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant z1 ==> (i < y);\nloop invariant z2 ==> (i >= y);\nloop invariant z3 ==> (i < x);\nloop invariant z3 ==> (i >= x);\nloop invariant z3 ==> (i < y);\nloop invariant z3 ==> (i >= y);\nloop invariant z3 ==> (i < x);\nloop invariant z3 ==> (i >= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\nloop invariant i3: x >= i;\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= y;\nloop invariant i < x;\nloop invariant x >= y;\nloop invariant i < y ==> (i < x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= y;\n\nloop invariant i4: x >= y;\nloop invariant i5: i < y ==> (i < x);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i < y ==> i < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i >= 0;\nloop invariant i3: x >= y;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: i < y ==> i < x;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= (y + i);\nloop invariant i <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= (i + y);\nloop invariant (i < y) ==> (i < x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= y;\nloop invariant i >= 1;\nloop invariant i <= y;\nloop invariant (i < y) ==> (i < x);\nloop invariant (i < y) ==> (i <= y);\nloop invariant (i < y) ==> (x >= i);\nloop invariant (i < y) ==> (x >= y);\nloop invariant (i < y) ==> (x >= (y - 1));\nloop invariant (i < y) ==> (x >= 0);\nloop invariant (i < y) ==> (x >= (y - i));\nloop invariant (i < y) ==> (x >= (y - i + 1));\nloop invariant (i < y) ==> (x >= (y - i + 2));\nloop invariant (i < y) ==> (x >= (y - i + 3));\nloop invariant (i < y) ==> (x >= (y - i + 4));\nloop invariant (i < y) ==> (x >= (y - i + 5));\nloop invariant (i < y) ==> (x >= (y - i + 6));\nloop invariant (i < y) ==> (x >= (y - i + 7));\nloop invariant (i < y) ==> (x >= (y - i + 8));\nloop invariant (i < y) ==> (x >= (y - i + 9));\nloop invariant (i < y) ==> (x >= (y - i + 10));\nloop invariant (i < y) ==> (x >= (y - i + 11));\nloop invariant (i < y) ==> (x >= (y - i + 12));\nloop invariant (i < y) ==> (x >= (y - i + 13));\nloop invariant (i < y) ==> (x >= (y - i + 14));\nloop invariant (i < y) ==> (x >= (y - i + 15));\nloop invariant (i < y) ==> (x >= (y - i + 16));\nloop invariant (i < y) ==> (x >= (y - i + 17));\nloop invariant (i < y) ==> (x >= (y - i + 18));\nloop invariant (i < y) ==> (x >= (y - i + 19));\nloop invariant (i < y) ==> (x >= (y - i + 20));\nloop invariant (i < y) ==> (x >= (y - i + 21));\nloop invariant (i < y) ==> (x >= (y - i + 22));\nloop invariant (i < y) ==> (x >= (y - i + 23));\nloop invariant (i < y) ==> (x >= (y - i + 24));\nloop invariant (i < y) ==> (x >= (y - i + 25));\nloop invariant (i < y) ==> (x >= (y - i + 26));\nloop invariant (i < y) ==> (x >= (y - i + 27));\nloop invariant (i < y) ==> (x >= (y - i + 28));\nloop invariant (i < y) ==> (x >= (y - i + 29));\nloop invariant (i < y) ==> (x >= (y - i + 30));\nloop invariant (i < y) ==> (x >= (y - i + 31));\nloop invariant (i < y) ==> (x >= (y - i + 32));\nloop invariant (i < y) ==> (x >= (y - i + 33));\nloop invariant (i < y) ==> (x >= (y - i + 34));\nloop invariant (i < y) ==> (x >= (y - i + 35));\nloop invariant (i < y) ==> (x >= (y - i + 36));\nloop invariant (i < y) ==> (x >= (y - i + 37));\nloop invariant (i < y) ==> (x >= (y - i + 38));\nloop invariant (i < y) ==> (x >= (y - i + 39));\nloop invariant (i < y) ==> (x >= (y - i + 40));\nloop invariant (i < y) ==> (x >= (y - i + 41));\nloop invariant (i < y) ==> (x >= (y - i + 42));\nloop invariant (i < y) ==> (x >= (y - i + 43));\nloop invariant (i < y) ==> (x >= (y - i + 44));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\n\nloop invariant i3: i <= y;\nloop invariant i4: (i < y) ==> (i < x);\nloop invariant i5: (i < y) ==> (i <= y);\nloop invariant i6: (i < y) ==> (x >= i);\nloop invariant i7: (i < y) ==> (x >= y);\nloop invariant i8: (i < y) ==> (x >= (y - 1));\nloop invariant i9: (i < y) ==> (x >= 0);\nloop invariant i10: (i < y) ==> (x >= (y - i));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= y is partially proven to be inductive.\nloop invariant i < y ==> (i < x) is partially proven to be inductive.\nloop invariant i < y ==> x >= y is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant i < y is preserved but not established.\nloop invariant (i < x) ==> (i < y) is partially proven to be inductive.\nloop invariant i == y || i == y - 1 is preserved but not established.\nloop invariant i == y - 1 || i == y is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 || i == y - 14 is partially proven to be inductive.\nloop invariant i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 || i == y - 14 || i == y - 15 is partially proven to be inductive.\nloop invariant i < y ==> (i < z1) is preserved but not established.\nloop invariant i < y ==> (i < z2) is preserved but not established.\nloop invariant i < y ==> (i < z3) is preserved but not established.\nloop invariant i < y ==> (i < y) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= y is partially proven to be inductive.\nloop invariant i <= x is partially proven to be inductive.\nloop invariant y <= i + 1 ==> i < x is partially proven to be inductive.\nloop invariant i + 1 < y ==> i < x is partially proven to be inductive.\nloop invariant i + 1 < y ==> i + 1 < x is partially proven to be inductive.\nloop invariant i + 1 < y ==> i < x + 1 is partially proven to be inductive.\nloop invariant x >= i is partially proven to be inductive.\nloop invariant y >= i is partially proven to be inductive.\nloop invariant i < y ==> x >= i is partially proven to be inductive.\nloop invariant z1 ==> (i < y) is partially proven to be inductive.\nloop invariant z2 ==> (i >= y) is preserved but not established.\nloop invariant z3 ==> (i < x) is partially proven to be inductive.\nloop invariant z3 ==> (i >= x) is partially proven to be inductive.\nloop invariant z3 ==> (i < y) is partially proven to be inductive.\nloop invariant z3 ==> (i >= y) is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i < x is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant i < y ==> i < x is partially proven to be inductive.\nloop invariant x >= (y + i) is partially proven to be inductive.\nloop invariant x >= (i + y) is partially proven to be inductive.\nloop invariant (i < y) ==> (i < x) is partially proven to be inductive.\nloop invariant 1 <= i <= y is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant (i < y) ==> (i <= y) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= i) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= y) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - 1)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 1)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 2)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 3)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 4)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 5)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 6)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 7)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 8)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 9)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 10)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 11)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 12)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 13)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 14)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 15)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 16)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 17)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 18)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 19)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 20)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 21)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 22)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 23)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 24)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 25)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 26)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 27)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 28)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 29)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 30)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 31)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 32)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 33)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 34)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 35)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 36)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 37)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 38)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 39)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 40)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 41)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 42)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 43)) is partially proven to be inductive.\nloop invariant (i < y) ==> (x >= (y - i + 44)) is partially proven to be inductive.\nAssertion i < x: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i < y ==> (i < x);\nloop invariant i3: i < y ==> x >= y;\nloop invariant i4: x >= y;\nloop invariant i5: i < y;\nloop invariant i6: (i < x) ==> (i < y);\nloop invariant i7: i == y || i == y - 1;\nloop invariant i8: i == y - 1 || i == y;\nloop invariant i9: i == y - 1 || i == y || i == y - 2;\nloop invariant i10: i == y - 1 || i == y || i == y - 2 || i == y - 3;\nloop invariant i11: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4;\nloop invariant i12: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5;\nloop invariant i13: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6;\nloop invariant i14: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7;\nloop invariant i15: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8;\nloop invariant i16: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9;\nloop invariant i17: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10;\nloop invariant i18: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11;\nloop invariant i19: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12;\nloop invariant i20: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13;\nloop invariant i21: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 || i == y - 14;\nloop invariant i22: i == y - 1 || i == y || i == y - 2 || i == y - 3 || i == y - 4 || i == y - 5 || i == y - 6 || i == y - 7 || i == y - 8 || i == y - 9 || i == y - 10 || i == y - 11 || i == y - 12 || i == y - 13 || i == y - 14 || i == y - 15;\nloop invariant i23: i < y ==> (i < z1);\nloop invariant i24: i < y ==> (i < z2);\nloop invariant i25: i < y ==> (i < z3);\nloop invariant i26: i < y ==> (i < y);\nloop invariant i27: i >= 0;\nloop invariant i28: i <= y;\nloop invariant i29: i <= x;\nloop invariant i30: y <= i + 1 ==> i < x;\nloop invariant i31: i + 1 < y ==> i < x;\nloop invariant i32: i + 1 < y ==> i + 1 < x;\nloop invariant i33: i + 1 < y ==> i < x + 1;\nloop invariant i34: x >= i;\nloop invariant i35: y >= i;\nloop invariant i36: i < y ==> x >= i;\nloop invariant i37: z1 ==> (i < y);\nloop invariant i38: z2 ==> (i >= y);\nloop invariant i39: z3 ==> (i < x);\nloop invariant i40: z3 ==> (i >= x);\nloop invariant i41: z3 ==> (i < y);\nloop invariant i42: z3 ==> (i >= y);\nloop invariant i43: 0 <= i;\nloop invariant i44: i < x;\nloop invariant i45: x >= 0;\nloop invariant i46: y >= 0;\nloop invariant i47: i < y ==> i < x;\nloop invariant i48: x >= (y + i);\nloop invariant i49: x >= (i + y);\nloop invariant i50: (i < y) ==> (i < x);\nloop invariant i51: 1 <= i <= y;\nloop invariant i52: i >= 1;\nloop invariant i53: (i < y) ==> (i <= y);\nloop invariant i54: (i < y) ==> (x >= i);\nloop invariant i55: (i < y) ==> (x >= y);\nloop invariant i56: (i < y) ==> (x >= (y - 1));\nloop invariant i57: (i < y) ==> (x >= 0);\nloop invariant i58: (i < y) ==> (x >= (y - i));\nloop invariant i59: (i < y) ==> (x >= (y - i + 1));\nloop invariant i60: (i < y) ==> (x >= (y - i + 2));\nloop invariant i61: (i < y) ==> (x >= (y - i + 3));\nloop invariant i62: (i < y) ==> (x >= (y - i + 4));\nloop invariant i63: (i < y) ==> (x >= (y - i + 5));\nloop invariant i64: (i < y) ==> (x >= (y - i + 6));\nloop invariant i65: (i < y) ==> (x >= (y - i + 7));\nloop invariant i66: (i < y) ==> (x >= (y - i + 8));\nloop invariant i67: (i < y) ==> (x >= (y - i + 9));\nloop invariant i68: (i < y) ==> (x >= (y - i + 10));\nloop invariant i69: (i < y) ==> (x >= (y - i + 11));\nloop invariant i70: (i < y) ==> (x >= (y - i + 12));\nloop invariant i71: (i < y) ==> (x >= (y - i + 13));\nloop invariant i72: (i < y) ==> (x >= (y - i + 14));\nloop invariant i73: (i < y) ==> (x >= (y - i + 15));\nloop invariant i74: (i < y) ==> (x >= (y - i + 16));\nloop invariant i75: (i < y) ==> (x >= (y - i + 17));\nloop invariant i76: (i < y) ==> (x >= (y - i + 18));\nloop invariant i77: (i < y) ==> (x >= (y - i + 19));\nloop invariant i78: (i < y) ==> (x >= (y - i + 20));\nloop invariant i79: (i < y) ==> (x >= (y - i + 21));\nloop invariant i80: (i < y) ==> (x >= (y - i + 22));\nloop invariant i81: (i < y) ==> (x >= (y - i + 23));\nloop invariant i82: (i < y) ==> (x >= (y - i + 24));\nloop invariant i83: (i < y) ==> (x >= (y - i + 25));\nloop invariant i84: (i < y) ==> (x >= (y - i + 26));\nloop invariant i85: (i < y) ==> (x >= (y - i + 27));\nloop invariant i86: (i < y) ==> (x >= (y - i + 28));\nloop invariant i87: (i < y) ==> (x >= (y - i + 29));\nloop invariant i88: (i < y) ==> (x >= (y - i + 30));\nloop invariant i89: (i < y) ==> (x >= (y - i + 31));\nloop invariant i90: (i < y) ==> (x >= (y - i + 32));\nloop invariant i91: (i < y) ==> (x >= (y - i + 33));\nloop invariant i92: (i < y) ==> (x >= (y - i + 34));\nloop invariant i93: (i < y) ==> (x >= (y - i + 35));\nloop invariant i94: (i < y) ==> (x >= (y - i + 36));\nloop invariant i95: (i < y) ==> (x >= (y - i + 37));\nloop invariant i96: (i < y) ==> (x >= (y - i + 38));\nloop invariant i97: (i < y) ==> (x >= (y - i + 39));\nloop invariant i98: (i < y) ==> (x >= (y - i + 40));\nloop invariant i99: (i < y) ==> (x >= (y - i + 41));\nloop invariant i100: (i < y) ==> (x >= (y - i + 42));\nloop invariant i101: (i < y) ==> (x >= (y - i + 43));\nloop invariant i102: (i < y) ==> (x >= (y - i + 44));\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i < y ==> (i < x);\nloop invariant i3: i < y ==> x >= y;\nloop invariant i4: x >= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: i < y ==> (i < y);\nloop invariant i27: i >= 0;\nloop invariant i28: i <= y;\nloop invariant i29: i <= x;\n\nloop invariant i31: i + 1 < y ==> i < x;\nloop invariant i32: i + 1 < y ==> i + 1 < x;\nloop invariant i33: i + 1 < y ==> i < x + 1;\nloop invariant i34: x >= i;\nloop invariant i35: y >= i;\nloop invariant i36: i < y ==> x >= i;\n\n\n\n\n\n\nloop invariant i43: 0 <= i;\n\nloop invariant i45: x >= 0;\nloop invariant i46: y >= 0;\nloop invariant i47: i < y ==> i < x;\n\n\nloop invariant i50: (i < y) ==> (i < x);\n\n\nloop invariant i53: (i < y) ==> (i <= y);\nloop invariant i54: (i < y) ==> (x >= i);\nloop invariant i55: (i < y) ==> (x >= y);\nloop invariant i56: (i < y) ==> (x >= (y - 1));\nloop invariant i57: (i < y) ==> (x >= 0);\nloop invariant i58: (i < y) ==> (x >= (y - i));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c"
        ],
        "skipped": [],
        "total": 68,
        "success_count": 57,
        "failure_count": 11,
        "success_rate": 0.8382352941176471
    }
}