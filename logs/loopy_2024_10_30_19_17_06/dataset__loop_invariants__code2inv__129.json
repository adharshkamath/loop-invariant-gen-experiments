{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/129.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 < x;\nloop invariant x < y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant 1 < y;\nloop invariant 1 <= x;\nloop invariant x + x >= x;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x < y;\nloop invariant y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant x * 2^y >= x;\nloop invariant x * 2^y >= y;\nloop invariant x * 2^y >= 1;\nloop invariant x * 2^y >= 0;\nloop invariant x * 2^y >= -1;\nloop invariant x * 2^y >= -y;\nloop invariant x * 2^y >= -y - 1;\nloop invariant x * 2^y >= -y - 2;\nloop invariant x * 2^y >= -y - 3;\nloop invariant x * 2^y >= -y - 4;\nloop invariant x * 2^y >= -y - 5;\nloop invariant x * 2^y >= -y - 6;\nloop invariant x * 2^y >= -y - 7;\nloop invariant x * 2^y >= -y - 8;\nloop invariant x * 2^y >= -y - 9;\nloop invariant x * 2^y >= -y - 10;\nloop invariant x * 2^y >= -y - 11;\nloop invariant x * 2^y >= -y - 12;\nloop invariant x * 2^y >= -y - 13;\nloop invariant x * 2^y >= -y - 14;\nloop invariant x * 2^y >= -y - 15;\nloop invariant x * 2^y >= -y - 16;\nloop invariant x * 2^y >= -y - 17;\nloop invariant x * 2^y >= -y - 18;\nloop invariant x * 2^y >= -y - 19;\nloop invariant x * 2^y >= -y - 20;\nloop invariant x * 2^y >= -y - 21;\nloop invariant x * 2^y >= -y - 22;\nloop invariant x * 2^y >= -y - 23;\nloop invariant x * 2^y >= -y - 24;\nloop invariant x * 2^y >= -y - 25;\nloop invariant x * 2^y >= -y - 26;\nloop invariant x * 2^y >= -y - 27;\nloop invariant x * 2^y >= -y - 28;\nloop invariant x * 2^y >= -y - 29;\nloop invariant x * 2^y >= -y - 30;\nloop invariant x * 2^y >= -y - 31;\nloop invariant x * 2^y >= -y - 32;\nloop invariant x * 2^y >= -y - 33;\nloop invariant x * 2^y >= -y - 34;\nloop invariant x * 2^y >= -y - 35;\nloop invariant x * 2^y >= -y - 36;\nloop invariant x * 2^y >= -y - 37;\nloop invariant x * 2^y >= -y - 38;\nloop invariant x * 2^y >= -y - 39;\nloop invariant x * 2^y >= -y - 40;\nloop invariant x * 2^y >= -y - 41;\nloop invariant x * 2^y >= -y - 42;\nloop invariant x * 2^y >= -y - 43;\nloop invariant x * 2^y >= -y - 44;\nloop invariant x * 2^y >= -y - 45;\nloop invariant x * 2^y >= -y - 46;\nloop invariant x * 2^y >= -y - 47;\nloop invariant x * 2^y >= -y - 48;\nloop invariant x * 2^y >= -y - 49;\nloop invariant x * 2^y >= -y - 50;\nloop invariant x * 2^y >= -y - 51;\nloop invariant x * 2^y >= -y - 52;\nloop invariant x * 2^y >= -y - 53;\nloop invariant x * 2^y >= -y - 54;\nloop invariant x * 2^y >= -y - 55;\nloop invariant x * 2^y >= -y - 56;\nloop invariant x * 2^y >= -y - 57;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant x >= 0;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant 0 <= y;\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant (x >= y) ==> (x >= 1);\nloop invariant (x < y) ==> (x >= 1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % y == 0;\n*/\n```",
            "```\n/*@\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < y;\nloop invariant x <= 2^(y - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= y;\nloop invariant x == y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 < x;\nloop invariant x < y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant 1 < y;\nloop invariant 1 <= x;\nloop invariant x + x >= x;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\nloop invariant x + x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 < x;\n\nloop invariant i3: x >= 1;\n\n\nloop invariant i6: 1 <= x;\nloop invariant i7: x + x >= x;\nloop invariant i8: x + x >= 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x < y;\nloop invariant y >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 64,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant x * 2^y >= x;\nloop invariant x * 2^y >= y;\nloop invariant x * 2^y >= 1;\nloop invariant x * 2^y >= 0;\nloop invariant x * 2^y >= -1;\nloop invariant x * 2^y >= -y;\nloop invariant x * 2^y >= -y - 1;\nloop invariant x * 2^y >= -y - 2;\nloop invariant x * 2^y >= -y - 3;\nloop invariant x * 2^y >= -y - 4;\nloop invariant x * 2^y >= -y - 5;\nloop invariant x * 2^y >= -y - 6;\nloop invariant x * 2^y >= -y - 7;\nloop invariant x * 2^y >= -y - 8;\nloop invariant x * 2^y >= -y - 9;\nloop invariant x * 2^y >= -y - 10;\nloop invariant x * 2^y >= -y - 11;\nloop invariant x * 2^y >= -y - 12;\nloop invariant x * 2^y >= -y - 13;\nloop invariant x * 2^y >= -y - 14;\nloop invariant x * 2^y >= -y - 15;\nloop invariant x * 2^y >= -y - 16;\nloop invariant x * 2^y >= -y - 17;\nloop invariant x * 2^y >= -y - 18;\nloop invariant x * 2^y >= -y - 19;\nloop invariant x * 2^y >= -y - 20;\nloop invariant x * 2^y >= -y - 21;\nloop invariant x * 2^y >= -y - 22;\nloop invariant x * 2^y >= -y - 23;\nloop invariant x * 2^y >= -y - 24;\nloop invariant x * 2^y >= -y - 25;\nloop invariant x * 2^y >= -y - 26;\nloop invariant x * 2^y >= -y - 27;\nloop invariant x * 2^y >= -y - 28;\nloop invariant x * 2^y >= -y - 29;\nloop invariant x * 2^y >= -y - 30;\nloop invariant x * 2^y >= -y - 31;\nloop invariant x * 2^y >= -y - 32;\nloop invariant x * 2^y >= -y - 33;\nloop invariant x * 2^y >= -y - 34;\nloop invariant x * 2^y >= -y - 35;\nloop invariant x * 2^y >= -y - 36;\nloop invariant x * 2^y >= -y - 37;\nloop invariant x * 2^y >= -y - 38;\nloop invariant x * 2^y >= -y - 39;\nloop invariant x * 2^y >= -y - 40;\nloop invariant x * 2^y >= -y - 41;\nloop invariant x * 2^y >= -y - 42;\nloop invariant x * 2^y >= -y - 43;\nloop invariant x * 2^y >= -y - 44;\nloop invariant x * 2^y >= -y - 45;\nloop invariant x * 2^y >= -y - 46;\nloop invariant x * 2^y >= -y - 47;\nloop invariant x * 2^y >= -y - 48;\nloop invariant x * 2^y >= -y - 49;\nloop invariant x * 2^y >= -y - 50;\nloop invariant x * 2^y >= -y - 51;\nloop invariant x * 2^y >= -y - 52;\nloop invariant x * 2^y >= -y - 53;\nloop invariant x * 2^y >= -y - 54;\nloop invariant x * 2^y >= -y - 55;\nloop invariant x * 2^y >= -y - 56;\nloop invariant x * 2^y >= -y - 57;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant x >= 0;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= 100000;\nloop invariant y >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n\n\nloop invariant i5: x >= 1;\nloop invariant i6: x >= 0;\n\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant 0 <= y;\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: x >= 1;\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x >= 1;\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x >= 1;\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant (x >= y) ==> (x >= 1);\nloop invariant (x < y) ==> (x >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: (x >= y) ==> (x >= 1);\nloop invariant i3: (x < y) ==> (x >= 1);\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\nloop invariant x >= 1;\nloop invariant x >= 2 * y;\nloop invariant x >= 1;\nloop invariant y = 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x >= 1;\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < y;\nloop invariant x <= 2^(y - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= y;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 107: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 < x;\nloop invariant i2: x < y;\nloop invariant i3: x >= 1;\nloop invariant i4: y >= 1;\nloop invariant i5: 1 < y;\nloop invariant i6: 1 <= x;\nloop invariant i7: x + x >= x;\nloop invariant i8: x + x >= 1;\nloop invariant i9: 0 <= x <= 2;\nloop invariant i10: 0 <= x <= y;\nloop invariant i11: x * 2^y >= x;\nloop invariant i12: x * 2^y >= y;\nloop invariant i13: x * 2^y >= 1;\nloop invariant i14: x * 2^y >= 0;\nloop invariant i15: x * 2^y >= -1;\nloop invariant i16: x * 2^y >= -y;\nloop invariant i17: x * 2^y >= -y - 1;\nloop invariant i18: x * 2^y >= -y - 2;\nloop invariant i19: x * 2^y >= -y - 3;\nloop invariant i20: x * 2^y >= -y - 4;\nloop invariant i21: x * 2^y >= -y - 5;\nloop invariant i22: x * 2^y >= -y - 6;\nloop invariant i23: x * 2^y >= -y - 7;\nloop invariant i24: x * 2^y >= -y - 8;\nloop invariant i25: x * 2^y >= -y - 9;\nloop invariant i26: x * 2^y >= -y - 10;\nloop invariant i27: x * 2^y >= -y - 11;\nloop invariant i28: x * 2^y >= -y - 12;\nloop invariant i29: x * 2^y >= -y - 13;\nloop invariant i30: x * 2^y >= -y - 14;\nloop invariant i31: x * 2^y >= -y - 15;\nloop invariant i32: x * 2^y >= -y - 16;\nloop invariant i33: x * 2^y >= -y - 17;\nloop invariant i34: x * 2^y >= -y - 18;\nloop invariant i35: x * 2^y >= -y - 19;\nloop invariant i36: x * 2^y >= -y - 20;\nloop invariant i37: x * 2^y >= -y - 21;\nloop invariant i38: x * 2^y >= -y - 22;\nloop invariant i39: x * 2^y >= -y - 23;\nloop invariant i40: x * 2^y >= -y - 24;\nloop invariant i41: x * 2^y >= -y - 25;\nloop invariant i42: x * 2^y >= -y - 26;\nloop invariant i43: x * 2^y >= -y - 27;\nloop invariant i44: x * 2^y >= -y - 28;\nloop invariant i45: x * 2^y >= -y - 29;\nloop invariant i46: x * 2^y >= -y - 30;\nloop invariant i47: x * 2^y >= -y - 31;\nloop invariant i48: x * 2^y >= -y - 32;\nloop invariant i49: x * 2^y >= -y - 33;\nloop invariant i50: x * 2^y >= -y - 34;\nloop invariant i51: x * 2^y >= -y - 35;\nloop invariant i52: x * 2^y >= -y - 36;\nloop invariant i53: x * 2^y >= -y - 37;\nloop invariant i54: x * 2^y >= -y - 38;\nloop invariant i55: x * 2^y >= -y - 39;\nloop invariant i56: x * 2^y >= -y - 40;\nloop invariant i57: x * 2^y >= -y - 41;\nloop invariant i58: x * 2^y >= -y - 42;\nloop invariant i59: x * 2^y >= -y - 43;\nloop invariant i60: x * 2^y >= -y - 44;\nloop invariant i61: x * 2^y >= -y - 45;\nloop invariant i62: x * 2^y >= -y - 46;\nloop invariant i63: x * 2^y >= -y - 47;\nloop invariant i64: x * 2^y >= -y - 48;\nloop invariant i65: x * 2^y >= -y - 49;\nloop invariant i66: x * 2^y >= -y - 50;\nloop invariant i67: x * 2^y >= -y - 51;\nloop invariant i68: x * 2^y >= -y - 52;\nloop invariant i69: x * 2^y >= -y - 53;\nloop invariant i70: x * 2^y >= -y - 54;\nloop invariant i71: x * 2^y >= -y - 55;\nloop invariant i72: x * 2^y >= -y - 56;\nloop invariant i73: x * 2^y >= -y - 57;\nloop invariant i74: 0 <= x;\nloop invariant i75: x <= y;\nloop invariant i76: x >= 0;\nloop invariant i77: y <= 100000;\nloop invariant i78: x <= 100000;\nloop invariant i79: y >= 0;\nloop invariant i80: x >= y;\nloop invariant i81: 0 <= y;\nloop invariant i82: y >= x;\nloop invariant i83: x >= 2 * y;\nloop invariant i84: 0 <= y <= 100000;\nloop invariant i85: x >= (1 + (y - 1) * y / 2);\nloop invariant i86: 1 <= x <= y;\nloop invariant i87: (x >= y) ==> (x >= 1);\nloop invariant i88: (x < y) ==> (x >= 1);\nloop invariant i89: x % y == 0;\nloop invariant i90: y = 0;\nloop invariant i91: x <= 2^(y - 1);\nloop invariant i92: x == y;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 73,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 < x;\n\nloop invariant i3: x >= 1;\n\n\nloop invariant i6: 1 <= x;\nloop invariant i7: x + x >= x;\nloop invariant i8: x + x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i74: 0 <= x;\n\nloop invariant i76: x >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i87: (x >= y) ==> (x >= 1);\nloop invariant i88: (x < y) ==> (x >= 1);\n\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c"
        ],
        "skipped": [],
        "total": 6,
        "success_count": 3,
        "failure_count": 3,
        "success_rate": 0.5
    }
}