{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x == 1 && y == 0 && x >= y && 0 <= y <= 1000 && x >= y;\nloop invariant x == x + y && y == y + 1 && x >= y && 0 <= y <= 1000 && x >= y;\nloop invariant x == x + y && y == 1000 && x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> (y < 1000 && unknown_int()) ==> y < 1000;\nloop invariant y < 1000 ==> unknown_int() ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= (y * (y + 1) / 2);\nloop invariant x <= 1000000;\nloop invariant y <= 1000;\nloop invariant x <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 >= 0;\nloop invariant y + 1 <= 1000;\nloop invariant x + y >= 0;\nloop invariant x + y <= 1000000;\nloop invariant x + y >= (y * (y + 1) / 2);\nloop invariant x + y <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 == y + 1;\nloop invariant x + y == x + y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= (y * (y + 1) / 2);\nloop invariant y >= 0 ==> x <= 1000000;\nloop invariant y >= 0 ==> y <= 1000;\nloop invariant y >= 0 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant y >= 0 ==> y + 1 >= 0;\nloop invariant y >= 0 ==> y + 1 <= 1000;\nloop invariant y >= 0 ==> x + y >= 0;\nloop invariant y >= 0 ==> x + y <= 1000000;\nloop invariant y >= 0 ==> x + y >= (y * (y + 1) / 2);\nloop invariant y >= 0 ==> x + y <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 >= 0 ==> x >= y;\nloop invariant y + 1 >= 0 ==> x >= 0;\nloop invariant y + 1 >= 0 ==> x >= (y * (y + 1) / 2);\nloop invariant y + 1 >= 0 ==> x <= 1000000;\nloop invariant y + 1 >= 0 ==> y <= 1000;\nloop invariant y + 1 >= 0 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 >= 0 ==> y + 1 >= 0;\nloop invariant y + 1 >= 0 ==> y + 1 <= 1000;\nloop invariant y + 1 >= 0 ==> x + y >= 0;\nloop invariant y + 1 >= 0 ==> x + y <= 1000000;\nloop invariant y + 1 >= 0 ==> x + y >= (y * (y + 1) / 2);\nloop invariant y + 1 >= 0 ==> x + y <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 <= 1000 ==> x >= y;\nloop invariant y + 1 <= 1000 ==> x >= 0;\nloop invariant y + 1 <= 1000 ==> x >= (y * (y + 1) / 2);\nloop invariant y + 1 <= 1000 ==> x <= 1000000;\nloop invariant y + 1 <= 1000 ==> y <= 1000;\nloop invariant y + 1 <= 1000 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 <= 1000 ==> y + 1 >= 0;\nloop invariant y + 1 <= 1000 ==> y + 1 <= 1000;\nloop invariant y + 1 <= 1000 ==> x + y >= 0;\nloop invariant y + 1 <= 1000 ==> x + y <= 1000000;\nloop invariant y + 1 <= 1000 ==> x + y >= (y * (y + 1) / 2);\nloop invariant y + 1 <= 1000 ==> x + y <= (1000 * (1000 + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= 1;\nloop invariant x >= y;\nloop invariant unknown_int() ==> true;\nloop invariant !unknown_int() ==> y >= 1000;\nloop invariant unknown_int() ==> x >= (y * y + y) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y < 1000 ==> unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 1000;\nloop invariant x + y >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> !(y < 1000 && unknown_int());\nloop invariant x >= (1 + (y - 1) * y / 2) ==> !(y < 1000 && unknown_int());\nloop invariant x >= (1 + (y - 1) * y / 2) ==> !(y < 1000 && unknown_int());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant unknown_int() ==> y < 1000;\nloop invariant unknown_int() ==> x >= (1 + (y - 1) * y / 2);\nloop invariant !unknown_int() ==> y >= 1000;\nloop invariant !unknown_int() ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant y < 1000 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2;\nloop invariant y < 1000 ==> x >= y + (y * (y - 1)) / 2;\nloop invariant y < 1000 ==> x >= y + (y * (y - 1)) / 2;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant unknown_int() == 1 ==> y < 1000;\nloop invariant unknown_int() == 0 ==> y >= 1000;\nloop invariant unknown_int() == 1 ==> x >= y;\nloop invariant unknown_int() == 0 ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> unknown_int() == 1;\nloop invariant unknown_int() == 0 ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant unknown_int() ==> y < 1000;\nloop invariant !unknown_int() ==> y >= 1000;\nloop invariant x >= y;\nloop invariant !unknown_int() ==> x >= 1000;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> 0 <= x <= 1000;\nloop invariant unknown_int() ==> 0 <= y <= 1000;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x == 1 && y == 0 && x >= y && 0 <= y <= 1000 && x >= y;\nloop invariant x == x + y && y == y + 1 && x >= y && 0 <= y <= 1000 && x >= y;\nloop invariant x == x + y && y == 1000 && x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> (y < 1000 && unknown_int()) ==> y < 1000;\nloop invariant y < 1000 ==> unknown_int() ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\nloop invariant y < 1000 ==> true ==> y < 1000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= (y * (y + 1) / 2);\nloop invariant x <= 1000000;\nloop invariant y <= 1000;\nloop invariant x <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 >= 0;\nloop invariant y + 1 <= 1000;\nloop invariant x + y >= 0;\nloop invariant x + y <= 1000000;\nloop invariant x + y >= (y * (y + 1) / 2);\nloop invariant x + y <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 == y + 1;\nloop invariant x + y == x + y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= (y * (y + 1) / 2);\nloop invariant y >= 0 ==> x <= 1000000;\nloop invariant y >= 0 ==> y <= 1000;\nloop invariant y >= 0 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant y >= 0 ==> y + 1 >= 0;\nloop invariant y >= 0 ==> y + 1 <= 1000;\nloop invariant y >= 0 ==> x + y >= 0;\nloop invariant y >= 0 ==> x + y <= 1000000;\nloop invariant y >= 0 ==> x + y >= (y * (y + 1) / 2);\nloop invariant y >= 0 ==> x + y <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 >= 0 ==> x >= y;\nloop invariant y + 1 >= 0 ==> x >= 0;\nloop invariant y + 1 >= 0 ==> x >= (y * (y + 1) / 2);\nloop invariant y + 1 >= 0 ==> x <= 1000000;\nloop invariant y + 1 >= 0 ==> y <= 1000;\nloop invariant y + 1 >= 0 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 >= 0 ==> y + 1 >= 0;\nloop invariant y + 1 >= 0 ==> y + 1 <= 1000;\nloop invariant y + 1 >= 0 ==> x + y >= 0;\nloop invariant y + 1 >= 0 ==> x + y <= 1000000;\nloop invariant y + 1 >= 0 ==> x + y >= (y * (y + 1) / 2);\nloop invariant y + 1 >= 0 ==> x + y <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 <= 1000 ==> x >= y;\nloop invariant y + 1 <= 1000 ==> x >= 0;\nloop invariant y + 1 <= 1000 ==> x >= (y * (y + 1) / 2);\nloop invariant y + 1 <= 1000 ==> x <= 1000000;\nloop invariant y + 1 <= 1000 ==> y <= 1000;\nloop invariant y + 1 <= 1000 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant y + 1 <= 1000 ==> y + 1 >= 0;\nloop invariant y + 1 <= 1000 ==> y + 1 <= 1000;\nloop invariant y + 1 <= 1000 ==> x + y >= 0;\nloop invariant y + 1 <= 1000 ==> x + y <= 1000000;\nloop invariant y + 1 <= 1000 ==> x + y >= (y * (y + 1) / 2);\nloop invariant y + 1 <= 1000 ==> x + y <= (1000 * (1000 + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\nloop invariant i7: y <= 1000;\n\nloop invariant i9: y + 1 >= 0;\n\nloop invariant i11: x + y >= 0;\n\nloop invariant i13: x + y >= (y * (y + 1) / 2);\n\nloop invariant i15: y + 1 == y + 1;\nloop invariant i16: x + y == x + y;\n\nloop invariant i18: y >= 0 ==> x >= 0;\n\n\nloop invariant i21: y >= 0 ==> y <= 1000;\n\nloop invariant i23: y >= 0 ==> y + 1 >= 0;\n\nloop invariant i25: y >= 0 ==> x + y >= 0;\n\nloop invariant i27: y >= 0 ==> x + y >= (y * (y + 1) / 2);\n\n\nloop invariant i30: y + 1 >= 0 ==> x >= 0;\n\n\nloop invariant i33: y + 1 >= 0 ==> y <= 1000;\n\nloop invariant i35: y + 1 >= 0 ==> y + 1 >= 0;\n\nloop invariant i37: y + 1 >= 0 ==> x + y >= 0;\n\nloop invariant i39: y + 1 >= 0 ==> x + y >= (y * (y + 1) / 2);\n\n\nloop invariant i42: y + 1 <= 1000 ==> x >= 0;\n\n\nloop invariant i45: y + 1 <= 1000 ==> y <= 1000;\n\nloop invariant i47: y + 1 <= 1000 ==> y + 1 >= 0;\nloop invariant i48: y + 1 <= 1000 ==> y + 1 <= 1000;\nloop invariant i49: y + 1 <= 1000 ==> x + y >= 0;\n\nloop invariant i51: y + 1 <= 1000 ==> x + y >= (y * (y + 1) / 2);\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= 1;\nloop invariant x >= y;\nloop invariant unknown_int() ==> true;\nloop invariant !unknown_int() ==> y >= 1000;\nloop invariant unknown_int() ==> x >= (y * y + y) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= 1;\nloop invariant i3: x >= y;\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y < 1000 ==> unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 1000;\nloop invariant x + y >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\n\nloop invariant i2: x + y >= (1 + (y - 1) * y / 2);\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> !(y < 1000 && unknown_int());\nloop invariant x >= (1 + (y - 1) * y / 2) ==> !(y < 1000 && unknown_int());\nloop invariant x >= (1 + (y - 1) * y / 2) ==> !(y < 1000 && unknown_int());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= 0;\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y < 1000) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (x >= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant unknown_int() ==> y < 1000;\nloop invariant unknown_int() ==> x >= (1 + (y - 1) * y / 2);\nloop invariant !unknown_int() ==> y >= 1000;\nloop invariant !unknown_int() ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant y < 1000 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2;\nloop invariant y < 1000 ==> x >= y + (y * (y - 1)) / 2;\nloop invariant y < 1000 ==> x >= y + (y * (y - 1)) / 2;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant x >= y + (y * (y - 1)) / 2 ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\n\n\n\nloop invariant i5: x >= y + (y * (y - 1)) / 2 ==> x >= y;\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant unknown_int() == 1 ==> y < 1000;\nloop invariant unknown_int() == 0 ==> y >= 1000;\nloop invariant unknown_int() == 1 ==> x >= y;\nloop invariant unknown_int() == 0 ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\n\n\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= y;\nloop invariant i3: x >= (1 + (y - 1) * y / 2);\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 1;\nloop invariant i6: x >= 1 + (y - 1) * y / 2;\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> unknown_int() == 1;\nloop invariant unknown_int() == 0 ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant unknown_int() ==> y < 1000;\nloop invariant !unknown_int() ==> y >= 1000;\nloop invariant x >= y;\nloop invariant !unknown_int() ==> x >= 1000;\nloop invariant unknown_int() ==> x >= 1;\nloop invariant unknown_int() ==> 0 <= x <= 1000;\nloop invariant unknown_int() ==> 0 <= y <= 1000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n\n\nloop invariant i5: x >= y;\n\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\nloop invariant i1: x == 1 && y == 0 && x >= y && 0 <= y <= 1000 && x >= y;\nloop invariant i2: x == x + y && y == y + 1 && x >= y && 0 <= y <= 1000 && x >= y;\nloop invariant i3: x == x + y && y == 1000 && x >= y;\nloop invariant i4: 0 <= y <= 1000;\nloop invariant i5: x >= (1 + (y - 1) * y / 2) ==> (y < 1000 && unknown_int()) ==> y < 1000;\nloop invariant i6: y < 1000 ==> unknown_int() ==> true ==> y < 1000;\nloop invariant i7: y < 1000 ==> true ==> y < 1000;\nloop invariant i8: x >= y;\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 0;\nloop invariant i11: x >= (y * (y + 1) / 2);\nloop invariant i12: x <= 1000000;\nloop invariant i13: y <= 1000;\nloop invariant i14: x <= (1000 * (1000 + 1) / 2);\nloop invariant i15: y + 1 >= 0;\nloop invariant i16: y + 1 <= 1000;\nloop invariant i17: x + y >= 0;\nloop invariant i18: x + y <= 1000000;\nloop invariant i19: x + y >= (y * (y + 1) / 2);\nloop invariant i20: x + y <= (1000 * (1000 + 1) / 2);\nloop invariant i21: y + 1 == y + 1;\nloop invariant i22: x + y == x + y;\nloop invariant i23: y >= 0 ==> x >= y;\nloop invariant i24: y >= 0 ==> x >= 0;\nloop invariant i25: y >= 0 ==> x >= (y * (y + 1) / 2);\nloop invariant i26: y >= 0 ==> x <= 1000000;\nloop invariant i27: y >= 0 ==> y <= 1000;\nloop invariant i28: y >= 0 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant i29: y >= 0 ==> y + 1 >= 0;\nloop invariant i30: y >= 0 ==> y + 1 <= 1000;\nloop invariant i31: y >= 0 ==> x + y >= 0;\nloop invariant i32: y >= 0 ==> x + y <= 1000000;\nloop invariant i33: y >= 0 ==> x + y >= (y * (y + 1) / 2);\nloop invariant i34: y >= 0 ==> x + y <= (1000 * (1000 + 1) / 2);\nloop invariant i35: y + 1 >= 0 ==> x >= y;\nloop invariant i36: y + 1 >= 0 ==> x >= 0;\nloop invariant i37: y + 1 >= 0 ==> x >= (y * (y + 1) / 2);\nloop invariant i38: y + 1 >= 0 ==> x <= 1000000;\nloop invariant i39: y + 1 >= 0 ==> y <= 1000;\nloop invariant i40: y + 1 >= 0 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant i41: y + 1 >= 0 ==> y + 1 >= 0;\nloop invariant i42: y + 1 >= 0 ==> y + 1 <= 1000;\nloop invariant i43: y + 1 >= 0 ==> x + y >= 0;\nloop invariant i44: y + 1 >= 0 ==> x + y <= 1000000;\nloop invariant i45: y + 1 >= 0 ==> x + y >= (y * (y + 1) / 2);\nloop invariant i46: y + 1 >= 0 ==> x + y <= (1000 * (1000 + 1) / 2);\nloop invariant i47: y + 1 <= 1000 ==> x >= y;\nloop invariant i48: y + 1 <= 1000 ==> x >= 0;\nloop invariant i49: y + 1 <= 1000 ==> x >= (y * (y + 1) / 2);\nloop invariant i50: y + 1 <= 1000 ==> x <= 1000000;\nloop invariant i51: y + 1 <= 1000 ==> y <= 1000;\nloop invariant i52: y + 1 <= 1000 ==> x <= (1000 * (1000 + 1) / 2);\nloop invariant i53: y + 1 <= 1000 ==> y + 1 >= 0;\nloop invariant i54: y + 1 <= 1000 ==> y + 1 <= 1000;\nloop invariant i55: y + 1 <= 1000 ==> x + y >= 0;\nloop invariant i56: y + 1 <= 1000 ==> x + y <= 1000000;\nloop invariant i57: y + 1 <= 1000 ==> x + y >= (y * (y + 1) / 2);\nloop invariant i58: y + 1 <= 1000 ==> x + y <= (1000 * (1000 + 1) / 2);\nloop invariant i59: x >= 1;\nloop invariant i60: unknown_int() ==> true;\nloop invariant i61: !unknown_int() ==> y >= 1000;\nloop invariant i62: unknown_int() ==> x >= (y * y + y) / 2;\nloop invariant i63: x >= (1 + (y - 1) * y / 2);\nloop invariant i64: y < 1000 ==> unknown_int();\nloop invariant i65: 1 <= y <= 1000;\nloop invariant i66: x + y >= (1 + (y - 1) * y / 2);\nloop invariant i67: x >= (1 + (y - 1) * y / 2) ==> !(y < 1000 && unknown_int());\nloop invariant i68: (y >= 0) ==> (x >= y);\nloop invariant i69: (y < 1000) ==> (x >= y);\nloop invariant i70: unknown_int() ==> y < 1000;\nloop invariant i71: unknown_int() ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i72: !unknown_int() ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i73: y < 1000 ==> x >= y;\nloop invariant i74: x >= y + (y * (y - 1)) / 2;\nloop invariant i75: y < 1000 ==> x >= y + (y * (y - 1)) / 2;\nloop invariant i76: x >= y + (y * (y - 1)) / 2 ==> x >= y;\nloop invariant i77: unknown_int() == 1 ==> y < 1000;\nloop invariant i78: unknown_int() == 0 ==> y >= 1000;\nloop invariant i79: unknown_int() == 1 ==> x >= y;\nloop invariant i80: unknown_int() == 0 ==> x >= y;\nloop invariant i81: x >= 1 + (y - 1) * y / 2;\nloop invariant i82: x >= (1 + (y - 1) * y / 2) ==> unknown_int() == 1;\nloop invariant i83: !unknown_int() ==> x >= 1000;\nloop invariant i84: unknown_int() ==> x >= 1;\nloop invariant i85: unknown_int() ==> 0 <= x <= 1000;\nloop invariant i86: unknown_int() ==> 0 <= y <= 1000;\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 41,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    /*@\n\n\n\nloop invariant i4: 0 <= y <= 1000;\n\n\n\nloop invariant i8: x >= y;\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 0;\n\n\nloop invariant i13: y <= 1000;\n\nloop invariant i15: y + 1 >= 0;\n\nloop invariant i17: x + y >= 0;\n\nloop invariant i19: x + y >= (y * (y + 1) / 2);\n\nloop invariant i21: y + 1 == y + 1;\nloop invariant i22: x + y == x + y;\nloop invariant i23: y >= 0 ==> x >= y;\nloop invariant i24: y >= 0 ==> x >= 0;\n\n\nloop invariant i27: y >= 0 ==> y <= 1000;\n\nloop invariant i29: y >= 0 ==> y + 1 >= 0;\n\nloop invariant i31: y >= 0 ==> x + y >= 0;\n\nloop invariant i33: y >= 0 ==> x + y >= (y * (y + 1) / 2);\n\nloop invariant i35: y + 1 >= 0 ==> x >= y;\nloop invariant i36: y + 1 >= 0 ==> x >= 0;\n\n\nloop invariant i39: y + 1 >= 0 ==> y <= 1000;\n\nloop invariant i41: y + 1 >= 0 ==> y + 1 >= 0;\n\nloop invariant i43: y + 1 >= 0 ==> x + y >= 0;\n\nloop invariant i45: y + 1 >= 0 ==> x + y >= (y * (y + 1) / 2);\n\nloop invariant i47: y + 1 <= 1000 ==> x >= y;\nloop invariant i48: y + 1 <= 1000 ==> x >= 0;\n\n\nloop invariant i51: y + 1 <= 1000 ==> y <= 1000;\n\nloop invariant i53: y + 1 <= 1000 ==> y + 1 >= 0;\nloop invariant i54: y + 1 <= 1000 ==> y + 1 <= 1000;\nloop invariant i55: y + 1 <= 1000 ==> x + y >= 0;\n\nloop invariant i57: y + 1 <= 1000 ==> x + y >= (y * (y + 1) / 2);\n\nloop invariant i59: x >= 1;\n\n\n\nloop invariant i63: x >= (1 + (y - 1) * y / 2);\n\n\nloop invariant i66: x + y >= (1 + (y - 1) * y / 2);\n\nloop invariant i68: (y >= 0) ==> (x >= y);\nloop invariant i69: (y < 1000) ==> (x >= y);\n\n\n\nloop invariant i73: y < 1000 ==> x >= y;\n\n\nloop invariant i76: x >= y + (y * (y - 1)) / 2 ==> x >= y;\n\n\n\n\nloop invariant i81: x >= 1 + (y - 1) * y / 2;\n\n\n\n\n\n*/\nwhile (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 105,
        "success_count": 91,
        "failure_count": 14,
        "success_rate": 0.8666666666666667
    }
}