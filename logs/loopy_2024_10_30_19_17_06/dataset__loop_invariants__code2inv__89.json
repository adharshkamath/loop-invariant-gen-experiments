{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/89.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= y;\nloop invariant x = y ==> lock = 1;\nloop invariant x != y ==> lock = 0;\nloop invariant x != y ==> y = x + 1;\nloop invariant x != y ==> y != x;\nloop invariant x != y ==> lock != 1;\nloop invariant x != y ==> lock != 0;\nloop invariant x != y ==> x < y;\nloop invariant x != y ==> x != y + 1;\nloop invariant x != y ==> y != x - 1;\nloop invariant x != y ==> x > y;\nloop invariant x != y ==> y < x;\nloop invariant x != y ==> y > x;\nloop invariant x != y ==> y == x - 1;\nloop invariant x != y ==> y == x + 1;\nloop invariant x != y ==> y == x;\nloop invariant x != y ==> y != x;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> x == y;\nloop invariant x <= y;\nloop invariant y < unknown();\nloop invariant lock == 0 ==> x == y;\nloop invariant x <= y;\nloop invariant y < unknown();\nloop invariant lock == 1 ==> x == y;\nloop invariant x <= y;\nloop invariant y < unknown();\n*/\n```",
            "```\n/*@\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant x == y ==> lock == 1;\nloop invariant x == y ==> x == y;\nloop invariant x == y ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y <= 100000;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant y == 100000 ==> x == 100000;\nloop invariant x == 100000 ==> y == 100000;\nloop invariant x == 100000 ==> lock == 1;\nloop invariant y == 100000 ==> lock == 0;\nloop invariant x == 1 ==> y == 1;\nloop invariant x == 1 ==> lock == 1;\nloop invariant y == 1 ==> lock == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lock <= 1;\nloop invariant lock == 1 || lock == 0;\nloop invariant y - x >= 0;\nloop invariant x == y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant lock == 1 ==> lock == 0 ==> x == y;\nloop invariant lock == 1 ==> lock == 0 ==> y == x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= v1 && x == y && lock == 1;\nloop invariant 0 <= x <= y <= v1 && x == y;\nloop invariant 0 <= y <= v1 && lock == 0;\nloop invariant lock == 1;\nloop invariant lock == 0;\nloop invariant 0 <= x <= y <= v1 && x == y && lock == 1;\nloop invariant lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= unknown();\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1 ==> (lock == 1);\nloop invariant x == y ==> (x >= y);\nloop invariant x == y ==> (lock == 1);\nloop invariant x == y ==> (y >= 1);\nloop invariant x == y ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1) ==> (y >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant lock ==> (x = y);\nloop invariant !(lock) ==> (x = y);\nloop invariant (x = y) ==> (x >= 0);\nloop invariant (x = y) ==> (y >= 0);\nloop invariant (x = y) ==> (x <= y);\nloop invariant (x = y) ==> (y <= 100000);\n*/\n```",
            "```\n/*@\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant y == x;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y;\nloop invariant lock == 1 ==> x == y ==> lock == 1;\nloop invariant lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\nloop invariant i2: lock == 1;\nloop invariant i3: x == y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x <= y;\nloop invariant x = y ==> lock = 1;\nloop invariant x != y ==> lock = 0;\nloop invariant x != y ==> y = x + 1;\nloop invariant x != y ==> y != x;\nloop invariant x != y ==> lock != 1;\nloop invariant x != y ==> lock != 0;\nloop invariant x != y ==> x < y;\nloop invariant x != y ==> x != y + 1;\nloop invariant x != y ==> y != x - 1;\nloop invariant x != y ==> x > y;\nloop invariant x != y ==> y < x;\nloop invariant x != y ==> y > x;\nloop invariant x != y ==> y == x - 1;\nloop invariant x != y ==> y == x + 1;\nloop invariant x != y ==> y == x;\nloop invariant x != y ==> y != x;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\nloop invariant x != y ==> x != y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: 0 <= lock <= 1;\n\n\nloop invariant i4: x <= y;\n\n\n\nloop invariant i8: x != y ==> y != x;\nloop invariant i9: x != y ==> lock != 1;\nloop invariant i10: x != y ==> lock != 0;\nloop invariant i11: x != y ==> x < y;\nloop invariant i12: x != y ==> x != y + 1;\nloop invariant i13: x != y ==> y != x - 1;\nloop invariant i14: x != y ==> x > y;\nloop invariant i15: x != y ==> y < x;\nloop invariant i16: x != y ==> y > x;\nloop invariant i17: x != y ==> y == x - 1;\nloop invariant i18: x != y ==> y == x + 1;\nloop invariant i19: x != y ==> y == x;\nloop invariant i20: x != y ==> x != y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> x == y;\nloop invariant x <= y;\nloop invariant y < unknown();\nloop invariant lock == 0 ==> x == y;\nloop invariant x <= y;\nloop invariant y < unknown();\nloop invariant lock == 1 ==> x == y;\nloop invariant x <= y;\nloop invariant y < unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: lock == 1 ==> x == y;\nloop invariant i2: x <= y;\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant x == y ==> lock == 1;\nloop invariant x == y ==> x == y;\nloop invariant x == y ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: lock == 1;\nloop invariant i2: x == y;\nloop invariant i3: x == y ==> lock == 1;\nloop invariant i4: x == y ==> x == y;\nloop invariant i5: x == y ==> lock == 1 ==> lock == 1;\nloop invariant i6: x == y ==> lock == 1 ==> x == y;\nloop invariant i7: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i8: x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i9: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i10: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i11: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant i12: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i13: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant i14: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i15: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i16: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i17: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i18: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i19: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i20: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i21: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i22: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i23: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i24: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i25: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i26: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i27: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i28: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i29: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y <= 100000;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant y == 100000 ==> x == 100000;\nloop invariant x == 100000 ==> y == 100000;\nloop invariant x == 100000 ==> lock == 1;\nloop invariant y == 100000 ==> lock == 0;\nloop invariant x == 1 ==> y == 1;\nloop invariant x == 1 ==> lock == 1;\nloop invariant y == 1 ==> lock == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\nloop invariant i3: lock == 1 ==> x == y;\nloop invariant i4: lock == 0 ==> x != y;\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\nloop invariant i3: x == y;\nloop invariant i4: lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= lock <= 1;\nloop invariant lock == 1 || lock == 0;\nloop invariant y - x >= 0;\nloop invariant x == y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: 1 <= lock <= 1;\nloop invariant i2: lock == 1 || lock == 0;\nloop invariant i3: y - x >= 0;\nloop invariant i4: x == y;\nloop invariant i5: lock == 1 ==> x == y;\nloop invariant i6: lock == 0 ==> x == y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant lock == 1 ==> lock == 0 ==> x == y;\nloop invariant lock == 1 ==> lock == 0 ==> y == x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\nloop invariant i2: x <= y;\nloop invariant i3: lock == 1 ==> lock == 0 ==> x == y;\nloop invariant i4: lock == 1 ==> lock == 0 ==> y == x + 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= v1 && x == y && lock == 1;\nloop invariant 0 <= x <= y <= v1 && x == y;\nloop invariant 0 <= y <= v1 && lock == 0;\nloop invariant lock == 1;\nloop invariant lock == 0;\nloop invariant 0 <= x <= y <= v1 && x == y && lock == 1;\nloop invariant lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y ==> lock == 1;\nloop invariant x < y ==> lock == 0;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\nloop invariant i3: x <= y;\nloop invariant i4: x == y ==> lock == 1;\nloop invariant i5: x != y ==> lock == 0;\nloop invariant i6: x >= y ==> lock == 1;\nloop invariant i7: x < y ==> lock == 0;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= unknown();\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1 ==> (lock == 1);\nloop invariant x == y ==> (x >= y);\nloop invariant x == y ==> (lock == 1);\nloop invariant x == y ==> (y >= 1);\nloop invariant x == y ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1) ==> (y >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\nloop invariant i2: lock == 1;\nloop invariant i3: x == y;\nloop invariant i4: lock == 1 ==> (lock == 1);\nloop invariant i5: x == y ==> (x >= y);\nloop invariant i6: x == y ==> (lock == 1);\n\n\nloop invariant i9: x == y ==> (y >= 1) ==> (x >= 1);\nloop invariant i10: x == y ==> (y >= 1) ==> (lock == 1);\nloop invariant i11: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i12: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i13: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1);\nloop invariant i14: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i15: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant i16: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1);\nloop invariant i17: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i18: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i19: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1);\nloop invariant i20: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant i21: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i22: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1) ==> (y >= 1);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant lock ==> (x = y);\nloop invariant !(lock) ==> (x = y);\nloop invariant (x = y) ==> (x >= 0);\nloop invariant (x = y) ==> (y >= 0);\nloop invariant (x = y) ==> (x <= y);\nloop invariant (x = y) ==> (y <= 100000);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant y == x;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y;\nloop invariant lock == 1 ==> x == y ==> lock == 1;\nloop invariant lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: lock == 1;\nloop invariant i2: x == y;\nloop invariant i3: y == x;\nloop invariant i4: lock == 1 ==> x == y;\nloop invariant i5: lock == 0 ==> x == y;\nloop invariant i6: x == y ==> lock == 1;\n\nloop invariant i8: x == y ==> lock == 1 ==> x == y;\nloop invariant i9: x == y ==> lock == 0 ==> x == y;\nloop invariant i10: lock == 1 ==> x == y ==> lock == 1;\nloop invariant i11: lock == 0 ==> x == y ==> lock == 0;\nloop invariant i12: x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i13: x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i14: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i15: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i16: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i17: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i18: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i19: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i20: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i21: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i22: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i23: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i24: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i25: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i26: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i27: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i28: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i29: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i30: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i31: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i32: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: lock == 1;\nloop invariant i3: x == y;\nloop invariant i4: y <= 100000;\nloop invariant i5: 0 <= lock <= 1;\nloop invariant i6: 0 <= y <= 100000;\nloop invariant i7: x >= (1 + (y - 1) * y / 2);\nloop invariant i8: x <= y;\nloop invariant i9: x = y ==> lock = 1;\nloop invariant i10: x != y ==> lock = 0;\nloop invariant i11: x != y ==> y = x + 1;\nloop invariant i12: x != y ==> y != x;\nloop invariant i13: x != y ==> lock != 1;\nloop invariant i14: x != y ==> lock != 0;\nloop invariant i15: x != y ==> x < y;\nloop invariant i16: x != y ==> x != y + 1;\nloop invariant i17: x != y ==> y != x - 1;\nloop invariant i18: x != y ==> x > y;\nloop invariant i19: x != y ==> y < x;\nloop invariant i20: x != y ==> y > x;\nloop invariant i21: x != y ==> y == x - 1;\nloop invariant i22: x != y ==> y == x + 1;\nloop invariant i23: x != y ==> y == x;\nloop invariant i24: x != y ==> x != y;\nloop invariant i25: lock == 1 ==> x == y;\nloop invariant i26: y < unknown();\nloop invariant i27: lock == 0 ==> x == y;\nloop invariant i28: x == y ==> lock == 1;\nloop invariant i29: x == y ==> x == y;\nloop invariant i30: x == y ==> lock == 1 ==> lock == 1;\nloop invariant i31: x == y ==> lock == 1 ==> x == y;\nloop invariant i32: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i33: x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i34: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i35: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i36: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant i37: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i38: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant i39: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i40: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i41: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i42: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i43: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i44: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i45: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i46: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i47: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i48: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i49: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i50: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i51: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i52: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i53: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i54: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i55: 1 <= x <= y;\nloop invariant i56: 1 <= y <= 100000;\nloop invariant i57: lock == 0 ==> x != y;\nloop invariant i58: y == 100000 ==> x == 100000;\nloop invariant i59: x == 100000 ==> y == 100000;\nloop invariant i60: x == 100000 ==> lock == 1;\nloop invariant i61: y == 100000 ==> lock == 0;\nloop invariant i62: x == 1 ==> y == 1;\nloop invariant i63: x == 1 ==> lock == 1;\nloop invariant i64: y == 1 ==> lock == 0;\nloop invariant i65: lock == 0;\nloop invariant i66: 1 <= lock <= 1;\nloop invariant i67: lock == 1 || lock == 0;\nloop invariant i68: y - x >= 0;\nloop invariant i69: 0 <= y;\nloop invariant i70: lock == 1 ==> lock == 0 ==> x == y;\nloop invariant i71: lock == 1 ==> lock == 0 ==> y == x + 1;\nloop invariant i72: 0 <= x <= y <= v1 && x == y && lock == 1;\nloop invariant i73: 0 <= x <= y <= v1 && x == y;\nloop invariant i74: 0 <= y <= v1 && lock == 0;\nloop invariant i75: x != y ==> lock == 0;\nloop invariant i76: x >= y ==> lock == 1;\nloop invariant i77: x < y ==> lock == 0;\nloop invariant i78: 0 <= y <= unknown();\nloop invariant i79: lock == 1 ==> (lock == 1);\nloop invariant i80: x == y ==> (x >= y);\nloop invariant i81: x == y ==> (lock == 1);\nloop invariant i82: x == y ==> (y >= 1);\nloop invariant i83: x == y ==> (x >= 1);\nloop invariant i84: x == y ==> (y >= 1) ==> (x >= 1);\nloop invariant i85: x == y ==> (y >= 1) ==> (lock == 1);\nloop invariant i86: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i87: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i88: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1);\nloop invariant i89: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i90: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant i91: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1);\nloop invariant i92: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i93: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i94: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1);\nloop invariant i95: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant i96: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i97: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1) ==> (y >= 1);\nloop invariant i98: lock ==> (x = y);\nloop invariant i99: !(lock) ==> (x = y);\nloop invariant i100: (x = y) ==> (x >= 0);\nloop invariant i101: (x = y) ==> (y >= 0);\nloop invariant i102: (x = y) ==> (x <= y);\nloop invariant i103: (x = y) ==> (y <= 100000);\nloop invariant i104: y == x;\nloop invariant i105: x == y ==> lock == 0;\nloop invariant i106: x == y ==> lock == 0 ==> x == y;\nloop invariant i107: lock == 1 ==> x == y ==> lock == 1;\nloop invariant i108: lock == 0 ==> x == y ==> lock == 0;\nloop invariant i109: x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i110: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i111: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i112: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i113: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i114: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i115: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i116: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i117: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i118: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i119: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i120: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i121: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i122: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i123: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i124: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i125: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i126: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i127: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i128: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\nloop invariant i2: lock == 1;\nloop invariant i3: x == y;\n\nloop invariant i5: 0 <= lock <= 1;\n\n\nloop invariant i8: x <= y;\n\n\n\nloop invariant i12: x != y ==> y != x;\nloop invariant i13: x != y ==> lock != 1;\nloop invariant i14: x != y ==> lock != 0;\nloop invariant i15: x != y ==> x < y;\nloop invariant i16: x != y ==> x != y + 1;\nloop invariant i17: x != y ==> y != x - 1;\nloop invariant i18: x != y ==> x > y;\nloop invariant i19: x != y ==> y < x;\nloop invariant i20: x != y ==> y > x;\nloop invariant i21: x != y ==> y == x - 1;\nloop invariant i22: x != y ==> y == x + 1;\nloop invariant i23: x != y ==> y == x;\nloop invariant i24: x != y ==> x != y;\nloop invariant i25: lock == 1 ==> x == y;\n\nloop invariant i27: lock == 0 ==> x == y;\nloop invariant i28: x == y ==> lock == 1;\nloop invariant i29: x == y ==> x == y;\nloop invariant i30: x == y ==> lock == 1 ==> lock == 1;\nloop invariant i31: x == y ==> lock == 1 ==> x == y;\nloop invariant i32: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i33: x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i34: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i35: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i36: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant i37: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i38: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1;\nloop invariant i39: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i40: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i41: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i42: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i43: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i44: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i45: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i46: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i47: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i48: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i49: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i50: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i51: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i52: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i53: x == y ==> lock == 1 ==> lock == 1 ==> x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\nloop invariant i54: x == y ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1 ==> lock == 1;\n\n\nloop invariant i57: lock == 0 ==> x != y;\nloop invariant i58: y == 100000 ==> x == 100000;\nloop invariant i59: x == 100000 ==> y == 100000;\nloop invariant i60: x == 100000 ==> lock == 1;\n\nloop invariant i62: x == 1 ==> y == 1;\nloop invariant i63: x == 1 ==> lock == 1;\n\n\nloop invariant i66: 1 <= lock <= 1;\nloop invariant i67: lock == 1 || lock == 0;\nloop invariant i68: y - x >= 0;\n\nloop invariant i70: lock == 1 ==> lock == 0 ==> x == y;\nloop invariant i71: lock == 1 ==> lock == 0 ==> y == x + 1;\n\n\n\nloop invariant i75: x != y ==> lock == 0;\nloop invariant i76: x >= y ==> lock == 1;\nloop invariant i77: x < y ==> lock == 0;\n\nloop invariant i79: lock == 1 ==> (lock == 1);\nloop invariant i80: x == y ==> (x >= y);\nloop invariant i81: x == y ==> (lock == 1);\n\n\nloop invariant i84: x == y ==> (y >= 1) ==> (x >= 1);\nloop invariant i85: x == y ==> (y >= 1) ==> (lock == 1);\nloop invariant i86: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i87: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i88: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1);\nloop invariant i89: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i90: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant i91: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1);\nloop invariant i92: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1);\nloop invariant i93: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i94: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1);\nloop invariant i95: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1);\nloop invariant i96: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1);\nloop invariant i97: x == y ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (lock == 1) ==> (x >= 1) ==> (x >= 1) ==> (lock == 1) ==> (x >= 1) ==> (y >= 1) ==> (x >= 1) ==> (x >= 1) ==> (y >= 1) ==> (y >= 1);\n\n\n\n\n\n\nloop invariant i104: y == x;\n\nloop invariant i106: x == y ==> lock == 0 ==> x == y;\nloop invariant i107: lock == 1 ==> x == y ==> lock == 1;\nloop invariant i108: lock == 0 ==> x == y ==> lock == 0;\nloop invariant i109: x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i110: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i111: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i112: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i113: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i114: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i115: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i116: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i117: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i118: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i119: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i120: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i121: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i122: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i123: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i124: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\nloop invariant i125: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0;\nloop invariant i126: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y;\nloop invariant i127: x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y ==> lock == 0 ==> x == y;\nloop invariant i128: x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1 ==> x == y ==> lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 74,
        "success_count": 62,
        "failure_count": 12,
        "success_rate": 0.8378378378378378
    }
}