{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/38.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    while (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c == n ==> c >= 0);\nloop invariant (c < n ==> c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant 0 <= c;\nloop invariant (unknown() ==> c <= n);\nloop invariant (c == n ==> unknown());\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == 1) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n);\nloop invariant (c == n) ==> (c >= 1);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= 0);\nloop invariant (c == n) ==> (c >= 0);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 0);\nloop invariant (c == n) ==> (c == 0);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 2);\nloop invariant (c == n) ==> (c == 3);\nloop invariant (c == n) ==> (c == 4);\nloop invariant (c == n) ==> (c == 5);\nloop invariant (c == n) ==> (c == 6);\nloop invariant (c == n) ==> (c == 7);\nloop invariant (c == n) ==> (c == 8);\nloop invariant (c == n) ==> (c == 9);\nloop invariant (c == n) ==> (c == 10);\nloop invariant (c == n) ==> (c == 11);\nloop invariant (c == n) ==> (c == 12);\nloop invariant (c == n) ==> (c == 13);\nloop invariant (c == n) ==> (c == 14);\nloop invariant (c == n) ==> (c == 15);\nloop invariant (c == n) ==> (c == 16);\nloop invariant (c == n) ==> (c == 17);\nloop invariant (c == n) ==> (c == 18);\nloop invariant (c == n) ==> (c == 19);\nloop invariant (c == n) ==> (c == 20);\nloop invariant (c == n) ==> (c == 21);\nloop invariant (c == n) ==> (c == 22);\nloop invariant (c == n) ==> (c == 23);\nloop invariant (c == n) ==> (c == 24);\nloop invariant (c == n) ==> (c == 25);\nloop invariant (c == n) ==> (c == 26);\nloop invariant (c == n) ==> (c == 27);\nloop invariant (c == n) ==> (c == 28);\nloop invariant (c == n) ==> (c == 29);\nloop invariant (c == n) ==> (c == 30);\nloop invariant (c == n) ==> (c == 31);\nloop invariant (c == n) ==> (c == 32);\nloop invariant (c == n) ==> (c == 33);\nloop invariant (c == n) ==> (c == 34);\nloop invariant (c == n) ==> (c == 35);\nloop invariant (c == n) ==> (c == 36);\nloop invariant (c == n) ==> (c == 37);\nloop invariant (c == n) ==> (c == 38);\nloop invariant (c == n) ==> (c == 39);\nloop invariant (c == n) ==> (c == 40);\nloop invariant (c == n) ==> (c == 41);\nloop invariant (c == n) ==> (c == 42);\nloop invariant (c == n) ==> (c == 43);\nloop invariant (c == n) ==> (c == 44);\nloop invariant (c == n) ==> (c == 45);\nloop invariant (c == n) ==> (c == 46);\nloop invariant (c == n) ==> (c == 47);\nloop invariant (c == n) ==> (c == 48);\nloop invariant (c == n) ==> (c == 49);\nloop invariant (c == n) ==> (c == 50);\nloop invariant (c == n) ==> (c == 51);\nloop invariant (c == n) ==> (c == 52);\nloop invariant (c == n) ==> (c == 53);\nloop invariant (c == n) ==> (c == 54);\nloop invariant (c == n) ==> (c == 55);\nloop invariant (c == n) ==> (c == 56);\nloop invariant (c == n) ==> (c == 57);\nloop invariant (c == n) ==> (c == 58);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c >= c;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c == c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c >= 0);\nloop invariant (c != n) ==> (0 <= c < n);\nloop invariant (unknown() ==> (c >= 0));\nloop invariant (unknown() ==> (0 <= c <= n));\nloop invariant (unknown() ==> ((c == n) ==> (c >= 0)));\nloop invariant (unknown() ==> ((c != n) ==> (0 <= c < n)));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n ==> (c == n);\nloop invariant c <= c + 1;\nloop invariant c >= 0;\nloop invariant n > 0;\n*/\n```",
            "```\n/*@\nloop invariant c == 1 ==> c >= 0;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n > 0 ==> c <= n;\nloop invariant n > 0 ==> c >= 0;\nloop invariant n <= 0 ==> c <= 0;\nloop invariant n <= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c == 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c != 0;\nloop invariant c != n ==> c != n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c < n ==> c + 1 <= n;\nloop invariant n >= 1 ==> unknown ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant if (unknown()) then c <= n else c < n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (if unknown() then c <= n else c >= n);\nloop invariant (c >= 1 ==> c <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant c < n ==> c == c + 1;\nloop invariant c > n ==> false;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c == n ==> c >= 0);\nloop invariant (c < n ==> c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: (c == n ==> c >= 0);\nloop invariant i3: (c < n ==> c >= 0);\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: c == n ==> c >= 0;\nloop invariant i3: c != n ==> c >= 0;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant 0 <= c;\nloop invariant (unknown() ==> c <= n);\nloop invariant (c == n ==> unknown());\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\nloop invariant (c == n ==> c <= n);\nloop invariant (c == n ==> c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\nloop invariant i3: 0 <= c;\n\n\nloop invariant i6: (c == n ==> c >= 0);\nloop invariant i7: (c == n ==> c <= n);\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 31,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == 1) ==> (c == n);\nloop invariant (c >= 1) ==> (c == n);\nloop invariant (c == n) ==> (c >= 1);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= 0);\nloop invariant (c == n) ==> (c >= 0);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 0);\nloop invariant (c == n) ==> (c == 0);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 2);\nloop invariant (c == n) ==> (c == 3);\nloop invariant (c == n) ==> (c == 4);\nloop invariant (c == n) ==> (c == 5);\nloop invariant (c == n) ==> (c == 6);\nloop invariant (c == n) ==> (c == 7);\nloop invariant (c == n) ==> (c == 8);\nloop invariant (c == n) ==> (c == 9);\nloop invariant (c == n) ==> (c == 10);\nloop invariant (c == n) ==> (c == 11);\nloop invariant (c == n) ==> (c == 12);\nloop invariant (c == n) ==> (c == 13);\nloop invariant (c == n) ==> (c == 14);\nloop invariant (c == n) ==> (c == 15);\nloop invariant (c == n) ==> (c == 16);\nloop invariant (c == n) ==> (c == 17);\nloop invariant (c == n) ==> (c == 18);\nloop invariant (c == n) ==> (c == 19);\nloop invariant (c == n) ==> (c == 20);\nloop invariant (c == n) ==> (c == 21);\nloop invariant (c == n) ==> (c == 22);\nloop invariant (c == n) ==> (c == 23);\nloop invariant (c == n) ==> (c == 24);\nloop invariant (c == n) ==> (c == 25);\nloop invariant (c == n) ==> (c == 26);\nloop invariant (c == n) ==> (c == 27);\nloop invariant (c == n) ==> (c == 28);\nloop invariant (c == n) ==> (c == 29);\nloop invariant (c == n) ==> (c == 30);\nloop invariant (c == n) ==> (c == 31);\nloop invariant (c == n) ==> (c == 32);\nloop invariant (c == n) ==> (c == 33);\nloop invariant (c == n) ==> (c == 34);\nloop invariant (c == n) ==> (c == 35);\nloop invariant (c == n) ==> (c == 36);\nloop invariant (c == n) ==> (c == 37);\nloop invariant (c == n) ==> (c == 38);\nloop invariant (c == n) ==> (c == 39);\nloop invariant (c == n) ==> (c == 40);\nloop invariant (c == n) ==> (c == 41);\nloop invariant (c == n) ==> (c == 42);\nloop invariant (c == n) ==> (c == 43);\nloop invariant (c == n) ==> (c == 44);\nloop invariant (c == n) ==> (c == 45);\nloop invariant (c == n) ==> (c == 46);\nloop invariant (c == n) ==> (c == 47);\nloop invariant (c == n) ==> (c == 48);\nloop invariant (c == n) ==> (c == 49);\nloop invariant (c == n) ==> (c == 50);\nloop invariant (c == n) ==> (c == 51);\nloop invariant (c == n) ==> (c == 52);\nloop invariant (c == n) ==> (c == 53);\nloop invariant (c == n) ==> (c == 54);\nloop invariant (c == n) ==> (c == 55);\nloop invariant (c == n) ==> (c == 56);\nloop invariant (c == n) ==> (c == 57);\nloop invariant (c == n) ==> (c == 58);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: 0 <= c <= n;\n\n\nloop invariant i4: (c == n) ==> (c >= 1);\nloop invariant i5: (c == n) ==> (c <= n);\n\nloop invariant i7: (c == n) ==> (c >= 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c >= c;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c == c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\nloop invariant i3: c >= 0;\nloop invariant i4: c >= c;\nloop invariant i5: c == n ==> c >= 0;\nloop invariant i6: c == n ==> c <= n;\nloop invariant i7: c == n ==> c == c;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c >= 0);\nloop invariant (c != n) ==> (0 <= c < n);\nloop invariant (unknown() ==> (c >= 0));\nloop invariant (unknown() ==> (0 <= c <= n));\nloop invariant (unknown() ==> ((c == n) ==> (c >= 0)));\nloop invariant (unknown() ==> ((c != n) ==> (0 <= c < n)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n ==> (c == n);\nloop invariant c <= c + 1;\nloop invariant c >= 0;\nloop invariant n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: c <= c + 1;\nloop invariant i3: c >= 0;\nloop invariant i4: n > 0;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant c == 1 ==> c >= 0;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: c == 1 ==> c >= 0;\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n > 0 ==> c <= n;\nloop invariant n > 0 ==> c >= 0;\nloop invariant n <= 0 ==> c <= 0;\nloop invariant n <= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c == 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c != 0;\nloop invariant c != n ==> c != n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: n > 0 ==> c <= n;\nloop invariant i3: n > 0 ==> c >= 0;\n\nloop invariant i5: n <= 0 ==> c >= 0;\nloop invariant i6: c == n ==> c >= 0;\nloop invariant i7: c == n ==> c <= n;\n\nloop invariant i9: c == n ==> c == n;\nloop invariant i10: c != n ==> c >= 0;\n\n\nloop invariant i13: c != n ==> c != n;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c < n ==> c + 1 <= n;\nloop invariant n >= 1 ==> unknown ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: c < n ==> c + 1 <= n;\nloop invariant i3: n >= 1 ==> unknown ==> c >= 0;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant if (unknown()) then c <= n else c < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (if unknown() then c <= n else c >= n);\nloop invariant (c >= 1 ==> c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant c < n ==> c == c + 1;\nloop invariant c > n ==> false;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: 1 <= c <= n;\nloop invariant i2: (c == n ==> c >= 0);\nloop invariant i3: (c < n ==> c >= 0);\nloop invariant i4: 0 <= c <= n;\nloop invariant i5: c == n ==> c >= 0;\nloop invariant i6: c != n ==> c >= 0;\nloop invariant i7: c <= n;\nloop invariant i8: 0 <= c;\nloop invariant i9: (unknown() ==> c <= n);\nloop invariant i10: (c == n ==> unknown());\nloop invariant i11: (c == n ==> c <= n);\nloop invariant i12: (c == 1) ==> (c == n);\nloop invariant i13: (c >= 1) ==> (c == n);\nloop invariant i14: (c == n) ==> (c >= 1);\nloop invariant i15: (c == n) ==> (c <= n);\nloop invariant i16: (c == n) ==> (c <= 0);\nloop invariant i17: (c == n) ==> (c >= 0);\nloop invariant i18: (c == n) ==> (c == 1);\nloop invariant i19: (c == n) ==> (c == 0);\nloop invariant i20: (c == n) ==> (c == 2);\nloop invariant i21: (c == n) ==> (c == 3);\nloop invariant i22: (c == n) ==> (c == 4);\nloop invariant i23: (c == n) ==> (c == 5);\nloop invariant i24: (c == n) ==> (c == 6);\nloop invariant i25: (c == n) ==> (c == 7);\nloop invariant i26: (c == n) ==> (c == 8);\nloop invariant i27: (c == n) ==> (c == 9);\nloop invariant i28: (c == n) ==> (c == 10);\nloop invariant i29: (c == n) ==> (c == 11);\nloop invariant i30: (c == n) ==> (c == 12);\nloop invariant i31: (c == n) ==> (c == 13);\nloop invariant i32: (c == n) ==> (c == 14);\nloop invariant i33: (c == n) ==> (c == 15);\nloop invariant i34: (c == n) ==> (c == 16);\nloop invariant i35: (c == n) ==> (c == 17);\nloop invariant i36: (c == n) ==> (c == 18);\nloop invariant i37: (c == n) ==> (c == 19);\nloop invariant i38: (c == n) ==> (c == 20);\nloop invariant i39: (c == n) ==> (c == 21);\nloop invariant i40: (c == n) ==> (c == 22);\nloop invariant i41: (c == n) ==> (c == 23);\nloop invariant i42: (c == n) ==> (c == 24);\nloop invariant i43: (c == n) ==> (c == 25);\nloop invariant i44: (c == n) ==> (c == 26);\nloop invariant i45: (c == n) ==> (c == 27);\nloop invariant i46: (c == n) ==> (c == 28);\nloop invariant i47: (c == n) ==> (c == 29);\nloop invariant i48: (c == n) ==> (c == 30);\nloop invariant i49: (c == n) ==> (c == 31);\nloop invariant i50: (c == n) ==> (c == 32);\nloop invariant i51: (c == n) ==> (c == 33);\nloop invariant i52: (c == n) ==> (c == 34);\nloop invariant i53: (c == n) ==> (c == 35);\nloop invariant i54: (c == n) ==> (c == 36);\nloop invariant i55: (c == n) ==> (c == 37);\nloop invariant i56: (c == n) ==> (c == 38);\nloop invariant i57: (c == n) ==> (c == 39);\nloop invariant i58: (c == n) ==> (c == 40);\nloop invariant i59: (c == n) ==> (c == 41);\nloop invariant i60: (c == n) ==> (c == 42);\nloop invariant i61: (c == n) ==> (c == 43);\nloop invariant i62: (c == n) ==> (c == 44);\nloop invariant i63: (c == n) ==> (c == 45);\nloop invariant i64: (c == n) ==> (c == 46);\nloop invariant i65: (c == n) ==> (c == 47);\nloop invariant i66: (c == n) ==> (c == 48);\nloop invariant i67: (c == n) ==> (c == 49);\nloop invariant i68: (c == n) ==> (c == 50);\nloop invariant i69: (c == n) ==> (c == 51);\nloop invariant i70: (c == n) ==> (c == 52);\nloop invariant i71: (c == n) ==> (c == 53);\nloop invariant i72: (c == n) ==> (c == 54);\nloop invariant i73: (c == n) ==> (c == 55);\nloop invariant i74: (c == n) ==> (c == 56);\nloop invariant i75: (c == n) ==> (c == 57);\nloop invariant i76: (c == n) ==> (c == 58);\nloop invariant i77: c >= 0;\nloop invariant i78: c >= c;\nloop invariant i79: c == n ==> c <= n;\nloop invariant i80: c == n ==> c == c;\nloop invariant i81: (c != n) ==> (0 <= c < n);\nloop invariant i82: (unknown() ==> (c >= 0));\nloop invariant i83: (unknown() ==> (0 <= c <= n));\nloop invariant i84: (unknown() ==> ((c == n) ==> (c >= 0)));\nloop invariant i85: (unknown() ==> ((c != n) ==> (0 <= c < n)));\nloop invariant i86: 1 <= c <= n ==> (c == n);\nloop invariant i87: c <= c + 1;\nloop invariant i88: n > 0;\nloop invariant i89: c == 1 ==> c >= 0;\nloop invariant i90: n > 0 ==> c <= n;\nloop invariant i91: n > 0 ==> c >= 0;\nloop invariant i92: n <= 0 ==> c <= 0;\nloop invariant i93: n <= 0 ==> c >= 0;\nloop invariant i94: c == n ==> c == 0;\nloop invariant i95: c == n ==> c == n;\nloop invariant i96: c != n ==> c <= n;\nloop invariant i97: c != n ==> c != 0;\nloop invariant i98: c != n ==> c != n;\nloop invariant i99: c < n ==> c + 1 <= n;\nloop invariant i100: n >= 1 ==> unknown ==> c >= 0;\nloop invariant i101: if (unknown()) then c <= n else c < n;\nloop invariant i102: (if unknown() then c <= n else c >= n);\nloop invariant i103: (c >= 1 ==> c <= n);\nloop invariant i104: c == n ==> c == 1;\nloop invariant i105: c < n ==> c == c + 1;\nloop invariant i106: c > n ==> false;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 46,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: (c == n ==> c >= 0);\nloop invariant i3: (c < n ==> c >= 0);\nloop invariant i4: 0 <= c <= n;\nloop invariant i5: c == n ==> c >= 0;\nloop invariant i6: c != n ==> c >= 0;\nloop invariant i7: c <= n;\nloop invariant i8: 0 <= c;\n\n\nloop invariant i11: (c == n ==> c <= n);\n\n\nloop invariant i14: (c == n) ==> (c >= 1);\nloop invariant i15: (c == n) ==> (c <= n);\n\nloop invariant i17: (c == n) ==> (c >= 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i77: c >= 0;\nloop invariant i78: c >= c;\nloop invariant i79: c == n ==> c <= n;\nloop invariant i80: c == n ==> c == c;\nloop invariant i81: (c != n) ==> (0 <= c < n);\n\n\n\n\n\nloop invariant i87: c <= c + 1;\nloop invariant i88: n > 0;\nloop invariant i89: c == 1 ==> c >= 0;\nloop invariant i90: n > 0 ==> c <= n;\nloop invariant i91: n > 0 ==> c >= 0;\nloop invariant i92: n <= 0 ==> c <= 0;\nloop invariant i93: n <= 0 ==> c >= 0;\n\nloop invariant i95: c == n ==> c == n;\nloop invariant i96: c != n ==> c <= n;\n\nloop invariant i98: c != n ==> c != n;\nloop invariant i99: c < n ==> c + 1 <= n;\nloop invariant i100: n >= 1 ==> unknown ==> c >= 0;\n\n\nloop invariant i103: (c >= 1 ==> c <= n);\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 29,
        "success_count": 22,
        "failure_count": 7,
        "success_rate": 0.7586206896551724
    }
}