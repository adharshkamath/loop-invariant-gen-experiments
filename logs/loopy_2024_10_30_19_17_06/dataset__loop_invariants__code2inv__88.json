{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/88.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y < 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lock <= 1;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y - 1;\nloop invariant y - 1 >= x;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 1 ==> y == x + 1;\nloop invariant lock == 0 ==> y == x;\nloop invariant lock == 1 ==> y == x + 1;\nloop invariant lock == 0 ==> y == x;\nloop invariant lock == 1 ==> lock <= 1;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> y - 1 == x - 1;\nloop invariant lock == 0 ==> y - 1 == x;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 1 ==> y == x + 1;\nloop invariant lock == 0 ==> y == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 0 <= lock <= 1;\nloop invariant x <= y - 1 ==> lock == 0;\nloop invariant x == y ==> lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y <= x + 1;\nloop invariant lock == (x != y);\nloop invariant lock == 1 ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= y;\nloop invariant x <= x + 1;\nloop invariant y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> x == y && y == x + 1;\nloop invariant lock == 0 ==> x == y + 1 && y == x + 1;\n*/\n```",
            "```\n/*@\nloop invariant ( lock == 0 || lock == 1 );\nloop invariant ( 1 <= x && x <= y );\nloop invariant ( 1 <= y );\nloop invariant ( x + 1 == y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant y >= x;\nloop invariant x >= 1;\nloop invariant lock ==> (x == y);\nloop invariant !lock ==> (x == y) ==> (y == x + 1);\nloop invariant lock ==> (y == x + 1);\nloop invariant !lock ==> (y == x + 1) ==> (y != x);\nloop invariant lock ==> (y != x);\nloop invariant !lock ==> (y != x) ==> (y != x + 1);\nloop invariant lock ==> (y != x + 1);\nloop invariant !lock ==> (y != x + 1) ==> (y == x);\nloop invariant lock ==> (y == x);\nloop invariant !lock ==> (y == x) ==> (x == y);\nloop invariant lock ==> (x == y);\nloop invariant !lock ==> (x == y) ==> (lock == 1);\nloop invariant lock ==> (lock == 1);\nloop invariant !lock ==> (lock == 1) ==> (x == y);\nloop invariant lock ==> (x == y) ==> (lock == 1);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y) ==> (y == x + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (lock == 0 ==> x == y) ==> (lock == 1 ==> x == y);\nloop invariant (lock == 0 ==> y <= 100000);\nloop invariant (lock == 0 ==> x >= (1 + (y - 1) * y / 2));\nloop invariant (lock == 1 ==> x >= y);\nloop invariant (lock == 1 ==> y == 100000);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> y <= x + 1;\nloop invariant lock == 0 ==> x <= y - 1;\n*/\n```",
            "```\n/*@\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y <= 100000;\nloop invariant y = y + 1 ==> lock = 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y; loop invariant lock == 0; loop invariant lock == 1 ==> (x == y); loop invariant lock != 1 ==> (x != y); loop invariant lock == 0 ==> x < y; loop invariant lock == 1 ==> x == y; loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (x + 1)); loop invariant lock == 1 ==> (x == (y - 1)); loop invariant lock == 0 ==> (x == (y + 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y <= 100000;\nloop invariant lock == 1 ==> (x == y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y < 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= lock <= 1;\nloop invariant x == y ==> lock == 1;\nloop invariant x != y ==> lock == 0;\nloop invariant x >= y - 1;\nloop invariant y - 1 >= x;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 1 ==> y == x + 1;\nloop invariant lock == 0 ==> y == x;\nloop invariant lock == 1 ==> y == x + 1;\nloop invariant lock == 0 ==> y == x;\nloop invariant lock == 1 ==> lock <= 1;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> y - 1 == x - 1;\nloop invariant lock == 0 ==> y - 1 == x;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 1 ==> y == x + 1;\nloop invariant lock == 0 ==> y == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: x == y ==> lock == 1;\nloop invariant i3: x != y ==> lock == 0;\nloop invariant i4: x >= y - 1;\n\n\nloop invariant i7: y >= x;\nloop invariant i8: lock == 1 ==> x == y;\nloop invariant i9: lock == 0 ==> x != y;\n\n\nloop invariant i12: lock == 1 ==> lock <= 1;\nloop invariant i13: lock == 0 ==> lock == 0;\nloop invariant i14: lock == 1 ==> y - 1 == x - 1;\nloop invariant i15: lock == 0 ==> y - 1 == x;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 0 <= lock <= 1;\nloop invariant x <= y - 1 ==> lock == 0;\nloop invariant x == y ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: 0 <= lock <= 1;\nloop invariant i3: x <= y - 1 ==> lock == 0;\nloop invariant i4: x == y ==> lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y <= x + 1;\nloop invariant lock == (x != y);\nloop invariant lock == 1 ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: y <= x + 1;\n\nloop invariant i4: lock == 1 ==> x == y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= y;\nloop invariant x <= x + 1;\nloop invariant y >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: x <= x + 1;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> x == y && y == x + 1;\nloop invariant lock == 0 ==> x == y + 1 && y == x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( lock == 0 || lock == 1 );\nloop invariant ( 1 <= x && x <= y );\nloop invariant ( 1 <= y );\nloop invariant ( x + 1 == y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\nloop invariant ( lock == 0 ==> x != y );\nloop invariant ( lock == 1 ==> x == y );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: ( lock == 0 || lock == 1 );\n\n\n\nloop invariant i5: ( lock == 1 ==> x == y );\nloop invariant i6: ( lock == 0 ==> x != y );\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant y >= x;\nloop invariant x >= 1;\nloop invariant lock ==> (x == y);\nloop invariant !lock ==> (x == y) ==> (y == x + 1);\nloop invariant lock ==> (y == x + 1);\nloop invariant !lock ==> (y == x + 1) ==> (y != x);\nloop invariant lock ==> (y != x);\nloop invariant !lock ==> (y != x) ==> (y != x + 1);\nloop invariant lock ==> (y != x + 1);\nloop invariant !lock ==> (y != x + 1) ==> (y == x);\nloop invariant lock ==> (y == x);\nloop invariant !lock ==> (y == x) ==> (x == y);\nloop invariant lock ==> (x == y);\nloop invariant !lock ==> (x == y) ==> (lock == 1);\nloop invariant lock ==> (lock == 1);\nloop invariant !lock ==> (lock == 1) ==> (x == y);\nloop invariant lock ==> (x == y) ==> (lock == 1);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y) ==> (y == x + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 0 <= lock <= 1;\nloop invariant i2: y >= x;\n\nloop invariant i4: lock ==> (x == y);\nloop invariant i5: !lock ==> (x == y) ==> (y == x + 1);\n\nloop invariant i7: !lock ==> (y == x + 1) ==> (y != x);\n\n\nloop invariant i10: lock ==> (y != x + 1);\nloop invariant i11: !lock ==> (y != x + 1) ==> (y == x);\nloop invariant i12: lock ==> (y == x);\nloop invariant i13: !lock ==> (y == x) ==> (x == y);\nloop invariant i14: !lock ==> (x == y) ==> (lock == 1);\nloop invariant i15: lock ==> (lock == 1);\nloop invariant i16: !lock ==> (lock == 1) ==> (x == y);\nloop invariant i17: lock ==> (x == y) ==> (lock == 1);\nloop invariant i18: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1);\n\nloop invariant i20: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant i21: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant i22: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant i23: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant i24: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant i25: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant i26: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant i27: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant i28: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant i29: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant i30: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant i31: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant i32: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y) ==> (y == x + 1);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (lock == 0 ==> x == y) ==> (lock == 1 ==> x == y);\nloop invariant (lock == 0 ==> y <= 100000);\nloop invariant (lock == 0 ==> x >= (1 + (y - 1) * y / 2));\nloop invariant (lock == 1 ==> x >= y);\nloop invariant (lock == 1 ==> y == 100000);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: (lock == 0 ==> x == y) ==> (lock == 1 ==> x == y);\n\n\nloop invariant i6: (lock == 1 ==> x >= y);\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> y <= x + 1;\nloop invariant lock == 0 ==> x <= y - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 1 ==> x == y;\nloop invariant i3: lock == 0 ==> x < y;\nloop invariant i4: lock == 0 ==> y <= x + 1;\nloop invariant i5: lock == 0 ==> x <= y - 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y <= 100000;\nloop invariant y = y + 1 ==> lock = 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: lock <= 1;\nloop invariant i2: lock >= 0;\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y; loop invariant lock == 0; loop invariant lock == 1 ==> (x == y); loop invariant lock != 1 ==> (x != y); loop invariant lock == 0 ==> x < y; loop invariant lock == 1 ==> x == y; loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (x + 1)); loop invariant lock == 1 ==> (x == (y - 1)); loop invariant lock == 0 ==> (x == (y + 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y <= 100000;\nloop invariant lock == 1 ==> (x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: lock == 1 ==> (x == y);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 99: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y < 100000;\nloop invariant i3: x >= (1 + (y - 1) * y / 2);\nloop invariant i4: 1 <= lock <= 1;\nloop invariant i5: x == y ==> lock == 1;\nloop invariant i6: x != y ==> lock == 0;\nloop invariant i7: x >= y - 1;\nloop invariant i8: y - 1 >= x;\nloop invariant i9: x >= y;\nloop invariant i10: y >= x;\nloop invariant i11: lock == 1 ==> x == y;\nloop invariant i12: lock == 0 ==> x != y;\nloop invariant i13: lock == 1 ==> y == x + 1;\nloop invariant i14: lock == 0 ==> y == x;\nloop invariant i15: lock == 1 ==> lock <= 1;\nloop invariant i16: lock == 0 ==> lock == 0;\nloop invariant i17: lock == 1 ==> y - 1 == x - 1;\nloop invariant i18: lock == 0 ==> y - 1 == x;\nloop invariant i19: 0 <= x <= y <= 100000;\nloop invariant i20: lock == 1;\nloop invariant i21: x == y;\nloop invariant i22: lock == 0;\nloop invariant i23: 1 <= x <= y;\nloop invariant i24: 0 <= lock <= 1;\nloop invariant i25: x <= y - 1 ==> lock == 0;\nloop invariant i26: y <= x + 1;\nloop invariant i27: lock == (x != y);\nloop invariant i28: 0 <= y <= x;\nloop invariant i29: x <= x + 1;\nloop invariant i30: y >= 1;\nloop invariant i31: lock == 1 ==> x == y && y == x + 1;\nloop invariant i32: lock == 0 ==> x == y + 1 && y == x + 1;\nloop invariant i33: ( lock == 0 || lock == 1 );\nloop invariant i34: ( 1 <= x && x <= y );\nloop invariant i35: ( 1 <= y );\nloop invariant i36: ( x + 1 == y );\nloop invariant i37: ( lock == 1 ==> x == y );\nloop invariant i38: ( lock == 0 ==> x != y );\nloop invariant i39: x >= 1;\nloop invariant i40: lock ==> (x == y);\nloop invariant i41: !lock ==> (x == y) ==> (y == x + 1);\nloop invariant i42: lock ==> (y == x + 1);\nloop invariant i43: !lock ==> (y == x + 1) ==> (y != x);\nloop invariant i44: lock ==> (y != x);\nloop invariant i45: !lock ==> (y != x) ==> (y != x + 1);\nloop invariant i46: lock ==> (y != x + 1);\nloop invariant i47: !lock ==> (y != x + 1) ==> (y == x);\nloop invariant i48: lock ==> (y == x);\nloop invariant i49: !lock ==> (y == x) ==> (x == y);\nloop invariant i50: !lock ==> (x == y) ==> (lock == 1);\nloop invariant i51: lock ==> (lock == 1);\nloop invariant i52: !lock ==> (lock == 1) ==> (x == y);\nloop invariant i53: lock ==> (x == y) ==> (lock == 1);\nloop invariant i54: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1);\nloop invariant i55: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1);\nloop invariant i56: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant i57: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant i58: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant i59: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant i60: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant i61: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant i62: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant i63: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant i64: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant i65: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant i66: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant i67: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant i68: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y) ==> (y == x + 1);\nloop invariant i69: 0 <= y <= 100000;\nloop invariant i70: (lock == 0 ==> x == y) ==> (lock == 1 ==> x == y);\nloop invariant i71: (lock == 0 ==> y <= 100000);\nloop invariant i72: (lock == 0 ==> x >= (1 + (y - 1) * y / 2));\nloop invariant i73: (lock == 1 ==> x >= y);\nloop invariant i74: (lock == 1 ==> y == 100000);\nloop invariant i75: lock == 0 ==> x < y;\nloop invariant i76: lock == 0 ==> y <= x + 1;\nloop invariant i77: lock == 0 ==> x <= y - 1;\nloop invariant i78: lock <= 1;\nloop invariant i79: lock >= 0;\nloop invariant i80: 1 <= y <= 100000;\nloop invariant i81: y = y + 1 ==> lock = 0;\nloop invariant i82: 1 <= x <= y; loop invariant lock == 0; loop invariant lock == 1 ==> (x == y); loop invariant lock != 1 ==> (x != y); loop invariant lock == 0 ==> x < y; loop invariant lock == 1 ==> x == y; loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (x + 1)); loop invariant lock == 1 ==> (x == (y - 1)); loop invariant lock == 0 ==> (x == (y + 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1)); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == y + 1); loop invariant lock == 1 ==> (x == y); loop invariant lock == 0 ==> (x == (y - 1));\nloop invariant i83: y <= 100000;\nloop invariant i84: lock == 1 ==> (x == y);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 23,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\nloop invariant i5: x == y ==> lock == 1;\nloop invariant i6: x != y ==> lock == 0;\nloop invariant i7: x >= y - 1;\n\n\nloop invariant i10: y >= x;\nloop invariant i11: lock == 1 ==> x == y;\nloop invariant i12: lock == 0 ==> x != y;\n\n\nloop invariant i15: lock == 1 ==> lock <= 1;\nloop invariant i16: lock == 0 ==> lock == 0;\nloop invariant i17: lock == 1 ==> y - 1 == x - 1;\nloop invariant i18: lock == 0 ==> y - 1 == x;\n\n\n\n\n\nloop invariant i24: 0 <= lock <= 1;\nloop invariant i25: x <= y - 1 ==> lock == 0;\nloop invariant i26: y <= x + 1;\n\n\nloop invariant i29: x <= x + 1;\n\n\n\nloop invariant i33: ( lock == 0 || lock == 1 );\n\n\n\nloop invariant i37: ( lock == 1 ==> x == y );\nloop invariant i38: ( lock == 0 ==> x != y );\n\nloop invariant i40: lock ==> (x == y);\nloop invariant i41: !lock ==> (x == y) ==> (y == x + 1);\n\nloop invariant i43: !lock ==> (y == x + 1) ==> (y != x);\n\n\nloop invariant i46: lock ==> (y != x + 1);\nloop invariant i47: !lock ==> (y != x + 1) ==> (y == x);\nloop invariant i48: lock ==> (y == x);\nloop invariant i49: !lock ==> (y == x) ==> (x == y);\nloop invariant i50: !lock ==> (x == y) ==> (lock == 1);\nloop invariant i51: lock ==> (lock == 1);\nloop invariant i52: !lock ==> (lock == 1) ==> (x == y);\nloop invariant i53: lock ==> (x == y) ==> (lock == 1);\nloop invariant i54: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1);\n\nloop invariant i56: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant i57: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x);\nloop invariant i58: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant i59: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1);\nloop invariant i60: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant i61: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x);\nloop invariant i62: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant i63: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y);\nloop invariant i64: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant i65: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1);\nloop invariant i66: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant i67: lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y);\nloop invariant i68: !lock ==> (x == y) ==> (lock == 1) ==> (y == x + 1) ==> (y != x) ==> (y != x + 1) ==> (y == x) ==> (x == y) ==> (lock == 1) ==> (x == y) ==> (y == x + 1);\n\nloop invariant i70: (lock == 0 ==> x == y) ==> (lock == 1 ==> x == y);\n\n\nloop invariant i73: (lock == 1 ==> x >= y);\n\nloop invariant i75: lock == 0 ==> x < y;\nloop invariant i76: lock == 0 ==> y <= x + 1;\nloop invariant i77: lock == 0 ==> x <= y - 1;\nloop invariant i78: lock <= 1;\nloop invariant i79: lock >= 0;\n\n\n\n\nloop invariant i84: lock == 1 ==> (x == y);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 73,
        "success_count": 61,
        "failure_count": 12,
        "success_rate": 0.8356164383561644
    }
}