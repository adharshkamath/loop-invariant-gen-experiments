{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/92.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    while(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 >= y;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y < 0 ==> x == 0;\nloop invariant y >= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 ==> y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant x >= y ==> y >= 0;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant x >= y ==> y >= 0;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= z1 + z2 + z3;\nloop invariant x <= y;\nloop invariant x <= z1 + z2 + z3;\nloop invariant y >= z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y >= z1;\nloop invariant x <= z1;\nloop invariant y >= z2;\nloop invariant x <= z2;\nloop invariant y >= z3;\nloop invariant x <= z3;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x + z1;\nloop invariant x >= 0;\nloop invariant y >= x + z2;\nloop invariant x >= 0;\nloop invariant y >= x + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2;\nloop invariant x >= 0;\nloop invariant y >= z1 + z3;\nloop invariant x >= 0;\nloop invariant y >= z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x <= y;\nloop invariant y >= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x >= 0;\nloop invariant y + x >= 0;\nloop invariant y + x <= INT_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 >= y;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y < 0 ==> x == 0;\nloop invariant y >= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= y <= INT_MAX;\nloop invariant i2: 0 <= x <= INT_MAX;\nloop invariant i3: y < 0 ==> x == 0;\nloop invariant i4: y >= 0 ==> x >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 ==> y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= x;\nloop invariant i4: y >= 0 ==> x >= 0;\nloop invariant i5: y >= 0 ==> x >= 0 ==> y >= x;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant x >= y ==> y >= 0;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant x >= y ==> y >= 0;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y < 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\nloop invariant i2: y >= 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: y < 0 ==> x >= y;\nloop invariant i6: x >= y ==> y >= 0;\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\nloop invariant i2: x >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= x <= y;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= z1 + z2 + z3;\nloop invariant x <= y;\nloop invariant x <= z1 + z2 + z3;\nloop invariant y >= z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y >= z1;\nloop invariant x <= z1;\nloop invariant y >= z2;\nloop invariant x <= z2;\nloop invariant y >= z3;\nloop invariant x <= z3;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x + z1;\nloop invariant x >= 0;\nloop invariant y >= x + z2;\nloop invariant x >= 0;\nloop invariant y >= x + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2;\nloop invariant x >= 0;\nloop invariant y >= z1 + z3;\nloop invariant x >= 0;\nloop invariant y >= z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\nloop invariant y >= z1 + z2 + z3;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\nloop invariant i2: x <= y;\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= x;\n\n\n\n\n\n\nloop invariant i13: y >= 0;\n\n\n\n\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x <= y;\nloop invariant y >= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= y <= INT_MAX;\nloop invariant i2: x <= y;\nloop invariant i3: y >= 0 ==> x >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x >= 0;\nloop invariant y + x >= 0;\nloop invariant y + x <= INT_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= y <= INT_MAX;\nloop invariant i2: x >= 0;\nloop invariant i3: y + x >= 0;\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= y is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant 1 >= y is partially proven to be inductive.\nloop invariant 0 <= y <= INT_MAX is partially proven to be inductive.\nloop invariant 0 <= x <= INT_MAX is partially proven to be inductive.\nloop invariant y < 0 ==> x == 0 is partially proven to be inductive.\nloop invariant y >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant y >= 0 ==> x >= 0 ==> y >= x is partially proven to be inductive.\nloop invariant 0 <= y <= x is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y < 0 ==> x >= y is partially proven to be inductive.\nloop invariant x >= y ==> y >= 0 is partially proven to be inductive.\nloop invariant y >= 0 ==> x >= y is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant 0 <= y <= 0 is partially proven to be inductive.\nloop invariant 1 <= y <= z1 + z2 + z3 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x <= z1 + z2 + z3 is partially proven to be inductive.\nloop invariant y >= z2 + z3 is partially proven to be inductive.\nloop invariant y >= z1 is partially proven to be inductive.\nloop invariant x <= z1 is partially proven to be inductive.\nloop invariant y >= z2 is partially proven to be inductive.\nloop invariant x <= z2 is partially proven to be inductive.\nloop invariant y >= z3 is partially proven to be inductive.\nloop invariant x <= z3 is partially proven to be inductive.\nloop invariant y >= x + z1 is partially proven to be inductive.\nloop invariant y >= x + z2 is partially proven to be inductive.\nloop invariant y >= x + z3 is partially proven to be inductive.\nloop invariant y >= z1 + z2 is partially proven to be inductive.\nloop invariant y >= z1 + z3 is partially proven to be inductive.\nloop invariant y >= z1 + z2 + z3 is partially proven to be inductive.\nloop invariant y + x >= 0 is partially proven to be inductive.\nloop invariant y + x <= INT_MAX is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y >= 0;\nloop invariant i3: 1 >= y;\nloop invariant i4: 0 <= y <= INT_MAX;\nloop invariant i5: 0 <= x <= INT_MAX;\nloop invariant i6: y < 0 ==> x == 0;\nloop invariant i7: y >= 0 ==> x >= 0;\nloop invariant i8: x >= 0;\nloop invariant i9: y >= x;\nloop invariant i10: y >= 0 ==> x >= 0 ==> y >= x;\nloop invariant i11: 0 <= y <= x;\nloop invariant i12: x >= y;\nloop invariant i13: y < 0 ==> x >= y;\nloop invariant i14: x >= y ==> y >= 0;\nloop invariant i15: y >= 0 ==> x >= y;\nloop invariant i16: 0 <= y <= 100000;\nloop invariant i17: x >= (1 + (y - 1) * y / 2);\nloop invariant i18: 0 <= y <= 0;\nloop invariant i19: 1 <= y <= z1 + z2 + z3;\nloop invariant i20: x <= y;\nloop invariant i21: x <= z1 + z2 + z3;\nloop invariant i22: y >= z2 + z3;\nloop invariant i23: y >= z1;\nloop invariant i24: x <= z1;\nloop invariant i25: y >= z2;\nloop invariant i26: x <= z2;\nloop invariant i27: y >= z3;\nloop invariant i28: x <= z3;\nloop invariant i29: y >= x + z1;\nloop invariant i30: y >= x + z2;\nloop invariant i31: y >= x + z3;\nloop invariant i32: y >= z1 + z2;\nloop invariant i33: y >= z1 + z3;\nloop invariant i34: y >= z1 + z2 + z3;\nloop invariant i35: y + x >= 0;\nloop invariant i36: y + x <= INT_MAX;\nloop invariant i37: 0 <= y;\nloop invariant i38: x + y >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y >= 0;\nloop invariant i3: 1 >= y;\nloop invariant i4: 0 <= y <= INT_MAX;\nloop invariant i5: 0 <= x <= INT_MAX;\nloop invariant i6: y < 0 ==> x == 0;\nloop invariant i7: y >= 0 ==> x >= 0;\nloop invariant i8: x >= 0;\nloop invariant i9: y >= x;\nloop invariant i10: y >= 0 ==> x >= 0 ==> y >= x;\nloop invariant i11: 0 <= y <= x;\nloop invariant i12: x >= y;\nloop invariant i13: y < 0 ==> x >= y;\nloop invariant i14: x >= y ==> y >= 0;\nloop invariant i15: y >= 0 ==> x >= y;\nloop invariant i16: 0 <= y <= 100000;\n\nloop invariant i18: 0 <= y <= 0;\n\nloop invariant i20: x <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: y + x >= 0;\nloop invariant i36: y + x <= INT_MAX;\nloop invariant i37: 0 <= y;\nloop invariant i38: x + y >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 78,
        "success_count": 66,
        "failure_count": 12,
        "success_rate": 0.8461538461538461
    }
}