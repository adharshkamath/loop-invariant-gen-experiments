{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x <= 0x1fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x % 2 != 0 ==> x >= 0xfff0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 0xfffff0 ==> x % 2 == 1;\nloop invariant x >= 0xfffff0 ==> x % 2 == 0;\nloop invariant x >= 0xfffff0 ==> x % 2 == 1 ==> x >= 0xfffff0 + 1;\nloop invariant x >= 0xfffff0 ==> x % 2 == 0 ==> x >= 0xfffff0 + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x < 0xfff0) ==> (x % 2 == 0);\nloop invariant (x >= 0xfff0) ==> (x % 2 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x <= 0x0fffffff;\nloop invariant x % 2 == 1 ==> x <= 0xfff0;\nloop invariant !(x % 2) ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x <= 0x0fffffff;\nloop invariant x % 2 == 1 ==> x <= 0xfff0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0xffffffff;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant (x < 0xfff0) ==> (x % 2 == 1);\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant (x < 0xfff0) ==> (x + 1 <= 0x0fffffff);\nloop invariant (x >= 0xfff0) ==> (x + 2 <= 0x0fffffff);\nloop invariant (x < 0xfff0) ==> (x + 1 >= 0xfff1);\nloop invariant (x >= 0xfff0) ==> (x + 2 >= 0xfff2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0xfffffffe;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x % 2 != 0 ==> x >= 0xfff0 && x < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 1 >= 0xfff1;\nloop invariant x % 2 != 0 ==> x + 2 >= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 1 <= 0xfffffffe;\nloop invariant x % 2 != 0 ==> x + 2 <= 0xfffffffe;\nloop invariant x % 2 == 0 ==> x + 1 < 0x0fffffff;\nloop invariant x % 2 != 0 ==> x + 2 < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 1 % 2 == 0;\nloop invariant x % 2 != 0 ==> x + 2 % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 0x0fffffff;\nloop invariant x >= ((x / 2) - 1) * 4096;\nloop invariant x <= ((x / 2) + 1) * 4096;\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\n*/\n```",
            "```\n/*@\nloop invariant ( x < 0x0fffffff ==> x % 2 == 0 );\nloop invariant ( x < 0x0fffffff ==> x >= 0x0fff0 );\nloop invariant ( x >= 0x0fffffff ==> x % 2 == 0 );\nloop invariant ( x >= 0x0fffffff ==> x >= 0x0fff0 );\nloop invariant ( x < 0x0fffffff ==> x < 0xfff0 + 2 * (x - 0x0fff0) );\nloop invariant ( x >= 0x0fffffff ==> x >= 0xfff0 + 2 * (x - 0x0fff0) );\nloop invariant ( x < 0x0fffffff ==> x >= 0xfff0 );\nloop invariant ( x >= 0x0fffffff ==> x >= 0xfff0 );\nloop invariant ( x < 0x0fffffff ==> x < 0x0fff0 + 2 * (x - 0x0fff0) );\nloop invariant ( x >= 0x0fffffff ==> x >= 0x0fff0 + 2 * (x - 0x0fff0) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x < 0xfff0 ==> x <= x + 1;\nloop invariant x >= 0xfff0 ==> x <= x + 2;\n*/\n```",
            "```\n/*@\nloop invariant x % 2 == 0;\nloop invariant x = 0 ==> x % 2 == 0;\nloop invariant x = 1 ==> x % 2 == 1;\nloop invariant x = 2 ==> x % 2 == 0;\nloop invariant x = 3 ==> x % 2 == 1;\nloop invariant x = 4 ==> x % 2 == 0;\nloop invariant x = 5 ==> x % 2 == 1;\nloop invariant x = 6 ==> x % 2 == 0;\nloop invariant x = 7 ==> x % 2 == 1;\nloop invariant x = 8 ==> x % 2 == 0;\nloop invariant x = 9 ==> x % 2 == 1;\nloop invariant x = 10 ==> x % 2 == 0;\nloop invariant x = 11 ==> x % 2 == 1;\nloop invariant x = 12 ==> x % 2 == 0;\nloop invariant x = 13 ==> x % 2 == 1;\nloop invariant x = 14 ==> x % 2 == 0;\nloop invariant x = 15 ==> x % 2 == 1;\nloop invariant x = 16 ==> x % 2 == 0;\nloop invariant x = 17 ==> x % 2 == 1;\nloop invariant x = 18 ==> x % 2 == 0;\nloop invariant x = 19 ==> x % 2 == 1;\nloop invariant x = 20 ==> x % 2 == 0;\nloop invariant x = 21 ==> x % 2 == 1;\nloop invariant x = 22 ==> x % 2 == 0;\nloop invariant x = 23 ==> x % 2 == 1;\nloop invariant x = 24 ==> x % 2 == 0;\nloop invariant x = 25 ==> x % 2 == 1;\nloop invariant x = 26 ==> x % 2 == 0;\nloop invariant x = 27 ==> x % 2 == 1;\nloop invariant x = 28 ==> x % 2 == 0;\nloop invariant x = 29 ==> x % 2 == 1;\nloop invariant x = 30 ==> x % 2 == 0;\nloop invariant x = 31 ==> x % 2 == 1;\nloop invariant x = 32 ==> x % 2 == 0;\nloop invariant x = 33 ==> x % 2 == 1;\nloop invariant x = 34 ==> x % 2 == 0;\nloop invariant x = 35 ==> x % 2 == 1;\nloop invariant x = 36 ==> x % 2 == 0;\nloop invariant x = 37 ==> x % 2 == 1;\nloop invariant x = 38 ==> x % 2 == 0;\nloop invariant x = 39 ==> x % 2 == 1;\nloop invariant x = 40 ==> x % 2 == 0;\nloop invariant x = 41 ==> x % 2 == 1;\nloop invariant x = 42 ==> x % 2 == 0;\nloop invariant x = 43 ==> x % 2 == 1;\nloop invariant x = 44 ==> x % 2 == 0;\nloop invariant x = 45 ==> x % 2 == 1;\nloop invariant x = 46 ==> x % 2 == 0;\nloop invariant x = 47 ==> x % 2 == 1;\nloop invariant x = 48 ==> x % 2 == 0;\nloop invariant x = 49 ==> x % 2 == 1;\nloop invariant x = 50 ==> x % 2 == 0;\nloop invariant x = 51 ==> x % 2 == 1;\nloop invariant x = 52 ==> x % 2 == 0;\nloop invariant x = 53 ==> x % 2 == 1;\nloop invariant x = 54 ==> x % 2 == 0;\nloop invariant x = 55 ==> x % 2 == 1;\nloop invariant x = 56 ==> x % 2 == 0;\nloop invariant x = 57 ==> x % 2 == 1;\nloop invariant x = 58 ==> x % 2 == 0;\nloop invariant x = 59 ==> x % 2 == 1;\nloop invariant x = 60 ==> x % 2 == 0;\nloop invariant x = 61 ==> x % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 1;\nloop invariant x >= 0xfff0;\nloop invariant x < 0x0fffffff + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * (x / 2);\nloop invariant x <= 2 * (x / 2) + 1;\nloop invariant x - 2 * (x / 2) <= 1;\nloop invariant x - 2 * (x / 2) >= 0;\nloop invariant x % 2 == 0 ==> (x >= 0xfff0 ==> x < 0xfffffffe);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0xfffffffe);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) <= 1);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 2 * (x / 2) + 1);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 2 * (x / 2));\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 != 0 ==> x < 0xfff0;\nloop invariant (x % 2 == 0) || (x % 2 != 0);\nloop invariant (x % 2 == 0) ==> x % 2 == 0;\nloop invariant (x % 2 != 0) ==> x % 2 != 0;\nloop invariant (x % 2 == 0) ==> (x % 2 == 0 && x >= 0xfff0);\nloop invariant (x % 2 != 0) ==> (x % 2 != 0 && x < 0xfff0);\nloop invariant x % 2 == 0 ==> x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 != 0 ==> x % 2 != 0 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0);\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0);\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0))));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)))));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0))))));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))))));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)))))));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant if (x < 0xfff0) { x <= (2 * (x - 1) + 1); } else { x <= (2 * (x - 0xfff0) + 0xfff0 + 1); };\nloop invariant if (x < 0xfff0) { x >= (2 * (x - 0xfff0) + 0xfff0 + 1); } else { x >= (2 * (x - 1) + 1); };\nloop invariant ((x % 2) == 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x <= 0x1fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x % 2 != 0 ==> x >= 0xfff0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x <= 0x1fffffff;\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 0xfffff0 ==> x % 2 == 1;\nloop invariant x >= 0xfffff0 ==> x % 2 == 0;\nloop invariant x >= 0xfffff0 ==> x % 2 == 1 ==> x >= 0xfffff0 + 1;\nloop invariant x >= 0xfffff0 ==> x % 2 == 0 ==> x >= 0xfffff0 + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: x >= 0xfffff0 ==> x % 2 == 1 ==> x >= 0xfffff0 + 1;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x < 0xfff0) ==> (x % 2 == 0);\nloop invariant (x >= 0xfff0) ==> (x % 2 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x <= 0x0fffffff;\nloop invariant x % 2 == 1 ==> x <= 0xfff0;\nloop invariant !(x % 2) ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x <= 0x0fffffff;\nloop invariant x % 2 == 1 ==> x <= 0xfff0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x % 2 == 1 ==> x < 0xfff0;\n\nloop invariant i5: x % 2 == 1 ==> x <= 0xfff0;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0xffffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 0xffffffff;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant (x < 0xfff0) ==> (x % 2 == 1);\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant (x < 0xfff0) ==> (x + 1 <= 0x0fffffff);\nloop invariant (x >= 0xfff0) ==> (x + 2 <= 0x0fffffff);\nloop invariant (x < 0xfff0) ==> (x + 1 >= 0xfff1);\nloop invariant (x >= 0xfff0) ==> (x + 2 >= 0xfff2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\nloop invariant i4: (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant i5: (x < 0xfff0) ==> (x + 1 <= 0x0fffffff);\n\n\nloop invariant i8: (x >= 0xfff0) ==> (x + 2 >= 0xfff2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0xfffffffe;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x % 2 != 0 ==> x >= 0xfff0 && x < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 1 >= 0xfff1;\nloop invariant x % 2 != 0 ==> x + 2 >= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 1 <= 0xfffffffe;\nloop invariant x % 2 != 0 ==> x + 2 <= 0xfffffffe;\nloop invariant x % 2 == 0 ==> x + 1 < 0x0fffffff;\nloop invariant x % 2 != 0 ==> x + 2 < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 1 % 2 == 0;\nloop invariant x % 2 != 0 ==> x + 2 % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 0xfffffffe;\n\n\n\n\nloop invariant i6: x % 2 == 0 ==> x + 1 <= 0xfffffffe;\nloop invariant i7: x % 2 != 0 ==> x + 2 <= 0xfffffffe;\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 0x0fffffff;\nloop invariant x >= ((x / 2) - 1) * 4096;\nloop invariant x <= ((x / 2) + 1) * 4096;\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant x % 2 == 1 ==> (x >= 1);\nloop invariant x % 2 == 0 ==> (x >= 2);\nloop invariant x % 2 == 1 ==> (x <= 0x0fffffff);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x <= ((x / 2) + 1) * 4096;\nloop invariant i4: x % 2 == 1 ==> (x <= 0x0fffffff);\n\nloop invariant i6: x % 2 == 1 ==> (x >= 1);\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant ( x < 0x0fffffff ==> x % 2 == 0 );\nloop invariant ( x < 0x0fffffff ==> x >= 0x0fff0 );\nloop invariant ( x >= 0x0fffffff ==> x % 2 == 0 );\nloop invariant ( x >= 0x0fffffff ==> x >= 0x0fff0 );\nloop invariant ( x < 0x0fffffff ==> x < 0xfff0 + 2 * (x - 0x0fff0) );\nloop invariant ( x >= 0x0fffffff ==> x >= 0xfff0 + 2 * (x - 0x0fff0) );\nloop invariant ( x < 0x0fffffff ==> x >= 0xfff0 );\nloop invariant ( x >= 0x0fffffff ==> x >= 0xfff0 );\nloop invariant ( x < 0x0fffffff ==> x < 0x0fff0 + 2 * (x - 0x0fff0) );\nloop invariant ( x >= 0x0fffffff ==> x >= 0x0fff0 + 2 * (x - 0x0fff0) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\nloop invariant i4: ( x >= 0x0fffffff ==> x >= 0x0fff0 );\n\n\n\nloop invariant i8: ( x >= 0x0fffffff ==> x >= 0xfff0 );\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x < 0xfff0 ==> x <= x + 1;\nloop invariant x >= 0xfff0 ==> x <= x + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x < 0xfff0 ==> x <= x + 1;\nloop invariant i3: x >= 0xfff0 ==> x <= x + 2;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 63,
                "annotations": "```\n/*@\nloop invariant x % 2 == 0;\nloop invariant x = 0 ==> x % 2 == 0;\nloop invariant x = 1 ==> x % 2 == 1;\nloop invariant x = 2 ==> x % 2 == 0;\nloop invariant x = 3 ==> x % 2 == 1;\nloop invariant x = 4 ==> x % 2 == 0;\nloop invariant x = 5 ==> x % 2 == 1;\nloop invariant x = 6 ==> x % 2 == 0;\nloop invariant x = 7 ==> x % 2 == 1;\nloop invariant x = 8 ==> x % 2 == 0;\nloop invariant x = 9 ==> x % 2 == 1;\nloop invariant x = 10 ==> x % 2 == 0;\nloop invariant x = 11 ==> x % 2 == 1;\nloop invariant x = 12 ==> x % 2 == 0;\nloop invariant x = 13 ==> x % 2 == 1;\nloop invariant x = 14 ==> x % 2 == 0;\nloop invariant x = 15 ==> x % 2 == 1;\nloop invariant x = 16 ==> x % 2 == 0;\nloop invariant x = 17 ==> x % 2 == 1;\nloop invariant x = 18 ==> x % 2 == 0;\nloop invariant x = 19 ==> x % 2 == 1;\nloop invariant x = 20 ==> x % 2 == 0;\nloop invariant x = 21 ==> x % 2 == 1;\nloop invariant x = 22 ==> x % 2 == 0;\nloop invariant x = 23 ==> x % 2 == 1;\nloop invariant x = 24 ==> x % 2 == 0;\nloop invariant x = 25 ==> x % 2 == 1;\nloop invariant x = 26 ==> x % 2 == 0;\nloop invariant x = 27 ==> x % 2 == 1;\nloop invariant x = 28 ==> x % 2 == 0;\nloop invariant x = 29 ==> x % 2 == 1;\nloop invariant x = 30 ==> x % 2 == 0;\nloop invariant x = 31 ==> x % 2 == 1;\nloop invariant x = 32 ==> x % 2 == 0;\nloop invariant x = 33 ==> x % 2 == 1;\nloop invariant x = 34 ==> x % 2 == 0;\nloop invariant x = 35 ==> x % 2 == 1;\nloop invariant x = 36 ==> x % 2 == 0;\nloop invariant x = 37 ==> x % 2 == 1;\nloop invariant x = 38 ==> x % 2 == 0;\nloop invariant x = 39 ==> x % 2 == 1;\nloop invariant x = 40 ==> x % 2 == 0;\nloop invariant x = 41 ==> x % 2 == 1;\nloop invariant x = 42 ==> x % 2 == 0;\nloop invariant x = 43 ==> x % 2 == 1;\nloop invariant x = 44 ==> x % 2 == 0;\nloop invariant x = 45 ==> x % 2 == 1;\nloop invariant x = 46 ==> x % 2 == 0;\nloop invariant x = 47 ==> x % 2 == 1;\nloop invariant x = 48 ==> x % 2 == 0;\nloop invariant x = 49 ==> x % 2 == 1;\nloop invariant x = 50 ==> x % 2 == 0;\nloop invariant x = 51 ==> x % 2 == 1;\nloop invariant x = 52 ==> x % 2 == 0;\nloop invariant x = 53 ==> x % 2 == 1;\nloop invariant x = 54 ==> x % 2 == 0;\nloop invariant x = 55 ==> x % 2 == 1;\nloop invariant x = 56 ==> x % 2 == 0;\nloop invariant x = 57 ==> x % 2 == 1;\nloop invariant x = 58 ==> x % 2 == 0;\nloop invariant x = 59 ==> x % 2 == 1;\nloop invariant x = 60 ==> x % 2 == 0;\nloop invariant x = 61 ==> x % 2 == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 1;\nloop invariant x >= 0xfff0;\nloop invariant x < 0x0fffffff + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\nloop invariant i4: x < 0x0fffffff + 2;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * (x / 2);\nloop invariant x <= 2 * (x / 2) + 1;\nloop invariant x - 2 * (x / 2) <= 1;\nloop invariant x - 2 * (x / 2) >= 0;\nloop invariant x % 2 == 0 ==> (x >= 0xfff0 ==> x < 0xfffffffe);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0xfffffffe);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) <= 1);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 2 * (x / 2) + 1);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 2 * (x / 2));\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x >= 2 * (x / 2);\nloop invariant i4: x <= 2 * (x / 2) + 1;\nloop invariant i5: x - 2 * (x / 2) <= 1;\nloop invariant i6: x - 2 * (x / 2) >= 0;\nloop invariant i7: x % 2 == 0 ==> (x >= 0xfff0 ==> x < 0xfffffffe);\nloop invariant i8: x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant i9: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0xfffffffe);\nloop invariant i10: x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) >= 0);\nloop invariant i11: x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) <= 1);\nloop invariant i12: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 2 * (x / 2) + 1);\nloop invariant i13: x % 2 == 0 ==> (x < 0xfff0 ==> x >= 2 * (x / 2));\nloop invariant i14: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 != 0 ==> x < 0xfff0;\nloop invariant (x % 2 == 0) || (x % 2 != 0);\nloop invariant (x % 2 == 0) ==> x % 2 == 0;\nloop invariant (x % 2 != 0) ==> x % 2 != 0;\nloop invariant (x % 2 == 0) ==> (x % 2 == 0 && x >= 0xfff0);\nloop invariant (x % 2 != 0) ==> (x % 2 != 0 && x < 0xfff0);\nloop invariant x % 2 == 0 ==> x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 != 0 ==> x % 2 != 0 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0);\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0);\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0))));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)))));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0))))));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))))));\nloop invariant x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)))))));\nloop invariant x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))))));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: x % 2 != 0 ==> x < 0xfff0;\nloop invariant i5: (x % 2 == 0) || (x % 2 != 0);\nloop invariant i6: (x % 2 == 0) ==> x % 2 == 0;\nloop invariant i7: (x % 2 != 0) ==> x % 2 != 0;\n\nloop invariant i9: (x % 2 != 0) ==> (x % 2 != 0 && x < 0xfff0);\n\nloop invariant i11: x % 2 != 0 ==> x % 2 != 0 ==> x < 0xfff0;\n\nloop invariant i13: x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0);\n\nloop invariant i15: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0));\n\nloop invariant i17: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)));\n\nloop invariant i19: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))));\n\nloop invariant i21: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))));\n\nloop invariant i23: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))))));\n\nloop invariant i25: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))))));\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant if (x < 0xfff0) { x <= (2 * (x - 1) + 1); } else { x <= (2 * (x - 0xfff0) + 0xfff0 + 1); };\nloop invariant if (x < 0xfff0) { x >= (2 * (x - 0xfff0) + 0xfff0 + 1); } else { x >= (2 * (x - 1) + 1); };\nloop invariant ((x % 2) == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 64: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 0x0fffffff;\nloop invariant i2: x % 2 == 0;\nloop invariant i3: x <= 0x1fffffff;\nloop invariant i4: x % 2 == 0 ==> x < 0xfff0;\nloop invariant i5: x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i6: x >= 0;\nloop invariant i7: x < 0xfffff0 ==> x % 2 == 1;\nloop invariant i8: x >= 0xfffff0 ==> x % 2 == 0;\nloop invariant i9: x >= 0xfffff0 ==> x % 2 == 1 ==> x >= 0xfffff0 + 1;\nloop invariant i10: x >= 0xfffff0 ==> x % 2 == 0 ==> x >= 0xfffff0 + 2;\nloop invariant i11: (x < 0xfff0) ==> (x % 2 == 0);\nloop invariant i12: (x >= 0xfff0) ==> (x % 2 == 1);\nloop invariant i13: x % 2 == 0 ==> x >= 0xfff0;\nloop invariant i14: x % 2 == 1 ==> x < 0xfff0;\nloop invariant i15: x % 2 == 0 ==> x <= 0x0fffffff;\nloop invariant i16: x % 2 == 1 ==> x <= 0xfff0;\nloop invariant i17: !(x % 2) ==> x >= 0xfff0;\nloop invariant i18: 0 <= x <= 0xffffffff;\nloop invariant i19: (x < 0xfff0) ==> (x % 2 == 1);\nloop invariant i20: (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant i21: (x < 0xfff0) ==> (x + 1 <= 0x0fffffff);\nloop invariant i22: (x >= 0xfff0) ==> (x + 2 <= 0x0fffffff);\nloop invariant i23: (x < 0xfff0) ==> (x + 1 >= 0xfff1);\nloop invariant i24: (x >= 0xfff0) ==> (x + 2 >= 0xfff2);\nloop invariant i25: 0 <= x <= 0xfffffffe;\nloop invariant i26: x % 2 != 0 ==> x >= 0xfff0 && x < 0x0fffffff;\nloop invariant i27: x % 2 == 0 ==> x + 1 >= 0xfff1;\nloop invariant i28: x % 2 != 0 ==> x + 2 >= 0x0fffffff;\nloop invariant i29: x % 2 == 0 ==> x + 1 <= 0xfffffffe;\nloop invariant i30: x % 2 != 0 ==> x + 2 <= 0xfffffffe;\nloop invariant i31: x % 2 == 0 ==> x + 1 < 0x0fffffff;\nloop invariant i32: x % 2 != 0 ==> x + 2 < 0x0fffffff;\nloop invariant i33: x % 2 == 0 ==> x + 1 % 2 == 0;\nloop invariant i34: x % 2 != 0 ==> x + 2 % 2 == 0;\nloop invariant i35: 1 <= x <= 0x0fffffff;\nloop invariant i36: x >= ((x / 2) - 1) * 4096;\nloop invariant i37: x <= ((x / 2) + 1) * 4096;\nloop invariant i38: x % 2 == 1 ==> (x <= 0x0fffffff);\nloop invariant i39: x % 2 == 0 ==> (x <= 0x0fffffff);\nloop invariant i40: x % 2 == 1 ==> (x >= 1);\nloop invariant i41: x % 2 == 0 ==> (x >= 2);\nloop invariant i42: ( x < 0x0fffffff ==> x % 2 == 0 );\nloop invariant i43: ( x < 0x0fffffff ==> x >= 0x0fff0 );\nloop invariant i44: ( x >= 0x0fffffff ==> x % 2 == 0 );\nloop invariant i45: ( x >= 0x0fffffff ==> x >= 0x0fff0 );\nloop invariant i46: ( x < 0x0fffffff ==> x < 0xfff0 + 2 * (x - 0x0fff0) );\nloop invariant i47: ( x >= 0x0fffffff ==> x >= 0xfff0 + 2 * (x - 0x0fff0) );\nloop invariant i48: ( x < 0x0fffffff ==> x >= 0xfff0 );\nloop invariant i49: ( x >= 0x0fffffff ==> x >= 0xfff0 );\nloop invariant i50: ( x < 0x0fffffff ==> x < 0x0fff0 + 2 * (x - 0x0fff0) );\nloop invariant i51: ( x >= 0x0fffffff ==> x >= 0x0fff0 + 2 * (x - 0x0fff0) );\nloop invariant i52: x < 0xfff0 ==> x <= x + 1;\nloop invariant i53: x >= 0xfff0 ==> x <= x + 2;\nloop invariant i54: x = 0 ==> x % 2 == 0;\nloop invariant i55: x = 1 ==> x % 2 == 1;\nloop invariant i56: x = 2 ==> x % 2 == 0;\nloop invariant i57: x = 3 ==> x % 2 == 1;\nloop invariant i58: x = 4 ==> x % 2 == 0;\nloop invariant i59: x = 5 ==> x % 2 == 1;\nloop invariant i60: x = 6 ==> x % 2 == 0;\nloop invariant i61: x = 7 ==> x % 2 == 1;\nloop invariant i62: x = 8 ==> x % 2 == 0;\nloop invariant i63: x = 9 ==> x % 2 == 1;\nloop invariant i64: x = 10 ==> x % 2 == 0;\nloop invariant i65: x = 11 ==> x % 2 == 1;\nloop invariant i66: x = 12 ==> x % 2 == 0;\nloop invariant i67: x = 13 ==> x % 2 == 1;\nloop invariant i68: x = 14 ==> x % 2 == 0;\nloop invariant i69: x = 15 ==> x % 2 == 1;\nloop invariant i70: x = 16 ==> x % 2 == 0;\nloop invariant i71: x = 17 ==> x % 2 == 1;\nloop invariant i72: x = 18 ==> x % 2 == 0;\nloop invariant i73: x = 19 ==> x % 2 == 1;\nloop invariant i74: x = 20 ==> x % 2 == 0;\nloop invariant i75: x = 21 ==> x % 2 == 1;\nloop invariant i76: x = 22 ==> x % 2 == 0;\nloop invariant i77: x = 23 ==> x % 2 == 1;\nloop invariant i78: x = 24 ==> x % 2 == 0;\nloop invariant i79: x = 25 ==> x % 2 == 1;\nloop invariant i80: x = 26 ==> x % 2 == 0;\nloop invariant i81: x = 27 ==> x % 2 == 1;\nloop invariant i82: x = 28 ==> x % 2 == 0;\nloop invariant i83: x = 29 ==> x % 2 == 1;\nloop invariant i84: x = 30 ==> x % 2 == 0;\nloop invariant i85: x = 31 ==> x % 2 == 1;\nloop invariant i86: x = 32 ==> x % 2 == 0;\nloop invariant i87: x = 33 ==> x % 2 == 1;\nloop invariant i88: x = 34 ==> x % 2 == 0;\nloop invariant i89: x = 35 ==> x % 2 == 1;\nloop invariant i90: x = 36 ==> x % 2 == 0;\nloop invariant i91: x = 37 ==> x % 2 == 1;\nloop invariant i92: x = 38 ==> x % 2 == 0;\nloop invariant i93: x = 39 ==> x % 2 == 1;\nloop invariant i94: x = 40 ==> x % 2 == 0;\nloop invariant i95: x = 41 ==> x % 2 == 1;\nloop invariant i96: x = 42 ==> x % 2 == 0;\nloop invariant i97: x = 43 ==> x % 2 == 1;\nloop invariant i98: x = 44 ==> x % 2 == 0;\nloop invariant i99: x = 45 ==> x % 2 == 1;\nloop invariant i100: x = 46 ==> x % 2 == 0;\nloop invariant i101: x = 47 ==> x % 2 == 1;\nloop invariant i102: x = 48 ==> x % 2 == 0;\nloop invariant i103: x = 49 ==> x % 2 == 1;\nloop invariant i104: x = 50 ==> x % 2 == 0;\nloop invariant i105: x = 51 ==> x % 2 == 1;\nloop invariant i106: x = 52 ==> x % 2 == 0;\nloop invariant i107: x = 53 ==> x % 2 == 1;\nloop invariant i108: x = 54 ==> x % 2 == 0;\nloop invariant i109: x = 55 ==> x % 2 == 1;\nloop invariant i110: x = 56 ==> x % 2 == 0;\nloop invariant i111: x = 57 ==> x % 2 == 1;\nloop invariant i112: x = 58 ==> x % 2 == 0;\nloop invariant i113: x = 59 ==> x % 2 == 1;\nloop invariant i114: x = 60 ==> x % 2 == 0;\nloop invariant i115: x = 61 ==> x % 2 == 1;\nloop invariant i116: x % 2 == 1;\nloop invariant i117: x >= 0xfff0;\nloop invariant i118: x < 0x0fffffff + 2;\nloop invariant i119: x >= 2 * (x / 2);\nloop invariant i120: x <= 2 * (x / 2) + 1;\nloop invariant i121: x - 2 * (x / 2) <= 1;\nloop invariant i122: x - 2 * (x / 2) >= 0;\nloop invariant i123: x % 2 == 0 ==> (x >= 0xfff0 ==> x < 0xfffffffe);\nloop invariant i124: x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant i125: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0xfffffffe);\nloop invariant i126: x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) >= 0);\nloop invariant i127: x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) <= 1);\nloop invariant i128: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 2 * (x / 2) + 1);\nloop invariant i129: x % 2 == 0 ==> (x < 0xfff0 ==> x >= 2 * (x / 2));\nloop invariant i130: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\nloop invariant i131: x < 0x0fffffff;\nloop invariant i132: x % 2 != 0 ==> x < 0xfff0;\nloop invariant i133: (x % 2 == 0) || (x % 2 != 0);\nloop invariant i134: (x % 2 == 0) ==> x % 2 == 0;\nloop invariant i135: (x % 2 != 0) ==> x % 2 != 0;\nloop invariant i136: (x % 2 == 0) ==> (x % 2 == 0 && x >= 0xfff0);\nloop invariant i137: (x % 2 != 0) ==> (x % 2 != 0 && x < 0xfff0);\nloop invariant i138: x % 2 == 0 ==> x % 2 == 0 ==> x >= 0xfff0;\nloop invariant i139: x % 2 != 0 ==> x % 2 != 0 ==> x < 0xfff0;\nloop invariant i140: x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0);\nloop invariant i141: x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0);\nloop invariant i142: x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0));\nloop invariant i143: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0));\nloop invariant i144: x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)));\nloop invariant i145: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)));\nloop invariant i146: x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0))));\nloop invariant i147: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))));\nloop invariant i148: x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)))));\nloop invariant i149: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))));\nloop invariant i150: x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0))))));\nloop invariant i151: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))))));\nloop invariant i152: x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> (x % 2 == 0 ==> x >= 0xfff0)))))));\nloop invariant i153: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))))));\nloop invariant i154: if (x < 0xfff0) { x <= (2 * (x - 1) + 1); } else { x <= (2 * (x - 0xfff0) + 0xfff0 + 1); };\nloop invariant i155: if (x < 0xfff0) { x >= (2 * (x - 0xfff0) + 0xfff0 + 1); } else { x >= (2 * (x - 1) + 1); };\nloop invariant i156: ((x % 2) == 0);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 108,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x <= 0x1fffffff;\n\n\nloop invariant i6: x >= 0;\n\nloop invariant i8: x >= 0xfffff0 ==> x % 2 == 0;\nloop invariant i9: x >= 0xfffff0 ==> x % 2 == 1 ==> x >= 0xfffff0 + 1;\n\n\n\n\nloop invariant i14: x % 2 == 1 ==> x < 0xfff0;\n\nloop invariant i16: x % 2 == 1 ==> x <= 0xfff0;\n\nloop invariant i18: 0 <= x <= 0xffffffff;\n\nloop invariant i20: (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant i21: (x < 0xfff0) ==> (x + 1 <= 0x0fffffff);\n\n\nloop invariant i24: (x >= 0xfff0) ==> (x + 2 >= 0xfff2);\nloop invariant i25: 0 <= x <= 0xfffffffe;\n\n\n\nloop invariant i29: x % 2 == 0 ==> x + 1 <= 0xfffffffe;\nloop invariant i30: x % 2 != 0 ==> x + 2 <= 0xfffffffe;\n\nloop invariant i32: x % 2 != 0 ==> x + 2 < 0x0fffffff;\n\n\n\n\nloop invariant i37: x <= ((x / 2) + 1) * 4096;\nloop invariant i38: x % 2 == 1 ==> (x <= 0x0fffffff);\n\nloop invariant i40: x % 2 == 1 ==> (x >= 1);\n\n\n\nloop invariant i44: ( x >= 0x0fffffff ==> x % 2 == 0 );\nloop invariant i45: ( x >= 0x0fffffff ==> x >= 0x0fff0 );\n\n\n\nloop invariant i49: ( x >= 0x0fffffff ==> x >= 0xfff0 );\n\n\nloop invariant i52: x < 0xfff0 ==> x <= x + 1;\nloop invariant i53: x >= 0xfff0 ==> x <= x + 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i118: x < 0x0fffffff + 2;\nloop invariant i119: x >= 2 * (x / 2);\nloop invariant i120: x <= 2 * (x / 2) + 1;\nloop invariant i121: x - 2 * (x / 2) <= 1;\nloop invariant i122: x - 2 * (x / 2) >= 0;\nloop invariant i123: x % 2 == 0 ==> (x >= 0xfff0 ==> x < 0xfffffffe);\nloop invariant i124: x % 2 == 0 ==> (x < 0xfff0 ==> x >= 0);\nloop invariant i125: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0xfffffffe);\nloop invariant i126: x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) >= 0);\nloop invariant i127: x % 2 == 0 ==> (x < 0xfff0 ==> x - 2 * (x / 2) <= 1);\nloop invariant i128: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 2 * (x / 2) + 1);\nloop invariant i129: x % 2 == 0 ==> (x < 0xfff0 ==> x >= 2 * (x / 2));\nloop invariant i130: x % 2 == 0 ==> (x < 0xfff0 ==> x <= 0x0fffffff);\n\nloop invariant i132: x % 2 != 0 ==> x < 0xfff0;\nloop invariant i133: (x % 2 == 0) || (x % 2 != 0);\nloop invariant i134: (x % 2 == 0) ==> x % 2 == 0;\nloop invariant i135: (x % 2 != 0) ==> x % 2 != 0;\n\nloop invariant i137: (x % 2 != 0) ==> (x % 2 != 0 && x < 0xfff0);\n\nloop invariant i139: x % 2 != 0 ==> x % 2 != 0 ==> x < 0xfff0;\n\nloop invariant i141: x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0);\n\nloop invariant i143: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0));\n\nloop invariant i145: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)));\n\nloop invariant i147: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))));\n\nloop invariant i149: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))));\n\nloop invariant i151: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0))))));\n\nloop invariant i153: x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> (x % 2 != 0 ==> x < 0xfff0)))))));\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 88,
        "success_count": 76,
        "failure_count": 12,
        "success_rate": 0.8636363636363636
    }
}