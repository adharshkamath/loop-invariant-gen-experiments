{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/127.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= y;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant (x != 0) ==> (x == i - y);\nloop invariant (x != 0) ==> (y == j - x);\nloop invariant (x == 0) ==> (x == i - j);\nloop invariant (x == 0) ==> (y == j - i);\nloop invariant (x != 0) ==> (x > 0);\nloop invariant (x != 0) ==> (x < i);\nloop invariant (x != 0) ==> (y > 0);\nloop invariant (x != 0) ==> (y < j);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant i >= x;\nloop invariant j <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j);\nloop invariant y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant i >= j;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= i;\nloop invariant x <= i;\nloop invariant i <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= y;\nloop invariant y >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= j - i;\nloop invariant x >= i - j;\nloop invariant y >= i - j;\nloop invariant y >= j - i;\nloop invariant x >= y;\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant y <= x;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x + y == i + j ==> (y != 0) ==> (i != j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j; loop invariant 0 <= y <= x; loop invariant z1 = i + j; loop invariant z2 = y + x; loop invariant z3 = z1 + z2; loop invariant z1 == z2 ==> i == j; loop invariant z1 != z2 ==> i != j; loop invariant z1 == z2 ==> z3 == z1 + z2; loop invariant z1 != z2 ==> z3 == z1 + z2; loop invariant z3 == z1 + z2 ==> i == j; loop invariant z3 != z1 + z2 ==> i != j; loop invariant z3 == z1 + z2 ==> (i == j ==> i == y); loop invariant z3 != z1 + z2 ==> (i != j ==> i != y); loop invariant z3 == z1 + z2 ==> (i == j ==> j == x); loop invariant z3 != z1 + z2 ==> (i != j ==> j != x); loop invariant z3 == z1 + z2 ==> (i == j ==> i == x); loop invariant z3 != z1 + z2 ==> (i != j ==> i != x); loop invariant z3 == z1 + z2 ==> (i == j ==> j == y); loop invariant z3 != z1 + z2 ==> (i != j ==> j != y);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant i == j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i >= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == j - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x <= i - y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= y;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant (x != 0) ==> (x == i - y);\nloop invariant (x != 0) ==> (y == j - x);\nloop invariant (x == 0) ==> (x == i - j);\nloop invariant (x == 0) ==> (y == j - i);\nloop invariant (x != 0) ==> (x > 0);\nloop invariant (x != 0) ==> (x < i);\nloop invariant (x != 0) ==> (y > 0);\nloop invariant (x != 0) ==> (y < j);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x != 0) ==> (x != 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 0) ==> (x == 0);\nloop invariant (x == 0) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x <= i;\nloop invariant i8: y <= j;\n\n\n\n\n\n\n\n\nloop invariant i17: (x == 0) ==> (x == 0);\n\nloop invariant i19: (x != 0) ==> (x != 0);\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x <= i;\nloop invariant i7: y <= j;\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant i >= x;\nloop invariant j <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\nloop invariant i2: i >= x;\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x == (i - j);\nloop invariant y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\nloop invariant i3: x <= i;\nloop invariant i4: y <= j;\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant i >= j;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= i;\nloop invariant x <= i;\nloop invariant i <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x <= i;\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= y;\nloop invariant y >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= j - i;\nloop invariant x >= i - j;\nloop invariant y >= i - j;\nloop invariant y >= j - i;\nloop invariant x >= y;\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant y <= x;\nloop invariant x + y == i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x + y == i + j ==> (y != 0) ==> (i != j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j; loop invariant 0 <= y <= x; loop invariant z1 = i + j; loop invariant z2 = y + x; loop invariant z3 = z1 + z2; loop invariant z1 == z2 ==> i == j; loop invariant z1 != z2 ==> i != j; loop invariant z1 == z2 ==> z3 == z1 + z2; loop invariant z1 != z2 ==> z3 == z1 + z2; loop invariant z3 == z1 + z2 ==> i == j; loop invariant z3 != z1 + z2 ==> i != j; loop invariant z3 == z1 + z2 ==> (i == j ==> i == y); loop invariant z3 != z1 + z2 ==> (i != j ==> i != y); loop invariant z3 == z1 + z2 ==> (i == j ==> j == x); loop invariant z3 != z1 + z2 ==> (i != j ==> j != x); loop invariant z3 == z1 + z2 ==> (i == j ==> i == x); loop invariant z3 != z1 + z2 ==> (i != j ==> i != x); loop invariant z3 == z1 + z2 ==> (i == j ==> j == y); loop invariant z3 != z1 + z2 ==> (i != j ==> j != y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant i == j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\nloop invariant z2 == j;\nloop invariant z3 == i;\nloop invariant z1 == j;\nloop invariant z2 == 0;\nloop invariant z3 == 0;\nloop invariant z1 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant i >= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == j - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x <= i - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 223: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= y <= j;\nloop invariant i3: x >= y;\nloop invariant i4: x + y == i + j;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: x <= i;\nloop invariant i8: y <= j;\nloop invariant i9: (x != 0) ==> (x == i - y);\nloop invariant i10: (x != 0) ==> (y == j - x);\nloop invariant i11: (x == 0) ==> (x == i - j);\nloop invariant i12: (x == 0) ==> (y == j - i);\nloop invariant i13: (x != 0) ==> (x > 0);\nloop invariant i14: (x != 0) ==> (x < i);\nloop invariant i15: (x != 0) ==> (y > 0);\nloop invariant i16: (x != 0) ==> (y < j);\nloop invariant i17: (x == 0) ==> (x == 0);\nloop invariant i18: (x == 0) ==> (y == 0);\nloop invariant i19: (x != 0) ==> (x != 0);\nloop invariant i20: (x != 0) ==> (y != 0);\nloop invariant i21: 1 <= x <= y;\nloop invariant i22: i == x;\nloop invariant i23: j == y;\nloop invariant i24: i1;\nloop invariant i25: i2;\nloop invariant i26: i3;\nloop invariant i27: i4;\nloop invariant i28: i5;\nloop invariant i29: i6;\nloop invariant i30: i7;\nloop invariant i31: i8;\nloop invariant i32: i9;\nloop invariant i33: i10;\nloop invariant i34: i11;\nloop invariant i35: i12;\nloop invariant i36: i13;\nloop invariant i37: i14;\nloop invariant i38: i15;\nloop invariant i39: i16;\nloop invariant i40: i17;\nloop invariant i41: i18;\nloop invariant i42: i19;\nloop invariant i43: i20;\nloop invariant i44: i21;\nloop invariant i45: i22;\nloop invariant i46: i23;\nloop invariant i47: i24;\nloop invariant i48: i25;\nloop invariant i49: i26;\nloop invariant i50: i27;\nloop invariant i51: i28;\nloop invariant i52: i29;\nloop invariant i53: i30;\nloop invariant i54: i31;\nloop invariant i55: i32;\nloop invariant i56: i33;\nloop invariant i57: i34;\nloop invariant i58: i35;\nloop invariant i59: i36;\nloop invariant i60: i37;\nloop invariant i61: i38;\nloop invariant i62: i39;\nloop invariant i63: i40;\nloop invariant i64: i41;\nloop invariant i65: i42;\nloop invariant i66: i43;\nloop invariant i67: i44;\nloop invariant i68: i45;\nloop invariant i69: i46;\nloop invariant i70: i47;\nloop invariant i71: i48;\nloop invariant i72: i49;\nloop invariant i73: i50;\nloop invariant i74: i51;\nloop invariant i75: i52;\nloop invariant i76: i53;\nloop invariant i77: i54;\nloop invariant i78: i55;\nloop invariant i79: i56;\nloop invariant i80: i57;\nloop invariant i81: i58;\nloop invariant i82: i59;\nloop invariant i83: i60;\nloop invariant i84: i61;\nloop invariant i85: i62;\nloop invariant i86: i63;\nloop invariant i87: i64;\nloop invariant i88: i65;\nloop invariant i89: i66;\nloop invariant i90: i67;\nloop invariant i91: i68;\nloop invariant i92: i69;\nloop invariant i93: i70;\nloop invariant i94: i71;\nloop invariant i95: i72;\nloop invariant i96: i73;\nloop invariant i97: i74;\nloop invariant i98: i75;\nloop invariant i99: i76;\nloop invariant i100: i77;\nloop invariant i101: i78;\nloop invariant i102: i79;\nloop invariant i103: i80;\nloop invariant i104: i81;\nloop invariant i105: i82;\nloop invariant i106: i83;\nloop invariant i107: i84;\nloop invariant i108: i85;\nloop invariant i109: i86;\nloop invariant i110: i87;\nloop invariant i111: i88;\nloop invariant i112: i89;\nloop invariant i113: i90;\nloop invariant i114: i91;\nloop invariant i115: i92;\nloop invariant i116: i93;\nloop invariant i117: i94;\nloop invariant i118: i95;\nloop invariant i119: i96;\nloop invariant i120: i97;\nloop invariant i121: i98;\nloop invariant i122: i99;\nloop invariant i123: i100;\nloop invariant i124: i101;\nloop invariant i125: i102;\nloop invariant i126: i103;\nloop invariant i127: i104;\nloop invariant i128: i105;\nloop invariant i129: i106;\nloop invariant i130: i107;\nloop invariant i131: i108;\nloop invariant i132: i109;\nloop invariant i133: i110;\nloop invariant i134: i111;\nloop invariant i135: i112;\nloop invariant i136: i113;\nloop invariant i137: i114;\nloop invariant i138: i115;\nloop invariant i139: i116;\nloop invariant i140: i117;\nloop invariant i141: i118;\nloop invariant i142: i119;\nloop invariant i143: i120;\nloop invariant i144: i121;\nloop invariant i145: i122;\nloop invariant i146: i123;\nloop invariant i147: i124;\nloop invariant i148: i125;\nloop invariant i149: i126;\nloop invariant i150: i127;\nloop invariant i151: i128;\nloop invariant i152: i129;\nloop invariant i153: i130;\nloop invariant i154: i131;\nloop invariant i155: i132;\nloop invariant i156: i133;\nloop invariant i157: i134;\nloop invariant i158: i135;\nloop invariant i159: i136;\nloop invariant i160: i137;\nloop invariant i161: i138;\nloop invariant i162: i139;\nloop invariant i163: i140;\nloop invariant i164: i141;\nloop invariant i165: i142;\nloop invariant i166: i143;\nloop invariant i167: i144;\nloop invariant i168: i145;\nloop invariant i169: i146;\nloop invariant i170: i147;\nloop invariant i171: i148;\nloop invariant i172: i149;\nloop invariant i173: i150;\nloop invariant i174: i151;\nloop invariant i175: i152;\nloop invariant i176: i153;\nloop invariant i177: i154;\nloop invariant i178: i155;\nloop invariant i179: i156;\nloop invariant i180: i157;\nloop invariant i181: i158;\nloop invariant i182: 0 <= y <= x;\nloop invariant i183: i >= x;\nloop invariant i184: j <= y;\nloop invariant i185: x == (i - j);\nloop invariant i186: y == 0;\nloop invariant i187: 1 <= i <= 100000;\nloop invariant i188: 0 <= j <= 100000;\nloop invariant i189: i >= j;\nloop invariant i190: y <= i;\nloop invariant i191: i <= 100000;\nloop invariant i192: 0 <= x <= y;\nloop invariant i193: y >= i;\nloop invariant i194: x >= j - i;\nloop invariant i195: x >= i - j;\nloop invariant i196: y >= i - j;\nloop invariant i197: y >= j - i;\nloop invariant i198: y >= x;\nloop invariant i199: y <= x;\nloop invariant i200: i >= 0;\nloop invariant i201: j >= 0;\nloop invariant i202: x + y == i + j ==> (y != 0) ==> (i != j);\nloop invariant i203: 0 <= i <= j; loop invariant 0 <= y <= x; loop invariant z1 = i + j; loop invariant z2 = y + x; loop invariant z3 = z1 + z2; loop invariant z1 == z2 ==> i == j; loop invariant z1 != z2 ==> i != j; loop invariant z1 == z2 ==> z3 == z1 + z2; loop invariant z1 != z2 ==> z3 == z1 + z2; loop invariant z3 == z1 + z2 ==> i == j; loop invariant z3 != z1 + z2 ==> i != j; loop invariant z3 == z1 + z2 ==> (i == j ==> i == y); loop invariant z3 != z1 + z2 ==> (i != j ==> i != y); loop invariant z3 == z1 + z2 ==> (i == j ==> j == x); loop invariant z3 != z1 + z2 ==> (i != j ==> j != x); loop invariant z3 == z1 + z2 ==> (i == j ==> i == x); loop invariant z3 != z1 + z2 ==> (i != j ==> i != x); loop invariant z3 == z1 + z2 ==> (i == j ==> j == y); loop invariant z3 != z1 + z2 ==> (i != j ==> j != y);\nloop invariant i204: 0 <= i <= 100000;\nloop invariant i205: x >= (1 + (y - 1) * y / 2);\nloop invariant i206: i == j;\nloop invariant i207: 0 <= i <= j;\nloop invariant i208: x == i;\nloop invariant i209: y == j;\nloop invariant i210: z1 == j;\nloop invariant i211: z2 == 0;\nloop invariant i212: z3 == 0;\nloop invariant i213: z1 == 0;\nloop invariant i214: z2 == j;\nloop invariant i215: z3 == i;\nloop invariant i216: y == j - x;\nloop invariant i217: x <= i - y;\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 175,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x <= i;\nloop invariant i8: y <= j;\n\n\n\n\n\n\n\n\nloop invariant i17: (x == 0) ==> (x == 0);\n\nloop invariant i19: (x != 0) ==> (x != 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i183: i >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c"
        ],
        "skipped": [],
        "total": 4,
        "success_count": 1,
        "failure_count": 3,
        "success_rate": 0.25
    }
}