{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  while (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= low <= high;\nloop invariant 0 <= mid <= high;\nloop invariant low + mid + high == 3 * mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= high;\nloop invariant 0 <= low <= high;\nloop invariant low <= high;\nloop invariant low + mid <= high;\nloop invariant low <= high - mid;\nloop invariant 0 <= mid <= high;\nloop invariant 0 <= low <= high;\nloop invariant low <= high;\nloop invariant low + mid <= high;\nloop invariant low <= high - mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= high;\nloop invariant low >= high - mid;\nloop invariant low >= 0;\nloop invariant mid >= 0;\nloop invariant high >= mid;\nloop invariant high >= 0;\n*/\n```",
            "```\n/*@\nloop invariant low <= high;\nloop invariant low < high ==> mid == 0;\nloop invariant low + mid == high;\nloop invariant low + mid + high == 2 * high;\n*/\n```",
            "```\n/*@\nloop invariant low >= high;\nloop invariant low <= high + mid;\nloop invariant mid >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= low <= high;\nloop invariant mid <= high;\nloop invariant low <= mid;\nloop invariant mid <= high;\nloop invariant mid <= high;\nloop invariant mid <= high;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= high;\nloop invariant 0 <= low <= high;\nloop invariant low == mid + high - 1;\nloop invariant low >= 0;\nloop invariant mid >= 0;\nloop invariant high >= 0;\nloop invariant high <= 2*mid;\nloop invariant low <= high;\nloop invariant mid <= high;\nloop invariant low <= high - mid + 1;\nloop invariant low >= high - 2*mid + 1;\nloop invariant low <= 2*mid - 1;\nloop invariant mid <= 2*mid - 1;\nloop invariant high <= 2*mid - 1;\nloop invariant low <= 2*mid - 2;\nloop invariant mid <= 2*mid - 2;\nloop invariant high <= 2*mid - 2;\nloop invariant low <= 2*mid - 3;\nloop invariant mid <= 2*mid - 3;\nloop invariant high <= 2*mid - 3;\nloop invariant low <= 2*mid - 4;\nloop invariant mid <= 2*mid - 4;\nloop invariant high <= 2*mid - 4;\nloop invariant low <= 2*mid - 5;\nloop invariant mid <= 2*mid - 5;\nloop invariant high <= 2*mid - 5;\nloop invariant low <= 2*mid - 6;\nloop invariant mid <= 2*mid - 6;\nloop invariant high <= 2*mid - 6;\nloop invariant low <= 2*mid - 7;\nloop invariant mid <= 2*mid - 7;\nloop invariant high <= 2*mid - 7;\nloop invariant low <= 2*mid - 8;\nloop invariant mid <= 2*mid - 8;\nloop invariant high <= 2*mid - 8;\nloop invariant low <= 2*mid - 9;\nloop invariant mid <= 2*mid - 9;\nloop invariant high <= 2*mid - 9;\nloop invariant low <= 2*mid - 10;\nloop invariant mid <= 2*mid - 10;\nloop invariant high <= 2*mid - 10;\nloop invariant low <= 2*mid - 11;\nloop invariant mid <= 2*mid - 11;\nloop invariant high <= 2*mid - 11;\nloop invariant low <= 2*mid - 12;\nloop invariant mid <= 2*mid - 12;\nloop invariant high <= 2*mid - 12;\nloop invariant low <= 2*mid - 13;\nloop invariant mid <= 2*mid - 13;\nloop invariant high <= 2*mid - 13;\nloop invariant low <= 2*mid - 14;\nloop invariant mid <= 2*mid - 14;\nloop invariant high <= 2*mid - 14;\nloop invariant low <= 2*mid - 15;\nloop invariant mid <= 2*mid - 15;\nloop invariant high <= 2*mid - 15;\nloop invariant low <= 2*mid - 16;\nloop invariant mid <= 2*mid - 16;\nloop invariant high <= 2*mid - 16;\nloop invariant low <= 2*mid - 17;\nloop invariant mid <= 2*mid - 17;\nloop invariant high <= 2*mid - 17;\nloop invariant low <= 2*mid - 18;\nloop invariant mid <= 2*mid - 18;\nloop invariant high <= 2*mid - 18;\nloop invariant low <= 2*mid - 19;\nloop invariant mid <= 2*mid - 19;\nloop invariant high <= 2*mid - 19;\nloop invariant low <= 2*mid - 20;\nloop invariant mid <= 2*mid - 20;\nloop invariant high <= 2*mid - 20;\nloop invariant low <= 2*mid - 21;\nloop invariant mid <= 2*mid - 21;\nloop invariant high <= 2*mid - 21;\nloop invariant low <= 2*mid - 22;\nloop invariant mid <= 2*mid - 22;\nloop invariant high <= 2*mid - 22;\nloop invariant low <= 2*mid - 23;\nloop invariant mid <= 2*mid - 23;\nloop invariant high <= 2*mid - 23;\nloop invariant low <= 2*mid - 24;\nloop invariant mid <= 2*mid - 24;\n*/\n```",
            "```\n/*@\nloop invariant low <= high;\nloop invariant low <= mid;\nloop invariant mid <= high;\nloop invariant low >= 0;\nloop invariant mid >= 1;\nloop invariant high >= 2*mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= low <= high;\nloop invariant low + mid + high = 3 * mid;\nloop invariant mid >= 1;\nloop invariant high - low = mid;\nloop invariant high - mid >= 0;\nloop invariant low - mid <= 0;\nloop invariant low <= high - mid;\nloop invariant low >= mid - high;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= low <= high <= 2 * mid;\nloop invariant low == mid + 1;\nloop invariant high == mid + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= high / 2;\nloop invariant low + mid == high;\nloop invariant low >= 0;\nloop invariant mid >= 0;\nloop invariant high >= 1;\nloop invariant low <= high;\nloop invariant mid <= high / 2;\nloop invariant low <= mid;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= low <= high;\nloop invariant 0 <= mid <= high;\nloop invariant low == high - mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= low <= 2*mid;\nloop invariant mid >= 1;\nloop invariant high == 2*mid;\nloop invariant low + high == 2*mid;\nloop invariant low - high == 0;\nloop invariant low == high;\nloop invariant low == mid;\nloop invariant high == 2*mid;\nloop invariant low == 2*mid;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= low <= mid + 1;\nloop invariant mid <= high <= 2 * mid;\nloop invariant mid >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= low <= high;\nloop invariant 0 <= mid <= high;\nloop invariant low + mid + high == 3 * mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\nloop invariant i2: 0 <= mid <= high;\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= high;\nloop invariant 0 <= low <= high;\nloop invariant low <= high;\nloop invariant low + mid <= high;\nloop invariant low <= high - mid;\nloop invariant 0 <= mid <= high;\nloop invariant 0 <= low <= high;\nloop invariant low <= high;\nloop invariant low + mid <= high;\nloop invariant low <= high - mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: 0 <= mid <= high;\n\n\n\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= high;\nloop invariant low >= high - mid;\nloop invariant low >= 0;\nloop invariant mid >= 0;\nloop invariant high >= mid;\nloop invariant high >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: 0 <= mid <= high;\n\nloop invariant i3: low >= 0;\nloop invariant i4: mid >= 0;\nloop invariant i5: high >= mid;\nloop invariant i6: high >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant low <= high;\nloop invariant low < high ==> mid == 0;\nloop invariant low + mid == high;\nloop invariant low + mid + high == 2 * high;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant low >= high;\nloop invariant low <= high + mid;\nloop invariant mid >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= low <= high;\nloop invariant mid <= high;\nloop invariant low <= mid;\nloop invariant mid <= high;\nloop invariant mid <= high;\nloop invariant mid <= high;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\nloop invariant i2: mid <= high;\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 29,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= high;\nloop invariant 0 <= low <= high;\nloop invariant low == mid + high - 1;\nloop invariant low >= 0;\nloop invariant mid >= 0;\nloop invariant high >= 0;\nloop invariant high <= 2*mid;\nloop invariant low <= high;\nloop invariant mid <= high;\nloop invariant low <= high - mid + 1;\nloop invariant low >= high - 2*mid + 1;\nloop invariant low <= 2*mid - 1;\nloop invariant mid <= 2*mid - 1;\nloop invariant high <= 2*mid - 1;\nloop invariant low <= 2*mid - 2;\nloop invariant mid <= 2*mid - 2;\nloop invariant high <= 2*mid - 2;\nloop invariant low <= 2*mid - 3;\nloop invariant mid <= 2*mid - 3;\nloop invariant high <= 2*mid - 3;\nloop invariant low <= 2*mid - 4;\nloop invariant mid <= 2*mid - 4;\nloop invariant high <= 2*mid - 4;\nloop invariant low <= 2*mid - 5;\nloop invariant mid <= 2*mid - 5;\nloop invariant high <= 2*mid - 5;\nloop invariant low <= 2*mid - 6;\nloop invariant mid <= 2*mid - 6;\nloop invariant high <= 2*mid - 6;\nloop invariant low <= 2*mid - 7;\nloop invariant mid <= 2*mid - 7;\nloop invariant high <= 2*mid - 7;\nloop invariant low <= 2*mid - 8;\nloop invariant mid <= 2*mid - 8;\nloop invariant high <= 2*mid - 8;\nloop invariant low <= 2*mid - 9;\nloop invariant mid <= 2*mid - 9;\nloop invariant high <= 2*mid - 9;\nloop invariant low <= 2*mid - 10;\nloop invariant mid <= 2*mid - 10;\nloop invariant high <= 2*mid - 10;\nloop invariant low <= 2*mid - 11;\nloop invariant mid <= 2*mid - 11;\nloop invariant high <= 2*mid - 11;\nloop invariant low <= 2*mid - 12;\nloop invariant mid <= 2*mid - 12;\nloop invariant high <= 2*mid - 12;\nloop invariant low <= 2*mid - 13;\nloop invariant mid <= 2*mid - 13;\nloop invariant high <= 2*mid - 13;\nloop invariant low <= 2*mid - 14;\nloop invariant mid <= 2*mid - 14;\nloop invariant high <= 2*mid - 14;\nloop invariant low <= 2*mid - 15;\nloop invariant mid <= 2*mid - 15;\nloop invariant high <= 2*mid - 15;\nloop invariant low <= 2*mid - 16;\nloop invariant mid <= 2*mid - 16;\nloop invariant high <= 2*mid - 16;\nloop invariant low <= 2*mid - 17;\nloop invariant mid <= 2*mid - 17;\nloop invariant high <= 2*mid - 17;\nloop invariant low <= 2*mid - 18;\nloop invariant mid <= 2*mid - 18;\nloop invariant high <= 2*mid - 18;\nloop invariant low <= 2*mid - 19;\nloop invariant mid <= 2*mid - 19;\nloop invariant high <= 2*mid - 19;\nloop invariant low <= 2*mid - 20;\nloop invariant mid <= 2*mid - 20;\nloop invariant high <= 2*mid - 20;\nloop invariant low <= 2*mid - 21;\nloop invariant mid <= 2*mid - 21;\nloop invariant high <= 2*mid - 21;\nloop invariant low <= 2*mid - 22;\nloop invariant mid <= 2*mid - 22;\nloop invariant high <= 2*mid - 22;\nloop invariant low <= 2*mid - 23;\nloop invariant mid <= 2*mid - 23;\nloop invariant high <= 2*mid - 23;\nloop invariant low <= 2*mid - 24;\nloop invariant mid <= 2*mid - 24;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: 0 <= mid <= high;\n\n\nloop invariant i4: low >= 0;\nloop invariant i5: mid >= 0;\nloop invariant i6: high >= 0;\n\n\nloop invariant i9: mid <= high;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant low <= high;\nloop invariant low <= mid;\nloop invariant mid <= high;\nloop invariant low >= 0;\nloop invariant mid >= 1;\nloop invariant high >= 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid <= high;\nloop invariant i4: low >= 0;\n\nloop invariant i6: high >= 2*mid;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= low <= high;\nloop invariant low + mid + high = 3 * mid;\nloop invariant mid >= 1;\nloop invariant high - low = mid;\nloop invariant high - mid >= 0;\nloop invariant low - mid <= 0;\nloop invariant low <= high - mid;\nloop invariant low >= mid - high;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\nloop invariant low + mid + high < 3 * mid;\nloop invariant low + mid + high >= 3 * mid;\nloop invariant low + mid + high <= 3 * mid;\nloop invariant low + mid + high == 3 * mid;\nloop invariant low + mid + high != 3 * mid;\nloop invariant low + mid + high > 3 * mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: high - mid >= 0;\n\n\nloop invariant i8: low >= mid - high;\nloop invariant i9: low + mid + high >= 3 * mid;\n\n\n\n\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= low <= high <= 2 * mid;\nloop invariant low == mid + 1;\nloop invariant high == mid + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= high / 2;\nloop invariant low + mid == high;\nloop invariant low >= 0;\nloop invariant mid >= 0;\nloop invariant high >= 1;\nloop invariant low <= high;\nloop invariant mid <= high / 2;\nloop invariant low <= mid;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\nloop invariant mid <= mid + 1;\nloop invariant mid >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: 0 <= mid <= high / 2;\n\nloop invariant i3: low >= 0;\nloop invariant i4: mid >= 0;\nloop invariant i5: high >= 1;\n\nloop invariant i7: mid <= high / 2;\n\n\nloop invariant i10: mid <= mid + 1;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= low <= high;\nloop invariant 0 <= mid <= high;\nloop invariant low == high - mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\nloop invariant i2: 0 <= mid <= high;\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= low <= 2*mid;\nloop invariant mid >= 1;\nloop invariant high == 2*mid;\nloop invariant low + high == 2*mid;\nloop invariant low - high == 0;\nloop invariant low == high;\nloop invariant low == mid;\nloop invariant high == 2*mid;\nloop invariant low == 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= low <= mid + 1;\nloop invariant mid <= high <= 2 * mid;\nloop invariant mid >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 112: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: 0 <= low <= high;\nloop invariant i2: 0 <= mid <= high;\nloop invariant i3: low + mid + high == 3 * mid;\nloop invariant i4: low <= high;\nloop invariant i5: low + mid <= high;\nloop invariant i6: low <= high - mid;\nloop invariant i7: low >= high - mid;\nloop invariant i8: low >= 0;\nloop invariant i9: mid >= 0;\nloop invariant i10: high >= mid;\nloop invariant i11: high >= 0;\nloop invariant i12: low < high ==> mid == 0;\nloop invariant i13: low + mid == high;\nloop invariant i14: low + mid + high == 2 * high;\nloop invariant i15: low >= high;\nloop invariant i16: low <= high + mid;\nloop invariant i17: mid <= high;\nloop invariant i18: low <= mid;\nloop invariant i19: low == mid + high - 1;\nloop invariant i20: high <= 2*mid;\nloop invariant i21: low <= high - mid + 1;\nloop invariant i22: low >= high - 2*mid + 1;\nloop invariant i23: low <= 2*mid - 1;\nloop invariant i24: mid <= 2*mid - 1;\nloop invariant i25: high <= 2*mid - 1;\nloop invariant i26: low <= 2*mid - 2;\nloop invariant i27: mid <= 2*mid - 2;\nloop invariant i28: high <= 2*mid - 2;\nloop invariant i29: low <= 2*mid - 3;\nloop invariant i30: mid <= 2*mid - 3;\nloop invariant i31: high <= 2*mid - 3;\nloop invariant i32: low <= 2*mid - 4;\nloop invariant i33: mid <= 2*mid - 4;\nloop invariant i34: high <= 2*mid - 4;\nloop invariant i35: low <= 2*mid - 5;\nloop invariant i36: mid <= 2*mid - 5;\nloop invariant i37: high <= 2*mid - 5;\nloop invariant i38: low <= 2*mid - 6;\nloop invariant i39: mid <= 2*mid - 6;\nloop invariant i40: high <= 2*mid - 6;\nloop invariant i41: low <= 2*mid - 7;\nloop invariant i42: mid <= 2*mid - 7;\nloop invariant i43: high <= 2*mid - 7;\nloop invariant i44: low <= 2*mid - 8;\nloop invariant i45: mid <= 2*mid - 8;\nloop invariant i46: high <= 2*mid - 8;\nloop invariant i47: low <= 2*mid - 9;\nloop invariant i48: mid <= 2*mid - 9;\nloop invariant i49: high <= 2*mid - 9;\nloop invariant i50: low <= 2*mid - 10;\nloop invariant i51: mid <= 2*mid - 10;\nloop invariant i52: high <= 2*mid - 10;\nloop invariant i53: low <= 2*mid - 11;\nloop invariant i54: mid <= 2*mid - 11;\nloop invariant i55: high <= 2*mid - 11;\nloop invariant i56: low <= 2*mid - 12;\nloop invariant i57: mid <= 2*mid - 12;\nloop invariant i58: high <= 2*mid - 12;\nloop invariant i59: low <= 2*mid - 13;\nloop invariant i60: mid <= 2*mid - 13;\nloop invariant i61: high <= 2*mid - 13;\nloop invariant i62: low <= 2*mid - 14;\nloop invariant i63: mid <= 2*mid - 14;\nloop invariant i64: high <= 2*mid - 14;\nloop invariant i65: low <= 2*mid - 15;\nloop invariant i66: mid <= 2*mid - 15;\nloop invariant i67: high <= 2*mid - 15;\nloop invariant i68: low <= 2*mid - 16;\nloop invariant i69: mid <= 2*mid - 16;\nloop invariant i70: high <= 2*mid - 16;\nloop invariant i71: low <= 2*mid - 17;\nloop invariant i72: mid <= 2*mid - 17;\nloop invariant i73: high <= 2*mid - 17;\nloop invariant i74: low <= 2*mid - 18;\nloop invariant i75: mid <= 2*mid - 18;\nloop invariant i76: high <= 2*mid - 18;\nloop invariant i77: low <= 2*mid - 19;\nloop invariant i78: mid <= 2*mid - 19;\nloop invariant i79: high <= 2*mid - 19;\nloop invariant i80: low <= 2*mid - 20;\nloop invariant i81: mid <= 2*mid - 20;\nloop invariant i82: high <= 2*mid - 20;\nloop invariant i83: low <= 2*mid - 21;\nloop invariant i84: mid <= 2*mid - 21;\nloop invariant i85: high <= 2*mid - 21;\nloop invariant i86: low <= 2*mid - 22;\nloop invariant i87: mid <= 2*mid - 22;\nloop invariant i88: high <= 2*mid - 22;\nloop invariant i89: low <= 2*mid - 23;\nloop invariant i90: mid <= 2*mid - 23;\nloop invariant i91: high <= 2*mid - 23;\nloop invariant i92: low <= 2*mid - 24;\nloop invariant i93: mid <= 2*mid - 24;\nloop invariant i94: mid >= 1;\nloop invariant i95: high >= 2*mid;\nloop invariant i96: low + mid + high = 3 * mid;\nloop invariant i97: high - low = mid;\nloop invariant i98: high - mid >= 0;\nloop invariant i99: low - mid <= 0;\nloop invariant i100: low >= mid - high;\nloop invariant i101: low + mid + high >= 3 * mid;\nloop invariant i102: low + mid + high <= 3 * mid;\nloop invariant i103: low + mid + high != 3 * mid;\nloop invariant i104: low + mid + high > 3 * mid;\nloop invariant i105: low + mid + high < 3 * mid;\nloop invariant i106: 0 <= low <= high <= 2 * mid;\nloop invariant i107: low == mid + 1;\nloop invariant i108: high == mid + 1;\nloop invariant i109: 0 <= mid <= high / 2;\nloop invariant i110: high >= 1;\nloop invariant i111: mid <= high / 2;\nloop invariant i112: mid <= mid + 1;\nloop invariant i113: low == high - mid;\nloop invariant i114: 0 <= low <= 2*mid;\nloop invariant i115: high == 2*mid;\nloop invariant i116: low + high == 2*mid;\nloop invariant i117: low - high == 0;\nloop invariant i118: low == high;\nloop invariant i119: low == mid;\nloop invariant i120: low == 2*mid;\nloop invariant i121: 1 <= low <= mid + 1;\nloop invariant i122: mid <= high <= 2 * mid;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 53,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\nloop invariant i2: 0 <= mid <= high;\n\n\n\n\n\nloop invariant i8: low >= 0;\nloop invariant i9: mid >= 0;\nloop invariant i10: high >= mid;\nloop invariant i11: high >= 0;\n\n\n\n\n\nloop invariant i17: mid <= high;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i95: high >= 2*mid;\n\n\nloop invariant i98: high - mid >= 0;\n\nloop invariant i100: low >= mid - high;\nloop invariant i101: low + mid + high >= 3 * mid;\n\n\n\n\n\n\n\nloop invariant i109: 0 <= mid <= high / 2;\nloop invariant i110: high >= 1;\nloop invariant i111: mid <= high / 2;\nloop invariant i112: mid <= mid + 1;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 136,
        "success_count": 117,
        "failure_count": 19,
        "success_rate": 0.8602941176470589
    }
}