{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x^2 < y ==> x < y / x;\nloop invariant x^2 >= y ==> x >= y / x;\nloop invariant x != y ==> x < y;\nloop invariant x != y ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant x * x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x <= y;\nloop invariant x >= 1;\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y; implication (x == y) ==> (x == y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\nloop invariant 0 <= x <= y;\nloop invariant x^2 <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x <= y;\nloop invariant x > 0;\nloop invariant y > 0;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x * x <= y;\nloop invariant x <= y;\nloop invariant x > 0;\nloop invariant y > 0;\nloop invariant x >= 1;\nloop invariant y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x >= x;\nloop invariant x * x <= y;\nloop invariant x * x >= x + 1;\nloop invariant x * x <= y + 1;\nloop invariant x * x >= x + x + 1;\nloop invariant x * x <= y + x + 1;\nloop invariant x * x >= x + x + x + 1;\nloop invariant x * x <= y + x + x + 1;\nloop invariant x * x >= x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y <= x ==> x < y;\nloop invariant !(y <= x) ==> x <= y;\nloop invariant !(y <= x) ==> x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x >= y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant y is even ==> x is even;\nloop invariant y is odd ==> x is odd;\nloop invariant 1 <= x <= y;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x <= y;\nloop invariant x == y || x == y / x;\n*/\n```",
            "```\n/*@\nloop invariant x >= 1;\nloop invariant 1 <= y <= 2^32-1;\nloop invariant x <= y;\nloop invariant (x == y) ==> (x >= y / x);\nloop invariant (x < y / x) ==> (x < y);\nloop invariant (x >= y / x) ==> (x == y);\nloop invariant (x == y) ==> (x > y / x);\n*/\n```",
            "```\n/*@\nloop invariant y > 0 ==> x >= y / x;\nloop invariant x < y ==> x >= y / x ==> x > y / x / 2;\nloop invariant y > 0 ==> x >= y / x ==> x > y / x / 2 ==> x * x >= y / x;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x^2 < y ==> x < y / x;\nloop invariant x^2 >= y ==> x >= y / x;\nloop invariant x != y ==> x < y;\nloop invariant x != y ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n\nloop invariant i4: x != y ==> x < y;\nloop invariant i5: x != y ==> x >= 0;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant x * x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 1 <= x <= y;\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x <= y;\nloop invariant x >= 1;\nloop invariant y > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: x >= 1;\nloop invariant i4: y > 0;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y; implication (x == y) ==> (x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\nloop invariant 0 <= x <= y;\nloop invariant x^2 <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y >= 0;\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x <= y;\nloop invariant x > 0;\nloop invariant y > 0;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x * x <= y;\nloop invariant x <= y;\nloop invariant x > 0;\nloop invariant y > 0;\nloop invariant x >= 1;\nloop invariant y >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: x > 0;\nloop invariant i4: y > 0;\nloop invariant i5: x >= 1;\nloop invariant i6: y >= 1;\nloop invariant i7: x <= y;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 36,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x >= x;\nloop invariant x * x <= y;\nloop invariant x * x >= x + 1;\nloop invariant x * x <= y + 1;\nloop invariant x * x >= x + x + 1;\nloop invariant x * x <= y + x + 1;\nloop invariant x * x >= x + x + x + 1;\nloop invariant x * x <= y + x + x + 1;\nloop invariant x * x >= x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x * x >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y <= x ==> x < y;\nloop invariant !(y <= x) ==> x <= y;\nloop invariant !(y <= x) ==> x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: !(y <= x) ==> x <= y;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant y is even ==> x is even;\nloop invariant y is odd ==> x is odd;\nloop invariant 1 <= x <= y;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 1 <= x <= y;\n\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x <= y;\nloop invariant x == y || x == y / x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant 1 <= y <= 2^32-1;\nloop invariant x <= y;\nloop invariant (x == y) ==> (x >= y / x);\nloop invariant (x < y / x) ==> (x < y);\nloop invariant (x >= y / x) ==> (x == y);\nloop invariant (x == y) ==> (x > y / x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\n\nloop invariant i3: x <= y;\nloop invariant i4: (x == y) ==> (x >= y / x);\nloop invariant i5: (x < y / x) ==> (x < y);\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y > 0 ==> x >= y / x;\nloop invariant x < y ==> x >= y / x ==> x > y / x / 2;\nloop invariant y > 0 ==> x >= y / x ==> x > y / x / 2 ==> x * x >= y / x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\n\nloop invariant i2: x < y ==> x >= y / x ==> x > y / x / 2;\nloop invariant i3: y > 0 ==> x >= y / x ==> x > y / x / 2 ==> x * x >= y / x;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 25: unexpected token 'implication'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x^2 < y ==> x < y / x;\nloop invariant i3: x^2 >= y ==> x >= y / x;\nloop invariant i4: x != y ==> x < y;\nloop invariant i5: x != y ==> x >= 0;\nloop invariant i6: 1 <= x <= y;\nloop invariant i7: x * x <= y;\nloop invariant i8: x >= 1;\nloop invariant i9: y > 0;\nloop invariant i10: 0 <= x <= y; implication (x == y) ==> (x == y);\nloop invariant i11: y >= 0;\nloop invariant i12: x^2 <= y;\nloop invariant i13: x > 0;\nloop invariant i14: y >= 1;\nloop invariant i15: x <= y;\nloop invariant i16: x * x >= x;\nloop invariant i17: x * x >= x + 1;\nloop invariant i18: x * x <= y + 1;\nloop invariant i19: x * x >= x + x + 1;\nloop invariant i20: x * x <= y + x + 1;\nloop invariant i21: x * x >= x + x + x + 1;\nloop invariant i22: x * x <= y + x + x + 1;\nloop invariant i23: x * x >= x + x + x + x + 1;\nloop invariant i24: x * x <= y + x + x + x + 1;\nloop invariant i25: x * x >= x + x + x + x + x + 1;\nloop invariant i26: x * x <= y + x + x + x + x + 1;\nloop invariant i27: x * x >= x + x + x + x + x + x + 1;\nloop invariant i28: x * x <= y + x + x + x + x + x + 1;\nloop invariant i29: x * x >= x + x + x + x + x + x + x + 1;\nloop invariant i30: x * x <= y + x + x + x + x + x + x + 1;\nloop invariant i31: x * x >= x + x + x + x + x + x + x + x + 1;\nloop invariant i32: x * x <= y + x + x + x + x + x + x + x + 1;\nloop invariant i33: x * x >= x + x + x + x + x + x + x + x + x + 1;\nloop invariant i34: x * x <= y + x + x + x + x + x + x + x + x + 1;\nloop invariant i35: x * x >= x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i36: x * x <= y + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i37: x * x >= x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i38: x * x <= y + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i39: x * x >= x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i40: x * x <= y + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i41: x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i42: x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i43: x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i44: x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i45: x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i46: x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i47: x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i48: x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i49: x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i50: x * x <= y + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i51: x * x >= x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + 1;\nloop invariant i52: y <= x ==> x < y;\nloop invariant i53: !(y <= x) ==> x <= y;\nloop invariant i54: x * x >= y;\nloop invariant i55: 0 <= y <= 100000;\nloop invariant i56: x >= (1 + (y - 1) * y / 2);\nloop invariant i57: y is even ==> x is even;\nloop invariant i58: y is odd ==> x is odd;\nloop invariant i59: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i60: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i61: x == y || x == y / x;\nloop invariant i62: 1 <= y <= 2^32-1;\nloop invariant i63: (x == y) ==> (x >= y / x);\nloop invariant i64: (x < y / x) ==> (x < y);\nloop invariant i65: (x >= y / x) ==> (x == y);\nloop invariant i66: (x == y) ==> (x > y / x);\nloop invariant i67: y > 0 ==> x >= y / x;\nloop invariant i68: x < y ==> x >= y / x ==> x > y / x / 2;\nloop invariant i69: y > 0 ==> x >= y / x ==> x > y / x / 2 ==> x * x >= y / x;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 48,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n\nloop invariant i4: x != y ==> x < y;\nloop invariant i5: x != y ==> x >= 0;\nloop invariant i6: 1 <= x <= y;\n\nloop invariant i8: x >= 1;\nloop invariant i9: y > 0;\n\nloop invariant i11: y >= 0;\n\nloop invariant i13: x > 0;\nloop invariant i14: y >= 1;\nloop invariant i15: x <= y;\nloop invariant i16: x * x >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i53: !(y <= x) ==> x <= y;\n\n\n\n\n\n\n\n\n\nloop invariant i63: (x == y) ==> (x >= y / x);\nloop invariant i64: (x < y / x) ==> (x < y);\n\n\n\nloop invariant i68: x < y ==> x >= y / x ==> x > y / x / 2;\nloop invariant i69: y > 0 ==> x >= y / x ==> x > y / x / 2 ==> x * x >= y / x;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 89,
        "success_count": 77,
        "failure_count": 12,
        "success_rate": 0.8651685393258427
    }
}