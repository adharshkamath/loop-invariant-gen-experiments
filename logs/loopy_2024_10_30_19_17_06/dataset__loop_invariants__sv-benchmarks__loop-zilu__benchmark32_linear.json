{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  while (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x <= 2;\nloop invariant 1 <= x <= 8;\nloop invariant !unknown_bool() || (x == 1) || (x == 2);\nloop invariant (x == 1) || (x == 2);\n*/\n```",
            "```\n/*@\nloop invariant x == 1 || x == 2;\nloop invariant unknown_bool() ==> (x == 1 || x == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 < x <= 2;\nloop invariant x == 1 || x == 2;\nloop invariant 0 < x <= 2;\nloop invariant x == 1 || x == 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant x == 1 ==> x == 2;\nloop invariant x == 2 ==> x == 1;\nloop invariant x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> x == 1;\nloop invariant x == 2 ==> x == 1 ==> x == 2;\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2;\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1;\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2;\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1;\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x == 1 || x == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant x = 1 ==> (x = 2 ==> x = 1) ==> x = 2;\nloop invariant x = 2 ==> (x = 1 ==> x = 2) ==> x = 1;\n*/\n```",
            "```\n/*@\nloop invariant x = 1 or x = 2;\nloop invariant 1 <= x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( unknown_bool() ) ==> ( ( x <= 8 ) && ( x > 0 ) ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( !unknown_bool() ) ==> ( ( x <= 8 ) && ( x > 0 ) ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x <= 8;\nloop invariant x = 1 || x = 2;\nloop invariant unknown_bool() ==> x <= 8;\nloop invariant 0 <= x <= 2;\nloop invariant x <= 8;\nloop invariant x = 1 || x = 2;\nloop invariant unknown_bool() ==> x <= 8;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x == 1 || x == 2;\nloop invariant if(unknown_bool()) then x == 1 || x == 2;\nloop invariant if(!unknown_bool()) then x == 1 || x == 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x is either 1 or 2;\nloop invariant x is either even or odd;\nloop invariant x is either 0 or 1;\nloop invariant x is either 2 or 3;\nloop invariant x is either 4 or 5;\nloop invariant x is either 6 or 7;\nloop invariant x is either 8 or 9;\nloop invariant x is either 10 or 11;\nloop invariant x is either 12 or 13;\nloop invariant x is either 14 or 15;\nloop invariant x is either 16 or 17;\nloop invariant x is either 18 or 19;\nloop invariant x is either 20 or 21;\nloop invariant x is either 22 or 23;\nloop invariant x is either 24 or 25;\nloop invariant x is either 26 or 27;\nloop invariant x is either 28 or 29;\nloop invariant x is either 30 or 31;\nloop invariant x is either 32 or 33;\nloop invariant x is either 34 or 35;\nloop invariant x is either 36 or 37;\nloop invariant x is either 38 or 39;\nloop invariant x is either 40 or 41;\nloop invariant x is either 42 or 43;\nloop invariant x is either 44 or 45;\nloop invariant x is either 46 or 47;\nloop invariant x is either 48 or 49;\nloop invariant x is either 50 or 51;\nloop invariant x is either 52 or 53;\nloop invariant x is either 54 or 55;\nloop invariant x is either 56 or 57;\nloop invariant x is either 58 or 59;\nloop invariant x is either 60 or 61;\nloop invariant x is either 62 or 63;\nloop invariant x is either 64 or 65;\nloop invariant x is either 66 or 67;\nloop invariant x is either 68 or 69;\nloop invariant x is either 70 or 71;\nloop invariant x is either 72 or 73;\nloop invariant x is either 74 or 75;\nloop invariant x is either 76 or 77;\nloop invariant x is either 78 or 79;\nloop invariant x is either 80 or 81;\nloop invariant x is either 82 or 83;\nloop invariant x is either 84 or 85;\nloop invariant x is either 86 or 87;\nloop invariant x is either 88 or 89;\nloop invariant x is either 90 or 91;\nloop invariant x is either 92 or 93;\nloop invariant x is either 94 or 95;\nloop invariant x is either 96 or 97;\nloop invariant x is either 98 or 99;\nloop invariant x is either 100 or 101;\nloop invariant x is either 102 or 103;\nloop invariant x is either 104 or 105;\nloop invariant x is either 106 or 107;\nloop invariant x is either 108 or 109;\nloop invariant x is either 110 or 111;\nloop invariant x is either 112 or 113;\nloop invariant x is either 114 or 115;\nloop invariant x is either 116 or 117;\nloop invariant x is either 118 or 119;\nloop invariant x is either 120 or 121;\nloop invariant x is either 122 or 123;\nloop invariant x is either 124 or 125;\nloop invariant x is either 126 or 127;\nloop invariant x is either 128 or 129;\nloop invariant x is either 130 or 131;\nloop invariant x is either 132 or 133;\nloop invariant x is either 134 or 135;\nloop invariant x is either 136 or 137;\nloop invariant x is either 138 or 139;\nloop invariant x is either 140 or 141;\nloop invariant x is either 142 or 143;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x==1 || x==2;\nloop invariant (x==1) ==> (x<=8);\nloop invariant (x==2) ==> (x<=8);\nloop invariant (x==1) ==> (x>=1);\nloop invariant (x==2) ==> (x>=2);\nloop invariant x<=8 ==> (x>=1);\nloop invariant x<=8 ==> (x<=2);\nloop invariant (x==1) ==> (x==1 || (x==2));\nloop invariant (x==2) ==> ((x==1 || x==2));\nloop invariant (x==1) ==> (x==1 || (x==2));\nloop invariant (x==2) ==> ((x==1 || x==2));\nloop invariant (x==1 || x==2) ==> (x==1 || (x==2));\nloop invariant (x==1 || x==2) ==> ((x==1 || x==2));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x <= 2;\nloop invariant 1 <= x <= 8;\nloop invariant !unknown_bool() || (x == 1) || (x == 2);\nloop invariant (x == 1) || (x == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x <= 2;\nloop invariant i2: 1 <= x <= 8;\n\nloop invariant i4: (x == 1) || (x == 2);\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x == 1 || x == 2;\nloop invariant unknown_bool() ==> (x == 1 || x == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x == 1 || x == 2;\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 < x <= 2;\nloop invariant x == 1 || x == 2;\nloop invariant 0 < x <= 2;\nloop invariant x == 1 || x == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 < x <= 2;\nloop invariant i2: x == 1 || x == 2;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 29,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant x == 1 ==> x == 2;\nloop invariant x == 2 ==> x == 1;\nloop invariant x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> x == 1;\nloop invariant x == 2 ==> x == 1 ==> x == 2;\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2;\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1;\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2;\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1;\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 8;\n\n\n\n\n\n\nloop invariant i8: x == 1 ==> x == 2 ==> x == 1;\nloop invariant i9: x == 2 ==> x == 1 ==> x == 2;\n\n\nloop invariant i12: x == 1 ==> x == 2 ==> x == 1 ==> x == 2;\nloop invariant i13: x == 2 ==> x == 1 ==> x == 2 ==> x == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 8;\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant x == 1 || x == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x == 1 || x == 2;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\nloop invariant (x == 1) ==> (x == 2) || (x == 1);\nloop invariant (x == 2) ==> (x == 1) || (x == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: (x == 1) || (x == 2);\nloop invariant i3: (x == 1) ==> (x == 2) || (x == 1);\nloop invariant i4: (x == 2) ==> (x == 1) || (x == 2);\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant x = 1 ==> (x = 2 ==> x = 1) ==> x = 2;\nloop invariant x = 2 ==> (x = 1 ==> x = 2) ==> x = 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 8;\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x = 1 or x = 2;\nloop invariant 1 <= x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\n\nloop invariant i2: 1 <= x <= 2;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( unknown_bool() ) ==> ( ( x <= 8 ) && ( x > 0 ) ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( !unknown_bool() ) ==> ( ( x <= 8 ) && ( x > 0 ) ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x <= 8;\nloop invariant x = 1 || x = 2;\nloop invariant unknown_bool() ==> x <= 8;\nloop invariant 0 <= x <= 2;\nloop invariant x <= 8;\nloop invariant x = 1 || x = 2;\nloop invariant unknown_bool() ==> x <= 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: x <= 8;\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x == 1 || x == 2;\nloop invariant if(unknown_bool()) then x == 1 || x == 2;\nloop invariant if(!unknown_bool()) then x == 1 || x == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: x == 1 || x == 2;\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 74,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x is either 1 or 2;\nloop invariant x is either even or odd;\nloop invariant x is either 0 or 1;\nloop invariant x is either 2 or 3;\nloop invariant x is either 4 or 5;\nloop invariant x is either 6 or 7;\nloop invariant x is either 8 or 9;\nloop invariant x is either 10 or 11;\nloop invariant x is either 12 or 13;\nloop invariant x is either 14 or 15;\nloop invariant x is either 16 or 17;\nloop invariant x is either 18 or 19;\nloop invariant x is either 20 or 21;\nloop invariant x is either 22 or 23;\nloop invariant x is either 24 or 25;\nloop invariant x is either 26 or 27;\nloop invariant x is either 28 or 29;\nloop invariant x is either 30 or 31;\nloop invariant x is either 32 or 33;\nloop invariant x is either 34 or 35;\nloop invariant x is either 36 or 37;\nloop invariant x is either 38 or 39;\nloop invariant x is either 40 or 41;\nloop invariant x is either 42 or 43;\nloop invariant x is either 44 or 45;\nloop invariant x is either 46 or 47;\nloop invariant x is either 48 or 49;\nloop invariant x is either 50 or 51;\nloop invariant x is either 52 or 53;\nloop invariant x is either 54 or 55;\nloop invariant x is either 56 or 57;\nloop invariant x is either 58 or 59;\nloop invariant x is either 60 or 61;\nloop invariant x is either 62 or 63;\nloop invariant x is either 64 or 65;\nloop invariant x is either 66 or 67;\nloop invariant x is either 68 or 69;\nloop invariant x is either 70 or 71;\nloop invariant x is either 72 or 73;\nloop invariant x is either 74 or 75;\nloop invariant x is either 76 or 77;\nloop invariant x is either 78 or 79;\nloop invariant x is either 80 or 81;\nloop invariant x is either 82 or 83;\nloop invariant x is either 84 or 85;\nloop invariant x is either 86 or 87;\nloop invariant x is either 88 or 89;\nloop invariant x is either 90 or 91;\nloop invariant x is either 92 or 93;\nloop invariant x is either 94 or 95;\nloop invariant x is either 96 or 97;\nloop invariant x is either 98 or 99;\nloop invariant x is either 100 or 101;\nloop invariant x is either 102 or 103;\nloop invariant x is either 104 or 105;\nloop invariant x is either 106 or 107;\nloop invariant x is either 108 or 109;\nloop invariant x is either 110 or 111;\nloop invariant x is either 112 or 113;\nloop invariant x is either 114 or 115;\nloop invariant x is either 116 or 117;\nloop invariant x is either 118 or 119;\nloop invariant x is either 120 or 121;\nloop invariant x is either 122 or 123;\nloop invariant x is either 124 or 125;\nloop invariant x is either 126 or 127;\nloop invariant x is either 128 or 129;\nloop invariant x is either 130 or 131;\nloop invariant x is either 132 or 133;\nloop invariant x is either 134 or 135;\nloop invariant x is either 136 or 137;\nloop invariant x is either 138 or 139;\nloop invariant x is either 140 or 141;\nloop invariant x is either 142 or 143;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 1 <= x <= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x==1 || x==2;\nloop invariant (x==1) ==> (x<=8);\nloop invariant (x==2) ==> (x<=8);\nloop invariant (x==1) ==> (x>=1);\nloop invariant (x==2) ==> (x>=2);\nloop invariant x<=8 ==> (x>=1);\nloop invariant x<=8 ==> (x<=2);\nloop invariant (x==1) ==> (x==1 || (x==2));\nloop invariant (x==2) ==> ((x==1 || x==2));\nloop invariant (x==1) ==> (x==1 || (x==2));\nloop invariant (x==2) ==> ((x==1 || x==2));\nloop invariant (x==1 || x==2) ==> (x==1 || (x==2));\nloop invariant (x==1 || x==2) ==> ((x==1 || x==2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 1 <= x <= 2;\nloop invariant i2: x==1 || x==2;\nloop invariant i3: (x==1) ==> (x<=8);\nloop invariant i4: (x==2) ==> (x<=8);\nloop invariant i5: (x==1) ==> (x>=1);\nloop invariant i6: (x==2) ==> (x>=2);\nloop invariant i7: x<=8 ==> (x>=1);\nloop invariant i8: x<=8 ==> (x<=2);\nloop invariant i9: (x==1) ==> (x==1 || (x==2));\nloop invariant i10: (x==2) ==> ((x==1 || x==2));\nloop invariant i11: (x==1 || x==2) ==> (x==1 || (x==2));\nloop invariant i12: (x==1 || x==2) ==> ((x==1 || x==2));\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x <= 2;\nloop invariant i2: 1 <= x <= 8;\nloop invariant i3: !unknown_bool() || (x == 1) || (x == 2);\nloop invariant i4: (x == 1) || (x == 2);\nloop invariant i5: x == 1 || x == 2;\nloop invariant i6: unknown_bool() ==> (x == 1 || x == 2);\nloop invariant i7: 0 < x <= 2;\nloop invariant i8: 0 <= x <= 8;\nloop invariant i9: x == 1 ==> x == 2;\nloop invariant i10: x == 2 ==> x == 1;\nloop invariant i11: x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant i12: x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant i13: x == 1 ==> x == 1 ==> unknown_bool();\nloop invariant i14: x == 2 ==> x == 2 ==> unknown_bool();\nloop invariant i15: x == 1 ==> x == 2 ==> x == 1;\nloop invariant i16: x == 2 ==> x == 1 ==> x == 2;\nloop invariant i17: x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant i18: x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant i19: x == 1 ==> x == 2 ==> x == 1 ==> x == 2;\nloop invariant i20: x == 2 ==> x == 1 ==> x == 2 ==> x == 1;\nloop invariant i21: x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant i22: x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant i23: x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool();\nloop invariant i24: x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool();\nloop invariant i25: x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant i26: x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant i27: x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant i28: x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant i29: x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2;\nloop invariant i30: x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1;\nloop invariant i31: x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant i32: x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant i33: x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant i34: x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant i35: x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant i36: x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant i37: x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1;\nloop invariant i38: x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2;\nloop invariant i39: x == 1 ==> x == 2 ==> x == 1 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant i40: x == 2 ==> x == 1 ==> x == 2 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant i41: x == 1 ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool();\nloop invariant i42: x == 2 ==> x == 2 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 1 ==> unknown_bool() ==> x == 2 ==> unknown_bool();\nloop invariant i43: 0 <= y <= 100000;\nloop invariant i44: x >= (1 + (y - 1) * y / 2);\nloop invariant i45: 0 <= x <= 2;\nloop invariant i46: (x == 1) ==> (x == 2) || (x == 1);\nloop invariant i47: (x == 2) ==> (x == 1) || (x == 2);\nloop invariant i48: x = 1 ==> (x = 2 ==> x = 1) ==> x = 2;\nloop invariant i49: x = 2 ==> (x = 1 ==> x = 2) ==> x = 1;\nloop invariant i50: x = 1 or x = 2;\nloop invariant i51: 1 <= x <= 2;\nloop invariant i52: ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\nloop invariant i53: ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( unknown_bool() ) ==> ( ( x <= 8 ) && ( x > 0 ) ) );\nloop invariant i54: ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( !unknown_bool() ) ==> ( ( x <= 8 ) && ( x > 0 ) ) );\nloop invariant i55: x <= 8;\nloop invariant i56: x = 1 || x = 2;\nloop invariant i57: unknown_bool() ==> x <= 8;\nloop invariant i58: if(unknown_bool()) then x == 1 || x == 2;\nloop invariant i59: if(!unknown_bool()) then x == 1 || x == 2;\nloop invariant i60: x is either 1 or 2;\nloop invariant i61: x is either even or odd;\nloop invariant i62: x is either 0 or 1;\nloop invariant i63: x is either 2 or 3;\nloop invariant i64: x is either 4 or 5;\nloop invariant i65: x is either 6 or 7;\nloop invariant i66: x is either 8 or 9;\nloop invariant i67: x is either 10 or 11;\nloop invariant i68: x is either 12 or 13;\nloop invariant i69: x is either 14 or 15;\nloop invariant i70: x is either 16 or 17;\nloop invariant i71: x is either 18 or 19;\nloop invariant i72: x is either 20 or 21;\nloop invariant i73: x is either 22 or 23;\nloop invariant i74: x is either 24 or 25;\nloop invariant i75: x is either 26 or 27;\nloop invariant i76: x is either 28 or 29;\nloop invariant i77: x is either 30 or 31;\nloop invariant i78: x is either 32 or 33;\nloop invariant i79: x is either 34 or 35;\nloop invariant i80: x is either 36 or 37;\nloop invariant i81: x is either 38 or 39;\nloop invariant i82: x is either 40 or 41;\nloop invariant i83: x is either 42 or 43;\nloop invariant i84: x is either 44 or 45;\nloop invariant i85: x is either 46 or 47;\nloop invariant i86: x is either 48 or 49;\nloop invariant i87: x is either 50 or 51;\nloop invariant i88: x is either 52 or 53;\nloop invariant i89: x is either 54 or 55;\nloop invariant i90: x is either 56 or 57;\nloop invariant i91: x is either 58 or 59;\nloop invariant i92: x is either 60 or 61;\nloop invariant i93: x is either 62 or 63;\nloop invariant i94: x is either 64 or 65;\nloop invariant i95: x is either 66 or 67;\nloop invariant i96: x is either 68 or 69;\nloop invariant i97: x is either 70 or 71;\nloop invariant i98: x is either 72 or 73;\nloop invariant i99: x is either 74 or 75;\nloop invariant i100: x is either 76 or 77;\nloop invariant i101: x is either 78 or 79;\nloop invariant i102: x is either 80 or 81;\nloop invariant i103: x is either 82 or 83;\nloop invariant i104: x is either 84 or 85;\nloop invariant i105: x is either 86 or 87;\nloop invariant i106: x is either 88 or 89;\nloop invariant i107: x is either 90 or 91;\nloop invariant i108: x is either 92 or 93;\nloop invariant i109: x is either 94 or 95;\nloop invariant i110: x is either 96 or 97;\nloop invariant i111: x is either 98 or 99;\nloop invariant i112: x is either 100 or 101;\nloop invariant i113: x is either 102 or 103;\nloop invariant i114: x is either 104 or 105;\nloop invariant i115: x is either 106 or 107;\nloop invariant i116: x is either 108 or 109;\nloop invariant i117: x is either 110 or 111;\nloop invariant i118: x is either 112 or 113;\nloop invariant i119: x is either 114 or 115;\nloop invariant i120: x is either 116 or 117;\nloop invariant i121: x is either 118 or 119;\nloop invariant i122: x is either 120 or 121;\nloop invariant i123: x is either 122 or 123;\nloop invariant i124: x is either 124 or 125;\nloop invariant i125: x is either 126 or 127;\nloop invariant i126: x is either 128 or 129;\nloop invariant i127: x is either 130 or 131;\nloop invariant i128: x is either 132 or 133;\nloop invariant i129: x is either 134 or 135;\nloop invariant i130: x is either 136 or 137;\nloop invariant i131: x is either 138 or 139;\nloop invariant i132: x is either 140 or 141;\nloop invariant i133: x is either 142 or 143;\nloop invariant i134: x==1 || x==2;\nloop invariant i135: (x==1) ==> (x<=8);\nloop invariant i136: (x==2) ==> (x<=8);\nloop invariant i137: (x==1) ==> (x>=1);\nloop invariant i138: (x==2) ==> (x>=2);\nloop invariant i139: x<=8 ==> (x>=1);\nloop invariant i140: x<=8 ==> (x<=2);\nloop invariant i141: (x==1) ==> (x==1 || (x==2));\nloop invariant i142: (x==2) ==> ((x==1 || x==2));\nloop invariant i143: (x==1 || x==2) ==> (x==1 || (x==2));\nloop invariant i144: (x==1 || x==2) ==> ((x==1 || x==2));\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 117,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: x <= 2;\nloop invariant i2: 1 <= x <= 8;\n\nloop invariant i4: (x == 1) || (x == 2);\nloop invariant i5: x == 1 || x == 2;\n\nloop invariant i7: 0 < x <= 2;\nloop invariant i8: 0 <= x <= 8;\n\n\n\n\n\n\nloop invariant i15: x == 1 ==> x == 2 ==> x == 1;\nloop invariant i16: x == 2 ==> x == 1 ==> x == 2;\n\n\nloop invariant i19: x == 1 ==> x == 2 ==> x == 1 ==> x == 2;\nloop invariant i20: x == 2 ==> x == 1 ==> x == 2 ==> x == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i45: 0 <= x <= 2;\nloop invariant i46: (x == 1) ==> (x == 2) || (x == 1);\nloop invariant i47: (x == 2) ==> (x == 1) || (x == 2);\n\n\n\nloop invariant i51: 1 <= x <= 2;\nloop invariant i52: ( ( x == 1 ) || ( x == 2 ) ) ==> ( ( x <= 8 ) && ( x > 0 ) );\n\n\nloop invariant i55: x <= 8;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i134: x==1 || x==2;\nloop invariant i135: (x==1) ==> (x<=8);\nloop invariant i136: (x==2) ==> (x<=8);\nloop invariant i137: (x==1) ==> (x>=1);\nloop invariant i138: (x==2) ==> (x>=2);\nloop invariant i139: x<=8 ==> (x>=1);\nloop invariant i140: x<=8 ==> (x<=2);\nloop invariant i141: (x==1) ==> (x==1 || (x==2));\nloop invariant i142: (x==2) ==> ((x==1 || x==2));\nloop invariant i143: (x==1 || x==2) ==> (x==1 || (x==2));\nloop invariant i144: (x==1 || x==2) ==> ((x==1 || x==2));\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c"
        ],
        "skipped": [],
        "total": 151,
        "success_count": 131,
        "failure_count": 20,
        "success_rate": 0.8675496688741722
    }
}