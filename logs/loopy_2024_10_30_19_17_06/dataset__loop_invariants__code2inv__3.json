{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/3.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    while(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant x * (x + 1) / 2 <= y;\nloop invariant z <= y;\nloop invariant y <= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant y <= z;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant y <= z;\n*/\n```",
            "```\n/*@\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant z <= y;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant z <= y;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant y <= 5;\nloop invariant z <= 5;\nloop invariant y <= z ==> z <= y;\nloop invariant y <= z ==> y <= z;\nloop invariant y <= z ==> y <= z;\nloop invariant x <= 5 ==> z <= y;\nloop invariant x <= 5 ==> y <= 5;\nloop invariant x <= 5 ==> y <= z;\nloop invariant y <= z ==> x <= 5;\nloop invariant y <= z ==> y <= 5;\nloop invariant y <= z ==> y <= z;\nloop invariant x <= 5 ==> y <= z;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y <= z;\nloop invariant z >= y;\nloop invariant y >= 0;\nloop invariant x <= 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y = z;\nloop invariant 0 <= z <= 100000;\nloop invariant x >= y;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant z >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant y <= z;\nloop invariant y <= x - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 0 <= y <= z;\nloop invariant (z - y) * (z - y - 1) / 2 <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant x != 5 ==> y <= z;\nloop invariant y == z ==> y == z;\nloop invariant y != z ==> y <= z;\nloop invariant x != 5 ==> y != z;\nloop invariant x != 5 ==> y != z;\nloop invariant x != 5 ==> y == z;\nloop invariant 0 <= x <= 5;\nloop invariant x != 5 ==> y <= z;\nloop invariant y == z ==> y == z;\nloop invariant y != z ==> y <= z;\nloop invariant x != 5 ==> y != z;\nloop invariant x != 5 ==> y != z;\nloop invariant x != 5 ==> y == z;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;loop invariant x >= 0;loop invariant x <= 5;loop invariant x >= 1;loop invariant x <= 4;loop invariant x >= 2;loop invariant x <= 3;loop invariant x >= 3;loop invariant x <= 4;loop invariant x >= 4;loop invariant x <= 5;loop invariant x >= 5;loop invariant x <= 6;loop invariant x >= 6;loop invariant x <= 7;loop invariant x >= 7;loop invariant x <= 8;loop invariant x >= 8;loop invariant x <= 9;loop invariant x >= 9;loop invariant x <= 10;loop invariant x >= 10;loop invariant x <= 11;loop invariant x >= 11;loop invariant x <= 12;loop invariant x >= 12;loop invariant x <= 13;loop invariant x >= 13;loop invariant x <= 14;loop invariant x >= 14;loop invariant x <= 15;loop invariant x >= 15;loop invariant x <= 16;loop invariant x >= 16;loop invariant x <= 17;loop invariant x >= 17;loop invariant x <= 18;loop invariant x >= 18;loop invariant x <= 19;loop invariant x >= 19;loop invariant x <= 20;loop invariant x >= 20;loop invariant x <= 21;loop invariant x >= 21;loop invariant x <= 22;loop invariant x >= 22;loop invariant x <= 23;loop invariant x >= 23;loop invariant x <= 24;loop invariant x >= 24;loop invariant x <= 25;loop invariant x >= 25;loop invariant x <= 26;loop invariant x >= 26;loop invariant x <= 27;loop invariant x >= 27;loop invariant x <= 28;loop invariant x >= 28;loop invariant x <= 29;loop invariant x >= 29;loop invariant x <= 30;loop invariant x >= 30;loop invariant x <= 31;loop invariant x >= 31;loop invariant x <= 32;loop invariant x >= 32;loop invariant x <= 33;loop invariant x >= 33;loop invariant x <= 34;loop invariant x >= 34;loop invariant x <= 35;loop invariant x >= 35;loop invariant x <= 36;loop invariant x >= 36;loop invariant x <= 37;loop invariant x >= 37;loop invariant x <= 38;loop invariant x >= 38;loop invariant x <= 39;loop invariant x >= 39;loop invariant x <= 40;loop invariant x >= 40;loop invariant x <= 41;loop invariant x >= 41;loop invariant x <= 42;loop invariant x >= 42;loop invariant x <= 43;loop invariant x >= 43;loop invariant x <= 44;loop invariant x >= 44;loop invariant x <= 45;loop invariant x >= 45;loop invariant x <= 46;loop invariant x >= 46;loop invariant x <= 47;loop invariant x >= 47;loop invariant x <= 48;loop invariant x >= 48;loop invariant x <= 49;loop invariant x >= 49;loop invariant x <= 50;loop invariant x >= 50;loop invariant x <= 51;loop invariant x >= 51;loop invariant x <= 52;loop invariant x >= 52;loop invariant x <= 53;loop invariant x >= 53;loop invariant x <= 54;loop invariant x >= 54;loop invariant x <= 55;loop invariant x >= 55;loop invariant x <= 56;loop invariant x >= 56;loop invariant x <= 57;loop invariant x >= 57;loop invariant x <= 58;loop invariant x >= 58;loop invariant x <= 59;loop invariant x >= 59;loop invariant x <= 60;loop invariant x >= 60;loop invariant x <= 61;loop invariant x >= 61;loop invariant x <= 62;loop invariant x >= 62;loop invariant x <= 63;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant x * (x + 1) / 2 <= y;\nloop invariant z <= y;\nloop invariant y <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\n\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant y <= z;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\nloop invariant i3: x >= 0;\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: x <= 5;\n\nloop invariant i3: x >= 0;\n\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant z <= y;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant z <= y;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\nloop invariant x <= 5;\nloop invariant y <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\nloop invariant i3: x <= 5;\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant y <= 5;\nloop invariant z <= 5;\nloop invariant y <= z ==> z <= y;\nloop invariant y <= z ==> y <= z;\nloop invariant y <= z ==> y <= z;\nloop invariant x <= 5 ==> z <= y;\nloop invariant x <= 5 ==> y <= 5;\nloop invariant x <= 5 ==> y <= z;\nloop invariant y <= z ==> x <= 5;\nloop invariant y <= z ==> y <= 5;\nloop invariant y <= z ==> y <= z;\nloop invariant x <= 5 ==> y <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\n\n\nloop invariant i5: y <= z ==> y <= z;\n\n\n\nloop invariant i9: y <= z ==> x <= 5;\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y <= z;\nloop invariant z >= y;\nloop invariant y >= 0;\nloop invariant x <= 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: x >= 0;\n\n\n\nloop invariant i5: x <= 5;\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y = z;\nloop invariant 0 <= z <= 100000;\nloop invariant x >= y;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant z >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\n\n\n\n\n\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant y <= z;\nloop invariant y <= x - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\nloop invariant (x < 5) ==> (y >= z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 0 <= y <= z;\nloop invariant (z - y) * (z - y - 1) / 2 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant x != 5 ==> y <= z;\nloop invariant y == z ==> y == z;\nloop invariant y != z ==> y <= z;\nloop invariant x != 5 ==> y != z;\nloop invariant x != 5 ==> y != z;\nloop invariant x != 5 ==> y == z;\nloop invariant 0 <= x <= 5;\nloop invariant x != 5 ==> y <= z;\nloop invariant y == z ==> y == z;\nloop invariant y != z ==> y <= z;\nloop invariant x != 5 ==> y != z;\nloop invariant x != 5 ==> y != z;\nloop invariant x != 5 ==> y == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\nloop invariant i3: y == z ==> y == z;\n\n\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\n\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;loop invariant x >= 0;loop invariant x <= 5;loop invariant x >= 1;loop invariant x <= 4;loop invariant x >= 2;loop invariant x <= 3;loop invariant x >= 3;loop invariant x <= 4;loop invariant x >= 4;loop invariant x <= 5;loop invariant x >= 5;loop invariant x <= 6;loop invariant x >= 6;loop invariant x <= 7;loop invariant x >= 7;loop invariant x <= 8;loop invariant x >= 8;loop invariant x <= 9;loop invariant x >= 9;loop invariant x <= 10;loop invariant x >= 10;loop invariant x <= 11;loop invariant x >= 11;loop invariant x <= 12;loop invariant x >= 12;loop invariant x <= 13;loop invariant x >= 13;loop invariant x <= 14;loop invariant x >= 14;loop invariant x <= 15;loop invariant x >= 15;loop invariant x <= 16;loop invariant x >= 16;loop invariant x <= 17;loop invariant x >= 17;loop invariant x <= 18;loop invariant x >= 18;loop invariant x <= 19;loop invariant x >= 19;loop invariant x <= 20;loop invariant x >= 20;loop invariant x <= 21;loop invariant x >= 21;loop invariant x <= 22;loop invariant x >= 22;loop invariant x <= 23;loop invariant x >= 23;loop invariant x <= 24;loop invariant x >= 24;loop invariant x <= 25;loop invariant x >= 25;loop invariant x <= 26;loop invariant x >= 26;loop invariant x <= 27;loop invariant x >= 27;loop invariant x <= 28;loop invariant x >= 28;loop invariant x <= 29;loop invariant x >= 29;loop invariant x <= 30;loop invariant x >= 30;loop invariant x <= 31;loop invariant x >= 31;loop invariant x <= 32;loop invariant x >= 32;loop invariant x <= 33;loop invariant x >= 33;loop invariant x <= 34;loop invariant x >= 34;loop invariant x <= 35;loop invariant x >= 35;loop invariant x <= 36;loop invariant x >= 36;loop invariant x <= 37;loop invariant x >= 37;loop invariant x <= 38;loop invariant x >= 38;loop invariant x <= 39;loop invariant x >= 39;loop invariant x <= 40;loop invariant x >= 40;loop invariant x <= 41;loop invariant x >= 41;loop invariant x <= 42;loop invariant x >= 42;loop invariant x <= 43;loop invariant x >= 43;loop invariant x <= 44;loop invariant x >= 44;loop invariant x <= 45;loop invariant x >= 45;loop invariant x <= 46;loop invariant x >= 46;loop invariant x <= 47;loop invariant x >= 47;loop invariant x <= 48;loop invariant x >= 48;loop invariant x <= 49;loop invariant x >= 49;loop invariant x <= 50;loop invariant x >= 50;loop invariant x <= 51;loop invariant x >= 51;loop invariant x <= 52;loop invariant x >= 52;loop invariant x <= 53;loop invariant x >= 53;loop invariant x <= 54;loop invariant x >= 54;loop invariant x <= 55;loop invariant x >= 55;loop invariant x <= 56;loop invariant x >= 56;loop invariant x <= 57;loop invariant x >= 57;loop invariant x <= 58;loop invariant x >= 58;loop invariant x <= 59;loop invariant x >= 59;loop invariant x <= 60;loop invariant x >= 60;loop invariant x <= 61;loop invariant x >= 61;loop invariant x <= 62;loop invariant x >= 62;loop invariant x <= 63;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;loop invariant x >= 0;loop invariant x <= 5;loop invariant x >= 1;loop invariant x <= 4;loop invariant x >= 2;loop invariant x <= 3;loop invariant x >= 3;loop invariant x <= 4;loop invariant x >= 4;loop invariant x <= 5;loop invariant x >= 5;loop invariant x <= 6;loop invariant x >= 6;loop invariant x <= 7;loop invariant x >= 7;loop invariant x <= 8;loop invariant x >= 8;loop invariant x <= 9;loop invariant x >= 9;loop invariant x <= 10;loop invariant x >= 10;loop invariant x <= 11;loop invariant x >= 11;loop invariant x <= 12;loop invariant x >= 12;loop invariant x <= 13;loop invariant x >= 13;loop invariant x <= 14;loop invariant x >= 14;loop invariant x <= 15;loop invariant x >= 15;loop invariant x <= 16;loop invariant x >= 16;loop invariant x <= 17;loop invariant x >= 17;loop invariant x <= 18;loop invariant x >= 18;loop invariant x <= 19;loop invariant x >= 19;loop invariant x <= 20;loop invariant x >= 20;loop invariant x <= 21;loop invariant x >= 21;loop invariant x <= 22;loop invariant x >= 22;loop invariant x <= 23;loop invariant x >= 23;loop invariant x <= 24;loop invariant x >= 24;loop invariant x <= 25;loop invariant x >= 25;loop invariant x <= 26;loop invariant x >= 26;loop invariant x <= 27;loop invariant x >= 27;loop invariant x <= 28;loop invariant x >= 28;loop invariant x <= 29;loop invariant x >= 29;loop invariant x <= 30;loop invariant x >= 30;loop invariant x <= 31;loop invariant x >= 31;loop invariant x <= 32;loop invariant x >= 32;loop invariant x <= 33;loop invariant x >= 33;loop invariant x <= 34;loop invariant x >= 34;loop invariant x <= 35;loop invariant x >= 35;loop invariant x <= 36;loop invariant x >= 36;loop invariant x <= 37;loop invariant x >= 37;loop invariant x <= 38;loop invariant x >= 38;loop invariant x <= 39;loop invariant x >= 39;loop invariant x <= 40;loop invariant x >= 40;loop invariant x <= 41;loop invariant x >= 41;loop invariant x <= 42;loop invariant x >= 42;loop invariant x <= 43;loop invariant x >= 43;loop invariant x <= 44;loop invariant x >= 44;loop invariant x <= 45;loop invariant x >= 45;loop invariant x <= 46;loop invariant x >= 46;loop invariant x <= 47;loop invariant x >= 47;loop invariant x <= 48;loop invariant x >= 48;loop invariant x <= 49;loop invariant x >= 49;loop invariant x <= 50;loop invariant x >= 50;loop invariant x <= 51;loop invariant x >= 51;loop invariant x <= 52;loop invariant x >= 52;loop invariant x <= 53;loop invariant x >= 53;loop invariant x <= 54;loop invariant x >= 54;loop invariant x <= 55;loop invariant x >= 55;loop invariant x <= 56;loop invariant x >= 56;loop invariant x <= 57;loop invariant x >= 57;loop invariant x <= 58;loop invariant x >= 58;loop invariant x <= 59;loop invariant x >= 59;loop invariant x <= 60;loop invariant x >= 60;loop invariant x <= 61;loop invariant x >= 61;loop invariant x <= 62;loop invariant x >= 62;loop invariant x <= 63;\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 32: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\nloop invariant i2: x * (x + 1) / 2 <= y;\nloop invariant i3: z <= y;\nloop invariant i4: y <= z;\nloop invariant i5: x >= 0;\nloop invariant i6: x <= 5;\nloop invariant i7: y >= 0;\nloop invariant i8: y <= x;\nloop invariant i9: y <= 5;\nloop invariant i10: z <= 5;\nloop invariant i11: y <= z ==> z <= y;\nloop invariant i12: y <= z ==> y <= z;\nloop invariant i13: x <= 5 ==> z <= y;\nloop invariant i14: x <= 5 ==> y <= 5;\nloop invariant i15: x <= 5 ==> y <= z;\nloop invariant i16: y <= z ==> x <= 5;\nloop invariant i17: y <= z ==> y <= 5;\nloop invariant i18: z >= y;\nloop invariant i19: 0 <= x <= 4;\nloop invariant i20: y = z;\nloop invariant i21: 0 <= z <= 100000;\nloop invariant i22: x >= y;\nloop invariant i23: x >= (y - 1) * y / 2;\nloop invariant i24: z >= (1 + (y - 1) * y / 2);\nloop invariant i25: y <= x - 1;\nloop invariant i26: (x < 5) ==> (y >= z);\nloop invariant i27: 0 <= y <= z;\nloop invariant i28: (z - y) * (z - y - 1) / 2 <= x;\nloop invariant i29: x != 5 ==> y <= z;\nloop invariant i30: y == z ==> y == z;\nloop invariant i31: y != z ==> y <= z;\nloop invariant i32: x != 5 ==> y != z;\nloop invariant i33: x != 5 ==> y == z;\nloop invariant i34: 0 <= x <= 5;loop invariant x >= 0;loop invariant x <= 5;loop invariant x >= 1;loop invariant x <= 4;loop invariant x >= 2;loop invariant x <= 3;loop invariant x >= 3;loop invariant x <= 4;loop invariant x >= 4;loop invariant x <= 5;loop invariant x >= 5;loop invariant x <= 6;loop invariant x >= 6;loop invariant x <= 7;loop invariant x >= 7;loop invariant x <= 8;loop invariant x >= 8;loop invariant x <= 9;loop invariant x >= 9;loop invariant x <= 10;loop invariant x >= 10;loop invariant x <= 11;loop invariant x >= 11;loop invariant x <= 12;loop invariant x >= 12;loop invariant x <= 13;loop invariant x >= 13;loop invariant x <= 14;loop invariant x >= 14;loop invariant x <= 15;loop invariant x >= 15;loop invariant x <= 16;loop invariant x >= 16;loop invariant x <= 17;loop invariant x >= 17;loop invariant x <= 18;loop invariant x >= 18;loop invariant x <= 19;loop invariant x >= 19;loop invariant x <= 20;loop invariant x >= 20;loop invariant x <= 21;loop invariant x >= 21;loop invariant x <= 22;loop invariant x >= 22;loop invariant x <= 23;loop invariant x >= 23;loop invariant x <= 24;loop invariant x >= 24;loop invariant x <= 25;loop invariant x >= 25;loop invariant x <= 26;loop invariant x >= 26;loop invariant x <= 27;loop invariant x >= 27;loop invariant x <= 28;loop invariant x >= 28;loop invariant x <= 29;loop invariant x >= 29;loop invariant x <= 30;loop invariant x >= 30;loop invariant x <= 31;loop invariant x >= 31;loop invariant x <= 32;loop invariant x >= 32;loop invariant x <= 33;loop invariant x >= 33;loop invariant x <= 34;loop invariant x >= 34;loop invariant x <= 35;loop invariant x >= 35;loop invariant x <= 36;loop invariant x >= 36;loop invariant x <= 37;loop invariant x >= 37;loop invariant x <= 38;loop invariant x >= 38;loop invariant x <= 39;loop invariant x >= 39;loop invariant x <= 40;loop invariant x >= 40;loop invariant x <= 41;loop invariant x >= 41;loop invariant x <= 42;loop invariant x >= 42;loop invariant x <= 43;loop invariant x >= 43;loop invariant x <= 44;loop invariant x >= 44;loop invariant x <= 45;loop invariant x >= 45;loop invariant x <= 46;loop invariant x >= 46;loop invariant x <= 47;loop invariant x >= 47;loop invariant x <= 48;loop invariant x >= 48;loop invariant x <= 49;loop invariant x >= 49;loop invariant x <= 50;loop invariant x >= 50;loop invariant x <= 51;loop invariant x >= 51;loop invariant x <= 52;loop invariant x >= 52;loop invariant x <= 53;loop invariant x >= 53;loop invariant x <= 54;loop invariant x >= 54;loop invariant x <= 55;loop invariant x >= 55;loop invariant x <= 56;loop invariant x >= 56;loop invariant x <= 57;loop invariant x >= 57;loop invariant x <= 58;loop invariant x >= 58;loop invariant x <= 59;loop invariant x >= 59;loop invariant x <= 60;loop invariant x >= 60;loop invariant x <= 61;loop invariant x >= 61;loop invariant x <= 62;loop invariant x >= 62;loop invariant x <= 63;\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 5;\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: x <= 5;\n\n\n\n\n\nloop invariant i12: y <= z ==> y <= z;\n\n\n\nloop invariant i16: y <= z ==> x <= 5;\n\n\nloop invariant i19: 0 <= x <= 4;\n\n\n\n\n\n\n\n\n\n\nloop invariant i30: y == z ==> y == z;\n\n\n\nloop invariant i34: 0 <= x <= 5;loop invariant x >= 0;loop invariant x <= 5;loop invariant x >= 1;loop invariant x <= 4;loop invariant x >= 2;loop invariant x <= 3;loop invariant x >= 3;loop invariant x <= 4;loop invariant x >= 4;loop invariant x <= 5;loop invariant x >= 5;loop invariant x <= 6;loop invariant x >= 6;loop invariant x <= 7;loop invariant x >= 7;loop invariant x <= 8;loop invariant x >= 8;loop invariant x <= 9;loop invariant x >= 9;loop invariant x <= 10;loop invariant x >= 10;loop invariant x <= 11;loop invariant x >= 11;loop invariant x <= 12;loop invariant x >= 12;loop invariant x <= 13;loop invariant x >= 13;loop invariant x <= 14;loop invariant x >= 14;loop invariant x <= 15;loop invariant x >= 15;loop invariant x <= 16;loop invariant x >= 16;loop invariant x <= 17;loop invariant x >= 17;loop invariant x <= 18;loop invariant x >= 18;loop invariant x <= 19;loop invariant x >= 19;loop invariant x <= 20;loop invariant x >= 20;loop invariant x <= 21;loop invariant x >= 21;loop invariant x <= 22;loop invariant x >= 22;loop invariant x <= 23;loop invariant x >= 23;loop invariant x <= 24;loop invariant x >= 24;loop invariant x <= 25;loop invariant x >= 25;loop invariant x <= 26;loop invariant x >= 26;loop invariant x <= 27;loop invariant x >= 27;loop invariant x <= 28;loop invariant x >= 28;loop invariant x <= 29;loop invariant x >= 29;loop invariant x <= 30;loop invariant x >= 30;loop invariant x <= 31;loop invariant x >= 31;loop invariant x <= 32;loop invariant x >= 32;loop invariant x <= 33;loop invariant x >= 33;loop invariant x <= 34;loop invariant x >= 34;loop invariant x <= 35;loop invariant x >= 35;loop invariant x <= 36;loop invariant x >= 36;loop invariant x <= 37;loop invariant x >= 37;loop invariant x <= 38;loop invariant x >= 38;loop invariant x <= 39;loop invariant x >= 39;loop invariant x <= 40;loop invariant x >= 40;loop invariant x <= 41;loop invariant x >= 41;loop invariant x <= 42;loop invariant x >= 42;loop invariant x <= 43;loop invariant x >= 43;loop invariant x <= 44;loop invariant x >= 44;loop invariant x <= 45;loop invariant x >= 45;loop invariant x <= 46;loop invariant x >= 46;loop invariant x <= 47;loop invariant x >= 47;loop invariant x <= 48;loop invariant x >= 48;loop invariant x <= 49;loop invariant x >= 49;loop invariant x <= 50;loop invariant x >= 50;loop invariant x <= 51;loop invariant x >= 51;loop invariant x <= 52;loop invariant x >= 52;loop invariant x <= 53;loop invariant x >= 53;loop invariant x <= 54;loop invariant x >= 54;loop invariant x <= 55;loop invariant x >= 55;loop invariant x <= 56;loop invariant x >= 56;loop invariant x <= 57;loop invariant x >= 57;loop invariant x <= 58;loop invariant x >= 58;loop invariant x <= 59;loop invariant x >= 59;loop invariant x <= 60;loop invariant x >= 60;loop invariant x <= 61;loop invariant x >= 61;loop invariant x <= 62;loop invariant x >= 62;loop invariant x <= 63;\n*/\nwhile(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 17,
        "failure_count": 6,
        "success_rate": 0.7391304347826086
    }
}