{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant 0 <= z <= 2147483647;\nloop invariant x == y;\nloop invariant z == x - y;\nloop invariant 0 <= x + y + z <= 2147483647;\nloop invariant !unknown_bool() ==> x == y && x >= 0 && x+y+z==0;\nloop invariant unknown_bool() ==> x == y && x >= 0 && x+y+z==0;\nloop invariant unknown_bool() ==> 0 <= x <= 2147483647;\nloop invariant unknown_bool() ==> 0 <= y <= 2147483647;\nloop invariant unknown_bool() ==> 0 <= z <= 2147483647;\nloop invariant unknown_bool() ==> x == y;\nloop invariant unknown_bool() ==> z == x - y;\nloop invariant unknown_bool() ==> 0 <= x + y + z <= 2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 100000 >= y >= 0;\nloop invariant x + y + z == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z == -100000;\nloop invariant x + y >= 0;\nloop invariant x + z == 0;\nloop invariant y + z == -100000;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x == y + z;\nloop invariant y == x - z;\nloop invariant z == x - y;\nloop invariant x >= y + z;\nloop invariant y >= x - z;\nloop invariant z >= x - y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x >= y + z;\nloop invariant y >= x + z;\nloop invariant z >= x + y;\nloop invariant x + y + z == 0;\nloop invariant x + y == -z;\nloop invariant y + z == -x;\nloop invariant z + x == -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\n*/\n```",
            "```\n/*@\nloop invariant x == y && y == 0 && z == 0;\nloop invariant x == y && y >= 0 && z <= 0 && x+y+z == 0 ==> unknown_bool();\nloop invariant x >= 0 && y >= 0 && z <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x;\nloop invariant 1 <= y;\nloop invariant z == -x - y;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant x + y + z == 0;\nloop invariant x == y + 1;\nloop invariant y == x - 1;\nloop invariant z == -x - y - 2;\nloop invariant x == y - 1;\nloop invariant y == x + 1;\nloop invariant z == -x - y + 2;\nloop invariant x == y + 2;\nloop invariant y == x - 2;\nloop invariant z == -x - y - 4;\nloop invariant x == y - 2;\nloop invariant y == x + 2;\nloop invariant z == -x - y + 4;\nloop invariant x == y + 3;\nloop invariant y == x - 3;\nloop invariant z == -x - y - 6;\nloop invariant x == y - 3;\nloop invariant y == x + 3;\nloop invariant z == -x - y + 6;\nloop invariant x == y + 4;\nloop invariant y == x - 4;\nloop invariant z == -x - y - 8;\nloop invariant x == y - 4;\nloop invariant y == x + 4;\nloop invariant z == -x - y + 8;\nloop invariant x == y + 5;\nloop invariant y == x - 5;\nloop invariant z == -x - y - 10;\nloop invariant x == y - 5;\nloop invariant y == x + 5;\nloop invariant z == -x - y + 10;\nloop invariant x == y + 6;\nloop invariant y == x - 6;\nloop invariant z == -x - y - 12;\nloop invariant x == y - 6;\nloop invariant y == x + 6;\nloop invariant z == -x - y + 12;\nloop invariant x == y + 7;\nloop invariant y == x - 7;\nloop invariant z == -x - y - 14;\nloop invariant x == y - 7;\nloop invariant y == x + 7;\nloop invariant z == -x - y + 14;\nloop invariant x == y + 8;\nloop invariant y == x - 8;\nloop invariant z == -x - y - 16;\nloop invariant x == y - 8;\nloop invariant y == x + 8;\nloop invariant z == -x - y + 16;\nloop invariant x == y + 9;\nloop invariant y == x - 9;\nloop invariant z == -x - y - 18;\nloop invariant x == y - 9;\nloop invariant y == x + 9;\nloop invariant z == -x - y + 18;\nloop invariant x == y + 10;\nloop invariant y == x - 10;\nloop invariant z == -x - y - 20;\nloop invariant x == y - 10;\nloop invariant y == x + 10;\nloop invariant z == -x - y + 20;\nloop invariant x == y + 11;\nloop invariant y == x - 11;\nloop invariant z == -x - y - 22;\nloop invariant x == y - 11;\nloop invariant y == x + 11;\nloop invariant z == -x - y + 22;\nloop invariant x == y + 12;\nloop invariant y == x - 12;\nloop invariant z == -x - y - 24;\nloop invariant x == y - 12;\nloop invariant y == x + 12;\nloop invariant z == -x - y + 24;\nloop invariant x == y + 13;\nloop invariant y == x - 13;\nloop invariant z == -x - y - 26;\nloop invariant x == y - 13;\nloop invariant y == x + 13;\nloop invariant z == -x - y + 26;\nloop invariant x == y + 14;\nloop invariant y == x - 14;\nloop invariant z == -x - y - 28;\nloop invariant x == y - 14;\nloop invariant y == x + 14;\nloop invariant z == -x - y + 28;\nloop invariant x == y + 15;\nloop invariant y == x - 15;\nloop invariant z == -x - y - 30;\nloop invariant x == y - 15;\nloop invariant y == x + 15;\nloop invariant z == -x - y + 30;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x+y+z <= 200000;\n*/\n```",
            "```\n/*@\nloop invariant x == y && y >= 0 && z == -2 * y && x + y + z == 0 ==> unknown_bool();\nloop invariant x == y && y >= 0 && z == -2 * y && x + y + z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x+y+z==0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y; loop invariant x >= y - x; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0 ==> y==0; loop invariant x+y==0; loop invariant x+y+z==0 ==> z==0; loop invariant x == y ==> z == 0; loop invariant x+y+z==0 ==> y == 0; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0; loop invariant y==0; loop invariant z==0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x+y+z==0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x+y == y;\nloop invariant x == y;\nloop invariant x == y && x == 0;\nloop invariant x == y && x == 0 && z == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x == y;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x + y + z == 0;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 0;\nloop invariant x + y + z < 0;\nloop invariant x + y + z > 0;\nloop invariant x + y + z == x;\nloop invariant x + y + z == y;\nloop invariant x + y + z == z;\nloop invariant x + y + z == 0;\nloop invariant x + y + z == 1;\nloop invariant x + y + z == -1;\nloop invariant x + y + z == 2;\nloop invariant x + y + z == -2;\nloop invariant x + y + z == 3;\nloop invariant x + y + z == -3;\nloop invariant x + y + z == 4;\nloop invariant x + y + z == -4;\nloop invariant x + y + z == 5;\nloop invariant x + y + z == -5;\nloop invariant x + y + z == 6;\nloop invariant x + y + z == -6;\nloop invariant x + y + z == 7;\nloop invariant x + y + z == -7;\nloop invariant x + y + z == 8;\nloop invariant x + y + z == -8;\nloop invariant x + y + z == 9;\nloop invariant x + y + z == -9;\nloop invariant x + y + z == 10;\nloop invariant x + y + z == -10;\nloop invariant x + y + z == 11;\nloop invariant x + y + z == -11;\nloop invariant x + y + z == 12;\nloop invariant x + y + z == -12;\nloop invariant x + y + z == 13;\nloop invariant x + y + z == -13;\nloop invariant x + y + z == 14;\nloop invariant x + y + z == -14;\nloop invariant x + y + z == 15;\nloop invariant x + y + z == -15;\nloop invariant x + y + z == 16;\nloop invariant x + y + z == -16;\nloop invariant x + y + z == 17;\nloop invariant x + y + z == -17;\nloop invariant x + y + z == 18;\nloop invariant x + y + z == -18;\nloop invariant x + y + z == 19;\nloop invariant x + y + z == -19;\nloop invariant x + y + z == 20;\nloop invariant x + y + z == -20;\nloop invariant x + y + z == 21;\nloop invariant x + y + z == -21;\nloop invariant x + y + z == 22;\nloop invariant x + y + z == -22;\nloop invariant x + y + z == 23;\nloop invariant x + y + z == -23;\nloop invariant x + y + z == 24;\nloop invariant x + y + z == -24;\nloop invariant x + y + z == 25;\nloop invariant x + y + z == -25;\nloop invariant x + y + z == 26;\nloop invariant x + y + z == -26;\nloop invariant x + y + z == 27;\nloop invariant x + y + z == -27;\nloop invariant x + y + z == 28;\nloop invariant x + y + z == -28;\nloop invariant x + y + z == 29;\nloop invariant x + y + z == -29;\nloop invariant x + y + z == 30;\nloop invariant x + y + z == -30;\nloop invariant x + y + z == 31;\nloop invariant x + y + z == -31;\nloop invariant x + y + z == 32;\nloop invariant x + y + z == -32;\nloop invariant x + y + z == 33;\nloop invariant x + y + z == -33;\nloop invariant x + y + z == 34;\nloop invariant x + y + z == -34;\nloop invariant x + y + z == 35;\nloop invariant x + y + z == -35;\nloop invariant x + y + z == 36;\nloop invariant x + y + z == -36;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2^31-1;\nloop invariant -2^31 <= y <= 2^31-1;\nloop invariant -2^31 <= z <= 2^31-1;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant x+y+z==0 ==> x == y && x >= 0 && x+y+z==0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= x + y;\nloop invariant z <= z - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x + y + z <= 3;\nloop invariant x == y;\nloop invariant x == z;\nloop invariant y == z;\nloop invariant x == y + z;\nloop invariant y == x + z;\nloop invariant z == x + y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 1;\nloop invariant y <= 1;\nloop invariant z <= 1;\nloop invariant x == 0 ==> y == 0 && z == 0;\nloop invariant y == 0 ==> x == 0 && z == 0;\nloop invariant z == 0 ==> x == 0 && y == 0;\nloop invariant x == y ==> x == z && y == z;\nloop invariant y == z ==> x == y && x == z;\nloop invariant z == x ==> y == x && y == z;\nloop invariant x >= 0 ==> y >= 0 && z >= 0;\nloop invariant y >= 0 ==> x >= 0 && z >= 0;\nloop invariant z >= 0 ==> x >= 0 && y >= 0;\nloop invariant x <= 1 ==> y <= 1 && z <= 1;\nloop invariant y <= 1 ==> x <= 1 && z <= 1;\nloop invariant z <= 1 ==> x <= 1 && y <= 1;\nloop invariant x == y ==> x == z && y == z ==> x == y + z;\nloop invariant y == z ==> x == y && x == z ==> x == y + z;\nloop invariant z == x ==> y == x && y == z ==> x == y + z;\nloop invariant x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z;\nloop invariant x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z;\nloop invariant y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z;\nloop invariant z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z;\nloop invariant x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant 0 <= z <= 2147483647;\nloop invariant x == y;\nloop invariant z == x - y;\nloop invariant 0 <= x + y + z <= 2147483647;\nloop invariant !unknown_bool() ==> x == y && x >= 0 && x+y+z==0;\nloop invariant unknown_bool() ==> x == y && x >= 0 && x+y+z==0;\nloop invariant unknown_bool() ==> 0 <= x <= 2147483647;\nloop invariant unknown_bool() ==> 0 <= y <= 2147483647;\nloop invariant unknown_bool() ==> 0 <= z <= 2147483647;\nloop invariant unknown_bool() ==> x == y;\nloop invariant unknown_bool() ==> z == x - y;\nloop invariant unknown_bool() ==> 0 <= x + y + z <= 2147483647;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2147483647;\nloop invariant i2: 0 <= y <= 2147483647;\n\nloop invariant i4: x == y;\n\nloop invariant i6: 0 <= x + y + z <= 2147483647;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 100000 >= y >= 0;\nloop invariant x + y + z == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z == -100000;\nloop invariant x + y >= 0;\nloop invariant x + z == 0;\nloop invariant y + z == -100000;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x == y + z;\nloop invariant y == x - z;\nloop invariant z == x - y;\nloop invariant x >= y + z;\nloop invariant y >= x - z;\nloop invariant z >= x - y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x >= y + z;\nloop invariant y >= x + z;\nloop invariant z >= x + y;\nloop invariant x + y + z == 0;\nloop invariant x + y == -z;\nloop invariant y + z == -x;\nloop invariant z + x == -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\nloop invariant z + x == y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= -z;\nloop invariant y + z >= -x;\nloop invariant z + x >= -y;\nloop invariant x + y + z == 0;\nloop invariant x + y >= z;\nloop invariant y + z >= x;\nloop invariant z + x >= y;\nloop invariant x + y + z == 0;\nloop invariant x + y == z;\nloop invariant y + z == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\n\nloop invariant i2: x + y + z == 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\nloop invariant i6: x + y >= 0;\n\n\nloop invariant i9: x >= y;\nloop invariant i10: x >= z;\nloop invariant i11: y >= z;\n\n\n\nloop invariant i15: x >= y + z;\n\n\n\n\n\nloop invariant i21: y >= x + z;\n\nloop invariant i23: x + y == -z;\nloop invariant i24: y + z == -x;\nloop invariant i25: z + x == -y;\nloop invariant i26: x + y >= -z;\nloop invariant i27: y + z >= -x;\nloop invariant i28: z + x >= -y;\nloop invariant i29: x + y >= z;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x == y && y == 0 && z == 0;\nloop invariant x == y && y >= 0 && z <= 0 && x+y+z == 0 ==> unknown_bool();\nloop invariant x >= 0 && y >= 0 && z <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\n\n\nloop invariant i3: x >= 0 && y >= 0 && z <= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 92,
                "annotations": "```\n/*@\nloop invariant 1 <= x;\nloop invariant 1 <= y;\nloop invariant z == -x - y;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant x + y + z == 0;\nloop invariant x == y + 1;\nloop invariant y == x - 1;\nloop invariant z == -x - y - 2;\nloop invariant x == y - 1;\nloop invariant y == x + 1;\nloop invariant z == -x - y + 2;\nloop invariant x == y + 2;\nloop invariant y == x - 2;\nloop invariant z == -x - y - 4;\nloop invariant x == y - 2;\nloop invariant y == x + 2;\nloop invariant z == -x - y + 4;\nloop invariant x == y + 3;\nloop invariant y == x - 3;\nloop invariant z == -x - y - 6;\nloop invariant x == y - 3;\nloop invariant y == x + 3;\nloop invariant z == -x - y + 6;\nloop invariant x == y + 4;\nloop invariant y == x - 4;\nloop invariant z == -x - y - 8;\nloop invariant x == y - 4;\nloop invariant y == x + 4;\nloop invariant z == -x - y + 8;\nloop invariant x == y + 5;\nloop invariant y == x - 5;\nloop invariant z == -x - y - 10;\nloop invariant x == y - 5;\nloop invariant y == x + 5;\nloop invariant z == -x - y + 10;\nloop invariant x == y + 6;\nloop invariant y == x - 6;\nloop invariant z == -x - y - 12;\nloop invariant x == y - 6;\nloop invariant y == x + 6;\nloop invariant z == -x - y + 12;\nloop invariant x == y + 7;\nloop invariant y == x - 7;\nloop invariant z == -x - y - 14;\nloop invariant x == y - 7;\nloop invariant y == x + 7;\nloop invariant z == -x - y + 14;\nloop invariant x == y + 8;\nloop invariant y == x - 8;\nloop invariant z == -x - y - 16;\nloop invariant x == y - 8;\nloop invariant y == x + 8;\nloop invariant z == -x - y + 16;\nloop invariant x == y + 9;\nloop invariant y == x - 9;\nloop invariant z == -x - y - 18;\nloop invariant x == y - 9;\nloop invariant y == x + 9;\nloop invariant z == -x - y + 18;\nloop invariant x == y + 10;\nloop invariant y == x - 10;\nloop invariant z == -x - y - 20;\nloop invariant x == y - 10;\nloop invariant y == x + 10;\nloop invariant z == -x - y + 20;\nloop invariant x == y + 11;\nloop invariant y == x - 11;\nloop invariant z == -x - y - 22;\nloop invariant x == y - 11;\nloop invariant y == x + 11;\nloop invariant z == -x - y + 22;\nloop invariant x == y + 12;\nloop invariant y == x - 12;\nloop invariant z == -x - y - 24;\nloop invariant x == y - 12;\nloop invariant y == x + 12;\nloop invariant z == -x - y + 24;\nloop invariant x == y + 13;\nloop invariant y == x - 13;\nloop invariant z == -x - y - 26;\nloop invariant x == y - 13;\nloop invariant y == x + 13;\nloop invariant z == -x - y + 26;\nloop invariant x == y + 14;\nloop invariant y == x - 14;\nloop invariant z == -x - y - 28;\nloop invariant x == y - 14;\nloop invariant y == x + 14;\nloop invariant z == -x - y + 28;\nloop invariant x == y + 15;\nloop invariant y == x - 15;\nloop invariant z == -x - y - 30;\nloop invariant x == y - 15;\nloop invariant y == x + 15;\nloop invariant z == -x - y + 30;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\n\n\nloop invariant i3: z == -x - y;\nloop invariant i4: x == y;\nloop invariant i5: x >= 0;\nloop invariant i6: x + y + z == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x+y+z <= 200000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: 0 <= x+y+z <= 200000;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x == y && y >= 0 && z == -2 * y && x + y + z == 0 ==> unknown_bool();\nloop invariant x == y && y >= 0 && z == -2 * y && x + y + z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\n\nloop invariant i2: x == y && y >= 0 && z == -2 * y && x + y + z == 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x+y+z==0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x+y+z==0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y; loop invariant x >= y - x; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0 ==> y==0; loop invariant x+y==0; loop invariant x+y+z==0 ==> z==0; loop invariant x == y ==> z == 0; loop invariant x+y+z==0 ==> y == 0; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0; loop invariant y==0; loop invariant z==0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y; loop invariant x >= y - x; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0 ==> y==0; loop invariant x+y==0; loop invariant x+y+z==0 ==> z==0; loop invariant x == y ==> z == 0; loop invariant x+y+z==0 ==> y == 0; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0; loop invariant y==0; loop invariant z==0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x+y+z==0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x+y == y;\nloop invariant x == y;\nloop invariant x == y && x == 0;\nloop invariant x == y && x == 0 && z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x+y+z==0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\nloop invariant i7: x == y;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 81,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x == y;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x + y + z == 0;\nloop invariant x + y + z >= 0;\nloop invariant x + y + z <= 0;\nloop invariant x + y + z < 0;\nloop invariant x + y + z > 0;\nloop invariant x + y + z == x;\nloop invariant x + y + z == y;\nloop invariant x + y + z == z;\nloop invariant x + y + z == 0;\nloop invariant x + y + z == 1;\nloop invariant x + y + z == -1;\nloop invariant x + y + z == 2;\nloop invariant x + y + z == -2;\nloop invariant x + y + z == 3;\nloop invariant x + y + z == -3;\nloop invariant x + y + z == 4;\nloop invariant x + y + z == -4;\nloop invariant x + y + z == 5;\nloop invariant x + y + z == -5;\nloop invariant x + y + z == 6;\nloop invariant x + y + z == -6;\nloop invariant x + y + z == 7;\nloop invariant x + y + z == -7;\nloop invariant x + y + z == 8;\nloop invariant x + y + z == -8;\nloop invariant x + y + z == 9;\nloop invariant x + y + z == -9;\nloop invariant x + y + z == 10;\nloop invariant x + y + z == -10;\nloop invariant x + y + z == 11;\nloop invariant x + y + z == -11;\nloop invariant x + y + z == 12;\nloop invariant x + y + z == -12;\nloop invariant x + y + z == 13;\nloop invariant x + y + z == -13;\nloop invariant x + y + z == 14;\nloop invariant x + y + z == -14;\nloop invariant x + y + z == 15;\nloop invariant x + y + z == -15;\nloop invariant x + y + z == 16;\nloop invariant x + y + z == -16;\nloop invariant x + y + z == 17;\nloop invariant x + y + z == -17;\nloop invariant x + y + z == 18;\nloop invariant x + y + z == -18;\nloop invariant x + y + z == 19;\nloop invariant x + y + z == -19;\nloop invariant x + y + z == 20;\nloop invariant x + y + z == -20;\nloop invariant x + y + z == 21;\nloop invariant x + y + z == -21;\nloop invariant x + y + z == 22;\nloop invariant x + y + z == -22;\nloop invariant x + y + z == 23;\nloop invariant x + y + z == -23;\nloop invariant x + y + z == 24;\nloop invariant x + y + z == -24;\nloop invariant x + y + z == 25;\nloop invariant x + y + z == -25;\nloop invariant x + y + z == 26;\nloop invariant x + y + z == -26;\nloop invariant x + y + z == 27;\nloop invariant x + y + z == -27;\nloop invariant x + y + z == 28;\nloop invariant x + y + z == -28;\nloop invariant x + y + z == 29;\nloop invariant x + y + z == -29;\nloop invariant x + y + z == 30;\nloop invariant x + y + z == -30;\nloop invariant x + y + z == 31;\nloop invariant x + y + z == -31;\nloop invariant x + y + z == 32;\nloop invariant x + y + z == -32;\nloop invariant x + y + z == 33;\nloop invariant x + y + z == -33;\nloop invariant x + y + z == 34;\nloop invariant x + y + z == -34;\nloop invariant x + y + z == 35;\nloop invariant x + y + z == -35;\nloop invariant x + y + z == 36;\nloop invariant x + y + z == -36;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\nloop invariant i4: x == y;\n\n\n\nloop invariant i8: x + y + z == 0;\nloop invariant i9: x + y + z >= 0;\nloop invariant i10: x + y + z <= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2^31-1;\nloop invariant -2^31 <= y <= 2^31-1;\nloop invariant -2^31 <= z <= 2^31-1;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant x+y+z==0 ==> x == y && x >= 0 && x+y+z==0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\n\n\n\nloop invariant i4: x == y;\nloop invariant i5: x >= 0;\nloop invariant i6: x+y+z==0 ==> x == y && x >= 0 && x+y+z==0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= x + y;\nloop invariant z <= z - 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= x + y + z <= 3;\nloop invariant x == y;\nloop invariant x == z;\nloop invariant y == z;\nloop invariant x == y + z;\nloop invariant y == x + z;\nloop invariant z == x + y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 1;\nloop invariant y <= 1;\nloop invariant z <= 1;\nloop invariant x == 0 ==> y == 0 && z == 0;\nloop invariant y == 0 ==> x == 0 && z == 0;\nloop invariant z == 0 ==> x == 0 && y == 0;\nloop invariant x == y ==> x == z && y == z;\nloop invariant y == z ==> x == y && x == z;\nloop invariant z == x ==> y == x && y == z;\nloop invariant x >= 0 ==> y >= 0 && z >= 0;\nloop invariant y >= 0 ==> x >= 0 && z >= 0;\nloop invariant z >= 0 ==> x >= 0 && y >= 0;\nloop invariant x <= 1 ==> y <= 1 && z <= 1;\nloop invariant y <= 1 ==> x <= 1 && z <= 1;\nloop invariant z <= 1 ==> x <= 1 && y <= 1;\nloop invariant x == y ==> x == z && y == z ==> x == y + z;\nloop invariant y == z ==> x == y && x == z ==> x == y + z;\nloop invariant z == x ==> y == x && y == z ==> x == y + z;\nloop invariant x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z;\nloop invariant x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z;\nloop invariant y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z;\nloop invariant z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z;\nloop invariant x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x + y + z <= 3;\nloop invariant i2: x == y;\n\n\n\n\n\nloop invariant i8: x >= 0;\nloop invariant i9: y >= 0;\n\n\n\nloop invariant i13: z <= 1;\nloop invariant i14: x == 0 ==> y == 0 && z == 0;\nloop invariant i15: y == 0 ==> x == 0 && z == 0;\nloop invariant i16: z == 0 ==> x == 0 && y == 0;\n\nloop invariant i18: y == z ==> x == y && x == z;\nloop invariant i19: z == x ==> y == x && y == z;\n\n\nloop invariant i22: z >= 0 ==> x >= 0 && y >= 0;\nloop invariant i23: x <= 1 ==> y <= 1 && z <= 1;\nloop invariant i24: y <= 1 ==> x <= 1 && z <= 1;\n\nloop invariant i26: x == y ==> x == z && y == z ==> x == y + z;\nloop invariant i27: y == z ==> x == y && x == z ==> x == y + z;\nloop invariant i28: z == x ==> y == x && y == z ==> x == y + z;\nloop invariant i29: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant i30: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant i31: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z;\n\n\n\nloop invariant i35: x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i36: y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i37: z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i38: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i39: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i40: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i41: x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i42: y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i43: z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i44: x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i45: y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i46: z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i47: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant i48: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant i49: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 0 <= x <= 2147483647;\nloop invariant i4: 0 <= y <= 2147483647;\nloop invariant i5: 0 <= z <= 2147483647;\nloop invariant i6: x == y;\nloop invariant i7: z == x - y;\nloop invariant i8: 0 <= x + y + z <= 2147483647;\nloop invariant i9: !unknown_bool() ==> x == y && x >= 0 && x+y+z==0;\nloop invariant i10: unknown_bool() ==> x == y && x >= 0 && x+y+z==0;\nloop invariant i11: unknown_bool() ==> 0 <= x <= 2147483647;\nloop invariant i12: unknown_bool() ==> 0 <= y <= 2147483647;\nloop invariant i13: unknown_bool() ==> 0 <= z <= 2147483647;\nloop invariant i14: unknown_bool() ==> x == y;\nloop invariant i15: unknown_bool() ==> z == x - y;\nloop invariant i16: unknown_bool() ==> 0 <= x + y + z <= 2147483647;\nloop invariant i17: 100000 >= y >= 0;\nloop invariant i18: x + y + z == 0;\nloop invariant i19: x >= 0;\nloop invariant i20: y >= 0;\nloop invariant i21: z == -100000;\nloop invariant i22: x + y >= 0;\nloop invariant i23: x + z == 0;\nloop invariant i24: y + z == -100000;\nloop invariant i25: x >= y;\nloop invariant i26: x >= z;\nloop invariant i27: y >= z;\nloop invariant i28: x == y + z;\nloop invariant i29: y == x - z;\nloop invariant i30: x >= y + z;\nloop invariant i31: y >= x - z;\nloop invariant i32: z >= x - y;\nloop invariant i33: x + y == z;\nloop invariant i34: y + z == x;\nloop invariant i35: z + x == y;\nloop invariant i36: y >= x + z;\nloop invariant i37: z >= x + y;\nloop invariant i38: x + y == -z;\nloop invariant i39: y + z == -x;\nloop invariant i40: z + x == -y;\nloop invariant i41: x + y >= -z;\nloop invariant i42: y + z >= -x;\nloop invariant i43: z + x >= -y;\nloop invariant i44: x + y >= z;\nloop invariant i45: y + z >= x;\nloop invariant i46: z + x >= y;\nloop invariant i47: x == y && y == 0 && z == 0;\nloop invariant i48: x == y && y >= 0 && z <= 0 && x+y+z == 0 ==> unknown_bool();\nloop invariant i49: x >= 0 && y >= 0 && z <= 0;\nloop invariant i50: 1 <= x;\nloop invariant i51: 1 <= y;\nloop invariant i52: z == -x - y;\nloop invariant i53: x == y + 1;\nloop invariant i54: y == x - 1;\nloop invariant i55: z == -x - y - 2;\nloop invariant i56: x == y - 1;\nloop invariant i57: y == x + 1;\nloop invariant i58: z == -x - y + 2;\nloop invariant i59: x == y + 2;\nloop invariant i60: y == x - 2;\nloop invariant i61: z == -x - y - 4;\nloop invariant i62: x == y - 2;\nloop invariant i63: y == x + 2;\nloop invariant i64: z == -x - y + 4;\nloop invariant i65: x == y + 3;\nloop invariant i66: y == x - 3;\nloop invariant i67: z == -x - y - 6;\nloop invariant i68: x == y - 3;\nloop invariant i69: y == x + 3;\nloop invariant i70: z == -x - y + 6;\nloop invariant i71: x == y + 4;\nloop invariant i72: y == x - 4;\nloop invariant i73: z == -x - y - 8;\nloop invariant i74: x == y - 4;\nloop invariant i75: y == x + 4;\nloop invariant i76: z == -x - y + 8;\nloop invariant i77: x == y + 5;\nloop invariant i78: y == x - 5;\nloop invariant i79: z == -x - y - 10;\nloop invariant i80: x == y - 5;\nloop invariant i81: y == x + 5;\nloop invariant i82: z == -x - y + 10;\nloop invariant i83: x == y + 6;\nloop invariant i84: y == x - 6;\nloop invariant i85: z == -x - y - 12;\nloop invariant i86: x == y - 6;\nloop invariant i87: y == x + 6;\nloop invariant i88: z == -x - y + 12;\nloop invariant i89: x == y + 7;\nloop invariant i90: y == x - 7;\nloop invariant i91: z == -x - y - 14;\nloop invariant i92: x == y - 7;\nloop invariant i93: y == x + 7;\nloop invariant i94: z == -x - y + 14;\nloop invariant i95: x == y + 8;\nloop invariant i96: y == x - 8;\nloop invariant i97: z == -x - y - 16;\nloop invariant i98: x == y - 8;\nloop invariant i99: y == x + 8;\nloop invariant i100: z == -x - y + 16;\nloop invariant i101: x == y + 9;\nloop invariant i102: y == x - 9;\nloop invariant i103: z == -x - y - 18;\nloop invariant i104: x == y - 9;\nloop invariant i105: y == x + 9;\nloop invariant i106: z == -x - y + 18;\nloop invariant i107: x == y + 10;\nloop invariant i108: y == x - 10;\nloop invariant i109: z == -x - y - 20;\nloop invariant i110: x == y - 10;\nloop invariant i111: y == x + 10;\nloop invariant i112: z == -x - y + 20;\nloop invariant i113: x == y + 11;\nloop invariant i114: y == x - 11;\nloop invariant i115: z == -x - y - 22;\nloop invariant i116: x == y - 11;\nloop invariant i117: y == x + 11;\nloop invariant i118: z == -x - y + 22;\nloop invariant i119: x == y + 12;\nloop invariant i120: y == x - 12;\nloop invariant i121: z == -x - y - 24;\nloop invariant i122: x == y - 12;\nloop invariant i123: y == x + 12;\nloop invariant i124: z == -x - y + 24;\nloop invariant i125: x == y + 13;\nloop invariant i126: y == x - 13;\nloop invariant i127: z == -x - y - 26;\nloop invariant i128: x == y - 13;\nloop invariant i129: y == x + 13;\nloop invariant i130: z == -x - y + 26;\nloop invariant i131: x == y + 14;\nloop invariant i132: y == x - 14;\nloop invariant i133: z == -x - y - 28;\nloop invariant i134: x == y - 14;\nloop invariant i135: y == x + 14;\nloop invariant i136: z == -x - y + 28;\nloop invariant i137: x == y + 15;\nloop invariant i138: y == x - 15;\nloop invariant i139: z == -x - y - 30;\nloop invariant i140: x == y - 15;\nloop invariant i141: y == x + 15;\nloop invariant i142: z == -x - y + 30;\nloop invariant i143: 1 <= x <= 100000;\nloop invariant i144: 0 <= x <= 100000;\nloop invariant i145: 0 <= x+y+z <= 200000;\nloop invariant i146: x == y && y >= 0 && z == -2 * y && x + y + z == 0 ==> unknown_bool();\nloop invariant i147: x == y && y >= 0 && z == -2 * y && x + y + z == 0;\nloop invariant i148: 0 <= x <= y;\nloop invariant i149: x+y+z==0;\nloop invariant i150: 0 <= x <= y; loop invariant x >= y - x; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0 ==> y==0; loop invariant x+y==0; loop invariant x+y+z==0 ==> z==0; loop invariant x == y ==> z == 0; loop invariant x+y+z==0 ==> y == 0; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0; loop invariant y==0; loop invariant z==0;\nloop invariant i151: z >= 0;\nloop invariant i152: x+y == y;\nloop invariant i153: x == y && x == 0;\nloop invariant i154: x == y && x == 0 && z == 0;\nloop invariant i155: x == 0;\nloop invariant i156: y == 0;\nloop invariant i157: z == 0;\nloop invariant i158: x + y + z >= 0;\nloop invariant i159: x + y + z <= 0;\nloop invariant i160: x + y + z < 0;\nloop invariant i161: x + y + z > 0;\nloop invariant i162: x + y + z == x;\nloop invariant i163: x + y + z == y;\nloop invariant i164: x + y + z == z;\nloop invariant i165: x + y + z == 1;\nloop invariant i166: x + y + z == -1;\nloop invariant i167: x + y + z == 2;\nloop invariant i168: x + y + z == -2;\nloop invariant i169: x + y + z == 3;\nloop invariant i170: x + y + z == -3;\nloop invariant i171: x + y + z == 4;\nloop invariant i172: x + y + z == -4;\nloop invariant i173: x + y + z == 5;\nloop invariant i174: x + y + z == -5;\nloop invariant i175: x + y + z == 6;\nloop invariant i176: x + y + z == -6;\nloop invariant i177: x + y + z == 7;\nloop invariant i178: x + y + z == -7;\nloop invariant i179: x + y + z == 8;\nloop invariant i180: x + y + z == -8;\nloop invariant i181: x + y + z == 9;\nloop invariant i182: x + y + z == -9;\nloop invariant i183: x + y + z == 10;\nloop invariant i184: x + y + z == -10;\nloop invariant i185: x + y + z == 11;\nloop invariant i186: x + y + z == -11;\nloop invariant i187: x + y + z == 12;\nloop invariant i188: x + y + z == -12;\nloop invariant i189: x + y + z == 13;\nloop invariant i190: x + y + z == -13;\nloop invariant i191: x + y + z == 14;\nloop invariant i192: x + y + z == -14;\nloop invariant i193: x + y + z == 15;\nloop invariant i194: x + y + z == -15;\nloop invariant i195: x + y + z == 16;\nloop invariant i196: x + y + z == -16;\nloop invariant i197: x + y + z == 17;\nloop invariant i198: x + y + z == -17;\nloop invariant i199: x + y + z == 18;\nloop invariant i200: x + y + z == -18;\nloop invariant i201: x + y + z == 19;\nloop invariant i202: x + y + z == -19;\nloop invariant i203: x + y + z == 20;\nloop invariant i204: x + y + z == -20;\nloop invariant i205: x + y + z == 21;\nloop invariant i206: x + y + z == -21;\nloop invariant i207: x + y + z == 22;\nloop invariant i208: x + y + z == -22;\nloop invariant i209: x + y + z == 23;\nloop invariant i210: x + y + z == -23;\nloop invariant i211: x + y + z == 24;\nloop invariant i212: x + y + z == -24;\nloop invariant i213: x + y + z == 25;\nloop invariant i214: x + y + z == -25;\nloop invariant i215: x + y + z == 26;\nloop invariant i216: x + y + z == -26;\nloop invariant i217: x + y + z == 27;\nloop invariant i218: x + y + z == -27;\nloop invariant i219: x + y + z == 28;\nloop invariant i220: x + y + z == -28;\nloop invariant i221: x + y + z == 29;\nloop invariant i222: x + y + z == -29;\nloop invariant i223: x + y + z == 30;\nloop invariant i224: x + y + z == -30;\nloop invariant i225: x + y + z == 31;\nloop invariant i226: x + y + z == -31;\nloop invariant i227: x + y + z == 32;\nloop invariant i228: x + y + z == -32;\nloop invariant i229: x + y + z == 33;\nloop invariant i230: x + y + z == -33;\nloop invariant i231: x + y + z == 34;\nloop invariant i232: x + y + z == -34;\nloop invariant i233: x + y + z == 35;\nloop invariant i234: x + y + z == -35;\nloop invariant i235: x + y + z == 36;\nloop invariant i236: x + y + z == -36;\nloop invariant i237: 1 <= x <= 2^31-1;\nloop invariant i238: -2^31 <= y <= 2^31-1;\nloop invariant i239: -2^31 <= z <= 2^31-1;\nloop invariant i240: x+y+z==0 ==> x == y && x >= 0 && x+y+z==0;\nloop invariant i241: 0 <= y;\nloop invariant i242: x >= x + y;\nloop invariant i243: z <= z - 2;\nloop invariant i244: 0 <= x + y + z <= 3;\nloop invariant i245: x == z;\nloop invariant i246: y == z;\nloop invariant i247: y == x + z;\nloop invariant i248: z == x + y;\nloop invariant i249: x <= 1;\nloop invariant i250: y <= 1;\nloop invariant i251: z <= 1;\nloop invariant i252: x == 0 ==> y == 0 && z == 0;\nloop invariant i253: y == 0 ==> x == 0 && z == 0;\nloop invariant i254: z == 0 ==> x == 0 && y == 0;\nloop invariant i255: x == y ==> x == z && y == z;\nloop invariant i256: y == z ==> x == y && x == z;\nloop invariant i257: z == x ==> y == x && y == z;\nloop invariant i258: x >= 0 ==> y >= 0 && z >= 0;\nloop invariant i259: y >= 0 ==> x >= 0 && z >= 0;\nloop invariant i260: z >= 0 ==> x >= 0 && y >= 0;\nloop invariant i261: x <= 1 ==> y <= 1 && z <= 1;\nloop invariant i262: y <= 1 ==> x <= 1 && z <= 1;\nloop invariant i263: z <= 1 ==> x <= 1 && y <= 1;\nloop invariant i264: x == y ==> x == z && y == z ==> x == y + z;\nloop invariant i265: y == z ==> x == y && x == z ==> x == y + z;\nloop invariant i266: z == x ==> y == x && y == z ==> x == y + z;\nloop invariant i267: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant i268: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant i269: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z;\nloop invariant i270: x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z;\nloop invariant i271: y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z;\nloop invariant i272: z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z;\nloop invariant i273: x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i274: y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i275: z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i276: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i277: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i278: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i279: x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i280: y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i281: z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i282: x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i283: y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i284: z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i285: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant i286: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant i287: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 200,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\n\nloop invariant i3: 0 <= x <= 2147483647;\nloop invariant i4: 0 <= y <= 2147483647;\n\nloop invariant i6: x == y;\n\nloop invariant i8: 0 <= x + y + z <= 2147483647;\n\n\n\n\n\n\n\n\nloop invariant i17: 100000 >= y >= 0;\nloop invariant i18: x + y + z == 0;\nloop invariant i19: x >= 0;\nloop invariant i20: y >= 0;\n\nloop invariant i22: x + y >= 0;\n\n\nloop invariant i25: x >= y;\nloop invariant i26: x >= z;\nloop invariant i27: y >= z;\n\n\nloop invariant i30: x >= y + z;\n\n\n\n\n\nloop invariant i36: y >= x + z;\n\nloop invariant i38: x + y == -z;\nloop invariant i39: y + z == -x;\nloop invariant i40: z + x == -y;\nloop invariant i41: x + y >= -z;\nloop invariant i42: y + z >= -x;\nloop invariant i43: z + x >= -y;\nloop invariant i44: x + y >= z;\n\n\n\n\nloop invariant i49: x >= 0 && y >= 0 && z <= 0;\n\n\nloop invariant i52: z == -x - y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i144: 0 <= x <= 100000;\nloop invariant i145: 0 <= x+y+z <= 200000;\n\nloop invariant i147: x == y && y >= 0 && z == -2 * y && x + y + z == 0;\nloop invariant i148: 0 <= x <= y;\nloop invariant i149: x+y+z==0;\nloop invariant i150: 0 <= x <= y; loop invariant x >= y - x; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0 ==> y==0; loop invariant x+y==0; loop invariant x+y+z==0 ==> z==0; loop invariant x == y ==> z == 0; loop invariant x+y+z==0 ==> y == 0; loop invariant x+y+z==0 ==> x == 0; loop invariant x==0; loop invariant y==0; loop invariant z==0;\nloop invariant i151: z >= 0;\nloop invariant i152: x+y == y;\nloop invariant i153: x == y && x == 0;\nloop invariant i154: x == y && x == 0 && z == 0;\nloop invariant i155: x == 0;\nloop invariant i156: y == 0;\nloop invariant i157: z == 0;\nloop invariant i158: x + y + z >= 0;\nloop invariant i159: x + y + z <= 0;\n\n\nloop invariant i162: x + y + z == x;\nloop invariant i163: x + y + z == y;\nloop invariant i164: x + y + z == z;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i240: x+y+z==0 ==> x == y && x >= 0 && x+y+z==0;\nloop invariant i241: 0 <= y;\nloop invariant i242: x >= x + y;\n\nloop invariant i244: 0 <= x + y + z <= 3;\nloop invariant i245: x == z;\nloop invariant i246: y == z;\nloop invariant i247: y == x + z;\nloop invariant i248: z == x + y;\nloop invariant i249: x <= 1;\nloop invariant i250: y <= 1;\nloop invariant i251: z <= 1;\nloop invariant i252: x == 0 ==> y == 0 && z == 0;\nloop invariant i253: y == 0 ==> x == 0 && z == 0;\nloop invariant i254: z == 0 ==> x == 0 && y == 0;\nloop invariant i255: x == y ==> x == z && y == z;\nloop invariant i256: y == z ==> x == y && x == z;\nloop invariant i257: z == x ==> y == x && y == z;\nloop invariant i258: x >= 0 ==> y >= 0 && z >= 0;\nloop invariant i259: y >= 0 ==> x >= 0 && z >= 0;\nloop invariant i260: z >= 0 ==> x >= 0 && y >= 0;\nloop invariant i261: x <= 1 ==> y <= 1 && z <= 1;\nloop invariant i262: y <= 1 ==> x <= 1 && z <= 1;\nloop invariant i263: z <= 1 ==> x <= 1 && y <= 1;\nloop invariant i264: x == y ==> x == z && y == z ==> x == y + z;\nloop invariant i265: y == z ==> x == y && x == z ==> x == y + z;\nloop invariant i266: z == x ==> y == x && y == z ==> x == y + z;\nloop invariant i267: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant i268: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z;\nloop invariant i269: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z;\nloop invariant i270: x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z;\nloop invariant i271: y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z;\nloop invariant i272: z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z;\nloop invariant i273: x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i274: y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i275: z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z;\nloop invariant i276: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i277: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i278: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0;\nloop invariant i279: x <= 1 ==> y <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i280: y <= 1 ==> x <= 1 && z <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i281: z <= 1 ==> x <= 1 && y <= 1 ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i282: x == y ==> x == z && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i283: y == z ==> x == y && x == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i284: z == x ==> y == x && y == z ==> x == y + z ==> x <= 1 + y + z ==> x <= 1;\nloop invariant i285: x >= 0 ==> y >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant i286: y >= 0 ==> x >= 0 && z >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\nloop invariant i287: z >= 0 ==> x >= 0 && y >= 0 ==> x >= 0 + y + z ==> x >= 0 ==> x >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c"
        ],
        "skipped": [],
        "total": 160,
        "success_count": 140,
        "failure_count": 20,
        "success_rate": 0.875
    }
}