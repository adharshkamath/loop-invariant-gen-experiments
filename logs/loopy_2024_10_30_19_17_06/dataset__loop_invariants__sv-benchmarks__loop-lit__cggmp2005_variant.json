{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant hi - lo == 2*mid;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi <= 2*mid;\nloop invariant lo + mid = hi;\nloop invariant (hi - lo) == mid;\nloop invariant (lo + mid) == (hi - mid);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lo <= hi <= 2*mid;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant hi <= 2*mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2*LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid == hi - mid;\nloop invariant lo + mid == hi - mid + (hi - lo);\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 2*mid <= hi <= 4*mid;\nloop invariant lo + mid == hi;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo == hi;\nloop invariant mid <= hi - lo;\nloop invariant mid <= hi - lo + 1;\nloop invariant mid <= hi - lo + 2;\nloop invariant mid <= hi - lo + 3;\nloop invariant mid <= hi - lo + 4;\nloop invariant mid <= hi - lo + 5;\nloop invariant mid <= hi - lo + 6;\nloop invariant mid <= hi - lo + 7;\nloop invariant mid <= hi - lo + 8;\nloop invariant mid <= hi - lo + 9;\nloop invariant mid <= hi - lo + 10;\nloop invariant mid <= hi - lo + 11;\nloop invariant mid <= hi - lo + 12;\nloop invariant mid <= hi - lo + 13;\nloop invariant mid <= hi - lo + 14;\nloop invariant mid <= hi - lo + 15;\nloop invariant mid <= hi - lo + 16;\nloop invariant mid <= hi - lo + 17;\nloop invariant mid <= hi - lo + 18;\nloop invariant mid <= hi - lo + 19;\nloop invariant mid <= hi - lo + 20;\nloop invariant mid <= hi - lo + 21;\nloop invariant mid <= hi - lo + 22;\nloop invariant mid <= hi - lo + 23;\nloop invariant mid <= hi - lo + 24;\nloop invariant mid <= hi - lo + 25;\nloop invariant mid <= hi - lo + 26;\nloop invariant mid <= hi - lo + 27;\nloop invariant mid <= hi - lo + 28;\nloop invariant mid <= hi - lo + 29;\nloop invariant mid <= hi - lo + 30;\nloop invariant mid <= hi - lo + 31;\nloop invariant mid <= hi - lo + 32;\nloop invariant mid <= hi - lo + 33;\nloop invariant mid <= hi - lo + 34;\nloop invariant mid <= hi - lo + 35;\nloop invariant mid <= hi - lo + 36;\nloop invariant mid <= hi - lo + 37;\nloop invariant mid <= hi - lo + 38;\nloop invariant mid <= hi - lo + 39;\nloop invariant mid <= hi - lo + 40;\nloop invariant mid <= hi - lo + 41;\nloop invariant mid <= hi - lo + 42;\nloop invariant mid <= hi - lo + 43;\nloop invariant mid <= hi - lo + 44;\nloop invariant mid <= hi - lo + 45;\nloop invariant mid <= hi - lo + 46;\nloop invariant mid <= hi - lo + 47;\nloop invariant mid <= hi - lo + 48;\nloop invariant mid <= hi - lo + 49;\nloop invariant mid <= hi - lo + 50;\nloop invariant mid <= hi - lo + 51;\nloop invariant mid <= hi - lo + 52;\nloop invariant mid <= hi - lo + 53;\nloop invariant mid <= hi - lo + 54;\nloop invariant mid <= hi - lo + 55;\nloop invariant mid <= hi - lo + 56;\nloop invariant mid <= hi - lo + 57;\nloop invariant mid <= hi - lo + 58;\nloop invariant mid <= hi - lo + 59;\nloop invariant mid <= hi - lo + 60;\nloop invariant mid <= hi - lo + 61;\nloop invariant mid <= hi - lo + 62;\nloop invariant mid <= hi - lo + 63;\nloop invariant mid <= hi - lo + 64;\nloop invariant mid <= hi - lo + 65;\nloop invariant mid <= hi - lo + 66;\nloop invariant mid <= hi - lo + 67;\nloop invariant mid <= hi - lo + 68;\nloop invariant mid <= hi - lo + 69;\nloop invariant mid <= hi - lo + 70;\nloop invariant mid <= hi - lo + 71;\nloop invariant mid <= hi - lo + 72;\nloop invariant mid <= hi - lo + 73;\nloop invariant mid <= hi - lo + 74;\nloop invariant mid <= hi - lo + 75;\nloop invariant mid <= hi - lo + 76;\nloop invariant mid <= hi - lo + 77;\nloop invariant mid <= hi - lo + 78;\nloop invariant mid <= hi - lo + 79;\nloop invariant mid <= hi - lo + 80;\nloop invariant mid <= hi - lo + 81;\nloop invariant mid <= hi - lo + 82;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant mid <= hi <= 2*mid;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant lo + mid + hi == 2*lo + hi;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant mid >= 0;\nloop invariant lo >= 0;\nloop invariant hi >= lo;\nloop invariant hi <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant lo + hi = 2*mid;\nloop invariant lo + mid + hi = 2*mid;\nloop invariant lo + mid + hi = 2*mid ==> lo + hi = 2*mid;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant LARGE_INT <= hi <= 2*LARGE_INT;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid * mid + 2 * mid <= hi;\nloop invariant lo >= 0;\nloop invariant lo <= mid * mid + 2 * mid;\nloop invariant hi >= 2 * mid;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant lo + hi == 2 * mid;\nloop invariant lo + hi >= 2 * LARGE_INT;\nloop invariant lo + hi <= 2 * LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant lo + mid == hi;\nloop invariant hi == 2*mid;\nloop invariant mid >= 0;\nloop invariant lo >= 1;\nloop invariant hi <= 2*mid;\nloop invariant lo >= 0;\nloop invariant hi >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= mid + 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant hi >= 0;\nloop invariant mid >= 0;\nloop invariant lo <= LARGE_INT;\nloop invariant hi <= LARGE_INT;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid == 0;\nloop invariant lo == hi;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == hi + mid + lo;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant lo + hi + mid == 2*mid;\nloop invariant lo == hi;\nloop invariant mid == 0;\nloop invariant lo == hi == mid == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= mid <= hi;\nloop invariant lo < hi;\nloop invariant lo + hi == 2*mid;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lo <= hi;\nloop invariant lo + mid == hi;\nloop invariant mid == 0;\nloop invariant lo <= hi <= 2*mid;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant hi - lo == 2*mid;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\nloop invariant i4: lo <= hi;\nloop invariant i5: hi - lo == 2*mid;\nloop invariant i6: mid >= 0;\nloop invariant i7: mid <= LARGE_INT;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi <= 2*mid;\nloop invariant lo + mid = hi;\nloop invariant (hi - lo) == mid;\nloop invariant (lo + mid) == (hi - mid);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\nloop invariant (lo + mid) == (hi - lo);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\nloop invariant i4: (lo + mid) == (hi - mid);\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= lo <= hi <= 2*mid;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant hi <= 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: mid >= 0;\nloop invariant i3: mid <= LARGE_INT;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= lo;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2*LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid == hi - mid;\nloop invariant lo + mid == hi - mid + (hi - lo);\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant 0 <= hi - mid <= 2*LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= lo;\nloop invariant i2: 0 <= mid <= LARGE_INT;\nloop invariant i3: 0 <= hi <= 2*LARGE_INT;\nloop invariant i4: lo <= hi;\nloop invariant i5: lo + mid == hi - mid;\n\nloop invariant i7: 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant i8: 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant i9: 0 <= lo <= hi <= 2*LARGE_INT;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 2*mid <= hi <= 4*mid;\nloop invariant lo + mid == hi;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\nloop invariant lo + mid == 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 85,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo == hi;\nloop invariant mid <= hi - lo;\nloop invariant mid <= hi - lo + 1;\nloop invariant mid <= hi - lo + 2;\nloop invariant mid <= hi - lo + 3;\nloop invariant mid <= hi - lo + 4;\nloop invariant mid <= hi - lo + 5;\nloop invariant mid <= hi - lo + 6;\nloop invariant mid <= hi - lo + 7;\nloop invariant mid <= hi - lo + 8;\nloop invariant mid <= hi - lo + 9;\nloop invariant mid <= hi - lo + 10;\nloop invariant mid <= hi - lo + 11;\nloop invariant mid <= hi - lo + 12;\nloop invariant mid <= hi - lo + 13;\nloop invariant mid <= hi - lo + 14;\nloop invariant mid <= hi - lo + 15;\nloop invariant mid <= hi - lo + 16;\nloop invariant mid <= hi - lo + 17;\nloop invariant mid <= hi - lo + 18;\nloop invariant mid <= hi - lo + 19;\nloop invariant mid <= hi - lo + 20;\nloop invariant mid <= hi - lo + 21;\nloop invariant mid <= hi - lo + 22;\nloop invariant mid <= hi - lo + 23;\nloop invariant mid <= hi - lo + 24;\nloop invariant mid <= hi - lo + 25;\nloop invariant mid <= hi - lo + 26;\nloop invariant mid <= hi - lo + 27;\nloop invariant mid <= hi - lo + 28;\nloop invariant mid <= hi - lo + 29;\nloop invariant mid <= hi - lo + 30;\nloop invariant mid <= hi - lo + 31;\nloop invariant mid <= hi - lo + 32;\nloop invariant mid <= hi - lo + 33;\nloop invariant mid <= hi - lo + 34;\nloop invariant mid <= hi - lo + 35;\nloop invariant mid <= hi - lo + 36;\nloop invariant mid <= hi - lo + 37;\nloop invariant mid <= hi - lo + 38;\nloop invariant mid <= hi - lo + 39;\nloop invariant mid <= hi - lo + 40;\nloop invariant mid <= hi - lo + 41;\nloop invariant mid <= hi - lo + 42;\nloop invariant mid <= hi - lo + 43;\nloop invariant mid <= hi - lo + 44;\nloop invariant mid <= hi - lo + 45;\nloop invariant mid <= hi - lo + 46;\nloop invariant mid <= hi - lo + 47;\nloop invariant mid <= hi - lo + 48;\nloop invariant mid <= hi - lo + 49;\nloop invariant mid <= hi - lo + 50;\nloop invariant mid <= hi - lo + 51;\nloop invariant mid <= hi - lo + 52;\nloop invariant mid <= hi - lo + 53;\nloop invariant mid <= hi - lo + 54;\nloop invariant mid <= hi - lo + 55;\nloop invariant mid <= hi - lo + 56;\nloop invariant mid <= hi - lo + 57;\nloop invariant mid <= hi - lo + 58;\nloop invariant mid <= hi - lo + 59;\nloop invariant mid <= hi - lo + 60;\nloop invariant mid <= hi - lo + 61;\nloop invariant mid <= hi - lo + 62;\nloop invariant mid <= hi - lo + 63;\nloop invariant mid <= hi - lo + 64;\nloop invariant mid <= hi - lo + 65;\nloop invariant mid <= hi - lo + 66;\nloop invariant mid <= hi - lo + 67;\nloop invariant mid <= hi - lo + 68;\nloop invariant mid <= hi - lo + 69;\nloop invariant mid <= hi - lo + 70;\nloop invariant mid <= hi - lo + 71;\nloop invariant mid <= hi - lo + 72;\nloop invariant mid <= hi - lo + 73;\nloop invariant mid <= hi - lo + 74;\nloop invariant mid <= hi - lo + 75;\nloop invariant mid <= hi - lo + 76;\nloop invariant mid <= hi - lo + 77;\nloop invariant mid <= hi - lo + 78;\nloop invariant mid <= hi - lo + 79;\nloop invariant mid <= hi - lo + 80;\nloop invariant mid <= hi - lo + 81;\nloop invariant mid <= hi - lo + 82;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant mid <= hi <= 2*mid;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant lo + mid + hi == 2*lo + hi;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant lo + mid + hi == 2*lo + 2*mid - mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant mid >= 0;\nloop invariant lo >= 0;\nloop invariant hi >= lo;\nloop invariant hi <= 2*mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant lo + hi = 2*mid;\nloop invariant lo + mid + hi = 2*mid;\nloop invariant lo + mid + hi = 2*mid ==> lo + hi = 2*mid;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant lo <= hi;\nloop invariant hi >= lo;\nloop invariant mid <= hi;\nloop invariant lo <= mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant i3: mid >= 0;\nloop invariant i4: lo >= 0;\n\n\nloop invariant i7: mid <= hi;\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant LARGE_INT <= hi <= 2*LARGE_INT;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid * mid + 2 * mid <= hi;\nloop invariant lo >= 0;\nloop invariant lo <= mid * mid + 2 * mid;\nloop invariant hi >= 2 * mid;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant lo + hi == 2 * mid;\nloop invariant lo + hi >= 2 * LARGE_INT;\nloop invariant lo + hi <= 2 * LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\nloop invariant i3: lo >= 0;\n\nloop invariant i5: hi >= 2 * mid;\nloop invariant i6: hi <= 2 * LARGE_INT;\n\n\nloop invariant i9: lo + hi <= 2 * LARGE_INT;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant lo + mid == hi;\nloop invariant hi == 2*mid;\nloop invariant mid >= 0;\nloop invariant lo >= 1;\nloop invariant hi <= 2*mid;\nloop invariant lo >= 0;\nloop invariant hi >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= mid + 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant hi >= 0;\nloop invariant mid >= 0;\nloop invariant lo <= LARGE_INT;\nloop invariant hi <= LARGE_INT;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\nloop invariant hi < lo ==> mid < 0;\nloop invariant mid == 0 ==> lo == hi;\nloop invariant mid > 0 ==> lo < hi;\nloop invariant mid < 0 ==> lo > hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo < hi ==> mid > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant i3: mid >= 0;\n\n\nloop invariant i6: lo >= 0;\n\nloop invariant i8: mid <= LARGE_INT;\n\n\n\n\n\n\n\n\n\nloop invariant i18: mid < 0 ==> lo > hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid == 0;\nloop invariant lo == hi;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == hi + mid + lo;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo + mid + hi == 2 * mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\nloop invariant i5: lo + mid + hi == hi + mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant lo + hi + mid == 2*mid;\nloop invariant lo == hi;\nloop invariant mid == 0;\nloop invariant lo == hi == mid == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= mid <= hi;\nloop invariant lo < hi;\nloop invariant lo + hi == 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= hi;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= lo <= hi;\nloop invariant lo + mid == hi;\nloop invariant mid == 0;\nloop invariant lo <= hi <= 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= lo <= LARGE_INT;\nloop invariant i2: 0 <= mid <= LARGE_INT;\nloop invariant i3: 0 <= hi <= LARGE_INT;\nloop invariant i4: lo <= hi;\nloop invariant i5: hi - lo == 2*mid;\nloop invariant i6: mid >= 0;\nloop invariant i7: mid <= LARGE_INT;\nloop invariant i8: 0 <= lo <= hi <= 2*mid;\nloop invariant i9: lo + mid = hi;\nloop invariant i10: (hi - lo) == mid;\nloop invariant i11: (lo + mid) == (hi - mid);\nloop invariant i12: (lo + mid) == (hi - lo);\nloop invariant i13: 1 <= lo <= hi <= 2*mid;\nloop invariant i14: hi <= 2*mid;\nloop invariant i15: 0 <= lo;\nloop invariant i16: 0 <= hi <= 2*LARGE_INT;\nloop invariant i17: lo + mid == hi - mid;\nloop invariant i18: lo + mid == hi - mid + (hi - lo);\nloop invariant i19: 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant i20: 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant i21: 0 <= lo <= hi <= 2*LARGE_INT;\nloop invariant i22: 0 <= lo <= 2*mid;\nloop invariant i23: 2*mid <= hi <= 4*mid;\nloop invariant i24: lo + mid == hi;\nloop invariant i25: lo + mid == 2*mid;\nloop invariant i26: lo == hi;\nloop invariant i27: mid <= hi - lo;\nloop invariant i28: mid <= hi - lo + 1;\nloop invariant i29: mid <= hi - lo + 2;\nloop invariant i30: mid <= hi - lo + 3;\nloop invariant i31: mid <= hi - lo + 4;\nloop invariant i32: mid <= hi - lo + 5;\nloop invariant i33: mid <= hi - lo + 6;\nloop invariant i34: mid <= hi - lo + 7;\nloop invariant i35: mid <= hi - lo + 8;\nloop invariant i36: mid <= hi - lo + 9;\nloop invariant i37: mid <= hi - lo + 10;\nloop invariant i38: mid <= hi - lo + 11;\nloop invariant i39: mid <= hi - lo + 12;\nloop invariant i40: mid <= hi - lo + 13;\nloop invariant i41: mid <= hi - lo + 14;\nloop invariant i42: mid <= hi - lo + 15;\nloop invariant i43: mid <= hi - lo + 16;\nloop invariant i44: mid <= hi - lo + 17;\nloop invariant i45: mid <= hi - lo + 18;\nloop invariant i46: mid <= hi - lo + 19;\nloop invariant i47: mid <= hi - lo + 20;\nloop invariant i48: mid <= hi - lo + 21;\nloop invariant i49: mid <= hi - lo + 22;\nloop invariant i50: mid <= hi - lo + 23;\nloop invariant i51: mid <= hi - lo + 24;\nloop invariant i52: mid <= hi - lo + 25;\nloop invariant i53: mid <= hi - lo + 26;\nloop invariant i54: mid <= hi - lo + 27;\nloop invariant i55: mid <= hi - lo + 28;\nloop invariant i56: mid <= hi - lo + 29;\nloop invariant i57: mid <= hi - lo + 30;\nloop invariant i58: mid <= hi - lo + 31;\nloop invariant i59: mid <= hi - lo + 32;\nloop invariant i60: mid <= hi - lo + 33;\nloop invariant i61: mid <= hi - lo + 34;\nloop invariant i62: mid <= hi - lo + 35;\nloop invariant i63: mid <= hi - lo + 36;\nloop invariant i64: mid <= hi - lo + 37;\nloop invariant i65: mid <= hi - lo + 38;\nloop invariant i66: mid <= hi - lo + 39;\nloop invariant i67: mid <= hi - lo + 40;\nloop invariant i68: mid <= hi - lo + 41;\nloop invariant i69: mid <= hi - lo + 42;\nloop invariant i70: mid <= hi - lo + 43;\nloop invariant i71: mid <= hi - lo + 44;\nloop invariant i72: mid <= hi - lo + 45;\nloop invariant i73: mid <= hi - lo + 46;\nloop invariant i74: mid <= hi - lo + 47;\nloop invariant i75: mid <= hi - lo + 48;\nloop invariant i76: mid <= hi - lo + 49;\nloop invariant i77: mid <= hi - lo + 50;\nloop invariant i78: mid <= hi - lo + 51;\nloop invariant i79: mid <= hi - lo + 52;\nloop invariant i80: mid <= hi - lo + 53;\nloop invariant i81: mid <= hi - lo + 54;\nloop invariant i82: mid <= hi - lo + 55;\nloop invariant i83: mid <= hi - lo + 56;\nloop invariant i84: mid <= hi - lo + 57;\nloop invariant i85: mid <= hi - lo + 58;\nloop invariant i86: mid <= hi - lo + 59;\nloop invariant i87: mid <= hi - lo + 60;\nloop invariant i88: mid <= hi - lo + 61;\nloop invariant i89: mid <= hi - lo + 62;\nloop invariant i90: mid <= hi - lo + 63;\nloop invariant i91: mid <= hi - lo + 64;\nloop invariant i92: mid <= hi - lo + 65;\nloop invariant i93: mid <= hi - lo + 66;\nloop invariant i94: mid <= hi - lo + 67;\nloop invariant i95: mid <= hi - lo + 68;\nloop invariant i96: mid <= hi - lo + 69;\nloop invariant i97: mid <= hi - lo + 70;\nloop invariant i98: mid <= hi - lo + 71;\nloop invariant i99: mid <= hi - lo + 72;\nloop invariant i100: mid <= hi - lo + 73;\nloop invariant i101: mid <= hi - lo + 74;\nloop invariant i102: mid <= hi - lo + 75;\nloop invariant i103: mid <= hi - lo + 76;\nloop invariant i104: mid <= hi - lo + 77;\nloop invariant i105: mid <= hi - lo + 78;\nloop invariant i106: mid <= hi - lo + 79;\nloop invariant i107: mid <= hi - lo + 80;\nloop invariant i108: mid <= hi - lo + 81;\nloop invariant i109: mid <= hi - lo + 82;\nloop invariant i110: 0 <= lo <= mid;\nloop invariant i111: mid <= hi <= 2*mid;\nloop invariant i112: lo + mid + hi == 2*mid;\nloop invariant i113: lo + mid + hi == 2*lo + hi;\nloop invariant i114: lo + mid + hi == 2*lo + 2*mid - mid;\nloop invariant i115: 0 <= hi <= 2*mid;\nloop invariant i116: lo >= 0;\nloop invariant i117: hi >= lo;\nloop invariant i118: mid <= hi;\nloop invariant i119: lo + hi = 2*mid;\nloop invariant i120: lo + mid + hi = 2*mid;\nloop invariant i121: lo + mid + hi = 2*mid ==> lo + hi = 2*mid;\nloop invariant i122: lo <= mid;\nloop invariant i123: LARGE_INT <= hi <= 2*LARGE_INT;\nloop invariant i124: mid == 0 ==> lo == hi;\nloop invariant i125: mid > 0 ==> lo < hi;\nloop invariant i126: lo + mid * mid + 2 * mid <= hi;\nloop invariant i127: lo <= mid * mid + 2 * mid;\nloop invariant i128: hi >= 2 * mid;\nloop invariant i129: hi <= 2 * LARGE_INT;\nloop invariant i130: lo + hi == 2 * mid;\nloop invariant i131: lo + hi >= 2 * LARGE_INT;\nloop invariant i132: lo + hi <= 2 * LARGE_INT;\nloop invariant i133: hi == 2*mid;\nloop invariant i134: lo >= 1;\nloop invariant i135: hi >= 0;\nloop invariant i136: lo <= mid + 1;\nloop invariant i137: lo <= LARGE_INT;\nloop invariant i138: hi <= LARGE_INT;\nloop invariant i139: lo == hi ==> mid == 0;\nloop invariant i140: lo < hi ==> mid > 0;\nloop invariant i141: hi < lo ==> mid < 0;\nloop invariant i142: mid < 0 ==> lo > hi;\nloop invariant i143: 0 <= lo <= hi;\nloop invariant i144: mid == 0;\nloop invariant i145: lo + mid + hi == 2 * mid;\nloop invariant i146: lo + mid + hi == hi + mid + lo;\nloop invariant i147: lo + hi + mid == 2*mid;\nloop invariant i148: lo == hi == mid == 0;\nloop invariant i149: 0 <= mid <= hi;\nloop invariant i150: lo < hi;\nloop invariant i151: lo + hi == 2*mid;\nloop invariant i152: 1 <= lo <= hi;\nloop invariant i153: lo <= hi <= 2*mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 31,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= lo <= LARGE_INT;\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\nloop invariant i4: lo <= hi;\nloop invariant i5: hi - lo == 2*mid;\nloop invariant i6: mid >= 0;\nloop invariant i7: mid <= LARGE_INT;\n\n\n\nloop invariant i11: (lo + mid) == (hi - mid);\n\n\n\nloop invariant i15: 0 <= lo;\nloop invariant i16: 0 <= hi <= 2*LARGE_INT;\nloop invariant i17: lo + mid == hi - mid;\n\nloop invariant i19: 0 <= lo + mid <= 2*LARGE_INT;\nloop invariant i20: 0 <= hi - mid <= 2*LARGE_INT;\nloop invariant i21: 0 <= lo <= hi <= 2*LARGE_INT;\n\n\n\n\n\nloop invariant i27: mid <= hi - lo;\nloop invariant i28: mid <= hi - lo + 1;\nloop invariant i29: mid <= hi - lo + 2;\nloop invariant i30: mid <= hi - lo + 3;\nloop invariant i31: mid <= hi - lo + 4;\nloop invariant i32: mid <= hi - lo + 5;\nloop invariant i33: mid <= hi - lo + 6;\nloop invariant i34: mid <= hi - lo + 7;\nloop invariant i35: mid <= hi - lo + 8;\nloop invariant i36: mid <= hi - lo + 9;\nloop invariant i37: mid <= hi - lo + 10;\nloop invariant i38: mid <= hi - lo + 11;\nloop invariant i39: mid <= hi - lo + 12;\nloop invariant i40: mid <= hi - lo + 13;\nloop invariant i41: mid <= hi - lo + 14;\nloop invariant i42: mid <= hi - lo + 15;\nloop invariant i43: mid <= hi - lo + 16;\nloop invariant i44: mid <= hi - lo + 17;\nloop invariant i45: mid <= hi - lo + 18;\nloop invariant i46: mid <= hi - lo + 19;\nloop invariant i47: mid <= hi - lo + 20;\nloop invariant i48: mid <= hi - lo + 21;\nloop invariant i49: mid <= hi - lo + 22;\nloop invariant i50: mid <= hi - lo + 23;\nloop invariant i51: mid <= hi - lo + 24;\nloop invariant i52: mid <= hi - lo + 25;\nloop invariant i53: mid <= hi - lo + 26;\nloop invariant i54: mid <= hi - lo + 27;\nloop invariant i55: mid <= hi - lo + 28;\nloop invariant i56: mid <= hi - lo + 29;\nloop invariant i57: mid <= hi - lo + 30;\nloop invariant i58: mid <= hi - lo + 31;\nloop invariant i59: mid <= hi - lo + 32;\nloop invariant i60: mid <= hi - lo + 33;\nloop invariant i61: mid <= hi - lo + 34;\nloop invariant i62: mid <= hi - lo + 35;\nloop invariant i63: mid <= hi - lo + 36;\nloop invariant i64: mid <= hi - lo + 37;\nloop invariant i65: mid <= hi - lo + 38;\nloop invariant i66: mid <= hi - lo + 39;\nloop invariant i67: mid <= hi - lo + 40;\nloop invariant i68: mid <= hi - lo + 41;\nloop invariant i69: mid <= hi - lo + 42;\nloop invariant i70: mid <= hi - lo + 43;\nloop invariant i71: mid <= hi - lo + 44;\nloop invariant i72: mid <= hi - lo + 45;\nloop invariant i73: mid <= hi - lo + 46;\nloop invariant i74: mid <= hi - lo + 47;\nloop invariant i75: mid <= hi - lo + 48;\nloop invariant i76: mid <= hi - lo + 49;\nloop invariant i77: mid <= hi - lo + 50;\nloop invariant i78: mid <= hi - lo + 51;\nloop invariant i79: mid <= hi - lo + 52;\nloop invariant i80: mid <= hi - lo + 53;\nloop invariant i81: mid <= hi - lo + 54;\nloop invariant i82: mid <= hi - lo + 55;\nloop invariant i83: mid <= hi - lo + 56;\nloop invariant i84: mid <= hi - lo + 57;\nloop invariant i85: mid <= hi - lo + 58;\nloop invariant i86: mid <= hi - lo + 59;\nloop invariant i87: mid <= hi - lo + 60;\nloop invariant i88: mid <= hi - lo + 61;\nloop invariant i89: mid <= hi - lo + 62;\nloop invariant i90: mid <= hi - lo + 63;\nloop invariant i91: mid <= hi - lo + 64;\nloop invariant i92: mid <= hi - lo + 65;\nloop invariant i93: mid <= hi - lo + 66;\nloop invariant i94: mid <= hi - lo + 67;\nloop invariant i95: mid <= hi - lo + 68;\nloop invariant i96: mid <= hi - lo + 69;\nloop invariant i97: mid <= hi - lo + 70;\nloop invariant i98: mid <= hi - lo + 71;\nloop invariant i99: mid <= hi - lo + 72;\nloop invariant i100: mid <= hi - lo + 73;\nloop invariant i101: mid <= hi - lo + 74;\nloop invariant i102: mid <= hi - lo + 75;\nloop invariant i103: mid <= hi - lo + 76;\nloop invariant i104: mid <= hi - lo + 77;\nloop invariant i105: mid <= hi - lo + 78;\nloop invariant i106: mid <= hi - lo + 79;\nloop invariant i107: mid <= hi - lo + 80;\nloop invariant i108: mid <= hi - lo + 81;\nloop invariant i109: mid <= hi - lo + 82;\n\n\n\n\n\n\nloop invariant i116: lo >= 0;\nloop invariant i117: hi >= lo;\nloop invariant i118: mid <= hi;\n\n\n\n\n\nloop invariant i124: mid == 0 ==> lo == hi;\nloop invariant i125: mid > 0 ==> lo < hi;\n\n\nloop invariant i128: hi >= 2 * mid;\nloop invariant i129: hi <= 2 * LARGE_INT;\n\n\nloop invariant i132: lo + hi <= 2 * LARGE_INT;\n\n\nloop invariant i135: hi >= 0;\n\nloop invariant i137: lo <= LARGE_INT;\n\nloop invariant i139: lo == hi ==> mid == 0;\nloop invariant i140: lo < hi ==> mid > 0;\nloop invariant i141: hi < lo ==> mid < 0;\nloop invariant i142: mid < 0 ==> lo > hi;\nloop invariant i143: 0 <= lo <= hi;\n\n\nloop invariant i146: lo + mid + hi == hi + mid + lo;\n\n\nloop invariant i149: 0 <= mid <= hi;\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c"
        ],
        "skipped": [],
        "total": 108,
        "success_count": 93,
        "failure_count": 15,
        "success_rate": 0.8611111111111112
    }
}