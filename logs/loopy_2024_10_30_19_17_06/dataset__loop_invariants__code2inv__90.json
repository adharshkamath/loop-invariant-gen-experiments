{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/90.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= 100000;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y;\nloop invariant lock == 1;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 1 <= x <= y;\nloop invariant x <= y;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 1 <= y;\nloop invariant x == y || x == y + 1;\nloop invariant lock == 1 || lock == 0;\nloop invariant x >= 2 && y >= 2;\nloop invariant lock ==> x == y;\nloop invariant !lock ==> x == y + 1;\nloop invariant lock ==> y == x;\nloop invariant !lock ==> y == x - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y + 1;\nloop invariant 0 <= y <= x;\nloop invariant lock == 0 || (lock == 1 && x == y);\nloop invariant lock == 0 || (lock == 1 && x == y + 1);\nloop invariant (lock == 1 && x == y) ==> (y == x);\nloop invariant (lock == 0 && x == y + 1) ==> (x == y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant x == y * y / 2;\nloop invariant lock == 1 || lock == 0;\nloop invariant x == y + 1 || x == y + 2;\nloop invariant y == x + 1 || y == x + 2;\nloop invariant x >= y * y / 2;\nloop invariant y >= x * x / 2;\nloop invariant x >= y + 1 || x <= y + 2;\nloop invariant y >= x + 1 || y <= x + 2;\nloop invariant x >= y * y / 2 || x <= y * y / 2 + 1;\nloop invariant y >= x * x / 2 || y <= x * x / 2 + 1;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5 || x == y * y / 2 + 6;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5 || y == x * x / 2 + 6;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5 || x == y * y / 2 + 6 || x == y * y / 2 + 7;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5 || y == x * x / 2 + 6 || y == x * x / 2 + 7;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant lock == ((x != y) ? 0 : 1);\nloop invariant x >= y - lock;\nloop invariant y > x - lock;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x + 1;\nloop invariant lock ==> (x == y);\nloop invariant !lock ==> (x == (y + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y; loop invariant lock == 1 ==> x == y; loop invariant lock == 0 ==> x != y;\n*/\n```",
            "```\n/*@\nloop invariant ( x <= y <= 2*x ) ==> ( lock == 1 ); loop invariant ( x <= y < 2*x ) ==> ( lock == 0 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 1 <= x <= y;\nloop invariant x <= y;\nloop invariant y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= x + 1;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= x;\nloop invariant if (unknown()) then lock == 1 else lock == 0;\nloop invariant y >= (lock * x) + (1 - lock);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= x;\nloop invariant if (unknown()) then lock == 1 else lock == 0;\nloop invariant y >= (lock * x) + (1 - lock);\n*/\n```",
            "```\n/*@\nloop invariant lock = 1;\nloop invariant x = y;\nloop invariant y = x + 1;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant y <= lock + 1;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x <= lock + lock + 1;\nloop invariant y <= lock + lock + 2;\nloop invariant lock + lock + 1 <= y + 1;\nloop invariant y + 1 <= lock + lock + 2;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant x <= lock + lock + 1;\nloop invariant y <= lock + lock + 2;\nloop invariant lock + lock + 1 <= y + 1;\nloop invariant y + 1 <= lock + lock + 2;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant y <= x;\nloop invariant lock == 0 => y == x;\nloop invariant lock == 1 => y > x;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= 100000;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\nloop invariant y <= 100001;\nloop invariant x <= y;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x >= 1;\nloop invariant y >= 2;\nloop invariant x <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: x <= y;\nloop invariant i4: lock <= 1;\nloop invariant i5: lock >= 0;\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y;\nloop invariant lock == 1;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y <= 100000;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x <= y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 1 <= x <= y;\nloop invariant x <= y;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\nloop invariant y - 1 <= x <= y + 1;\nloop invariant x - 1 <= y <= x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 0 <= lock <= 1;\n\nloop invariant i3: x <= y;\nloop invariant i4: x - 1 <= y <= x + 1;\nloop invariant i5: y - 1 <= x <= y + 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 1 <= y;\nloop invariant x == y || x == y + 1;\nloop invariant lock == 1 || lock == 0;\nloop invariant x >= 2 && y >= 2;\nloop invariant lock ==> x == y;\nloop invariant !lock ==> x == y + 1;\nloop invariant lock ==> y == x;\nloop invariant !lock ==> y == x - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\nloop invariant i4: lock == 1 || lock == 0;\n\nloop invariant i6: lock ==> x == y;\n\nloop invariant i8: lock ==> y == x;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y + 1;\nloop invariant 0 <= y <= x;\nloop invariant lock == 0 || (lock == 1 && x == y);\nloop invariant lock == 0 || (lock == 1 && x == y + 1);\nloop invariant (lock == 1 && x == y) ==> (y == x);\nloop invariant (lock == 0 && x == y + 1) ==> (x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: lock == 0 || (lock == 1 && x == y);\n\nloop invariant i5: (lock == 1 && x == y) ==> (y == x);\nloop invariant i6: (lock == 0 && x == y + 1) ==> (x == y);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant x == y * y / 2;\nloop invariant lock == 1 || lock == 0;\nloop invariant x == y + 1 || x == y + 2;\nloop invariant y == x + 1 || y == x + 2;\nloop invariant x >= y * y / 2;\nloop invariant y >= x * x / 2;\nloop invariant x >= y + 1 || x <= y + 2;\nloop invariant y >= x + 1 || y <= x + 2;\nloop invariant x >= y * y / 2 || x <= y * y / 2 + 1;\nloop invariant y >= x * x / 2 || y <= x * x / 2 + 1;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5 || x == y * y / 2 + 6;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5 || y == x * x / 2 + 6;\nloop invariant x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5 || x == y * y / 2 + 6 || x == y * y / 2 + 7;\nloop invariant y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5 || y == x * x / 2 + 6 || y == x * x / 2 + 7;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: lock == 1 || lock == 0;\n\n\n\n\nloop invariant i8: x >= y + 1 || x <= y + 2;\nloop invariant i9: y >= x + 1 || y <= x + 2;\nloop invariant i10: x >= y * y / 2 || x <= y * y / 2 + 1;\nloop invariant i11: y >= x * x / 2 || y <= x * x / 2 + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant lock == ((x != y) ? 0 : 1);\nloop invariant x >= y - lock;\nloop invariant y > x - lock;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == ((x != y) ? 0 : 1);\n\nloop invariant i4: y > x - lock;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x + 1;\nloop invariant lock ==> (x == y);\nloop invariant !lock ==> (x == (y + 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock ==> (x == y);\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y; loop invariant lock == 1 ==> x == y; loop invariant lock == 0 ==> x != y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( x <= y <= 2*x ) ==> ( lock == 1 ); loop invariant ( x <= y < 2*x ) ==> ( lock == 0 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 1 <= x <= y;\nloop invariant x <= y;\nloop invariant y <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 0 <= lock <= 1;\n\nloop invariant i3: x <= y;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= x + 1;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant lock == (x != y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\nloop invariant i5: y >= x;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= x;\nloop invariant if (unknown()) then lock == 1 else lock == 0;\nloop invariant y >= (lock * x) + (1 - lock);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= x;\nloop invariant if (unknown()) then lock == 1 else lock == 0;\nloop invariant y >= (lock * x) + (1 - lock);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: y >= x;\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant lock = 1;\nloop invariant x = y;\nloop invariant y = x + 1;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant y <= lock + 1;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant x <= lock + lock + 1;\nloop invariant y <= lock + lock + 2;\nloop invariant lock + lock + 1 <= y + 1;\nloop invariant y + 1 <= lock + lock + 2;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant x <= lock + lock + 1;\nloop invariant y <= lock + lock + 2;\nloop invariant lock + lock + 1 <= y + 1;\nloop invariant y + 1 <= lock + lock + 2;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\nloop invariant lock + lock + 1 <= x + y;\nloop invariant y + 1 <= x + y;\nloop invariant lock + lock + 1 <= x + y + 1;\nloop invariant y + 1 <= x + y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x <= y;\n\nloop invariant i8: lock <= 1;\nloop invariant i9: lock >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y <= x;\nloop invariant lock == 0 => y == x;\nloop invariant lock == 1 => y > x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 88: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: 0 <= y <= 100000;\nloop invariant i3: x <= y;\nloop invariant i4: lock <= 1;\nloop invariant i5: lock >= 0;\nloop invariant i6: x >= 1;\nloop invariant i7: y >= 2;\nloop invariant i8: x <= 100000;\nloop invariant i9: y <= 100001;\nloop invariant i10: 1 <= x <= y;\nloop invariant i11: 1 <= y;\nloop invariant i12: lock == 1;\nloop invariant i13: x >= y;\nloop invariant i14: y >= 1;\nloop invariant i15: y <= 100000;\nloop invariant i16: 0 <= lock <= 1;\nloop invariant i17: x - 1 <= y <= x + 1;\nloop invariant i18: y - 1 <= x <= y + 1;\nloop invariant i19: x == y || x == y + 1;\nloop invariant i20: lock == 1 || lock == 0;\nloop invariant i21: x >= 2 && y >= 2;\nloop invariant i22: lock ==> x == y;\nloop invariant i23: !lock ==> x == y + 1;\nloop invariant i24: lock ==> y == x;\nloop invariant i25: !lock ==> y == x - 1;\nloop invariant i26: 0 <= x <= y + 1;\nloop invariant i27: 0 <= y <= x;\nloop invariant i28: lock == 0 || (lock == 1 && x == y);\nloop invariant i29: lock == 0 || (lock == 1 && x == y + 1);\nloop invariant i30: (lock == 1 && x == y) ==> (y == x);\nloop invariant i31: (lock == 0 && x == y + 1) ==> (x == y);\nloop invariant i32: 0 <= x <= y <= 100000;\nloop invariant i33: x == y * y / 2;\nloop invariant i34: x == y + 1 || x == y + 2;\nloop invariant i35: y == x + 1 || y == x + 2;\nloop invariant i36: x >= y * y / 2;\nloop invariant i37: y >= x * x / 2;\nloop invariant i38: x >= y + 1 || x <= y + 2;\nloop invariant i39: y >= x + 1 || y <= x + 2;\nloop invariant i40: x >= y * y / 2 || x <= y * y / 2 + 1;\nloop invariant i41: y >= x * x / 2 || y <= x * x / 2 + 1;\nloop invariant i42: x == y * y / 2 || x == y * y / 2 + 1;\nloop invariant i43: y == x * x / 2 || y == x * x / 2 + 1;\nloop invariant i44: x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2;\nloop invariant i45: y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2;\nloop invariant i46: x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3;\nloop invariant i47: y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3;\nloop invariant i48: x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4;\nloop invariant i49: y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4;\nloop invariant i50: x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5;\nloop invariant i51: y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5;\nloop invariant i52: x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5 || x == y * y / 2 + 6;\nloop invariant i53: y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5 || y == x * x / 2 + 6;\nloop invariant i54: x == y * y / 2 || x == y * y / 2 + 1 || x == y * y / 2 + 2 || x == y * y / 2 + 3 || x == y * y / 2 + 4 || x == y * y / 2 + 5 || x == y * y / 2 + 6 || x == y * y / 2 + 7;\nloop invariant i55: y == x * x / 2 || y == x * x / 2 + 1 || y == x * x / 2 + 2 || y == x * x / 2 + 3 || y == x * x / 2 + 4 || y == x * x / 2 + 5 || y == x * x / 2 + 6 || y == x * x / 2 + 7;\nloop invariant i56: lock == ((x != y) ? 0 : 1);\nloop invariant i57: x >= y - lock;\nloop invariant i58: y > x - lock;\nloop invariant i59: 0 <= y <= x + 1;\nloop invariant i60: lock ==> (x == y);\nloop invariant i61: !lock ==> (x == (y + 1));\nloop invariant i62: 0 <= x <= y; loop invariant lock == 1 ==> x == y; loop invariant lock == 0 ==> x != y;\nloop invariant i63: ( x <= y <= 2*x ) ==> ( lock == 1 ); loop invariant ( x <= y < 2*x ) ==> ( lock == 0 );\nloop invariant i64: lock == (x != y);\nloop invariant i65: y >= x;\nloop invariant i66: x >= (1 + (y - 1) * y / 2);\nloop invariant i67: if (unknown()) then lock == 1 else lock == 0;\nloop invariant i68: y >= (lock * x) + (1 - lock);\nloop invariant i69: lock = 1;\nloop invariant i70: x = y;\nloop invariant i71: y = x + 1;\nloop invariant i72: y <= lock + 1;\nloop invariant i73: x <= lock + lock + 1;\nloop invariant i74: y <= lock + lock + 2;\nloop invariant i75: lock + lock + 1 <= y + 1;\nloop invariant i76: y + 1 <= lock + lock + 2;\nloop invariant i77: lock + lock + 1 <= x + y;\nloop invariant i78: y + 1 <= x + y;\nloop invariant i79: lock + lock + 1 <= x + y + 1;\nloop invariant i80: y + 1 <= x + y + 1;\nloop invariant i81: 0 <= y;\nloop invariant i82: y <= x;\nloop invariant i83: lock == 0 => y == x;\nloop invariant i84: lock == 1 => y > x;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 28,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: x <= y;\nloop invariant i4: lock <= 1;\nloop invariant i5: lock >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: 0 <= lock <= 1;\nloop invariant i17: x - 1 <= y <= x + 1;\nloop invariant i18: y - 1 <= x <= y + 1;\n\nloop invariant i20: lock == 1 || lock == 0;\n\nloop invariant i22: lock ==> x == y;\n\nloop invariant i24: lock ==> y == x;\n\n\n\nloop invariant i28: lock == 0 || (lock == 1 && x == y);\n\nloop invariant i30: (lock == 1 && x == y) ==> (y == x);\nloop invariant i31: (lock == 0 && x == y + 1) ==> (x == y);\n\n\n\n\n\n\nloop invariant i38: x >= y + 1 || x <= y + 2;\nloop invariant i39: y >= x + 1 || y <= x + 2;\nloop invariant i40: x >= y * y / 2 || x <= y * y / 2 + 1;\nloop invariant i41: y >= x * x / 2 || y <= x * x / 2 + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i56: lock == ((x != y) ? 0 : 1);\n\nloop invariant i58: y > x - lock;\n\nloop invariant i60: lock ==> (x == y);\n\n\n\n\nloop invariant i65: y >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 76,
        "success_count": 64,
        "failure_count": 12,
        "success_rate": 0.8421052631578947
    }
}