{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/7.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= y;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 40;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant (x >= 0) ==> (x <= 10);\nloop invariant (y >= 0) ==> (y <= 10);\nloop invariant (x >= 0) ==> (x <= 10);\nloop invariant (y >= 0) ==> (y <= 10);\nloop invariant (x == 20) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= y;\nloop invariant x <= 10 + 10 * (x / 10);\nloop invariant y <= 10 + 10 * (y / 10);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (y == 0) ==> (x == 20);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x == (10 * i);\nloop invariant y == (10 * i);\nloop invariant unknown() ==> (x == (10 * i));\nloop invariant unknown() ==> (y == (10 * i));\nloop invariant unknown() ==> (x <= 20);\nloop invariant unknown() ==> (y <= 20);\nloop invariant unknown() ==> (i < 2);\nloop invariant (unknown() && (i < 2)) ==> (x == (10 * i));\nloop invariant (unknown() && (i < 2)) ==> (y == (10 * i));\nloop invariant (unknown() && (i < 2)) ==> (x <= 20);\nloop invariant (unknown() && (i < 2)) ==> (y <= 20);\nloop invariant (unknown() && (i < 2)) ==> (i < 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= y;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant y != 0 ==> x == 20;\nloop invariant y == 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 10;\nloop invariant (x - 10) >= y;\nloop invariant (x - 10) >= 0;\nloop invariant (y - 10) <= 0;\nloop invariant (y - 10) >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= (0 + y);\nloop invariant y >= (0 + x);\nloop invariant x <= (10 + y);\nloop invariant y <= (10 + x);\nloop invariant (x == 20) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x + y) >= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x <= 10 ==> y <= 10;\nloop invariant x <= 10 ==> y >= 0;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> x <= 20;\nloop invariant x <= 10 ==> x >= 0;\nloop invariant x <= 10 ==> x <= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x <= 20;\nloop invariant x >= 10 ==> y <= 10;\nloop invariant x >= 10 ==> y >= 0;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 20;\nloop invariant y <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x + (10 * y) <= 110;\nloop invariant 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= x + (10 * y) <= 110;\nloop invariant 0 <= y + (10 * x) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= x + (10 * y) <= 110;\nloop invariant 0 <= y + (10 * x) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= y;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 40;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x + y >= 20;\nloop invariant x + y <= 30;\nloop invariant x >= 10;\nloop invariant y >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x + y >= 0;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant (x >= 0) ==> (x <= 10);\nloop invariant (y >= 0) ==> (y <= 10);\nloop invariant (x >= 0) ==> (x <= 10);\nloop invariant (y >= 0) ==> (y <= 10);\nloop invariant (x == 20) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\nloop invariant x <= 30;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x <= y + 10;\nloop invariant (x == 20) ==> (y != 0);\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: y >= 0;\n\nloop invariant i6: x <= y + 10;\nloop invariant i7: (x == 20) ==> (y != 0);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= y;\nloop invariant x <= 10 + 10 * (x / 10);\nloop invariant y <= 10 + 10 * (y / 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: x <= 10 + 10 * (x / 10);\nloop invariant i5: y <= 10 + 10 * (y / 10);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (y == 0) ==> (x == 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x == (10 * i);\nloop invariant y == (10 * i);\nloop invariant unknown() ==> (x == (10 * i));\nloop invariant unknown() ==> (y == (10 * i));\nloop invariant unknown() ==> (x <= 20);\nloop invariant unknown() ==> (y <= 20);\nloop invariant unknown() ==> (i < 2);\nloop invariant (unknown() && (i < 2)) ==> (x == (10 * i));\nloop invariant (unknown() && (i < 2)) ==> (y == (10 * i));\nloop invariant (unknown() && (i < 2)) ==> (x <= 20);\nloop invariant (unknown() && (i < 2)) ==> (y <= 20);\nloop invariant (unknown() && (i < 2)) ==> (i < 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= y;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant y != 0 ==> x == 20;\nloop invariant y == 0 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 10;\nloop invariant (x - 10) >= y;\nloop invariant (x - 10) >= 0;\nloop invariant (y - 10) <= 0;\nloop invariant (y - 10) >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= (0 + y);\nloop invariant y >= (0 + x);\nloop invariant x <= (10 + y);\nloop invariant y <= (10 + x);\nloop invariant (x == 20) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: x <= (10 + y);\nloop invariant i6: y <= (10 + x);\nloop invariant i7: (x == 20) ==> (y != 0);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x + y) >= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\nloop invariant (x + y) <= 40;\nloop invariant (x + y) >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x <= 10 ==> y <= 10;\nloop invariant x <= 10 ==> y >= 0;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> x <= 20;\nloop invariant x <= 10 ==> x >= 0;\nloop invariant x <= 10 ==> x <= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x <= 20;\nloop invariant x >= 10 ==> y <= 10;\nloop invariant x >= 10 ==> y >= 0;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\nloop invariant x >= 10 ==> y <= 20;\nloop invariant x >= 10 ==> y >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\nloop invariant i8: x <= 10 ==> y >= 0;\n\n\n\nloop invariant i12: x <= 10 ==> x >= 0;\nloop invariant i13: x <= 10 ==> x <= 10;\nloop invariant i14: x >= 10 ==> x >= 10;\n\nloop invariant i16: x >= 10 ==> y >= 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 20;\nloop invariant y <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x + (10 * y) <= 110;\nloop invariant 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= x + (10 * y) <= 110;\nloop invariant 0 <= y + (10 * x) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= x + (10 * y) <= 110;\nloop invariant 0 <= y + (10 * x) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\nloop invariant i6: 0 <= x + (10 * y) <= 110 ==> 0 <= x + (10 * y) <= 110;\nloop invariant i7: 0 <= y + (10 * x) <= 110 ==> 0 <= y + (10 * x) <= 110;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 48: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: 0 <= y <= 10;\nloop invariant i3: x >= y;\nloop invariant i4: x <= 20;\nloop invariant i5: y <= 20;\nloop invariant i6: x + y >= 0;\nloop invariant i7: x + y <= 40;\nloop invariant i8: x + y >= 20;\nloop invariant i9: x + y <= 30;\nloop invariant i10: x >= 10;\nloop invariant i11: y >= 10;\nloop invariant i12: (x >= 0) ==> (x <= 10);\nloop invariant i13: (y >= 0) ==> (y <= 10);\nloop invariant i14: (x == 20) ==> (y != 0);\nloop invariant i15: x >= 0;\nloop invariant i16: x <= 30;\nloop invariant i17: y >= 0;\nloop invariant i18: y <= x;\nloop invariant i19: x <= y + 10;\nloop invariant i20: 0 <= x <= 20;\nloop invariant i21: 0 <= y <= 20;\nloop invariant i22: x <= 10 + 10 * (x / 10);\nloop invariant i23: y <= 10 + 10 * (y / 10);\nloop invariant i24: (y == 0) ==> (x == 20);\nloop invariant i25: 0 <= y <= 100000;\nloop invariant i26: x >= (1 + (y - 1) * y / 2);\nloop invariant i27: x == (10 * i);\nloop invariant i28: y == (10 * i);\nloop invariant i29: unknown() ==> (x == (10 * i));\nloop invariant i30: unknown() ==> (y == (10 * i));\nloop invariant i31: unknown() ==> (x <= 20);\nloop invariant i32: unknown() ==> (y <= 20);\nloop invariant i33: unknown() ==> (i < 2);\nloop invariant i34: (unknown() && (i < 2)) ==> (x == (10 * i));\nloop invariant i35: (unknown() && (i < 2)) ==> (y == (10 * i));\nloop invariant i36: (unknown() && (i < 2)) ==> (x <= 20);\nloop invariant i37: (unknown() && (i < 2)) ==> (y <= 20);\nloop invariant i38: (unknown() && (i < 2)) ==> (i < 2);\nloop invariant i39: x <= y;\nloop invariant i40: y != 0 ==> x == 20;\nloop invariant i41: y == 0 ==> x == 0;\nloop invariant i42: (x - 10) >= y;\nloop invariant i43: (x - 10) >= 0;\nloop invariant i44: (y - 10) <= 0;\nloop invariant i45: (y - 10) >= 0;\nloop invariant i46: x >= (0 + y);\nloop invariant i47: y >= (0 + x);\nloop invariant i48: x <= (10 + y);\nloop invariant i49: y <= (10 + x);\nloop invariant i50: (x + y) >= 10;\nloop invariant i51: (x + y) <= 40;\nloop invariant i52: x <= 10 ==> y <= 10;\nloop invariant i53: x <= 10 ==> y >= 0;\nloop invariant i54: x >= 10 ==> y >= 10;\nloop invariant i55: x >= 10 ==> y <= 20;\nloop invariant i56: x >= 10 ==> x <= 20;\nloop invariant i57: x <= 10 ==> x >= 0;\nloop invariant i58: x <= 10 ==> x <= 10;\nloop invariant i59: x >= 10 ==> x >= 10;\nloop invariant i60: x >= 10 ==> y <= 10;\nloop invariant i61: x >= 10 ==> y >= 0;\nloop invariant i62: 0 <= x + (10 * y) <= 110;\nloop invariant i63: 0 <= y + (10 * x) <= 110;\nloop invariant i64: 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant i65: 0 <= x + (10 * y) <= 110 ==> 0 <= x + (10 * y) <= 110;\nloop invariant i66: 0 <= y + (10 * x) <= 110 ==> 0 <= y + (10 * x) <= 110;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x + y >= 0;\n\n\n\n\n\n\n\nloop invariant i14: (x == 20) ==> (y != 0);\nloop invariant i15: x >= 0;\n\nloop invariant i17: y >= 0;\n\nloop invariant i19: x <= y + 10;\n\n\nloop invariant i22: x <= 10 + 10 * (x / 10);\nloop invariant i23: y <= 10 + 10 * (y / 10);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i48: x <= (10 + y);\nloop invariant i49: y <= (10 + x);\n\n\n\nloop invariant i53: x <= 10 ==> y >= 0;\n\n\n\nloop invariant i57: x <= 10 ==> x >= 0;\nloop invariant i58: x <= 10 ==> x <= 10;\nloop invariant i59: x >= 10 ==> x >= 10;\n\nloop invariant i61: x >= 10 ==> y >= 0;\n\n\nloop invariant i64: 0 <= x + (10 * y) <= 110 ==> 0 <= y + (10 * x) <= 110;\nloop invariant i65: 0 <= x + (10 * y) <= 110 ==> 0 <= x + (10 * y) <= 110;\nloop invariant i66: 0 <= y + (10 * x) <= 110 ==> 0 <= y + (10 * x) <= 110;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c"
        ],
        "skipped": [],
        "total": 59,
        "success_count": 48,
        "failure_count": 11,
        "success_rate": 0.8135593220338984
    }
}