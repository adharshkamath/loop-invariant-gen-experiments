{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/21.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m <= x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant 0 <= x < n;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= 2;\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant n <= x ==> m == x;\nloop invariant m == x ==> n <= x;\nloop invariant m == x ==> m == n;\nloop invariant m == x ==> x == n;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant (x - m) + 1 == n;\nloop invariant (x - m) + 1 >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant m >= 0;\nloop invariant m <= n - 1;\nloop invariant n > 1 ==> n > m;\nloop invariant n <= m ==> n == m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant x + unknown() ==> m = x;\nloop invariant x + !unknown() ==> m = x;\nloop invariant m < n ==> n > 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= m;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant (x == n || !unknown()) ==> (m == x);\nloop invariant (x < n) ==> (m <= n);\nloop invariant (x >= n) ==> (m < n);\nloop invariant (x < n) ==> (m <= x);\nloop invariant (x >= n) ==> (m == x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m == (if x < n then 1 else x);\nloop invariant x == (if x < n then m else n);\nloop invariant n <= x ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant n > 1 ==> m < n;\nloop invariant n <= 1 ==> m <= n;\nloop invariant n <= 1 ==> m <= n;\nloop invariant n <= 1 ==> m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant x < n ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= m ==> m <= x;\nloop invariant n <= 1 ==> m < n;\nloop invariant x < n ==> m < n;\nloop invariant n > 1 ==> x < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < x;\nloop invariant m < n ==> m <= m;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant if n > 1 then m < n else true;\nloop invariant if n <= 1 then true else m < n;\nloop invariant if m < n then x < n else true;\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant if n > 1 then m < n else true;\nloop invariant if n <= 1 then true else m < n;\nloop invariant if m < n then x < n else true;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m <= x;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: m <= x;\n\n\nloop invariant i4: m >= 1;\nloop invariant i5: x >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m <= x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 1;\n\nloop invariant i5: m <= x + 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant 0 <= x < n;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= 2;\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant n <= x ==> m == x;\nloop invariant m == x ==> n <= x;\nloop invariant m == x ==> m == n;\nloop invariant m == x ==> x == n;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\nloop invariant m == x ==> x == m;\nloop invariant m == x ==> m == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\nloop invariant i4: m <= x;\n\n\n\n\nloop invariant i9: m == x ==> x == m;\nloop invariant i10: m == x ==> m == x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant (x - m) + 1 == n;\nloop invariant (x - m) + 1 >= 0;\nloop invariant x <= n;\nloop invariant x >= 1;\nloop invariant m >= 0;\nloop invariant m <= n - 1;\nloop invariant n > 1 ==> n > m;\nloop invariant n <= m ==> n == m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\nloop invariant n <= m ==> n <= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: (x - m) + 1 >= 0;\n\nloop invariant i5: x >= 1;\nloop invariant i6: m >= 0;\n\nloop invariant i8: n > 1 ==> n > m;\n\nloop invariant i10: n <= m ==> n <= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant x + unknown() ==> m = x;\nloop invariant x + !unknown() ==> m = x;\nloop invariant m < n ==> n > 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\nloop invariant i5: m < n ==> n > 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= m;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: x >= m;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 < x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant (x == n || !unknown()) ==> (m == x);\nloop invariant (x < n) ==> (m <= n);\nloop invariant (x >= n) ==> (m < n);\nloop invariant (x < n) ==> (m <= x);\nloop invariant (x >= n) ==> (m == x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\nloop invariant i5: (x < n) ==> (m <= n);\n\nloop invariant i7: (x < n) ==> (m <= x);\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m == (if x < n then 1 else x);\nloop invariant x == (if x < n then m else n);\nloop invariant n <= x ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant n > 1 ==> m < n;\nloop invariant n <= 1 ==> m <= n;\nloop invariant n <= 1 ==> m <= n;\nloop invariant n <= 1 ==> m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\nloop invariant i3: n > 1 ==> m < n;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant x < n ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: x < n ==> m < n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= m ==> m <= x;\nloop invariant n <= 1 ==> m < n;\nloop invariant x < n ==> m < n;\nloop invariant n > 1 ==> x < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < x;\nloop invariant m < n ==> m <= m;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= m ==> m <= x;\n\nloop invariant i4: x < n ==> m < n;\n\nloop invariant i6: m < n ==> m < n;\n\nloop invariant i8: m < n ==> m <= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant if n > 1 then m < n else true;\nloop invariant if n <= 1 then true else m < n;\nloop invariant if m < n then x < n else true;\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant if n > 1 then m < n else true;\nloop invariant if n <= 1 then true else m < n;\nloop invariant if m < n then x < n else true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: m <= x;\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 46: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: m <= x;\nloop invariant i2: x <= n;\nloop invariant i3: m <= n;\nloop invariant i4: m >= 1;\nloop invariant i5: x >= 1;\nloop invariant i6: 0 <= x <= n;\nloop invariant i7: m <= x + 1;\nloop invariant i8: n >= 1;\nloop invariant i9: 0 <= x < n;\nloop invariant i10: z1 >= 0;\nloop invariant i11: z2 >= 0;\nloop invariant i12: z3 >= 0;\nloop invariant i13: 1 <= n <= 2;\nloop invariant i14: 1 <= x <= n;\nloop invariant i15: 1 <= m <= n;\nloop invariant i16: n <= x ==> m == x;\nloop invariant i17: m == x ==> n <= x;\nloop invariant i18: m == x ==> m == n;\nloop invariant i19: m == x ==> x == n;\nloop invariant i20: m == x ==> x == m;\nloop invariant i21: m == x ==> m == x;\nloop invariant i22: 0 <= m <= n;\nloop invariant i23: (x - m) + 1 == n;\nloop invariant i24: (x - m) + 1 >= 0;\nloop invariant i25: m >= 0;\nloop invariant i26: m <= n - 1;\nloop invariant i27: n > 1 ==> n > m;\nloop invariant i28: n <= m ==> n == m;\nloop invariant i29: n <= m ==> n <= m;\nloop invariant i30: x + unknown() ==> m = x;\nloop invariant i31: x + !unknown() ==> m = x;\nloop invariant i32: m < n ==> n > 1;\nloop invariant i33: x >= m;\nloop invariant i34: 1 <= m <= x;\nloop invariant i35: 0 < x <= n;\nloop invariant i36: (x == n || !unknown()) ==> (m == x);\nloop invariant i37: (x < n) ==> (m <= n);\nloop invariant i38: (x >= n) ==> (m < n);\nloop invariant i39: (x < n) ==> (m <= x);\nloop invariant i40: (x >= n) ==> (m == x);\nloop invariant i41: m == (if x < n then 1 else x);\nloop invariant i42: x == (if x < n then m else n);\nloop invariant i43: n <= x ==> m < n;\nloop invariant i44: n > 1 ==> m < n;\nloop invariant i45: n <= 1 ==> m <= n;\nloop invariant i46: x < n ==> m < n;\nloop invariant i47: m <= m ==> m <= x;\nloop invariant i48: n <= 1 ==> m < n;\nloop invariant i49: n > 1 ==> x < n;\nloop invariant i50: m < n ==> m < n;\nloop invariant i51: m < n ==> m < x;\nloop invariant i52: m < n ==> m <= m;\nloop invariant i53: if n > 1 then m < n else true;\nloop invariant i54: if n <= 1 then true else m < n;\nloop invariant i55: if m < n then x < n else true;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: m <= x;\n\n\nloop invariant i4: m >= 1;\nloop invariant i5: x >= 1;\n\nloop invariant i7: m <= x + 1;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: m == x ==> x == m;\nloop invariant i21: m == x ==> m == x;\n\n\nloop invariant i24: (x - m) + 1 >= 0;\nloop invariant i25: m >= 0;\n\nloop invariant i27: n > 1 ==> n > m;\n\nloop invariant i29: n <= m ==> n <= m;\n\n\nloop invariant i32: m < n ==> n > 1;\nloop invariant i33: x >= m;\nloop invariant i34: 1 <= m <= x;\n\n\nloop invariant i37: (x < n) ==> (m <= n);\n\nloop invariant i39: (x < n) ==> (m <= x);\n\n\n\n\nloop invariant i44: n > 1 ==> m < n;\n\nloop invariant i46: x < n ==> m < n;\nloop invariant i47: m <= m ==> m <= x;\n\n\nloop invariant i50: m < n ==> m < n;\n\nloop invariant i52: m < n ==> m <= m;\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c"
        ],
        "skipped": [],
        "total": 18,
        "success_count": 14,
        "failure_count": 4,
        "success_rate": 0.7777777777777778
    }
}