{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/49.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (unknown()) then c <= n else c > n;\nloop invariant if (unknown()) then if (c != n) then c <= n - 1 else c == n else if (c == n) then c == 1 else c > 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c == c + 1 else c == c else c == 1 else if (c == n) then c == c + 1 else c == 1 else c == c - 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c <= n - 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant n <= 0 ==> c != n;\nloop invariant n > 0 ==> c == n ==> c == 1;\nloop invariant c == n ==> c != n ==> c == 0;\nloop invariant c != n ==> c != 1 ==> c <= n - 1;\nloop invariant c != n ==> c == 1 ==> c <= n;\nloop invariant c != n ==> c == 0 ==> c == 0;\nloop invariant c != n ==> c <= n ==> c >= 1;\nloop invariant c != n ==> c >= 1 ==> c <= n;\n*/\n```",
            "```\n/*@\nloop invariant C <= N;\nloop invariant C >= 0;\nloop invariant C != N ==> unknown();\nloop invariant C == N ==> !unknown();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c != n ==> n != -1;\nloop invariant c == n ==> n == -1;\nloop invariant c >= 1 ==> n != -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c >= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant unknown() ==> c == n ==> c == 1;\nloop invariant !unknown() ==> c != n ==> c == 1;\nloop invariant !unknown() ==> c != n ==> c != 1;\nloop invariant !unknown() ==> c == n ==> c == 1;\nloop invariant !unknown() ==> c == n ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2147483647;\nloop invariant 0 <= c <= 2147483647;\nloop invariant n <= c;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c >= 1;\nloop invariant c == n ==> c == 1;\nloop invariant c == n ==> n <= 0;\nloop invariant c == n ==> n >= -2147483648;\nloop invariant c != n ==> n <= 2147483646;\nloop invariant c != n ==> n >= 0;\nloop invariant c != n ==> n >= -2147483648;\nloop invariant c != n ==> n >= -1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n * (n + 1) / 2 <= c <= n * n;\nloop invariant c <= n;\nloop invariant c + 1 <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 0 ==> unknown() == 0;\nloop invariant c == n ==> unknown() == 0;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n + 1;\nloop invariant c <= n + 1 ==> n <= -1;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant c <= n + 1 ==> n >= 0 ==> c != n;\nloop invariant c <= n + 1 ==> n >= 0 ==> c <= n;\nloop invariant c <= n + 1 ==> n >= 0 ==> c >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant c >= n - 1;\nloop invariant c <= n;\nloop invariant c == 1 ==> n == -1;\nloop invariant c != n ==> n > 0;\nloop invariant c == n ==> n <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant c >= (1 + (n - 1) * n / 2);\nloop invariant c <= (n + 1);\nloop invariant c >= 0;\nloop invariant c <= 100000;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant if (unknown()) then c != n else c == n ==> c == 1;\nloop invariant if c == n then c == 1 else c != n ==> c >= 0;\nloop invariant if c == n then c == 1 else c != n ==> c <= n;\nloop invariant if c == n then c == 1 else c != n ==> if (unknown()) then c != n else c == n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> c != -1;\nloop invariant if c == n then c == 1 else c != n ==> c != -1;\nloop invariant if (unknown()) then c != n else c == n ==> if (unknown()) then c != n else c == n;\nloop invariant if c == n then c == 1 else c != n ==> if (unknown()) then c != n else c == n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (unknown()) then c <= n else c > n;\nloop invariant if (unknown()) then if (c != n) then c <= n - 1 else c == n else if (c == n) then c == 1 else c > 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c == c + 1 else c == c else c == 1 else if (c == n) then c == c + 1 else c == 1 else c == c - 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c <= n - 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant n <= 0 ==> c != n;\nloop invariant n > 0 ==> c == n ==> c == 1;\nloop invariant c == n ==> c != n ==> c == 0;\nloop invariant c != n ==> c != 1 ==> c <= n - 1;\nloop invariant c != n ==> c == 1 ==> c <= n;\nloop invariant c != n ==> c == 0 ==> c == 0;\nloop invariant c != n ==> c <= n ==> c >= 1;\nloop invariant c != n ==> c >= 1 ==> c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: c == n ==> c != n ==> c == 0;\n\n\nloop invariant i7: c != n ==> c == 0 ==> c == 0;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant C <= N;\nloop invariant C >= 0;\nloop invariant C != N ==> unknown();\nloop invariant C == N ==> !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\nloop invariant c <= n ==> c >= 1;\nloop invariant n <= c ==> c >= 1;\nloop invariant n == c ==> c <= 0;\nloop invariant n != c ==> c >= 1;\nloop invariant n >= c ==> c >= 1;\nloop invariant n > c ==> c <= n-1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: n > c ==> c <= n-1;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c != n ==> n != -1;\nloop invariant c == n ==> n == -1;\nloop invariant c >= 1 ==> n != -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\nloop invariant c == 1 ==> n == -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c == n) ==> (c >= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: (c == n) ==> (c >= n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant unknown() ==> c == n ==> c == 1;\nloop invariant !unknown() ==> c != n ==> c == 1;\nloop invariant !unknown() ==> c != n ==> c != 1;\nloop invariant !unknown() ==> c == n ==> c == 1;\nloop invariant !unknown() ==> c == n ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\nloop invariant c >= 0 ==> c == 1 ==> c != 1;\nloop invariant c >= 0 ==> c != 1 ==> c == 1;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c != 1 ==> c != 1;\nloop invariant c >= 0 ==> c == 1 ==> c == 1;\nloop invariant c >= 0 ==> c != 1 ==> c != 1;\nloop invariant c <= n ==> c == 1 ==> c != 1;\nloop invariant c <= n ==> c != 1 ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c >= 0;\n\n\n\n\n\nloop invariant i9: c <= n ==> c == 1 ==> c == 1;\nloop invariant i10: c <= n ==> c != 1 ==> c != 1;\nloop invariant i11: c >= 0 ==> c == 1 ==> c == 1;\nloop invariant i12: c >= 0 ==> c != 1 ==> c != 1;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2147483647;\nloop invariant 0 <= c <= 2147483647;\nloop invariant n <= c;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c >= 1;\nloop invariant c == n ==> c == 1;\nloop invariant c == n ==> n <= 0;\nloop invariant c == n ==> n >= -2147483648;\nloop invariant c != n ==> n <= 2147483646;\nloop invariant c != n ==> n >= 0;\nloop invariant c != n ==> n >= -2147483648;\nloop invariant c != n ==> n >= -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n <= 2147483647;\nloop invariant i2: 0 <= c <= 2147483647;\n\n\n\n\n\nloop invariant i8: c == n ==> n >= -2147483648;\n\nloop invariant i10: c != n ==> n >= 0;\nloop invariant i11: c != n ==> n >= -2147483648;\nloop invariant i12: c != n ==> n >= -1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n * (n + 1) / 2 <= c <= n * n;\nloop invariant c <= n;\nloop invariant c + 1 <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 0 ==> unknown() == 0;\nloop invariant c == n ==> unknown() == 0;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c == n ==> unknown() == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: c >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n + 1;\nloop invariant c <= n + 1 ==> n <= -1;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant c <= n + 1 ==> n >= 0 ==> c != n;\nloop invariant c <= n + 1 ==> n >= 0 ==> c <= n;\nloop invariant c <= n + 1 ==> n >= 0 ==> c >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c <= n + 1 ==> n >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant c >= n - 1;\nloop invariant c <= n;\nloop invariant c == 1 ==> n == -1;\nloop invariant c != n ==> n > 0;\nloop invariant c == n ==> n <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant c >= (1 + (n - 1) * n / 2);\nloop invariant c <= (n + 1);\nloop invariant c >= 0;\nloop invariant c <= 100000;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\nloop invariant c >= (n - 1) * n / 2;\nloop invariant c <= n * (n + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: c >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant if (unknown()) then c != n else c == n ==> c == 1;\nloop invariant if c == n then c == 1 else c != n ==> c >= 0;\nloop invariant if c == n then c == 1 else c != n ==> c <= n;\nloop invariant if c == n then c == 1 else c != n ==> if (unknown()) then c != n else c == n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> c != -1;\nloop invariant if c == n then c == 1 else c != n ==> c != -1;\nloop invariant if (unknown()) then c != n else c == n ==> if (unknown()) then c != n else c == n;\nloop invariant if c == n then c == 1 else c != n ==> if (unknown()) then c != n else c == n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\nloop invariant if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: if (unknown()) then c <= n else c > n;\nloop invariant i3: if (unknown()) then if (c != n) then c <= n - 1 else c == n else if (c == n) then c == 1 else c > 1;\nloop invariant i4: if (unknown()) then if (unknown()) then if (c != n) then c == c + 1 else c == c else c == 1 else if (c == n) then c == c + 1 else c == 1 else c == c - 1;\nloop invariant i5: if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c <= n - 1 else c > n else c == 1;\nloop invariant i6: if (unknown()) then if (unknown()) then if (c != n) then c >= 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant i7: if (unknown()) then if (unknown()) then if (c != n) then c <= n - 1 else c == n else c == 1 else if (c == n) then c >= 1 else c > n else c == 1;\nloop invariant i8: 1 <= c <= n;\nloop invariant i9: n <= 0 ==> c != n;\nloop invariant i10: n > 0 ==> c == n ==> c == 1;\nloop invariant i11: c == n ==> c != n ==> c == 0;\nloop invariant i12: c != n ==> c != 1 ==> c <= n - 1;\nloop invariant i13: c != n ==> c == 1 ==> c <= n;\nloop invariant i14: c != n ==> c == 0 ==> c == 0;\nloop invariant i15: c != n ==> c <= n ==> c >= 1;\nloop invariant i16: c != n ==> c >= 1 ==> c <= n;\nloop invariant i17: C <= N;\nloop invariant i18: C >= 0;\nloop invariant i19: C != N ==> unknown();\nloop invariant i20: C == N ==> !unknown();\nloop invariant i21: n == c ==> c <= 0;\nloop invariant i22: n != c ==> c >= 1;\nloop invariant i23: n >= c ==> c >= 1;\nloop invariant i24: n > c ==> c <= n-1;\nloop invariant i25: c <= n ==> c >= 1;\nloop invariant i26: n <= c ==> c >= 1;\nloop invariant i27: c <= n;\nloop invariant i28: c >= 1;\nloop invariant i29: c != n ==> n != -1;\nloop invariant i30: c == n ==> n == -1;\nloop invariant i31: c >= 1 ==> n != -1;\nloop invariant i32: c == 1 ==> n == -1;\nloop invariant i33: (c != n) ==> (c <= n);\nloop invariant i34: (c == n) ==> (c >= n);\nloop invariant i35: c >= 0;\nloop invariant i36: unknown() ==> c == n ==> c == 1;\nloop invariant i37: !unknown() ==> c != n ==> c == 1;\nloop invariant i38: !unknown() ==> c != n ==> c != 1;\nloop invariant i39: !unknown() ==> c == n ==> c == 1;\nloop invariant i40: !unknown() ==> c == n ==> c != 1;\nloop invariant i41: c <= n ==> c == 1 ==> c == 1;\nloop invariant i42: c <= n ==> c != 1 ==> c != 1;\nloop invariant i43: c >= 0 ==> c == 1 ==> c == 1;\nloop invariant i44: c >= 0 ==> c != 1 ==> c != 1;\nloop invariant i45: c <= n ==> c == 1 ==> c != 1;\nloop invariant i46: c <= n ==> c != 1 ==> c == 1;\nloop invariant i47: c >= 0 ==> c == 1 ==> c != 1;\nloop invariant i48: c >= 0 ==> c != 1 ==> c == 1;\nloop invariant i49: 0 <= n <= 2147483647;\nloop invariant i50: 0 <= c <= 2147483647;\nloop invariant i51: n <= c;\nloop invariant i52: c <= n + 1;\nloop invariant i53: c != n ==> c >= 1;\nloop invariant i54: c == n ==> c == 1;\nloop invariant i55: c == n ==> n <= 0;\nloop invariant i56: c == n ==> n >= -2147483648;\nloop invariant i57: c != n ==> n <= 2147483646;\nloop invariant i58: c != n ==> n >= 0;\nloop invariant i59: c != n ==> n >= -2147483648;\nloop invariant i60: c != n ==> n >= -1;\nloop invariant i61: n * (n + 1) / 2 <= c <= n * n;\nloop invariant i62: c + 1 <= n;\nloop invariant i63: c == 0 ==> unknown() == 0;\nloop invariant i64: c == n ==> unknown() == 0;\nloop invariant i65: c == n ==> unknown() == 1;\nloop invariant i66: 0 <= c;\nloop invariant i67: 1 <= c <= n + 1;\nloop invariant i68: c <= n + 1 ==> n <= -1;\nloop invariant i69: c <= n + 1 ==> n >= 0;\nloop invariant i70: c <= n + 1 ==> n >= 0 ==> c != n;\nloop invariant i71: c <= n + 1 ==> n >= 0 ==> c <= n;\nloop invariant i72: c <= n + 1 ==> n >= 0 ==> c >= 1;\nloop invariant i73: 0 <= n <= 100000;\nloop invariant i74: c >= n - 1;\nloop invariant i75: c != n ==> n > 0;\nloop invariant i76: c >= (1 + (n - 1) * n / 2);\nloop invariant i77: c <= (n + 1);\nloop invariant i78: c <= 100000;\nloop invariant i79: c >= (n - 1) * n / 2;\nloop invariant i80: c <= n * (n + 1) / 2;\nloop invariant i81: if (unknown()) then c != n else c == n ==> c == 1;\nloop invariant i82: if c == n then c == 1 else c != n ==> c >= 0;\nloop invariant i83: if c == n then c == 1 else c != n ==> c <= n;\nloop invariant i84: if c == n then c == 1 else c != n ==> if (unknown()) then c != n else c == n;\nloop invariant i85: if (unknown()) then c != n else c == n ==> if c == n then c == 1 else c != n;\nloop invariant i86: if (unknown()) then c != n else c == n ==> c != -1;\nloop invariant i87: if c == n then c == 1 else c != n ==> c != -1;\nloop invariant i88: if (unknown()) then c != n else c == n ==> if (unknown()) then c != n else c == n;\nloop invariant i89: if c == n then c == 1 else c != n ==> if c == n then c == 1 else c != n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 49,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\n\n\n\n\n\n\nloop invariant i9: n <= 0 ==> c != n;\n\nloop invariant i11: c == n ==> c != n ==> c == 0;\nloop invariant i12: c != n ==> c != 1 ==> c <= n - 1;\nloop invariant i13: c != n ==> c == 1 ==> c <= n;\nloop invariant i14: c != n ==> c == 0 ==> c == 0;\n\nloop invariant i16: c != n ==> c >= 1 ==> c <= n;\n\n\n\n\n\n\n\nloop invariant i24: n > c ==> c <= n-1;\n\nloop invariant i26: n <= c ==> c >= 1;\nloop invariant i27: c <= n;\n\nloop invariant i29: c != n ==> n != -1;\n\nloop invariant i31: c >= 1 ==> n != -1;\n\nloop invariant i33: (c != n) ==> (c <= n);\nloop invariant i34: (c == n) ==> (c >= n);\nloop invariant i35: c >= 0;\n\n\n\n\n\nloop invariant i41: c <= n ==> c == 1 ==> c == 1;\nloop invariant i42: c <= n ==> c != 1 ==> c != 1;\nloop invariant i43: c >= 0 ==> c == 1 ==> c == 1;\nloop invariant i44: c >= 0 ==> c != 1 ==> c != 1;\n\n\n\n\nloop invariant i49: 0 <= n <= 2147483647;\nloop invariant i50: 0 <= c <= 2147483647;\n\nloop invariant i52: c <= n + 1;\n\n\n\nloop invariant i56: c == n ==> n >= -2147483648;\n\nloop invariant i58: c != n ==> n >= 0;\nloop invariant i59: c != n ==> n >= -2147483648;\nloop invariant i60: c != n ==> n >= -1;\n\n\n\n\n\nloop invariant i66: 0 <= c;\n\n\nloop invariant i69: c <= n + 1 ==> n >= 0;\n\nloop invariant i71: c <= n + 1 ==> n >= 0 ==> c <= n;\n\n\n\nloop invariant i75: c != n ==> n > 0;\n\nloop invariant i77: c <= (n + 1);\n\n\nloop invariant i80: c <= n * (n + 1) / 2;\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 41,
        "success_count": 34,
        "failure_count": 7,
        "success_rate": 0.8292682926829268
    }
}