{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/18.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x == n ==> m == n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n - 1;\nloop invariant 1 <= m <= n - 1;\nloop invariant x >= n ==> m = n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> m >= 1;\nloop invariant x < n ==> m <= n - 1;\nloop invariant x < n ==> m >= m;\n*/\n```",
            "```\n/*@\nloop invariant x >= m;\nloop invariant x >= 2;\nloop invariant x < n + 1;\nloop invariant m >= 1;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m == x;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant (x < n ==> m >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant (x < n ==> m >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\n*/\n```",
            "```\n/*@\nloop invariant x > 0;\nloop invariant m >= 1;\nloop invariant n > 1;\nloop invariant m >= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant x < n;\n*/\n```",
            "```\n/*@\nloop invariant x >= 1;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant x < n;\nloop invariant x >= 1;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant x < n ==> m >= 1;\nloop invariant x >= 1;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant x < n ==> m >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant x >= m;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x == n ==> m == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n - 1;\nloop invariant 1 <= m <= n - 1;\nloop invariant x >= n ==> m = n;\nloop invariant x < n ==> m <= x;\nloop invariant x < n ==> m >= 1;\nloop invariant x < n ==> m <= n - 1;\nloop invariant x < n ==> m >= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\nloop invariant i4: x < n ==> m <= x;\nloop invariant i5: x < n ==> m >= 1;\nloop invariant i6: x < n ==> m <= n - 1;\nloop invariant i7: x < n ==> m >= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= m;\nloop invariant x >= 2;\nloop invariant x < n + 1;\nloop invariant m >= 1;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: x >= m;\n\n\nloop invariant i4: m >= 1;\nloop invariant i5: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant (x < n ==> m >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\nloop invariant i3: (x < n ==> m >= 1);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\nloop invariant i3: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 1;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant (x < n ==> m >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: x >= m;\n\n\nloop invariant i6: (x < n ==> m >= 1);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\nloop invariant m <= n;\nloop invariant m <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x > 0;\nloop invariant m >= 1;\nloop invariant n > 1;\nloop invariant m >= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant x < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: x > 0;\nloop invariant i2: m >= 1;\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant x < n;\nloop invariant x >= 1;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant x < n ==> m >= 1;\nloop invariant x >= 1;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant x < n ==> m >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: m >= 1;\n\n\nloop invariant i5: x < n ==> m >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant x >= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: m <= x;\nloop invariant i4: x >= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\nloop invariant i5: m >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: 1 <= x <= n;\nloop invariant i2: m >= 1;\nloop invariant i3: m <= x;\nloop invariant i4: m <= n;\nloop invariant i5: (x == n ==> m == n);\nloop invariant i6: 1 <= x <= n - 1;\nloop invariant i7: 1 <= m <= n - 1;\nloop invariant i8: x >= n ==> m = n;\nloop invariant i9: x < n ==> m <= x;\nloop invariant i10: x < n ==> m >= 1;\nloop invariant i11: x < n ==> m <= n - 1;\nloop invariant i12: x < n ==> m >= m;\nloop invariant i13: x >= m;\nloop invariant i14: x >= 2;\nloop invariant i15: x < n + 1;\nloop invariant i16: 0 <= x <= n;\nloop invariant i17: m == x;\nloop invariant i18: i1;\nloop invariant i19: i2;\nloop invariant i20: i3;\nloop invariant i21: i4;\nloop invariant i22: i5;\nloop invariant i23: i6;\nloop invariant i24: i7;\nloop invariant i25: i8;\nloop invariant i26: i9;\nloop invariant i27: i10;\nloop invariant i28: i11;\nloop invariant i29: i12;\nloop invariant i30: i13;\nloop invariant i31: i14;\nloop invariant i32: i15;\nloop invariant i33: i16;\nloop invariant i34: i17;\nloop invariant i35: i18;\nloop invariant i36: i19;\nloop invariant i37: i20;\nloop invariant i38: i21;\nloop invariant i39: i22;\nloop invariant i40: i23;\nloop invariant i41: i24;\nloop invariant i42: i25;\nloop invariant i43: i26;\nloop invariant i44: i27;\nloop invariant i45: i28;\nloop invariant i46: i29;\nloop invariant i47: i30;\nloop invariant i48: i31;\nloop invariant i49: i32;\nloop invariant i50: i33;\nloop invariant i51: i34;\nloop invariant i52: i35;\nloop invariant i53: i36;\nloop invariant i54: i37;\nloop invariant i55: i38;\nloop invariant i56: i39;\nloop invariant i57: i40;\nloop invariant i58: i41;\nloop invariant i59: i42;\nloop invariant i60: i43;\nloop invariant i61: i44;\nloop invariant i62: i45;\nloop invariant i63: i46;\nloop invariant i64: i47;\nloop invariant i65: i48;\nloop invariant i66: i49;\nloop invariant i67: i50;\nloop invariant i68: i51;\nloop invariant i69: i52;\nloop invariant i70: i53;\nloop invariant i71: i54;\nloop invariant i72: i55;\nloop invariant i73: i56;\nloop invariant i74: i57;\nloop invariant i75: i58;\nloop invariant i76: i59;\nloop invariant i77: i60;\nloop invariant i78: i61;\nloop invariant i79: i62;\nloop invariant i80: i63;\nloop invariant i81: i64;\nloop invariant i82: i65;\nloop invariant i83: i66;\nloop invariant i84: i67;\nloop invariant i85: i68;\nloop invariant i86: i69;\nloop invariant i87: i70;\nloop invariant i88: i71;\nloop invariant i89: i72;\nloop invariant i90: i73;\nloop invariant i91: i74;\nloop invariant i92: i75;\nloop invariant i93: i76;\nloop invariant i94: i77;\nloop invariant i95: i78;\nloop invariant i96: i79;\nloop invariant i97: i80;\nloop invariant i98: i81;\nloop invariant i99: i82;\nloop invariant i100: i83;\nloop invariant i101: i84;\nloop invariant i102: i85;\nloop invariant i103: i86;\nloop invariant i104: i87;\nloop invariant i105: i88;\nloop invariant i106: i89;\nloop invariant i107: i90;\nloop invariant i108: i91;\nloop invariant i109: i92;\nloop invariant i110: i93;\nloop invariant i111: i94;\nloop invariant i112: i95;\nloop invariant i113: i96;\nloop invariant i114: i97;\nloop invariant i115: i98;\nloop invariant i116: i99;\nloop invariant i117: i100;\nloop invariant i118: i101;\nloop invariant i119: i102;\nloop invariant i120: i103;\nloop invariant i121: i104;\nloop invariant i122: i105;\nloop invariant i123: i106;\nloop invariant i124: i107;\nloop invariant i125: i108;\nloop invariant i126: i109;\nloop invariant i127: i110;\nloop invariant i128: i111;\nloop invariant i129: i112;\nloop invariant i130: i113;\nloop invariant i131: i114;\nloop invariant i132: i115;\nloop invariant i133: i116;\nloop invariant i134: i117;\nloop invariant i135: i118;\nloop invariant i136: i119;\nloop invariant i137: i120;\nloop invariant i138: i121;\nloop invariant i139: i122;\nloop invariant i140: i123;\nloop invariant i141: i124;\nloop invariant i142: i125;\nloop invariant i143: i126;\nloop invariant i144: i127;\nloop invariant i145: i128;\nloop invariant i146: i129;\nloop invariant i147: i130;\nloop invariant i148: i131;\nloop invariant i149: i132;\nloop invariant i150: i133;\nloop invariant i151: i134;\nloop invariant i152: i135;\nloop invariant i153: i136;\nloop invariant i154: i137;\nloop invariant i155: i138;\nloop invariant i156: i139;\nloop invariant i157: i140;\nloop invariant i158: i141;\nloop invariant i159: i142;\nloop invariant i160: i143;\nloop invariant i161: i144;\nloop invariant i162: i145;\nloop invariant i163: i146;\nloop invariant i164: i147;\nloop invariant i165: i148;\nloop invariant i166: i149;\nloop invariant i167: i150;\nloop invariant i168: i151;\nloop invariant i169: i152;\nloop invariant i170: i153;\nloop invariant i171: i154;\nloop invariant i172: i155;\nloop invariant i173: i156;\nloop invariant i174: i157;\nloop invariant i175: i158;\nloop invariant i176: 1 <= m <= x;\nloop invariant i177: (x < n ==> m >= 1);\nloop invariant i178: 1 <= m <= n;\nloop invariant i179: x <= n;\nloop invariant i180: m >= x;\nloop invariant i181: m <= 1;\nloop invariant i182: x > 0;\nloop invariant i183: n > 1;\nloop invariant i184: x < n;\nloop invariant i185: x >= 1;\nloop invariant i186: n >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 167,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: m <= x;\n\n\n\n\n\nloop invariant i9: x < n ==> m <= x;\nloop invariant i10: x < n ==> m >= 1;\nloop invariant i11: x < n ==> m <= n - 1;\nloop invariant i12: x < n ==> m >= m;\nloop invariant i13: x >= m;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i176: 1 <= m <= x;\nloop invariant i177: (x < n ==> m >= 1);\n\n\n\n\nloop invariant i182: x > 0;\n\n\nloop invariant i185: x >= 1;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c"
        ],
        "skipped": [],
        "total": 14,
        "success_count": 10,
        "failure_count": 4,
        "success_rate": 0.7142857142857143
    }
}