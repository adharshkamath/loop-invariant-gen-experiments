{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/15.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (x == n) ==> (m < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant if (x < n) then (m <= x);\nloop invariant if (n > 0) then (x == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n ==> n > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m == (x + 1);\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant x >= n ==> m >= 0;\nloop invariant x >= n ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant m <= x;\nloop invariant m < n;\nloop invariant x < n;\n*/\n```",
            "```\n/*@\nloop invariant x >= m;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant n > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m < n;\nloop invariant m < n ==> m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m == 0 ==> (unknown() == 0);\nloop invariant m < n ==> (unknown() == 1);\nloop invariant x >= m;\nloop invariant x < n;\nloop invariant n > 0 ==> (m < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\n\nloop invariant i6: m <= n ==> m < n ==> m < n;\nloop invariant i7: m <= n ==> m < n ==> m < n ==> m < n;\nloop invariant i8: m <= n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i9: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i10: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i11: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i12: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i13: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i14: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i15: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i16: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i17: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i18: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i19: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i20: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i21: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i22: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i23: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i24: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (x == n) ==> (m < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant if (x < n) then (m <= x);\nloop invariant if (n > 0) then (x == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n ==> n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant n > 0 ==> m < n;\nloop invariant x < n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x >= m;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= m <= x;\n\nloop invariant i3: x >= m;\n\nloop invariant i5: n > 0 ==> m < n;\n\nloop invariant i7: m <= x;\nloop invariant i8: m >= 0;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m == (x + 1);\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant x >= n ==> m >= 0;\nloop invariant x >= n ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: m >= 0;\n\nloop invariant i4: x >= n ==> m >= 0;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant m <= x;\nloop invariant m < n;\nloop invariant x < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= m;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: x >= m;\nloop invariant i2: x >= 0;\nloop invariant i3: m >= 0;\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant x == m || x + 1 == m ==> unknown() ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m < n;\nloop invariant m < n ==> m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\nloop invariant i4: m < n ==> m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m == 0 ==> (unknown() == 0);\nloop invariant m < n ==> (unknown() == 1);\nloop invariant x >= m;\nloop invariant x < n;\nloop invariant n > 0 ==> (m < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\nloop invariant i5: x >= m;\n\nloop invariant i7: n > 0 ==> (m < n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: m <= x;\n\nloop invariant i5: m >= 0;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 45: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: m <= x;\nloop invariant i4: m <= n;\nloop invariant i5: m <= n ==> m < n;\nloop invariant i6: m <= n ==> m < n ==> m < n;\nloop invariant i7: m <= n ==> m < n ==> m < n ==> m < n;\nloop invariant i8: m <= n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i9: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i10: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i11: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i12: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i13: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i14: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i15: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i16: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i17: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i18: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i19: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i20: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i21: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i22: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i23: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i24: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i25: 1 <= x <= n;\nloop invariant i26: m <= x <= n;\nloop invariant i27: m >= 0;\nloop invariant i28: m < n;\nloop invariant i29: (x == n) ==> (m < n);\nloop invariant i30: if (x < n) then (m <= x);\nloop invariant i31: if (n > 0) then (x == n);\nloop invariant i32: x <= n;\nloop invariant i33: m <= n ==> n > 0;\nloop invariant i34: 0 <= m <= x;\nloop invariant i35: x >= m;\nloop invariant i36: n > 0 ==> m < n;\nloop invariant i37: x < n;\nloop invariant i38: m == (x + 1);\nloop invariant i39: x >= 0;\nloop invariant i40: n >= 0;\nloop invariant i41: x >= n ==> m >= 0;\nloop invariant i42: x >= n ==> m < n;\nloop invariant i43: 1 <= n;\nloop invariant i44: 0 <= x < n;\nloop invariant i45: n > 0;\nloop invariant i46: x == m || x + 1 == m ==> unknown() ==> m < n;\nloop invariant i47: x == m || x + 1 == m ==> !unknown() ==> x < n;\nloop invariant i48: m < n ==> m <= x;\nloop invariant i49: m == 0 ==> (unknown() == 0);\nloop invariant i50: m < n ==> (unknown() == 1);\nloop invariant i51: n > 0 ==> (m < n);\nloop invariant i52: 0 <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\n\nloop invariant i6: m <= n ==> m < n ==> m < n;\nloop invariant i7: m <= n ==> m < n ==> m < n ==> m < n;\nloop invariant i8: m <= n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i9: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i10: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i11: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i12: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i13: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i14: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i15: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i16: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i17: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i18: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i19: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i20: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i21: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i22: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i23: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i24: m <= n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n\n\nloop invariant i27: m >= 0;\n\n\n\n\n\n\nloop invariant i34: 0 <= m <= x;\nloop invariant i35: x >= m;\nloop invariant i36: n > 0 ==> m < n;\n\n\nloop invariant i39: x >= 0;\n\nloop invariant i41: x >= n ==> m >= 0;\n\n\n\n\n\n\nloop invariant i48: m < n ==> m <= x;\n\n\nloop invariant i51: n > 0 ==> (m < n);\nloop invariant i52: 0 <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c"
        ],
        "skipped": [],
        "total": 12,
        "success_count": 8,
        "failure_count": 4,
        "success_rate": 0.6666666666666666
    }
}