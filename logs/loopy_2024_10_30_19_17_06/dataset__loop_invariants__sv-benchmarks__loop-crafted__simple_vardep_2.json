{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant (i >= 0) && (j >= 0) && (k >= 0);\nloop invariant i <= k/3;\nloop invariant j <= 2*k/3;\nloop invariant (k == 3*i) ==> (j == 2*i);\nloop invariant (k == 3*j/2) ==> (i == j/2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i <= k;\nloop invariant 3*i <= k;\nloop invariant j <= k;\nloop invariant k <= 0x0fffffff;\nloop invariant k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 1073741824;\nloop invariant 0 <= j <= 2147483648;\nloop invariant 0 <= k <= 2147483648;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant i + j + k <= 3145728000;\nloop invariant i + j + k >= 3;\nloop invariant i + j + k >= 3*i;\nloop invariant i + j + k >= 3*k;\nloop invariant i + j + k >= 2*j;\nloop invariant i + j + k >= 2*k;\nloop invariant i + j + k >= 2*i;\nloop invariant i + j + k >= i + j;\nloop invariant i + j + k >= i + k;\nloop invariant i + j + k >= j + k;\nloop invariant i + j + k >= i;\nloop invariant i + j + k >= j;\nloop invariant i + j + k >= k;\nloop invariant i + j + k <= i + j + k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant k <= 0x0fffffff;\nloop invariant i <= 0x0fffffff / 3;\nloop invariant j <= 2 * i;\nloop invariant k <= 3 * i;\nloop invariant j == 2 * i;\nloop invariant k == 3 * i;\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0xffffffff;\nloop invariant 0 <= j <= 0xffffffff;\nloop invariant j = 2*i;\nloop invariant k = 3*i;\nloop invariant i = k/3;\nloop invariant k % 3 == 0;\nloop invariant i % 1 == 0;\nloop invariant j % 1 == 0;\nloop invariant k % 1 == 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k / 3;\nloop invariant 0 <= j <= 2 * i;\nloop invariant k == 3 * i;\nloop invariant i == j / 2;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x1fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i == j / 2;\nloop invariant j == 2 * i;\nloop invariant k == 3 * i;\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x1fffffff;\nloop invariant i == j / 2 ==> i >= 0;\nloop invariant j == 2 * i ==> j >= 0;\nloop invariant k == 3 * i ==> k >= 0;\nloop invariant i >= 0 ==> i <= 0x0fffffff;\nloop invariant j >= 0 ==> j <= 0x1fffffff;\nloop invariant k >= 0 ==> k <= 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i <= j / 2;\nloop invariant j <= k / 3;\nloop invariant k == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 2 * (0x0fffffff / 3);\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i == j / 2;\nloop invariant k == 3 * i;\nloop invariant k > 0;\nloop invariant j > 0;\nloop invariant i > 0;\nloop invariant j == 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff/3;\nloop invariant 0 <= j <= 0x0fffffff/2;\nloop invariant i = k/3;\nloop invariant j = 2*k/3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i = k / 3;\nloop invariant j = 2 * k / 3;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant k <= i + 1;\nloop invariant k <= j + 2;\nloop invariant i + 1 <= k;\nloop invariant j + 2 <= k;\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i + 1 <= j + 2;\nloop invariant j + 2 <= i + 1;\nloop invariant i <= j <= k;\nloop invariant k <= i <= j;\nloop invariant i <= k <= j;\nloop invariant j <= k <= i;\nloop invariant i <= j <= k <= i + 1;\nloop invariant i <= k <= j <= i + 1;\nloop invariant j <= i <= k <= j + 2;\nloop invariant j <= k <= i <= j + 2;\nloop invariant i + 1 <= i <= j + 2;\nloop invariant i + 1 <= j <= k + 2;\nloop invariant j + 2 <= i <= k + 1;\nloop invariant j + 2 <= k <= i + 1;\nloop invariant i + 1 <= i + 1;\nloop invariant j + 2 <= j + 2;\nloop invariant k <= k;\nloop invariant i + 1 <= j + 2 <= k;\nloop invariant j + 2 <= i + 1 <= k;\nloop invariant k <= i + 1 <= j + 2;\nloop invariant k <= j + 2 <= i + 1;\nloop invariant i <= j <= k <= i + 1;\nloop invariant i <= k <= j <= i + 1;\nloop invariant j <= i <= k <= j + 2;\nloop invariant j <= k <= i <= j + 2;\nloop invariant i + 1 <= i <= j + 2 <= k;\nloop invariant i + 1 <= j <= k <= i + 1;\nloop invariant j + 2 <= i <= k <= j + 2;\nloop invariant j + 2 <= k <= i <= j + 2;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k;\nloop invariant i + 1 <= j + 2 <= k <= i + 1;\nloop invariant j + 2 <= i + 1 <= k <= j + 2;\nloop invariant j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant j + 2 <= i + 1 <= k <= j + 2 <= i + 1;\nloop invariant j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant j + 2 <= i + 1 <= k <= j + 2 <= i + 1 <= k;\nloop invariant j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant j + 2 <= i + 1 <= k <= j + 2 <= i + 1 <= k <= j + 2;\nloop invariant j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i = k / 3;\nloop invariant j = 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i < 0x0fffffff;\nloop invariant i <= j;\nloop invariant j < 0x0fffffff;\nloop invariant k == 3 * i;\nloop invariant i + 1 < 0x0fffffff;\nloop invariant j + 2 < 0x0fffffff;\nloop invariant k + 3 < 0x0fffffff;\nloop invariant i + 1 <= j + 2;\nloop invariant i + 1 <= k + 3;\nloop invariant j + 2 <= k + 3;\nloop invariant i + 1 <= j;\nloop invariant j <= k + 3;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant (i >= 0) && (j >= 0) && (k >= 0);\nloop invariant i <= k/3;\nloop invariant j <= 2*k/3;\nloop invariant (k == 3*i) ==> (j == 2*i);\nloop invariant (k == 3*j/2) ==> (i == j/2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: (i >= 0) && (j >= 0) && (k >= 0);\nloop invariant i3: i <= k/3;\nloop invariant i4: j <= 2*k/3;\nloop invariant i5: (k == 3*i) ==> (j == 2*i);\nloop invariant i6: (k == 3*j/2) ==> (i == j/2);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i <= k;\nloop invariant 3*i <= k;\nloop invariant j <= k;\nloop invariant k <= 0x0fffffff;\nloop invariant k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= j;\nloop invariant i2: i <= k;\nloop invariant i3: 3*i <= k;\nloop invariant i4: j <= k;\nloop invariant i5: k <= 0x0fffffff;\nloop invariant i6: k == 3*i ==> j == 2*i;\nloop invariant i7: k < 0x0fffffff ==> k == 3*i ==> j == 2*i;\nloop invariant i8: k < 0x0fffffff ==> k == 3*i ==> i <= k;\nloop invariant i9: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i10: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i11: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i12: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i13: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i14: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i15: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i16: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i17: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i18: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i19: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i20: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i21: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i22: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: k == 3*i;\nloop invariant i5: j == 2*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 1073741824;\nloop invariant 0 <= j <= 2147483648;\nloop invariant 0 <= k <= 2147483648;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant i + j + k <= 3145728000;\nloop invariant i + j + k >= 3;\nloop invariant i + j + k >= 3*i;\nloop invariant i + j + k >= 3*k;\nloop invariant i + j + k >= 2*j;\nloop invariant i + j + k >= 2*k;\nloop invariant i + j + k >= 2*i;\nloop invariant i + j + k >= i + j;\nloop invariant i + j + k >= i + k;\nloop invariant i + j + k >= j + k;\nloop invariant i + j + k >= i;\nloop invariant i + j + k >= j;\nloop invariant i + j + k >= k;\nloop invariant i + j + k <= i + j + k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\nloop invariant i2: 0 <= j <= 2147483648;\nloop invariant i3: 0 <= k <= 2147483648;\nloop invariant i4: k == 3*i;\nloop invariant i5: j == 2*i;\nloop invariant i6: i + j + k <= 3145728000;\n\nloop invariant i8: i + j + k >= 3*i;\n\nloop invariant i10: i + j + k >= 2*j;\nloop invariant i11: i + j + k >= 2*k;\nloop invariant i12: i + j + k >= 2*i;\nloop invariant i13: i + j + k >= i + j;\nloop invariant i14: i + j + k >= i + k;\nloop invariant i15: i + j + k >= j + k;\nloop invariant i16: i + j + k >= i;\nloop invariant i17: i + j + k >= j;\nloop invariant i18: i + j + k >= k;\nloop invariant i19: i + j + k <= i + j + k;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant k <= 0x0fffffff;\nloop invariant i <= 0x0fffffff / 3;\nloop invariant j <= 2 * i;\nloop invariant k <= 3 * i;\nloop invariant j == 2 * i;\nloop invariant k == 3 * i;\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant (k == 3 * i ==> j <= 2 * i);\nloop invariant (k == 3 * i ==> k <= 3 * i);\nloop invariant (k == 3 * i ==> j == 2 * i);\nloop invariant (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant (k == 3 * i ==> 0 <= i);\nloop invariant (k == 3 * i ==> 0 <= j);\nloop invariant (k == 3 * i ==> 0 <= k);\nloop invariant (k == 3 * i ==> k <= 0x0fffffff);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= k;\nloop invariant i4: k <= 0x0fffffff;\nloop invariant i5: i <= 0x0fffffff / 3;\nloop invariant i6: j <= 2 * i;\nloop invariant i7: k <= 3 * i;\nloop invariant i8: j == 2 * i;\nloop invariant i9: k == 3 * i;\nloop invariant i10: (k == 3 * i ==> j == 2 * i);\nloop invariant i11: (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant i12: (k == 3 * i ==> 0 <= i);\nloop invariant i13: (k == 3 * i ==> 0 <= j);\nloop invariant i14: (k == 3 * i ==> 0 <= k);\nloop invariant i15: (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant i16: (k == 3 * i ==> j <= 2 * i);\nloop invariant i17: (k == 3 * i ==> k <= 3 * i);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0xffffffff;\nloop invariant 0 <= j <= 0xffffffff;\nloop invariant j = 2*i;\nloop invariant k = 3*i;\nloop invariant i = k/3;\nloop invariant k % 3 == 0;\nloop invariant i % 1 == 0;\nloop invariant j % 1 == 0;\nloop invariant k % 1 == 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= 0xffffffff;\nloop invariant j <= 0xffffffff;\nloop invariant k <= 0xffffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= 0xffffffff;\nloop invariant i3: 0 <= j <= 0xffffffff;\n\n\n\nloop invariant i7: k % 3 == 0;\nloop invariant i8: i % 1 == 0;\nloop invariant i9: j % 1 == 0;\nloop invariant i10: k % 1 == 0;\nloop invariant i11: i <= 0xffffffff;\nloop invariant i12: j <= 0xffffffff;\nloop invariant i13: k <= 0xffffffff;\nloop invariant i14: i >= 0;\nloop invariant i15: j >= 0;\nloop invariant i16: k >= 0;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k / 3;\nloop invariant 0 <= j <= 2 * i;\nloop invariant k == 3 * i;\nloop invariant i == j / 2;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= k / 3;\nloop invariant i2: 0 <= j <= 2 * i;\nloop invariant i3: k == 3 * i;\nloop invariant i4: i == j / 2;\nloop invariant i5: i >= 0;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x1fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i == j / 2;\nloop invariant j == 2 * i;\nloop invariant k == 3 * i;\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x1fffffff;\nloop invariant i == j / 2 ==> i >= 0;\nloop invariant j == 2 * i ==> j >= 0;\nloop invariant k == 3 * i ==> k >= 0;\nloop invariant i >= 0 ==> i <= 0x0fffffff;\nloop invariant j >= 0 ==> j <= 0x1fffffff;\nloop invariant k >= 0 ==> k <= 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x1fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: i == j / 2;\nloop invariant i5: j == 2 * i;\nloop invariant i6: k == 3 * i;\nloop invariant i7: k >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: j >= 0;\nloop invariant i10: i == j / 2 ==> i >= 0;\nloop invariant i11: j == 2 * i ==> j >= 0;\nloop invariant i12: k == 3 * i ==> k >= 0;\nloop invariant i13: i >= 0 ==> i <= 0x0fffffff;\nloop invariant i14: j >= 0 ==> j <= 0x1fffffff;\nloop invariant i15: k >= 0 ==> k <= 0x0fffffff;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i <= j / 2;\nloop invariant j <= k / 3;\nloop invariant k == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: i <= j / 2;\n\nloop invariant i6: k == 3*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 2 * (0x0fffffff / 3);\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i == j / 2;\nloop invariant k == 3 * i;\nloop invariant k > 0;\nloop invariant j > 0;\nloop invariant i > 0;\nloop invariant j == 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff / 3;\nloop invariant i2: 0 <= j <= 2 * (0x0fffffff / 3);\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: i == j / 2;\nloop invariant i5: k == 3 * i;\n\n\n\nloop invariant i9: j == 2 * i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff/3;\nloop invariant 0 <= j <= 0x0fffffff/2;\nloop invariant i = k/3;\nloop invariant j = 2*k/3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= 0x0fffffff/3;\n\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 45,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i = k / 3;\nloop invariant j = 2 * k / 3;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant k <= i + 1;\nloop invariant k <= j + 2;\nloop invariant i + 1 <= k;\nloop invariant j + 2 <= k;\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i + 1 <= j + 2;\nloop invariant j + 2 <= i + 1;\nloop invariant i <= j <= k;\nloop invariant k <= i <= j;\nloop invariant i <= k <= j;\nloop invariant j <= k <= i;\nloop invariant i <= j <= k <= i + 1;\nloop invariant i <= k <= j <= i + 1;\nloop invariant j <= i <= k <= j + 2;\nloop invariant j <= k <= i <= j + 2;\nloop invariant i + 1 <= i <= j + 2;\nloop invariant i + 1 <= j <= k + 2;\nloop invariant j + 2 <= i <= k + 1;\nloop invariant j + 2 <= k <= i + 1;\nloop invariant i + 1 <= i + 1;\nloop invariant j + 2 <= j + 2;\nloop invariant k <= k;\nloop invariant i + 1 <= j + 2 <= k;\nloop invariant j + 2 <= i + 1 <= k;\nloop invariant k <= i + 1 <= j + 2;\nloop invariant k <= j + 2 <= i + 1;\nloop invariant i <= j <= k <= i + 1;\nloop invariant i <= k <= j <= i + 1;\nloop invariant j <= i <= k <= j + 2;\nloop invariant j <= k <= i <= j + 2;\nloop invariant i + 1 <= i <= j + 2 <= k;\nloop invariant i + 1 <= j <= k <= i + 1;\nloop invariant j + 2 <= i <= k <= j + 2;\nloop invariant j + 2 <= k <= i <= j + 2;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k;\nloop invariant i + 1 <= j + 2 <= k <= i + 1;\nloop invariant j + 2 <= i + 1 <= k <= j + 2;\nloop invariant j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant j + 2 <= i + 1 <= k <= j + 2 <= i + 1;\nloop invariant j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant j + 2 <= i + 1 <= k <= j + 2 <= i + 1 <= k;\nloop invariant j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant j + 2 <= i + 1 <= k <= j + 2 <= i + 1 <= k <= j + 2;\nloop invariant j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\n\n\nloop invariant i4: i <= j;\nloop invariant i5: i <= k;\nloop invariant i6: j <= k;\n\n\n\n\nloop invariant i11: 0 <= i <= 0x0fffffff;\nloop invariant i12: 0 <= j <= 0x0fffffff;\nloop invariant i13: i + 1 <= j + 2;\n\nloop invariant i15: i <= j <= k;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i27: i + 1 <= i + 1;\nloop invariant i28: j + 2 <= j + 2;\nloop invariant i29: k <= k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i = k / 3;\nloop invariant j = 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i < 0x0fffffff;\nloop invariant i <= j;\nloop invariant j < 0x0fffffff;\nloop invariant k == 3 * i;\nloop invariant i + 1 < 0x0fffffff;\nloop invariant j + 2 < 0x0fffffff;\nloop invariant k + 3 < 0x0fffffff;\nloop invariant i + 1 <= j + 2;\nloop invariant i + 1 <= k + 3;\nloop invariant j + 2 <= k + 3;\nloop invariant i + 1 <= j;\nloop invariant j <= k + 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i < 0x0fffffff;\nloop invariant i3: i <= j;\nloop invariant i4: j < 0x0fffffff;\nloop invariant i5: k == 3 * i;\nloop invariant i6: i + 1 < 0x0fffffff;\nloop invariant i7: j + 2 < 0x0fffffff;\n\nloop invariant i9: i + 1 <= j + 2;\nloop invariant i10: i + 1 <= k + 3;\nloop invariant i11: j + 2 <= k + 3;\n\nloop invariant i13: j <= k + 3;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 81: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: (i >= 0) && (j >= 0) && (k >= 0);\nloop invariant i3: i <= k/3;\nloop invariant i4: j <= 2*k/3;\nloop invariant i5: (k == 3*i) ==> (j == 2*i);\nloop invariant i6: (k == 3*j/2) ==> (i == j/2);\nloop invariant i7: 0 <= i <= j;\nloop invariant i8: i <= k;\nloop invariant i9: 3*i <= k;\nloop invariant i10: j <= k;\nloop invariant i11: k <= 0x0fffffff;\nloop invariant i12: k == 3*i ==> j == 2*i;\nloop invariant i13: k < 0x0fffffff ==> k == 3*i ==> j == 2*i;\nloop invariant i14: k < 0x0fffffff ==> k == 3*i ==> i <= k;\nloop invariant i15: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i16: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i17: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i18: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i19: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i20: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i21: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i22: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i23: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i24: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i25: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i26: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i27: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i28: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i29: 0 <= i <= 0x0fffffff;\nloop invariant i30: 0 <= j <= 0x0fffffff;\nloop invariant i31: k == 3*i;\nloop invariant i32: j == 2*i;\nloop invariant i33: 1 <= i <= 1073741824;\nloop invariant i34: 0 <= j <= 2147483648;\nloop invariant i35: 0 <= k <= 2147483648;\nloop invariant i36: i + j + k <= 3145728000;\nloop invariant i37: i + j + k >= 3;\nloop invariant i38: i + j + k >= 3*i;\nloop invariant i39: i + j + k >= 3*k;\nloop invariant i40: i + j + k >= 2*j;\nloop invariant i41: i + j + k >= 2*k;\nloop invariant i42: i + j + k >= 2*i;\nloop invariant i43: i + j + k >= i + j;\nloop invariant i44: i + j + k >= i + k;\nloop invariant i45: i + j + k >= j + k;\nloop invariant i46: i + j + k >= i;\nloop invariant i47: i + j + k >= j;\nloop invariant i48: i + j + k >= k;\nloop invariant i49: i + j + k <= i + j + k;\nloop invariant i50: 0 <= i;\nloop invariant i51: 0 <= j;\nloop invariant i52: 0 <= k;\nloop invariant i53: i <= 0x0fffffff / 3;\nloop invariant i54: j <= 2 * i;\nloop invariant i55: k <= 3 * i;\nloop invariant i56: j == 2 * i;\nloop invariant i57: k == 3 * i;\nloop invariant i58: (k == 3 * i ==> j == 2 * i);\nloop invariant i59: (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant i60: (k == 3 * i ==> 0 <= i);\nloop invariant i61: (k == 3 * i ==> 0 <= j);\nloop invariant i62: (k == 3 * i ==> 0 <= k);\nloop invariant i63: (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant i64: (k == 3 * i ==> j <= 2 * i);\nloop invariant i65: (k == 3 * i ==> k <= 3 * i);\nloop invariant i66: 0 <= i <= 0xffffffff;\nloop invariant i67: 0 <= j <= 0xffffffff;\nloop invariant i68: j = 2*i;\nloop invariant i69: k = 3*i;\nloop invariant i70: i = k/3;\nloop invariant i71: k % 3 == 0;\nloop invariant i72: i % 1 == 0;\nloop invariant i73: j % 1 == 0;\nloop invariant i74: k % 1 == 0;\nloop invariant i75: i <= 0xffffffff;\nloop invariant i76: j <= 0xffffffff;\nloop invariant i77: k <= 0xffffffff;\nloop invariant i78: i >= 0;\nloop invariant i79: j >= 0;\nloop invariant i80: k >= 0;\nloop invariant i81: 0 <= i <= k / 3;\nloop invariant i82: 0 <= j <= 2 * i;\nloop invariant i83: i == j / 2;\nloop invariant i84: 0 <= j <= 0x1fffffff;\nloop invariant i85: i == j / 2 ==> i >= 0;\nloop invariant i86: j == 2 * i ==> j >= 0;\nloop invariant i87: k == 3 * i ==> k >= 0;\nloop invariant i88: i >= 0 ==> i <= 0x0fffffff;\nloop invariant i89: j >= 0 ==> j <= 0x1fffffff;\nloop invariant i90: k >= 0 ==> k <= 0x0fffffff;\nloop invariant i91: i <= j / 2;\nloop invariant i92: j <= k / 3;\nloop invariant i93: 0 <= i <= 0x0fffffff / 3;\nloop invariant i94: 0 <= j <= 2 * (0x0fffffff / 3);\nloop invariant i95: k > 0;\nloop invariant i96: j > 0;\nloop invariant i97: i > 0;\nloop invariant i98: 0 <= i <= 0x0fffffff/3;\nloop invariant i99: 0 <= j <= 0x0fffffff/2;\nloop invariant i100: j = 2*k/3;\nloop invariant i101: i = k / 3;\nloop invariant i102: j = 2 * k / 3;\nloop invariant i103: i <= j;\nloop invariant i104: k <= i + 1;\nloop invariant i105: k <= j + 2;\nloop invariant i106: i + 1 <= k;\nloop invariant i107: j + 2 <= k;\nloop invariant i108: i + 1 <= j + 2;\nloop invariant i109: j + 2 <= i + 1;\nloop invariant i110: i <= j <= k;\nloop invariant i111: k <= i <= j;\nloop invariant i112: i <= k <= j;\nloop invariant i113: j <= k <= i;\nloop invariant i114: i <= j <= k <= i + 1;\nloop invariant i115: i <= k <= j <= i + 1;\nloop invariant i116: j <= i <= k <= j + 2;\nloop invariant i117: j <= k <= i <= j + 2;\nloop invariant i118: i + 1 <= i <= j + 2;\nloop invariant i119: i + 1 <= j <= k + 2;\nloop invariant i120: j + 2 <= i <= k + 1;\nloop invariant i121: j + 2 <= k <= i + 1;\nloop invariant i122: i + 1 <= i + 1;\nloop invariant i123: j + 2 <= j + 2;\nloop invariant i124: k <= k;\nloop invariant i125: i + 1 <= j + 2 <= k;\nloop invariant i126: j + 2 <= i + 1 <= k;\nloop invariant i127: k <= i + 1 <= j + 2;\nloop invariant i128: k <= j + 2 <= i + 1;\nloop invariant i129: i + 1 <= i <= j + 2 <= k;\nloop invariant i130: i + 1 <= j <= k <= i + 1;\nloop invariant i131: j + 2 <= i <= k <= j + 2;\nloop invariant i132: j + 2 <= k <= i <= j + 2;\nloop invariant i133: i + 1 <= i + 1 <= j + 2 <= k;\nloop invariant i134: i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i135: j + 2 <= i + 1 <= k <= j + 2;\nloop invariant i136: j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i137: i + 1 <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i138: i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i139: j + 2 <= i + 1 <= k <= j + 2 <= i + 1;\nloop invariant i140: j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant i141: i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i142: i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant i143: j + 2 <= i + 1 <= k <= j + 2 <= i + 1 <= k;\nloop invariant i144: j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i145: i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k;\nloop invariant i146: i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i147: j + 2 <= i + 1 <= k <= j + 2 <= i + 1 <= k <= j + 2;\nloop invariant i148: j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i149: i + 1 <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1;\nloop invariant i150: i + 1 <= j + 2 <= k <= i + 1 <= j + 2 <= k <= i + 1 <= j + 2;\nloop invariant i151: j = 2 * i;\nloop invariant i152: i < 0x0fffffff;\nloop invariant i153: j < 0x0fffffff;\nloop invariant i154: i + 1 < 0x0fffffff;\nloop invariant i155: j + 2 < 0x0fffffff;\nloop invariant i156: k + 3 < 0x0fffffff;\nloop invariant i157: i + 1 <= k + 3;\nloop invariant i158: j + 2 <= k + 3;\nloop invariant i159: i + 1 <= j;\nloop invariant i160: j <= k + 3;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "combined_annotation_num_solver_calls": 60,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: (i >= 0) && (j >= 0) && (k >= 0);\nloop invariant i3: i <= k/3;\nloop invariant i4: j <= 2*k/3;\nloop invariant i5: (k == 3*i) ==> (j == 2*i);\nloop invariant i6: (k == 3*j/2) ==> (i == j/2);\nloop invariant i7: 0 <= i <= j;\nloop invariant i8: i <= k;\nloop invariant i9: 3*i <= k;\nloop invariant i10: j <= k;\nloop invariant i11: k <= 0x0fffffff;\nloop invariant i12: k == 3*i ==> j == 2*i;\nloop invariant i13: k < 0x0fffffff ==> k == 3*i ==> j == 2*i;\nloop invariant i14: k < 0x0fffffff ==> k == 3*i ==> i <= k;\nloop invariant i15: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i16: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i17: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i18: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i19: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i20: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i21: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i22: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i23: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i24: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i25: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i26: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i;\nloop invariant i27: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k;\nloop invariant i28: k < 0x0fffffff ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i ==> j == 2*i ==> i <= k ==> k == 3*i;\nloop invariant i29: 0 <= i <= 0x0fffffff;\nloop invariant i30: 0 <= j <= 0x0fffffff;\nloop invariant i31: k == 3*i;\nloop invariant i32: j == 2*i;\n\nloop invariant i34: 0 <= j <= 2147483648;\nloop invariant i35: 0 <= k <= 2147483648;\nloop invariant i36: i + j + k <= 3145728000;\n\nloop invariant i38: i + j + k >= 3*i;\n\nloop invariant i40: i + j + k >= 2*j;\nloop invariant i41: i + j + k >= 2*k;\nloop invariant i42: i + j + k >= 2*i;\nloop invariant i43: i + j + k >= i + j;\nloop invariant i44: i + j + k >= i + k;\nloop invariant i45: i + j + k >= j + k;\nloop invariant i46: i + j + k >= i;\nloop invariant i47: i + j + k >= j;\nloop invariant i48: i + j + k >= k;\nloop invariant i49: i + j + k <= i + j + k;\nloop invariant i50: 0 <= i;\nloop invariant i51: 0 <= j;\nloop invariant i52: 0 <= k;\nloop invariant i53: i <= 0x0fffffff / 3;\nloop invariant i54: j <= 2 * i;\nloop invariant i55: k <= 3 * i;\nloop invariant i56: j == 2 * i;\nloop invariant i57: k == 3 * i;\nloop invariant i58: (k == 3 * i ==> j == 2 * i);\nloop invariant i59: (k == 3 * i ==> i <= 0x0fffffff / 3);\nloop invariant i60: (k == 3 * i ==> 0 <= i);\nloop invariant i61: (k == 3 * i ==> 0 <= j);\nloop invariant i62: (k == 3 * i ==> 0 <= k);\nloop invariant i63: (k == 3 * i ==> k <= 0x0fffffff);\nloop invariant i64: (k == 3 * i ==> j <= 2 * i);\nloop invariant i65: (k == 3 * i ==> k <= 3 * i);\nloop invariant i66: 0 <= i <= 0xffffffff;\nloop invariant i67: 0 <= j <= 0xffffffff;\n\n\n\nloop invariant i71: k % 3 == 0;\nloop invariant i72: i % 1 == 0;\nloop invariant i73: j % 1 == 0;\nloop invariant i74: k % 1 == 0;\nloop invariant i75: i <= 0xffffffff;\nloop invariant i76: j <= 0xffffffff;\nloop invariant i77: k <= 0xffffffff;\nloop invariant i78: i >= 0;\nloop invariant i79: j >= 0;\nloop invariant i80: k >= 0;\nloop invariant i81: 0 <= i <= k / 3;\nloop invariant i82: 0 <= j <= 2 * i;\nloop invariant i83: i == j / 2;\nloop invariant i84: 0 <= j <= 0x1fffffff;\nloop invariant i85: i == j / 2 ==> i >= 0;\nloop invariant i86: j == 2 * i ==> j >= 0;\nloop invariant i87: k == 3 * i ==> k >= 0;\nloop invariant i88: i >= 0 ==> i <= 0x0fffffff;\nloop invariant i89: j >= 0 ==> j <= 0x1fffffff;\nloop invariant i90: k >= 0 ==> k <= 0x0fffffff;\nloop invariant i91: i <= j / 2;\n\nloop invariant i93: 0 <= i <= 0x0fffffff / 3;\nloop invariant i94: 0 <= j <= 2 * (0x0fffffff / 3);\n\n\n\nloop invariant i98: 0 <= i <= 0x0fffffff/3;\n\n\n\n\nloop invariant i103: i <= j;\n\n\n\n\nloop invariant i108: i + 1 <= j + 2;\n\nloop invariant i110: i <= j <= k;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: i + 1 <= i + 1;\nloop invariant i123: j + 2 <= j + 2;\nloop invariant i124: k <= k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i152: i < 0x0fffffff;\nloop invariant i153: j < 0x0fffffff;\nloop invariant i154: i + 1 < 0x0fffffff;\nloop invariant i155: j + 2 < 0x0fffffff;\n\nloop invariant i157: i + 1 <= k + 3;\nloop invariant i158: j + 2 <= k + 3;\n\nloop invariant i160: j <= k + 3;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 97,
        "success_count": 85,
        "failure_count": 12,
        "success_rate": 0.8762886597938144
    }
}