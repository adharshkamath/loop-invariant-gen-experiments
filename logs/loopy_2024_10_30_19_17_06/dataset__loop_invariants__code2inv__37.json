{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/37.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 40;\nloop invariant c == 0 ==> c <= 40 and c >= 0;\nloop invariant c != 40 ==> c <= 40 and c >= 0;\nloop invariant c == 1 ==> c <= 40 and c >= 1;\nloop invariant c != 40 ==> c <= 40 and c >= 1;\nloop invariant c == 2 ==> c <= 40 and c >= 2;\nloop invariant c != 40 ==> c <= 40 and c >= 2;\nloop invariant c == 3 ==> c <= 40 and c >= 3;\nloop invariant c != 40 ==> c <= 40 and c >= 3;\nloop invariant c == 4 ==> c <= 40 and c >= 4;\nloop invariant c != 40 ==> c <= 40 and c >= 4;\nloop invariant c == 5 ==> c <= 40 and c >= 5;\nloop invariant c != 40 ==> c <= 40 and c >= 5;\nloop invariant c == 6 ==> c <= 40 and c >= 6;\nloop invariant c != 40 ==> c <= 40 and c >= 6;\nloop invariant c == 7 ==> c <= 40 and c >= 7;\nloop invariant c != 40 ==> c <= 40 and c >= 7;\nloop invariant c == 8 ==> c <= 40 and c >= 8;\nloop invariant c != 40 ==> c <= 40 and c >= 8;\nloop invariant c == 9 ==> c <= 40 and c >= 9;\nloop invariant c != 40 ==> c <= 40 and c >= 9;\nloop invariant c == 10 ==> c <= 40 and c >= 10;\nloop invariant c != 40 ==> c <= 40 and c >= 10;\nloop invariant c == 11 ==> c <= 40 and c >= 11;\nloop invariant c != 40 ==> c <= 40 and c >= 11;\nloop invariant c == 12 ==> c <= 40 and c >= 12;\nloop invariant c != 40 ==> c <= 40 and c >= 12;\nloop invariant c == 13 ==> c <= 40 and c >= 13;\nloop invariant c != 40 ==> c <= 40 and c >= 13;\nloop invariant c == 14 ==> c <= 40 and c >= 14;\nloop invariant c != 40 ==> c <= 40 and c >= 14;\nloop invariant c == 15 ==> c <= 40 and c >= 15;\nloop invariant c != 40 ==> c <= 40 and c >= 15;\nloop invariant c == 16 ==> c <= 40 and c >= 16;\nloop invariant c != 40 ==> c <= 40 and c >= 16;\nloop invariant c == 17 ==> c <= 40 and c >= 17;\nloop invariant c != 40 ==> c <= 40 and c >= 17;\nloop invariant c == 18 ==> c <= 40 and c >= 18;\nloop invariant c != 40 ==> c <= 40 and c >= 18;\nloop invariant c == 19 ==> c <= 40 and c >= 19;\nloop invariant c != 40 ==> c <= 40 and c >= 19;\nloop invariant c == 20 ==> c <= 40 and c >= 20;\nloop invariant c != 40 ==> c <= 40 and c >= 20;\nloop invariant c == 21 ==> c <= 40 and c >= 21;\nloop invariant c != 40 ==> c <= 40 and c >= 21;\nloop invariant c == 22 ==> c <= 40 and c >= 22;\nloop invariant c != 40 ==> c <= 40 and c >= 22;\nloop invariant c == 23 ==> c <= 40 and c >= 23;\nloop invariant c != 40 ==> c <= 40 and c >= 23;\nloop invariant c == 24 ==> c <= 40 and c >= 24;\nloop invariant c != 40 ==> c <= 40 and c >= 24;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c == 40 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> (c >= 40);\nloop invariant (c < 40) ==> (c < 40);\nloop invariant (c == 0) ==> (c == 0);\nloop invariant (c != 0) ==> (c != 0);\nloop invariant (c != 40) ==> (c != 40);\nloop invariant (c < 40) && (c != 0) && (c != 40) ==> (c >= 1) && (c <= 39);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant if ( unknown() ) ==> c <= 40;\nloop invariant if ( !unknown() ) ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c < 40 ==> c <= 39;\nloop invariant c >= 40 ==> c == 40;\nloop invariant c >= 40 ==> c == 1;\nloop invariant c < 40 ==> c != 40;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> (c <= 40);\nloop invariant (c != 40) ==> (c >= 0);\nloop invariant (c == 40) ==> (c == 40);\nloop invariant (c != 40) ==> (c != 40);\nloop invariant (c == 40) ==> (c >= 0);\nloop invariant (c != 40) ==> (c <= 40);\nloop invariant (c == 40) ==> (c == 40);\nloop invariant (c != 40) ==> (c != 40);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant if (unknown()) then c != 40 else c == 40;\nloop invariant if (unknown()) then c == 0 else c == 1;\nloop invariant if (unknown()) then c <= 40 else c == 40;\nloop invariant if (unknown()) then c <= 40 else c >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= 40;\nloop invariant c >= 0;\nloop invariant c <= 40;\nloop invariant (c = 40) ==> (c = 1);\nloop invariant (c = 1) ==> (c = 40);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> unknown() == 0;\nloop invariant (c < 40) ==> unknown() != 0;\nloop invariant (c == 40) ==> (c == 40);\nloop invariant (c < 40) ==> (c < 40);\nloop invariant (c == 40) ==> (c == 40);\nloop invariant (c < 40) ==> (c < 40);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c <= 40 ==> (c >= 0);\nloop invariant c == 40 ==> (c >= 0);\nloop invariant c == 40 ==> (c <= 40);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c < 40 ==> c == 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c == 1 ==> !unknown();\nloop invariant c < 40 ==> c == 1 ==> unknown();\nloop invariant c < 40 ==> c == 1 ==> c == 40 ==> unknown();\nloop invariant c < 40 ==> c == 1 ==> c == 40 ==> !unknown();\nloop invariant c < 40 ==> c == 40 ==> c == 40 ==> !unknown();\nloop invariant c < 40 ==> c == 40 ==> c == 40 ==> unknown();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> (c >= 40);\nloop invariant (c != 40) ==> (c < 40);\nloop invariant (c != 40) ==> (c <= 39);\nloop invariant (c == 1) ==> (c >= 1);\nloop invariant (c == 1) ==> (c <= 1);\nloop invariant (c == 1) ==> (c < 2);\nloop invariant (c == 1) ==> (c > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c == 40 ==> (unknown() ==> c == 40) && (!unknown() ==> c == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> (c == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c == 40 ==> c >= 0;\nloop invariant c == 40 ==> c <= 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 40;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 50,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 40;\nloop invariant c == 0 ==> c <= 40 and c >= 0;\nloop invariant c != 40 ==> c <= 40 and c >= 0;\nloop invariant c == 1 ==> c <= 40 and c >= 1;\nloop invariant c != 40 ==> c <= 40 and c >= 1;\nloop invariant c == 2 ==> c <= 40 and c >= 2;\nloop invariant c != 40 ==> c <= 40 and c >= 2;\nloop invariant c == 3 ==> c <= 40 and c >= 3;\nloop invariant c != 40 ==> c <= 40 and c >= 3;\nloop invariant c == 4 ==> c <= 40 and c >= 4;\nloop invariant c != 40 ==> c <= 40 and c >= 4;\nloop invariant c == 5 ==> c <= 40 and c >= 5;\nloop invariant c != 40 ==> c <= 40 and c >= 5;\nloop invariant c == 6 ==> c <= 40 and c >= 6;\nloop invariant c != 40 ==> c <= 40 and c >= 6;\nloop invariant c == 7 ==> c <= 40 and c >= 7;\nloop invariant c != 40 ==> c <= 40 and c >= 7;\nloop invariant c == 8 ==> c <= 40 and c >= 8;\nloop invariant c != 40 ==> c <= 40 and c >= 8;\nloop invariant c == 9 ==> c <= 40 and c >= 9;\nloop invariant c != 40 ==> c <= 40 and c >= 9;\nloop invariant c == 10 ==> c <= 40 and c >= 10;\nloop invariant c != 40 ==> c <= 40 and c >= 10;\nloop invariant c == 11 ==> c <= 40 and c >= 11;\nloop invariant c != 40 ==> c <= 40 and c >= 11;\nloop invariant c == 12 ==> c <= 40 and c >= 12;\nloop invariant c != 40 ==> c <= 40 and c >= 12;\nloop invariant c == 13 ==> c <= 40 and c >= 13;\nloop invariant c != 40 ==> c <= 40 and c >= 13;\nloop invariant c == 14 ==> c <= 40 and c >= 14;\nloop invariant c != 40 ==> c <= 40 and c >= 14;\nloop invariant c == 15 ==> c <= 40 and c >= 15;\nloop invariant c != 40 ==> c <= 40 and c >= 15;\nloop invariant c == 16 ==> c <= 40 and c >= 16;\nloop invariant c != 40 ==> c <= 40 and c >= 16;\nloop invariant c == 17 ==> c <= 40 and c >= 17;\nloop invariant c != 40 ==> c <= 40 and c >= 17;\nloop invariant c == 18 ==> c <= 40 and c >= 18;\nloop invariant c != 40 ==> c <= 40 and c >= 18;\nloop invariant c == 19 ==> c <= 40 and c >= 19;\nloop invariant c != 40 ==> c <= 40 and c >= 19;\nloop invariant c == 20 ==> c <= 40 and c >= 20;\nloop invariant c != 40 ==> c <= 40 and c >= 20;\nloop invariant c == 21 ==> c <= 40 and c >= 21;\nloop invariant c != 40 ==> c <= 40 and c >= 21;\nloop invariant c == 22 ==> c <= 40 and c >= 22;\nloop invariant c != 40 ==> c <= 40 and c >= 22;\nloop invariant c == 23 ==> c <= 40 and c >= 23;\nloop invariant c != 40 ==> c <= 40 and c >= 23;\nloop invariant c == 24 ==> c <= 40 and c >= 24;\nloop invariant c != 40 ==> c <= 40 and c >= 24;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 40;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c == 40 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> (c >= 40);\nloop invariant (c < 40) ==> (c < 40);\nloop invariant (c == 0) ==> (c == 0);\nloop invariant (c != 0) ==> (c != 0);\nloop invariant (c != 40) ==> (c != 40);\nloop invariant (c < 40) && (c != 0) && (c != 40) ==> (c >= 1) && (c <= 39);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: (c == 40) ==> (c >= 40);\nloop invariant i3: (c < 40) ==> (c < 40);\nloop invariant i4: (c == 0) ==> (c == 0);\nloop invariant i5: (c != 0) ==> (c != 0);\nloop invariant i6: (c != 40) ==> (c != 40);\nloop invariant i7: (c < 40) && (c != 0) && (c != 40) ==> (c >= 1) && (c <= 39);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant if ( unknown() ) ==> c <= 40;\nloop invariant if ( !unknown() ) ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c < 40 ==> c <= 39;\nloop invariant c >= 40 ==> c == 40;\nloop invariant c >= 40 ==> c == 1;\nloop invariant c < 40 ==> c != 40;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: c < 40 ==> c <= 39;\nloop invariant i3: c >= 40 ==> c == 40;\n\nloop invariant i5: c < 40 ==> c != 40;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> (c <= 40);\nloop invariant (c != 40) ==> (c >= 0);\nloop invariant (c == 40) ==> (c == 40);\nloop invariant (c != 40) ==> (c != 40);\nloop invariant (c == 40) ==> (c >= 0);\nloop invariant (c != 40) ==> (c <= 40);\nloop invariant (c == 40) ==> (c == 40);\nloop invariant (c != 40) ==> (c != 40);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: (c == 40) ==> (c <= 40);\nloop invariant i3: (c != 40) ==> (c >= 0);\nloop invariant i4: (c == 40) ==> (c == 40);\nloop invariant i5: (c != 40) ==> (c != 40);\nloop invariant i6: (c == 40) ==> (c >= 0);\nloop invariant i7: (c != 40) ==> (c <= 40);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant if (unknown()) then c != 40 else c == 40;\nloop invariant if (unknown()) then c == 0 else c == 1;\nloop invariant if (unknown()) then c <= 40 else c == 40;\nloop invariant if (unknown()) then c <= 40 else c >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= 40;\nloop invariant c >= 0;\nloop invariant c <= 40;\nloop invariant (c = 40) ==> (c = 1);\nloop invariant (c = 1) ==> (c = 40);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: c >= 0;\nloop invariant i3: c <= 40;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> unknown() == 0;\nloop invariant (c < 40) ==> unknown() != 0;\nloop invariant (c == 40) ==> (c == 40);\nloop invariant (c < 40) ==> (c < 40);\nloop invariant (c == 40) ==> (c == 40);\nloop invariant (c < 40) ==> (c < 40);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\n\nloop invariant i4: (c == 40) ==> (c == 40);\nloop invariant i5: (c < 40) ==> (c < 40);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c <= 40 ==> (c >= 0);\nloop invariant c == 40 ==> (c >= 0);\nloop invariant c == 40 ==> (c <= 40);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: c <= 40 ==> (c >= 0);\nloop invariant i3: c == 40 ==> (c >= 0);\nloop invariant i4: c == 40 ==> (c <= 40);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c < 40 ==> c == 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c == 1 ==> !unknown();\nloop invariant c < 40 ==> c == 1 ==> unknown();\nloop invariant c < 40 ==> c == 1 ==> c == 40 ==> unknown();\nloop invariant c < 40 ==> c == 1 ==> c == 40 ==> !unknown();\nloop invariant c < 40 ==> c == 40 ==> c == 40 ==> !unknown();\nloop invariant c < 40 ==> c == 40 ==> c == 40 ==> unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\nloop invariant i3: c < 40 ==> c < 40;\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> (c >= 40);\nloop invariant (c != 40) ==> (c < 40);\nloop invariant (c != 40) ==> (c <= 39);\nloop invariant (c == 1) ==> (c >= 1);\nloop invariant (c == 1) ==> (c <= 1);\nloop invariant (c == 1) ==> (c < 2);\nloop invariant (c == 1) ==> (c > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: (c == 40) ==> (c >= 40);\nloop invariant i3: (c != 40) ==> (c < 40);\nloop invariant i4: (c != 40) ==> (c <= 39);\nloop invariant i5: (c == 1) ==> (c >= 1);\nloop invariant i6: (c == 1) ==> (c <= 1);\nloop invariant i7: (c == 1) ==> (c < 2);\nloop invariant i8: (c == 1) ==> (c > 0);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c == 40 ==> (unknown() ==> c == 40) && (!unknown() ==> c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c == 40) ==> (c == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c == 40 ==> c >= 0;\nloop invariant c == 40 ==> c <= 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 40;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c <= 40 ==> c <= 40;\nloop invariant c <= 40 ==> c != 40;\nloop invariant c < 40 ==> c >= 0;\nloop invariant c < 40 ==> c < 40;\nloop invariant c < 40 ==> c != 40;\nloop invariant c > 40 ==> c >= 0;\nloop invariant c > 40 ==> c > 40;\nloop invariant c > 40 ==> c != 40;\nloop invariant c <= 40 ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: c == 40 ==> c >= 0;\nloop invariant i3: c == 40 ==> c <= 40;\nloop invariant i4: c < 40 ==> c >= 0;\nloop invariant i5: c < 40 ==> c < 40;\nloop invariant i6: c < 40 ==> c != 40;\nloop invariant i7: c > 40 ==> c >= 40;\nloop invariant i8: c > 40 ==> c > 40;\nloop invariant i9: c > 40 ==> c != 40;\nloop invariant i10: c <= 40 ==> c >= 0;\nloop invariant i11: c <= 40 ==> c <= 40;\n\nloop invariant i13: c > 40 ==> c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token 'and'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 40;\nloop invariant i3: c == 0 ==> c <= 40 and c >= 0;\nloop invariant i4: c != 40 ==> c <= 40 and c >= 0;\nloop invariant i5: c == 1 ==> c <= 40 and c >= 1;\nloop invariant i6: c != 40 ==> c <= 40 and c >= 1;\nloop invariant i7: c == 2 ==> c <= 40 and c >= 2;\nloop invariant i8: c != 40 ==> c <= 40 and c >= 2;\nloop invariant i9: c == 3 ==> c <= 40 and c >= 3;\nloop invariant i10: c != 40 ==> c <= 40 and c >= 3;\nloop invariant i11: c == 4 ==> c <= 40 and c >= 4;\nloop invariant i12: c != 40 ==> c <= 40 and c >= 4;\nloop invariant i13: c == 5 ==> c <= 40 and c >= 5;\nloop invariant i14: c != 40 ==> c <= 40 and c >= 5;\nloop invariant i15: c == 6 ==> c <= 40 and c >= 6;\nloop invariant i16: c != 40 ==> c <= 40 and c >= 6;\nloop invariant i17: c == 7 ==> c <= 40 and c >= 7;\nloop invariant i18: c != 40 ==> c <= 40 and c >= 7;\nloop invariant i19: c == 8 ==> c <= 40 and c >= 8;\nloop invariant i20: c != 40 ==> c <= 40 and c >= 8;\nloop invariant i21: c == 9 ==> c <= 40 and c >= 9;\nloop invariant i22: c != 40 ==> c <= 40 and c >= 9;\nloop invariant i23: c == 10 ==> c <= 40 and c >= 10;\nloop invariant i24: c != 40 ==> c <= 40 and c >= 10;\nloop invariant i25: c == 11 ==> c <= 40 and c >= 11;\nloop invariant i26: c != 40 ==> c <= 40 and c >= 11;\nloop invariant i27: c == 12 ==> c <= 40 and c >= 12;\nloop invariant i28: c != 40 ==> c <= 40 and c >= 12;\nloop invariant i29: c == 13 ==> c <= 40 and c >= 13;\nloop invariant i30: c != 40 ==> c <= 40 and c >= 13;\nloop invariant i31: c == 14 ==> c <= 40 and c >= 14;\nloop invariant i32: c != 40 ==> c <= 40 and c >= 14;\nloop invariant i33: c == 15 ==> c <= 40 and c >= 15;\nloop invariant i34: c != 40 ==> c <= 40 and c >= 15;\nloop invariant i35: c == 16 ==> c <= 40 and c >= 16;\nloop invariant i36: c != 40 ==> c <= 40 and c >= 16;\nloop invariant i37: c == 17 ==> c <= 40 and c >= 17;\nloop invariant i38: c != 40 ==> c <= 40 and c >= 17;\nloop invariant i39: c == 18 ==> c <= 40 and c >= 18;\nloop invariant i40: c != 40 ==> c <= 40 and c >= 18;\nloop invariant i41: c == 19 ==> c <= 40 and c >= 19;\nloop invariant i42: c != 40 ==> c <= 40 and c >= 19;\nloop invariant i43: c == 20 ==> c <= 40 and c >= 20;\nloop invariant i44: c != 40 ==> c <= 40 and c >= 20;\nloop invariant i45: c == 21 ==> c <= 40 and c >= 21;\nloop invariant i46: c != 40 ==> c <= 40 and c >= 21;\nloop invariant i47: c == 22 ==> c <= 40 and c >= 22;\nloop invariant i48: c != 40 ==> c <= 40 and c >= 22;\nloop invariant i49: c == 23 ==> c <= 40 and c >= 23;\nloop invariant i50: c != 40 ==> c <= 40 and c >= 23;\nloop invariant i51: c == 24 ==> c <= 40 and c >= 24;\nloop invariant i52: c != 40 ==> c <= 40 and c >= 24;\nloop invariant i53: 0 <= c <= 40;\nloop invariant i54: c == 40 ==> unknown() == 0;\nloop invariant i55: c == 40 ==> unknown() == 0 ==> c == 1;\nloop invariant i56: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant i57: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant i58: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant i59: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant i60: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant i61: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant i62: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant i63: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant i64: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant i65: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant i66: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant i67: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant i68: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant i69: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1;\nloop invariant i70: c == 40 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0 ==> c == 1 ==> unknown() == 0;\nloop invariant i71: (c == 40) ==> (c >= 40);\nloop invariant i72: (c < 40) ==> (c < 40);\nloop invariant i73: (c == 0) ==> (c == 0);\nloop invariant i74: (c != 0) ==> (c != 0);\nloop invariant i75: (c != 40) ==> (c != 40);\nloop invariant i76: (c < 40) && (c != 0) && (c != 40) ==> (c >= 1) && (c <= 39);\nloop invariant i77: if ( unknown() ) ==> c <= 40;\nloop invariant i78: if ( !unknown() ) ==> c >= 0;\nloop invariant i79: c < 40 ==> c <= 39;\nloop invariant i80: c >= 40 ==> c == 40;\nloop invariant i81: c >= 40 ==> c == 1;\nloop invariant i82: c < 40 ==> c != 40;\nloop invariant i83: (c == 40) ==> (c <= 40);\nloop invariant i84: (c != 40) ==> (c >= 0);\nloop invariant i85: (c == 40) ==> (c == 40);\nloop invariant i86: (c == 40) ==> (c >= 0);\nloop invariant i87: (c != 40) ==> (c <= 40);\nloop invariant i88: if (unknown()) then c != 40 else c == 40;\nloop invariant i89: if (unknown()) then c == 0 else c == 1;\nloop invariant i90: if (unknown()) then c <= 40 else c == 40;\nloop invariant i91: if (unknown()) then c <= 40 else c >= 1;\nloop invariant i92: 1 <= c <= 40;\nloop invariant i93: (c = 40) ==> (c = 1);\nloop invariant i94: (c = 1) ==> (c = 40);\nloop invariant i95: (c == 40) ==> unknown() == 0;\nloop invariant i96: (c < 40) ==> unknown() != 0;\nloop invariant i97: c <= 40 ==> (c >= 0);\nloop invariant i98: c == 40 ==> (c >= 0);\nloop invariant i99: c == 40 ==> (c <= 40);\nloop invariant i100: c < 40 ==> c == 0;\nloop invariant i101: c < 40 ==> c < 40;\nloop invariant i102: c < 40 ==> c == 1 ==> !unknown();\nloop invariant i103: c < 40 ==> c == 1 ==> unknown();\nloop invariant i104: c < 40 ==> c == 1 ==> c == 40 ==> unknown();\nloop invariant i105: c < 40 ==> c == 1 ==> c == 40 ==> !unknown();\nloop invariant i106: c < 40 ==> c == 40 ==> c == 40 ==> !unknown();\nloop invariant i107: c < 40 ==> c == 40 ==> c == 40 ==> unknown();\nloop invariant i108: (c != 40) ==> (c < 40);\nloop invariant i109: (c != 40) ==> (c <= 39);\nloop invariant i110: (c == 1) ==> (c >= 1);\nloop invariant i111: (c == 1) ==> (c <= 1);\nloop invariant i112: (c == 1) ==> (c < 2);\nloop invariant i113: (c == 1) ==> (c > 0);\nloop invariant i114: c == 40 ==> (unknown() ==> c == 40) && (!unknown() ==> c == 1);\nloop invariant i115: (c == 40) ==> (c == 0);\nloop invariant i116: c == 40 ==> c >= 0;\nloop invariant i117: c == 40 ==> c <= 40;\nloop invariant i118: c < 40 ==> c >= 0;\nloop invariant i119: c > 40 ==> c >= 40;\nloop invariant i120: c > 40 ==> c > 40;\nloop invariant i121: c > 40 ==> c != 40;\nloop invariant i122: c <= 40 ==> c >= 0;\nloop invariant i123: c <= 40 ==> c <= 40;\nloop invariant i124: c <= 40 ==> c != 40;\nloop invariant i125: c > 40 ==> c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 90,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 40;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i53: 0 <= c <= 40;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i71: (c == 40) ==> (c >= 40);\nloop invariant i72: (c < 40) ==> (c < 40);\nloop invariant i73: (c == 0) ==> (c == 0);\nloop invariant i74: (c != 0) ==> (c != 0);\nloop invariant i75: (c != 40) ==> (c != 40);\nloop invariant i76: (c < 40) && (c != 0) && (c != 40) ==> (c >= 1) && (c <= 39);\n\n\nloop invariant i79: c < 40 ==> c <= 39;\nloop invariant i80: c >= 40 ==> c == 40;\n\nloop invariant i82: c < 40 ==> c != 40;\nloop invariant i83: (c == 40) ==> (c <= 40);\nloop invariant i84: (c != 40) ==> (c >= 0);\nloop invariant i85: (c == 40) ==> (c == 40);\nloop invariant i86: (c == 40) ==> (c >= 0);\nloop invariant i87: (c != 40) ==> (c <= 40);\n\n\n\n\n\n\n\n\n\nloop invariant i97: c <= 40 ==> (c >= 0);\nloop invariant i98: c == 40 ==> (c >= 0);\nloop invariant i99: c == 40 ==> (c <= 40);\n\nloop invariant i101: c < 40 ==> c < 40;\n\n\n\n\n\n\nloop invariant i108: (c != 40) ==> (c < 40);\nloop invariant i109: (c != 40) ==> (c <= 39);\nloop invariant i110: (c == 1) ==> (c >= 1);\nloop invariant i111: (c == 1) ==> (c <= 1);\nloop invariant i112: (c == 1) ==> (c < 2);\nloop invariant i113: (c == 1) ==> (c > 0);\n\n\nloop invariant i116: c == 40 ==> c >= 0;\nloop invariant i117: c == 40 ==> c <= 40;\nloop invariant i118: c < 40 ==> c >= 0;\nloop invariant i119: c > 40 ==> c >= 40;\nloop invariant i120: c > 40 ==> c > 40;\nloop invariant i121: c > 40 ==> c != 40;\nloop invariant i122: c <= 40 ==> c >= 0;\nloop invariant i123: c <= 40 ==> c <= 40;\n\nloop invariant i125: c > 40 ==> c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 28,
        "success_count": 21,
        "failure_count": 7,
        "success_rate": 0.75
    }
}