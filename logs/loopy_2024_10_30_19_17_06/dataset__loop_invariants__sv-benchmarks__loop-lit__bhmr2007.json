{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a + b == 3 * i;\nloop invariant a >= 0;\nloop invariant b >= 0;\n*/\n```",
            "```\n/*@\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b + 3*n >= 3*n;\nloop invariant a + b + 3*n <= 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b == 3 * i;\nloop invariant (i == n) ==> (a + b == 3 * n);\nloop invariant (i == n) ==> (a == n);\nloop invariant (i == n) ==> (b == 2 * n);\nloop invariant (i > 0) ==> (0 <= a <= 2 * n);\nloop invariant (i > 0) ==> (0 <= b <= 2 * n);\nloop invariant (i > 0) ==> (a + b == 3 * i);\nloop invariant (i > 0) ==> (a <= 2 * i);\nloop invariant (i > 0) ==> (b <= 2 * i);\nloop invariant (i > 0) ==> (a >= 0);\nloop invariant (i > 0) ==> (b >= 0);\nloop invariant (i > 0) ==> (a != b);\nloop invariant (i > 0) ==> (a != 0);\nloop invariant (i > 0) ==> (b != 0);\nloop invariant (i > 0) ==> (a != 2 * i);\nloop invariant (i > 0) ==> (b != 2 * i);\nloop invariant (i > 0) ==> (a != n);\nloop invariant (i > 0) ==> (b != 2 * n);\nloop invariant (i > 0) ==> (a != 2 * n);\nloop invariant (i > 0) ==> (b != n);\nloop invariant (i > 0) ==> (a != (n - 1));\nloop invariant (i > 0) ==> (b != (n - 1));\nloop invariant (i > 0) ==> (a != (n + 1));\nloop invariant (i > 0) ==> (b != (n + 1));\nloop invariant (i > 0) ==> (a != (2 * n - 1));\nloop invariant (i > 0) ==> (b != (2 * n - 1));\nloop invariant (i > 0) ==> (a != (2 * n + 1));\nloop invariant (i > 0) ==> (b != (2 * n + 1));\nloop invariant (i > 0) ==> (a != (n - 2));\nloop invariant (i > 0) ==> (b != (n - 2));\nloop invariant (i > 0) ==> (a != (n + 2));\nloop invariant (i > 0) ==> (b != (n + 2));\nloop invariant (i > 0) ==> (a != (2 * n - 2));\nloop invariant (i > 0) ==> (b != (2 * n - 2));\nloop invariant (i > 0) ==> (a != (2 * n + 2));\nloop invariant (i > 0) ==> (b != (2 * n + 2));\nloop invariant (i > 0) ==> (a != (n - 3));\nloop invariant (i > 0) ==> (b != (n - 3));\nloop invariant (i > 0) ==> (a != (n + 3));\nloop invariant (i > 0) ==> (b != (n + 3));\nloop invariant (i > 0) ==> (a != (2 * n - 3));\nloop invariant (i > 0) ==> (b != (2 * n - 3));\nloop invariant (i > 0) ==> (a != (2 * n + 3));\nloop invariant (i > 0) ==> (b != (2 * n + 3));\nloop invariant (i > 0) ==> (a != (n - 4));\nloop invariant (i > 0) ==> (b != (n - 4));\nloop invariant (i > 0) ==> (a != (n + 4));\nloop invariant (i > 0) ==> (b != (n + 4));\nloop invariant (i > 0) ==> (a != (2 * n - 4));\nloop invariant (i > 0) ==> (b != (2 * n - 4));\nloop invariant (i > 0) ==> (a != (2 * n + 4));\nloop invariant (i > 0) ==> (b != (2 * n + 4));\nloop invariant (i > 0) ==> (a != (n - 5));\nloop invariant (i > 0) ==> (b != (n - 5));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant (i < n) ==> (a + b == 3*i);\nloop invariant (i >= n) ==> (a + b == 3*n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant 0 <= i <= n;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b >= 3*n - 3*i;\nloop invariant a + b >= 0;\nloop invariant a + b <= 2*n + 3*i;\nloop invariant a + b <= 2*n + 3*n;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i = n ==> (a + b == 3*n);\nloop invariant i < n ==> (a + b >= 3*i);\nloop invariant i < n ==> (a >= 0);\nloop invariant i < n ==> (b >= 0);\nloop invariant i < n ==> (b <= a + n);\nloop invariant i < n ==> (a <= b + n);\nloop invariant i < n ==> (a <= 3*n - b);\nloop invariant i < n ==> (b <= 3*n - a);\nloop invariant i < n ==> (a <= b + 2*n);\nloop invariant i < n ==> (b <= a + 2*n);\nloop invariant i < n ==> (a - b <= n);\nloop invariant i < n ==> (b - a <= n);\nloop invariant i < n ==> (a + b <= 3*n - 2);\nloop invariant i < n ==> (a + b >= 3*i + 1);\nloop invariant i < n ==> (a - b <= n - 1);\nloop invariant i < n ==> (b - a <= n - 1);\nloop invariant i < n ==> (a >= b + 1);\nloop invariant i < n ==> (b >= a + 1);\nloop invariant i < n ==> (a >= b - 1);\nloop invariant i < n ==> (b >= a - 1);\nloop invariant i < n ==> (a >= 0);\nloop invariant i < n ==> (b >= 0);\nloop invariant i < n ==> (a <= 3*n);\nloop invariant i < n ==> (b <= 3*n);\nloop invariant i < n ==> (a - b <= 2*n);\nloop invariant i < n ==> (b - a <= 2*n);\nloop invariant i < n ==> (a <= b + n);\nloop invariant i < n ==> (b <= a + n);\nloop invariant i < n ==> (a <= 3*n - b);\nloop invariant i < n ==> (b <= 3*n - a);\nloop invariant i < n ==> (a <= b + 2*n);\nloop invariant i < n ==> (b <= a + 2*n);\nloop invariant i < n ==> (a - b <= n - 1);\nloop invariant i < n ==> (b - a <= n - 1);\nloop invariant i < n ==> (a >= b + 1);\nloop invariant i < n ==> (b >= a + 1);\nloop invariant i < n ==> (a >= b - 1);\nloop invariant i < n ==> (b >= a - 1);\nloop invariant i < n ==> (a >= 0);\nloop invariant i < n ==> (b >= 0);\nloop invariant i < n ==> (a <= 3*n);\nloop invariant i < n ==> (b <= 3*n);\nloop invariant i < n ==> (a - b <= 2*n);\nloop invariant i < n ==> (b - a <= 2*n);\nloop invariant i < n ==> (a <= b + n);\nloop invariant i < n ==> (b <= a + n);\nloop invariant i < n ==> (a <= 3*n - b);\nloop invariant i < n ==> (b <= 3*n - a);\nloop invariant i < n ==> (a <= b + 2*n);\nloop invariant i < n ==> (b <= a + 2*n);\nloop invariant i < n ==> (a - b <= n - 1);\nloop invariant i < n ==> (b - a <= n - 1);\nloop invariant i < n ==> (a >= b + 1);\nloop invariant i < n ==> (b >= a + 1);\nloop invariant i < n ==> (a >= b - 1);\nloop invariant i < n ==> (b >= a - 1);\nloop invariant i < n ==> (a >= 0);\nloop invariant i < n ==> (b >= 0);\nloop invariant i < n ==> (a <= 3*n);\nloop invariant i < n ==> (b <= 3*n);\nloop invariant i < n ==> (a - b <= 2*n);\nloop invariant i < n ==> (b - a <= 2*n);\nloop invariant i < n ==> (a <= b + n);\nloop invariant i < n ==> (b <= a + n);\nloop invariant i < n ==> (a <= 3*n - b);\nloop invariant i < n ==> (b <= 3*n - a);\nloop invariant i < n ==> (a <= b + 2*n);\nloop invariant i < n ==> (b <= a + 2*n);\nloop invariant i < n ==> (a - b <= n - 1);\nloop invariant i < n ==> (b - a <= n - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i == (a + b)/3;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant i < n ==> a + b == 3*i;\nloop invariant i < n ==> a + b <= 3*i;\nloop invariant i == n ==> a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a + b <= 3*n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant i <= n;\nloop invariant a + b == 3*i;\nloop invariant a == 2*i - b;\nloop invariant a == i + 2*i - b;\nloop invariant a == 3*i - b;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (i = 0 ==> a = 0 && b = 0);\nloop invariant (i > 0 ==> a >= 0 && a <= 3*n);\nloop invariant (i > 0 ==> b >= 0 && b <= 3*n);\nloop invariant (i > 0 ==> a + b == 3*i);\nloop invariant (i > 0 ==> a >= b);\nloop invariant (i > 0 ==> a >= 2*i);\nloop invariant (i > 0 ==> b >= i);\nloop invariant (i > 0 ==> a <= 2*n);\nloop invariant (i > 0 ==> b <= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant a == 0;\nloop invariant b == 0;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a == 2 * b;\nloop invariant a + b == 3 * i;\nloop invariant b == i;\nloop invariant a == 2 * i;\nloop invariant a + b == 3 * n;\nloop invariant n == n;\nloop invariant unknown_int() ==> a == a;\nloop invariant unknown_int() ==> b == b;\nloop invariant unknown_int() ==> i == i;\nloop invariant unknown_int() ==> n == n;\nloop invariant unknown_int() ==> a == a + 1;\nloop invariant unknown_int() ==> b == b + 2;\nloop invariant unknown_int() ==> i == i + 1;\nloop invariant !unknown_int() ==> a == a + 2;\nloop invariant !unknown_int() ==> b == b + 1;\nloop invariant !unknown_int() ==> i == i + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b < 3*n ==> i < n;\nloop invariant a + b <= 3*n ==> i <= n;\nloop invariant 3*n <= a + b ==> i >= n;\nloop invariant 3*n < a + b ==> i > n;\nloop invariant 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i == n ==> 3*n <= a + b;\nloop invariant i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant b >= 0;\nloop invariant a >= 0;\nloop invariant i <= n;\nloop invariant b <= 3*n;\nloop invariant a <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*i ==> i < n;\nloop invariant a + b == 3*i ==> a <= 3*n - 3*i;\nloop invariant a + b == 3*i ==> b <= 3*n - 3*i;\nloop invariant a + b == 3*i ==> a + b == 3*i;\nloop invariant a + b == 3*i ==> i == 0 ==> a == 0 && b == 0;\nloop invariant a + b == 3*i ==> i == 1 ==> a <= 2 && b <= 3;\nloop invariant a + b == 3*i ==> i == 2 ==> a <= 4 && b <= 6;\nloop invariant a + b == 3*i ==> i == 3 ==> a <= 6 && b <= 9;\nloop invariant a + b == 3*i ==> i == 4 ==> a <= 8 && b <= 12;\nloop invariant a + b == 3*i ==> i == 5 ==> a <= 10 && b <= 15;\nloop invariant a + b == 3*i ==> i == 6 ==> a <= 12 && b <= 18;\nloop invariant a + b == 3*i ==> i == 7 ==> a <= 14 && b <= 21;\nloop invariant a + b == 3*i ==> i == 8 ==> a <= 16 && b <= 24;\nloop invariant a + b == 3*i ==> i == 9 ==> a <= 18 && b <= 27;\nloop invariant a + b == 3*i ==> i == 10 ==> a <= 20 && b <= 30;\nloop invariant a + b == 3*i ==> i == 11 ==> a <= 22 && b <= 33;\nloop invariant a + b == 3*i ==> i == 12 ==> a <= 24 && b <= 36;\nloop invariant a + b == 3*i ==> i == 13 ==> a <= 26 && b <= 39;\nloop invariant a + b == 3*i ==> i == 14 ==> a <= 28 && b <= 42;\nloop invariant a + b == 3*i ==> i == 15 ==> a <= 30 && b <= 45;\nloop invariant a + b == 3*i ==> i == 16 ==> a <= 32 && b <= 48;\nloop invariant a + b == 3*i ==> i == 17 ==> a <= 34 && b <= 51;\nloop invariant a + b == 3*i ==> i == 18 ==> a <= 36 && b <= 54;\nloop invariant a + b == 3*i ==> i == 19 ==> a <= 38 && b <= 57;\nloop invariant a + b == 3*i ==> i == 20 ==> a <= 40 && b <= 60;\nloop invariant a + b == 3*i ==> i == 21 ==> a <= 42 && b <= 63;\nloop invariant a + b == 3*i ==> i == 22 ==> a <= 44 && b <= 66;\nloop invariant a + b == 3*i ==> i == 23 ==> a <= 46 && b <= 69;\nloop invariant a + b == 3*i ==> i == 24 ==> a <= 48 && b <= 72;\nloop invariant a + b == 3*i ==> i == 25 ==> a <= 50 && b <= 75;\nloop invariant a + b == 3*i ==> i == 26 ==> a <= 52 && b <= 78;\nloop invariant a + b == 3*i ==> i == 27 ==> a <= 54 && b <= 81;\nloop invariant a + b == 3*i ==> i == 28 ==> a <= 56 && b <= 84;\nloop invariant a + b == 3*i ==> i == 29 ==> a <= 58 && b <= 87;\nloop invariant a + b == 3*i ==> i == 30 ==> a <= 60 && b <= 90;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 1;\nloop invariant a + b <= 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b == 3 * i;\nloop invariant i <= n ==> a + b == 3 * n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a + b == 3 * i;\nloop invariant a >= 0;\nloop invariant b >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a + b == 3 * i;\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a + b + 3*n >= 3*n;\nloop invariant a + b + 3*n <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: a + b >= 0;\n\nloop invariant i5: a + b + 3*n >= 3*n;\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b == 3 * i;\nloop invariant (i == n) ==> (a + b == 3 * n);\nloop invariant (i == n) ==> (a == n);\nloop invariant (i == n) ==> (b == 2 * n);\nloop invariant (i > 0) ==> (0 <= a <= 2 * n);\nloop invariant (i > 0) ==> (0 <= b <= 2 * n);\nloop invariant (i > 0) ==> (a + b == 3 * i);\nloop invariant (i > 0) ==> (a <= 2 * i);\nloop invariant (i > 0) ==> (b <= 2 * i);\nloop invariant (i > 0) ==> (a >= 0);\nloop invariant (i > 0) ==> (b >= 0);\nloop invariant (i > 0) ==> (a != b);\nloop invariant (i > 0) ==> (a != 0);\nloop invariant (i > 0) ==> (b != 0);\nloop invariant (i > 0) ==> (a != 2 * i);\nloop invariant (i > 0) ==> (b != 2 * i);\nloop invariant (i > 0) ==> (a != n);\nloop invariant (i > 0) ==> (b != 2 * n);\nloop invariant (i > 0) ==> (a != 2 * n);\nloop invariant (i > 0) ==> (b != n);\nloop invariant (i > 0) ==> (a != (n - 1));\nloop invariant (i > 0) ==> (b != (n - 1));\nloop invariant (i > 0) ==> (a != (n + 1));\nloop invariant (i > 0) ==> (b != (n + 1));\nloop invariant (i > 0) ==> (a != (2 * n - 1));\nloop invariant (i > 0) ==> (b != (2 * n - 1));\nloop invariant (i > 0) ==> (a != (2 * n + 1));\nloop invariant (i > 0) ==> (b != (2 * n + 1));\nloop invariant (i > 0) ==> (a != (n - 2));\nloop invariant (i > 0) ==> (b != (n - 2));\nloop invariant (i > 0) ==> (a != (n + 2));\nloop invariant (i > 0) ==> (b != (n + 2));\nloop invariant (i > 0) ==> (a != (2 * n - 2));\nloop invariant (i > 0) ==> (b != (2 * n - 2));\nloop invariant (i > 0) ==> (a != (2 * n + 2));\nloop invariant (i > 0) ==> (b != (2 * n + 2));\nloop invariant (i > 0) ==> (a != (n - 3));\nloop invariant (i > 0) ==> (b != (n - 3));\nloop invariant (i > 0) ==> (a != (n + 3));\nloop invariant (i > 0) ==> (b != (n + 3));\nloop invariant (i > 0) ==> (a != (2 * n - 3));\nloop invariant (i > 0) ==> (b != (2 * n - 3));\nloop invariant (i > 0) ==> (a != (2 * n + 3));\nloop invariant (i > 0) ==> (b != (2 * n + 3));\nloop invariant (i > 0) ==> (a != (n - 4));\nloop invariant (i > 0) ==> (b != (n - 4));\nloop invariant (i > 0) ==> (a != (n + 4));\nloop invariant (i > 0) ==> (b != (n + 4));\nloop invariant (i > 0) ==> (a != (2 * n - 4));\nloop invariant (i > 0) ==> (b != (2 * n - 4));\nloop invariant (i > 0) ==> (a != (2 * n + 4));\nloop invariant (i > 0) ==> (b != (2 * n + 4));\nloop invariant (i > 0) ==> (a != (n - 5));\nloop invariant (i > 0) ==> (b != (n - 5));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2 * n;\nloop invariant i3: 0 <= b <= 2 * n;\nloop invariant i4: a + b == 3 * i;\nloop invariant i5: (i == n) ==> (a + b == 3 * n);\n\n\nloop invariant i8: (i > 0) ==> (0 <= a <= 2 * n);\nloop invariant i9: (i > 0) ==> (0 <= b <= 2 * n);\nloop invariant i10: (i > 0) ==> (a + b == 3 * i);\nloop invariant i11: (i > 0) ==> (a <= 2 * i);\nloop invariant i12: (i > 0) ==> (b <= 2 * i);\nloop invariant i13: (i > 0) ==> (a >= 0);\nloop invariant i14: (i > 0) ==> (b >= 0);\n\nloop invariant i16: (i > 0) ==> (a != 0);\nloop invariant i17: (i > 0) ==> (b != 0);\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i30: (i > 0) ==> (a != (2 * n + 1));\nloop invariant i31: (i > 0) ==> (b != (2 * n + 1));\n\n\n\n\n\n\nloop invariant i38: (i > 0) ==> (a != (2 * n + 2));\nloop invariant i39: (i > 0) ==> (b != (2 * n + 2));\n\n\n\n\n\n\nloop invariant i46: (i > 0) ==> (a != (2 * n + 3));\nloop invariant i47: (i > 0) ==> (b != (2 * n + 3));\n\n\n\n\n\n\nloop invariant i54: (i > 0) ==> (a != (2 * n + 4));\nloop invariant i55: (i > 0) ==> (b != (2 * n + 4));\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant (i < n) ==> (a + b == 3*i);\nloop invariant (i >= n) ==> (a + b == 3*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b <= 3*n;\nloop invariant i5: (i < n) ==> (a + b == 3*i);\nloop invariant i6: (i >= n) ==> (a + b == 3*n);\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant 0 <= i <= n;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b >= 3*n - 3*i;\nloop invariant a + b >= 0;\nloop invariant a + b <= 2*n + 3*i;\nloop invariant a + b <= 2*n + 3*n;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 5*n;\nloop invariant a + b >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: 0 <= i <= n;\n\nloop invariant i5: a + b >= 3*i;\n\nloop invariant i7: a + b >= 0;\nloop invariant i8: a + b <= 2*n + 3*i;\nloop invariant i9: a + b <= 2*n + 3*n;\nloop invariant i10: a + b <= 5*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant i = n ==> (a + b == 3*n);\nloop invariant i < n ==> (a + b >= 3*i);\nloop invariant i < n ==> (a >= 0);\nloop invariant i < n ==> (b >= 0);\nloop invariant i < n ==> (b <= a + n);\nloop invariant i < n ==> (a <= b + n);\nloop invariant i < n ==> (a <= 3*n - b);\nloop invariant i < n ==> (b <= 3*n - a);\nloop invariant i < n ==> (a <= b + 2*n);\nloop invariant i < n ==> (b <= a + 2*n);\nloop invariant i < n ==> (a - b <= n);\nloop invariant i < n ==> (b - a <= n);\nloop invariant i < n ==> (a + b <= 3*n - 2);\nloop invariant i < n ==> (a + b >= 3*i + 1);\nloop invariant i < n ==> (a - b <= n - 1);\nloop invariant i < n ==> (b - a <= n - 1);\nloop invariant i < n ==> (a >= b + 1);\nloop invariant i < n ==> (b >= a + 1);\nloop invariant i < n ==> (a >= b - 1);\nloop invariant i < n ==> (b >= a - 1);\nloop invariant i < n ==> (a >= 0);\nloop invariant i < n ==> (b >= 0);\nloop invariant i < n ==> (a <= 3*n);\nloop invariant i < n ==> (b <= 3*n);\nloop invariant i < n ==> (a - b <= 2*n);\nloop invariant i < n ==> (b - a <= 2*n);\nloop invariant i < n ==> (a <= b + n);\nloop invariant i < n ==> (b <= a + n);\nloop invariant i < n ==> (a <= 3*n - b);\nloop invariant i < n ==> (b <= 3*n - a);\nloop invariant i < n ==> (a <= b + 2*n);\nloop invariant i < n ==> (b <= a + 2*n);\nloop invariant i < n ==> (a - b <= n - 1);\nloop invariant i < n ==> (b - a <= n - 1);\nloop invariant i < n ==> (a >= b + 1);\nloop invariant i < n ==> (b >= a + 1);\nloop invariant i < n ==> (a >= b - 1);\nloop invariant i < n ==> (b >= a - 1);\nloop invariant i < n ==> (a >= 0);\nloop invariant i < n ==> (b >= 0);\nloop invariant i < n ==> (a <= 3*n);\nloop invariant i < n ==> (b <= 3*n);\nloop invariant i < n ==> (a - b <= 2*n);\nloop invariant i < n ==> (b - a <= 2*n);\nloop invariant i < n ==> (a <= b + n);\nloop invariant i < n ==> (b <= a + n);\nloop invariant i < n ==> (a <= 3*n - b);\nloop invariant i < n ==> (b <= 3*n - a);\nloop invariant i < n ==> (a <= b + 2*n);\nloop invariant i < n ==> (b <= a + 2*n);\nloop invariant i < n ==> (a - b <= n - 1);\nloop invariant i < n ==> (b - a <= n - 1);\nloop invariant i < n ==> (a >= b + 1);\nloop invariant i < n ==> (b >= a + 1);\nloop invariant i < n ==> (a >= b - 1);\nloop invariant i < n ==> (b >= a - 1);\nloop invariant i < n ==> (a >= 0);\nloop invariant i < n ==> (b >= 0);\nloop invariant i < n ==> (a <= 3*n);\nloop invariant i < n ==> (b <= 3*n);\nloop invariant i < n ==> (a - b <= 2*n);\nloop invariant i < n ==> (b - a <= 2*n);\nloop invariant i < n ==> (a <= b + n);\nloop invariant i < n ==> (b <= a + n);\nloop invariant i < n ==> (a <= 3*n - b);\nloop invariant i < n ==> (b <= 3*n - a);\nloop invariant i < n ==> (a <= b + 2*n);\nloop invariant i < n ==> (b <= a + 2*n);\nloop invariant i < n ==> (a - b <= n - 1);\nloop invariant i < n ==> (b - a <= n - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: i < n ==> (a + b >= 3*i);\nloop invariant i3: i < n ==> (a >= 0);\nloop invariant i4: i < n ==> (b >= 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i == (a + b)/3;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant i < n ==> a + b == 3*i;\nloop invariant i < n ==> a + b <= 3*i;\nloop invariant i == n ==> a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i == (a + b)/3;\n\n\nloop invariant i5: i < n ==> a + b == 3*i;\nloop invariant i6: i < n ==> a + b <= 3*i;\nloop invariant i7: i == n ==> a + b == 3*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a + b <= 3*n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant i <= n;\nloop invariant a + b == 3*i;\nloop invariant a == 2*i - b;\nloop invariant a == i + 2*i - b;\nloop invariant a == 3*i - b;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\nloop invariant a == b + 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= a + b <= 3*n;\n\n\nloop invariant i4: i <= n;\nloop invariant i5: a + b == 3*i;\n\nloop invariant i7: a == i + 2*i - b;\nloop invariant i8: a == 3*i - b;\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (i = 0 ==> a = 0 && b = 0);\nloop invariant (i > 0 ==> a >= 0 && a <= 3*n);\nloop invariant (i > 0 ==> b >= 0 && b <= 3*n);\nloop invariant (i > 0 ==> a + b == 3*i);\nloop invariant (i > 0 ==> a >= b);\nloop invariant (i > 0 ==> a >= 2*i);\nloop invariant (i > 0 ==> b >= i);\nloop invariant (i > 0 ==> a <= 2*n);\nloop invariant (i > 0 ==> b <= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\nloop invariant (i >= n ==> b <= 3*n);\nloop invariant (i >= n ==> a + b == 3*n);\nloop invariant (i >= n ==> a >= b);\nloop invariant (i >= n ==> a >= 2*n);\nloop invariant (i >= n ==> b >= n);\nloop invariant (i >= n ==> a <= 3*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant a == 0;\nloop invariant b == 0;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant a == 2 * b;\nloop invariant a + b == 3 * i;\nloop invariant b == i;\nloop invariant a == 2 * i;\nloop invariant a + b == 3 * n;\nloop invariant n == n;\nloop invariant unknown_int() ==> a == a;\nloop invariant unknown_int() ==> b == b;\nloop invariant unknown_int() ==> i == i;\nloop invariant unknown_int() ==> n == n;\nloop invariant unknown_int() ==> a == a + 1;\nloop invariant unknown_int() ==> b == b + 2;\nloop invariant unknown_int() ==> i == i + 1;\nloop invariant !unknown_int() ==> a == a + 2;\nloop invariant !unknown_int() ==> b == b + 1;\nloop invariant !unknown_int() ==> i == i + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\n\n\n\nloop invariant i4: i <= n;\nloop invariant i5: i >= 0;\n\nloop invariant i7: a + b == 3 * i;\n\n\n\nloop invariant i11: n == n;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b < 3*n ==> i < n;\nloop invariant a + b <= 3*n ==> i <= n;\nloop invariant 3*n <= a + b ==> i >= n;\nloop invariant 3*n < a + b ==> i > n;\nloop invariant 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i == n ==> 3*n <= a + b;\nloop invariant i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\nloop invariant i6: a + b <= 3*n ==> i <= n;\n\n\nloop invariant i9: 3*n < a + b ==> i >= n ==> i == n;\n\n\nloop invariant i12: i == n ==> 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i13: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n <= a + b;\n\nloop invariant i15: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i16: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i17: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i18: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i19: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i20: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i21: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i22: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i23: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i24: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i25: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant b >= 0;\nloop invariant a >= 0;\nloop invariant i <= n;\nloop invariant b <= 3*n;\nloop invariant a <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*i ==> i < n;\nloop invariant a + b == 3*i ==> a <= 3*n - 3*i;\nloop invariant a + b == 3*i ==> b <= 3*n - 3*i;\nloop invariant a + b == 3*i ==> a + b == 3*i;\nloop invariant a + b == 3*i ==> i == 0 ==> a == 0 && b == 0;\nloop invariant a + b == 3*i ==> i == 1 ==> a <= 2 && b <= 3;\nloop invariant a + b == 3*i ==> i == 2 ==> a <= 4 && b <= 6;\nloop invariant a + b == 3*i ==> i == 3 ==> a <= 6 && b <= 9;\nloop invariant a + b == 3*i ==> i == 4 ==> a <= 8 && b <= 12;\nloop invariant a + b == 3*i ==> i == 5 ==> a <= 10 && b <= 15;\nloop invariant a + b == 3*i ==> i == 6 ==> a <= 12 && b <= 18;\nloop invariant a + b == 3*i ==> i == 7 ==> a <= 14 && b <= 21;\nloop invariant a + b == 3*i ==> i == 8 ==> a <= 16 && b <= 24;\nloop invariant a + b == 3*i ==> i == 9 ==> a <= 18 && b <= 27;\nloop invariant a + b == 3*i ==> i == 10 ==> a <= 20 && b <= 30;\nloop invariant a + b == 3*i ==> i == 11 ==> a <= 22 && b <= 33;\nloop invariant a + b == 3*i ==> i == 12 ==> a <= 24 && b <= 36;\nloop invariant a + b == 3*i ==> i == 13 ==> a <= 26 && b <= 39;\nloop invariant a + b == 3*i ==> i == 14 ==> a <= 28 && b <= 42;\nloop invariant a + b == 3*i ==> i == 15 ==> a <= 30 && b <= 45;\nloop invariant a + b == 3*i ==> i == 16 ==> a <= 32 && b <= 48;\nloop invariant a + b == 3*i ==> i == 17 ==> a <= 34 && b <= 51;\nloop invariant a + b == 3*i ==> i == 18 ==> a <= 36 && b <= 54;\nloop invariant a + b == 3*i ==> i == 19 ==> a <= 38 && b <= 57;\nloop invariant a + b == 3*i ==> i == 20 ==> a <= 40 && b <= 60;\nloop invariant a + b == 3*i ==> i == 21 ==> a <= 42 && b <= 63;\nloop invariant a + b == 3*i ==> i == 22 ==> a <= 44 && b <= 66;\nloop invariant a + b == 3*i ==> i == 23 ==> a <= 46 && b <= 69;\nloop invariant a + b == 3*i ==> i == 24 ==> a <= 48 && b <= 72;\nloop invariant a + b == 3*i ==> i == 25 ==> a <= 50 && b <= 75;\nloop invariant a + b == 3*i ==> i == 26 ==> a <= 52 && b <= 78;\nloop invariant a + b == 3*i ==> i == 27 ==> a <= 54 && b <= 81;\nloop invariant a + b == 3*i ==> i == 28 ==> a <= 56 && b <= 84;\nloop invariant a + b == 3*i ==> i == 29 ==> a <= 58 && b <= 87;\nloop invariant a + b == 3*i ==> i == 30 ==> a <= 60 && b <= 90;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: a >= 0;\nloop invariant i4: i <= n;\nloop invariant i5: b <= 3*n;\nloop invariant i6: a <= 3*n;\nloop invariant i7: a + b == 3*i;\nloop invariant i8: a + b == 3*n ==> i == n;\n\n\n\nloop invariant i12: a + b == 3*i ==> a + b == 3*i;\nloop invariant i13: a + b == 3*i ==> i == 0 ==> a == 0 && b == 0;\nloop invariant i14: a + b == 3*i ==> i == 1 ==> a <= 2 && b <= 3;\nloop invariant i15: a + b == 3*i ==> i == 2 ==> a <= 4 && b <= 6;\nloop invariant i16: a + b == 3*i ==> i == 3 ==> a <= 6 && b <= 9;\nloop invariant i17: a + b == 3*i ==> i == 4 ==> a <= 8 && b <= 12;\nloop invariant i18: a + b == 3*i ==> i == 5 ==> a <= 10 && b <= 15;\nloop invariant i19: a + b == 3*i ==> i == 6 ==> a <= 12 && b <= 18;\nloop invariant i20: a + b == 3*i ==> i == 7 ==> a <= 14 && b <= 21;\nloop invariant i21: a + b == 3*i ==> i == 8 ==> a <= 16 && b <= 24;\nloop invariant i22: a + b == 3*i ==> i == 9 ==> a <= 18 && b <= 27;\nloop invariant i23: a + b == 3*i ==> i == 10 ==> a <= 20 && b <= 30;\nloop invariant i24: a + b == 3*i ==> i == 11 ==> a <= 22 && b <= 33;\nloop invariant i25: a + b == 3*i ==> i == 12 ==> a <= 24 && b <= 36;\nloop invariant i26: a + b == 3*i ==> i == 13 ==> a <= 26 && b <= 39;\nloop invariant i27: a + b == 3*i ==> i == 14 ==> a <= 28 && b <= 42;\nloop invariant i28: a + b == 3*i ==> i == 15 ==> a <= 30 && b <= 45;\nloop invariant i29: a + b == 3*i ==> i == 16 ==> a <= 32 && b <= 48;\nloop invariant i30: a + b == 3*i ==> i == 17 ==> a <= 34 && b <= 51;\nloop invariant i31: a + b == 3*i ==> i == 18 ==> a <= 36 && b <= 54;\nloop invariant i32: a + b == 3*i ==> i == 19 ==> a <= 38 && b <= 57;\nloop invariant i33: a + b == 3*i ==> i == 20 ==> a <= 40 && b <= 60;\nloop invariant i34: a + b == 3*i ==> i == 21 ==> a <= 42 && b <= 63;\nloop invariant i35: a + b == 3*i ==> i == 22 ==> a <= 44 && b <= 66;\nloop invariant i36: a + b == 3*i ==> i == 23 ==> a <= 46 && b <= 69;\nloop invariant i37: a + b == 3*i ==> i == 24 ==> a <= 48 && b <= 72;\nloop invariant i38: a + b == 3*i ==> i == 25 ==> a <= 50 && b <= 75;\nloop invariant i39: a + b == 3*i ==> i == 26 ==> a <= 52 && b <= 78;\nloop invariant i40: a + b == 3*i ==> i == 27 ==> a <= 54 && b <= 81;\nloop invariant i41: a + b == 3*i ==> i == 28 ==> a <= 56 && b <= 84;\nloop invariant i42: a + b == 3*i ==> i == 29 ==> a <= 58 && b <= 87;\nloop invariant i43: a + b == 3*i ==> i == 30 ==> a <= 60 && b <= 90;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 1;\nloop invariant a + b <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b == 3 * i;\nloop invariant i <= n ==> a + b == 3 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3 * i;\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 89: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a + b == 3 * i;\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: a + b >= 0;\nloop invariant i6: a + b <= 3*n;\nloop invariant i7: a + b + 3*n >= 3*n;\nloop invariant i8: a + b + 3*n <= 3*n;\nloop invariant i9: 0 <= a <= 2 * n;\nloop invariant i10: 0 <= b <= 2 * n;\nloop invariant i11: (i == n) ==> (a + b == 3 * n);\nloop invariant i12: (i == n) ==> (a == n);\nloop invariant i13: (i == n) ==> (b == 2 * n);\nloop invariant i14: (i > 0) ==> (0 <= a <= 2 * n);\nloop invariant i15: (i > 0) ==> (0 <= b <= 2 * n);\nloop invariant i16: (i > 0) ==> (a + b == 3 * i);\nloop invariant i17: (i > 0) ==> (a <= 2 * i);\nloop invariant i18: (i > 0) ==> (b <= 2 * i);\nloop invariant i19: (i > 0) ==> (a >= 0);\nloop invariant i20: (i > 0) ==> (b >= 0);\nloop invariant i21: (i > 0) ==> (a != b);\nloop invariant i22: (i > 0) ==> (a != 0);\nloop invariant i23: (i > 0) ==> (b != 0);\nloop invariant i24: (i > 0) ==> (a != 2 * i);\nloop invariant i25: (i > 0) ==> (b != 2 * i);\nloop invariant i26: (i > 0) ==> (a != n);\nloop invariant i27: (i > 0) ==> (b != 2 * n);\nloop invariant i28: (i > 0) ==> (a != 2 * n);\nloop invariant i29: (i > 0) ==> (b != n);\nloop invariant i30: (i > 0) ==> (a != (n - 1));\nloop invariant i31: (i > 0) ==> (b != (n - 1));\nloop invariant i32: (i > 0) ==> (a != (n + 1));\nloop invariant i33: (i > 0) ==> (b != (n + 1));\nloop invariant i34: (i > 0) ==> (a != (2 * n - 1));\nloop invariant i35: (i > 0) ==> (b != (2 * n - 1));\nloop invariant i36: (i > 0) ==> (a != (2 * n + 1));\nloop invariant i37: (i > 0) ==> (b != (2 * n + 1));\nloop invariant i38: (i > 0) ==> (a != (n - 2));\nloop invariant i39: (i > 0) ==> (b != (n - 2));\nloop invariant i40: (i > 0) ==> (a != (n + 2));\nloop invariant i41: (i > 0) ==> (b != (n + 2));\nloop invariant i42: (i > 0) ==> (a != (2 * n - 2));\nloop invariant i43: (i > 0) ==> (b != (2 * n - 2));\nloop invariant i44: (i > 0) ==> (a != (2 * n + 2));\nloop invariant i45: (i > 0) ==> (b != (2 * n + 2));\nloop invariant i46: (i > 0) ==> (a != (n - 3));\nloop invariant i47: (i > 0) ==> (b != (n - 3));\nloop invariant i48: (i > 0) ==> (a != (n + 3));\nloop invariant i49: (i > 0) ==> (b != (n + 3));\nloop invariant i50: (i > 0) ==> (a != (2 * n - 3));\nloop invariant i51: (i > 0) ==> (b != (2 * n - 3));\nloop invariant i52: (i > 0) ==> (a != (2 * n + 3));\nloop invariant i53: (i > 0) ==> (b != (2 * n + 3));\nloop invariant i54: (i > 0) ==> (a != (n - 4));\nloop invariant i55: (i > 0) ==> (b != (n - 4));\nloop invariant i56: (i > 0) ==> (a != (n + 4));\nloop invariant i57: (i > 0) ==> (b != (n + 4));\nloop invariant i58: (i > 0) ==> (a != (2 * n - 4));\nloop invariant i59: (i > 0) ==> (b != (2 * n - 4));\nloop invariant i60: (i > 0) ==> (a != (2 * n + 4));\nloop invariant i61: (i > 0) ==> (b != (2 * n + 4));\nloop invariant i62: (i > 0) ==> (a != (n - 5));\nloop invariant i63: (i > 0) ==> (b != (n - 5));\nloop invariant i64: 0 <= a <= 3*n;\nloop invariant i65: 0 <= b <= 2*n;\nloop invariant i66: (i < n) ==> (a + b == 3*i);\nloop invariant i67: (i >= n) ==> (a + b == 3*n);\nloop invariant i68: 0 <= a <= 2*n;\nloop invariant i69: a + b >= 3*i;\nloop invariant i70: a + b >= 3*n - 3*i;\nloop invariant i71: a + b <= 2*n + 3*i;\nloop invariant i72: a + b <= 2*n + 3*n;\nloop invariant i73: a + b <= 5*n;\nloop invariant i74: i = n ==> (a + b == 3*n);\nloop invariant i75: i < n ==> (a + b >= 3*i);\nloop invariant i76: i < n ==> (a >= 0);\nloop invariant i77: i < n ==> (b >= 0);\nloop invariant i78: i < n ==> (b <= a + n);\nloop invariant i79: i < n ==> (a <= b + n);\nloop invariant i80: i < n ==> (a <= 3*n - b);\nloop invariant i81: i < n ==> (b <= 3*n - a);\nloop invariant i82: i < n ==> (a <= b + 2*n);\nloop invariant i83: i < n ==> (b <= a + 2*n);\nloop invariant i84: i < n ==> (a - b <= n);\nloop invariant i85: i < n ==> (b - a <= n);\nloop invariant i86: i < n ==> (a + b <= 3*n - 2);\nloop invariant i87: i < n ==> (a + b >= 3*i + 1);\nloop invariant i88: i < n ==> (a - b <= n - 1);\nloop invariant i89: i < n ==> (b - a <= n - 1);\nloop invariant i90: i < n ==> (a >= b + 1);\nloop invariant i91: i < n ==> (b >= a + 1);\nloop invariant i92: i < n ==> (a >= b - 1);\nloop invariant i93: i < n ==> (b >= a - 1);\nloop invariant i94: i < n ==> (a <= 3*n);\nloop invariant i95: i < n ==> (b <= 3*n);\nloop invariant i96: i < n ==> (a - b <= 2*n);\nloop invariant i97: i < n ==> (b - a <= 2*n);\nloop invariant i98: i == (a + b)/3;\nloop invariant i99: i < n ==> a + b == 3*i;\nloop invariant i100: i < n ==> a + b <= 3*i;\nloop invariant i101: i == n ==> a + b == 3*n;\nloop invariant i102: 0 <= a + b <= 3*n;\nloop invariant i103: i <= n;\nloop invariant i104: a + b == 3*i;\nloop invariant i105: a == 2*i - b;\nloop invariant i106: a == i + 2*i - b;\nloop invariant i107: a == 3*i - b;\nloop invariant i108: a == b + 2*i;\nloop invariant i109: (i = 0 ==> a = 0 && b = 0);\nloop invariant i110: (i > 0 ==> a >= 0 && a <= 3*n);\nloop invariant i111: (i > 0 ==> b >= 0 && b <= 3*n);\nloop invariant i112: (i > 0 ==> a + b == 3*i);\nloop invariant i113: (i > 0 ==> a >= b);\nloop invariant i114: (i > 0 ==> a >= 2*i);\nloop invariant i115: (i > 0 ==> b >= i);\nloop invariant i116: (i > 0 ==> a <= 2*n);\nloop invariant i117: (i > 0 ==> b <= n);\nloop invariant i118: (i >= n ==> a <= 3*n);\nloop invariant i119: (i >= n ==> b <= 3*n);\nloop invariant i120: (i >= n ==> a + b == 3*n);\nloop invariant i121: (i >= n ==> a >= b);\nloop invariant i122: (i >= n ==> a >= 2*n);\nloop invariant i123: (i >= n ==> b >= n);\nloop invariant i124: i == 0;\nloop invariant i125: a == 0;\nloop invariant i126: b == 0;\nloop invariant i127: i >= 0;\nloop invariant i128: a == 2 * b;\nloop invariant i129: b == i;\nloop invariant i130: a == 2 * i;\nloop invariant i131: a + b == 3 * n;\nloop invariant i132: n == n;\nloop invariant i133: unknown_int() ==> a == a;\nloop invariant i134: unknown_int() ==> b == b;\nloop invariant i135: unknown_int() ==> i == i;\nloop invariant i136: unknown_int() ==> n == n;\nloop invariant i137: unknown_int() ==> a == a + 1;\nloop invariant i138: unknown_int() ==> b == b + 2;\nloop invariant i139: unknown_int() ==> i == i + 1;\nloop invariant i140: !unknown_int() ==> a == a + 2;\nloop invariant i141: !unknown_int() ==> b == b + 1;\nloop invariant i142: !unknown_int() ==> i == i + 1;\nloop invariant i143: 0 <= b <= 3*n;\nloop invariant i144: a + b == 3*n ==> i == n;\nloop invariant i145: a + b < 3*n ==> i < n;\nloop invariant i146: a + b <= 3*n ==> i <= n;\nloop invariant i147: 3*n <= a + b ==> i >= n;\nloop invariant i148: 3*n < a + b ==> i > n;\nloop invariant i149: 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i150: i == n ==> 3*n <= a + b;\nloop invariant i151: i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i152: i == n ==> 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i153: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i154: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i155: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i156: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i157: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i158: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i159: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i160: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i161: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i162: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i163: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i164: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i165: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i166: a >= b;\nloop invariant i167: b <= 3*n;\nloop invariant i168: a <= 3*n;\nloop invariant i169: a + b == 3*i ==> i < n;\nloop invariant i170: a + b == 3*i ==> a <= 3*n - 3*i;\nloop invariant i171: a + b == 3*i ==> b <= 3*n - 3*i;\nloop invariant i172: a + b == 3*i ==> a + b == 3*i;\nloop invariant i173: a + b == 3*i ==> i == 0 ==> a == 0 && b == 0;\nloop invariant i174: a + b == 3*i ==> i == 1 ==> a <= 2 && b <= 3;\nloop invariant i175: a + b == 3*i ==> i == 2 ==> a <= 4 && b <= 6;\nloop invariant i176: a + b == 3*i ==> i == 3 ==> a <= 6 && b <= 9;\nloop invariant i177: a + b == 3*i ==> i == 4 ==> a <= 8 && b <= 12;\nloop invariant i178: a + b == 3*i ==> i == 5 ==> a <= 10 && b <= 15;\nloop invariant i179: a + b == 3*i ==> i == 6 ==> a <= 12 && b <= 18;\nloop invariant i180: a + b == 3*i ==> i == 7 ==> a <= 14 && b <= 21;\nloop invariant i181: a + b == 3*i ==> i == 8 ==> a <= 16 && b <= 24;\nloop invariant i182: a + b == 3*i ==> i == 9 ==> a <= 18 && b <= 27;\nloop invariant i183: a + b == 3*i ==> i == 10 ==> a <= 20 && b <= 30;\nloop invariant i184: a + b == 3*i ==> i == 11 ==> a <= 22 && b <= 33;\nloop invariant i185: a + b == 3*i ==> i == 12 ==> a <= 24 && b <= 36;\nloop invariant i186: a + b == 3*i ==> i == 13 ==> a <= 26 && b <= 39;\nloop invariant i187: a + b == 3*i ==> i == 14 ==> a <= 28 && b <= 42;\nloop invariant i188: a + b == 3*i ==> i == 15 ==> a <= 30 && b <= 45;\nloop invariant i189: a + b == 3*i ==> i == 16 ==> a <= 32 && b <= 48;\nloop invariant i190: a + b == 3*i ==> i == 17 ==> a <= 34 && b <= 51;\nloop invariant i191: a + b == 3*i ==> i == 18 ==> a <= 36 && b <= 54;\nloop invariant i192: a + b == 3*i ==> i == 19 ==> a <= 38 && b <= 57;\nloop invariant i193: a + b == 3*i ==> i == 20 ==> a <= 40 && b <= 60;\nloop invariant i194: a + b == 3*i ==> i == 21 ==> a <= 42 && b <= 63;\nloop invariant i195: a + b == 3*i ==> i == 22 ==> a <= 44 && b <= 66;\nloop invariant i196: a + b == 3*i ==> i == 23 ==> a <= 46 && b <= 69;\nloop invariant i197: a + b == 3*i ==> i == 24 ==> a <= 48 && b <= 72;\nloop invariant i198: a + b == 3*i ==> i == 25 ==> a <= 50 && b <= 75;\nloop invariant i199: a + b == 3*i ==> i == 26 ==> a <= 52 && b <= 78;\nloop invariant i200: a + b == 3*i ==> i == 27 ==> a <= 54 && b <= 81;\nloop invariant i201: a + b == 3*i ==> i == 28 ==> a <= 56 && b <= 84;\nloop invariant i202: a + b == 3*i ==> i == 29 ==> a <= 58 && b <= 87;\nloop invariant i203: a + b == 3*i ==> i == 30 ==> a <= 60 && b <= 90;\nloop invariant i204: a + b >= 1;\nloop invariant i205: i <= n ==> a + b == 3 * n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 31,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a + b == 3 * i;\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: a + b >= 0;\nloop invariant i6: a + b <= 3*n;\nloop invariant i7: a + b + 3*n >= 3*n;\n\nloop invariant i9: 0 <= a <= 2 * n;\nloop invariant i10: 0 <= b <= 2 * n;\nloop invariant i11: (i == n) ==> (a + b == 3 * n);\n\n\nloop invariant i14: (i > 0) ==> (0 <= a <= 2 * n);\nloop invariant i15: (i > 0) ==> (0 <= b <= 2 * n);\nloop invariant i16: (i > 0) ==> (a + b == 3 * i);\nloop invariant i17: (i > 0) ==> (a <= 2 * i);\nloop invariant i18: (i > 0) ==> (b <= 2 * i);\nloop invariant i19: (i > 0) ==> (a >= 0);\nloop invariant i20: (i > 0) ==> (b >= 0);\n\nloop invariant i22: (i > 0) ==> (a != 0);\nloop invariant i23: (i > 0) ==> (b != 0);\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i36: (i > 0) ==> (a != (2 * n + 1));\nloop invariant i37: (i > 0) ==> (b != (2 * n + 1));\n\n\n\n\n\n\nloop invariant i44: (i > 0) ==> (a != (2 * n + 2));\nloop invariant i45: (i > 0) ==> (b != (2 * n + 2));\n\n\n\n\n\n\nloop invariant i52: (i > 0) ==> (a != (2 * n + 3));\nloop invariant i53: (i > 0) ==> (b != (2 * n + 3));\n\n\n\n\n\n\nloop invariant i60: (i > 0) ==> (a != (2 * n + 4));\nloop invariant i61: (i > 0) ==> (b != (2 * n + 4));\n\n\nloop invariant i64: 0 <= a <= 3*n;\nloop invariant i65: 0 <= b <= 2*n;\nloop invariant i66: (i < n) ==> (a + b == 3*i);\nloop invariant i67: (i >= n) ==> (a + b == 3*n);\nloop invariant i68: 0 <= a <= 2*n;\nloop invariant i69: a + b >= 3*i;\n\nloop invariant i71: a + b <= 2*n + 3*i;\nloop invariant i72: a + b <= 2*n + 3*n;\nloop invariant i73: a + b <= 5*n;\n\nloop invariant i75: i < n ==> (a + b >= 3*i);\nloop invariant i76: i < n ==> (a >= 0);\nloop invariant i77: i < n ==> (b >= 0);\nloop invariant i78: i < n ==> (b <= a + n);\nloop invariant i79: i < n ==> (a <= b + n);\nloop invariant i80: i < n ==> (a <= 3*n - b);\nloop invariant i81: i < n ==> (b <= 3*n - a);\nloop invariant i82: i < n ==> (a <= b + 2*n);\nloop invariant i83: i < n ==> (b <= a + 2*n);\nloop invariant i84: i < n ==> (a - b <= n);\nloop invariant i85: i < n ==> (b - a <= n);\nloop invariant i86: i < n ==> (a + b <= 3*n - 2);\n\nloop invariant i88: i < n ==> (a - b <= n - 1);\nloop invariant i89: i < n ==> (b - a <= n - 1);\n\n\n\n\nloop invariant i94: i < n ==> (a <= 3*n);\nloop invariant i95: i < n ==> (b <= 3*n);\nloop invariant i96: i < n ==> (a - b <= 2*n);\nloop invariant i97: i < n ==> (b - a <= 2*n);\nloop invariant i98: i == (a + b)/3;\nloop invariant i99: i < n ==> a + b == 3*i;\nloop invariant i100: i < n ==> a + b <= 3*i;\nloop invariant i101: i == n ==> a + b == 3*n;\nloop invariant i102: 0 <= a + b <= 3*n;\nloop invariant i103: i <= n;\nloop invariant i104: a + b == 3*i;\n\nloop invariant i106: a == i + 2*i - b;\nloop invariant i107: a == 3*i - b;\n\n\nloop invariant i110: (i > 0 ==> a >= 0 && a <= 3*n);\nloop invariant i111: (i > 0 ==> b >= 0 && b <= 3*n);\nloop invariant i112: (i > 0 ==> a + b == 3*i);\n\n\nloop invariant i115: (i > 0 ==> b >= i);\nloop invariant i116: (i > 0 ==> a <= 2*n);\n\nloop invariant i118: (i >= n ==> a <= 3*n);\nloop invariant i119: (i >= n ==> b <= 3*n);\nloop invariant i120: (i >= n ==> a + b == 3*n);\n\n\nloop invariant i123: (i >= n ==> b >= n);\n\n\n\nloop invariant i127: i >= 0;\n\n\n\n\nloop invariant i132: n == n;\n\n\n\n\n\n\n\n\n\n\nloop invariant i143: 0 <= b <= 3*n;\nloop invariant i144: a + b == 3*n ==> i == n;\nloop invariant i145: a + b < 3*n ==> i < n;\nloop invariant i146: a + b <= 3*n ==> i <= n;\nloop invariant i147: 3*n <= a + b ==> i >= n;\nloop invariant i148: 3*n < a + b ==> i > n;\nloop invariant i149: 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i150: i == n ==> 3*n <= a + b;\nloop invariant i151: i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i152: i == n ==> 3*n < a + b ==> i >= n ==> i == n;\nloop invariant i153: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i154: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i155: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i156: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i157: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i158: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i159: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i160: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\nloop invariant i161: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n;\nloop invariant i162: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n <= a + b;\nloop invariant i163: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b;\nloop invariant i164: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n;\nloop invariant i165: i == n ==> 3*n < a + b ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n ==> i == n ==> 3*n < a + b ==> a + b == 3*n ==> i >= n;\n\nloop invariant i167: b <= 3*n;\nloop invariant i168: a <= 3*n;\n\n\n\nloop invariant i172: a + b == 3*i ==> a + b == 3*i;\nloop invariant i173: a + b == 3*i ==> i == 0 ==> a == 0 && b == 0;\nloop invariant i174: a + b == 3*i ==> i == 1 ==> a <= 2 && b <= 3;\nloop invariant i175: a + b == 3*i ==> i == 2 ==> a <= 4 && b <= 6;\nloop invariant i176: a + b == 3*i ==> i == 3 ==> a <= 6 && b <= 9;\nloop invariant i177: a + b == 3*i ==> i == 4 ==> a <= 8 && b <= 12;\nloop invariant i178: a + b == 3*i ==> i == 5 ==> a <= 10 && b <= 15;\nloop invariant i179: a + b == 3*i ==> i == 6 ==> a <= 12 && b <= 18;\nloop invariant i180: a + b == 3*i ==> i == 7 ==> a <= 14 && b <= 21;\nloop invariant i181: a + b == 3*i ==> i == 8 ==> a <= 16 && b <= 24;\nloop invariant i182: a + b == 3*i ==> i == 9 ==> a <= 18 && b <= 27;\nloop invariant i183: a + b == 3*i ==> i == 10 ==> a <= 20 && b <= 30;\nloop invariant i184: a + b == 3*i ==> i == 11 ==> a <= 22 && b <= 33;\nloop invariant i185: a + b == 3*i ==> i == 12 ==> a <= 24 && b <= 36;\nloop invariant i186: a + b == 3*i ==> i == 13 ==> a <= 26 && b <= 39;\nloop invariant i187: a + b == 3*i ==> i == 14 ==> a <= 28 && b <= 42;\nloop invariant i188: a + b == 3*i ==> i == 15 ==> a <= 30 && b <= 45;\nloop invariant i189: a + b == 3*i ==> i == 16 ==> a <= 32 && b <= 48;\nloop invariant i190: a + b == 3*i ==> i == 17 ==> a <= 34 && b <= 51;\nloop invariant i191: a + b == 3*i ==> i == 18 ==> a <= 36 && b <= 54;\nloop invariant i192: a + b == 3*i ==> i == 19 ==> a <= 38 && b <= 57;\nloop invariant i193: a + b == 3*i ==> i == 20 ==> a <= 40 && b <= 60;\nloop invariant i194: a + b == 3*i ==> i == 21 ==> a <= 42 && b <= 63;\nloop invariant i195: a + b == 3*i ==> i == 22 ==> a <= 44 && b <= 66;\nloop invariant i196: a + b == 3*i ==> i == 23 ==> a <= 46 && b <= 69;\nloop invariant i197: a + b == 3*i ==> i == 24 ==> a <= 48 && b <= 72;\nloop invariant i198: a + b == 3*i ==> i == 25 ==> a <= 50 && b <= 75;\nloop invariant i199: a + b == 3*i ==> i == 26 ==> a <= 52 && b <= 78;\nloop invariant i200: a + b == 3*i ==> i == 27 ==> a <= 54 && b <= 81;\nloop invariant i201: a + b == 3*i ==> i == 28 ==> a <= 56 && b <= 84;\nloop invariant i202: a + b == 3*i ==> i == 29 ==> a <= 58 && b <= 87;\nloop invariant i203: a + b == 3*i ==> i == 30 ==> a <= 60 && b <= 90;\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 106,
        "success_count": 92,
        "failure_count": 14,
        "success_rate": 0.8679245283018868
    }
}