{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z == (i - j);\nloop invariant i == (i0 + y);\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - x);\nloop invariant x == (x0 - i);\nloop invariant z == (z0 + x);\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= i;\nloop invariant z == (i - x);\nloop invariant y == (j - (2 * (i - x)));\nloop invariant (if i == j then y == -z);\nloop invariant (if i != j then y != -z);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y >= -2 * z;\nloop invariant y <= i;\nloop invariant (i == j ==> y == -z);\nloop invariant (i != j ==> y != -z);\nloop invariant (i >= j ==> y >= -z);\nloop invariant (i <= j ==> y <= -z);\nloop invariant (i == j ==> x == 0);\nloop invariant (i != j ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant y >= -z;\nloop invariant y <= 2 * j - 2 * z;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant x >= i - (j - 1) * (j - 1) / 2;\nloop invariant y >= j - (j - 1) * (j - 1) / 2;\nloop invariant y <= -2 * z;\nloop invariant z >= 0;\nloop invariant z <= (j - 1) * (j - 1) / 2;\nloop invariant (i == j) ==> (y == -z);\nloop invariant (unknown_int() >= 0) ==> (i >= 0);\nloop invariant (unknown_int() <= LARGE_INT) ==> (i <= LARGE_INT);\nloop invariant (unknown_int() >= 0) ==> (j >= 0);\nloop invariant (unknown_int() <= LARGE_INT) ==> (j <= LARGE_INT);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> z >= 0;\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z >= 0;\nloop invariant x == i - j;\nloop invariant y == j - 2 * z;\nloop invariant z <= j / 2;\nloop invariant i == j ==> y == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant z >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x == (i - z);\nloop invariant y == (j - 2 * z);\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= z <= i;\nloop invariant x == (i - z);\nloop invariant y == (j - 2 * z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant i >= j;\nloop invariant j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z == i - j;\nloop invariant y == j - 2 * z;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z == (i - j);\nloop invariant i == (i0 + y);\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - x);\nloop invariant x == (x0 - i);\nloop invariant z == (z0 + x);\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\nloop invariant y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i == (i0 + (j0 - 2 * y));\nloop invariant j == (j0 - 2 * y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= i;\nloop invariant z == (i - x);\nloop invariant y == (j - (2 * (i - x)));\nloop invariant (if i == j then y == -z);\nloop invariant (if i != j then y != -z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: 0 <= z <= i;\nloop invariant i4: z == (i - x);\nloop invariant i5: y == (j - (2 * (i - x)));\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y >= -2 * z;\nloop invariant y <= i;\nloop invariant (i == j ==> y == -z);\nloop invariant (i != j ==> y != -z);\nloop invariant (i >= j ==> y >= -z);\nloop invariant (i <= j ==> y <= -z);\nloop invariant (i == j ==> x == 0);\nloop invariant (i != j ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y >= -z ==> x >= 0);\nloop invariant (y <= -z ==> x <= 0);\nloop invariant (y == -z ==> x == 0);\nloop invariant (y != -z ==> x != 0);\nloop invariant (x == 0 ==> y == -z);\nloop invariant (x != 0 ==> y != -z);\nloop invariant (y == -z ==> x == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: j >= 0;\nloop invariant i4: z >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: x <= i;\nloop invariant i7: y >= -2 * z;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: (y >= -z ==> x >= 0);\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant y >= -z;\nloop invariant y <= 2 * j - 2 * z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: j >= 0;\nloop invariant i3: z >= 0;\n\nloop invariant i5: y <= 2 * j - 2 * z;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant x >= i - (j - 1) * (j - 1) / 2;\nloop invariant y >= j - (j - 1) * (j - 1) / 2;\nloop invariant y <= -2 * z;\nloop invariant z >= 0;\nloop invariant z <= (j - 1) * (j - 1) / 2;\nloop invariant (i == j) ==> (y == -z);\nloop invariant (unknown_int() >= 0) ==> (i >= 0);\nloop invariant (unknown_int() <= LARGE_INT) ==> (i <= LARGE_INT);\nloop invariant (unknown_int() >= 0) ==> (j >= 0);\nloop invariant (unknown_int() <= LARGE_INT) ==> (j <= LARGE_INT);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\n\n\n\nloop invariant i6: z >= 0;\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> z >= 0;\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\nloop invariant x >= 0 ==> (z == i - x);\nloop invariant x >= 0 ==> (y == j - 2 * x);\nloop invariant x >= 0 ==> (i == j + 2 * x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: x >= 0 ==> x >= 0;\n\nloop invariant i3: x >= 0 ==> z >= 0;\n\nloop invariant i5: x >= 0 ==> (z == i - x);\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z >= 0;\nloop invariant x == i - j;\nloop invariant y == j - 2 * z;\nloop invariant z <= j / 2;\nloop invariant i == j ==> y == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\nloop invariant i4: i >= 0;\nloop invariant i5: i <= 1000000;\nloop invariant i6: j >= 0;\nloop invariant i7: x <= i;\nloop invariant i8: y <= j;\nloop invariant i9: z >= 0;\n\nloop invariant i11: y == j - 2 * z;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant z >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= x <= i;\n\nloop invariant i5: z >= 0;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x == (i - z);\nloop invariant y == (j - 2 * z);\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: x == (i - z);\nloop invariant i5: y == (j - 2 * z);\n\nloop invariant i7: x >= 0;\n\nloop invariant i9: z >= 0;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= z <= i;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\nloop invariant i4: x <= i;\nloop invariant i5: y <= j;\n\nloop invariant i7: x >= 0;\n\nloop invariant i9: z >= 0;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= z <= i;\nloop invariant x == (i - z);\nloop invariant y == (j - 2 * z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: 0 <= x <= i;\nloop invariant i3: 0 <= z <= i;\nloop invariant i4: x == (i - z);\nloop invariant i5: y == (j - 2 * z);\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant i >= j;\nloop invariant j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: z >= 0;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant z == i - j;\nloop invariant y == j - 2 * z;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\nloop invariant y == i - x;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\nloop invariant i4: y == j - 2 * z;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 39: unexpected token 'i'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: z == (i - j);\nloop invariant i4: i == (i0 + y);\nloop invariant i5: j == (j0 - 2 * y);\nloop invariant i6: y == (y0 - x);\nloop invariant i7: x == (x0 - i);\nloop invariant i8: z == (z0 + x);\nloop invariant i9: i == (i0 + (j0 - 2 * y));\nloop invariant i10: y == (y0 - (i0 + (j0 - 2 * y)));\nloop invariant i11: x == (x0 - (i0 + (j0 - 2 * y)));\nloop invariant i12: z == (z0 + (x0 - (i0 + (j0 - 2 * y))));\nloop invariant i13: 0 <= x <= i;\nloop invariant i14: 0 <= y <= j;\nloop invariant i15: 0 <= z <= i;\nloop invariant i16: z == (i - x);\nloop invariant i17: y == (j - (2 * (i - x)));\nloop invariant i18: (if i == j then y == -z);\nloop invariant i19: (if i != j then y != -z);\nloop invariant i20: i >= 0;\nloop invariant i21: i <= LARGE_INT;\nloop invariant i22: j >= 0;\nloop invariant i23: z >= 0;\nloop invariant i24: x >= 0;\nloop invariant i25: x <= i;\nloop invariant i26: y >= -2 * z;\nloop invariant i27: y <= i;\nloop invariant i28: (i == j ==> y == -z);\nloop invariant i29: (i != j ==> y != -z);\nloop invariant i30: (i >= j ==> y >= -z);\nloop invariant i31: (i <= j ==> y <= -z);\nloop invariant i32: (i == j ==> x == 0);\nloop invariant i33: (i != j ==> x != 0);\nloop invariant i34: (x == 0 ==> y == -z);\nloop invariant i35: (x != 0 ==> y != -z);\nloop invariant i36: (y == -z ==> x == 0);\nloop invariant i37: (y != -z ==> x != 0);\nloop invariant i38: (y >= -z ==> x >= 0);\nloop invariant i39: (y <= -z ==> x <= 0);\nloop invariant i40: 1 <= i <= LARGE_INT;\nloop invariant i41: y >= -z;\nloop invariant i42: y <= 2 * j - 2 * z;\nloop invariant i43: x >= i - (j - 1) * (j - 1) / 2;\nloop invariant i44: y >= j - (j - 1) * (j - 1) / 2;\nloop invariant i45: y <= -2 * z;\nloop invariant i46: z <= (j - 1) * (j - 1) / 2;\nloop invariant i47: (i == j) ==> (y == -z);\nloop invariant i48: (unknown_int() >= 0) ==> (i >= 0);\nloop invariant i49: (unknown_int() <= LARGE_INT) ==> (i <= LARGE_INT);\nloop invariant i50: (unknown_int() >= 0) ==> (j >= 0);\nloop invariant i51: (unknown_int() <= LARGE_INT) ==> (j <= LARGE_INT);\nloop invariant i52: x >= 0 ==> x >= 0;\nloop invariant i53: x >= 0 ==> y >= 0;\nloop invariant i54: x >= 0 ==> z >= 0;\nloop invariant i55: x >= 0 ==> (y == j - 2 * x);\nloop invariant i56: x >= 0 ==> (z == i - x);\nloop invariant i57: x >= 0 ==> (i == j + 2 * x);\nloop invariant i58: y >= 0;\nloop invariant i59: i <= 1000000;\nloop invariant i60: y <= j;\nloop invariant i61: x == i - j;\nloop invariant i62: y == j - 2 * z;\nloop invariant i63: z <= j / 2;\nloop invariant i64: i == j ==> y == -z;\nloop invariant i65: 0 <= i <= LARGE_INT;\nloop invariant i66: 0 <= j;\nloop invariant i67: 0 <= j <= LARGE_INT;\nloop invariant i68: 0 <= y <= LARGE_INT;\nloop invariant i69: x == (i - z);\nloop invariant i70: y == (j - 2 * z);\nloop invariant i71: x <= y;\nloop invariant i72: 1 <= x <= i;\nloop invariant i73: z <= i;\nloop invariant i74: i >= j;\nloop invariant i75: j >= i;\nloop invariant i76: z == i - j;\nloop invariant i77: x >= y;\nloop invariant i78: y == i - x;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: 0 <= x <= i;\n\nloop invariant i15: 0 <= z <= i;\nloop invariant i16: z == (i - x);\nloop invariant i17: y == (j - (2 * (i - x)));\n\n\nloop invariant i20: i >= 0;\nloop invariant i21: i <= LARGE_INT;\nloop invariant i22: j >= 0;\nloop invariant i23: z >= 0;\nloop invariant i24: x >= 0;\nloop invariant i25: x <= i;\nloop invariant i26: y >= -2 * z;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i38: (y >= -z ==> x >= 0);\n\n\n\nloop invariant i42: y <= 2 * j - 2 * z;\n\n\n\n\n\n\n\n\n\nloop invariant i52: x >= 0 ==> x >= 0;\n\nloop invariant i54: x >= 0 ==> z >= 0;\n\nloop invariant i56: x >= 0 ==> (z == i - x);\n\n\nloop invariant i59: i <= 1000000;\nloop invariant i60: y <= j;\n\nloop invariant i62: y == j - 2 * z;\n\n\nloop invariant i65: 0 <= i <= LARGE_INT;\nloop invariant i66: 0 <= j;\n\n\nloop invariant i69: x == (i - z);\nloop invariant i70: y == (j - 2 * z);\n\n\nloop invariant i73: z <= i;\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c"
        ],
        "skipped": [],
        "total": 115,
        "success_count": 99,
        "failure_count": 16,
        "success_rate": 0.8608695652173913
    }
}