{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x >= w && y >= z;\nloop invariant x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant y <= z;\nloop invariant w == x;\nloop invariant y == z;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= z <= y <= 100000;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= x;\nloop invariant 0 <= y <= z;\nloop invariant w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= w <= 4*2^32 - 1;\nloop invariant 0 <= y <= z <= 4*2^32 - 1;\nloop invariant x == w || x + 1 == w;\nloop invariant y == z || y + 1 == z;\nloop invariant (unknown_uint() ==> (x == w && y == z));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= w;\nloop invariant w == x;\nloop invariant 0 <= y <= z;\nloop invariant y == z;\nloop invariant y >= 0 && z >= 0;\nloop invariant w >= 0 && x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 2^32 - 1;\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant 0 <= z <= 2^32 - 1;\nloop invariant w <= x;\nloop invariant y <= z;\nloop invariant x - w <= y - z;\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\n*/\n```",
            "```\n/*@\nloop invariant (z <= y <= w <= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= INT_MAX;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= z <= INT_MAX;\nloop invariant y <= z;\nloop invariant w <= x;\nloop invariant w == x || y == z;\nloop invariant w == x ==> y == z;\nloop invariant w == x ==> z == y;\nloop invariant w == x ==> w == x && y == z;\nloop invariant w == x ==> z == y ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x;\nloop invariant w == x && y == z ==> y == z;\nloop invariant w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> y == z;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant 0 <= y <= UINT_MAX;\nloop invariant w == x;\nloop invariant y == z;\nloop invariant unknown_uint() == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= w && y >= z;\nloop invariant x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\nloop invariant x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant x >= w && y >= z ==> x >= w && y >= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\nloop invariant i4: x >= w && y >= z ==> x >= w && y >= z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant y <= z;\nloop invariant w == x;\nloop invariant y == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: y <= z;\nloop invariant i4: w == x;\nloop invariant i5: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= y <= 100000;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\nloop invariant y < z;\nloop invariant w < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= x;\nloop invariant 0 <= y <= z;\nloop invariant w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\nloop invariant i3: w == x && y == z ==> w == x && y == z;\nloop invariant i4: w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i5: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i6: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i7: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i8: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i9: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i10: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i11: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i12: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i13: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i14: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i15: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i16: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= w <= 4*2^32 - 1;\nloop invariant 0 <= y <= z <= 4*2^32 - 1;\nloop invariant x == w || x + 1 == w;\nloop invariant y == z || y + 1 == z;\nloop invariant (unknown_uint() ==> (x == w && y == z));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= w;\nloop invariant w == x;\nloop invariant 0 <= y <= z;\nloop invariant y == z;\nloop invariant y >= 0 && z >= 0;\nloop invariant w >= 0 && x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= x <= w;\nloop invariant i2: w == x;\nloop invariant i3: 0 <= y <= z;\nloop invariant i4: y == z;\nloop invariant i5: y >= 0 && z >= 0;\nloop invariant i6: w >= 0 && x >= 0;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 2^32 - 1;\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant 0 <= z <= 2^32 - 1;\nloop invariant w <= x;\nloop invariant y <= z;\nloop invariant x - w <= y - z;\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\nloop invariant ((w == x) ==> (y == z));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n\nloop invariant i5: w <= x;\nloop invariant i6: y <= z;\nloop invariant i7: x - w <= y - z;\nloop invariant i8: ((w == x) ==> (y == z));\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant (z <= y <= w <= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= INT_MAX;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= z <= INT_MAX;\nloop invariant y <= z;\nloop invariant w <= x;\nloop invariant w == x || y == z;\nloop invariant w == x ==> y == z;\nloop invariant w == x ==> z == y;\nloop invariant w == x ==> w == x && y == z;\nloop invariant w == x ==> z == y ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x;\nloop invariant w == x && y == z ==> y == z;\nloop invariant w == x && y == z ==> w == x && y == z;\nloop invariant w == x && y == z ==> z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> y == z;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n\nloop invariant i5: y <= z;\n\nloop invariant i7: w == x || y == z;\nloop invariant i8: w == x ==> y == z;\nloop invariant i9: w == x ==> z == y;\nloop invariant i10: w == x ==> w == x && y == z;\nloop invariant i11: w == x ==> z == y ==> w == x && y == z;\nloop invariant i12: w == x && y == z ==> w == x;\nloop invariant i13: w == x && y == z ==> y == z;\nloop invariant i14: w == x && y == z ==> w == x && y == z;\nloop invariant i15: w == x && y == z ==> z == y;\nloop invariant i16: w == x && y == z ==> w == x && y == z && z == y;\nloop invariant i17: w == x && y == z ==> w == x && y == z && z == y ==> w == x;\nloop invariant i18: w == x && y == z ==> w == x && y == z && z == y ==> y == z;\nloop invariant i19: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z;\nloop invariant i20: w == x && y == z ==> w == x && y == z && z == y ==> z == y;\nloop invariant i21: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i22: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i23: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i24: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i25: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i26: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i27: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i28: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant 0 <= y <= UINT_MAX;\nloop invariant w == x;\nloop invariant y == z;\nloop invariant unknown_uint() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\nloop invariant i2: 0 <= y <= UINT_MAX;\nloop invariant i3: w == x;\nloop invariant i4: y == z;\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 49: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: x >= w && y >= z;\nloop invariant i2: x <= w + 1 && y <= z + 1;\nloop invariant i3: x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant i4: x >= w && y >= z ==> x >= w && y >= z;\nloop invariant i5: 0 <= x;\nloop invariant i6: 0 <= y;\nloop invariant i7: y <= z;\nloop invariant i8: w == x;\nloop invariant i9: y == z;\nloop invariant i10: 0 <= y <= 100000;\nloop invariant i11: x >= (1 + (y - 1) * y / 2);\nloop invariant i12: 0 <= z <= y <= 100000;\nloop invariant i13: w < x;\nloop invariant i14: y < z;\nloop invariant i15: 0 <= w <= x;\nloop invariant i16: 0 <= y <= z;\nloop invariant i17: w == x && y == z ==> w == x && y == z;\nloop invariant i18: w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i19: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i20: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i21: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i22: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i23: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i24: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i25: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i26: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i27: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i28: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i29: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i30: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i31: 0 <= x <= w <= 4*2^32 - 1;\nloop invariant i32: 0 <= y <= z <= 4*2^32 - 1;\nloop invariant i33: x == w || x + 1 == w;\nloop invariant i34: y == z || y + 1 == z;\nloop invariant i35: (unknown_uint() ==> (x == w && y == z));\nloop invariant i36: 0 <= x <= w;\nloop invariant i37: y >= 0 && z >= 0;\nloop invariant i38: w >= 0 && x >= 0;\nloop invariant i39: 0 <= w <= 2^32 - 1;\nloop invariant i40: 0 <= x <= 2^32 - 1;\nloop invariant i41: 0 <= y <= 2^32 - 1;\nloop invariant i42: 0 <= z <= 2^32 - 1;\nloop invariant i43: w <= x;\nloop invariant i44: x - w <= y - z;\nloop invariant i45: ((w == x) ==> (y == z));\nloop invariant i46: (z <= y <= w <= x);\nloop invariant i47: 0 <= w <= INT_MAX;\nloop invariant i48: 0 <= x <= INT_MAX;\nloop invariant i49: 0 <= y <= INT_MAX;\nloop invariant i50: 0 <= z <= INT_MAX;\nloop invariant i51: w == x || y == z;\nloop invariant i52: w == x ==> y == z;\nloop invariant i53: w == x ==> z == y;\nloop invariant i54: w == x ==> w == x && y == z;\nloop invariant i55: w == x ==> z == y ==> w == x && y == z;\nloop invariant i56: w == x && y == z ==> w == x;\nloop invariant i57: w == x && y == z ==> y == z;\nloop invariant i58: w == x && y == z ==> z == y;\nloop invariant i59: w == x && y == z ==> w == x && y == z && z == y;\nloop invariant i60: w == x && y == z ==> w == x && y == z && z == y ==> w == x;\nloop invariant i61: w == x && y == z ==> w == x && y == z && z == y ==> y == z;\nloop invariant i62: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z;\nloop invariant i63: w == x && y == z ==> w == x && y == z && z == y ==> z == y;\nloop invariant i64: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i65: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i66: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i67: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i68: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i69: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i70: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i71: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i72: 0 <= x <= UINT_MAX;\nloop invariant i73: 0 <= y <= UINT_MAX;\nloop invariant i74: unknown_uint() == 0;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: x >= w && y >= z;\nloop invariant i2: x <= w + 1 && y <= z + 1;\nloop invariant i3: x >= w && y >= z ==> x <= w + 1 && y <= z + 1;\nloop invariant i4: x >= w && y >= z ==> x >= w && y >= z;\nloop invariant i5: 0 <= x;\nloop invariant i6: 0 <= y;\nloop invariant i7: y <= z;\nloop invariant i8: w == x;\nloop invariant i9: y == z;\n\n\n\n\n\nloop invariant i15: 0 <= w <= x;\nloop invariant i16: 0 <= y <= z;\nloop invariant i17: w == x && y == z ==> w == x && y == z;\nloop invariant i18: w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i19: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i20: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i21: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i22: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i23: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i24: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i25: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i26: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i27: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i28: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i29: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\nloop invariant i30: w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z ==> w == x && y == z;\n\n\nloop invariant i33: x == w || x + 1 == w;\nloop invariant i34: y == z || y + 1 == z;\n\nloop invariant i36: 0 <= x <= w;\nloop invariant i37: y >= 0 && z >= 0;\nloop invariant i38: w >= 0 && x >= 0;\n\n\n\n\nloop invariant i43: w <= x;\nloop invariant i44: x - w <= y - z;\nloop invariant i45: ((w == x) ==> (y == z));\n\n\n\n\n\nloop invariant i51: w == x || y == z;\nloop invariant i52: w == x ==> y == z;\nloop invariant i53: w == x ==> z == y;\nloop invariant i54: w == x ==> w == x && y == z;\nloop invariant i55: w == x ==> z == y ==> w == x && y == z;\nloop invariant i56: w == x && y == z ==> w == x;\nloop invariant i57: w == x && y == z ==> y == z;\nloop invariant i58: w == x && y == z ==> z == y;\nloop invariant i59: w == x && y == z ==> w == x && y == z && z == y;\nloop invariant i60: w == x && y == z ==> w == x && y == z && z == y ==> w == x;\nloop invariant i61: w == x && y == z ==> w == x && y == z && z == y ==> y == z;\nloop invariant i62: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z;\nloop invariant i63: w == x && y == z ==> w == x && y == z && z == y ==> z == y;\nloop invariant i64: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i65: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i66: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i67: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i68: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i69: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i70: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i71: w == x && y == z ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y ==> w == x && y == z && z == y;\nloop invariant i72: 0 <= x <= UINT_MAX;\nloop invariant i73: 0 <= y <= UINT_MAX;\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 100,
        "success_count": 88,
        "failure_count": 12,
        "success_rate": 0.88
    }
}