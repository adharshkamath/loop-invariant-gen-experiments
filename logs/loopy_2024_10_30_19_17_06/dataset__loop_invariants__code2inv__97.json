{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/97.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= 2 * x;\nloop invariant i <= x;\nloop invariant if (y == 1) then i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= i * y;\nloop invariant i * y <= j <= (i + 1) * y;\nloop invariant i * y <= j <= x * y;\nloop invariant (y == 1) ==> (i == j);\nloop invariant (y != 1) ==> (i < j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 1 <= j <= y * x;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y);\nloop invariant i <= j;\nloop invariant j == (i * y);\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j <= ((x * (x + 1)) / 2);\nloop invariant (y == 1) ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = 2 * i;\nloop invariant y = 1 ==> i = j;\nloop invariant y != 1 ==> j <= 2 * x;\nloop invariant y != 1 ==> i <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y * i;\nloop invariant y == 1 ==> i == j;\nloop invariant y != 1 ==> i <= j;\nloop invariant y != 1 ==> j <= (y * (x + 1)) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= 2*x;\nloop invariant y == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y);\nloop invariant j == (y * i);\nloop invariant i <= x;\nloop invariant y == 2;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j ==> (i == x => i == j);\nloop invariant y == 1 ==> i == j ==> (i == x ==> i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= (2 * i);\nloop invariant i >= 0;\nloop invariant x >= i;\nloop invariant y == 1 ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j;\nloop invariant 0 <= i <= x;\nloop invariant y >= 1;\nloop invariant (y == 1) ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y*x;\nloop invariant y >= 1;\nloop invariant y == j/i;\nloop invariant y == 2 ==> j == 2*i;\nloop invariant y == 1 ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y);\nloop invariant y == 1 ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant i <= j;\nloop invariant i <= (x + j);\nloop invariant i <= (x + y);\nloop invariant i <= (2 * x);\nloop invariant i <= (2 * (x + j));\nloop invariant i <= (2 * (2 * x));\nloop invariant i <= (2 * (2 * (x + j)));\nloop invariant i <= (2 * (2 * (2 * x)));\nloop invariant i <= (2 * (2 * (2 * (x + j))));\nloop invariant i <= (2 * (2 * (2 * (2 * x))));\nloop invariant i <= (2 * (2 * (2 * (2 * (x + j)))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * x)))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (x + j))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * x))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * (y - 1) / 2);\nloop invariant i == j ==> y == 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2 * x;\nloop invariant i <= x;\nloop invariant if (y == 1) then i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant j <= (x * y);\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y >= 1;\nloop invariant i4: i >= 0;\n\nloop invariant i6: j >= 0;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= i * y;\nloop invariant i * y <= j <= (i + 1) * y;\nloop invariant i * y <= j <= x * y;\nloop invariant (y == 1) ==> (i == j);\nloop invariant (y != 1) ==> (i < j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: j >= i * y;\nloop invariant i3: i * y <= j <= (i + 1) * y;\n\nloop invariant i5: (y == 1) ==> (i == j);\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 1 <= j <= y * x;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y == 1 ==> i == j;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y);\nloop invariant i <= j;\nloop invariant j == (i * y);\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j <= ((x * (x + 1)) / 2);\nloop invariant (y == 1) ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\nloop invariant i4: j == (i * y);\n\nloop invariant i6: y >= 0;\nloop invariant i7: i >= 0;\n\nloop invariant i9: (y == 1) ==> (i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = 2 * i;\nloop invariant y = 1 ==> i = j;\nloop invariant y != 1 ==> j <= 2 * x;\nloop invariant y != 1 ==> i <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y * i;\nloop invariant y == 1 ==> i == j;\nloop invariant y != 1 ==> i <= j;\nloop invariant y != 1 ==> j <= (y * (x + 1)) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\nloop invariant y == 1 ==> i == (x + 1) / 2;\nloop invariant y == 1 ==> j == (x + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y == 1 ==> i == j;\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= 2*x;\nloop invariant y == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y);\nloop invariant j == (y * i);\nloop invariant i <= x;\nloop invariant y == 2;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i == j ==> (i == x => i == j);\nloop invariant y == 1 ==> i == j ==> (i == x ==> i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: j == (y * i);\n\nloop invariant i5: y == 2;\nloop invariant i6: y == 1 ==> i == j;\n\nloop invariant i8: y == 1 ==> i == j ==> (i == x ==> i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= (2 * i);\nloop invariant i >= 0;\nloop invariant x >= i;\nloop invariant y == 1 ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: i >= 0;\n\nloop invariant i4: y == 1 ==> (i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j;\nloop invariant 0 <= i <= x;\nloop invariant y >= 1;\nloop invariant (y == 1) ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: 0 <= j;\n\nloop invariant i3: y >= 1;\nloop invariant i4: (y == 1) ==> (i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y*x;\nloop invariant y >= 1;\nloop invariant y == j/i;\nloop invariant y == 2 ==> j == 2*i;\nloop invariant y == 1 ==> i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y >= 1;\n\nloop invariant i5: y == 2 ==> j == 2*i;\nloop invariant i6: y == 1 ==> i == j;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y);\nloop invariant y == 1 ==> i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y == 1 ==> i == j;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant y >= 1;\nloop invariant i <= x;\nloop invariant i <= j;\nloop invariant i <= (x + j);\nloop invariant i <= (x + y);\nloop invariant i <= (2 * x);\nloop invariant i <= (2 * (x + j));\nloop invariant i <= (2 * (2 * x));\nloop invariant i <= (2 * (2 * (x + j)));\nloop invariant i <= (2 * (2 * (2 * x)));\nloop invariant i <= (2 * (2 * (2 * (x + j))));\nloop invariant i <= (2 * (2 * (2 * (2 * x))));\nloop invariant i <= (2 * (2 * (2 * (2 * (x + j)))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * x)))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (x + j))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * x))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))))))))));\nloop invariant i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))))));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: j >= 0;\nloop invariant i2: i >= 0;\nloop invariant i3: y >= 1;\n\nloop invariant i5: i <= j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * (y - 1) / 2);\nloop invariant i == j ==> y == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: 0 <= j <= 2 * x;\nloop invariant i2: i <= x;\nloop invariant i3: if (y == 1) then i == j;\nloop invariant i4: 0 <= i <= x;\nloop invariant i5: 0 <= j <= (x * y);\nloop invariant i6: y >= 1;\nloop invariant i7: i >= 0;\nloop invariant i8: x >= 0;\nloop invariant i9: j >= 0;\nloop invariant i10: j <= (x * y);\nloop invariant i11: j >= i * y;\nloop invariant i12: i * y <= j <= (i + 1) * y;\nloop invariant i13: i * y <= j <= x * y;\nloop invariant i14: (y == 1) ==> (i == j);\nloop invariant i15: (y != 1) ==> (i < j);\nloop invariant i16: 1 <= j <= y * x;\nloop invariant i17: y == 1 ==> i == j;\nloop invariant i18: i <= j;\nloop invariant i19: j == (i * y);\nloop invariant i20: x >= i;\nloop invariant i21: y >= 0;\nloop invariant i22: j <= ((x * (x + 1)) / 2);\nloop invariant i23: j = 2 * i;\nloop invariant i24: y = 1 ==> i = j;\nloop invariant i25: y != 1 ==> j <= 2 * x;\nloop invariant i26: y != 1 ==> i <= x;\nloop invariant i27: 0 <= j <= y * i;\nloop invariant i28: y != 1 ==> i <= j;\nloop invariant i29: y != 1 ==> j <= (y * (x + 1)) / 2;\nloop invariant i30: y == 1 ==> j == (x + 1) / 2;\nloop invariant i31: y == 1 ==> i == (x + 1) / 2;\nloop invariant i32: 0 <= j <= 2*x;\nloop invariant i33: y == 1;\nloop invariant i34: j == (y * i);\nloop invariant i35: y == 2;\nloop invariant i36: y == 1 ==> i == j ==> (i == x => i == j);\nloop invariant i37: y == 1 ==> i == j ==> (i == x ==> i == j);\nloop invariant i38: 0 <= j <= (2 * i);\nloop invariant i39: y == 1 ==> (i == j);\nloop invariant i40: 0 <= j;\nloop invariant i41: 0 <= j <= y*x;\nloop invariant i42: y == j/i;\nloop invariant i43: y == 2 ==> j == 2*i;\nloop invariant i44: i <= (x + j);\nloop invariant i45: i <= (x + y);\nloop invariant i46: i <= (2 * x);\nloop invariant i47: i <= (2 * (x + j));\nloop invariant i48: i <= (2 * (2 * x));\nloop invariant i49: i <= (2 * (2 * (x + j)));\nloop invariant i50: i <= (2 * (2 * (2 * x)));\nloop invariant i51: i <= (2 * (2 * (2 * (x + j))));\nloop invariant i52: i <= (2 * (2 * (2 * (2 * x))));\nloop invariant i53: i <= (2 * (2 * (2 * (2 * (x + j)))));\nloop invariant i54: i <= (2 * (2 * (2 * (2 * (2 * x)))));\nloop invariant i55: i <= (2 * (2 * (2 * (2 * (2 * (x + j))))));\nloop invariant i56: i <= (2 * (2 * (2 * (2 * (2 * (2 * x))))));\nloop invariant i57: i <= (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))));\nloop invariant i58: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))));\nloop invariant i59: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))));\nloop invariant i60: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))));\nloop invariant i61: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))))));\nloop invariant i62: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))));\nloop invariant i63: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))));\nloop invariant i64: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))))));\nloop invariant i65: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j)))))))))));\nloop invariant i66: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))))));\nloop invariant i67: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))));\nloop invariant i68: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x)))))))))))));\nloop invariant i69: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))));\nloop invariant i70: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * x))))))))))))));\nloop invariant i71: i <= (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (x + j))))))))))))))));\nloop invariant i72: 0 <= j <= (x * (y - 1) / 2);\nloop invariant i73: i == j ==> y == 1;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 32,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: y >= 1;\nloop invariant i7: i >= 0;\n\nloop invariant i9: j >= 0;\n\nloop invariant i11: j >= i * y;\nloop invariant i12: i * y <= j <= (i + 1) * y;\n\nloop invariant i14: (y == 1) ==> (i == j);\n\n\nloop invariant i17: y == 1 ==> i == j;\nloop invariant i18: i <= j;\nloop invariant i19: j == (i * y);\n\nloop invariant i21: y >= 0;\n\n\n\n\n\nloop invariant i27: 0 <= j <= y * i;\nloop invariant i28: y != 1 ==> i <= j;\n\nloop invariant i30: y == 1 ==> j == (x + 1) / 2;\nloop invariant i31: y == 1 ==> i == (x + 1) / 2;\n\n\nloop invariant i34: j == (y * i);\nloop invariant i35: y == 2;\n\nloop invariant i37: y == 1 ==> i == j ==> (i == x ==> i == j);\nloop invariant i38: 0 <= j <= (2 * i);\nloop invariant i39: y == 1 ==> (i == j);\nloop invariant i40: 0 <= j;\n\n\nloop invariant i43: y == 2 ==> j == 2*i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 83,
        "success_count": 71,
        "failure_count": 12,
        "success_rate": 0.8554216867469879
    }
}