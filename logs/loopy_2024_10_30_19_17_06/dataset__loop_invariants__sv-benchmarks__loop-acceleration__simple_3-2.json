{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant x % 2 = 0;\nloop invariant x >= 2 * (N - x) / 2;\nloop invariant x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant x % 2 == 1 ==> (x + 2) % 2 == 1;\nloop invariant x % 2 == 0 ==> x - 2 < N;\nloop invariant x % 2 == 1 ==> x - 2 < N;\nloop invariant N % 2 == 0 ==> N % 2 == 0;\nloop invariant N % 2 == 1 ==> N % 2 == 1;\nloop invariant N % 2 == 0 ==> (N - 2) % 2 == 0;\nloop invariant N % 2 == 1 ==> (N - 2) % 2 == 1;\nloop invariant N % 2 == 0 ==> (N - 2) < N;\nloop invariant N % 2 == 1 ==> (N - 2) < N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * N ==> x == N;\nloop invariant x < 2 * N ==> x >= 0;\nloop invariant x >= N ==> x % 2 == 0;\nloop invariant x < N ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * (x / 2);\nloop invariant x <= 2 * (x / 2 + 1);\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant 1 <= N <= 65535;\nloop invariant N % 2 == 0;\nloop invariant N >= 2 * (N / 2);\nloop invariant N <= 2 * (N / 2 + 1);\nloop invariant N % 2 ==> N % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant N % 2 ==> N % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant (x % 2) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N + 1;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= N <= 65535;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x >= N || x < N;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= N * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(x % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(x % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(x % 2);\nloop invariant x >= 2;\nloop invariant !(N % 2) ==> N >= 2;\nloop invariant !(N % 2) ==> x <= N;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant x % 2 = 0;\nloop invariant x >= 2 * (N - x) / 2;\nloop invariant x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\n\n\nloop invariant i4: x <= 2 * (N + x) / 2;\nloop invariant i5: x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i6: x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i7: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i8: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i9: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i10: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i11: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i12: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i13: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i14: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i15: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i16: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i17: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant x % 2 == 1 ==> (x + 2) % 2 == 1;\nloop invariant x % 2 == 0 ==> x - 2 < N;\nloop invariant x % 2 == 1 ==> x - 2 < N;\nloop invariant N % 2 == 0 ==> N % 2 == 0;\nloop invariant N % 2 == 1 ==> N % 2 == 1;\nloop invariant N % 2 == 0 ==> (N - 2) % 2 == 0;\nloop invariant N % 2 == 1 ==> (N - 2) % 2 == 1;\nloop invariant N % 2 == 0 ==> (N - 2) < N;\nloop invariant N % 2 == 1 ==> (N - 2) < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i3: x % 2 == 1 ==> (x + 2) % 2 == 1;\nloop invariant i4: x % 2 == 0 ==> x - 2 < N;\nloop invariant i5: x % 2 == 1 ==> x - 2 < N;\nloop invariant i6: N % 2 == 0 ==> N % 2 == 0;\nloop invariant i7: N % 2 == 1 ==> N % 2 == 1;\nloop invariant i8: N % 2 == 0 ==> (N - 2) % 2 == 0;\n\nloop invariant i10: N % 2 == 0 ==> (N - 2) < N;\nloop invariant i11: N % 2 == 1 ==> (N - 2) < N;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * N ==> x == N;\nloop invariant x < 2 * N ==> x >= 0;\nloop invariant x >= N ==> x % 2 == 0;\nloop invariant x < N ==> x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\n\nloop invariant i4: x < 2 * N ==> x >= 0;\nloop invariant i5: x >= N ==> x % 2 == 0;\nloop invariant i6: x < N ==> x % 2 == 0;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * (x / 2);\nloop invariant x <= 2 * (x / 2 + 1);\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant 1 <= N <= 65535;\nloop invariant N % 2 == 0;\nloop invariant N >= 2 * (N / 2);\nloop invariant N <= 2 * (N / 2 + 1);\nloop invariant N % 2 ==> N % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant N % 2 ==> N % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\nloop invariant x % 2 ==> x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\nloop invariant i3: x >= 2 * (x / 2);\nloop invariant i4: x <= 2 * (x / 2 + 1);\nloop invariant i5: x % 2 ==> x % 2 == 0;\n\n\nloop invariant i8: N >= 2 * (N / 2);\nloop invariant i9: N <= 2 * (N / 2 + 1);\n\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant (x % 2) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: (x % 2) == 0;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\n\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N + 1;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\nloop invariant x <= N;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\nloop invariant i3: x <= N + 1;\nloop invariant i4: x >= 0;\n\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= N <= 65535;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: 0 <= N <= 65535;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x % 2 == 0;\nloop invariant x >= N || x < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\nloop invariant i3: x >= N || x < N;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= N * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= N * 2;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(x % 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: !(x % 2);\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(x % 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: !(x % 2);\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(x % 2);\nloop invariant x >= 2;\nloop invariant !(N % 2) ==> N >= 2;\nloop invariant !(N % 2) ==> x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: !(x % 2);\n\n\nloop invariant i5: !(N % 2) ==> x <= N;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\nloop invariant i1: 1 <= x <= N;\nloop invariant i2: x % 2 = 0;\nloop invariant i3: x >= 2 * (N - x) / 2;\nloop invariant i4: x <= 2 * (N + x) / 2;\nloop invariant i5: x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i6: x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i7: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i8: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i9: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i10: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i11: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i12: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i13: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i14: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i15: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i16: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i17: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i18: 0 <= x <= N;\nloop invariant i19: x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i20: x % 2 == 1 ==> (x + 2) % 2 == 1;\nloop invariant i21: x % 2 == 0 ==> x - 2 < N;\nloop invariant i22: x % 2 == 1 ==> x - 2 < N;\nloop invariant i23: N % 2 == 0 ==> N % 2 == 0;\nloop invariant i24: N % 2 == 1 ==> N % 2 == 1;\nloop invariant i25: N % 2 == 0 ==> (N - 2) % 2 == 0;\nloop invariant i26: N % 2 == 1 ==> (N - 2) % 2 == 1;\nloop invariant i27: N % 2 == 0 ==> (N - 2) < N;\nloop invariant i28: N % 2 == 1 ==> (N - 2) < N;\nloop invariant i29: x % 2 == 0;\nloop invariant i30: x >= 2 * N ==> x == N;\nloop invariant i31: x < 2 * N ==> x >= 0;\nloop invariant i32: x >= N ==> x % 2 == 0;\nloop invariant i33: x < N ==> x % 2 == 0;\nloop invariant i34: x >= 2 * (x / 2);\nloop invariant i35: x <= 2 * (x / 2 + 1);\nloop invariant i36: x % 2 ==> x % 2 == 0;\nloop invariant i37: 1 <= N <= 65535;\nloop invariant i38: N % 2 == 0;\nloop invariant i39: N >= 2 * (N / 2);\nloop invariant i40: N <= 2 * (N / 2 + 1);\nloop invariant i41: N % 2 ==> N % 2 == 0;\nloop invariant i42: (x % 2) == 0;\nloop invariant i43: x <= N;\nloop invariant i44: x <= N + 1;\nloop invariant i45: x >= 0;\nloop invariant i46: 0 <= N <= 65535;\nloop invariant i47: x >= N || x < N;\nloop invariant i48: x <= N * 2;\nloop invariant i49: !(x % 2);\nloop invariant i50: x >= 2;\nloop invariant i51: !(N % 2) ==> N >= 2;\nloop invariant i52: !(N % 2) ==> x <= N;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\n\n\nloop invariant i4: x <= 2 * (N + x) / 2;\nloop invariant i5: x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i6: x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i7: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i8: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i9: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i10: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i11: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i12: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i13: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\nloop invariant i14: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i15: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2;\nloop invariant i16: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2;\nloop invariant i17: x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2 ==> x <= 2 * (N + x) / 2 ==> x % 2 ==> x >= 2 * (N - x) / 2;\n\nloop invariant i19: x % 2 == 0 ==> (x + 2) % 2 == 0;\nloop invariant i20: x % 2 == 1 ==> (x + 2) % 2 == 1;\nloop invariant i21: x % 2 == 0 ==> x - 2 < N;\nloop invariant i22: x % 2 == 1 ==> x - 2 < N;\nloop invariant i23: N % 2 == 0 ==> N % 2 == 0;\nloop invariant i24: N % 2 == 1 ==> N % 2 == 1;\nloop invariant i25: N % 2 == 0 ==> (N - 2) % 2 == 0;\n\nloop invariant i27: N % 2 == 0 ==> (N - 2) < N;\nloop invariant i28: N % 2 == 1 ==> (N - 2) < N;\nloop invariant i29: x % 2 == 0;\n\nloop invariant i31: x < 2 * N ==> x >= 0;\nloop invariant i32: x >= N ==> x % 2 == 0;\nloop invariant i33: x < N ==> x % 2 == 0;\nloop invariant i34: x >= 2 * (x / 2);\nloop invariant i35: x <= 2 * (x / 2 + 1);\nloop invariant i36: x % 2 ==> x % 2 == 0;\n\n\nloop invariant i39: N >= 2 * (N / 2);\nloop invariant i40: N <= 2 * (N / 2 + 1);\n\nloop invariant i42: (x % 2) == 0;\n\nloop invariant i44: x <= N + 1;\nloop invariant i45: x >= 0;\nloop invariant i46: 0 <= N <= 65535;\nloop invariant i47: x >= N || x < N;\nloop invariant i48: x <= N * 2;\nloop invariant i49: !(x % 2);\n\n\nloop invariant i52: !(N % 2) ==> x <= N;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 92,
        "success_count": 80,
        "failure_count": 12,
        "success_rate": 0.8695652173913043
    }
}