{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant b <= cnt <= b;\nloop invariant 0 <= res <= 1000000 + b;\nloop invariant 0 <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res - a <= b - cnt;\nloop invariant res - a == b - cnt ==> res - a + cnt == b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + cnt;\nloop invariant a + b <= a + cnt + b;\nloop invariant res == a + cnt + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res == a + (b - cnt);\nloop invariant a + (b - cnt) == a + b - cnt;\nloop invariant a + b - cnt == a + b - (b - cnt);\nloop invariant a + b - (b - cnt) == a + cnt;\nloop invariant a + cnt == res;\nloop invariant cnt == 0 ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + (b - cnt);\nloop invariant cnt == 0 ==> res == a + (b - cnt) ==> res == a + b - cnt;\nloop invariant cnt == 0 ==> res == a + b - cnt ==> res == a + b - (b - cnt);\nloop invariant cnt == 0 ==> res == a + b - (b - cnt) ==> res == a + cnt;\nloop invariant cnt == 0 ==> res == a + cnt ==> res == res;\nloop invariant cnt == 0 ==> res == res ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant cnt >= 0;\nloop invariant a <= res <= a + b;\nloop invariant res >= a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 1000000;\nloop invariant 0 <= b <= 1000000;\nloop invariant res == a + cnt;\nloop invariant cnt >= 0;\nloop invariant res <= a + 1000000;\nloop invariant cnt <= b;\nloop invariant res <= a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res == a + cnt;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant 0 <= res <= a + b;\nloop invariant a + b <= res + cnt;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res == a + cnt;\nloop invariant a <= a;\nloop invariant b <= b;\nloop invariant cnt >= 0;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant cnt <= b;\nloop invariant res == a + (b - cnt);\nloop invariant res == a + (b - (b - cnt));\nloop invariant res == a + cnt;\nloop invariant res == a + (b - (b - (b - cnt)));\nloop invariant res == a + (b - (b - (b - (b - cnt))));\nloop invariant res == a + (b - (b - (b - (b - (b - cnt)))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - cnt))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - cnt)))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))))))))))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant c <= a + b;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant a <= res + cnt <= a + b;\nloop invariant res <= a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant 0 <= a <= 1000000;\nloop invariant 0 <= b <= 1000000;\nloop invariant cnt >= 0 ==> res == a + (b - cnt);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant b <= cnt <= b;\nloop invariant 0 <= res <= 1000000 + b;\nloop invariant 0 <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\nloop invariant a <= res - cnt <= 1000000;\nloop invariant a <= res <= 1000000 + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\nloop invariant i2: res == a + b - cnt;\n\n\n\n\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res - a <= b - cnt;\nloop invariant res - a == b - cnt ==> res - a + cnt == b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: a <= res <= a + b;\nloop invariant i3: res - a <= b - cnt;\nloop invariant i4: res - a == b - cnt ==> res - a + cnt == b;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + cnt;\nloop invariant a + b <= a + cnt + b;\nloop invariant res == a + cnt + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\n\nloop invariant i3: a + b <= a + cnt + b;\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res == a + (b - cnt);\nloop invariant a + (b - cnt) == a + b - cnt;\nloop invariant a + b - cnt == a + b - (b - cnt);\nloop invariant a + b - (b - cnt) == a + cnt;\nloop invariant a + cnt == res;\nloop invariant cnt == 0 ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + (b - cnt);\nloop invariant cnt == 0 ==> res == a + (b - cnt) ==> res == a + b - cnt;\nloop invariant cnt == 0 ==> res == a + b - cnt ==> res == a + b - (b - cnt);\nloop invariant cnt == 0 ==> res == a + b - (b - cnt) ==> res == a + cnt;\nloop invariant cnt == 0 ==> res == a + cnt ==> res == res;\nloop invariant cnt == 0 ==> res == res ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: a <= res <= a + b;\nloop invariant i3: res == a + (b - cnt);\nloop invariant i4: a + (b - cnt) == a + b - cnt;\n\nloop invariant i6: a + b - (b - cnt) == a + cnt;\n\nloop invariant i8: cnt == 0 ==> res == a + b;\nloop invariant i9: cnt == 0 ==> res == a + b ==> res == a + (b - cnt);\nloop invariant i10: cnt == 0 ==> res == a + (b - cnt) ==> res == a + b - cnt;\n\nloop invariant i12: cnt == 0 ==> res == a + b - (b - cnt) ==> res == a + cnt;\nloop invariant i13: cnt == 0 ==> res == a + cnt ==> res == res;\nloop invariant i14: cnt == 0 ==> res == res ==> res == a + b;\nloop invariant i15: cnt == 0 ==> res == a + b ==> res == a + b;\nloop invariant i16: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i17: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i18: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i19: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i20: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i21: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i22: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i23: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i24: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i25: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i26: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i27: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant cnt >= 0;\nloop invariant a <= res <= a + b;\nloop invariant res >= a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: cnt >= 0;\n\nloop invariant i4: res >= a;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 1000000;\nloop invariant 0 <= b <= 1000000;\nloop invariant res == a + cnt;\nloop invariant cnt >= 0;\nloop invariant res <= a + 1000000;\nloop invariant cnt <= b;\nloop invariant res <= a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\nloop invariant i2: 0 <= b <= 1000000;\n\nloop invariant i4: cnt >= 0;\n\nloop invariant i6: cnt <= b;\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res == a + cnt;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\n\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant 0 <= res <= a + b;\nloop invariant a + b <= res + cnt;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\n\nloop invariant i3: a + b <= res + cnt;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant res == a + cnt;\nloop invariant a <= a;\nloop invariant b <= b;\nloop invariant cnt >= 0;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant cnt <= b;\nloop invariant res == a + (b - cnt);\nloop invariant res == a + (b - (b - cnt));\nloop invariant res == a + cnt;\nloop invariant res == a + (b - (b - (b - cnt)));\nloop invariant res == a + (b - (b - (b - (b - cnt))));\nloop invariant res == a + (b - (b - (b - (b - (b - cnt)))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - cnt))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - cnt)))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))))));\nloop invariant res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))))))))))));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: a <= res <= a + b;\n\nloop invariant i4: a <= a;\nloop invariant i5: b <= b;\nloop invariant i6: cnt >= 0;\nloop invariant i7: res >= a;\nloop invariant i8: res <= a + b;\nloop invariant i9: cnt <= b;\nloop invariant i10: res == a + (b - cnt);\n\nloop invariant i12: res == a + (b - (b - (b - cnt)));\n\nloop invariant i14: res == a + (b - (b - (b - (b - (b - cnt)))));\n\nloop invariant i16: res == a + (b - (b - (b - (b - (b - (b - (b - cnt)))))));\n\nloop invariant i18: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))));\n\nloop invariant i20: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))));\n\nloop invariant i22: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))));\n\nloop invariant i24: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))));\n\nloop invariant i26: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))))));\n\n\n\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\nloop invariant a <= a + cnt <= a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\n\nloop invariant i3: a <= a + cnt <= a + b;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant c <= a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\n\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant a <= res + cnt <= a + b;\nloop invariant res <= a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: a <= res <= a + b;\nloop invariant i3: a <= res + cnt <= a + b;\nloop invariant i4: res <= a + b;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant a <= res <= a + b;\nloop invariant 0 <= a <= 1000000;\nloop invariant 0 <= b <= 1000000;\nloop invariant cnt >= 0 ==> res == a + (b - cnt);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: a <= res <= a + b;\n\nloop invariant i4: 0 <= b <= 1000000;\nloop invariant i5: cnt >= 0 ==> res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\nloop invariant res == a + b - cnt;\nloop invariant res >= a;\nloop invariant res <= a + b;\nloop invariant a <= res;\nloop invariant res <= a + b;\nloop invariant 0 <= cnt <= b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: res == a + b - cnt;\nloop invariant i3: res >= a;\nloop invariant i4: res <= a + b;\nloop invariant i5: a <= res;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 81: unexpected token ';'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 1 <= cnt <= b;\nloop invariant i2: res == a + b - cnt;\nloop invariant i3: a <= res <= 1000000 + b;\nloop invariant i4: a <= res - cnt <= 1000000;\nloop invariant i5: b <= cnt <= b;\nloop invariant i6: 0 <= res <= 1000000 + b;\nloop invariant i7: 0 <= res - cnt <= 1000000;\nloop invariant i8: 0 <= cnt <= b;\nloop invariant i9: a <= res <= a + b;\nloop invariant i10: res - a <= b - cnt;\nloop invariant i11: res - a == b - cnt ==> res - a + cnt == b;\nloop invariant i12: a <= res <= a + cnt;\nloop invariant i13: a + b <= a + cnt + b;\nloop invariant i14: res == a + cnt + b;\nloop invariant i15: res == a + (b - cnt);\nloop invariant i16: a + (b - cnt) == a + b - cnt;\nloop invariant i17: a + b - cnt == a + b - (b - cnt);\nloop invariant i18: a + b - (b - cnt) == a + cnt;\nloop invariant i19: a + cnt == res;\nloop invariant i20: cnt == 0 ==> res == a + b;\nloop invariant i21: cnt == 0 ==> res == a + b ==> res == a + (b - cnt);\nloop invariant i22: cnt == 0 ==> res == a + (b - cnt) ==> res == a + b - cnt;\nloop invariant i23: cnt == 0 ==> res == a + b - cnt ==> res == a + b - (b - cnt);\nloop invariant i24: cnt == 0 ==> res == a + b - (b - cnt) ==> res == a + cnt;\nloop invariant i25: cnt == 0 ==> res == a + cnt ==> res == res;\nloop invariant i26: cnt == 0 ==> res == res ==> res == a + b;\nloop invariant i27: cnt == 0 ==> res == a + b ==> res == a + b;\nloop invariant i28: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i29: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i30: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i31: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i32: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i33: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i34: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i35: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i36: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i37: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i38: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i39: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i40: cnt >= 0;\nloop invariant i41: res >= a;\nloop invariant i42: 0 <= a <= 1000000;\nloop invariant i43: 0 <= b <= 1000000;\nloop invariant i44: res == a + cnt;\nloop invariant i45: res <= a + 1000000;\nloop invariant i46: cnt <= b;\nloop invariant i47: res <= a + b;\nloop invariant i48: 0 <= res <= a + b;\nloop invariant i49: a + b <= res + cnt;\nloop invariant i50: a <= a;\nloop invariant i51: b <= b;\nloop invariant i52: res == a + (b - (b - cnt));\nloop invariant i53: res == a + (b - (b - (b - cnt)));\nloop invariant i54: res == a + (b - (b - (b - (b - cnt))));\nloop invariant i55: res == a + (b - (b - (b - (b - (b - cnt)))));\nloop invariant i56: res == a + (b - (b - (b - (b - (b - (b - cnt))))));\nloop invariant i57: res == a + (b - (b - (b - (b - (b - (b - (b - cnt)))))));\nloop invariant i58: res == a + (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))));\nloop invariant i59: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))));\nloop invariant i60: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))));\nloop invariant i61: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))));\nloop invariant i62: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))));\nloop invariant i63: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))));\nloop invariant i64: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))));\nloop invariant i65: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))));\nloop invariant i66: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))));\nloop invariant i67: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))))));\nloop invariant i68: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))));\nloop invariant i69: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))))));\nloop invariant i70: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt))))))))))))))))))))));\nloop invariant i71: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))))))))))));\nloop invariant i72: a <= a + cnt <= a + b;\nloop invariant i73: c <= a + b;\nloop invariant i74: a <= res + cnt <= a + b;\nloop invariant i75: cnt >= 0 ==> res == a + (b - cnt);\nloop invariant i76: a <= res;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    /*@\n\nloop invariant i2: res == a + b - cnt;\n\n\n\n\n\nloop invariant i8: 0 <= cnt <= b;\nloop invariant i9: a <= res <= a + b;\nloop invariant i10: res - a <= b - cnt;\nloop invariant i11: res - a == b - cnt ==> res - a + cnt == b;\n\nloop invariant i13: a + b <= a + cnt + b;\n\nloop invariant i15: res == a + (b - cnt);\nloop invariant i16: a + (b - cnt) == a + b - cnt;\n\nloop invariant i18: a + b - (b - cnt) == a + cnt;\n\nloop invariant i20: cnt == 0 ==> res == a + b;\nloop invariant i21: cnt == 0 ==> res == a + b ==> res == a + (b - cnt);\nloop invariant i22: cnt == 0 ==> res == a + (b - cnt) ==> res == a + b - cnt;\n\nloop invariant i24: cnt == 0 ==> res == a + b - (b - cnt) ==> res == a + cnt;\nloop invariant i25: cnt == 0 ==> res == a + cnt ==> res == res;\nloop invariant i26: cnt == 0 ==> res == res ==> res == a + b;\nloop invariant i27: cnt == 0 ==> res == a + b ==> res == a + b;\nloop invariant i28: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i29: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i30: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i31: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i32: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i33: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i34: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i35: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i36: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i37: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i38: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i39: cnt == 0 ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b ==> res == a + b;\nloop invariant i40: cnt >= 0;\nloop invariant i41: res >= a;\n\nloop invariant i43: 0 <= b <= 1000000;\n\nloop invariant i45: res <= a + 1000000;\nloop invariant i46: cnt <= b;\nloop invariant i47: res <= a + b;\n\nloop invariant i49: a + b <= res + cnt;\nloop invariant i50: a <= a;\nloop invariant i51: b <= b;\n\nloop invariant i53: res == a + (b - (b - (b - cnt)));\n\nloop invariant i55: res == a + (b - (b - (b - (b - (b - cnt)))));\n\nloop invariant i57: res == a + (b - (b - (b - (b - (b - (b - (b - cnt)))))));\n\nloop invariant i59: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))));\n\nloop invariant i61: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))));\n\nloop invariant i63: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))));\n\nloop invariant i65: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))));\n\nloop invariant i67: res == a + (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - (b - cnt)))))))))))))))));\n\n\n\n\nloop invariant i72: a <= a + cnt <= a + b;\n\nloop invariant i74: a <= res + cnt <= a + b;\nloop invariant i75: cnt >= 0 ==> res == a + (b - cnt);\nloop invariant i76: a <= res;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c"
        ],
        "skipped": [],
        "total": 113,
        "success_count": 97,
        "failure_count": 16,
        "success_rate": 0.8584070796460177
    }
}