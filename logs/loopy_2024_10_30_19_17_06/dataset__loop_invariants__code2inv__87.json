{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/87.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= x; loop invariant lock == 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x <= 2*y;\nloop invariant x <= 3*y;\nloop invariant x <= 4*y;\nloop invariant x <= 5*y;\nloop invariant x <= 6*y;\nloop invariant x <= 7*y;\nloop invariant x <= 8*y;\nloop invariant x <= 9*y;\nloop invariant x <= 10*y;\nloop invariant x <= 11*y;\nloop invariant x <= 12*y;\nloop invariant x <= 13*y;\nloop invariant x <= 14*y;\nloop invariant x <= 15*y;\nloop invariant x <= 16*y;\nloop invariant x <= 17*y;\nloop invariant x <= 18*y;\nloop invariant x <= 19*y;\nloop invariant x <= 20*y;\nloop invariant x <= 21*y;\nloop invariant x <= 22*y;\nloop invariant x <= 23*y;\nloop invariant x <= 24*y;\nloop invariant x <= 25*y;\nloop invariant x <= 26*y;\nloop invariant x <= 27*y;\nloop invariant x <= 28*y;\nloop invariant x <= 29*y;\nloop invariant x <= 30*y;\nloop invariant x <= 31*y;\nloop invariant x <= 32*y;\nloop invariant x <= 33*y;\nloop invariant x <= 34*y;\nloop invariant x <= 35*y;\nloop invariant x <= 36*y;\nloop invariant x <= 37*y;\nloop invariant x <= 38*y;\nloop invariant x <= 39*y;\nloop invariant x <= 40*y;\nloop invariant x <= 41*y;\nloop invariant x <= 42*y;\nloop invariant x <= 43*y;\nloop invariant x <= 44*y;\nloop invariant x <= 45*y;\nloop invariant x <= 46*y;\nloop invariant x <= 47*y;\nloop invariant x <= 48*y;\nloop invariant x <= 49*y;\nloop invariant x <= 50*y;\nloop invariant x <= 51*y;\nloop invariant x <= 52*y;\nloop invariant x <= 53*y;\nloop invariant x <= 54*y;\nloop invariant x <= 55*y;\nloop invariant x <= 56*y;\nloop invariant x <= 57*y;\nloop invariant x <= 58*y;\nloop invariant x <= 59*y;\nloop invariant x <= 60*y;\nloop invariant x <= 61*y;\nloop invariant x <= 62*y;\nloop invariant x <= 63*y;\nloop invariant x <= 64*y;\nloop invariant x <= 65*y;\nloop invariant x <= 66*y;\nloop invariant x <= 67*y;\nloop invariant x <= 68*y;\nloop invariant x <= 69*y;\nloop invariant x <= 70*y;\nloop invariant x <= 71*y;\nloop invariant x <= 72*y;\nloop invariant x <= 73*y;\nloop invariant x <= 74*y;\nloop invariant x <= 75*y;\nloop invariant x <= 76*y;\nloop invariant x <= 77*y;\nloop invariant x <= 78*y;\nloop invariant x <= 79*y;\nloop invariant x <= 80*y;\nloop invariant x <= 81*y;\nloop invariant x <= 82*y;\nloop invariant x <= 83*y;\nloop invariant x <= 84*y;\nloop invariant x <= 85*y;\nloop invariant x <= 86*y;\nloop invariant x <= 87*y;\nloop invariant x <= 88*y;\nloop invariant x <= 89*y;\nloop invariant x <= 90*y;\nloop invariant x <= 91*y;\nloop invariant x <= 92*y;\nloop invariant x <= 93*y;\nloop invariant x <= 94*y;\nloop invariant x <= 95*y;\nloop invariant x <= 96*y;\nloop invariant x <= 97*y;\nloop invariant x <= 98*y;\nloop invariant x <= 99*y;\nloop invariant x <= 100*y;\nloop invariant x <= 101*y;\nloop invariant x <= 102*y;\nloop invariant x <= 103*y;\nloop invariant x <= 104*y;\nloop invariant x <= 105*y;\nloop invariant x <= 106*y;\nloop invariant x <= 107*y;\nloop invariant x <= 108*y;\nloop invariant x <= 109*y;\n*/\n```",
            "```\n/*@\nloop invariant ( x <= y ) ==> ( lock == 1 ) ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant x <= y + 1;\nloop invariant y <= 2 * (y + 1);\nloop invariant x <= y + 2;\nloop invariant y <= 3 * (y + 1);\nloop invariant x <= y + 3;\nloop invariant y <= 4 * (y + 1);\nloop invariant x <= y + 4;\nloop invariant y <= 5 * (y + 1);\nloop invariant x <= y + 5;\nloop invariant y <= 6 * (y + 1);\nloop invariant x <= y + 6;\nloop invariant y <= 7 * (y + 1);\nloop invariant x <= y + 7;\nloop invariant y <= 8 * (y + 1);\nloop invariant x <= y + 8;\nloop invariant y <= 9 * (y + 1);\nloop invariant x <= y + 9;\nloop invariant y <= 10 * (y + 1);\nloop invariant x <= y + 10;\nloop invariant y <= 11 * (y + 1);\nloop invariant x <= y + 11;\nloop invariant y <= 12 * (y + 1);\nloop invariant x <= y + 12;\nloop invariant y <= 13 * (y + 1);\nloop invariant x <= y + 13;\nloop invariant y <= 14 * (y + 1);\nloop invariant x <= y + 14;\nloop invariant y <= 15 * (y + 1);\nloop invariant x <= y + 15;\nloop invariant y <= 16 * (y + 1);\nloop invariant x <= y + 16;\nloop invariant y <= 17 * (y + 1);\nloop invariant x <= y + 17;\nloop invariant y <= 18 * (y + 1);\nloop invariant x <= y + 18;\nloop invariant y <= 19 * (y + 1);\nloop invariant x <= y + 19;\nloop invariant y <= 20 * (y + 1);\nloop invariant x <= y + 20;\nloop invariant y <= 21 * (y + 1);\nloop invariant x <= y + 21;\nloop invariant y <= 22 * (y + 1);\nloop invariant x <= y + 22;\nloop invariant y <= 23 * (y + 1);\nloop invariant x <= y + 23;\nloop invariant y <= 24 * (y + 1);\nloop invariant x <= y + 24;\nloop invariant y <= 25 * (y + 1);\nloop invariant x <= y + 25;\nloop invariant y <= 26 * (y + 1);\nloop invariant x <= y + 26;\nloop invariant y <= 27 * (y + 1);\nloop invariant x <= y + 27;\nloop invariant y <= 28 * (y + 1);\nloop invariant x <= y + 28;\nloop invariant y <= 29 * (y + 1);\nloop invariant x <= y + 29;\nloop invariant y <= 30 * (y + 1);\nloop invariant x <= y + 30;\nloop invariant y <= 31 * (y + 1);\nloop invariant x <= y + 31;\nloop invariant y <= 32 * (y + 1);\nloop invariant x <= y + 32;\nloop invariant y <= 33 * (y + 1);\nloop invariant x <= y + 33;\nloop invariant y <= 34 * (y + 1);\nloop invariant x <= y + 34;\nloop invariant y <= 35 * (y + 1);\nloop invariant x <= y + 35;\nloop invariant y <= 36 * (y + 1);\nloop invariant x <= y + 36;\nloop invariant y <= 37 * (y + 1);\nloop invariant x <= y + 37;\nloop invariant y <= 38 * (y + 1);\nloop invariant x <= y + 38;\nloop invariant y <= 39 * (y + 1);\nloop invariant x <= y + 39;\nloop invariant y <= 40 * (y + 1);\nloop invariant x <= y + 40;\nloop invariant y <= 41 * (y + 1);\nloop invariant x <= y + 41;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lock <= 2;\nloop invariant 1 <= x <= y;\nloop invariant y - 1 <= x <= y;\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant lock == 1 || (x == y && lock == 0);\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> x >= y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 1 ==> y >= x;\nloop invariant lock == 0 ==> y > x;\nloop invariant lock == 0 ==> y >= x;\nloop invariant lock == 1 ==> x >= y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 1 ==> y >= x;\nloop invariant lock == 0 ==> y > x;\nloop invariant lock == 0 ==> y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y;\nloop invariant 1 <= lock <= 1;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1 => x == y;\nloop invariant lock == 0 => x != y && x < y;\nloop invariant y == x + 1 => lock == 0;\nloop invariant y != x + 1 => lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x <= y;\nloop invariant if x = y then lock = 1 else lock = 0;\nloop invariant if x = y then lock = 1;\nloop invariant if x != y then lock = 0;\nloop invariant if x = y then lock = 1 ==> (x = y);\nloop invariant if x != y then lock = 0 ==> (x = y);\nloop invariant if x = y then lock = 1 ==> (lock = 1);\nloop invariant if x != y then lock = 0 ==> (lock = 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x; loop invariant lock == 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 109,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x <= 2*y;\nloop invariant x <= 3*y;\nloop invariant x <= 4*y;\nloop invariant x <= 5*y;\nloop invariant x <= 6*y;\nloop invariant x <= 7*y;\nloop invariant x <= 8*y;\nloop invariant x <= 9*y;\nloop invariant x <= 10*y;\nloop invariant x <= 11*y;\nloop invariant x <= 12*y;\nloop invariant x <= 13*y;\nloop invariant x <= 14*y;\nloop invariant x <= 15*y;\nloop invariant x <= 16*y;\nloop invariant x <= 17*y;\nloop invariant x <= 18*y;\nloop invariant x <= 19*y;\nloop invariant x <= 20*y;\nloop invariant x <= 21*y;\nloop invariant x <= 22*y;\nloop invariant x <= 23*y;\nloop invariant x <= 24*y;\nloop invariant x <= 25*y;\nloop invariant x <= 26*y;\nloop invariant x <= 27*y;\nloop invariant x <= 28*y;\nloop invariant x <= 29*y;\nloop invariant x <= 30*y;\nloop invariant x <= 31*y;\nloop invariant x <= 32*y;\nloop invariant x <= 33*y;\nloop invariant x <= 34*y;\nloop invariant x <= 35*y;\nloop invariant x <= 36*y;\nloop invariant x <= 37*y;\nloop invariant x <= 38*y;\nloop invariant x <= 39*y;\nloop invariant x <= 40*y;\nloop invariant x <= 41*y;\nloop invariant x <= 42*y;\nloop invariant x <= 43*y;\nloop invariant x <= 44*y;\nloop invariant x <= 45*y;\nloop invariant x <= 46*y;\nloop invariant x <= 47*y;\nloop invariant x <= 48*y;\nloop invariant x <= 49*y;\nloop invariant x <= 50*y;\nloop invariant x <= 51*y;\nloop invariant x <= 52*y;\nloop invariant x <= 53*y;\nloop invariant x <= 54*y;\nloop invariant x <= 55*y;\nloop invariant x <= 56*y;\nloop invariant x <= 57*y;\nloop invariant x <= 58*y;\nloop invariant x <= 59*y;\nloop invariant x <= 60*y;\nloop invariant x <= 61*y;\nloop invariant x <= 62*y;\nloop invariant x <= 63*y;\nloop invariant x <= 64*y;\nloop invariant x <= 65*y;\nloop invariant x <= 66*y;\nloop invariant x <= 67*y;\nloop invariant x <= 68*y;\nloop invariant x <= 69*y;\nloop invariant x <= 70*y;\nloop invariant x <= 71*y;\nloop invariant x <= 72*y;\nloop invariant x <= 73*y;\nloop invariant x <= 74*y;\nloop invariant x <= 75*y;\nloop invariant x <= 76*y;\nloop invariant x <= 77*y;\nloop invariant x <= 78*y;\nloop invariant x <= 79*y;\nloop invariant x <= 80*y;\nloop invariant x <= 81*y;\nloop invariant x <= 82*y;\nloop invariant x <= 83*y;\nloop invariant x <= 84*y;\nloop invariant x <= 85*y;\nloop invariant x <= 86*y;\nloop invariant x <= 87*y;\nloop invariant x <= 88*y;\nloop invariant x <= 89*y;\nloop invariant x <= 90*y;\nloop invariant x <= 91*y;\nloop invariant x <= 92*y;\nloop invariant x <= 93*y;\nloop invariant x <= 94*y;\nloop invariant x <= 95*y;\nloop invariant x <= 96*y;\nloop invariant x <= 97*y;\nloop invariant x <= 98*y;\nloop invariant x <= 99*y;\nloop invariant x <= 100*y;\nloop invariant x <= 101*y;\nloop invariant x <= 102*y;\nloop invariant x <= 103*y;\nloop invariant x <= 104*y;\nloop invariant x <= 105*y;\nloop invariant x <= 106*y;\nloop invariant x <= 107*y;\nloop invariant x <= 108*y;\nloop invariant x <= 109*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( x <= y ) ==> ( lock == 1 ) ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: ( x <= y ) ==> ( lock == 1 ) ;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 41,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant x <= y + 1;\nloop invariant y <= 2 * (y + 1);\nloop invariant x <= y + 2;\nloop invariant y <= 3 * (y + 1);\nloop invariant x <= y + 3;\nloop invariant y <= 4 * (y + 1);\nloop invariant x <= y + 4;\nloop invariant y <= 5 * (y + 1);\nloop invariant x <= y + 5;\nloop invariant y <= 6 * (y + 1);\nloop invariant x <= y + 6;\nloop invariant y <= 7 * (y + 1);\nloop invariant x <= y + 7;\nloop invariant y <= 8 * (y + 1);\nloop invariant x <= y + 8;\nloop invariant y <= 9 * (y + 1);\nloop invariant x <= y + 9;\nloop invariant y <= 10 * (y + 1);\nloop invariant x <= y + 10;\nloop invariant y <= 11 * (y + 1);\nloop invariant x <= y + 11;\nloop invariant y <= 12 * (y + 1);\nloop invariant x <= y + 12;\nloop invariant y <= 13 * (y + 1);\nloop invariant x <= y + 13;\nloop invariant y <= 14 * (y + 1);\nloop invariant x <= y + 14;\nloop invariant y <= 15 * (y + 1);\nloop invariant x <= y + 15;\nloop invariant y <= 16 * (y + 1);\nloop invariant x <= y + 16;\nloop invariant y <= 17 * (y + 1);\nloop invariant x <= y + 17;\nloop invariant y <= 18 * (y + 1);\nloop invariant x <= y + 18;\nloop invariant y <= 19 * (y + 1);\nloop invariant x <= y + 19;\nloop invariant y <= 20 * (y + 1);\nloop invariant x <= y + 20;\nloop invariant y <= 21 * (y + 1);\nloop invariant x <= y + 21;\nloop invariant y <= 22 * (y + 1);\nloop invariant x <= y + 22;\nloop invariant y <= 23 * (y + 1);\nloop invariant x <= y + 23;\nloop invariant y <= 24 * (y + 1);\nloop invariant x <= y + 24;\nloop invariant y <= 25 * (y + 1);\nloop invariant x <= y + 25;\nloop invariant y <= 26 * (y + 1);\nloop invariant x <= y + 26;\nloop invariant y <= 27 * (y + 1);\nloop invariant x <= y + 27;\nloop invariant y <= 28 * (y + 1);\nloop invariant x <= y + 28;\nloop invariant y <= 29 * (y + 1);\nloop invariant x <= y + 29;\nloop invariant y <= 30 * (y + 1);\nloop invariant x <= y + 30;\nloop invariant y <= 31 * (y + 1);\nloop invariant x <= y + 31;\nloop invariant y <= 32 * (y + 1);\nloop invariant x <= y + 32;\nloop invariant y <= 33 * (y + 1);\nloop invariant x <= y + 33;\nloop invariant y <= 34 * (y + 1);\nloop invariant x <= y + 34;\nloop invariant y <= 35 * (y + 1);\nloop invariant x <= y + 35;\nloop invariant y <= 36 * (y + 1);\nloop invariant x <= y + 36;\nloop invariant y <= 37 * (y + 1);\nloop invariant x <= y + 37;\nloop invariant y <= 38 * (y + 1);\nloop invariant x <= y + 38;\nloop invariant y <= 39 * (y + 1);\nloop invariant x <= y + 39;\nloop invariant y <= 40 * (y + 1);\nloop invariant x <= y + 40;\nloop invariant y <= 41 * (y + 1);\nloop invariant x <= y + 41;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\nloop invariant i3: lock == 1 ==> x == y;\nloop invariant i4: lock == 0 ==> x != y;\nloop invariant i5: x <= y + 1;\n\nloop invariant i7: x <= y + 2;\n\nloop invariant i9: x <= y + 3;\n\nloop invariant i11: x <= y + 4;\n\nloop invariant i13: x <= y + 5;\n\nloop invariant i15: x <= y + 6;\n\nloop invariant i17: x <= y + 7;\n\nloop invariant i19: x <= y + 8;\n\nloop invariant i21: x <= y + 9;\n\nloop invariant i23: x <= y + 10;\n\nloop invariant i25: x <= y + 11;\n\nloop invariant i27: x <= y + 12;\n\nloop invariant i29: x <= y + 13;\n\nloop invariant i31: x <= y + 14;\n\nloop invariant i33: x <= y + 15;\n\nloop invariant i35: x <= y + 16;\n\nloop invariant i37: x <= y + 17;\n\nloop invariant i39: x <= y + 18;\n\nloop invariant i41: x <= y + 19;\n\nloop invariant i43: x <= y + 20;\n\nloop invariant i45: x <= y + 21;\n\nloop invariant i47: x <= y + 22;\n\nloop invariant i49: x <= y + 23;\n\nloop invariant i51: x <= y + 24;\n\nloop invariant i53: x <= y + 25;\n\nloop invariant i55: x <= y + 26;\n\nloop invariant i57: x <= y + 27;\n\nloop invariant i59: x <= y + 28;\n\nloop invariant i61: x <= y + 29;\n\nloop invariant i63: x <= y + 30;\n\nloop invariant i65: x <= y + 31;\n\nloop invariant i67: x <= y + 32;\n\nloop invariant i69: x <= y + 33;\n\nloop invariant i71: x <= y + 34;\n\nloop invariant i73: x <= y + 35;\n\nloop invariant i75: x <= y + 36;\n\nloop invariant i77: x <= y + 37;\n\nloop invariant i79: x <= y + 38;\n\nloop invariant i81: x <= y + 39;\n\nloop invariant i83: x <= y + 40;\n\nloop invariant i85: x <= y + 41;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= lock <= 2;\nloop invariant 1 <= x <= y;\nloop invariant y - 1 <= x <= y;\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (x < y);\nloop invariant (lock == 1) ==> (y < x);\nloop invariant (lock == 0) ==> (y < x);\nloop invariant (lock == 1) ==> (x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\nloop invariant i3: y - 1 <= x <= y;\nloop invariant i4: (lock == 1) ==> (x == y);\nloop invariant i5: (lock == 0) ==> (x < y);\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant lock == 1 || (x == y && lock == 0);\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> x >= y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 1 ==> y >= x;\nloop invariant lock == 0 ==> y > x;\nloop invariant lock == 0 ==> y >= x;\nloop invariant lock == 1 ==> x >= y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x != y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 1 ==> y >= x;\nloop invariant lock == 0 ==> y > x;\nloop invariant lock == 0 ==> y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: lock == 1 ==> x >= y;\nloop invariant i2: lock == 1 ==> x == y;\nloop invariant i3: lock == 0 ==> x != y;\n\nloop invariant i5: lock == 1 ==> y >= x;\nloop invariant i6: lock == 0 ==> y > x;\nloop invariant i7: lock == 0 ==> y >= x;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y;\nloop invariant 1 <= lock <= 1;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\nloop invariant i3: 1 <= lock <= 1;\nloop invariant i4: lock == 1 ==> x == y;\nloop invariant i5: lock == 0 ==> x == y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1 => x == y;\nloop invariant lock == 0 => x != y && x < y;\nloop invariant y == x + 1 => lock == 0;\nloop invariant y != x + 1 => lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant x <= y;\nloop invariant if x = y then lock = 1 else lock = 0;\nloop invariant if x = y then lock = 1;\nloop invariant if x != y then lock = 0;\nloop invariant if x = y then lock = 1 ==> (x = y);\nloop invariant if x != y then lock = 0 ==> (x = y);\nloop invariant if x = y then lock = 1 ==> (lock = 1);\nloop invariant if x != y then lock = 0 ==> (lock = 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: x <= y;\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x == y;\nloop invariant lock == 1;\nloop invariant lock == 0;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\nloop invariant i3: x <= y;\nloop invariant i4: x == y;\nloop invariant i5: lock == 1;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant y < x;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\nloop invariant i2: x <= y;\nloop invariant i3: y <= x;\n\n\nloop invariant i6: x == y;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: 0 <= y <= x; loop invariant lock == 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 0 ==> lock == 0; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 0 ==> y == y + 1; loop invariant unknown() == 0 ==> x == y; loop invariant unknown() == 1 ==> lock == 1; loop invariant unknown() == 1 ==> x == y; loop invariant unknown() == 1 ==> y == y + 1;\nloop invariant i2: 0 <= y <= 100000;\nloop invariant i3: x >= (1 + (y - 1) * y / 2);\nloop invariant i4: 0 <= y;\nloop invariant i5: x >= y;\nloop invariant i6: lock == 1;\nloop invariant i7: y <= x;\nloop invariant i8: x <= 2*y;\nloop invariant i9: x <= 3*y;\nloop invariant i10: x <= 4*y;\nloop invariant i11: x <= 5*y;\nloop invariant i12: x <= 6*y;\nloop invariant i13: x <= 7*y;\nloop invariant i14: x <= 8*y;\nloop invariant i15: x <= 9*y;\nloop invariant i16: x <= 10*y;\nloop invariant i17: x <= 11*y;\nloop invariant i18: x <= 12*y;\nloop invariant i19: x <= 13*y;\nloop invariant i20: x <= 14*y;\nloop invariant i21: x <= 15*y;\nloop invariant i22: x <= 16*y;\nloop invariant i23: x <= 17*y;\nloop invariant i24: x <= 18*y;\nloop invariant i25: x <= 19*y;\nloop invariant i26: x <= 20*y;\nloop invariant i27: x <= 21*y;\nloop invariant i28: x <= 22*y;\nloop invariant i29: x <= 23*y;\nloop invariant i30: x <= 24*y;\nloop invariant i31: x <= 25*y;\nloop invariant i32: x <= 26*y;\nloop invariant i33: x <= 27*y;\nloop invariant i34: x <= 28*y;\nloop invariant i35: x <= 29*y;\nloop invariant i36: x <= 30*y;\nloop invariant i37: x <= 31*y;\nloop invariant i38: x <= 32*y;\nloop invariant i39: x <= 33*y;\nloop invariant i40: x <= 34*y;\nloop invariant i41: x <= 35*y;\nloop invariant i42: x <= 36*y;\nloop invariant i43: x <= 37*y;\nloop invariant i44: x <= 38*y;\nloop invariant i45: x <= 39*y;\nloop invariant i46: x <= 40*y;\nloop invariant i47: x <= 41*y;\nloop invariant i48: x <= 42*y;\nloop invariant i49: x <= 43*y;\nloop invariant i50: x <= 44*y;\nloop invariant i51: x <= 45*y;\nloop invariant i52: x <= 46*y;\nloop invariant i53: x <= 47*y;\nloop invariant i54: x <= 48*y;\nloop invariant i55: x <= 49*y;\nloop invariant i56: x <= 50*y;\nloop invariant i57: x <= 51*y;\nloop invariant i58: x <= 52*y;\nloop invariant i59: x <= 53*y;\nloop invariant i60: x <= 54*y;\nloop invariant i61: x <= 55*y;\nloop invariant i62: x <= 56*y;\nloop invariant i63: x <= 57*y;\nloop invariant i64: x <= 58*y;\nloop invariant i65: x <= 59*y;\nloop invariant i66: x <= 60*y;\nloop invariant i67: x <= 61*y;\nloop invariant i68: x <= 62*y;\nloop invariant i69: x <= 63*y;\nloop invariant i70: x <= 64*y;\nloop invariant i71: x <= 65*y;\nloop invariant i72: x <= 66*y;\nloop invariant i73: x <= 67*y;\nloop invariant i74: x <= 68*y;\nloop invariant i75: x <= 69*y;\nloop invariant i76: x <= 70*y;\nloop invariant i77: x <= 71*y;\nloop invariant i78: x <= 72*y;\nloop invariant i79: x <= 73*y;\nloop invariant i80: x <= 74*y;\nloop invariant i81: x <= 75*y;\nloop invariant i82: x <= 76*y;\nloop invariant i83: x <= 77*y;\nloop invariant i84: x <= 78*y;\nloop invariant i85: x <= 79*y;\nloop invariant i86: x <= 80*y;\nloop invariant i87: x <= 81*y;\nloop invariant i88: x <= 82*y;\nloop invariant i89: x <= 83*y;\nloop invariant i90: x <= 84*y;\nloop invariant i91: x <= 85*y;\nloop invariant i92: x <= 86*y;\nloop invariant i93: x <= 87*y;\nloop invariant i94: x <= 88*y;\nloop invariant i95: x <= 89*y;\nloop invariant i96: x <= 90*y;\nloop invariant i97: x <= 91*y;\nloop invariant i98: x <= 92*y;\nloop invariant i99: x <= 93*y;\nloop invariant i100: x <= 94*y;\nloop invariant i101: x <= 95*y;\nloop invariant i102: x <= 96*y;\nloop invariant i103: x <= 97*y;\nloop invariant i104: x <= 98*y;\nloop invariant i105: x <= 99*y;\nloop invariant i106: x <= 100*y;\nloop invariant i107: x <= 101*y;\nloop invariant i108: x <= 102*y;\nloop invariant i109: x <= 103*y;\nloop invariant i110: x <= 104*y;\nloop invariant i111: x <= 105*y;\nloop invariant i112: x <= 106*y;\nloop invariant i113: x <= 107*y;\nloop invariant i114: x <= 108*y;\nloop invariant i115: x <= 109*y;\nloop invariant i116: ( x <= y ) ==> ( lock == 1 ) ;\nloop invariant i117: lock == 1 ==> x == y;\nloop invariant i118: lock == 0 ==> x != y;\nloop invariant i119: x <= y + 1;\nloop invariant i120: y <= 2 * (y + 1);\nloop invariant i121: x <= y + 2;\nloop invariant i122: y <= 3 * (y + 1);\nloop invariant i123: x <= y + 3;\nloop invariant i124: y <= 4 * (y + 1);\nloop invariant i125: x <= y + 4;\nloop invariant i126: y <= 5 * (y + 1);\nloop invariant i127: x <= y + 5;\nloop invariant i128: y <= 6 * (y + 1);\nloop invariant i129: x <= y + 6;\nloop invariant i130: y <= 7 * (y + 1);\nloop invariant i131: x <= y + 7;\nloop invariant i132: y <= 8 * (y + 1);\nloop invariant i133: x <= y + 8;\nloop invariant i134: y <= 9 * (y + 1);\nloop invariant i135: x <= y + 9;\nloop invariant i136: y <= 10 * (y + 1);\nloop invariant i137: x <= y + 10;\nloop invariant i138: y <= 11 * (y + 1);\nloop invariant i139: x <= y + 11;\nloop invariant i140: y <= 12 * (y + 1);\nloop invariant i141: x <= y + 12;\nloop invariant i142: y <= 13 * (y + 1);\nloop invariant i143: x <= y + 13;\nloop invariant i144: y <= 14 * (y + 1);\nloop invariant i145: x <= y + 14;\nloop invariant i146: y <= 15 * (y + 1);\nloop invariant i147: x <= y + 15;\nloop invariant i148: y <= 16 * (y + 1);\nloop invariant i149: x <= y + 16;\nloop invariant i150: y <= 17 * (y + 1);\nloop invariant i151: x <= y + 17;\nloop invariant i152: y <= 18 * (y + 1);\nloop invariant i153: x <= y + 18;\nloop invariant i154: y <= 19 * (y + 1);\nloop invariant i155: x <= y + 19;\nloop invariant i156: y <= 20 * (y + 1);\nloop invariant i157: x <= y + 20;\nloop invariant i158: y <= 21 * (y + 1);\nloop invariant i159: x <= y + 21;\nloop invariant i160: y <= 22 * (y + 1);\nloop invariant i161: x <= y + 22;\nloop invariant i162: y <= 23 * (y + 1);\nloop invariant i163: x <= y + 23;\nloop invariant i164: y <= 24 * (y + 1);\nloop invariant i165: x <= y + 24;\nloop invariant i166: y <= 25 * (y + 1);\nloop invariant i167: x <= y + 25;\nloop invariant i168: y <= 26 * (y + 1);\nloop invariant i169: x <= y + 26;\nloop invariant i170: y <= 27 * (y + 1);\nloop invariant i171: x <= y + 27;\nloop invariant i172: y <= 28 * (y + 1);\nloop invariant i173: x <= y + 28;\nloop invariant i174: y <= 29 * (y + 1);\nloop invariant i175: x <= y + 29;\nloop invariant i176: y <= 30 * (y + 1);\nloop invariant i177: x <= y + 30;\nloop invariant i178: y <= 31 * (y + 1);\nloop invariant i179: x <= y + 31;\nloop invariant i180: y <= 32 * (y + 1);\nloop invariant i181: x <= y + 32;\nloop invariant i182: y <= 33 * (y + 1);\nloop invariant i183: x <= y + 33;\nloop invariant i184: y <= 34 * (y + 1);\nloop invariant i185: x <= y + 34;\nloop invariant i186: y <= 35 * (y + 1);\nloop invariant i187: x <= y + 35;\nloop invariant i188: y <= 36 * (y + 1);\nloop invariant i189: x <= y + 36;\nloop invariant i190: y <= 37 * (y + 1);\nloop invariant i191: x <= y + 37;\nloop invariant i192: y <= 38 * (y + 1);\nloop invariant i193: x <= y + 38;\nloop invariant i194: y <= 39 * (y + 1);\nloop invariant i195: x <= y + 39;\nloop invariant i196: y <= 40 * (y + 1);\nloop invariant i197: x <= y + 40;\nloop invariant i198: y <= 41 * (y + 1);\nloop invariant i199: x <= y + 41;\nloop invariant i200: 1 <= lock <= 2;\nloop invariant i201: 1 <= x <= y;\nloop invariant i202: y - 1 <= x <= y;\nloop invariant i203: (lock == 1) ==> (x == y);\nloop invariant i204: (lock == 0) ==> (x < y);\nloop invariant i205: (lock == 1) ==> (y < x);\nloop invariant i206: (lock == 0) ==> (y < x);\nloop invariant i207: i1;\nloop invariant i208: i2;\nloop invariant i209: i3;\nloop invariant i210: i4;\nloop invariant i211: i5;\nloop invariant i212: i6;\nloop invariant i213: i7;\nloop invariant i214: i8;\nloop invariant i215: i9;\nloop invariant i216: i10;\nloop invariant i217: i11;\nloop invariant i218: i12;\nloop invariant i219: i13;\nloop invariant i220: i14;\nloop invariant i221: i15;\nloop invariant i222: i16;\nloop invariant i223: i17;\nloop invariant i224: i18;\nloop invariant i225: i19;\nloop invariant i226: i20;\nloop invariant i227: i21;\nloop invariant i228: i22;\nloop invariant i229: i23;\nloop invariant i230: i24;\nloop invariant i231: i25;\nloop invariant i232: i26;\nloop invariant i233: i27;\nloop invariant i234: i28;\nloop invariant i235: i29;\nloop invariant i236: i30;\nloop invariant i237: i31;\nloop invariant i238: i32;\nloop invariant i239: i33;\nloop invariant i240: i34;\nloop invariant i241: i35;\nloop invariant i242: i36;\nloop invariant i243: i37;\nloop invariant i244: i38;\nloop invariant i245: i39;\nloop invariant i246: i40;\nloop invariant i247: i41;\nloop invariant i248: i42;\nloop invariant i249: i43;\nloop invariant i250: i44;\nloop invariant i251: i45;\nloop invariant i252: i46;\nloop invariant i253: i47;\nloop invariant i254: i48;\nloop invariant i255: i49;\nloop invariant i256: i50;\nloop invariant i257: i51;\nloop invariant i258: i52;\nloop invariant i259: i53;\nloop invariant i260: i54;\nloop invariant i261: i55;\nloop invariant i262: i56;\nloop invariant i263: i57;\nloop invariant i264: i58;\nloop invariant i265: i59;\nloop invariant i266: i60;\nloop invariant i267: i61;\nloop invariant i268: i62;\nloop invariant i269: i63;\nloop invariant i270: i64;\nloop invariant i271: i65;\nloop invariant i272: i66;\nloop invariant i273: i67;\nloop invariant i274: i68;\nloop invariant i275: i69;\nloop invariant i276: i70;\nloop invariant i277: i71;\nloop invariant i278: i72;\nloop invariant i279: i73;\nloop invariant i280: i74;\nloop invariant i281: i75;\nloop invariant i282: i76;\nloop invariant i283: i77;\nloop invariant i284: i78;\nloop invariant i285: i79;\nloop invariant i286: i80;\nloop invariant i287: i81;\nloop invariant i288: i82;\nloop invariant i289: i83;\nloop invariant i290: i84;\nloop invariant i291: i85;\nloop invariant i292: i86;\nloop invariant i293: i87;\nloop invariant i294: i88;\nloop invariant i295: i89;\nloop invariant i296: i90;\nloop invariant i297: i91;\nloop invariant i298: i92;\nloop invariant i299: i93;\nloop invariant i300: i94;\nloop invariant i301: i95;\nloop invariant i302: i96;\nloop invariant i303: i97;\nloop invariant i304: i98;\nloop invariant i305: i99;\nloop invariant i306: i100;\nloop invariant i307: i101;\nloop invariant i308: i102;\nloop invariant i309: i103;\nloop invariant i310: i104;\nloop invariant i311: i105;\nloop invariant i312: i106;\nloop invariant i313: i107;\nloop invariant i314: i108;\nloop invariant i315: i109;\nloop invariant i316: i110;\nloop invariant i317: i111;\nloop invariant i318: i112;\nloop invariant i319: i113;\nloop invariant i320: i114;\nloop invariant i321: i115;\nloop invariant i322: i116;\nloop invariant i323: i117;\nloop invariant i324: i118;\nloop invariant i325: i119;\nloop invariant i326: i120;\nloop invariant i327: i121;\nloop invariant i328: i122;\nloop invariant i329: i123;\nloop invariant i330: i124;\nloop invariant i331: i125;\nloop invariant i332: i126;\nloop invariant i333: i127;\nloop invariant i334: i128;\nloop invariant i335: i129;\nloop invariant i336: i130;\nloop invariant i337: i131;\nloop invariant i338: i132;\nloop invariant i339: i133;\nloop invariant i340: i134;\nloop invariant i341: i135;\nloop invariant i342: i136;\nloop invariant i343: i137;\nloop invariant i344: i138;\nloop invariant i345: i139;\nloop invariant i346: i140;\nloop invariant i347: i141;\nloop invariant i348: i142;\nloop invariant i349: i143;\nloop invariant i350: i144;\nloop invariant i351: i145;\nloop invariant i352: i146;\nloop invariant i353: i147;\nloop invariant i354: i148;\nloop invariant i355: i149;\nloop invariant i356: i150;\nloop invariant i357: i151;\nloop invariant i358: i152;\nloop invariant i359: i153;\nloop invariant i360: i154;\nloop invariant i361: i155;\nloop invariant i362: i156;\nloop invariant i363: i157;\nloop invariant i364: i158;\nloop invariant i365: lock == 1 || (x == y && lock == 0);\nloop invariant i366: y >= 0;\nloop invariant i367: x >= 0;\nloop invariant i368: lock == 1 ==> x >= y;\nloop invariant i369: lock == 0 ==> x == y;\nloop invariant i370: lock == 1 ==> y >= x;\nloop invariant i371: lock == 0 ==> y > x;\nloop invariant i372: lock == 0 ==> y >= x;\nloop invariant i373: 1 <= y;\nloop invariant i374: 1 <= lock <= 1;\nloop invariant i375: 0 <= x <= y;\nloop invariant i376: lock == 1 => x == y;\nloop invariant i377: lock == 0 => x != y && x < y;\nloop invariant i378: y == x + 1 => lock == 0;\nloop invariant i379: y != x + 1 => lock == 1;\nloop invariant i380: x <= y;\nloop invariant i381: if x = y then lock = 1 else lock = 0;\nloop invariant i382: if x = y then lock = 1;\nloop invariant i383: if x != y then lock = 0;\nloop invariant i384: if x = y then lock = 1 ==> (x = y);\nloop invariant i385: if x != y then lock = 0 ==> (x = y);\nloop invariant i386: if x = y then lock = 1 ==> (lock = 1);\nloop invariant i387: if x != y then lock = 0 ==> (lock = 0);\nloop invariant i388: x == y;\nloop invariant i389: lock == 0;\nloop invariant i390: x < y;\nloop invariant i391: y < x;\nloop invariant i392: x != y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 320,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: x >= y;\nloop invariant i6: lock == 1;\nloop invariant i7: y <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i116: ( x <= y ) ==> ( lock == 1 ) ;\nloop invariant i117: lock == 1 ==> x == y;\nloop invariant i118: lock == 0 ==> x != y;\nloop invariant i119: x <= y + 1;\n\nloop invariant i121: x <= y + 2;\n\nloop invariant i123: x <= y + 3;\n\nloop invariant i125: x <= y + 4;\n\nloop invariant i127: x <= y + 5;\n\nloop invariant i129: x <= y + 6;\n\nloop invariant i131: x <= y + 7;\n\nloop invariant i133: x <= y + 8;\n\nloop invariant i135: x <= y + 9;\n\nloop invariant i137: x <= y + 10;\n\nloop invariant i139: x <= y + 11;\n\nloop invariant i141: x <= y + 12;\n\nloop invariant i143: x <= y + 13;\n\nloop invariant i145: x <= y + 14;\n\nloop invariant i147: x <= y + 15;\n\nloop invariant i149: x <= y + 16;\n\nloop invariant i151: x <= y + 17;\n\nloop invariant i153: x <= y + 18;\n\nloop invariant i155: x <= y + 19;\n\nloop invariant i157: x <= y + 20;\n\nloop invariant i159: x <= y + 21;\n\nloop invariant i161: x <= y + 22;\n\nloop invariant i163: x <= y + 23;\n\nloop invariant i165: x <= y + 24;\n\nloop invariant i167: x <= y + 25;\n\nloop invariant i169: x <= y + 26;\n\nloop invariant i171: x <= y + 27;\n\nloop invariant i173: x <= y + 28;\n\nloop invariant i175: x <= y + 29;\n\nloop invariant i177: x <= y + 30;\n\nloop invariant i179: x <= y + 31;\n\nloop invariant i181: x <= y + 32;\n\nloop invariant i183: x <= y + 33;\n\nloop invariant i185: x <= y + 34;\n\nloop invariant i187: x <= y + 35;\n\nloop invariant i189: x <= y + 36;\n\nloop invariant i191: x <= y + 37;\n\nloop invariant i193: x <= y + 38;\n\nloop invariant i195: x <= y + 39;\n\nloop invariant i197: x <= y + 40;\n\nloop invariant i199: x <= y + 41;\nloop invariant i200: 1 <= lock <= 2;\n\nloop invariant i202: y - 1 <= x <= y;\nloop invariant i203: (lock == 1) ==> (x == y);\nloop invariant i204: (lock == 0) ==> (x < y);\n\nloop invariant i206: (lock == 0) ==> (y < x);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i365: lock == 1 || (x == y && lock == 0);\n\n\nloop invariant i368: lock == 1 ==> x >= y;\nloop invariant i369: lock == 0 ==> x == y;\nloop invariant i370: lock == 1 ==> y >= x;\nloop invariant i371: lock == 0 ==> y > x;\nloop invariant i372: lock == 0 ==> y >= x;\n\nloop invariant i374: 1 <= lock <= 1;\n\n\n\n\n\nloop invariant i380: x <= y;\n\n\n\n\n\n\n\nloop invariant i388: x == y;\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 72,
        "success_count": 60,
        "failure_count": 12,
        "success_rate": 0.8333333333333334
    }
}