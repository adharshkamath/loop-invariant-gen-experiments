{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant x >= 0;\nloop invariant x > 0 ==> y >= 0;\nloop invariant x > 0 ==> z >= 0;\nloop invariant x > 0 ==> y > 0 ==> x + y > 0;\nloop invariant x > 0 ==> z > 0 ==> x + z > 0;\nloop invariant y > 0 ==> y >= 1;\nloop invariant z > 0 ==> z >= 1;\nloop invariant y == 0 ==> x == 0;\nloop invariant z == 0 ==> x == 0;\nloop invariant y == 0 ==> x + y == 0;\nloop invariant z == 0 ==> x + z == 0;\nloop invariant y > 0 ==> x == 0 ==> y == 1;\nloop invariant z > 0 ==> x == 0 ==> z == 1;\nloop invariant y > 0 ==> x > 0 ==> y >= y;\nloop invariant z > 0 ==> x > 0 ==> z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x; loop invariant x <= y + z; loop invariant unknown_bool() ==> x >= 1; loop invariant unknown_bool() ==> y >= 1; loop invariant unknown_bool() ==> z >= 1; loop invariant unknown_bool() ==> x + y + z > 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x && 0 <= y && 0 <= z && x + y + z <= 3 * unknown_int();\nloop invariant (x>=0) ==> (x <= unknown_int());\nloop invariant (y>=0) ==> (y <= unknown_int());\nloop invariant (z>=0) ==> (z <= unknown_int());\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (x>0 || y>0 || z>0);\nloop invariant (x>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant (y>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant (x>0) ==> (z > 0);\nloop invariant (y>0) ==> (z > 0);\nloop invariant (z>0) ==> (z > 0);\nloop invariant (x>0) ==> (y >= 0);\nloop invariant (y>0) ==> (x >= 0);\nloop invariant (z>0) ==> (x >= 0);\nloop invariant (x>0) ==> (x - 1 >= 0);\nloop invariant (y>0) ==> (y - 1 >= 0);\nloop invariant (z>0) ==> (z - 1 >= 0);\nloop invariant (x>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant (y>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant (x>0) ==> (y <= unknown_int());\nloop invariant (y>0) ==> (z <= unknown_int());\nloop invariant (z>0) ==> (x <= unknown_int());\nloop invariant (z>0) ==> (y <= unknown_int());\nloop invariant (x>0) ==> (z <= unknown_int());\nloop invariant (x>0) ==> (unknown_int() >= 1);\nloop invariant (y>0) ==> (unknown_int() >= 1);\nloop invariant (z>0) ==> (unknown_int() >= 1);\nloop invariant (y>0) ==> (unknown_int() >= 1);\nloop invariant (z>0) ==> (unknown_int() >= 1);\nloop invariant (x>0) ==> (unknown_int() >= 1);\nloop invariant (x>0) ==> (unknown_int() >= 1);\nloop invariant (y>0) ==> (unknown_int() >= 1);\nloop invariant (z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= INT_MAX && 1 <= y <= INT_MAX && 1 <= z <= INT_MAX;\nloop invariant x>=0 ==> x<=INT_MAX;\nloop invariant y>=0 ==> y<=INT_MAX;\nloop invariant z>=0 ==> z<=INT_MAX;\nloop invariant x>0 || y>0 || z>0 ==> unknown_bool() ==> x>0 || y>0 || z>0;\nloop invariant !(x>0 || y>0 || z>0) ==> x<=0 || y<=0 || z<=0;\nloop invariant !(x>0 || y>0 || z>0) ==> !unknown_bool() ==> !(x>0 || y>0 || z>0);\nloop invariant !(x>0 || y>0 || z>0) ==> x<=0 || y<=0 || z<=0;\nloop invariant !(x>0 || y>0 || z>0) ==> !unknown_bool() ==> !(x>0 || y>0 || z>0);\nloop invariant x>0 ==> x>=1 && x<=INT_MAX;\nloop invariant y>0 ==> y>=1 && y<=INT_MAX;\nloop invariant z>0 ==> z>=1 && z<=INT_MAX;\nloop invariant x>=1 && x<=INT_MAX ==> x>0;\nloop invariant y>=1 && y<=INT_MAX ==> y>0;\nloop invariant z>=1 && z<=INT_MAX ==> z>0;\nloop invariant x<=INT_MAX ==> x>=0;\nloop invariant y<=INT_MAX ==> y>=0;\nloop invariant z<=INT_MAX ==> z>=0;\nloop invariant x>=0 ==> x<=INT_MAX;\nloop invariant y>=0 ==> y<=INT_MAX;\nloop invariant z>=0 ==> z<=INT_MAX;\nloop invariant x<=INT_MAX ==> x>=0;\nloop invariant y<=INT_MAX ==> y>=0;\nloop invariant z<=INT_MAX ==> z>=0;\nloop invariant x>=0 ==> x<=INT_MAX;\nloop invariant y>=0 ==> y<=INT_MAX;\nloop invariant z>=0 ==> z<=INT_MAX;\nloop invariant x<=INT_MAX ==> x>=0;\nloop invariant y<=INT_MAX ==> y>=0;\nloop invariant z<=INT_MAX ==> z>=0;\nloop invariant x>=0 ==> x<=INT_MAX;\nloop invariant y>=0 ==> y<=INT_MAX;\nloop invariant z>=0 ==> z<=INT_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= z <= INT_MAX;\nloop invariant x + y + z >= 1;\nloop invariant x > 0 || y > 0 || z > 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= INT_MAX;\nloop invariant 1 <= y <= INT_MAX;\nloop invariant 1 <= z <= INT_MAX;\nloop invariant (x>0 || y>0 || z>0) ==> (x>0 || y>0 || z>0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y + z;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= z;\n*/\n```",
            "```\n/*@\nloop invariant ( x >= 0 && y >= 0 && z >= 0);\nloop invariant ( x == (x + 1) || y == (y + 1) || z == (z + 1));\nloop invariant ( x == 0 || y == 0 || z == 0);\nloop invariant ( x == (x + 1) ==> (y == 0 || z == 0));\nloop invariant ( y == (y + 1) ==> (x == 0 || z == 0));\nloop invariant ( z == (z + 1) ==> (x == 0 || y == 0));\nloop invariant ( x == 0 ==> (y == (y + 1) || z == (z + 1)));\nloop invariant ( y == 0 ==> (x == (x + 1) || z == (z + 1)));\nloop invariant ( z == 0 ==> (x == (x + 1) || y == (y + 1)));\nloop invariant ( x == 0 ==> (y == (y - 1) || z == (z - 1)));\nloop invariant ( y == 0 ==> (x == (x - 1) || z == (z - 1)));\nloop invariant ( z == 0 ==> (x == (x - 1) || y == (y - 1)));\nloop invariant ( x == (x + 1) ==> (y == 0 || z == 0));\nloop invariant ( y == (y + 1) ==> (x == 0 || z == 0));\nloop invariant ( z == (z + 1) ==> (x == 0 || y == 0));\nloop invariant ( x == 0 ==> (y == (y + 1) || z == (z + 1)));\nloop invariant ( y == 0 ==> (x == (x + 1) || z == (z + 1)));\nloop invariant ( z == 0 ==> (x == (x + 1) || y == (y + 1)));\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant (x > 0 || y > 0 || z > 0) ==> unknown_bool();\nloop invariant (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\nloop invariant (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\nloop invariant (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= INT_MAX && 0 <= y <= INT_MAX && 0 <= z <= INT_MAX;\nloop invariant x >= (x0 && y==0);\nloop invariant x >= (x0 && y>0 && z==0);\nloop invariant y >= (y0 && x==0);\nloop invariant y >= (y0 && x>0 && z==0);\nloop invariant z >= (z0 && x==0 && y==0);\nloop invariant x >= (x0 && y==0) ==> (x >= x0);\nloop invariant x >= (x0 && y>0 && z==0) ==> (x >= x0);\nloop invariant y >= (y0 && x==0) ==> (y >= y0);\nloop invariant y >= (y0 && x>0 && z==0) ==> (y >= y0);\nloop invariant z >= (z0 && x==0 && y==0) ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= INT_MAX;\nloop invariant 1 <= y <= INT_MAX;\nloop invariant 1 <= z <= INT_MAX;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x <= INT_MAX ==> (x + z) <= INT_MAX;\nloop invariant y <= INT_MAX ==> (y + x) <= INT_MAX;\nloop invariant z <= INT_MAX ==> (z + y) <= INT_MAX;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= z <= INT_MAX;\nloop invariant x >= 1 ==> (x - 1) * (x - 2) / 2 <= z;\nloop invariant y >= 1 ==> (y - 1) * (y - 2) / 2 <= z;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant x >= 0;\nloop invariant x > 0 ==> y >= 0;\nloop invariant x > 0 ==> z >= 0;\nloop invariant x > 0 ==> y > 0 ==> x + y > 0;\nloop invariant x > 0 ==> z > 0 ==> x + z > 0;\nloop invariant y > 0 ==> y >= 1;\nloop invariant z > 0 ==> z >= 1;\nloop invariant y == 0 ==> x == 0;\nloop invariant z == 0 ==> x == 0;\nloop invariant y == 0 ==> x + y == 0;\nloop invariant z == 0 ==> x + z == 0;\nloop invariant y > 0 ==> x == 0 ==> y == 1;\nloop invariant z > 0 ==> x == 0 ==> z == 1;\nloop invariant y > 0 ==> x > 0 ==> y >= y;\nloop invariant z > 0 ==> x > 0 ==> z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n\n\nloop invariant i6: x > 0 ==> y > 0 ==> x + y > 0;\nloop invariant i7: x > 0 ==> z > 0 ==> x + z > 0;\nloop invariant i8: y > 0 ==> y >= 1;\nloop invariant i9: z > 0 ==> z >= 1;\n\n\n\n\n\n\nloop invariant i16: y > 0 ==> x > 0 ==> y >= y;\nloop invariant i17: z > 0 ==> x > 0 ==> z >= z;\nloop invariant i18: y > 0 ==> x > 0 ==> y + y >= y;\nloop invariant i19: z > 0 ==> x > 0 ==> z + z >= z;\nloop invariant i20: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y;\nloop invariant i21: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z;\nloop invariant i22: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i23: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i24: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i25: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i26: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i27: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i28: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i29: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i30: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i31: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i32: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i33: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i34: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i35: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x; loop invariant x <= y + z; loop invariant unknown_bool() ==> x >= 1; loop invariant unknown_bool() ==> y >= 1; loop invariant unknown_bool() ==> z >= 1; loop invariant unknown_bool() ==> x + y + z > 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= x && 0 <= y && 0 <= z && x + y + z <= 3 * unknown_int();\nloop invariant (x>=0) ==> (x <= unknown_int());\nloop invariant (y>=0) ==> (y <= unknown_int());\nloop invariant (z>=0) ==> (z <= unknown_int());\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (x>0 || y>0 || z>0);\nloop invariant (x>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant (y>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant (x>0) ==> (z > 0);\nloop invariant (y>0) ==> (z > 0);\nloop invariant (z>0) ==> (z > 0);\nloop invariant (x>0) ==> (y >= 0);\nloop invariant (y>0) ==> (x >= 0);\nloop invariant (z>0) ==> (x >= 0);\nloop invariant (x>0) ==> (x - 1 >= 0);\nloop invariant (y>0) ==> (y - 1 >= 0);\nloop invariant (z>0) ==> (z - 1 >= 0);\nloop invariant (x>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant (y>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant (x>0) ==> (y <= unknown_int());\nloop invariant (y>0) ==> (z <= unknown_int());\nloop invariant (z>0) ==> (x <= unknown_int());\nloop invariant (z>0) ==> (y <= unknown_int());\nloop invariant (x>0) ==> (z <= unknown_int());\nloop invariant (x>0) ==> (unknown_int() >= 1);\nloop invariant (y>0) ==> (unknown_int() >= 1);\nloop invariant (z>0) ==> (unknown_int() >= 1);\nloop invariant (y>0) ==> (unknown_int() >= 1);\nloop invariant (z>0) ==> (unknown_int() >= 1);\nloop invariant (x>0) ==> (unknown_int() >= 1);\nloop invariant (x>0) ==> (unknown_int() >= 1);\nloop invariant (y>0) ==> (unknown_int() >= 1);\nloop invariant (z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: (z>0) ==> (z > 0);\n\n\n\nloop invariant i14: (x>0) ==> (x - 1 >= 0);\nloop invariant i15: (y>0) ==> (y - 1 >= 0);\nloop invariant i16: (z>0) ==> (z - 1 >= 0);\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= INT_MAX && 1 <= y <= INT_MAX && 1 <= z <= INT_MAX;\nloop invariant x>=0 ==> x<=INT_MAX;\nloop invariant y>=0 ==> y<=INT_MAX;\nloop invariant z>=0 ==> z<=INT_MAX;\nloop invariant x>0 || y>0 || z>0 ==> unknown_bool() ==> x>0 || y>0 || z>0;\nloop invariant !(x>0 || y>0 || z>0) ==> x<=0 || y<=0 || z<=0;\nloop invariant !(x>0 || y>0 || z>0) ==> !unknown_bool() ==> !(x>0 || y>0 || z>0);\nloop invariant !(x>0 || y>0 || z>0) ==> x<=0 || y<=0 || z<=0;\nloop invariant !(x>0 || y>0 || z>0) ==> !unknown_bool() ==> !(x>0 || y>0 || z>0);\nloop invariant x>0 ==> x>=1 && x<=INT_MAX;\nloop invariant y>0 ==> y>=1 && y<=INT_MAX;\nloop invariant z>0 ==> z>=1 && z<=INT_MAX;\nloop invariant x>=1 && x<=INT_MAX ==> x>0;\nloop invariant y>=1 && y<=INT_MAX ==> y>0;\nloop invariant z>=1 && z<=INT_MAX ==> z>0;\nloop invariant x<=INT_MAX ==> x>=0;\nloop invariant y<=INT_MAX ==> y>=0;\nloop invariant z<=INT_MAX ==> z>=0;\nloop invariant x>=0 ==> x<=INT_MAX;\nloop invariant y>=0 ==> y<=INT_MAX;\nloop invariant z>=0 ==> z<=INT_MAX;\nloop invariant x<=INT_MAX ==> x>=0;\nloop invariant y<=INT_MAX ==> y>=0;\nloop invariant z<=INT_MAX ==> z>=0;\nloop invariant x>=0 ==> x<=INT_MAX;\nloop invariant y>=0 ==> y<=INT_MAX;\nloop invariant z>=0 ==> z<=INT_MAX;\nloop invariant x<=INT_MAX ==> x>=0;\nloop invariant y<=INT_MAX ==> y>=0;\nloop invariant z<=INT_MAX ==> z>=0;\nloop invariant x>=0 ==> x<=INT_MAX;\nloop invariant y>=0 ==> y<=INT_MAX;\nloop invariant z>=0 ==> z<=INT_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\nloop invariant i2: x>=0 ==> x<=INT_MAX;\nloop invariant i3: y>=0 ==> y<=INT_MAX;\nloop invariant i4: z>=0 ==> z<=INT_MAX;\n\nloop invariant i6: !(x>0 || y>0 || z>0) ==> x<=0 || y<=0 || z<=0;\n\nloop invariant i8: x>0 ==> x>=1 && x<=INT_MAX;\nloop invariant i9: y>0 ==> y>=1 && y<=INT_MAX;\nloop invariant i10: z>0 ==> z>=1 && z<=INT_MAX;\nloop invariant i11: x>=1 && x<=INT_MAX ==> x>0;\nloop invariant i12: y>=1 && y<=INT_MAX ==> y>0;\nloop invariant i13: z>=1 && z<=INT_MAX ==> z>0;\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= z <= INT_MAX;\nloop invariant x + y + z >= 1;\nloop invariant x > 0 || y > 0 || z > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: x > 0 || y > 0 || z > 0;\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= INT_MAX;\nloop invariant 1 <= y <= INT_MAX;\nloop invariant 1 <= z <= INT_MAX;\nloop invariant (x>0 || y>0 || z>0) ==> (x>0 || y>0 || z>0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\nloop invariant i4: (x>0 || y>0 || z>0) ==> (x>0 || y>0 || z>0);\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y + z;\nloop invariant 0 <= y <= z;\nloop invariant 0 <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant ( x >= 0 && y >= 0 && z >= 0);\nloop invariant ( x == (x + 1) || y == (y + 1) || z == (z + 1));\nloop invariant ( x == 0 || y == 0 || z == 0);\nloop invariant ( x == (x + 1) ==> (y == 0 || z == 0));\nloop invariant ( y == (y + 1) ==> (x == 0 || z == 0));\nloop invariant ( z == (z + 1) ==> (x == 0 || y == 0));\nloop invariant ( x == 0 ==> (y == (y + 1) || z == (z + 1)));\nloop invariant ( y == 0 ==> (x == (x + 1) || z == (z + 1)));\nloop invariant ( z == 0 ==> (x == (x + 1) || y == (y + 1)));\nloop invariant ( x == 0 ==> (y == (y - 1) || z == (z - 1)));\nloop invariant ( y == 0 ==> (x == (x - 1) || z == (z - 1)));\nloop invariant ( z == 0 ==> (x == (x - 1) || y == (y - 1)));\nloop invariant ( x == (x + 1) ==> (y == 0 || z == 0));\nloop invariant ( y == (y + 1) ==> (x == 0 || z == 0));\nloop invariant ( z == (z + 1) ==> (x == 0 || y == 0));\nloop invariant ( x == 0 ==> (y == (y + 1) || z == (z + 1)));\nloop invariant ( y == 0 ==> (x == (x + 1) || z == (z + 1)));\nloop invariant ( z == 0 ==> (x == (x + 1) || y == (y + 1)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\nloop invariant i4: ( x == (x + 1) ==> (y == 0 || z == 0));\nloop invariant i5: ( y == (y + 1) ==> (x == 0 || z == 0));\nloop invariant i6: ( z == (z + 1) ==> (x == 0 || y == 0));\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant (x > 0 || y > 0 || z > 0) ==> unknown_bool();\nloop invariant (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\nloop invariant (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\nloop invariant (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= INT_MAX && 0 <= y <= INT_MAX && 0 <= z <= INT_MAX;\nloop invariant x >= (x0 && y==0);\nloop invariant x >= (x0 && y>0 && z==0);\nloop invariant y >= (y0 && x==0);\nloop invariant y >= (y0 && x>0 && z==0);\nloop invariant z >= (z0 && x==0 && y==0);\nloop invariant x >= (x0 && y==0) ==> (x >= x0);\nloop invariant x >= (x0 && y>0 && z==0) ==> (x >= x0);\nloop invariant y >= (y0 && x==0) ==> (y >= y0);\nloop invariant y >= (y0 && x>0 && z==0) ==> (y >= y0);\nloop invariant z >= (z0 && x==0 && y==0) ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\nloop invariant y >= y0 ==> (y >= y0);\nloop invariant z >= z0 ==> (z >= z0);\nloop invariant x >= x0 ==> (x >= x0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= INT_MAX;\nloop invariant 1 <= y <= INT_MAX;\nloop invariant 1 <= z <= INT_MAX;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant y <= z;\nloop invariant x <= INT_MAX ==> (x + z) <= INT_MAX;\nloop invariant y <= INT_MAX ==> (y + x) <= INT_MAX;\nloop invariant z <= INT_MAX ==> (z + y) <= INT_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= z <= INT_MAX;\nloop invariant x >= 1 ==> (x - 1) * (x - 2) / 2 <= z;\nloop invariant y >= 1 ==> (y - 1) * (y - 2) / 2 <= z;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\nloop invariant y >= 1 ==> y - 1 <= z;\nloop invariant x >= 1 ==> x - 1 <= y;\nloop invariant y >= 1 ==> y - 1 <= x;\nloop invariant x >= 1 ==> x - 1 <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 54: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: 0 <= z;\nloop invariant i3: x >= 0;\nloop invariant i4: x > 0 ==> y >= 0;\nloop invariant i5: x > 0 ==> z >= 0;\nloop invariant i6: x > 0 ==> y > 0 ==> x + y > 0;\nloop invariant i7: x > 0 ==> z > 0 ==> x + z > 0;\nloop invariant i8: y > 0 ==> y >= 1;\nloop invariant i9: z > 0 ==> z >= 1;\nloop invariant i10: y == 0 ==> x == 0;\nloop invariant i11: z == 0 ==> x == 0;\nloop invariant i12: y == 0 ==> x + y == 0;\nloop invariant i13: z == 0 ==> x + z == 0;\nloop invariant i14: y > 0 ==> x == 0 ==> y == 1;\nloop invariant i15: z > 0 ==> x == 0 ==> z == 1;\nloop invariant i16: y > 0 ==> x > 0 ==> y >= y;\nloop invariant i17: z > 0 ==> x > 0 ==> z >= z;\nloop invariant i18: y > 0 ==> x > 0 ==> y + y >= y;\nloop invariant i19: z > 0 ==> x > 0 ==> z + z >= z;\nloop invariant i20: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y;\nloop invariant i21: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z;\nloop invariant i22: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i23: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i24: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i25: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i26: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i27: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i28: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i29: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i30: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i31: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i32: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i33: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i34: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i35: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i36: 0 <= x; loop invariant x <= y + z; loop invariant unknown_bool() ==> x >= 1; loop invariant unknown_bool() ==> y >= 1; loop invariant unknown_bool() ==> z >= 1; loop invariant unknown_bool() ==> x + y + z > 1;\nloop invariant i37: 0 <= x && 0 <= y && 0 <= z && x + y + z <= 3 * unknown_int();\nloop invariant i38: (x>=0) ==> (x <= unknown_int());\nloop invariant i39: (y>=0) ==> (y <= unknown_int());\nloop invariant i40: (z>=0) ==> (z <= unknown_int());\nloop invariant i41: (unknown_bool() || x>0 || y>0 || z>0) ==> (x>0 || y>0 || z>0);\nloop invariant i42: (x>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant i43: (y>0) ==> (x + y + z < 3 * unknown_int());\nloop invariant i44: (x>0) ==> (z > 0);\nloop invariant i45: (y>0) ==> (z > 0);\nloop invariant i46: (z>0) ==> (z > 0);\nloop invariant i47: (x>0) ==> (y >= 0);\nloop invariant i48: (y>0) ==> (x >= 0);\nloop invariant i49: (z>0) ==> (x >= 0);\nloop invariant i50: (x>0) ==> (x - 1 >= 0);\nloop invariant i51: (y>0) ==> (y - 1 >= 0);\nloop invariant i52: (z>0) ==> (z - 1 >= 0);\nloop invariant i53: (x>0) ==> (y <= unknown_int());\nloop invariant i54: (y>0) ==> (z <= unknown_int());\nloop invariant i55: (z>0) ==> (x <= unknown_int());\nloop invariant i56: (z>0) ==> (y <= unknown_int());\nloop invariant i57: (x>0) ==> (z <= unknown_int());\nloop invariant i58: (x>0) ==> (unknown_int() >= 1);\nloop invariant i59: (y>0) ==> (unknown_int() >= 1);\nloop invariant i60: (z>0) ==> (unknown_int() >= 1);\nloop invariant i61: (unknown_bool() || x>0 || y>0 || z>0) ==> (unknown_int() >= 1);\nloop invariant i62: 1 <= x <= INT_MAX && 1 <= y <= INT_MAX && 1 <= z <= INT_MAX;\nloop invariant i63: x>=0 ==> x<=INT_MAX;\nloop invariant i64: y>=0 ==> y<=INT_MAX;\nloop invariant i65: z>=0 ==> z<=INT_MAX;\nloop invariant i66: x>0 || y>0 || z>0 ==> unknown_bool() ==> x>0 || y>0 || z>0;\nloop invariant i67: !(x>0 || y>0 || z>0) ==> x<=0 || y<=0 || z<=0;\nloop invariant i68: !(x>0 || y>0 || z>0) ==> !unknown_bool() ==> !(x>0 || y>0 || z>0);\nloop invariant i69: x>0 ==> x>=1 && x<=INT_MAX;\nloop invariant i70: y>0 ==> y>=1 && y<=INT_MAX;\nloop invariant i71: z>0 ==> z>=1 && z<=INT_MAX;\nloop invariant i72: x>=1 && x<=INT_MAX ==> x>0;\nloop invariant i73: y>=1 && y<=INT_MAX ==> y>0;\nloop invariant i74: z>=1 && z<=INT_MAX ==> z>0;\nloop invariant i75: x<=INT_MAX ==> x>=0;\nloop invariant i76: y<=INT_MAX ==> y>=0;\nloop invariant i77: z<=INT_MAX ==> z>=0;\nloop invariant i78: 0 <= x <= INT_MAX;\nloop invariant i79: 0 <= y <= INT_MAX;\nloop invariant i80: 0 <= z <= INT_MAX;\nloop invariant i81: x + y + z >= 1;\nloop invariant i82: x > 0 || y > 0 || z > 0;\nloop invariant i83: 1 <= x <= INT_MAX;\nloop invariant i84: 1 <= y <= INT_MAX;\nloop invariant i85: 1 <= z <= INT_MAX;\nloop invariant i86: (x>0 || y>0 || z>0) ==> (x>0 || y>0 || z>0);\nloop invariant i87: 0 <= x <= y + z;\nloop invariant i88: 0 <= y <= z;\nloop invariant i89: ( x >= 0 && y >= 0 && z >= 0);\nloop invariant i90: ( x == (x + 1) || y == (y + 1) || z == (z + 1));\nloop invariant i91: ( x == 0 || y == 0 || z == 0);\nloop invariant i92: ( x == (x + 1) ==> (y == 0 || z == 0));\nloop invariant i93: ( y == (y + 1) ==> (x == 0 || z == 0));\nloop invariant i94: ( z == (z + 1) ==> (x == 0 || y == 0));\nloop invariant i95: ( x == 0 ==> (y == (y + 1) || z == (z + 1)));\nloop invariant i96: ( y == 0 ==> (x == (x + 1) || z == (z + 1)));\nloop invariant i97: ( z == 0 ==> (x == (x + 1) || y == (y + 1)));\nloop invariant i98: ( x == 0 ==> (y == (y - 1) || z == (z - 1)));\nloop invariant i99: ( y == 0 ==> (x == (x - 1) || z == (z - 1)));\nloop invariant i100: ( z == 0 ==> (x == (x - 1) || y == (y - 1)));\nloop invariant i101: y >= 0;\nloop invariant i102: z >= 0;\nloop invariant i103: (x > 0 || y > 0 || z > 0) ==> unknown_bool();\nloop invariant i104: (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\nloop invariant i105: 0 <= x <= INT_MAX && 0 <= y <= INT_MAX && 0 <= z <= INT_MAX;\nloop invariant i106: x >= (x0 && y==0);\nloop invariant i107: x >= (x0 && y>0 && z==0);\nloop invariant i108: y >= (y0 && x==0);\nloop invariant i109: y >= (y0 && x>0 && z==0);\nloop invariant i110: z >= (z0 && x==0 && y==0);\nloop invariant i111: x >= (x0 && y==0) ==> (x >= x0);\nloop invariant i112: x >= (x0 && y>0 && z==0) ==> (x >= x0);\nloop invariant i113: y >= (y0 && x==0) ==> (y >= y0);\nloop invariant i114: y >= (y0 && x>0 && z==0) ==> (y >= y0);\nloop invariant i115: z >= (z0 && x==0 && y==0) ==> (z >= z0);\nloop invariant i116: x >= x0 ==> (x >= x0);\nloop invariant i117: y >= y0 ==> (y >= y0);\nloop invariant i118: z >= z0 ==> (z >= z0);\nloop invariant i119: x <= y;\nloop invariant i120: x <= z;\nloop invariant i121: y <= z;\nloop invariant i122: x <= INT_MAX ==> (x + z) <= INT_MAX;\nloop invariant i123: y <= INT_MAX ==> (y + x) <= INT_MAX;\nloop invariant i124: z <= INT_MAX ==> (z + y) <= INT_MAX;\nloop invariant i125: x >= 1 ==> (x - 1) * (x - 2) / 2 <= z;\nloop invariant i126: y >= 1 ==> (y - 1) * (y - 2) / 2 <= z;\nloop invariant i127: x >= 1 ==> x - 1 <= z;\nloop invariant i128: y >= 1 ==> y - 1 <= z;\nloop invariant i129: x >= 1 ==> x - 1 <= y;\nloop invariant i130: y >= 1 ==> y - 1 <= x;\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 39,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  /*@\n\n\n\n\n\nloop invariant i6: x > 0 ==> y > 0 ==> x + y > 0;\nloop invariant i7: x > 0 ==> z > 0 ==> x + z > 0;\nloop invariant i8: y > 0 ==> y >= 1;\nloop invariant i9: z > 0 ==> z >= 1;\n\n\n\n\n\n\nloop invariant i16: y > 0 ==> x > 0 ==> y >= y;\nloop invariant i17: z > 0 ==> x > 0 ==> z >= z;\nloop invariant i18: y > 0 ==> x > 0 ==> y + y >= y;\nloop invariant i19: z > 0 ==> x > 0 ==> z + z >= z;\nloop invariant i20: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y;\nloop invariant i21: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z;\nloop invariant i22: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i23: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i24: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i25: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i26: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i27: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i28: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i29: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i30: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i31: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i32: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i33: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\nloop invariant i34: y > 0 ==> x > 0 ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y ==> y + y >= y;\nloop invariant i35: z > 0 ==> x > 0 ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z ==> z + z >= z;\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: (z>0) ==> (z > 0);\n\n\n\nloop invariant i50: (x>0) ==> (x - 1 >= 0);\nloop invariant i51: (y>0) ==> (y - 1 >= 0);\nloop invariant i52: (z>0) ==> (z - 1 >= 0);\n\n\n\n\n\n\n\n\n\n\nloop invariant i63: x>=0 ==> x<=INT_MAX;\nloop invariant i64: y>=0 ==> y<=INT_MAX;\nloop invariant i65: z>=0 ==> z<=INT_MAX;\n\nloop invariant i67: !(x>0 || y>0 || z>0) ==> x<=0 || y<=0 || z<=0;\n\nloop invariant i69: x>0 ==> x>=1 && x<=INT_MAX;\nloop invariant i70: y>0 ==> y>=1 && y<=INT_MAX;\nloop invariant i71: z>0 ==> z>=1 && z<=INT_MAX;\nloop invariant i72: x>=1 && x<=INT_MAX ==> x>0;\nloop invariant i73: y>=1 && y<=INT_MAX ==> y>0;\nloop invariant i74: z>=1 && z<=INT_MAX ==> z>0;\n\n\n\n\n\n\n\nloop invariant i82: x > 0 || y > 0 || z > 0;\n\n\n\nloop invariant i86: (x>0 || y>0 || z>0) ==> (x>0 || y>0 || z>0);\n\n\n\n\n\nloop invariant i92: ( x == (x + 1) ==> (y == 0 || z == 0));\nloop invariant i93: ( y == (y + 1) ==> (x == 0 || z == 0));\nloop invariant i94: ( z == (z + 1) ==> (x == 0 || y == 0));\n\n\n\n\n\n\n\n\n\nloop invariant i104: (x > 0 || y > 0 || z > 0) ==> (x > 0 || y > 0 || z > 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c"
        ],
        "skipped": [],
        "total": 164,
        "success_count": 144,
        "failure_count": 20,
        "success_rate": 0.8780487804878049
    }
}