{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/67.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n - x <= y <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant y == n - x ==> x <= n;\nloop invariant y == n - x ==> y >= 0;\nloop invariant y == n - x ==> x == n;\nloop invariant x <= n ==> y >= 0;\nloop invariant x <= n ==> y <= n;\nloop invariant x <= n ==> y >= 0 ==> x == n;\nloop invariant x <= n ==> y <= n ==> x == n;\nloop invariant x <= n ==> y >= 0 ==> y == 0;\nloop invariant x <= n ==> y <= n ==> y == 0;\nloop invariant x <= n ==> y >= 0 ==> y == 0 ==> x == n;\nloop invariant x <= n ==> y <= n ==> y == 0 ==> x == n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n+1;\nloop invariant y == n - x;\nloop invariant x - 1 <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x + 1;\nloop invariant y + x <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 1 <= x <= n;\nloop invariant y = n - x;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant n > 0 ==> y >= 0;\nloop invariant (n > 0) ==> (y >= 0);\nloop invariant (n > 0) ==> (y >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant y = n - x;\n*/\n```",
            "```\n/*@\nloop invariant y = n - (x - 1) and n > 0 ==> y >= 0;\nloop invariant y = n - (x - 1) and n > 0 ==> y <= n;\nloop invariant x >= 1;\nloop invariant x <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant y = n - x;\nloop invariant y >= n - (x + 1);\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x + y == n;\nloop invariant x + y == n;\nloop invariant x + y == n ==> y == n - x;\nloop invariant x + y == n ==> x <= n;\nloop invariant x + y == n ==> x >= 0;\nloop invariant x + y == n ==> y >= 0;\nloop invariant x + y == n ==> y <= n;\nloop invariant x + y == n ==> y >= n - x;\nloop invariant x + y == n ==> y <= n - x;\nloop invariant x + y == n ==> x + y == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y = n - x;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n;\nloop invariant y == n - x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x + y == n;\nloop invariant x + y == n - x;\nloop invariant x == n - y;\nloop invariant x == y - n;\nloop invariant x == n - y + 1;\nloop invariant x == y - n + 1;\nloop invariant x == n - y + 1 ==> x > 0;\nloop invariant x == y - n + 1 ==> x > 0;\nloop invariant x == n - y + 1 ==> x <= n;\nloop invariant x == y - n + 1 ==> x <= n;\nloop invariant x > 0 ==> x <= n;\nloop invariant x > 0 ==> x <= n;\nloop invariant x <= n ==> x > 0;\nloop invariant x <= n ==> x > 0;\nloop invariant y >= 0 ==> y <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant y <= n ==> y >= 0;\nloop invariant y <= n ==> y >= 0;\nloop invariant x + y == n ==> x >= 0;\nloop invariant x + y == n ==> x >= 0;\nloop invariant x + y == n ==> x <= n;\nloop invariant x + y == n ==> x <= n;\nloop invariant x + y == n - x ==> x >= 0;\nloop invariant x + y == n - x ==> x >= 0;\nloop invariant x + y == n - x ==> x <= n;\nloop invariant x + y == n - x ==> x <= n;\nloop invariant y == n - x ==> y >= 0;\nloop invariant y == n - x ==> y >= 0;\nloop invariant y == n - x ==> y <= n;\nloop invariant y == n - x ==> y <= n;\nloop invariant x == n - y ==> x >= 0;\nloop invariant x == n - y ==> x >= 0;\nloop invariant x == n - y ==> x <= n;\nloop invariant x == n - y ==> x <= n;\nloop invariant x == y - n ==> x >= 0;\nloop invariant x == y - n ==> x >= 0;\nloop invariant x == y - n ==> x <= n;\nloop invariant x == y - n ==> x <= n;\nloop invariant x == n - y + 1 ==> x >= 0;\nloop invariant x == n - y + 1 ==> x >= 0;\nloop invariant x == n - y + 1 ==> x <= n;\nloop invariant x == n - y + 1 ==> x <= n;\nloop invariant x == y - n + 1 ==> x >= 0;\nloop invariant x == y - n + 1 ==> x >= 0;\nloop invariant x == y - n + 1 ==> x <= n;\nloop invariant x == y - n + 1 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 1 <= x <= n;\nloop invariant x > y;\nloop invariant y <= n - x;\nloop invariant x + y <= n;\nloop invariant x*y <= n*(n+1)/2;\nloop invariant y*(n-x) <= n*(n-1)/2;\nloop invariant x*y + y*(n-x) <= n*(n-1);\nloop invariant x*y + y*(n-x) <= n*(n-1)/2;\nloop invariant x*y + y*(n-x) <= n*(n-1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant x + y <= n;\nloop invariant x * (x - 1) / 2 <= y <= (n - x) * (n - x + 1) / 2;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n - x <= y <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant y == n - x ==> x <= n;\nloop invariant y == n - x ==> y >= 0;\nloop invariant y == n - x ==> x == n;\nloop invariant x <= n ==> y >= 0;\nloop invariant x <= n ==> y <= n;\nloop invariant x <= n ==> y >= 0 ==> x == n;\nloop invariant x <= n ==> y <= n ==> x == n;\nloop invariant x <= n ==> y >= 0 ==> y == 0;\nloop invariant x <= n ==> y <= n ==> y == 0;\nloop invariant x <= n ==> y >= 0 ==> y == 0 ==> x == n;\nloop invariant x <= n ==> y <= n ==> y == 0 ==> x == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n+1;\nloop invariant y == n - x;\nloop invariant x - 1 <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x + 1;\nloop invariant y + x <= n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 1 <= x <= n;\nloop invariant y = n - x;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant n > 0 ==> y >= 0;\nloop invariant (n > 0) ==> (y >= 0);\nloop invariant (n > 0) ==> (y >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\nloop invariant i4: x >= 1;\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant y = n - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y = n - (x - 1) and n > 0 ==> y >= 0;\nloop invariant y = n - (x - 1) and n > 0 ==> y <= n;\nloop invariant x >= 1;\nloop invariant x <= n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant y = n - x;\nloop invariant y >= n - (x + 1);\nloop invariant y <= n;\nloop invariant x >= 1;\nloop invariant x <= n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n\nloop invariant i5: x >= 1;\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x + y == n;\nloop invariant x + y == n;\nloop invariant x + y == n ==> y == n - x;\nloop invariant x + y == n ==> x <= n;\nloop invariant x + y == n ==> x >= 0;\nloop invariant x + y == n ==> y >= 0;\nloop invariant x + y == n ==> y <= n;\nloop invariant x + y == n ==> y >= n - x;\nloop invariant x + y == n ==> y <= n - x;\nloop invariant x + y == n ==> x + y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n\n\nloop invariant i6: x + y == n ==> y == n - x;\n\nloop invariant i8: x + y == n ==> x >= 0;\n\nloop invariant i10: x + y == n ==> y <= n;\nloop invariant i11: x + y == n ==> y >= n - x;\nloop invariant i12: x + y == n ==> y <= n - x;\nloop invariant i13: x + y == n ==> x + y == n;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y = n - x;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n;\nloop invariant y == n - x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x + y == n;\nloop invariant x + y == n - x;\nloop invariant x == n - y;\nloop invariant x == y - n;\nloop invariant x == n - y + 1;\nloop invariant x == y - n + 1;\nloop invariant x == n - y + 1 ==> x > 0;\nloop invariant x == y - n + 1 ==> x > 0;\nloop invariant x == n - y + 1 ==> x <= n;\nloop invariant x == y - n + 1 ==> x <= n;\nloop invariant x > 0 ==> x <= n;\nloop invariant x > 0 ==> x <= n;\nloop invariant x <= n ==> x > 0;\nloop invariant x <= n ==> x > 0;\nloop invariant y >= 0 ==> y <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant y <= n ==> y >= 0;\nloop invariant y <= n ==> y >= 0;\nloop invariant x + y == n ==> x >= 0;\nloop invariant x + y == n ==> x >= 0;\nloop invariant x + y == n ==> x <= n;\nloop invariant x + y == n ==> x <= n;\nloop invariant x + y == n - x ==> x >= 0;\nloop invariant x + y == n - x ==> x >= 0;\nloop invariant x + y == n - x ==> x <= n;\nloop invariant x + y == n - x ==> x <= n;\nloop invariant y == n - x ==> y >= 0;\nloop invariant y == n - x ==> y >= 0;\nloop invariant y == n - x ==> y <= n;\nloop invariant y == n - x ==> y <= n;\nloop invariant x == n - y ==> x >= 0;\nloop invariant x == n - y ==> x >= 0;\nloop invariant x == n - y ==> x <= n;\nloop invariant x == n - y ==> x <= n;\nloop invariant x == y - n ==> x >= 0;\nloop invariant x == y - n ==> x >= 0;\nloop invariant x == y - n ==> x <= n;\nloop invariant x == y - n ==> x <= n;\nloop invariant x == n - y + 1 ==> x >= 0;\nloop invariant x == n - y + 1 ==> x >= 0;\nloop invariant x == n - y + 1 ==> x <= n;\nloop invariant x == n - y + 1 ==> x <= n;\nloop invariant x == y - n + 1 ==> x >= 0;\nloop invariant x == y - n + 1 ==> x >= 0;\nloop invariant x == y - n + 1 ==> x <= n;\nloop invariant x == y - n + 1 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x <= n ==> x >= 0;\nloop invariant x <= n ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\nloop invariant i4: x >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i14: x == n - y + 1 ==> x > 0;\nloop invariant i15: x == y - n + 1 ==> x > 0;\n\n\n\nloop invariant i19: x <= n ==> x > 0;\n\n\nloop invariant i22: x + y == n ==> x >= 0;\n\nloop invariant i24: x + y == n - x ==> x >= 0;\n\n\nloop invariant i27: y == n - x ==> y <= n;\nloop invariant i28: x == n - y ==> x >= 0;\n\nloop invariant i30: x == y - n ==> x >= 0;\n\nloop invariant i32: x == n - y + 1 ==> x >= 0;\nloop invariant i33: x == y - n + 1 ==> x >= 0;\n\nloop invariant i35: x <= n ==> x >= 0;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 1 <= x <= n;\nloop invariant x > y;\nloop invariant y <= n - x;\nloop invariant x + y <= n;\nloop invariant x*y <= n*(n+1)/2;\nloop invariant y*(n-x) <= n*(n-1)/2;\nloop invariant x*y + y*(n-x) <= n*(n-1);\nloop invariant x*y + y*(n-x) <= n*(n-1)/2;\nloop invariant x*y + y*(n-x) <= n*(n-1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant x + y <= n;\nloop invariant x * (x - 1) / 2 <= y <= (n - x) * (n - x + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 37: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: n - x <= y <= n;\nloop invariant i3: x >= 1;\nloop invariant i4: y >= 0;\nloop invariant i5: y <= n;\nloop invariant i6: 1 <= x <= n;\nloop invariant i7: 0 <= y <= n - x;\nloop invariant i8: y == n - x ==> x <= n;\nloop invariant i9: y == n - x ==> y >= 0;\nloop invariant i10: y == n - x ==> x == n;\nloop invariant i11: x <= n ==> y >= 0;\nloop invariant i12: x <= n ==> y <= n;\nloop invariant i13: x <= n ==> y >= 0 ==> x == n;\nloop invariant i14: x <= n ==> y <= n ==> x == n;\nloop invariant i15: x <= n ==> y >= 0 ==> y == 0;\nloop invariant i16: x <= n ==> y <= n ==> y == 0;\nloop invariant i17: x <= n ==> y >= 0 ==> y == 0 ==> x == n;\nloop invariant i18: x <= n ==> y <= n ==> y == 0 ==> x == n;\nloop invariant i19: 1 <= x <= n+1;\nloop invariant i20: y == n - x;\nloop invariant i21: x - 1 <= n;\nloop invariant i22: 1 <= n;\nloop invariant i23: 1 <= x <= n + 1;\nloop invariant i24: 0 <= y <= n - x + 1;\nloop invariant i25: y + x <= n + 1;\nloop invariant i26: y = n - x;\nloop invariant i27: x <= n;\nloop invariant i28: n > 0 ==> y >= 0;\nloop invariant i29: (n > 0) ==> (y >= 0);\nloop invariant i30: y = n - (x - 1) and n > 0 ==> y >= 0;\nloop invariant i31: y = n - (x - 1) and n > 0 ==> y <= n;\nloop invariant i32: x <= n + 1;\nloop invariant i33: 0 <= x <= n + 1;\nloop invariant i34: y >= n - (x + 1);\nloop invariant i35: x + y == n;\nloop invariant i36: x + y == n ==> y == n - x;\nloop invariant i37: x + y == n ==> x <= n;\nloop invariant i38: x + y == n ==> x >= 0;\nloop invariant i39: x + y == n ==> y >= 0;\nloop invariant i40: x + y == n ==> y <= n;\nloop invariant i41: x + y == n ==> y >= n - x;\nloop invariant i42: x + y == n ==> y <= n - x;\nloop invariant i43: x + y == n ==> x + y == n;\nloop invariant i44: 0 <= y <= n;\nloop invariant i45: x >= 0;\nloop invariant i46: x + y == n - x;\nloop invariant i47: x == n - y;\nloop invariant i48: x == y - n;\nloop invariant i49: x == n - y + 1;\nloop invariant i50: x == y - n + 1;\nloop invariant i51: x == n - y + 1 ==> x > 0;\nloop invariant i52: x == y - n + 1 ==> x > 0;\nloop invariant i53: x == n - y + 1 ==> x <= n;\nloop invariant i54: x == y - n + 1 ==> x <= n;\nloop invariant i55: x > 0 ==> x <= n;\nloop invariant i56: x <= n ==> x > 0;\nloop invariant i57: y >= 0 ==> y <= n;\nloop invariant i58: y <= n ==> y >= 0;\nloop invariant i59: x + y == n - x ==> x >= 0;\nloop invariant i60: x + y == n - x ==> x <= n;\nloop invariant i61: y == n - x ==> y <= n;\nloop invariant i62: x == n - y ==> x >= 0;\nloop invariant i63: x == n - y ==> x <= n;\nloop invariant i64: x == y - n ==> x >= 0;\nloop invariant i65: x == y - n ==> x <= n;\nloop invariant i66: x == n - y + 1 ==> x >= 0;\nloop invariant i67: x == y - n + 1 ==> x >= 0;\nloop invariant i68: x >= 0 ==> x <= n;\nloop invariant i69: x <= n ==> x >= 0;\nloop invariant i70: 0 <= n;\nloop invariant i71: x > y;\nloop invariant i72: y <= n - x;\nloop invariant i73: x + y <= n;\nloop invariant i74: x*y <= n*(n+1)/2;\nloop invariant i75: y*(n-x) <= n*(n-1)/2;\nloop invariant i76: x*y + y*(n-x) <= n*(n-1);\nloop invariant i77: x*y + y*(n-x) <= n*(n-1)/2;\nloop invariant i78: x * (x - 1) / 2 <= y <= (n - x) * (n - x + 1) / 2;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i36: x + y == n ==> y == n - x;\n\nloop invariant i38: x + y == n ==> x >= 0;\n\nloop invariant i40: x + y == n ==> y <= n;\nloop invariant i41: x + y == n ==> y >= n - x;\nloop invariant i42: x + y == n ==> y <= n - x;\nloop invariant i43: x + y == n ==> x + y == n;\n\nloop invariant i45: x >= 0;\n\n\n\n\n\nloop invariant i51: x == n - y + 1 ==> x > 0;\nloop invariant i52: x == y - n + 1 ==> x > 0;\n\n\n\nloop invariant i56: x <= n ==> x > 0;\n\n\nloop invariant i59: x + y == n - x ==> x >= 0;\n\nloop invariant i61: y == n - x ==> y <= n;\nloop invariant i62: x == n - y ==> x >= 0;\n\nloop invariant i64: x == y - n ==> x >= 0;\n\nloop invariant i66: x == n - y + 1 ==> x >= 0;\nloop invariant i67: x == y - n + 1 ==> x >= 0;\n\nloop invariant i69: x <= n ==> x >= 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c"
        ],
        "skipped": [],
        "total": 57,
        "success_count": 47,
        "failure_count": 10,
        "success_rate": 0.8245614035087719
    }
}