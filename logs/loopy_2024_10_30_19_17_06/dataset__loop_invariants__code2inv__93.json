{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/93.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  while ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y == (i * i) + (i * (3 * n - i));\nloop invariant (i == n) ==> (x == (i * i) + (i * (3 * n - i)));\nloop invariant (i == n) ==> (y == (i * i) + (i * (3 * n - i)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (2 * n);\nloop invariant ((x + y) == (3 * i));\nloop invariant (x >= 0);\nloop invariant (y >= 0);\nloop invariant (x <= (2 * n));\nloop invariant (y <= (2 * n));\nloop invariant (x <= (y + n));\nloop invariant (y <= (x + n));\nloop invariant (x <= (x + y));\nloop invariant (y <= (x + y));\nloop invariant (x <= (n + (y - 1)));\nloop invariant (y <= (n + (x - 1)));\nloop invariant (x <= (2 * (i - 1)));\nloop invariant (y <= (2 * (i - 1)));\nloop invariant (x <= (n + (y - 1)));\nloop invariant (y <= (n + (x - 1)));\nloop invariant ((x + y) == (3 * i));\nloop invariant ((x + y) >= (3 * n));\nloop invariant ((x + y) <= (3 * n));\nloop invariant ((x + y) == (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y == 3 * i;\nloop invariant x + y == 3 * n ==> i == n;\nloop invariant i == n ==> (x + y) == (3 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y <= 3 * n;\nloop invariant x == 3 * i + 2 * (y - i);\nloop invariant (if i < n then x + y == 3 * n else x + y == 3 * i + 2 * (y - i));\nloop invariant ((i == 0) ==> (x == 0));\nloop invariant ((i == 0) ==> (y == 0));\nloop invariant ((unknown() ==> (x == 3 * i + 2 * (y - i)));\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y <= 3 * n;\nloop invariant x == 3 * i + 2 * (y - i);\nloop invariant (if i < n then x + y == 3 * n else x + y == 3 * i + 2 * (y - i));\nloop invariant ((i == 0) ==> (x == 0));\nloop invariant ((i == 0) ==> (y == 0));\nloop invariant ((unknown() ==> (x == 3 * i + 2 * (y - i)));\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant ( ( ( 0 <= i ) && ( i <= n ) ) && ( ( 0 <= x ) && ( x <= 3 * i ) ) && ( ( 0 <= y ) && ( y <= 3 * i ) ) && ( ( x + y ) == ( ( i + 3 * ( i * ( ( i - 1 ) / 2 ) ) ) ) ) );\nloop invariant ( ( ( 0 <= i ) && ( i <= n ) ) && ( ( 0 <= x ) && ( x <= 3 * i ) ) && ( ( 0 <= y ) && ( y <= 3 * i ) ) && ( ( x + y ) == ( ( i + 3 * ( i * ( ( i - 1 ) / 2 ) ) ) ) ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (2 * n);\nloop invariant (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) == (3 * n) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 2 * i;\nloop invariant 0 <= y <= i;\nloop invariant 0 <= x + y <= 3 * i;\nloop invariant x + y >= 3 * i - 2 * y;\nloop invariant x + y >= 3 * i - 2 * x;\nloop invariant x + y >= 3 * i - y - x;\nloop invariant x + y >= 3 * i - 3 * x;\nloop invariant x + y >= 3 * i - 3 * y;\nloop invariant x + y >= 3 * i - 4 * x;\nloop invariant x + y >= 3 * i - 4 * y;\nloop invariant x + y >= 3 * i - 5 * x;\nloop invariant x + y >= 3 * i - 5 * y;\nloop invariant x + y >= 3 * i - 6 * x;\nloop invariant x + y >= 3 * i - 6 * y;\nloop invariant x + y >= 3 * i - 7 * x;\nloop invariant x + y >= 3 * i - 7 * y;\nloop invariant x + y >= 3 * i - 8 * x;\nloop invariant x + y >= 3 * i - 8 * y;\nloop invariant x + y >= 3 * i - 9 * x;\nloop invariant x + y >= 3 * i - 9 * y;\nloop invariant x + y >= 3 * i - 10 * x;\nloop invariant x + y >= 3 * i - 10 * y;\nloop invariant x + y >= 3 * i - 11 * x;\nloop invariant x + y >= 3 * i - 11 * y;\nloop invariant x + y >= 3 * i - 12 * x;\nloop invariant x + y >= 3 * i - 12 * y;\nloop invariant x + y >= 3 * i - 13 * x;\nloop invariant x + y >= 3 * i - 13 * y;\nloop invariant x + y >= 3 * i - 14 * x;\nloop invariant x + y >= 3 * i - 14 * y;\nloop invariant x + y >= 3 * i - 15 * x;\nloop invariant x + y >= 3 * i - 15 * y;\nloop invariant x + y >= 3 * i - 16 * x;\nloop invariant x + y >= 3 * i - 16 * y;\nloop invariant x + y >= 3 * i - 17 * x;\nloop invariant x + y >= 3 * i - 17 * y;\nloop invariant x + y >= 3 * i - 18 * x;\nloop invariant x + y >= 3 * i - 18 * y;\nloop invariant x + y >= 3 * i - 19 * x;\nloop invariant x + y >= 3 * i - 19 * y;\nloop invariant x + y >= 3 * i - 20 * x;\nloop invariant x + y >= 3 * i - 20 * y;\nloop invariant x + y >= 3 * i - 21 * x;\nloop invariant x + y >= 3 * i - 21 * y;\nloop invariant x + y >= 3 * i - 22 * x;\nloop invariant x + y >= 3 * i - 22 * y;\nloop invariant x + y >= 3 * i - 23 * x;\nloop invariant x + y >= 3 * i - 23 * y;\nloop invariant x + y >= 3 * i - 24 * x;\nloop invariant x + y >= 3 * i - 24 * y;\nloop invariant x + y >= 3 * i - 25 * x;\nloop invariant x + y >= 3 * i - 25 * y;\nloop invariant x + y >= 3 * i - 26 * x;\nloop invariant x + y >= 3 * i - 26 * y;\nloop invariant x + y >= 3 * i - 27 * x;\nloop invariant x + y >= 3 * i - 27 * y;\nloop invariant x + y >= 3 * i - 28 * x;\nloop invariant x + y >= 3 * i - 28 * y;\nloop invariant x + y >= 3 * i - 29 * x;\nloop invariant x + y >= 3 * i - 29 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == 3 * i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= x + y <= 3 * n;\nloop invariant 0 <= x <= n * 2;\nloop invariant 0 <= y <= n * 2;\nloop invariant (x + y) <= (2 * i + 3 * (n - i));\nloop invariant x <= (2 * i + 3 * (n - i));\nloop invariant y <= (2 * i + 3 * (n - i));\nloop invariant x + y <= (2 * i + 3 * (n - i));\nloop invariant (x + y) <= (2 * n);\nloop invariant 1 <= i <= n;\nloop invariant 0 <= x + y <= 3 * n;\nloop invariant 0 <= x <= n * 2;\nloop invariant 0 <= y <= n * 2;\nloop invariant (x + y) <= (2 * i + 3 * (n - i));\nloop invariant x <= (2 * i + 3 * (n - i));\nloop invariant y <= (2 * i + 3 * (n - i));\nloop invariant x + y <= (2 * i + 3 * (n - i));\nloop invariant (x + y) <= (2 * n);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 3 * i;\nloop invariant x + y <= 3 * (i + 1);\nloop invariant (if unknown() then x >= 2 * i + 1 else x >= 2 * i) ==> (x + y >= 3 * i);\nloop invariant (if unknown() then y >= i else y >= i + 1) ==> (x + y >= 3 * i);\nloop invariant (if unknown() then x <= 2 * i + 1 else x <= 2 * i) ==> (x + y <= 3 * (i + 1));\nloop invariant (if unknown() then y <= i else y <= i + 1) ==> (x + y <= 3 * (i + 1));\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant n >= 0;\nloop invariant (i < n) ==> ((x + y) == (3 * i));\nloop invariant (i < n) ==> ((x + y) <= (3 * n));\nloop invariant (i < n) ==> ((x + y) >= (3 * i));\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x + y >= 3 * i;\nloop invariant x + y <= 3 * n;\nloop invariant x <= 2 * i;\nloop invariant y <= i;\nloop invariant x + y >= 3 * i ==> x >= 3 * i - y;\nloop invariant x + y <= 3 * n ==> x <= 3 * n - y;\nloop invariant x + y >= 3 * i ==> y >= i - x / 2;\nloop invariant x + y <= 3 * n ==> y <= n - i;\nloop invariant x + y >= 3 * i ==> x - y >= i;\nloop invariant x + y <= 3 * n ==> x - y <= n;\nloop invariant x + y >= 3 * i ==> y - x >= i;\nloop invariant x + y <= 3 * n ==> y - x <= n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 3 * i;\nloop invariant x + y <= 3 * (i + 1);\nloop invariant x + y == 3 * n ==> x == 3 * i;\nloop invariant x + y == 3 * n ==> y == 3 * (n - i);\nloop invariant x + y != 3 * n ==> i < n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y == (i * i) + (i * (3 * n - i));\nloop invariant (i == n) ==> (x == (i * i) + (i * (3 * n - i)));\nloop invariant (i == n) ==> (y == (i * i) + (i * (3 * n - i)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (2 * n);\nloop invariant ((x + y) == (3 * i));\nloop invariant (x >= 0);\nloop invariant (y >= 0);\nloop invariant (x <= (2 * n));\nloop invariant (y <= (2 * n));\nloop invariant (x <= (y + n));\nloop invariant (y <= (x + n));\nloop invariant (x <= (x + y));\nloop invariant (y <= (x + y));\nloop invariant (x <= (n + (y - 1)));\nloop invariant (y <= (n + (x - 1)));\nloop invariant (x <= (2 * (i - 1)));\nloop invariant (y <= (2 * (i - 1)));\nloop invariant (x <= (n + (y - 1)));\nloop invariant (y <= (n + (x - 1)));\nloop invariant ((x + y) == (3 * i));\nloop invariant ((x + y) >= (3 * n));\nloop invariant ((x + y) <= (3 * n));\nloop invariant ((x + y) == (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\nloop invariant ((x + y) != (3 * n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: ((x + y) == (3 * i));\nloop invariant i5: (x >= 0);\nloop invariant i6: (y >= 0);\n\n\n\n\nloop invariant i11: (x <= (x + y));\nloop invariant i12: (y <= (x + y));\n\n\n\n\n\nloop invariant i18: ((x + y) <= (3 * n));\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y == 3 * i;\nloop invariant x + y == 3 * n ==> i == n;\nloop invariant i == n ==> (x + y) == (3 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x <= 3 * n;\nloop invariant i3: 0 <= y <= 3 * n;\nloop invariant i4: x + y == 3 * i;\nloop invariant i5: x + y == 3 * n ==> i == n;\nloop invariant i6: i == n ==> (x + y) == (3 * n);\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y <= 3 * n;\nloop invariant x == 3 * i + 2 * (y - i);\nloop invariant (if i < n then x + y == 3 * n else x + y == 3 * i + 2 * (y - i));\nloop invariant ((i == 0) ==> (x == 0));\nloop invariant ((i == 0) ==> (y == 0));\nloop invariant ((unknown() ==> (x == 3 * i + 2 * (y - i)));\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y <= 3 * n;\nloop invariant x == 3 * i + 2 * (y - i);\nloop invariant (if i < n then x + y == 3 * n else x + y == 3 * i + 2 * (y - i));\nloop invariant ((i == 0) ==> (x == 0));\nloop invariant ((i == 0) ==> (y == 0));\nloop invariant ((unknown() ==> (x == 3 * i + 2 * (y - i)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\nloop invariant i7: ((i == 0) ==> (x == 0));\nloop invariant i8: ((i == 0) ==> (y == 0));\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( ( ( 0 <= i ) && ( i <= n ) ) && ( ( 0 <= x ) && ( x <= 3 * i ) ) && ( ( 0 <= y ) && ( y <= 3 * i ) ) && ( ( x + y ) == ( ( i + 3 * ( i * ( ( i - 1 ) / 2 ) ) ) ) ) );\nloop invariant ( ( ( 0 <= i ) && ( i <= n ) ) && ( ( 0 <= x ) && ( x <= 3 * i ) ) && ( ( 0 <= y ) && ( y <= 3 * i ) ) && ( ( x + y ) == ( ( i + 3 * ( i * ( ( i - 1 ) / 2 ) ) ) ) ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (2 * n);\nloop invariant (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) == (3 * n) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant (x + y) >= (3 * i) ==> i == n;\nloop invariant (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: (x + y) >= (3 * i);\n\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 2 * i;\nloop invariant 0 <= y <= i;\nloop invariant 0 <= x + y <= 3 * i;\nloop invariant x + y >= 3 * i - 2 * y;\nloop invariant x + y >= 3 * i - 2 * x;\nloop invariant x + y >= 3 * i - y - x;\nloop invariant x + y >= 3 * i - 3 * x;\nloop invariant x + y >= 3 * i - 3 * y;\nloop invariant x + y >= 3 * i - 4 * x;\nloop invariant x + y >= 3 * i - 4 * y;\nloop invariant x + y >= 3 * i - 5 * x;\nloop invariant x + y >= 3 * i - 5 * y;\nloop invariant x + y >= 3 * i - 6 * x;\nloop invariant x + y >= 3 * i - 6 * y;\nloop invariant x + y >= 3 * i - 7 * x;\nloop invariant x + y >= 3 * i - 7 * y;\nloop invariant x + y >= 3 * i - 8 * x;\nloop invariant x + y >= 3 * i - 8 * y;\nloop invariant x + y >= 3 * i - 9 * x;\nloop invariant x + y >= 3 * i - 9 * y;\nloop invariant x + y >= 3 * i - 10 * x;\nloop invariant x + y >= 3 * i - 10 * y;\nloop invariant x + y >= 3 * i - 11 * x;\nloop invariant x + y >= 3 * i - 11 * y;\nloop invariant x + y >= 3 * i - 12 * x;\nloop invariant x + y >= 3 * i - 12 * y;\nloop invariant x + y >= 3 * i - 13 * x;\nloop invariant x + y >= 3 * i - 13 * y;\nloop invariant x + y >= 3 * i - 14 * x;\nloop invariant x + y >= 3 * i - 14 * y;\nloop invariant x + y >= 3 * i - 15 * x;\nloop invariant x + y >= 3 * i - 15 * y;\nloop invariant x + y >= 3 * i - 16 * x;\nloop invariant x + y >= 3 * i - 16 * y;\nloop invariant x + y >= 3 * i - 17 * x;\nloop invariant x + y >= 3 * i - 17 * y;\nloop invariant x + y >= 3 * i - 18 * x;\nloop invariant x + y >= 3 * i - 18 * y;\nloop invariant x + y >= 3 * i - 19 * x;\nloop invariant x + y >= 3 * i - 19 * y;\nloop invariant x + y >= 3 * i - 20 * x;\nloop invariant x + y >= 3 * i - 20 * y;\nloop invariant x + y >= 3 * i - 21 * x;\nloop invariant x + y >= 3 * i - 21 * y;\nloop invariant x + y >= 3 * i - 22 * x;\nloop invariant x + y >= 3 * i - 22 * y;\nloop invariant x + y >= 3 * i - 23 * x;\nloop invariant x + y >= 3 * i - 23 * y;\nloop invariant x + y >= 3 * i - 24 * x;\nloop invariant x + y >= 3 * i - 24 * y;\nloop invariant x + y >= 3 * i - 25 * x;\nloop invariant x + y >= 3 * i - 25 * y;\nloop invariant x + y >= 3 * i - 26 * x;\nloop invariant x + y >= 3 * i - 26 * y;\nloop invariant x + y >= 3 * i - 27 * x;\nloop invariant x + y >= 3 * i - 27 * y;\nloop invariant x + y >= 3 * i - 28 * x;\nloop invariant x + y >= 3 * i - 28 * y;\nloop invariant x + y >= 3 * i - 29 * x;\nloop invariant x + y >= 3 * i - 29 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x <= 2 * i;\n\nloop invariant i4: 0 <= x + y <= 3 * i;\nloop invariant i5: x + y >= 3 * i - 2 * y;\nloop invariant i6: x + y >= 3 * i - 2 * x;\nloop invariant i7: x + y >= 3 * i - y - x;\nloop invariant i8: x + y >= 3 * i - 3 * x;\nloop invariant i9: x + y >= 3 * i - 3 * y;\nloop invariant i10: x + y >= 3 * i - 4 * x;\nloop invariant i11: x + y >= 3 * i - 4 * y;\nloop invariant i12: x + y >= 3 * i - 5 * x;\nloop invariant i13: x + y >= 3 * i - 5 * y;\nloop invariant i14: x + y >= 3 * i - 6 * x;\nloop invariant i15: x + y >= 3 * i - 6 * y;\nloop invariant i16: x + y >= 3 * i - 7 * x;\nloop invariant i17: x + y >= 3 * i - 7 * y;\nloop invariant i18: x + y >= 3 * i - 8 * x;\nloop invariant i19: x + y >= 3 * i - 8 * y;\nloop invariant i20: x + y >= 3 * i - 9 * x;\nloop invariant i21: x + y >= 3 * i - 9 * y;\nloop invariant i22: x + y >= 3 * i - 10 * x;\nloop invariant i23: x + y >= 3 * i - 10 * y;\nloop invariant i24: x + y >= 3 * i - 11 * x;\nloop invariant i25: x + y >= 3 * i - 11 * y;\nloop invariant i26: x + y >= 3 * i - 12 * x;\nloop invariant i27: x + y >= 3 * i - 12 * y;\nloop invariant i28: x + y >= 3 * i - 13 * x;\nloop invariant i29: x + y >= 3 * i - 13 * y;\nloop invariant i30: x + y >= 3 * i - 14 * x;\nloop invariant i31: x + y >= 3 * i - 14 * y;\nloop invariant i32: x + y >= 3 * i - 15 * x;\nloop invariant i33: x + y >= 3 * i - 15 * y;\nloop invariant i34: x + y >= 3 * i - 16 * x;\nloop invariant i35: x + y >= 3 * i - 16 * y;\nloop invariant i36: x + y >= 3 * i - 17 * x;\nloop invariant i37: x + y >= 3 * i - 17 * y;\nloop invariant i38: x + y >= 3 * i - 18 * x;\nloop invariant i39: x + y >= 3 * i - 18 * y;\nloop invariant i40: x + y >= 3 * i - 19 * x;\nloop invariant i41: x + y >= 3 * i - 19 * y;\nloop invariant i42: x + y >= 3 * i - 20 * x;\nloop invariant i43: x + y >= 3 * i - 20 * y;\nloop invariant i44: x + y >= 3 * i - 21 * x;\nloop invariant i45: x + y >= 3 * i - 21 * y;\nloop invariant i46: x + y >= 3 * i - 22 * x;\nloop invariant i47: x + y >= 3 * i - 22 * y;\nloop invariant i48: x + y >= 3 * i - 23 * x;\nloop invariant i49: x + y >= 3 * i - 23 * y;\nloop invariant i50: x + y >= 3 * i - 24 * x;\nloop invariant i51: x + y >= 3 * i - 24 * y;\nloop invariant i52: x + y >= 3 * i - 25 * x;\nloop invariant i53: x + y >= 3 * i - 25 * y;\nloop invariant i54: x + y >= 3 * i - 26 * x;\nloop invariant i55: x + y >= 3 * i - 26 * y;\nloop invariant i56: x + y >= 3 * i - 27 * x;\nloop invariant i57: x + y >= 3 * i - 27 * y;\nloop invariant i58: x + y >= 3 * i - 28 * x;\nloop invariant i59: x + y >= 3 * i - 28 * y;\nloop invariant i60: x + y >= 3 * i - 29 * x;\nloop invariant i61: x + y >= 3 * i - 29 * y;\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == 3 * i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\nloop invariant i3: x + y == 3 * i;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: i >= 0;\nloop invariant i7: i <= n;\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= x + y <= 3 * n;\nloop invariant 0 <= x <= n * 2;\nloop invariant 0 <= y <= n * 2;\nloop invariant (x + y) <= (2 * i + 3 * (n - i));\nloop invariant x <= (2 * i + 3 * (n - i));\nloop invariant y <= (2 * i + 3 * (n - i));\nloop invariant x + y <= (2 * i + 3 * (n - i));\nloop invariant (x + y) <= (2 * n);\nloop invariant 1 <= i <= n;\nloop invariant 0 <= x + y <= 3 * n;\nloop invariant 0 <= x <= n * 2;\nloop invariant 0 <= y <= n * 2;\nloop invariant (x + y) <= (2 * i + 3 * (n - i));\nloop invariant x <= (2 * i + 3 * (n - i));\nloop invariant y <= (2 * i + 3 * (n - i));\nloop invariant x + y <= (2 * i + 3 * (n - i));\nloop invariant (x + y) <= (2 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 3 * i;\nloop invariant x + y <= 3 * (i + 1);\nloop invariant (if unknown() then x >= 2 * i + 1 else x >= 2 * i) ==> (x + y >= 3 * i);\nloop invariant (if unknown() then y >= i else y >= i + 1) ==> (x + y >= 3 * i);\nloop invariant (if unknown() then x <= 2 * i + 1 else x <= 2 * i) ==> (x + y <= 3 * (i + 1));\nloop invariant (if unknown() then y <= i else y <= i + 1) ==> (x + y <= 3 * (i + 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x + y >= 3 * i;\nloop invariant i6: x + y <= 3 * (i + 1);\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant n >= 0;\nloop invariant (i < n) ==> ((x + y) == (3 * i));\nloop invariant (i < n) ==> ((x + y) <= (3 * n));\nloop invariant (i < n) ==> ((x + y) >= (3 * i));\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\nloop invariant (i < n) ==> ((x + y) >= 0);\nloop invariant (i < n) ==> ((x + y) <= 3 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= n;\nloop invariant i5: n >= 0;\nloop invariant i6: (i < n) ==> ((x + y) == (3 * i));\nloop invariant i7: (i < n) ==> ((x + y) <= (3 * n));\nloop invariant i8: (i < n) ==> ((x + y) >= (3 * i));\nloop invariant i9: (i < n) ==> ((x + y) >= 0);\nloop invariant i10: (i < n) ==> ((x + y) <= 3 * n);\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\nloop invariant (x + y == 3 * n) ==> (x == y);\nloop invariant (x >= y) ==> (x + y == 3 * n);\nloop invariant (x < y) ==> (x + y == 3 * n);\nloop invariant (x == y) ==> (x + y == 3 * n);\nloop invariant (x + y == 3 * n) ==> (x >= y);\nloop invariant (x + y == 3 * n) ==> (x < y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x + y >= 3 * i;\nloop invariant x + y <= 3 * n;\nloop invariant x <= 2 * i;\nloop invariant y <= i;\nloop invariant x + y >= 3 * i ==> x >= 3 * i - y;\nloop invariant x + y <= 3 * n ==> x <= 3 * n - y;\nloop invariant x + y >= 3 * i ==> y >= i - x / 2;\nloop invariant x + y <= 3 * n ==> y <= n - i;\nloop invariant x + y >= 3 * i ==> x - y >= i;\nloop invariant x + y <= 3 * n ==> x - y <= n;\nloop invariant x + y >= 3 * i ==> y - x >= i;\nloop invariant x + y <= 3 * n ==> y - x <= n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= y;\nloop invariant i4: x + y >= 3 * i;\n\nloop invariant i6: x <= 2 * i;\n\nloop invariant i8: x + y >= 3 * i ==> x >= 3 * i - y;\nloop invariant i9: x + y <= 3 * n ==> x <= 3 * n - y;\nloop invariant i10: x + y >= 3 * i ==> y >= i - x / 2;\n\n\nloop invariant i13: x + y <= 3 * n ==> x - y <= n;\n\n\n\n\nloop invariant i18: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i19: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i20: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i21: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i22: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i23: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i24: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i25: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i26: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i27: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i28: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i29: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 3 * i;\nloop invariant x + y <= 3 * (i + 1);\nloop invariant x + y == 3 * n ==> x == 3 * i;\nloop invariant x + y == 3 * n ==> y == 3 * (n - i);\nloop invariant x + y != 3 * n ==> i < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x + y >= 3 * i;\nloop invariant i5: x + y <= 3 * (i + 1);\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 52: unexpected token 'i'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x <= 3 * n;\nloop invariant i3: 0 <= y <= 3 * n;\nloop invariant i4: x + y == (i * i) + (i * (3 * n - i));\nloop invariant i5: (i == n) ==> (x == (i * i) + (i * (3 * n - i)));\nloop invariant i6: (i == n) ==> (y == (i * i) + (i * (3 * n - i)));\nloop invariant i7: 0 <= x <= (2 * n);\nloop invariant i8: 0 <= y <= (2 * n);\nloop invariant i9: ((x + y) == (3 * i));\nloop invariant i10: (x >= 0);\nloop invariant i11: (y >= 0);\nloop invariant i12: (x <= (2 * n));\nloop invariant i13: (y <= (2 * n));\nloop invariant i14: (x <= (y + n));\nloop invariant i15: (y <= (x + n));\nloop invariant i16: (x <= (x + y));\nloop invariant i17: (y <= (x + y));\nloop invariant i18: (x <= (n + (y - 1)));\nloop invariant i19: (y <= (n + (x - 1)));\nloop invariant i20: (x <= (2 * (i - 1)));\nloop invariant i21: (y <= (2 * (i - 1)));\nloop invariant i22: ((x + y) >= (3 * n));\nloop invariant i23: ((x + y) <= (3 * n));\nloop invariant i24: ((x + y) == (3 * n));\nloop invariant i25: ((x + y) != (3 * n));\nloop invariant i26: x + y == 3 * i;\nloop invariant i27: x + y == 3 * n ==> i == n;\nloop invariant i28: i == n ==> (x + y) == (3 * n);\nloop invariant i29: x + y <= 3 * n;\nloop invariant i30: x == 3 * i + 2 * (y - i);\nloop invariant i31: (if i < n then x + y == 3 * n else x + y == 3 * i + 2 * (y - i));\nloop invariant i32: ((i == 0) ==> (x == 0));\nloop invariant i33: ((i == 0) ==> (y == 0));\nloop invariant i34: ((unknown() ==> (x == 3 * i + 2 * (y - i)));\nloop invariant i35: i1;\nloop invariant i36: i2;\nloop invariant i37: i3;\nloop invariant i38: i4;\nloop invariant i39: i5;\nloop invariant i40: i6;\nloop invariant i41: i7;\nloop invariant i42: i8;\nloop invariant i43: i9;\nloop invariant i44: i10;\nloop invariant i45: i11;\nloop invariant i46: i12;\nloop invariant i47: i13;\nloop invariant i48: i14;\nloop invariant i49: i15;\nloop invariant i50: i16;\nloop invariant i51: i17;\nloop invariant i52: i18;\nloop invariant i53: i19;\nloop invariant i54: i20;\nloop invariant i55: i21;\nloop invariant i56: i22;\nloop invariant i57: i23;\nloop invariant i58: i24;\nloop invariant i59: i25;\nloop invariant i60: i26;\nloop invariant i61: i27;\nloop invariant i62: i28;\nloop invariant i63: i29;\nloop invariant i64: i30;\nloop invariant i65: i31;\nloop invariant i66: i32;\nloop invariant i67: i33;\nloop invariant i68: i34;\nloop invariant i69: i35;\nloop invariant i70: i36;\nloop invariant i71: i37;\nloop invariant i72: i38;\nloop invariant i73: i39;\nloop invariant i74: i40;\nloop invariant i75: i41;\nloop invariant i76: i42;\nloop invariant i77: i43;\nloop invariant i78: i44;\nloop invariant i79: i45;\nloop invariant i80: i46;\nloop invariant i81: i47;\nloop invariant i82: i48;\nloop invariant i83: i49;\nloop invariant i84: i50;\nloop invariant i85: i51;\nloop invariant i86: i52;\nloop invariant i87: i53;\nloop invariant i88: i54;\nloop invariant i89: i55;\nloop invariant i90: i56;\nloop invariant i91: i57;\nloop invariant i92: i58;\nloop invariant i93: i59;\nloop invariant i94: i60;\nloop invariant i95: i61;\nloop invariant i96: i62;\nloop invariant i97: i63;\nloop invariant i98: i64;\nloop invariant i99: i65;\nloop invariant i100: i66;\nloop invariant i101: i67;\nloop invariant i102: i68;\nloop invariant i103: i69;\nloop invariant i104: i70;\nloop invariant i105: i71;\nloop invariant i106: i72;\nloop invariant i107: i73;\nloop invariant i108: i74;\nloop invariant i109: i75;\nloop invariant i110: i76;\nloop invariant i111: i77;\nloop invariant i112: i78;\nloop invariant i113: i79;\nloop invariant i114: i80;\nloop invariant i115: i81;\nloop invariant i116: i82;\nloop invariant i117: i83;\nloop invariant i118: i84;\nloop invariant i119: i85;\nloop invariant i120: i86;\nloop invariant i121: i87;\nloop invariant i122: i88;\nloop invariant i123: i89;\nloop invariant i124: i90;\nloop invariant i125: i91;\nloop invariant i126: i92;\nloop invariant i127: i93;\nloop invariant i128: i94;\nloop invariant i129: i95;\nloop invariant i130: i96;\nloop invariant i131: i97;\nloop invariant i132: i98;\nloop invariant i133: i99;\nloop invariant i134: i100;\nloop invariant i135: i101;\nloop invariant i136: i102;\nloop invariant i137: i103;\nloop invariant i138: i104;\nloop invariant i139: i105;\nloop invariant i140: i106;\nloop invariant i141: i107;\nloop invariant i142: i108;\nloop invariant i143: i109;\nloop invariant i144: i110;\nloop invariant i145: i111;\nloop invariant i146: i112;\nloop invariant i147: i113;\nloop invariant i148: i114;\nloop invariant i149: i115;\nloop invariant i150: i116;\nloop invariant i151: i117;\nloop invariant i152: i118;\nloop invariant i153: i119;\nloop invariant i154: i120;\nloop invariant i155: i121;\nloop invariant i156: i122;\nloop invariant i157: i123;\nloop invariant i158: i124;\nloop invariant i159: i125;\nloop invariant i160: i126;\nloop invariant i161: i127;\nloop invariant i162: i128;\nloop invariant i163: i129;\nloop invariant i164: i130;\nloop invariant i165: i131;\nloop invariant i166: i132;\nloop invariant i167: i133;\nloop invariant i168: i134;\nloop invariant i169: i135;\nloop invariant i170: i136;\nloop invariant i171: i137;\nloop invariant i172: i138;\nloop invariant i173: i139;\nloop invariant i174: i140;\nloop invariant i175: i141;\nloop invariant i176: i142;\nloop invariant i177: i143;\nloop invariant i178: i144;\nloop invariant i179: i145;\nloop invariant i180: i146;\nloop invariant i181: i147;\nloop invariant i182: i148;\nloop invariant i183: i149;\nloop invariant i184: i150;\nloop invariant i185: i151;\nloop invariant i186: i152;\nloop invariant i187: i153;\nloop invariant i188: i154;\nloop invariant i189: i155;\nloop invariant i190: i156;\nloop invariant i191: i157;\nloop invariant i192: i158;\nloop invariant i193: ( ( ( 0 <= i ) && ( i <= n ) ) && ( ( 0 <= x ) && ( x <= 3 * i ) ) && ( ( 0 <= y ) && ( y <= 3 * i ) ) && ( ( x + y ) == ( ( i + 3 * ( i * ( ( i - 1 ) / 2 ) ) ) ) ) );\nloop invariant i194: (x + y) <= (3 * n);\nloop invariant i195: (x + y) >= (3 * i);\nloop invariant i196: (x + y) >= (3 * i) ==> (x + y) == (3 * n);\nloop invariant i197: (x + y) == (3 * n) ==> i == n;\nloop invariant i198: (x + y) >= (3 * i) ==> (x + y) >= (3 * n);\nloop invariant i199: (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\nloop invariant i200: (x + y) >= (3 * i) ==> i == n;\nloop invariant i201: 0 <= x <= 2 * i;\nloop invariant i202: 0 <= y <= i;\nloop invariant i203: 0 <= x + y <= 3 * i;\nloop invariant i204: x + y >= 3 * i - 2 * y;\nloop invariant i205: x + y >= 3 * i - 2 * x;\nloop invariant i206: x + y >= 3 * i - y - x;\nloop invariant i207: x + y >= 3 * i - 3 * x;\nloop invariant i208: x + y >= 3 * i - 3 * y;\nloop invariant i209: x + y >= 3 * i - 4 * x;\nloop invariant i210: x + y >= 3 * i - 4 * y;\nloop invariant i211: x + y >= 3 * i - 5 * x;\nloop invariant i212: x + y >= 3 * i - 5 * y;\nloop invariant i213: x + y >= 3 * i - 6 * x;\nloop invariant i214: x + y >= 3 * i - 6 * y;\nloop invariant i215: x + y >= 3 * i - 7 * x;\nloop invariant i216: x + y >= 3 * i - 7 * y;\nloop invariant i217: x + y >= 3 * i - 8 * x;\nloop invariant i218: x + y >= 3 * i - 8 * y;\nloop invariant i219: x + y >= 3 * i - 9 * x;\nloop invariant i220: x + y >= 3 * i - 9 * y;\nloop invariant i221: x + y >= 3 * i - 10 * x;\nloop invariant i222: x + y >= 3 * i - 10 * y;\nloop invariant i223: x + y >= 3 * i - 11 * x;\nloop invariant i224: x + y >= 3 * i - 11 * y;\nloop invariant i225: x + y >= 3 * i - 12 * x;\nloop invariant i226: x + y >= 3 * i - 12 * y;\nloop invariant i227: x + y >= 3 * i - 13 * x;\nloop invariant i228: x + y >= 3 * i - 13 * y;\nloop invariant i229: x + y >= 3 * i - 14 * x;\nloop invariant i230: x + y >= 3 * i - 14 * y;\nloop invariant i231: x + y >= 3 * i - 15 * x;\nloop invariant i232: x + y >= 3 * i - 15 * y;\nloop invariant i233: x + y >= 3 * i - 16 * x;\nloop invariant i234: x + y >= 3 * i - 16 * y;\nloop invariant i235: x + y >= 3 * i - 17 * x;\nloop invariant i236: x + y >= 3 * i - 17 * y;\nloop invariant i237: x + y >= 3 * i - 18 * x;\nloop invariant i238: x + y >= 3 * i - 18 * y;\nloop invariant i239: x + y >= 3 * i - 19 * x;\nloop invariant i240: x + y >= 3 * i - 19 * y;\nloop invariant i241: x + y >= 3 * i - 20 * x;\nloop invariant i242: x + y >= 3 * i - 20 * y;\nloop invariant i243: x + y >= 3 * i - 21 * x;\nloop invariant i244: x + y >= 3 * i - 21 * y;\nloop invariant i245: x + y >= 3 * i - 22 * x;\nloop invariant i246: x + y >= 3 * i - 22 * y;\nloop invariant i247: x + y >= 3 * i - 23 * x;\nloop invariant i248: x + y >= 3 * i - 23 * y;\nloop invariant i249: x + y >= 3 * i - 24 * x;\nloop invariant i250: x + y >= 3 * i - 24 * y;\nloop invariant i251: x + y >= 3 * i - 25 * x;\nloop invariant i252: x + y >= 3 * i - 25 * y;\nloop invariant i253: x + y >= 3 * i - 26 * x;\nloop invariant i254: x + y >= 3 * i - 26 * y;\nloop invariant i255: x + y >= 3 * i - 27 * x;\nloop invariant i256: x + y >= 3 * i - 27 * y;\nloop invariant i257: x + y >= 3 * i - 28 * x;\nloop invariant i258: x + y >= 3 * i - 28 * y;\nloop invariant i259: x + y >= 3 * i - 29 * x;\nloop invariant i260: x + y >= 3 * i - 29 * y;\nloop invariant i261: 0 <= x <= 2 * n;\nloop invariant i262: 0 <= y <= n;\nloop invariant i263: x >= 0;\nloop invariant i264: y >= 0;\nloop invariant i265: i >= 0;\nloop invariant i266: i <= n;\nloop invariant i267: 1 <= i <= n;\nloop invariant i268: 0 <= x + y <= 3 * n;\nloop invariant i269: 0 <= x <= n * 2;\nloop invariant i270: 0 <= y <= n * 2;\nloop invariant i271: (x + y) <= (2 * i + 3 * (n - i));\nloop invariant i272: x <= (2 * i + 3 * (n - i));\nloop invariant i273: y <= (2 * i + 3 * (n - i));\nloop invariant i274: x + y <= (2 * i + 3 * (n - i));\nloop invariant i275: (x + y) <= (2 * n);\nloop invariant i276: x + y >= 3 * i;\nloop invariant i277: x + y <= 3 * (i + 1);\nloop invariant i278: (if unknown() then x >= 2 * i + 1 else x >= 2 * i) ==> (x + y >= 3 * i);\nloop invariant i279: (if unknown() then y >= i else y >= i + 1) ==> (x + y >= 3 * i);\nloop invariant i280: (if unknown() then x <= 2 * i + 1 else x <= 2 * i) ==> (x + y <= 3 * (i + 1));\nloop invariant i281: (if unknown() then y <= i else y <= i + 1) ==> (x + y <= 3 * (i + 1));\nloop invariant i282: n >= 0;\nloop invariant i283: (i < n) ==> ((x + y) == (3 * i));\nloop invariant i284: (i < n) ==> ((x + y) <= (3 * n));\nloop invariant i285: (i < n) ==> ((x + y) >= (3 * i));\nloop invariant i286: (i < n) ==> ((x + y) >= 0);\nloop invariant i287: (i < n) ==> ((x + y) <= 3 * n);\nloop invariant i288: x + y == n;\nloop invariant i289: (x >= y) ==> (x + y == 3 * n);\nloop invariant i290: (x < y) ==> (x + y == 3 * n);\nloop invariant i291: (x == y) ==> (x + y == 3 * n);\nloop invariant i292: (x + y == 3 * n) ==> (x >= y);\nloop invariant i293: (x + y == 3 * n) ==> (x < y);\nloop invariant i294: (x + y == 3 * n) ==> (x == y);\nloop invariant i295: 0 <= x;\nloop invariant i296: 0 <= y;\nloop invariant i297: x <= 2 * i;\nloop invariant i298: y <= i;\nloop invariant i299: x + y >= 3 * i ==> x >= 3 * i - y;\nloop invariant i300: x + y <= 3 * n ==> x <= 3 * n - y;\nloop invariant i301: x + y >= 3 * i ==> y >= i - x / 2;\nloop invariant i302: x + y <= 3 * n ==> y <= n - i;\nloop invariant i303: x + y >= 3 * i ==> x - y >= i;\nloop invariant i304: x + y <= 3 * n ==> x - y <= n;\nloop invariant i305: x + y >= 3 * i ==> y - x >= i;\nloop invariant i306: x + y <= 3 * n ==> y - x <= n;\nloop invariant i307: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i;\nloop invariant i308: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n;\nloop invariant i309: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i310: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i311: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i312: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i313: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i314: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i315: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i316: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i317: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i318: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i319: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i320: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i321: x + y == 3 * n ==> x == 3 * i;\nloop invariant i322: x + y == 3 * n ==> y == 3 * (n - i);\nloop invariant i323: x + y != 3 * n ==> i < n;\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 188,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x <= 3 * n;\nloop invariant i3: 0 <= y <= 3 * n;\n\n\n\nloop invariant i7: 0 <= x <= (2 * n);\n\nloop invariant i9: ((x + y) == (3 * i));\nloop invariant i10: (x >= 0);\nloop invariant i11: (y >= 0);\nloop invariant i12: (x <= (2 * n));\n\nloop invariant i14: (x <= (y + n));\n\nloop invariant i16: (x <= (x + y));\nloop invariant i17: (y <= (x + y));\n\n\n\n\n\nloop invariant i23: ((x + y) <= (3 * n));\n\n\nloop invariant i26: x + y == 3 * i;\nloop invariant i27: x + y == 3 * n ==> i == n;\nloop invariant i28: i == n ==> (x + y) == (3 * n);\nloop invariant i29: x + y <= 3 * n;\n\n\nloop invariant i32: ((i == 0) ==> (x == 0));\nloop invariant i33: ((i == 0) ==> (y == 0));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i194: (x + y) <= (3 * n);\nloop invariant i195: (x + y) >= (3 * i);\n\nloop invariant i197: (x + y) == (3 * n) ==> i == n;\n\nloop invariant i199: (x + y) >= (3 * i) ==> (x + y) <= (3 * n);\n\nloop invariant i201: 0 <= x <= 2 * i;\n\nloop invariant i203: 0 <= x + y <= 3 * i;\nloop invariant i204: x + y >= 3 * i - 2 * y;\nloop invariant i205: x + y >= 3 * i - 2 * x;\nloop invariant i206: x + y >= 3 * i - y - x;\nloop invariant i207: x + y >= 3 * i - 3 * x;\nloop invariant i208: x + y >= 3 * i - 3 * y;\nloop invariant i209: x + y >= 3 * i - 4 * x;\nloop invariant i210: x + y >= 3 * i - 4 * y;\nloop invariant i211: x + y >= 3 * i - 5 * x;\nloop invariant i212: x + y >= 3 * i - 5 * y;\nloop invariant i213: x + y >= 3 * i - 6 * x;\nloop invariant i214: x + y >= 3 * i - 6 * y;\nloop invariant i215: x + y >= 3 * i - 7 * x;\nloop invariant i216: x + y >= 3 * i - 7 * y;\nloop invariant i217: x + y >= 3 * i - 8 * x;\nloop invariant i218: x + y >= 3 * i - 8 * y;\nloop invariant i219: x + y >= 3 * i - 9 * x;\nloop invariant i220: x + y >= 3 * i - 9 * y;\nloop invariant i221: x + y >= 3 * i - 10 * x;\nloop invariant i222: x + y >= 3 * i - 10 * y;\nloop invariant i223: x + y >= 3 * i - 11 * x;\nloop invariant i224: x + y >= 3 * i - 11 * y;\nloop invariant i225: x + y >= 3 * i - 12 * x;\nloop invariant i226: x + y >= 3 * i - 12 * y;\nloop invariant i227: x + y >= 3 * i - 13 * x;\nloop invariant i228: x + y >= 3 * i - 13 * y;\nloop invariant i229: x + y >= 3 * i - 14 * x;\nloop invariant i230: x + y >= 3 * i - 14 * y;\nloop invariant i231: x + y >= 3 * i - 15 * x;\nloop invariant i232: x + y >= 3 * i - 15 * y;\nloop invariant i233: x + y >= 3 * i - 16 * x;\nloop invariant i234: x + y >= 3 * i - 16 * y;\nloop invariant i235: x + y >= 3 * i - 17 * x;\nloop invariant i236: x + y >= 3 * i - 17 * y;\nloop invariant i237: x + y >= 3 * i - 18 * x;\nloop invariant i238: x + y >= 3 * i - 18 * y;\nloop invariant i239: x + y >= 3 * i - 19 * x;\nloop invariant i240: x + y >= 3 * i - 19 * y;\nloop invariant i241: x + y >= 3 * i - 20 * x;\nloop invariant i242: x + y >= 3 * i - 20 * y;\nloop invariant i243: x + y >= 3 * i - 21 * x;\nloop invariant i244: x + y >= 3 * i - 21 * y;\nloop invariant i245: x + y >= 3 * i - 22 * x;\nloop invariant i246: x + y >= 3 * i - 22 * y;\nloop invariant i247: x + y >= 3 * i - 23 * x;\nloop invariant i248: x + y >= 3 * i - 23 * y;\nloop invariant i249: x + y >= 3 * i - 24 * x;\nloop invariant i250: x + y >= 3 * i - 24 * y;\nloop invariant i251: x + y >= 3 * i - 25 * x;\nloop invariant i252: x + y >= 3 * i - 25 * y;\nloop invariant i253: x + y >= 3 * i - 26 * x;\nloop invariant i254: x + y >= 3 * i - 26 * y;\nloop invariant i255: x + y >= 3 * i - 27 * x;\nloop invariant i256: x + y >= 3 * i - 27 * y;\nloop invariant i257: x + y >= 3 * i - 28 * x;\nloop invariant i258: x + y >= 3 * i - 28 * y;\nloop invariant i259: x + y >= 3 * i - 29 * x;\nloop invariant i260: x + y >= 3 * i - 29 * y;\nloop invariant i261: 0 <= x <= 2 * n;\n\nloop invariant i263: x >= 0;\nloop invariant i264: y >= 0;\nloop invariant i265: i >= 0;\nloop invariant i266: i <= n;\n\nloop invariant i268: 0 <= x + y <= 3 * n;\nloop invariant i269: 0 <= x <= n * 2;\n\n\nloop invariant i272: x <= (2 * i + 3 * (n - i));\n\n\n\nloop invariant i276: x + y >= 3 * i;\nloop invariant i277: x + y <= 3 * (i + 1);\n\n\n\n\nloop invariant i282: n >= 0;\nloop invariant i283: (i < n) ==> ((x + y) == (3 * i));\nloop invariant i284: (i < n) ==> ((x + y) <= (3 * n));\nloop invariant i285: (i < n) ==> ((x + y) >= (3 * i));\nloop invariant i286: (i < n) ==> ((x + y) >= 0);\nloop invariant i287: (i < n) ==> ((x + y) <= 3 * n);\n\n\n\n\n\n\n\nloop invariant i295: 0 <= x;\nloop invariant i296: 0 <= y;\nloop invariant i297: x <= 2 * i;\n\nloop invariant i299: x + y >= 3 * i ==> x >= 3 * i - y;\nloop invariant i300: x + y <= 3 * n ==> x <= 3 * n - y;\nloop invariant i301: x + y >= 3 * i ==> y >= i - x / 2;\n\n\nloop invariant i304: x + y <= 3 * n ==> x - y <= n;\n\n\n\n\nloop invariant i309: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i310: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i311: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i312: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i313: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i314: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i315: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i316: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i317: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i318: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\nloop invariant i319: x + y >= 3 * i ==> x - y >= i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i ==> y - x >= 2 * i;\nloop invariant i320: x + y <= 3 * n ==> x - y <= n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n ==> y - x <= 2 * n;\n\n\nloop invariant i323: x + y != 3 * n ==> i < n;\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 79,
        "success_count": 67,
        "failure_count": 12,
        "success_rate": 0.8481012658227848
    }
}