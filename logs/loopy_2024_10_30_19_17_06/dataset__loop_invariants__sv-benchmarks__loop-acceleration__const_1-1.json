{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant x == 0 ==> y >= 1;\nloop invariant y < 1024 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0 ==> y > 0;\nloop invariant x == 0 ==> x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y < 1024 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> y <= 1024;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y <= 1024;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y <= 1024;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y <= 1024;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0 ==> y == 1024;\nloop invariant x == 1 ==> y == 1023;\nloop invariant x == 1 ==> (y >= 1) ==> (x == 0 ==> y == 1024);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant x < y;\nloop invariant y >= 1;\nloop invariant (x < y) ==> (y == 1024);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant y >= 1024 ==> x == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0 ==> y == 1024;\nloop invariant x > 0 ==> y < 1024;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 1024;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: y <= 1024;\nloop invariant i6: x >= 0;\n\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant x == 0 ==> y >= 1;\nloop invariant y < 1024 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\nloop invariant i3: x == 0 ==> y >= 1;\n\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: 0 <= y <= 1024;\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0 ==> y > 0;\nloop invariant x == 0 ==> x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\nloop invariant i2: x == 0 ==> y > 0;\nloop invariant i3: x == 0 ==> x <= y;\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\n\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y < 1024 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\n\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> y <= 1024;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y <= 1024;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y <= 1024;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y <= 1024;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\nloop invariant x == 0 ==> x <= 0;\nloop invariant x <= 0 ==> x == 0;\nloop invariant x == 0 ==> x >= 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x == 0 ==> y < 1024;\nloop invariant y < 1024 ==> x == 0;\nloop invariant x == 0 ==> y >= 0;\nloop invariant y >= 0 ==> x == 0;\nloop invariant x == 0 ==> x < 0;\nloop invariant x < 0 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\n\n\n\nloop invariant i6: x == 0 ==> y >= 0;\n\nloop invariant i8: x == 0 ==> x >= 0;\n\nloop invariant i10: x == 0 ==> x <= 0;\nloop invariant i11: x <= 0 ==> x == 0;\nloop invariant i12: x == 0 ==> y <= 1024;\n\n\nloop invariant i15: x < 0 ==> x == 0;\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0 ==> y == 1024;\nloop invariant x == 1 ==> y == 1023;\nloop invariant x == 1 ==> (y >= 1) ==> (x == 0 ==> y == 1024);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: 0 <= y <= 1024;\n\n\nloop invariant i5: x == 1 ==> (y >= 1) ==> (x == 0 ==> y == 1024);\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\n\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant x < y;\nloop invariant y >= 1;\nloop invariant (x < y) ==> (y == 1024);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: 0 <= y <= 1024;\n\n\n\n\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0;\nloop invariant y <= 1024 ==> x == 0;\nloop invariant y >= 1024 ==> x == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\n\nloop invariant i4: y >= 1024 ==> x == 0;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1024;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: 0 <= y <= 1024;\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1024;\nloop invariant x == 0 ==> y == 1024;\nloop invariant x > 0 ==> y < 1024;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\nloop invariant i3: x > 0 ==> y < 1024;\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= y <= 1024 is partially proven to be inductive.\nloop invariant x == 0 is preserved but not established.\nloop invariant y == 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 1024 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 0 is partially proven to be inductive.\nloop invariant x == 0 ==> y >= 1 is partially proven to be inductive.\nloop invariant y < 1024 ==> x == 0 is partially proven to be inductive.\nloop invariant 0 <= x <= 1 is partially proven to be inductive.\nloop invariant x == 0 ==> y > 0 is partially proven to be inductive.\nloop invariant x == 0 ==> x <= y is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x == 0 ==> y < 1024 is partially proven to be inductive.\nloop invariant x == 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant y >= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> x <= 0 is partially proven to be inductive.\nloop invariant x <= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> y <= 1024 is partially proven to be inductive.\nloop invariant y <= 1024 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> x < 0 is partially proven to be inductive.\nloop invariant x < 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> y == 1024 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 1023 is partially proven to be inductive.\nloop invariant x == 1 ==> (y >= 1) ==> (x == 0 ==> y == 1024) is partially proven to be inductive.\nloop invariant x < y is partially proven to be inductive.\nloop invariant (x < y) ==> (y == 1024) is partially proven to be inductive.\nloop invariant y >= 1024 ==> x == 0 is partially proven to be inductive.\nloop invariant x > 0 ==> y < 1024 is partially proven to be inductive.\nAssertion x == 0: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\nloop invariant i4: y >= 0;\nloop invariant i5: y <= 1024;\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 0;\nloop invariant i8: x == 0 ==> y >= 1;\nloop invariant i9: y < 1024 ==> x == 0;\nloop invariant i10: 0 <= x <= 1;\nloop invariant i11: x == 0 ==> y > 0;\nloop invariant i12: x == 0 ==> x <= y;\nloop invariant i13: y >= 1;\nloop invariant i14: x == 0 ==> y < 1024;\nloop invariant i15: x == 0 ==> y >= 0;\nloop invariant i16: y >= 0 ==> x == 0;\nloop invariant i17: x == 0 ==> x >= 0;\nloop invariant i18: x >= 0 ==> x == 0;\nloop invariant i19: x == 0 ==> x <= 0;\nloop invariant i20: x <= 0 ==> x == 0;\nloop invariant i21: x == 0 ==> y <= 1024;\nloop invariant i22: y <= 1024 ==> x == 0;\nloop invariant i23: x == 0 ==> x < 0;\nloop invariant i24: x < 0 ==> x == 0;\nloop invariant i25: x == 0 ==> y == 1024;\nloop invariant i26: x == 1 ==> y == 1023;\nloop invariant i27: x == 1 ==> (y >= 1) ==> (x == 0 ==> y == 1024);\nloop invariant i28: x < y;\nloop invariant i29: (x < y) ==> (y == 1024);\nloop invariant i30: y >= 1024 ==> x == 0;\nloop invariant i31: x > 0 ==> y < 1024;\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 1024;\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: y <= 1024;\nloop invariant i6: x >= 0;\n\nloop invariant i8: x == 0 ==> y >= 1;\n\nloop invariant i10: 0 <= x <= 1;\nloop invariant i11: x == 0 ==> y > 0;\nloop invariant i12: x == 0 ==> x <= y;\n\n\nloop invariant i15: x == 0 ==> y >= 0;\n\nloop invariant i17: x == 0 ==> x >= 0;\n\nloop invariant i19: x == 0 ==> x <= 0;\nloop invariant i20: x <= 0 ==> x == 0;\nloop invariant i21: x == 0 ==> y <= 1024;\n\n\nloop invariant i24: x < 0 ==> x == 0;\n\n\nloop invariant i27: x == 1 ==> (y >= 1) ==> (x == 0 ==> y == 1024);\n\n\nloop invariant i30: y >= 1024 ==> x == 0;\nloop invariant i31: x > 0 ==> y < 1024;\n*/\nwhile (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 86,
        "success_count": 74,
        "failure_count": 12,
        "success_rate": 0.8604651162790697
    }
}