{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  while (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant l <= i <= n;\nloop invariant if (n > 0) then i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= l <= n;\nloop invariant i == l;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant l == n;\nloop invariant i >= n;\n*/\n```",
            "```\n/*@\nloop invariant l <= i <= n;\nloop invariant l >= 1;\nloop invariant if n >= 0 then n >= i else i >= n;\nloop invariant if n >= 0 then i >= l else i <= l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n; loop invariant 0 <= l <= n; loop invariant i >= l; loop invariant i <= n; loop invariant l <= n; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l;\n*/\n```",
            "```\n/*@\nloop invariant i >= l;\nloop invariant i <= n;\nloop invariant i >= l ==> i <= n;\nloop invariant i == n ==> i == n;\nloop invariant i == n ==> l == l;\nloop invariant l > 0 ==> i >= l;\nloop invariant l > 0 ==> i <= n;\nloop invariant l > 0 ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> l == l;\nloop invariant l > 0 ==> i >= l ==> i <= n;\nloop invariant l > 0 ==> i >= l ==> i == n ==> i == n;\nloop invariant l > 0 ==> i >= l ==> i == n ==> l == l;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> l == l;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> l == l;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= l;\nloop invariant i < n ==> l <= n;\nloop invariant i >= l ==> l > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant l > 0;\nloop invariant i >= l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= l;\nloop invariant l >= 0;\nloop invariant n > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= l <= n;\nloop invariant l >= 1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= l <= n;\nloop invariant l >= 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= l;\nloop invariant i <= n;\nloop invariant l >= 1;\nloop invariant l <= n;\nloop invariant n >= 1;\nloop invariant i >= l;\nloop invariant i <= n;\nloop invariant l >= 1;\nloop invariant l <= n;\nloop invariant n >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i = n;\nloop invariant i >= l;\n*/\n```",
            "```\n/*@\nloop invariant 0 < n;\nloop invariant 0 <= i <= n;\nloop invariant i == l + (i-l);\nloop invariant i <= n ==> n >= 0;\nloop invariant n >= 0 ==> n <= 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant l < n;\nloop invariant n < 2147483647;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant l >= 0;\nloop invariant (l ==> l >= 1);\nloop invariant (i > l ==> i >= l + 1);\nloop invariant (i < n ==> i <= n - 1);\nloop invariant (i < n ==> i >= 0);\nloop invariant (i < n ==> i <= n);\nloop invariant (i >= l ==> i >= l);\nloop invariant (i >= l ==> i <= n);\nloop invariant (i >= l ==> i <= n - 1);\n*/\n```",
            "```\n/*@\nloop invariant n >= 0;\nloop invariant l >= 1;\nloop invariant (i >= l && i <= n);\nloop invariant (i == l || i == n);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant l <= i <= n;\nloop invariant if (n > 0) then i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= l <= n;\nloop invariant i == l;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant l == n;\nloop invariant i >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant l <= i <= n;\nloop invariant l >= 1;\nloop invariant if n >= 0 then n >= i else i >= n;\nloop invariant if n >= 0 then i >= l else i <= l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\nloop invariant i2: l >= 1;\n\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant 0 <= l <= n; loop invariant i >= l; loop invariant i <= n; loop invariant l <= n; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= l;\nloop invariant i <= n;\nloop invariant i >= l ==> i <= n;\nloop invariant i == n ==> i == n;\nloop invariant i == n ==> l == l;\nloop invariant l > 0 ==> i >= l;\nloop invariant l > 0 ==> i <= n;\nloop invariant l > 0 ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> l == l;\nloop invariant l > 0 ==> i >= l ==> i <= n;\nloop invariant l > 0 ==> i >= l ==> i == n ==> i == n;\nloop invariant l > 0 ==> i >= l ==> i == n ==> l == l;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> l == l;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> l == l;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\nloop invariant i1: i >= l;\n\n\nloop invariant i4: i == n ==> i == n;\nloop invariant i5: i == n ==> l == l;\nloop invariant i6: l > 0 ==> i >= l;\n\nloop invariant i8: l > 0 ==> i == n ==> i == n;\nloop invariant i9: l > 0 ==> i == n ==> l == l;\n\nloop invariant i11: l > 0 ==> i >= l ==> i == n ==> i == n;\nloop invariant i12: l > 0 ==> i >= l ==> i == n ==> l == l;\nloop invariant i13: l > 0 ==> i == n ==> i == n ==> i == n;\nloop invariant i14: l > 0 ==> i == n ==> i == n ==> l == l;\nloop invariant i15: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i16: l > 0 ==> i == n ==> i == n ==> i == n ==> l == l;\nloop invariant i17: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i18: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i19: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i20: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i21: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i22: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i23: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i24: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i25: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i26: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i27: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i28: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i29: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i30: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= l;\nloop invariant i < n ==> l <= n;\nloop invariant i >= l ==> l > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\nloop invariant i2: i >= l;\nloop invariant i3: i < n ==> l <= n;\nloop invariant i4: i >= l ==> l > 0;\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant l > 0;\nloop invariant i >= l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\nloop invariant i2: l > 0;\nloop invariant i3: i >= l;\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= l;\nloop invariant l >= 0;\nloop invariant n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\nloop invariant i2: i >= l;\nloop invariant i3: l >= 0;\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= l <= n;\nloop invariant l >= 1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= l <= n;\nloop invariant l >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n\nloop invariant i3: l >= 1;\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= l;\nloop invariant i <= n;\nloop invariant l >= 1;\nloop invariant l <= n;\nloop invariant n >= 1;\nloop invariant i >= l;\nloop invariant i <= n;\nloop invariant l >= 1;\nloop invariant l <= n;\nloop invariant n >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\nloop invariant i1: i >= l;\n\nloop invariant i3: l >= 1;\n\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i = n;\nloop invariant i >= l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n\nloop invariant i3: i >= l;\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 < n;\nloop invariant 0 <= i <= n;\nloop invariant i == l + (i-l);\nloop invariant i <= n ==> n >= 0;\nloop invariant n >= 0 ==> n <= 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n\nloop invariant i3: i == l + (i-l);\nloop invariant i4: i <= n ==> n >= 0;\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant l < n;\nloop invariant n < 2147483647;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant l >= 0;\nloop invariant (l ==> l >= 1);\nloop invariant (i > l ==> i >= l + 1);\nloop invariant (i < n ==> i <= n - 1);\nloop invariant (i < n ==> i >= 0);\nloop invariant (i < n ==> i <= n);\nloop invariant (i >= l ==> i >= l);\nloop invariant (i >= l ==> i <= n);\nloop invariant (i >= l ==> i <= n - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: i >= 0;\nloop invariant i6: l >= 0;\nloop invariant i7: (l ==> l >= 1);\nloop invariant i8: (i > l ==> i >= l + 1);\nloop invariant i9: (i < n ==> i <= n - 1);\nloop invariant i10: (i < n ==> i >= 0);\nloop invariant i11: (i < n ==> i <= n);\nloop invariant i12: (i >= l ==> i >= l);\n\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant l >= 1;\nloop invariant (i >= l && i <= n);\nloop invariant (i == l || i == n);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\nloop invariant (i == n ==> l==1);\nloop invariant (i == l ==> n==l);\nloop invariant (i == l ==> l==1);\nloop invariant (i == n ==> n==l);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\nloop invariant i2: l >= 1;\n\n\n\n\n\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: l <= i <= n;\nloop invariant i3: if (n > 0) then i <= n;\nloop invariant i4: 0 <= i <= n;\nloop invariant i5: i == l;\nloop invariant i6: i <= n;\nloop invariant i7: l == n;\nloop invariant i8: i >= n;\nloop invariant i9: l >= 1;\nloop invariant i10: if n >= 0 then n >= i else i >= n;\nloop invariant i11: if n >= 0 then i >= l else i <= l;\nloop invariant i12: 0 <= i <= n; loop invariant 0 <= l <= n; loop invariant i >= l; loop invariant i <= n; loop invariant l <= n; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l; loop invariant i => l;\nloop invariant i13: i >= l;\nloop invariant i14: i >= l ==> i <= n;\nloop invariant i15: i == n ==> i == n;\nloop invariant i16: i == n ==> l == l;\nloop invariant i17: l > 0 ==> i >= l;\nloop invariant i18: l > 0 ==> i <= n;\nloop invariant i19: l > 0 ==> i == n ==> i == n;\nloop invariant i20: l > 0 ==> i == n ==> l == l;\nloop invariant i21: l > 0 ==> i >= l ==> i <= n;\nloop invariant i22: l > 0 ==> i >= l ==> i == n ==> i == n;\nloop invariant i23: l > 0 ==> i >= l ==> i == n ==> l == l;\nloop invariant i24: l > 0 ==> i == n ==> i == n ==> i == n;\nloop invariant i25: l > 0 ==> i == n ==> i == n ==> l == l;\nloop invariant i26: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i27: l > 0 ==> i == n ==> i == n ==> i == n ==> l == l;\nloop invariant i28: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i29: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i30: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i31: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i32: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i33: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i34: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i35: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i36: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i37: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i38: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i39: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i40: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i41: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i42: i < n ==> l <= n;\nloop invariant i43: i >= l ==> l > 0;\nloop invariant i44: l > 0;\nloop invariant i45: l >= 0;\nloop invariant i46: n > 0;\nloop invariant i47: l <= n;\nloop invariant i48: n >= 1;\nloop invariant i49: i = n;\nloop invariant i50: 0 < n;\nloop invariant i51: i == l + (i-l);\nloop invariant i52: i <= n ==> n >= 0;\nloop invariant i53: n >= 0 ==> n <= 5;\nloop invariant i54: l < n;\nloop invariant i55: n < 2147483647;\nloop invariant i56: i >= 0;\nloop invariant i57: (l ==> l >= 1);\nloop invariant i58: (i > l ==> i >= l + 1);\nloop invariant i59: (i < n ==> i <= n - 1);\nloop invariant i60: (i < n ==> i >= 0);\nloop invariant i61: (i < n ==> i <= n);\nloop invariant i62: (i >= l ==> i >= l);\nloop invariant i63: (i >= l ==> i <= n);\nloop invariant i64: (i >= l ==> i <= n - 1);\nloop invariant i65: n >= 0;\nloop invariant i66: (i >= l && i <= n);\nloop invariant i67: (i == l || i == n);\nloop invariant i68: (i == l ==> l==1);\nloop invariant i69: (i == n ==> n==l);\nloop invariant i70: (i == n ==> l==1);\nloop invariant i71: (i == l ==> n==l);\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: l >= 1;\n\n\n\nloop invariant i13: i >= l;\n\nloop invariant i15: i == n ==> i == n;\nloop invariant i16: i == n ==> l == l;\nloop invariant i17: l > 0 ==> i >= l;\n\nloop invariant i19: l > 0 ==> i == n ==> i == n;\nloop invariant i20: l > 0 ==> i == n ==> l == l;\n\nloop invariant i22: l > 0 ==> i >= l ==> i == n ==> i == n;\nloop invariant i23: l > 0 ==> i >= l ==> i == n ==> l == l;\nloop invariant i24: l > 0 ==> i == n ==> i == n ==> i == n;\nloop invariant i25: l > 0 ==> i == n ==> i == n ==> l == l;\nloop invariant i26: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i27: l > 0 ==> i == n ==> i == n ==> i == n ==> l == l;\nloop invariant i28: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i29: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i30: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i31: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i32: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i33: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i34: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i35: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i36: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i37: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i38: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i39: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i40: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i41: l > 0 ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n ==> i == n;\nloop invariant i42: i < n ==> l <= n;\nloop invariant i43: i >= l ==> l > 0;\nloop invariant i44: l > 0;\nloop invariant i45: l >= 0;\n\n\n\n\n\nloop invariant i51: i == l + (i-l);\nloop invariant i52: i <= n ==> n >= 0;\n\n\n\nloop invariant i56: i >= 0;\nloop invariant i57: (l ==> l >= 1);\nloop invariant i58: (i > l ==> i >= l + 1);\nloop invariant i59: (i < n ==> i <= n - 1);\nloop invariant i60: (i < n ==> i >= 0);\nloop invariant i61: (i < n ==> i <= n);\nloop invariant i62: (i >= l ==> i >= l);\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c"
        ],
        "skipped": [],
        "total": 124,
        "success_count": 106,
        "failure_count": 18,
        "success_rate": 0.8548387096774194
    }
}