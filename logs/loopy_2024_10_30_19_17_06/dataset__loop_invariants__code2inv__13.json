{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/13.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant 2 <= x + 2 <= 6;\nloop invariant 0 <= y + 2 <= 6;\nloop invariant 2 <= x + y <= 8;\nloop invariant 0 <= y + x <= 8;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= (2 * y);\nloop invariant (x < 4) ==> (y < 4);\nloop invariant (x == 4) ==> (y == 4);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;loop invariant 0 <= x <= 4;loop invariant ((0 <= y) && (y <= 2) && (0 <= x) && (x <= 4));loop invariant (x == (2 * y));\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= 2;\nloop invariant x - 2*y >= 0;\nloop invariant x - 2*y <= 2;\nloop invariant x - 2*y == 0 ==> y == 0;\nloop invariant x - 2*y == 1 ==> y == 1;\nloop invariant x - 2*y == 2 ==> y == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant ( (x <= 4) ==> (y != 0) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\nloop invariant x <= 2;\nloop invariant x <= 4 ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 4;\nloop invariant x >= 2 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x <= y;\nloop invariant x <= 2;\nloop invariant (x % 2 == 0);\nloop invariant (y % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= z1;\nloop invariant y >= z2;\nloop invariant z3 ==> x >= 4;\nloop invariant z3 ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= (0 + (y - 1) * y / 2);\nloop invariant (x == 4) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= y;\nloop invariant x == (2 * y);\nloop invariant (x % 2 == 0);\nloop invariant (y % 2 == 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 4) ==> (y != 0);\nloop invariant (x != 4) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x % 2 == 0);\nloop invariant (y % 2 == 0);\nloop invariant (x + y) % 2 == 0;\nloop invariant x == 2 * z;\nloop invariant y == 2 * z;\nloop invariant (x + y) == 4 * z;\nloop invariant x == 4 * z;\nloop invariant y == 4 * z;\nloop invariant x == 4 * z1;\nloop invariant y == 4 * z1;\nloop invariant (x + y) == 4 * z1;\nloop invariant x == 4 * z1;\nloop invariant y == 4 * z1;\nloop invariant (x + y) == 4 * z1;\nloop invariant x == 4 * z2;\nloop invariant y == 4 * z2;\nloop invariant (x + y) == 4 * z2;\nloop invariant x == 4 * z2;\nloop invariant y == 4 * z2;\nloop invariant (x + y) == 4 * z2;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant 2 <= x + 2 <= 6;\nloop invariant 0 <= y + 2 <= 6;\nloop invariant 2 <= x + y <= 8;\nloop invariant 0 <= y + x <= 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= (2 * y);\nloop invariant (x < 4) ==> (y < 4);\nloop invariant (x == 4) ==> (y == 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\nloop invariant z3 <= 2;\nloop invariant x >= z1;\nloop invariant x >= z2;\nloop invariant x >= z3;\nloop invariant y >= z1;\nloop invariant y >= z2;\nloop invariant y >= z3;\nloop invariant x <= y + 2;\nloop invariant y <= x + 2;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 <= 4;\nloop invariant z2 <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: x <= y + 2;\nloop invariant i16: y <= x + 2;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;loop invariant 0 <= x <= 4;loop invariant ((0 <= y) && (y <= 2) && (0 <= x) && (x <= 4));loop invariant (x == (2 * y));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= 2;\nloop invariant x - 2*y >= 0;\nloop invariant x - 2*y <= 2;\nloop invariant x - 2*y == 0 ==> y == 0;\nloop invariant x - 2*y == 1 ==> y == 1;\nloop invariant x - 2*y == 2 ==> y == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: x - 2*y <= 2;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant ( (x <= 4) ==> (y != 0) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\nloop invariant x <= 2;\nloop invariant x <= 4 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 4;\nloop invariant x >= 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x <= y;\nloop invariant x <= 2;\nloop invariant (x % 2 == 0);\nloop invariant (y % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= z1;\nloop invariant y >= z2;\nloop invariant z3 ==> x >= 4;\nloop invariant z3 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= (0 + (y - 1) * y / 2);\nloop invariant (x == 4) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= y;\nloop invariant x == (2 * y);\nloop invariant (x % 2 == 0);\nloop invariant (y % 2 == 0);\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x == 4) ==> (y != 0);\nloop invariant (x != 4) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x % 2 == 0);\nloop invariant (y % 2 == 0);\nloop invariant (x + y) % 2 == 0;\nloop invariant x == 2 * z;\nloop invariant y == 2 * z;\nloop invariant (x + y) == 4 * z;\nloop invariant x == 4 * z;\nloop invariant y == 4 * z;\nloop invariant x == 4 * z1;\nloop invariant y == 4 * z1;\nloop invariant (x + y) == 4 * z1;\nloop invariant x == 4 * z1;\nloop invariant y == 4 * z1;\nloop invariant (x + y) == 4 * z1;\nloop invariant x == 4 * z2;\nloop invariant y == 4 * z2;\nloop invariant (x + y) == 4 * z2;\nloop invariant x == 4 * z2;\nloop invariant y == 4 * z2;\nloop invariant (x + y) == 4 * z2;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\nloop invariant y == 4 * z3;\nloop invariant (x + y) == 4 * z3;\nloop invariant x == 4 * z3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 75: unbound logic variable z. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 1 <= x <= 4;\nloop invariant i2: 0 <= y <= 4;\nloop invariant i3: 2 <= x + 2 <= 6;\nloop invariant i4: 0 <= y + 2 <= 6;\nloop invariant i5: 2 <= x + y <= 8;\nloop invariant i6: 0 <= y + x <= 8;\nloop invariant i7: 0 <= x <= 4;\nloop invariant i8: x >= (2 * y);\nloop invariant i9: (x < 4) ==> (y < 4);\nloop invariant i10: (x == 4) ==> (y == 4);\nloop invariant i11: 0 <= y <= 2;\nloop invariant i12: z1 >= 0;\nloop invariant i13: z2 >= 0;\nloop invariant i14: z3 >= 0;\nloop invariant i15: z1 <= 4;\nloop invariant i16: z2 <= 2;\nloop invariant i17: z3 <= 2;\nloop invariant i18: x >= z1;\nloop invariant i19: x >= z2;\nloop invariant i20: x >= z3;\nloop invariant i21: y >= z1;\nloop invariant i22: y >= z2;\nloop invariant i23: y >= z3;\nloop invariant i24: x <= y + 2;\nloop invariant i25: y <= x + 2;\nloop invariant i26: 0 <= y <= 2;loop invariant 0 <= x <= 4;loop invariant ((0 <= y) && (y <= 2) && (0 <= x) && (x <= 4));loop invariant (x == (2 * y));\nloop invariant i27: x >= 2;\nloop invariant i28: x - 2*y >= 0;\nloop invariant i29: x - 2*y <= 2;\nloop invariant i30: x - 2*y == 0 ==> y == 0;\nloop invariant i31: x - 2*y == 1 ==> y == 1;\nloop invariant i32: x - 2*y == 2 ==> y == 2;\nloop invariant i33: ( (x <= 4) ==> (y != 0) );\nloop invariant i34: x >= y;\nloop invariant i35: x <= 2;\nloop invariant i36: x <= 4 ==> y != 0;\nloop invariant i37: x >= 0;\nloop invariant i38: x <= 4;\nloop invariant i39: y >= 0;\nloop invariant i40: y <= 4;\nloop invariant i41: x >= 2 * y;\nloop invariant i42: x <= y;\nloop invariant i43: (x % 2 == 0);\nloop invariant i44: (y % 2 == 0);\nloop invariant i45: z3 ==> x >= 4;\nloop invariant i46: z3 ==> y != 0;\nloop invariant i47: x >= (0 + (y - 1) * y / 2);\nloop invariant i48: (x == 4) ==> (y != 0);\nloop invariant i49: x == (2 * y);\nloop invariant i50: (x != 0) ==> (y != 0);\nloop invariant i51: (x != 4) ==> (y == 0);\nloop invariant i52: (x + y) % 2 == 0;\nloop invariant i53: x == 2 * z;\nloop invariant i54: y == 2 * z;\nloop invariant i55: (x + y) == 4 * z;\nloop invariant i56: x == 4 * z;\nloop invariant i57: y == 4 * z;\nloop invariant i58: x == 4 * z1;\nloop invariant i59: y == 4 * z1;\nloop invariant i60: (x + y) == 4 * z1;\nloop invariant i61: x == 4 * z2;\nloop invariant i62: y == 4 * z2;\nloop invariant i63: (x + y) == 4 * z2;\nloop invariant i64: x == 4 * z3;\nloop invariant i65: y == 4 * z3;\nloop invariant i66: (x + y) == 4 * z3;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i24: x <= y + 2;\nloop invariant i25: y <= x + 2;\n\n\n\nloop invariant i29: x - 2*y <= 2;\n\n\n\n\n\n\n\nloop invariant i37: x >= 0;\n\nloop invariant i39: y >= 0;\n\n\n\n\n\n\n\n\nloop invariant i48: (x == 4) ==> (y != 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c"
        ],
        "skipped": [],
        "total": 7,
        "success_count": 4,
        "failure_count": 3,
        "success_rate": 0.5714285714285714
    }
}