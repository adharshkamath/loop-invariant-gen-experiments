{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  while (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x < 0;\nloop invariant y <= unknown_int();\nloop invariant (x + y) < 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x == -y;\nloop invariant x < 0;\nloop invariant x+1 >= 0;\nloop invariant y >= 0;\nloop invariant y < INT_MAX;\nloop invariant x+1 < INT_MAX;\nloop invariant x+1 >= INT_MIN;\nloop invariant x > INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y*y + y;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x + y <= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y < 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y >= 1;\nloop invariant x < 0 ==> x >= y - 1;\nloop invariant x < 0 ==> x <= y - 1;\nloop invariant x >= 0 ==> x >= y - 1;\nloop invariant x >= 0 ==> x <= y - 1;\nloop invariant x < 0 ==> x >= y;\nloop invariant x < 0 ==> x <= y;\nloop invariant x >= 0 ==> x >= y;\nloop invariant x >= 0 ==> x <= y;\nloop invariant x < 0 ==> y >= x;\nloop invariant x < 0 ==> y <= x;\nloop invariant x >= 0 ==> y >= x;\nloop invariant x >= 0 ==> y <= x;\nloop invariant x < 0 ==> y >= x + 1;\nloop invariant x < 0 ==> y <= x + 1;\nloop invariant x >= 0 ==> y >= x + 1;\nloop invariant x >= 0 ==> y <= x + 1;\nloop invariant x < 0 ==> x + y >= 0;\nloop invariant x < 0 ==> x + y <= 0;\nloop invariant x >= 0 ==> x + y >= 0;\nloop invariant x >= 0 ==> x + y <= 0;\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y <= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y <= 0;\nloop invariant x < 0 ==> y >= -x;\nloop invariant x < 0 ==> y <= -x;\nloop invariant x >= 0 ==> y >= -x;\nloop invariant x >= 0 ==> y <= -x;\nloop invariant x < 0 ==> y >= -x + 1;\nloop invariant x < 0 ==> y <= -x + 1;\nloop invariant x >= 0 ==> y >= -x + 1;\nloop invariant x >= 0 ==> y <= -x + 1;\nloop invariant x < 0 ==> x + y >= -x;\nloop invariant x < 0 ==> x + y <= -x;\nloop invariant x >= 0 ==> x + y >= -x;\nloop invariant x >= 0 ==> x + y <= -x;\nloop invariant x < 0 ==> x + y >= -x + 1;\nloop invariant x < 0 ==> x + y <= -x + 1;\nloop invariant x >= 0 ==> x + y >= -x + 1;\nloop invariant x >= 0 ==> x + y <= -x + 1;\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y < 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y >= 1;\nloop invariant x < 0 ==> x >= y - 1;\nloop invariant x < 0 ==> x <= y - 1;\nloop invariant x >= 0 ==> x >= y - 1;\nloop invariant x >= 0 ==> x <= y - 1;\nloop invariant x < 0 ==> x >= y;\nloop invariant x < 0 ==> x <= y;\nloop invariant x >= 0 ==> x >= y;\nloop invariant x >= 0 ==> x <= y;\nloop invariant x < 0 ==> y >= x;\nloop invariant x < 0 ==> y <= x;\nloop invariant x >= 0 ==> y >= x;\nloop invariant x >= 0 ==> y <= x;\nloop invariant x < 0 ==> y >= x + 1;\nloop invariant x < 0 ==> y <= x + 1;\nloop invariant x >= 0 ==> y >= x + 1;\nloop invariant x >= 0 ==> y <= x + 1;\nloop invariant x < 0 ==> x + y >= 0;\nloop invariant x < 0 ==> x + y <= 0;\nloop invariant x >= 0 ==> x + y >= 0;\nloop invariant x >= 0 ==> x + y <= 0;\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y <= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y <= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == -1 * y;\nloop invariant y >= -1 * x;\nloop invariant x >= -1 * (y - 1);\nloop invariant y >= -1 * (x - 1);\nloop invariant x <= -1 * (y - 1) + 1;\nloop invariant y <= -1 * (x - 1) + 1;\nloop invariant x == -1 * y ==> x == -1 * (y - 1);\nloop invariant y == -1 * x ==> y == -1 * (x - 1);\nloop invariant x == -1 * y ==> x == -1 * (y - 1) == -1 * (y - 2) == ... == -1 * (y - k) == ...;\nloop invariant y == -1 * x ==> y == -1 * (x - 1) == -1 * (x - 2) == ... == -1 * (x - k) == ...;\nloop invariant x == -1 * y ==> x >= -1 * (y - 1) >= ... >= -1 * (y - k) >= ...;\nloop invariant y == -1 * x ==> y >= -1 * (x - 1) >= ... >= -1 * (x - k) >= ...;\nloop invariant x == -1 * y ==> x <= -1 * (y - 1) <= ... <= -1 * (y - k) <= ...;\nloop invariant y == -1 * x ==> y <= -1 * (x - 1) <= ... <= -1 * (x - k) <= ...;\nloop invariant x >= -1 * (y - 1) ==> x >= -1 * (y - 2) ==> ... ==> x >= -1 * (y - k) ==> ...;\nloop invariant y >= -1 * (x - 1) ==> y >= -1 * (x - 2) ==> ... ==> y >= -1 * (x - k) ==> ...;\nloop invariant x <= -1 * (y - 1) ==> x <= -1 * (y - 2) ==> ... ==> x <= -1 * (y - k) ==> ...;\nloop invariant y <= -1 * (x - 1) ==> y <= -1 * (x - 2) ==> ... ==> y <= -1 * (x - k) ==> ...;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x + y >= 0;\nloop invariant x >= -y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= (x + y);\nloop invariant x + y <= 0 ==> x <= 0;\nloop invariant y <= 0 ==> x <= 0;\nloop invariant x + y >= 0 ==> x >= 0;\nloop invariant 0 <= y ==> x >= 0;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\nloop invariant x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= -y;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant 0 <= x <= y;\nloop invariant x >= -y;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant y > 0;\nloop invariant x + y == x + y;\nloop invariant x <= x;\nloop invariant y <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= 0;\nloop invariant x <= (y + x);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= (y - 1);\nloop invariant y <= (y + 1);\nloop invariant x >= y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x < 0;\nloop invariant y <= unknown_int();\nloop invariant (x + y) < 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x == -y;\nloop invariant x < 0;\nloop invariant x+1 >= 0;\nloop invariant y >= 0;\nloop invariant y < INT_MAX;\nloop invariant x+1 < INT_MAX;\nloop invariant x+1 >= INT_MIN;\nloop invariant x > INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x <= INT_MAX;\nloop invariant x >= INT_MIN;\nloop invariant x < INT_MAX;\nloop invariant x >= INT_MIN;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x+1 >= INT_MIN;\n\nloop invariant i10: x < INT_MAX;\nloop invariant i11: x >= INT_MIN;\nloop invariant i12: x <= INT_MAX;\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y*y + y;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0;\nloop invariant y >= 0;\nloop invariant y <= 0;\nloop invariant x >= 0;\nloop invariant x <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x + y <= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y < 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y >= 1;\nloop invariant x < 0 ==> x >= y - 1;\nloop invariant x < 0 ==> x <= y - 1;\nloop invariant x >= 0 ==> x >= y - 1;\nloop invariant x >= 0 ==> x <= y - 1;\nloop invariant x < 0 ==> x >= y;\nloop invariant x < 0 ==> x <= y;\nloop invariant x >= 0 ==> x >= y;\nloop invariant x >= 0 ==> x <= y;\nloop invariant x < 0 ==> y >= x;\nloop invariant x < 0 ==> y <= x;\nloop invariant x >= 0 ==> y >= x;\nloop invariant x >= 0 ==> y <= x;\nloop invariant x < 0 ==> y >= x + 1;\nloop invariant x < 0 ==> y <= x + 1;\nloop invariant x >= 0 ==> y >= x + 1;\nloop invariant x >= 0 ==> y <= x + 1;\nloop invariant x < 0 ==> x + y >= 0;\nloop invariant x < 0 ==> x + y <= 0;\nloop invariant x >= 0 ==> x + y >= 0;\nloop invariant x >= 0 ==> x + y <= 0;\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y <= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y <= 0;\nloop invariant x < 0 ==> y >= -x;\nloop invariant x < 0 ==> y <= -x;\nloop invariant x >= 0 ==> y >= -x;\nloop invariant x >= 0 ==> y <= -x;\nloop invariant x < 0 ==> y >= -x + 1;\nloop invariant x < 0 ==> y <= -x + 1;\nloop invariant x >= 0 ==> y >= -x + 1;\nloop invariant x >= 0 ==> y <= -x + 1;\nloop invariant x < 0 ==> x + y >= -x;\nloop invariant x < 0 ==> x + y <= -x;\nloop invariant x >= 0 ==> x + y >= -x;\nloop invariant x >= 0 ==> x + y <= -x;\nloop invariant x < 0 ==> x + y >= -x + 1;\nloop invariant x < 0 ==> x + y <= -x + 1;\nloop invariant x >= 0 ==> x + y >= -x + 1;\nloop invariant x >= 0 ==> x + y <= -x + 1;\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y < 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y >= 1;\nloop invariant x < 0 ==> x >= y - 1;\nloop invariant x < 0 ==> x <= y - 1;\nloop invariant x >= 0 ==> x >= y - 1;\nloop invariant x >= 0 ==> x <= y - 1;\nloop invariant x < 0 ==> x >= y;\nloop invariant x < 0 ==> x <= y;\nloop invariant x >= 0 ==> x >= y;\nloop invariant x >= 0 ==> x <= y;\nloop invariant x < 0 ==> y >= x;\nloop invariant x < 0 ==> y <= x;\nloop invariant x >= 0 ==> y >= x;\nloop invariant x >= 0 ==> y <= x;\nloop invariant x < 0 ==> y >= x + 1;\nloop invariant x < 0 ==> y <= x + 1;\nloop invariant x >= 0 ==> y >= x + 1;\nloop invariant x >= 0 ==> y <= x + 1;\nloop invariant x < 0 ==> x + y >= 0;\nloop invariant x < 0 ==> x + y <= 0;\nloop invariant x >= 0 ==> x + y >= 0;\nloop invariant x >= 0 ==> x + y <= 0;\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y <= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: x >= 0 ==> y >= 0;\nloop invariant i6: x >= 0 ==> y >= 1;\n\n\n\nloop invariant i10: x >= 0 ==> x <= y - 1;\n\n\n\nloop invariant i14: x >= 0 ==> x <= y;\n\n\nloop invariant i17: x >= 0 ==> y >= x;\n\n\n\nloop invariant i21: x >= 0 ==> y >= x + 1;\n\n\n\nloop invariant i25: x >= 0 ==> x + y >= 0;\n\n\n\n\n\nloop invariant i31: x >= 0 ==> y >= -x;\n\n\n\nloop invariant i35: x >= 0 ==> y >= -x + 1;\n\n\n\nloop invariant i39: x >= 0 ==> x + y >= -x;\n\n\n\nloop invariant i43: x >= 0 ==> x + y >= -x + 1;\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == -1 * y;\nloop invariant y >= -1 * x;\nloop invariant x >= -1 * (y - 1);\nloop invariant y >= -1 * (x - 1);\nloop invariant x <= -1 * (y - 1) + 1;\nloop invariant y <= -1 * (x - 1) + 1;\nloop invariant x == -1 * y ==> x == -1 * (y - 1);\nloop invariant y == -1 * x ==> y == -1 * (x - 1);\nloop invariant x == -1 * y ==> x == -1 * (y - 1) == -1 * (y - 2) == ... == -1 * (y - k) == ...;\nloop invariant y == -1 * x ==> y == -1 * (x - 1) == -1 * (x - 2) == ... == -1 * (x - k) == ...;\nloop invariant x == -1 * y ==> x >= -1 * (y - 1) >= ... >= -1 * (y - k) >= ...;\nloop invariant y == -1 * x ==> y >= -1 * (x - 1) >= ... >= -1 * (x - k) >= ...;\nloop invariant x == -1 * y ==> x <= -1 * (y - 1) <= ... <= -1 * (y - k) <= ...;\nloop invariant y == -1 * x ==> y <= -1 * (x - 1) <= ... <= -1 * (x - k) <= ...;\nloop invariant x >= -1 * (y - 1) ==> x >= -1 * (y - 2) ==> ... ==> x >= -1 * (y - k) ==> ...;\nloop invariant y >= -1 * (x - 1) ==> y >= -1 * (x - 2) ==> ... ==> y >= -1 * (x - k) ==> ...;\nloop invariant x <= -1 * (y - 1) ==> x <= -1 * (y - 2) ==> ... ==> x <= -1 * (y - k) ==> ...;\nloop invariant y <= -1 * (x - 1) ==> y <= -1 * (x - 2) ==> ... ==> y <= -1 * (x - k) ==> ...;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x + y >= 0;\nloop invariant x >= -y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= (x + y);\nloop invariant x + y <= 0 ==> x <= 0;\nloop invariant y <= 0 ==> x <= 0;\nloop invariant x + y >= 0 ==> x >= 0;\nloop invariant 0 <= y ==> x >= 0;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\nloop invariant i3: x + y <= 0 ==> x <= 0;\nloop invariant i4: y <= 0 ==> x <= 0;\n\n\n\n\n\n\n\nloop invariant i12: x >= 0 ==> y >= 0;\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\nloop invariant x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2;\nloop invariant i9: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0;\n\nloop invariant i11: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0;\n\nloop invariant i13: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x;\nloop invariant i14: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2;\nloop invariant i15: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i16: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i17: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i18: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i19: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= -y;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant 0 <= x <= y;\nloop invariant x >= -y;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant y > 0;\nloop invariant x + y == x + y;\nloop invariant x <= x;\nloop invariant y <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\nloop invariant i3: x + y == x + y;\nloop invariant i4: x <= x;\nloop invariant i5: y <= y;\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= 0;\nloop invariant x <= (y + x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= (y - 1);\nloop invariant y <= (y + 1);\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\nloop invariant i4: y <= (y + 1);\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\nloop invariant i1: x < 0;\nloop invariant i2: y <= unknown_int();\nloop invariant i3: (x + y) < 0;\nloop invariant i4: 0 <= y <= INT_MAX;\nloop invariant i5: x == -y;\nloop invariant i6: x+1 >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: y < INT_MAX;\nloop invariant i9: x+1 < INT_MAX;\nloop invariant i10: x+1 >= INT_MIN;\nloop invariant i11: x > INT_MIN;\nloop invariant i12: x < INT_MAX;\nloop invariant i13: x >= INT_MIN;\nloop invariant i14: x <= INT_MAX;\nloop invariant i15: 0 <= y;\nloop invariant i16: x >= y*y + y;\nloop invariant i17: x >= 0;\nloop invariant i18: 0 <= x <= 0;\nloop invariant i19: y <= 0;\nloop invariant i20: x <= 0;\nloop invariant i21: 0 <= y <= x;\nloop invariant i22: x + y <= 0 ==> x >= 0;\nloop invariant i23: x >= y;\nloop invariant i24: x < 0 ==> y >= 0;\nloop invariant i25: x < 0 ==> y < 0;\nloop invariant i26: x >= 0 ==> y >= 0;\nloop invariant i27: x >= 0 ==> y >= 1;\nloop invariant i28: x < 0 ==> x >= y - 1;\nloop invariant i29: x < 0 ==> x <= y - 1;\nloop invariant i30: x >= 0 ==> x >= y - 1;\nloop invariant i31: x >= 0 ==> x <= y - 1;\nloop invariant i32: x < 0 ==> x >= y;\nloop invariant i33: x < 0 ==> x <= y;\nloop invariant i34: x >= 0 ==> x >= y;\nloop invariant i35: x >= 0 ==> x <= y;\nloop invariant i36: x < 0 ==> y >= x;\nloop invariant i37: x < 0 ==> y <= x;\nloop invariant i38: x >= 0 ==> y >= x;\nloop invariant i39: x >= 0 ==> y <= x;\nloop invariant i40: x < 0 ==> y >= x + 1;\nloop invariant i41: x < 0 ==> y <= x + 1;\nloop invariant i42: x >= 0 ==> y >= x + 1;\nloop invariant i43: x >= 0 ==> y <= x + 1;\nloop invariant i44: x < 0 ==> x + y >= 0;\nloop invariant i45: x < 0 ==> x + y <= 0;\nloop invariant i46: x >= 0 ==> x + y >= 0;\nloop invariant i47: x >= 0 ==> x + y <= 0;\nloop invariant i48: x < 0 ==> y <= 0;\nloop invariant i49: x >= 0 ==> y <= 0;\nloop invariant i50: x < 0 ==> y >= -x;\nloop invariant i51: x < 0 ==> y <= -x;\nloop invariant i52: x >= 0 ==> y >= -x;\nloop invariant i53: x >= 0 ==> y <= -x;\nloop invariant i54: x < 0 ==> y >= -x + 1;\nloop invariant i55: x < 0 ==> y <= -x + 1;\nloop invariant i56: x >= 0 ==> y >= -x + 1;\nloop invariant i57: x >= 0 ==> y <= -x + 1;\nloop invariant i58: x < 0 ==> x + y >= -x;\nloop invariant i59: x < 0 ==> x + y <= -x;\nloop invariant i60: x >= 0 ==> x + y >= -x;\nloop invariant i61: x >= 0 ==> x + y <= -x;\nloop invariant i62: x < 0 ==> x + y >= -x + 1;\nloop invariant i63: x < 0 ==> x + y <= -x + 1;\nloop invariant i64: x >= 0 ==> x + y >= -x + 1;\nloop invariant i65: x >= 0 ==> x + y <= -x + 1;\nloop invariant i66: x == -1 * y;\nloop invariant i67: y >= -1 * x;\nloop invariant i68: x >= -1 * (y - 1);\nloop invariant i69: y >= -1 * (x - 1);\nloop invariant i70: x <= -1 * (y - 1) + 1;\nloop invariant i71: y <= -1 * (x - 1) + 1;\nloop invariant i72: x == -1 * y ==> x == -1 * (y - 1);\nloop invariant i73: y == -1 * x ==> y == -1 * (x - 1);\nloop invariant i74: x == -1 * y ==> x == -1 * (y - 1) == -1 * (y - 2) == ... == -1 * (y - k) == ...;\nloop invariant i75: y == -1 * x ==> y == -1 * (x - 1) == -1 * (x - 2) == ... == -1 * (x - k) == ...;\nloop invariant i76: x == -1 * y ==> x >= -1 * (y - 1) >= ... >= -1 * (y - k) >= ...;\nloop invariant i77: y == -1 * x ==> y >= -1 * (x - 1) >= ... >= -1 * (x - k) >= ...;\nloop invariant i78: x == -1 * y ==> x <= -1 * (y - 1) <= ... <= -1 * (y - k) <= ...;\nloop invariant i79: y == -1 * x ==> y <= -1 * (x - 1) <= ... <= -1 * (x - k) <= ...;\nloop invariant i80: x >= -1 * (y - 1) ==> x >= -1 * (y - 2) ==> ... ==> x >= -1 * (y - k) ==> ...;\nloop invariant i81: y >= -1 * (x - 1) ==> y >= -1 * (x - 2) ==> ... ==> y >= -1 * (x - k) ==> ...;\nloop invariant i82: x <= -1 * (y - 1) ==> x <= -1 * (y - 2) ==> ... ==> x <= -1 * (y - k) ==> ...;\nloop invariant i83: y <= -1 * (x - 1) ==> y <= -1 * (x - 2) ==> ... ==> y <= -1 * (x - k) ==> ...;\nloop invariant i84: x + y >= x;\nloop invariant i85: x + y >= y;\nloop invariant i86: 0 <= x;\nloop invariant i87: x + y >= 0;\nloop invariant i88: x >= -y;\nloop invariant i89: x <= (x + y);\nloop invariant i90: x + y <= 0 ==> x <= 0;\nloop invariant i91: y <= 0 ==> x <= 0;\nloop invariant i92: x + y >= 0 ==> x >= 0;\nloop invariant i93: 0 <= y ==> x >= 0;\nloop invariant i94: x == 0 ==> y == 0;\nloop invariant i95: y == 0 ==> x == 0;\nloop invariant i96: y >= 0 ==> x >= 0;\nloop invariant i97: 0 <= x <= y;\nloop invariant i98: x >= y * (y - 1) / 2;\nloop invariant i99: y >= x + y * (y - 1) / 2;\nloop invariant i100: y >= x + y * (y - 1) / 2 ==> x >= 0;\nloop invariant i101: y >= x + y * (y - 1) / 2 ==> y >= 0;\nloop invariant i102: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i103: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2;\nloop invariant i104: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0;\nloop invariant i105: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0;\nloop invariant i106: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0;\nloop invariant i107: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0;\nloop invariant i108: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x;\nloop invariant i109: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2;\nloop invariant i110: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i111: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i112: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i113: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i114: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i115: y > 0;\nloop invariant i116: x + y == x + y;\nloop invariant i117: x <= x;\nloop invariant i118: y <= y;\nloop invariant i119: x <= (y + x);\nloop invariant i120: x <= (y - 1);\nloop invariant i121: y <= (y + 1);\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 46,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x+1 >= INT_MIN;\n\nloop invariant i12: x < INT_MAX;\nloop invariant i13: x >= INT_MIN;\nloop invariant i14: x <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: x >= 0 ==> y >= 0;\nloop invariant i27: x >= 0 ==> y >= 1;\n\n\n\nloop invariant i31: x >= 0 ==> x <= y - 1;\n\n\n\nloop invariant i35: x >= 0 ==> x <= y;\n\n\nloop invariant i38: x >= 0 ==> y >= x;\n\n\n\nloop invariant i42: x >= 0 ==> y >= x + 1;\n\n\n\nloop invariant i46: x >= 0 ==> x + y >= 0;\n\n\n\n\n\nloop invariant i52: x >= 0 ==> y >= -x;\n\n\n\nloop invariant i56: x >= 0 ==> y >= -x + 1;\n\n\n\nloop invariant i60: x >= 0 ==> x + y >= -x;\n\n\n\nloop invariant i64: x >= 0 ==> x + y >= -x + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i90: x + y <= 0 ==> x <= 0;\nloop invariant i91: y <= 0 ==> x <= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i103: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2;\nloop invariant i104: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0;\n\nloop invariant i106: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0;\n\nloop invariant i108: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x;\nloop invariant i109: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2;\nloop invariant i110: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i111: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i112: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i113: y >= x + y * (y - 1) / 2 ==> y >= x + y * (y - 1) / 2 ==> y >= 0 ==> x >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\nloop invariant i114: y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= 0 ==> y >= 0 ==> y >= x ==> y >= x + y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2 ==> x >= y * (y - 1) / 2;\n\nloop invariant i116: x + y == x + y;\nloop invariant i117: x <= x;\nloop invariant i118: y <= y;\n\n\nloop invariant i121: y <= (y + 1);\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c"
        ],
        "skipped": [],
        "total": 150,
        "success_count": 130,
        "failure_count": 20,
        "success_rate": 0.8666666666666667
    }
}