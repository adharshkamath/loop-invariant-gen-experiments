{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  while ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x < 10 ==> (x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 10 ==> !(x >= 0) && x >= 10;\nloop invariant x >= 0 ==> !(x < 10) && x < 10;\nloop invariant x < 10 ==> !(x >= 0) && x < 10;\nloop invariant x >= 0 ==> !(x < 10) && x >= 0;\nloop invariant x >= 0 ==> x < 10;\nloop invariant x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x >= 0;\nloop invariant x <= 10 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x < 10;\nloop invariant x <= 10 ==> x < 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x >= 0 ==> x + 1 >= 0;\nloop invariant x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 9;\nloop invariant x >= (x + 1);\nloop invariant x >= (x + 2);\nloop invariant x >= (x + 3);\nloop invariant x >= (x + 4);\nloop invariant x >= (x + 5);\nloop invariant x >= (x + 6);\nloop invariant x >= (x + 7);\nloop invariant x >= (x + 8);\nloop invariant x >= (x + 9);\nloop invariant x >= (x + 10);\nloop invariant x >= (x + 11);\nloop invariant x >= (x + 12);\nloop invariant x >= (x + 13);\nloop invariant x >= (x + 14);\nloop invariant x >= (x + 15);\nloop invariant x >= (x + 16);\nloop invariant x >= (x + 17);\nloop invariant x >= (x + 18);\nloop invariant x >= (x + 19);\nloop invariant x >= (x + 20);\nloop invariant x >= (x + 21);\nloop invariant x >= (x + 22);\nloop invariant x >= (x + 23);\nloop invariant x >= (x + 24);\nloop invariant x >= (x + 25);\nloop invariant x >= (x + 26);\nloop invariant x >= (x + 27);\nloop invariant x >= (x + 28);\nloop invariant x >= (x + 29);\nloop invariant x >= (x + 30);\nloop invariant x >= (x + 31);\nloop invariant x >= (x + 32);\nloop invariant x >= (x + 33);\nloop invariant x >= (x + 34);\nloop invariant x >= (x + 35);\nloop invariant x >= (x + 36);\nloop invariant x >= (x + 37);\nloop invariant x >= (x + 38);\nloop invariant x >= (x + 39);\nloop invariant x >= (x + 40);\nloop invariant x >= (x + 41);\nloop invariant x >= (x + 42);\nloop invariant x >= (x + 43);\nloop invariant x >= (x + 44);\nloop invariant x >= (x + 45);\nloop invariant x >= (x + 46);\nloop invariant x >= (x + 47);\nloop invariant x >= (x + 48);\nloop invariant x >= (x + 49);\nloop invariant x >= (x + 50);\nloop invariant x >= (x + 51);\nloop invariant x >= (x + 52);\nloop invariant x >= (x + 53);\nloop invariant x >= (x + 54);\nloop invariant x >= (x + 55);\nloop invariant x >= (x + 56);\nloop invariant x >= (x + 57);\nloop invariant x >= (x + 58);\nloop invariant x >= (x + 59);\nloop invariant x >= (x + 60);\nloop invariant x >= (x + 61);\nloop invariant x >= (x + 62);\nloop invariant x >= (x + 63);\nloop invariant x >= (x + 64);\nloop invariant x >= (x + 65);\nloop invariant x >= (x + 66);\nloop invariant x >= (x + 67);\nloop invariant x >= (x + 68);\nloop invariant x >= (x + 69);\nloop invariant x >= (x + 70);\nloop invariant x >= (x + 71);\nloop invariant x >= (x + 72);\nloop invariant x >= (x + 73);\nloop invariant x >= (x + 74);\nloop invariant x >= (x + 75);\nloop invariant x >= (x + 76);\nloop invariant x >= (x + 77);\nloop invariant x >= (x + 78);\nloop invariant x >= (x + 79);\nloop invariant x >= (x + 80);\nloop invariant x >= (x + 81);\nloop invariant x >= (x + 82);\nloop invariant x >= (x + 83);\nloop invariant x >= (x + 84);\nloop invariant x >= (x + 85);\nloop invariant x >= (x + 86);\nloop invariant x >= (x + 87);\nloop invariant x >= (x + 88);\nloop invariant x >= (x + 89);\nloop invariant x >= (x + 90);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\nloop invariant x < 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 10;\nloop invariant x >= 0 ==> x < 10;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x <= 10;\nloop invariant x >= 0;\nloop invariant x >= 10 ==> x == 10;\nloop invariant x < 10 ==> x != 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x != 10 ==> x <= 9;\nloop invariant x == 10 ==> x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x < 10 ==> (x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\nloop invariant i2: x < 10 ==> (x >= 0);\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 1;\nloop invariant y <= 10;\nloop invariant x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 10 ==> !(x >= 0) && x >= 10;\nloop invariant x >= 0 ==> !(x < 10) && x < 10;\nloop invariant x < 10 ==> !(x >= 0) && x < 10;\nloop invariant x >= 0 ==> !(x < 10) && x >= 0;\nloop invariant x >= 0 ==> x < 10;\nloop invariant x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x >= 0;\nloop invariant x <= 10 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x < 10;\nloop invariant x <= 10 ==> x < 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x < 10 ==> x <= 10;\nloop invariant x >= 0 ==> x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\n\n\n\n\n\n\n\nloop invariant i9: x < 10 ==> x >= 0;\nloop invariant i10: x <= 10 ==> x >= 0;\nloop invariant i11: x < 10 ==> x <= 10;\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x >= 0 ==> x + 1 >= 0;\nloop invariant x >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x >= 0 ==> x + 1 >= 0;\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 90,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 9;\nloop invariant x >= (x + 1);\nloop invariant x >= (x + 2);\nloop invariant x >= (x + 3);\nloop invariant x >= (x + 4);\nloop invariant x >= (x + 5);\nloop invariant x >= (x + 6);\nloop invariant x >= (x + 7);\nloop invariant x >= (x + 8);\nloop invariant x >= (x + 9);\nloop invariant x >= (x + 10);\nloop invariant x >= (x + 11);\nloop invariant x >= (x + 12);\nloop invariant x >= (x + 13);\nloop invariant x >= (x + 14);\nloop invariant x >= (x + 15);\nloop invariant x >= (x + 16);\nloop invariant x >= (x + 17);\nloop invariant x >= (x + 18);\nloop invariant x >= (x + 19);\nloop invariant x >= (x + 20);\nloop invariant x >= (x + 21);\nloop invariant x >= (x + 22);\nloop invariant x >= (x + 23);\nloop invariant x >= (x + 24);\nloop invariant x >= (x + 25);\nloop invariant x >= (x + 26);\nloop invariant x >= (x + 27);\nloop invariant x >= (x + 28);\nloop invariant x >= (x + 29);\nloop invariant x >= (x + 30);\nloop invariant x >= (x + 31);\nloop invariant x >= (x + 32);\nloop invariant x >= (x + 33);\nloop invariant x >= (x + 34);\nloop invariant x >= (x + 35);\nloop invariant x >= (x + 36);\nloop invariant x >= (x + 37);\nloop invariant x >= (x + 38);\nloop invariant x >= (x + 39);\nloop invariant x >= (x + 40);\nloop invariant x >= (x + 41);\nloop invariant x >= (x + 42);\nloop invariant x >= (x + 43);\nloop invariant x >= (x + 44);\nloop invariant x >= (x + 45);\nloop invariant x >= (x + 46);\nloop invariant x >= (x + 47);\nloop invariant x >= (x + 48);\nloop invariant x >= (x + 49);\nloop invariant x >= (x + 50);\nloop invariant x >= (x + 51);\nloop invariant x >= (x + 52);\nloop invariant x >= (x + 53);\nloop invariant x >= (x + 54);\nloop invariant x >= (x + 55);\nloop invariant x >= (x + 56);\nloop invariant x >= (x + 57);\nloop invariant x >= (x + 58);\nloop invariant x >= (x + 59);\nloop invariant x >= (x + 60);\nloop invariant x >= (x + 61);\nloop invariant x >= (x + 62);\nloop invariant x >= (x + 63);\nloop invariant x >= (x + 64);\nloop invariant x >= (x + 65);\nloop invariant x >= (x + 66);\nloop invariant x >= (x + 67);\nloop invariant x >= (x + 68);\nloop invariant x >= (x + 69);\nloop invariant x >= (x + 70);\nloop invariant x >= (x + 71);\nloop invariant x >= (x + 72);\nloop invariant x >= (x + 73);\nloop invariant x >= (x + 74);\nloop invariant x >= (x + 75);\nloop invariant x >= (x + 76);\nloop invariant x >= (x + 77);\nloop invariant x >= (x + 78);\nloop invariant x >= (x + 79);\nloop invariant x >= (x + 80);\nloop invariant x >= (x + 81);\nloop invariant x >= (x + 82);\nloop invariant x >= (x + 83);\nloop invariant x >= (x + 84);\nloop invariant x >= (x + 85);\nloop invariant x >= (x + 86);\nloop invariant x >= (x + 87);\nloop invariant x >= (x + 88);\nloop invariant x >= (x + 89);\nloop invariant x >= (x + 90);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\nloop invariant x < 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 10;\nloop invariant x >= 0 ==> x < 10;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: x >= 0 ==> x >= 0;\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0;\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\nloop invariant 0 <= x <= 10;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0;\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x <= 10;\nloop invariant x >= 0;\nloop invariant x >= 10 ==> x == 10;\nloop invariant x < 10 ==> x != 10;\nloop invariant x >= 0 ==> x <= 10;\nloop invariant x != 10 ==> x <= 9;\nloop invariant x == 10 ==> x >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: x < 10 ==> x != 10;\n\n\nloop invariant i7: x == 10 ==> x >= 10;\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unbound logic variable y. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: x < 10 ==> (x >= 0);\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: x <= 10;\nloop invariant i6: y <= 10;\nloop invariant i7: x >= y;\nloop invariant i8: x >= 1;\nloop invariant i9: x < 10 ==> !(x >= 0) && x >= 10;\nloop invariant i10: x >= 0 ==> !(x < 10) && x < 10;\nloop invariant i11: x < 10 ==> !(x >= 0) && x < 10;\nloop invariant i12: x >= 0 ==> !(x < 10) && x >= 0;\nloop invariant i13: x >= 0 ==> x < 10;\nloop invariant i14: x >= 0 ==> x <= 10;\nloop invariant i15: x < 10 ==> x >= 0;\nloop invariant i16: x <= 10 ==> x >= 0;\nloop invariant i17: x < 10 ==> x <= 10;\nloop invariant i18: x <= 10 ==> x < 10;\nloop invariant i19: x >= 10;\nloop invariant i20: x >= 0 ==> x + 1 >= 0;\nloop invariant i21: 0 <= x <= 9;\nloop invariant i22: x >= (x + 1);\nloop invariant i23: x >= (x + 2);\nloop invariant i24: x >= (x + 3);\nloop invariant i25: x >= (x + 4);\nloop invariant i26: x >= (x + 5);\nloop invariant i27: x >= (x + 6);\nloop invariant i28: x >= (x + 7);\nloop invariant i29: x >= (x + 8);\nloop invariant i30: x >= (x + 9);\nloop invariant i31: x >= (x + 10);\nloop invariant i32: x >= (x + 11);\nloop invariant i33: x >= (x + 12);\nloop invariant i34: x >= (x + 13);\nloop invariant i35: x >= (x + 14);\nloop invariant i36: x >= (x + 15);\nloop invariant i37: x >= (x + 16);\nloop invariant i38: x >= (x + 17);\nloop invariant i39: x >= (x + 18);\nloop invariant i40: x >= (x + 19);\nloop invariant i41: x >= (x + 20);\nloop invariant i42: x >= (x + 21);\nloop invariant i43: x >= (x + 22);\nloop invariant i44: x >= (x + 23);\nloop invariant i45: x >= (x + 24);\nloop invariant i46: x >= (x + 25);\nloop invariant i47: x >= (x + 26);\nloop invariant i48: x >= (x + 27);\nloop invariant i49: x >= (x + 28);\nloop invariant i50: x >= (x + 29);\nloop invariant i51: x >= (x + 30);\nloop invariant i52: x >= (x + 31);\nloop invariant i53: x >= (x + 32);\nloop invariant i54: x >= (x + 33);\nloop invariant i55: x >= (x + 34);\nloop invariant i56: x >= (x + 35);\nloop invariant i57: x >= (x + 36);\nloop invariant i58: x >= (x + 37);\nloop invariant i59: x >= (x + 38);\nloop invariant i60: x >= (x + 39);\nloop invariant i61: x >= (x + 40);\nloop invariant i62: x >= (x + 41);\nloop invariant i63: x >= (x + 42);\nloop invariant i64: x >= (x + 43);\nloop invariant i65: x >= (x + 44);\nloop invariant i66: x >= (x + 45);\nloop invariant i67: x >= (x + 46);\nloop invariant i68: x >= (x + 47);\nloop invariant i69: x >= (x + 48);\nloop invariant i70: x >= (x + 49);\nloop invariant i71: x >= (x + 50);\nloop invariant i72: x >= (x + 51);\nloop invariant i73: x >= (x + 52);\nloop invariant i74: x >= (x + 53);\nloop invariant i75: x >= (x + 54);\nloop invariant i76: x >= (x + 55);\nloop invariant i77: x >= (x + 56);\nloop invariant i78: x >= (x + 57);\nloop invariant i79: x >= (x + 58);\nloop invariant i80: x >= (x + 59);\nloop invariant i81: x >= (x + 60);\nloop invariant i82: x >= (x + 61);\nloop invariant i83: x >= (x + 62);\nloop invariant i84: x >= (x + 63);\nloop invariant i85: x >= (x + 64);\nloop invariant i86: x >= (x + 65);\nloop invariant i87: x >= (x + 66);\nloop invariant i88: x >= (x + 67);\nloop invariant i89: x >= (x + 68);\nloop invariant i90: x >= (x + 69);\nloop invariant i91: x >= (x + 70);\nloop invariant i92: x >= (x + 71);\nloop invariant i93: x >= (x + 72);\nloop invariant i94: x >= (x + 73);\nloop invariant i95: x >= (x + 74);\nloop invariant i96: x >= (x + 75);\nloop invariant i97: x >= (x + 76);\nloop invariant i98: x >= (x + 77);\nloop invariant i99: x >= (x + 78);\nloop invariant i100: x >= (x + 79);\nloop invariant i101: x >= (x + 80);\nloop invariant i102: x >= (x + 81);\nloop invariant i103: x >= (x + 82);\nloop invariant i104: x >= (x + 83);\nloop invariant i105: x >= (x + 84);\nloop invariant i106: x >= (x + 85);\nloop invariant i107: x >= (x + 86);\nloop invariant i108: x >= (x + 87);\nloop invariant i109: x >= (x + 88);\nloop invariant i110: x >= (x + 89);\nloop invariant i111: x >= (x + 90);\nloop invariant i112: x < 10;\nloop invariant i113: y <= 100000;\nloop invariant i114: x >= (1 + (y - 1) * y / 2);\nloop invariant i115: x >= 0 ==> x >= 0;\nloop invariant i116: 0 <= x;\nloop invariant i117: x >= 10 ==> x == 10;\nloop invariant i118: x < 10 ==> x != 10;\nloop invariant i119: x != 10 ==> x <= 9;\nloop invariant i120: x == 10 ==> x >= 10;\nloop invariant i121: 0 <= x <= 100;\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 104,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  /*@\n\nloop invariant i2: x < 10 ==> (x >= 0);\n\nloop invariant i4: x >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: x < 10 ==> x >= 0;\nloop invariant i16: x <= 10 ==> x >= 0;\nloop invariant i17: x < 10 ==> x <= 10;\n\n\nloop invariant i20: x >= 0 ==> x + 1 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i115: x >= 0 ==> x >= 0;\nloop invariant i116: 0 <= x;\n\nloop invariant i118: x < 10 ==> x != 10;\n\nloop invariant i120: x == 10 ==> x >= 10;\n\n*/\nwhile ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c"
        ],
        "skipped": [],
        "total": 154,
        "success_count": 134,
        "failure_count": 20,
        "success_rate": 0.8701298701298701
    }
}