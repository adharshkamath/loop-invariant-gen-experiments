{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/55.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == 1 ==> n == 0;\nloop invariant c > n ==> c == n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant unknown() ==> (c >= n);\nloop invariant !unknown() ==> (c <= n);\nloop invariant unknown() ==> (c < n);\nloop invariant !unknown() ==> (c > n);\nloop invariant unknown() ==> (c != n);\nloop invariant !unknown() ==> (c == n);\nloop invariant unknown() ==> (c != 1);\nloop invariant !unknown() ==> (c == 1);\nloop invariant unknown() ==> (c != 0);\nloop invariant !unknown() ==> (c == 0);\nloop invariant unknown() ==> (c != -1);\nloop invariant !unknown() ==> (c == -1);\nloop invariant unknown() ==> (c != -2);\nloop invariant !unknown() ==> (c == -2);\nloop invariant unknown() ==> (c != -3);\nloop invariant !unknown() ==> (c == -3);\nloop invariant unknown() ==> (c != -4);\nloop invariant !unknown() ==> (c == -4);\nloop invariant unknown() ==> (c != -5);\nloop invariant !unknown() ==> (c == -5);\nloop invariant unknown() ==> (c != -6);\nloop invariant !unknown() ==> (c == -6);\nloop invariant unknown() ==> (c != -7);\nloop invariant !unknown() ==> (c == -7);\nloop invariant unknown() ==> (c != -8);\nloop invariant !unknown() ==> (c == -8);\nloop invariant unknown() ==> (c != -9);\nloop invariant !unknown() ==> (c == -9);\nloop invariant unknown() ==> (c != -10);\nloop invariant !unknown() ==> (c == -10);\nloop invariant unknown() ==> (c != -11);\nloop invariant !unknown() ==> (c == -11);\nloop invariant unknown() ==> (c != -12);\nloop invariant !unknown() ==> (c == -12);\nloop invariant unknown() ==> (c != -13);\nloop invariant !unknown() ==> (c == -13);\nloop invariant unknown() ==> (c != -14);\nloop invariant !unknown() ==> (c == -14);\nloop invariant unknown() ==> (c != -15);\nloop invariant !unknown() ==> (c == -15);\nloop invariant unknown() ==> (c != -16);\nloop invariant !unknown() ==> (c == -16);\nloop invariant unknown() ==> (c != -17);\nloop invariant !unknown() ==> (c == -17);\nloop invariant unknown() ==> (c != -18);\nloop invariant !unknown() ==> (c == -18);\nloop invariant unknown() ==> (c != -19);\nloop invariant !unknown() ==> (c == -19);\nloop invariant unknown() ==> (c != -20);\nloop invariant !unknown() ==> (c == -20);\nloop invariant unknown() ==> (c != -21);\nloop invariant !unknown() ==> (c == -21);\nloop invariant unknown() ==> (c != -22);\nloop invariant !unknown() ==> (c == -22);\nloop invariant unknown() ==> (c != -23);\nloop invariant !unknown() ==> (c == -23);\nloop invariant unknown() ==> (c != -24);\nloop invariant !unknown() ==> (c == -24);\nloop invariant unknown() ==> (c != -25);\nloop invariant !unknown() ==> (c == -25);\nloop invariant unknown() ==> (c != -26);\nloop invariant !unknown() ==> (c == -26);\nloop invariant unknown() ==> (c != -27);\nloop invariant !unknown() ==> (c == -27);\nloop invariant unknown() ==> (c != -28);\nloop invariant !unknown() ==> (c == -28);\nloop invariant unknown() ==> (c != -29);\nloop invariant !unknown() ==> (c == -29);\nloop invariant unknown() ==> (c != -30);\nloop invariant !unknown() ==> (c == -30);\nloop invariant unknown() ==> (c != -31);\nloop invariant !unknown() ==> (c == -31);\nloop invariant unknown() ==> (c != -32);\nloop invariant !unknown() ==> (c == -32);\nloop invariant unknown() ==> (c != -33);\nloop invariant !unknown() ==> (c == -33);\nloop invariant unknown() ==> (c != -34);\nloop invariant !unknown() ==> (c == -34);\nloop invariant unknown() ==> (c != -35);\nloop invariant !unknown() ==> (c == -35);\nloop invariant unknown() ==> (c != -36);\nloop invariant !unknown() ==> (c == -36);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c == (if c > n then c + 1 else if c == n then 1 else c);\nloop invariant (c < 0) ==> (c == n);\nloop invariant (c > n) ==> (c == n);\nloop invariant (c == n) ==> (c == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n ==> unknown());\nloop invariant (c < 0 ==> c == 0);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != 0);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n; loop invariant c <= n; loop invariant !(c > n) ==> c == n; loop invariant c >= 0; loop invariant c <= n; loop invariant !(c > n) ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n ==> unknown() == false;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c >= 0 ==> unknown() == true;\nloop invariant c >= 0 ==> c == n ==> unknown() == false;\nloop invariant c >= 0 ==> c == n ==> c >= 0;\nloop invariant c >= 0 ==> c == n ==> c <= n;\nloop invariant c >= 0 ==> c == n ==> unknown() == true;\nloop invariant c >= 0 ==> c < n ==> unknown() == true;\nloop invariant c >= 0 ==> c < n ==> c == n ==> unknown() == false;\nloop invariant c >= 0 ==> c < n ==> c == n ==> c >= 0;\nloop invariant c >= 0 ==> c < n ==> c == n ==> c <= n;\nloop invariant c >= 0 ==> c < n ==> c == n ==> unknown() == true;\nloop invariant c >= 0 ==> c < n ==> c == n ==> unknown() == false;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c > n) ==> (c == n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == 1) ==> (c == n);\nloop invariant (c < 0) ==> (c == n);\nloop invariant (c < 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n+1;\nloop invariant c <= n ==> c <= n+1;\nloop invariant c > n ==> c > n+1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> ((c < 0) || (c > n));\nloop invariant c >= 1;\nloop invariant c <= (n + 1);\nloop invariant c == 1 ==> ((c < 0) || (c > n));\nloop invariant c == n ==> ((c < 0) || (c > n));\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> (c < 0 || c > n);\nloop invariant 0 <= n;\nloop invariant n > 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n && c >= 0) ==> (c == n);\nloop invariant (c < n && c >= 0) ==> (c < n);\nloop invariant (c > n && c >= 0) ==> (c == n);\nloop invariant (c == 0 && c >= 0) ==> (c == 0);\n*/\n```",
            "```\n/*@\nloop invariant ( c >= 0 && c <= n );\nloop invariant ( c == 1 );\nloop invariant ( c == ( n + 1 ) );\nloop invariant ( c == ( n - 1 ) );\nloop invariant ( c == ( n + 2 ) );\nloop invariant ( c == ( n - 2 ) );\nloop invariant ( c == ( n + 3 ) );\nloop invariant ( c == ( n - 3 ) );\nloop invariant ( c == ( n + 4 ) );\nloop invariant ( c == ( n - 4 ) );\nloop invariant ( c == ( n + 5 ) );\nloop invariant ( c == ( n - 5 ) );\nloop invariant ( c == ( n + 6 ) );\nloop invariant ( c == ( n - 6 ) );\nloop invariant ( c == ( n + 7 ) );\nloop invariant ( c == ( n - 7 ) );\nloop invariant ( c == ( n + 8 ) );\nloop invariant ( c == ( n - 8 ) );\nloop invariant ( c == ( n + 9 ) );\nloop invariant ( c == ( n - 9 ) );\nloop invariant ( c == ( n + 10 ) );\nloop invariant ( c == ( n - 10 ) );\nloop invariant ( c == ( n + 11 ) );\nloop invariant ( c == ( n - 11 ) );\nloop invariant ( c == ( n + 12 ) );\nloop invariant ( c == ( n - 12 ) );\nloop invariant ( c == ( n + 13 ) );\nloop invariant ( c == ( n - 13 ) );\nloop invariant ( c == ( n + 14 ) );\nloop invariant ( c == ( n - 14 ) );\nloop invariant ( c == ( n + 15 ) );\nloop invariant ( c == ( n - 15 ) );\nloop invariant ( c == ( n + 16 ) );\nloop invariant ( c == ( n - 16 ) );\nloop invariant ( c == ( n + 17 ) );\nloop invariant ( c == ( n - 17 ) );\nloop invariant ( c == ( n + 18 ) );\nloop invariant ( c == ( n - 18 ) );\nloop invariant ( c == ( n + 19 ) );\nloop invariant ( c == ( n - 19 ) );\nloop invariant ( c == ( n + 20 ) );\nloop invariant ( c == ( n - 20 ) );\nloop invariant ( c == ( n + 21 ) );\nloop invariant ( c == ( n - 21 ) );\nloop invariant ( c == ( n + 22 ) );\nloop invariant ( c == ( n - 22 ) );\nloop invariant ( c == ( n + 23 ) );\nloop invariant ( c == ( n - 23 ) );\nloop invariant ( c == ( n + 24 ) );\nloop invariant ( c == ( n - 24 ) );\nloop invariant ( c == ( n + 25 ) );\nloop invariant ( c == ( n - 25 ) );\nloop invariant ( c == ( n + 26 ) );\nloop invariant ( c == ( n - 26 ) );\nloop invariant ( c == ( n + 27 ) );\nloop invariant ( c == ( n - 27 ) );\nloop invariant ( c == ( n + 28 ) );\nloop invariant ( c == ( n - 28 ) );\nloop invariant ( c == ( n + 29 ) );\nloop invariant ( c == ( n - 29 ) );\nloop invariant ( c == ( n + 30 ) );\nloop invariant ( c == ( n - 30 ) );\nloop invariant ( c == ( n + 31 ) );\nloop invariant ( c == ( n - 31 ) );\nloop invariant ( c == ( n + 32 ) );\nloop invariant ( c == ( n - 32 ) );\nloop invariant ( c == ( n + 33 ) );\nloop invariant ( c == ( n - 33 ) );\nloop invariant ( c == ( n + 34 ) );\nloop invariant ( c == ( n - 34 ) );\nloop invariant ( c == ( n + 35 ) );\nloop invariant ( c == ( n - 35 ) );\nloop invariant ( c == ( n + 36 ) );\nloop invariant ( c == ( n - 36 ) );\nloop invariant ( c == ( n + 37 ) );\nloop invariant ( c == ( n - 37 ) );\nloop invariant ( c == ( n + 38 ) );\nloop invariant ( c == ( n - 38 ) );\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == 1 ==> n == 0;\nloop invariant c > n ==> c == n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 83,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant unknown() ==> (c >= n);\nloop invariant !unknown() ==> (c <= n);\nloop invariant unknown() ==> (c < n);\nloop invariant !unknown() ==> (c > n);\nloop invariant unknown() ==> (c != n);\nloop invariant !unknown() ==> (c == n);\nloop invariant unknown() ==> (c != 1);\nloop invariant !unknown() ==> (c == 1);\nloop invariant unknown() ==> (c != 0);\nloop invariant !unknown() ==> (c == 0);\nloop invariant unknown() ==> (c != -1);\nloop invariant !unknown() ==> (c == -1);\nloop invariant unknown() ==> (c != -2);\nloop invariant !unknown() ==> (c == -2);\nloop invariant unknown() ==> (c != -3);\nloop invariant !unknown() ==> (c == -3);\nloop invariant unknown() ==> (c != -4);\nloop invariant !unknown() ==> (c == -4);\nloop invariant unknown() ==> (c != -5);\nloop invariant !unknown() ==> (c == -5);\nloop invariant unknown() ==> (c != -6);\nloop invariant !unknown() ==> (c == -6);\nloop invariant unknown() ==> (c != -7);\nloop invariant !unknown() ==> (c == -7);\nloop invariant unknown() ==> (c != -8);\nloop invariant !unknown() ==> (c == -8);\nloop invariant unknown() ==> (c != -9);\nloop invariant !unknown() ==> (c == -9);\nloop invariant unknown() ==> (c != -10);\nloop invariant !unknown() ==> (c == -10);\nloop invariant unknown() ==> (c != -11);\nloop invariant !unknown() ==> (c == -11);\nloop invariant unknown() ==> (c != -12);\nloop invariant !unknown() ==> (c == -12);\nloop invariant unknown() ==> (c != -13);\nloop invariant !unknown() ==> (c == -13);\nloop invariant unknown() ==> (c != -14);\nloop invariant !unknown() ==> (c == -14);\nloop invariant unknown() ==> (c != -15);\nloop invariant !unknown() ==> (c == -15);\nloop invariant unknown() ==> (c != -16);\nloop invariant !unknown() ==> (c == -16);\nloop invariant unknown() ==> (c != -17);\nloop invariant !unknown() ==> (c == -17);\nloop invariant unknown() ==> (c != -18);\nloop invariant !unknown() ==> (c == -18);\nloop invariant unknown() ==> (c != -19);\nloop invariant !unknown() ==> (c == -19);\nloop invariant unknown() ==> (c != -20);\nloop invariant !unknown() ==> (c == -20);\nloop invariant unknown() ==> (c != -21);\nloop invariant !unknown() ==> (c == -21);\nloop invariant unknown() ==> (c != -22);\nloop invariant !unknown() ==> (c == -22);\nloop invariant unknown() ==> (c != -23);\nloop invariant !unknown() ==> (c == -23);\nloop invariant unknown() ==> (c != -24);\nloop invariant !unknown() ==> (c == -24);\nloop invariant unknown() ==> (c != -25);\nloop invariant !unknown() ==> (c == -25);\nloop invariant unknown() ==> (c != -26);\nloop invariant !unknown() ==> (c == -26);\nloop invariant unknown() ==> (c != -27);\nloop invariant !unknown() ==> (c == -27);\nloop invariant unknown() ==> (c != -28);\nloop invariant !unknown() ==> (c == -28);\nloop invariant unknown() ==> (c != -29);\nloop invariant !unknown() ==> (c == -29);\nloop invariant unknown() ==> (c != -30);\nloop invariant !unknown() ==> (c == -30);\nloop invariant unknown() ==> (c != -31);\nloop invariant !unknown() ==> (c == -31);\nloop invariant unknown() ==> (c != -32);\nloop invariant !unknown() ==> (c == -32);\nloop invariant unknown() ==> (c != -33);\nloop invariant !unknown() ==> (c == -33);\nloop invariant unknown() ==> (c != -34);\nloop invariant !unknown() ==> (c == -34);\nloop invariant unknown() ==> (c != -35);\nloop invariant !unknown() ==> (c == -35);\nloop invariant unknown() ==> (c != -36);\nloop invariant !unknown() ==> (c == -36);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c == (if c > n then c + 1 else if c == n then 1 else c);\nloop invariant (c < 0) ==> (c == n);\nloop invariant (c > n) ==> (c == n);\nloop invariant (c == n) ==> (c == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n\nloop invariant i4: (c < 0) ==> (c == n);\n\nloop invariant i6: (c == n) ==> (c == n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n ==> unknown());\nloop invariant (c < 0 ==> c == 0);\nloop invariant (c > n ==> c == n);\nloop invariant (c == n ==> c != 0);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\nloop invariant (c == n ==> c != n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\nloop invariant i3: (c < 0 ==> c == 0);\nloop invariant i4: (c > n ==> c == n);\nloop invariant i5: (c == n ==> c != 0);\nloop invariant i6: (c == n ==> c != n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n; loop invariant c <= n; loop invariant !(c > n) ==> c == n; loop invariant c >= 0; loop invariant c <= n; loop invariant !(c > n) ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n ==> unknown() == false;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c >= 0 ==> unknown() == true;\nloop invariant c >= 0 ==> c == n ==> unknown() == false;\nloop invariant c >= 0 ==> c == n ==> c >= 0;\nloop invariant c >= 0 ==> c == n ==> c <= n;\nloop invariant c >= 0 ==> c == n ==> unknown() == true;\nloop invariant c >= 0 ==> c < n ==> unknown() == true;\nloop invariant c >= 0 ==> c < n ==> c == n ==> unknown() == false;\nloop invariant c >= 0 ==> c < n ==> c == n ==> c >= 0;\nloop invariant c >= 0 ==> c < n ==> c == n ==> c <= n;\nloop invariant c >= 0 ==> c < n ==> c == n ==> unknown() == true;\nloop invariant c >= 0 ==> c < n ==> c == n ==> unknown() == false;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n\n\nloop invariant i5: c == n ==> c >= 0;\nloop invariant i6: c == n ==> c <= n;\n\n\nloop invariant i9: c >= 0 ==> c == n ==> c >= 0;\nloop invariant i10: c >= 0 ==> c == n ==> c <= n;\n\n\n\nloop invariant i14: c >= 0 ==> c < n ==> c == n ==> c >= 0;\nloop invariant i15: c >= 0 ==> c < n ==> c == n ==> c <= n;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c > n) ==> (c == n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == 1) ==> (c == n);\nloop invariant (c < 0) ==> (c == n);\nloop invariant (c < 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 0) ==> (c > n);\nloop invariant (c == 0) ==> (c == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c > n) ==> (c == n);\nloop invariant i3: (c == n) ==> (c == 1);\nloop invariant i4: (c == 1) ==> (c == n);\nloop invariant i5: (c < 0) ==> (c == n);\nloop invariant i6: (c < 0) ==> (c == 1);\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n+1;\nloop invariant c <= n ==> c <= n+1;\nloop invariant c > n ==> c > n+1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\nloop invariant c < n ==> c < n+1;\nloop invariant c > n ==> c > 1;\nloop invariant c == n ==> c == n+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c <= n ==> c <= n+1;\nloop invariant i3: c > n ==> c > n+1;\nloop invariant i4: c == n ==> c == n;\nloop invariant i5: c < n ==> c < n+1;\nloop invariant i6: c > n ==> c > 1;\nloop invariant i7: c == n ==> c == n+1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> ((c < 0) || (c > n));\nloop invariant c >= 1;\nloop invariant c <= (n + 1);\nloop invariant c == 1 ==> ((c < 0) || (c > n));\nloop invariant c == n ==> ((c < 0) || (c > n));\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c == 1) ==> (c == 1);\nloop invariant (c == n) ==> (c == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c == n) ==> ((c < 0) || (c > n));\n\nloop invariant i4: c <= (n + 1);\nloop invariant i5: c == 1 ==> ((c < 0) || (c > n));\nloop invariant i6: c == n ==> ((c < 0) || (c > n));\nloop invariant i7: c == n ==> c == n;\nloop invariant i8: c == 1 ==> c == 1;\nloop invariant i9: (c == n) ==> (c == n);\nloop invariant i10: (c == 1) ==> (c == 1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c == n ==> c == n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> (c < 0 || c > n);\nloop invariant 0 <= n;\nloop invariant n > 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> (c < 0 || c > n);\nloop invariant c != n ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: c == n ==> (c < 0 || c > n);\nloop invariant i3: 0 <= n;\nloop invariant i4: n > 0;\n\nloop invariant i6: c != n ==> c <= n;\nloop invariant i7: c != n ==> c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n && c >= 0) ==> (c == n);\nloop invariant (c < n && c >= 0) ==> (c < n);\nloop invariant (c > n && c >= 0) ==> (c == n);\nloop invariant (c == 0 && c >= 0) ==> (c == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (c == n && c >= 0) ==> (c == n);\nloop invariant i3: (c < n && c >= 0) ==> (c < n);\n\nloop invariant i5: (c == 0 && c >= 0) ==> (c == 0);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 41,
                "annotations": "```\n/*@\nloop invariant ( c >= 0 && c <= n );\nloop invariant ( c == 1 );\nloop invariant ( c == ( n + 1 ) );\nloop invariant ( c == ( n - 1 ) );\nloop invariant ( c == ( n + 2 ) );\nloop invariant ( c == ( n - 2 ) );\nloop invariant ( c == ( n + 3 ) );\nloop invariant ( c == ( n - 3 ) );\nloop invariant ( c == ( n + 4 ) );\nloop invariant ( c == ( n - 4 ) );\nloop invariant ( c == ( n + 5 ) );\nloop invariant ( c == ( n - 5 ) );\nloop invariant ( c == ( n + 6 ) );\nloop invariant ( c == ( n - 6 ) );\nloop invariant ( c == ( n + 7 ) );\nloop invariant ( c == ( n - 7 ) );\nloop invariant ( c == ( n + 8 ) );\nloop invariant ( c == ( n - 8 ) );\nloop invariant ( c == ( n + 9 ) );\nloop invariant ( c == ( n - 9 ) );\nloop invariant ( c == ( n + 10 ) );\nloop invariant ( c == ( n - 10 ) );\nloop invariant ( c == ( n + 11 ) );\nloop invariant ( c == ( n - 11 ) );\nloop invariant ( c == ( n + 12 ) );\nloop invariant ( c == ( n - 12 ) );\nloop invariant ( c == ( n + 13 ) );\nloop invariant ( c == ( n - 13 ) );\nloop invariant ( c == ( n + 14 ) );\nloop invariant ( c == ( n - 14 ) );\nloop invariant ( c == ( n + 15 ) );\nloop invariant ( c == ( n - 15 ) );\nloop invariant ( c == ( n + 16 ) );\nloop invariant ( c == ( n - 16 ) );\nloop invariant ( c == ( n + 17 ) );\nloop invariant ( c == ( n - 17 ) );\nloop invariant ( c == ( n + 18 ) );\nloop invariant ( c == ( n - 18 ) );\nloop invariant ( c == ( n + 19 ) );\nloop invariant ( c == ( n - 19 ) );\nloop invariant ( c == ( n + 20 ) );\nloop invariant ( c == ( n - 20 ) );\nloop invariant ( c == ( n + 21 ) );\nloop invariant ( c == ( n - 21 ) );\nloop invariant ( c == ( n + 22 ) );\nloop invariant ( c == ( n - 22 ) );\nloop invariant ( c == ( n + 23 ) );\nloop invariant ( c == ( n - 23 ) );\nloop invariant ( c == ( n + 24 ) );\nloop invariant ( c == ( n - 24 ) );\nloop invariant ( c == ( n + 25 ) );\nloop invariant ( c == ( n - 25 ) );\nloop invariant ( c == ( n + 26 ) );\nloop invariant ( c == ( n - 26 ) );\nloop invariant ( c == ( n + 27 ) );\nloop invariant ( c == ( n - 27 ) );\nloop invariant ( c == ( n + 28 ) );\nloop invariant ( c == ( n - 28 ) );\nloop invariant ( c == ( n + 29 ) );\nloop invariant ( c == ( n - 29 ) );\nloop invariant ( c == ( n + 30 ) );\nloop invariant ( c == ( n - 30 ) );\nloop invariant ( c == ( n + 31 ) );\nloop invariant ( c == ( n - 31 ) );\nloop invariant ( c == ( n + 32 ) );\nloop invariant ( c == ( n - 32 ) );\nloop invariant ( c == ( n + 33 ) );\nloop invariant ( c == ( n - 33 ) );\nloop invariant ( c == ( n + 34 ) );\nloop invariant ( c == ( n - 34 ) );\nloop invariant ( c == ( n + 35 ) );\nloop invariant ( c == ( n - 35 ) );\nloop invariant ( c == ( n + 36 ) );\nloop invariant ( c == ( n - 36 ) );\nloop invariant ( c == ( n + 37 ) );\nloop invariant ( c == ( n - 37 ) );\nloop invariant ( c == ( n + 38 ) );\nloop invariant ( c == ( n - 38 ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 1 <= c <= n;\nloop invariant i2: c == 1 ==> n == 0;\nloop invariant i3: c > n ==> c == n + 1;\nloop invariant i4: unknown() ==> (c >= n);\nloop invariant i5: !unknown() ==> (c <= n);\nloop invariant i6: unknown() ==> (c < n);\nloop invariant i7: !unknown() ==> (c > n);\nloop invariant i8: unknown() ==> (c != n);\nloop invariant i9: !unknown() ==> (c == n);\nloop invariant i10: unknown() ==> (c != 1);\nloop invariant i11: !unknown() ==> (c == 1);\nloop invariant i12: unknown() ==> (c != 0);\nloop invariant i13: !unknown() ==> (c == 0);\nloop invariant i14: unknown() ==> (c != -1);\nloop invariant i15: !unknown() ==> (c == -1);\nloop invariant i16: unknown() ==> (c != -2);\nloop invariant i17: !unknown() ==> (c == -2);\nloop invariant i18: unknown() ==> (c != -3);\nloop invariant i19: !unknown() ==> (c == -3);\nloop invariant i20: unknown() ==> (c != -4);\nloop invariant i21: !unknown() ==> (c == -4);\nloop invariant i22: unknown() ==> (c != -5);\nloop invariant i23: !unknown() ==> (c == -5);\nloop invariant i24: unknown() ==> (c != -6);\nloop invariant i25: !unknown() ==> (c == -6);\nloop invariant i26: unknown() ==> (c != -7);\nloop invariant i27: !unknown() ==> (c == -7);\nloop invariant i28: unknown() ==> (c != -8);\nloop invariant i29: !unknown() ==> (c == -8);\nloop invariant i30: unknown() ==> (c != -9);\nloop invariant i31: !unknown() ==> (c == -9);\nloop invariant i32: unknown() ==> (c != -10);\nloop invariant i33: !unknown() ==> (c == -10);\nloop invariant i34: unknown() ==> (c != -11);\nloop invariant i35: !unknown() ==> (c == -11);\nloop invariant i36: unknown() ==> (c != -12);\nloop invariant i37: !unknown() ==> (c == -12);\nloop invariant i38: unknown() ==> (c != -13);\nloop invariant i39: !unknown() ==> (c == -13);\nloop invariant i40: unknown() ==> (c != -14);\nloop invariant i41: !unknown() ==> (c == -14);\nloop invariant i42: unknown() ==> (c != -15);\nloop invariant i43: !unknown() ==> (c == -15);\nloop invariant i44: unknown() ==> (c != -16);\nloop invariant i45: !unknown() ==> (c == -16);\nloop invariant i46: unknown() ==> (c != -17);\nloop invariant i47: !unknown() ==> (c == -17);\nloop invariant i48: unknown() ==> (c != -18);\nloop invariant i49: !unknown() ==> (c == -18);\nloop invariant i50: unknown() ==> (c != -19);\nloop invariant i51: !unknown() ==> (c == -19);\nloop invariant i52: unknown() ==> (c != -20);\nloop invariant i53: !unknown() ==> (c == -20);\nloop invariant i54: unknown() ==> (c != -21);\nloop invariant i55: !unknown() ==> (c == -21);\nloop invariant i56: unknown() ==> (c != -22);\nloop invariant i57: !unknown() ==> (c == -22);\nloop invariant i58: unknown() ==> (c != -23);\nloop invariant i59: !unknown() ==> (c == -23);\nloop invariant i60: unknown() ==> (c != -24);\nloop invariant i61: !unknown() ==> (c == -24);\nloop invariant i62: unknown() ==> (c != -25);\nloop invariant i63: !unknown() ==> (c == -25);\nloop invariant i64: unknown() ==> (c != -26);\nloop invariant i65: !unknown() ==> (c == -26);\nloop invariant i66: unknown() ==> (c != -27);\nloop invariant i67: !unknown() ==> (c == -27);\nloop invariant i68: unknown() ==> (c != -28);\nloop invariant i69: !unknown() ==> (c == -28);\nloop invariant i70: unknown() ==> (c != -29);\nloop invariant i71: !unknown() ==> (c == -29);\nloop invariant i72: unknown() ==> (c != -30);\nloop invariant i73: !unknown() ==> (c == -30);\nloop invariant i74: unknown() ==> (c != -31);\nloop invariant i75: !unknown() ==> (c == -31);\nloop invariant i76: unknown() ==> (c != -32);\nloop invariant i77: !unknown() ==> (c == -32);\nloop invariant i78: unknown() ==> (c != -33);\nloop invariant i79: !unknown() ==> (c == -33);\nloop invariant i80: unknown() ==> (c != -34);\nloop invariant i81: !unknown() ==> (c == -34);\nloop invariant i82: unknown() ==> (c != -35);\nloop invariant i83: !unknown() ==> (c == -35);\nloop invariant i84: unknown() ==> (c != -36);\nloop invariant i85: !unknown() ==> (c == -36);\nloop invariant i86: 0 <= c;\nloop invariant i87: c <= n;\nloop invariant i88: c == (if c > n then c + 1 else if c == n then 1 else c);\nloop invariant i89: (c < 0) ==> (c == n);\nloop invariant i90: (c > n) ==> (c == n);\nloop invariant i91: (c == n) ==> (c == n);\nloop invariant i92: 0 <= c <= n;\nloop invariant i93: (c <= n ==> unknown());\nloop invariant i94: (c < 0 ==> c == 0);\nloop invariant i95: (c > n ==> c == n);\nloop invariant i96: (c == n ==> c != 0);\nloop invariant i97: (c == n ==> c != n);\nloop invariant i98: c >= 0;\nloop invariant i99: 1 <= c <= n; loop invariant c <= n; loop invariant !(c > n) ==> c == n; loop invariant c >= 0; loop invariant c <= n; loop invariant !(c > n) ==> c == n;\nloop invariant i100: c == n ==> unknown() == false;\nloop invariant i101: c == n ==> c >= 0;\nloop invariant i102: c == n ==> c <= n;\nloop invariant i103: c >= 0 ==> unknown() == true;\nloop invariant i104: c >= 0 ==> c == n ==> unknown() == false;\nloop invariant i105: c >= 0 ==> c == n ==> c >= 0;\nloop invariant i106: c >= 0 ==> c == n ==> c <= n;\nloop invariant i107: c >= 0 ==> c == n ==> unknown() == true;\nloop invariant i108: c >= 0 ==> c < n ==> unknown() == true;\nloop invariant i109: c >= 0 ==> c < n ==> c == n ==> unknown() == false;\nloop invariant i110: c >= 0 ==> c < n ==> c == n ==> c >= 0;\nloop invariant i111: c >= 0 ==> c < n ==> c == n ==> c <= n;\nloop invariant i112: c >= 0 ==> c < n ==> c == n ==> unknown() == true;\nloop invariant i113: (c == n) ==> (c == 1);\nloop invariant i114: (c == 1) ==> (c == n);\nloop invariant i115: (c < 0) ==> (c == 1);\nloop invariant i116: (c == 0) ==> (c == n);\nloop invariant i117: (c == 0) ==> (c == 1);\nloop invariant i118: (c == 0) ==> (c > n);\nloop invariant i119: 1 <= c <= n+1;\nloop invariant i120: c <= n ==> c <= n+1;\nloop invariant i121: c > n ==> c > n+1;\nloop invariant i122: c == n ==> c == n;\nloop invariant i123: c < n ==> c < n+1;\nloop invariant i124: c > n ==> c > 1;\nloop invariant i125: c == n ==> c == n+1;\nloop invariant i126: 0 <= c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n;\nloop invariant i127: (c == n) ==> ((c < 0) || (c > n));\nloop invariant i128: c >= 1;\nloop invariant i129: c <= (n + 1);\nloop invariant i130: c == 1 ==> ((c < 0) || (c > n));\nloop invariant i131: c == n ==> ((c < 0) || (c > n));\nloop invariant i132: c == 1 ==> c == 1;\nloop invariant i133: (c == 1) ==> (c == 1);\nloop invariant i134: c == n ==> (c < 0 || c > n);\nloop invariant i135: 0 <= n;\nloop invariant i136: n > 0;\nloop invariant i137: c != n ==> (c < 0 || c > n);\nloop invariant i138: c != n ==> c <= n;\nloop invariant i139: c != n ==> c >= 0;\nloop invariant i140: (c == n && c >= 0) ==> (c == n);\nloop invariant i141: (c < n && c >= 0) ==> (c < n);\nloop invariant i142: (c > n && c >= 0) ==> (c == n);\nloop invariant i143: (c == 0 && c >= 0) ==> (c == 0);\nloop invariant i144: ( c >= 0 && c <= n );\nloop invariant i145: ( c == 1 );\nloop invariant i146: ( c == ( n + 1 ) );\nloop invariant i147: ( c == ( n - 1 ) );\nloop invariant i148: ( c == ( n + 2 ) );\nloop invariant i149: ( c == ( n - 2 ) );\nloop invariant i150: ( c == ( n + 3 ) );\nloop invariant i151: ( c == ( n - 3 ) );\nloop invariant i152: ( c == ( n + 4 ) );\nloop invariant i153: ( c == ( n - 4 ) );\nloop invariant i154: ( c == ( n + 5 ) );\nloop invariant i155: ( c == ( n - 5 ) );\nloop invariant i156: ( c == ( n + 6 ) );\nloop invariant i157: ( c == ( n - 6 ) );\nloop invariant i158: ( c == ( n + 7 ) );\nloop invariant i159: ( c == ( n - 7 ) );\nloop invariant i160: ( c == ( n + 8 ) );\nloop invariant i161: ( c == ( n - 8 ) );\nloop invariant i162: ( c == ( n + 9 ) );\nloop invariant i163: ( c == ( n - 9 ) );\nloop invariant i164: ( c == ( n + 10 ) );\nloop invariant i165: ( c == ( n - 10 ) );\nloop invariant i166: ( c == ( n + 11 ) );\nloop invariant i167: ( c == ( n - 11 ) );\nloop invariant i168: ( c == ( n + 12 ) );\nloop invariant i169: ( c == ( n - 12 ) );\nloop invariant i170: ( c == ( n + 13 ) );\nloop invariant i171: ( c == ( n - 13 ) );\nloop invariant i172: ( c == ( n + 14 ) );\nloop invariant i173: ( c == ( n - 14 ) );\nloop invariant i174: ( c == ( n + 15 ) );\nloop invariant i175: ( c == ( n - 15 ) );\nloop invariant i176: ( c == ( n + 16 ) );\nloop invariant i177: ( c == ( n - 16 ) );\nloop invariant i178: ( c == ( n + 17 ) );\nloop invariant i179: ( c == ( n - 17 ) );\nloop invariant i180: ( c == ( n + 18 ) );\nloop invariant i181: ( c == ( n - 18 ) );\nloop invariant i182: ( c == ( n + 19 ) );\nloop invariant i183: ( c == ( n - 19 ) );\nloop invariant i184: ( c == ( n + 20 ) );\nloop invariant i185: ( c == ( n - 20 ) );\nloop invariant i186: ( c == ( n + 21 ) );\nloop invariant i187: ( c == ( n - 21 ) );\nloop invariant i188: ( c == ( n + 22 ) );\nloop invariant i189: ( c == ( n - 22 ) );\nloop invariant i190: ( c == ( n + 23 ) );\nloop invariant i191: ( c == ( n - 23 ) );\nloop invariant i192: ( c == ( n + 24 ) );\nloop invariant i193: ( c == ( n - 24 ) );\nloop invariant i194: ( c == ( n + 25 ) );\nloop invariant i195: ( c == ( n - 25 ) );\nloop invariant i196: ( c == ( n + 26 ) );\nloop invariant i197: ( c == ( n - 26 ) );\nloop invariant i198: ( c == ( n + 27 ) );\nloop invariant i199: ( c == ( n - 27 ) );\nloop invariant i200: ( c == ( n + 28 ) );\nloop invariant i201: ( c == ( n - 28 ) );\nloop invariant i202: ( c == ( n + 29 ) );\nloop invariant i203: ( c == ( n - 29 ) );\nloop invariant i204: ( c == ( n + 30 ) );\nloop invariant i205: ( c == ( n - 30 ) );\nloop invariant i206: ( c == ( n + 31 ) );\nloop invariant i207: ( c == ( n - 31 ) );\nloop invariant i208: ( c == ( n + 32 ) );\nloop invariant i209: ( c == ( n - 32 ) );\nloop invariant i210: ( c == ( n + 33 ) );\nloop invariant i211: ( c == ( n - 33 ) );\nloop invariant i212: ( c == ( n + 34 ) );\nloop invariant i213: ( c == ( n - 34 ) );\nloop invariant i214: ( c == ( n + 35 ) );\nloop invariant i215: ( c == ( n - 35 ) );\nloop invariant i216: ( c == ( n + 36 ) );\nloop invariant i217: ( c == ( n - 36 ) );\nloop invariant i218: ( c == ( n + 37 ) );\nloop invariant i219: ( c == ( n - 37 ) );\nloop invariant i220: ( c == ( n + 38 ) );\nloop invariant i221: ( c == ( n - 38 ) );\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 140,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c == 1 ==> n == 0;\nloop invariant i3: c > n ==> c == n + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i86: 0 <= c;\nloop invariant i87: c <= n;\n\nloop invariant i89: (c < 0) ==> (c == n);\nloop invariant i90: (c > n) ==> (c == n);\nloop invariant i91: (c == n) ==> (c == n);\nloop invariant i92: 0 <= c <= n;\n\nloop invariant i94: (c < 0 ==> c == 0);\nloop invariant i95: (c > n ==> c == n);\nloop invariant i96: (c == n ==> c != 0);\nloop invariant i97: (c == n ==> c != n);\nloop invariant i98: c >= 0;\n\n\nloop invariant i101: c == n ==> c >= 0;\nloop invariant i102: c == n ==> c <= n;\n\n\nloop invariant i105: c >= 0 ==> c == n ==> c >= 0;\nloop invariant i106: c >= 0 ==> c == n ==> c <= n;\n\n\n\nloop invariant i110: c >= 0 ==> c < n ==> c == n ==> c >= 0;\nloop invariant i111: c >= 0 ==> c < n ==> c == n ==> c <= n;\n\nloop invariant i113: (c == n) ==> (c == 1);\nloop invariant i114: (c == 1) ==> (c == n);\nloop invariant i115: (c < 0) ==> (c == 1);\n\n\n\n\nloop invariant i120: c <= n ==> c <= n+1;\nloop invariant i121: c > n ==> c > n+1;\nloop invariant i122: c == n ==> c == n;\nloop invariant i123: c < n ==> c < n+1;\nloop invariant i124: c > n ==> c > 1;\nloop invariant i125: c == n ==> c == n+1;\nloop invariant i126: 0 <= c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n; loop invariant c <= n;\nloop invariant i127: (c == n) ==> ((c < 0) || (c > n));\n\nloop invariant i129: c <= (n + 1);\nloop invariant i130: c == 1 ==> ((c < 0) || (c > n));\nloop invariant i131: c == n ==> ((c < 0) || (c > n));\nloop invariant i132: c == 1 ==> c == 1;\nloop invariant i133: (c == 1) ==> (c == 1);\nloop invariant i134: c == n ==> (c < 0 || c > n);\nloop invariant i135: 0 <= n;\nloop invariant i136: n > 0;\n\nloop invariant i138: c != n ==> c <= n;\nloop invariant i139: c != n ==> c >= 0;\nloop invariant i140: (c == n && c >= 0) ==> (c == n);\nloop invariant i141: (c < n && c >= 0) ==> (c < n);\nloop invariant i142: (c > n && c >= 0) ==> (c == n);\nloop invariant i143: (c == 0 && c >= 0) ==> (c == 0);\nloop invariant i144: ( c >= 0 && c <= n );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c"
        ],
        "skipped": [],
        "total": 48,
        "success_count": 40,
        "failure_count": 8,
        "success_rate": 0.8333333333333334
    }
}