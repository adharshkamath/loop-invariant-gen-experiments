{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/45.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant 0 <= n <= n;\nloop invariant 1 <= c <= n + 1 ==> c == n || c != n;\nloop invariant 1 <= c <= n + 1 ==> c == 1 || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c != n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c != n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c == 1 ==> c == n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != 1 ==> c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != 1 ==> c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c == 1 ==> c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c != n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1 || c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1 || c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1 || c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n || c == 1;\nloop invariant c != n || c >= 0;\nloop invariant c == 1 || c <= n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant n > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= (n + 1);\nloop invariant c >= 0;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 1 || c == n || c == c + 1;\nloop invariant 0 <= c <= n;\nloop invariant c == 1 || c == n || c == c + 1;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0 && c <= n;\nloop invariant c == 0 ==> n >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c == n ==> n >= 0;\nloop invariant c != n ==> n >= 0;\nloop invariant c == 0 ==> c >= 0;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c == 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant if (unknown()) then c >= 0 else c == 1;\nloop invariant if (unknown()) then c <= n else c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 0 ==> (c == 1);\nloop invariant c == n ==> unknown() ==> (c == 1);\nloop invariant c != n ==> !unknown() ==> (c != 1);\nloop invariant c != n ==> unknown() ==> (c == 0);\nloop invariant c == n ==> !unknown() ==> (c == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c == 0 ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant c == n ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant c != n ==> c >= 0 && c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (if c < n then c <= n else c = n);\nloop invariant (if c < n then c = c ==> n >= c else n >= c);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant ( n > 0 ) ==> ( c >= 0 );\nloop invariant ( n > 0 ) ==> ( c < n );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c < n );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant unknown() ==> (c == n) || (c == 1);\nloop invariant !unknown() ==> c != n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 0 ==> n > 0;\nloop invariant c == n ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n >= 1;\nloop invariant (c != n ==> unknown());\nloop invariant (c == n ==> !unknown());\nloop invariant c >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant 0 <= n <= n;\nloop invariant 1 <= c <= n + 1 ==> c == n || c != n;\nloop invariant 1 <= c <= n + 1 ==> c == 1 || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c != n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c != n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c == 1 ==> c == n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != 1 ==> c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != 1 ==> c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c == 1 ==> c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c != n;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1 || c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1 || c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1 || c == n;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n <= n;\nloop invariant i3: 1 <= c <= n + 1 ==> c == n || c != n;\nloop invariant i4: 1 <= c <= n + 1 ==> c == 1 || c != 1;\n\nloop invariant i6: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != n;\n\n\n\n\n\n\n\nloop invariant i14: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != 1;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n || c == 1;\nloop invariant c != n || c >= 0;\nloop invariant c == 1 || c <= n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\nloop invariant c != 1 || c == n;\nloop invariant c != n || c != 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: c <= n;\nloop invariant i3: n > 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n || c == 1;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n\nloop invariant i4: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= (n + 1);\nloop invariant c >= 0;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 1 || c == n || c == c + 1;\nloop invariant 0 <= c <= n;\nloop invariant c == 1 || c == n || c == c + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant c >= 0 && c <= n;\nloop invariant c == 0 ==> n >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c == n ==> n >= 0;\nloop invariant c != n ==> n >= 0;\nloop invariant c == 0 ==> c >= 0;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c == 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c == 0 ==> n >= 0;\nloop invariant i3: c >= 0 ==> n >= 0;\nloop invariant i4: c == n ==> n >= 0;\nloop invariant i5: c != n ==> n >= 0;\nloop invariant i6: c == 0 ==> c >= 0;\nloop invariant i7: c >= 0 ==> c >= 0;\nloop invariant i8: c == n ==> c >= 0;\nloop invariant i9: c != n ==> c >= 0;\n\nloop invariant i11: c == n ==> c <= n;\n\nloop invariant i13: c == 0 ==> c <= n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant if (unknown()) then c >= 0 else c == 1;\nloop invariant if (unknown()) then c <= n else c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 0 ==> (c == 1);\nloop invariant c == n ==> unknown() ==> (c == 1);\nloop invariant c != n ==> !unknown() ==> (c != 1);\nloop invariant c != n ==> unknown() ==> (c == 0);\nloop invariant c == n ==> !unknown() ==> (c == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c == 0 ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant c == n ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant c != n ==> c >= 0 && c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c == 0 ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant i4: c == n ==> c == 1 ==> c >= 0 && c <= n;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (if c < n then c <= n else c = n);\nloop invariant (if c < n then c = c ==> n >= c else n >= c);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 1);\nloop invariant (c >= 0 ==> c <= n);\nloop invariant (c >= 0 ==> c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\nloop invariant i6: (c >= 0 ==> c >= 0);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( n > 0 ) ==> ( c >= 0 );\nloop invariant ( n > 0 ) ==> ( c < n );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c < n );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: ( n > 0 ) ==> ( c >= 0 );\n\nloop invariant i3: ( n > 0 ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i4: ( n > 0 ) ==> ( c != n ) ==> ( c < n );\nloop invariant i5: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i6: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\nloop invariant i7: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i8: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant unknown() ==> (c == n) || (c == 1);\nloop invariant !unknown() ==> c != n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 0 ==> n > 0;\nloop invariant c == n ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: c == 0 ==> n > 0;\nloop invariant i3: c == n ==> c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n >= 1;\nloop invariant (c != n ==> unknown());\nloop invariant (c == n ==> !unknown());\nloop invariant c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: n >= 1;\n\n\nloop invariant i5: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 68: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n + 1;\nloop invariant i2: 0 <= n <= n;\nloop invariant i3: 1 <= c <= n + 1 ==> c == n || c != n;\nloop invariant i4: 1 <= c <= n + 1 ==> c == 1 || c != 1;\nloop invariant i5: 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c != 1;\nloop invariant i6: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != n;\nloop invariant i7: 0 <= c <= n + 1 ==> c == n || c != 1;\nloop invariant i8: 0 <= c <= n + 1 ==> c == 1 || c != n;\nloop invariant i9: 0 <= c <= n + 1 ==> c == n || c == 1;\nloop invariant i10: 0 <= c <= n + 1 ==> c != n || c != 1;\nloop invariant i11: 0 <= c <= n + 1 ==> c == n || c != n ==> c == n;\nloop invariant i12: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c != n;\nloop invariant i13: 0 <= c <= n + 1 ==> c == n || c == 1 ==> c == n || c != 1;\nloop invariant i14: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != 1;\nloop invariant i15: 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1;\nloop invariant i16: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == n;\nloop invariant i17: 0 <= c <= n + 1 ==> c == n || c != 1 ==> c == n;\nloop invariant i18: 0 <= c <= n + 1 ==> c == 1 || c != 1 ==> c == 1;\nloop invariant i19: 0 <= c <= n + 1 ==> c == n || c != n ==> c != n;\nloop invariant i20: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1;\nloop invariant i21: 0 <= c <= n + 1 ==> c == n || c == 1 ==> c == 1;\nloop invariant i22: 0 <= c <= n + 1 ==> c == n || c != n ==> c == n || c == 1;\nloop invariant i23: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c == 1;\nloop invariant i24: 0 <= c <= n + 1 ==> c == n || c != n ==> c != 1 || c == n;\nloop invariant i25: 1 <= c <= n;\nloop invariant i26: c == n || c == 1;\nloop invariant i27: c != n || c >= 0;\nloop invariant i28: c == 1 || c <= n;\nloop invariant i29: c != n || c != 1;\nloop invariant i30: c != 1 || c == n;\nloop invariant i31: 0 <= c;\nloop invariant i32: c <= n;\nloop invariant i33: n > 0;\nloop invariant i34: c >= 0;\nloop invariant i35: 0 <= c <= n;\nloop invariant i36: c <= (n + 1);\nloop invariant i37: c == 1 || c == n || c == c + 1;\nloop invariant i38: c >= 0 && c <= n;\nloop invariant i39: c == 0 ==> n >= 0;\nloop invariant i40: c >= 0 ==> n >= 0;\nloop invariant i41: c == n ==> n >= 0;\nloop invariant i42: c != n ==> n >= 0;\nloop invariant i43: c == 0 ==> c >= 0;\nloop invariant i44: c >= 0 ==> c >= 0;\nloop invariant i45: c == n ==> c >= 0;\nloop invariant i46: c != n ==> c >= 0;\nloop invariant i47: c >= 0 ==> c <= n;\nloop invariant i48: c == n ==> c <= n;\nloop invariant i49: c != n ==> c <= n;\nloop invariant i50: c == 0 ==> c <= n;\nloop invariant i51: if (unknown()) then c >= 0 else c == 1;\nloop invariant i52: if (unknown()) then c <= n else c == 1;\nloop invariant i53: c == 0 ==> (c == 1);\nloop invariant i54: c == n ==> unknown() ==> (c == 1);\nloop invariant i55: c != n ==> !unknown() ==> (c != 1);\nloop invariant i56: c != n ==> unknown() ==> (c == 0);\nloop invariant i57: c == n ==> !unknown() ==> (c == n);\nloop invariant i58: c == 0 ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant i59: c == n ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant i60: c != n ==> c >= 0 && c <= n;\nloop invariant i61: (if c < n then c <= n else c = n);\nloop invariant i62: (if c < n then c = c ==> n >= c else n >= c);\nloop invariant i63: (c >= 0 ==> c <= n);\nloop invariant i64: (c >= 0 ==> c >= 1);\nloop invariant i65: (c >= 0 ==> c >= 0);\nloop invariant i66: ( n > 0 ) ==> ( c >= 0 );\nloop invariant i67: ( n > 0 ) ==> ( c < n );\nloop invariant i68: ( n > 0 ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i69: ( n > 0 ) ==> ( c != n ) ==> ( c < n );\nloop invariant i70: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i71: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\nloop invariant i72: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i73: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\nloop invariant i74: unknown() ==> (c == n) || (c == 1);\nloop invariant i75: !unknown() ==> c != n;\nloop invariant i76: c == 0 ==> n > 0;\nloop invariant i77: n >= 1;\nloop invariant i78: (c != n ==> unknown());\nloop invariant i79: (c == n ==> !unknown());\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 31,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n + 1;\nloop invariant i2: 0 <= n <= n;\nloop invariant i3: 1 <= c <= n + 1 ==> c == n || c != n;\nloop invariant i4: 1 <= c <= n + 1 ==> c == 1 || c != 1;\n\nloop invariant i6: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != n;\n\n\n\n\n\n\n\nloop invariant i14: 0 <= c <= n + 1 ==> c == 1 || c != n ==> c == 1 || c != 1;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i27: c != n || c >= 0;\nloop invariant i28: c == 1 || c <= n;\n\n\nloop invariant i31: 0 <= c;\nloop invariant i32: c <= n;\nloop invariant i33: n > 0;\nloop invariant i34: c >= 0;\nloop invariant i35: 0 <= c <= n;\nloop invariant i36: c <= (n + 1);\n\nloop invariant i38: c >= 0 && c <= n;\nloop invariant i39: c == 0 ==> n >= 0;\nloop invariant i40: c >= 0 ==> n >= 0;\nloop invariant i41: c == n ==> n >= 0;\nloop invariant i42: c != n ==> n >= 0;\nloop invariant i43: c == 0 ==> c >= 0;\nloop invariant i44: c >= 0 ==> c >= 0;\nloop invariant i45: c == n ==> c >= 0;\nloop invariant i46: c != n ==> c >= 0;\nloop invariant i47: c >= 0 ==> c <= n;\nloop invariant i48: c == n ==> c <= n;\nloop invariant i49: c != n ==> c <= n;\nloop invariant i50: c == 0 ==> c <= n;\n\n\n\n\n\n\n\nloop invariant i58: c == 0 ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant i59: c == n ==> c == 1 ==> c >= 0 && c <= n;\nloop invariant i60: c != n ==> c >= 0 && c <= n;\n\n\nloop invariant i63: (c >= 0 ==> c <= n);\n\nloop invariant i65: (c >= 0 ==> c >= 0);\nloop invariant i66: ( n > 0 ) ==> ( c >= 0 );\n\nloop invariant i68: ( n > 0 ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i69: ( n > 0 ) ==> ( c != n ) ==> ( c < n );\nloop invariant i70: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i71: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\nloop invariant i72: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c >= 0 );\nloop invariant i73: ( n > 0 ) ==> ( c != n ) ==> ( c != n ) ==> ( c != n ) ==> ( c < n );\n\n\nloop invariant i76: c == 0 ==> n > 0;\nloop invariant i77: n >= 1;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 37,
        "success_count": 30,
        "failure_count": 7,
        "success_rate": 0.8108108108108109
    }
}