{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/14.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 >= 2 && y + 2 >= 2);\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 <= 4 && y + 2 <= 4);\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 == 4 && y + 2 == 4) ==> (x == 2 && y == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x + 2 * y <= 4;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 + 2 * z2 + 4 * z3 <= 4;\nloop invariant (y == 0) ==> (x != 4);\nloop invariant (y == 2) ==> (x != 4);\nloop invariant (y == 0) ==> (z1 != 2);\nloop invariant (y == 2) ==> (z1 != 2);\nloop invariant (y == 0) ==> (z2 != 1);\nloop invariant (y == 2) ==> (z2 != 1);\nloop invariant (y == 0) ==> (z3 != 0);\nloop invariant (y == 2) ==> (z3 != 0);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 0) ==> (x != 4) ==> (z1 != 2);\nloop invariant (y == 2) ==> (x != 4) ==> (z1 != 2);\nloop invariant (y == 0) ==> (x != 4) ==> (z2 != 1);\nloop invariant (y == 2) ==> (x != 4) ==> (z2 != 1);\nloop invariant (y == 0) ==> (x != 4) ==> (z3 != 0);\nloop invariant (y == 2) ==> (x != 4) ==> (z3 != 0);\nloop invariant (y == 0) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 2) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 != 2);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 != 2);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z2 != 1);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z2 != 1);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z3 != 0);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z3 != 0);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z1 != 2);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z1 != 2);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z2 != 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x % 2 == 0);\nloop invariant (y % 2 == 0);\nloop invariant ((x == 0) ==> (y == 0));\nloop invariant ((x == 2) ==> (y == 4));\nloop invariant ((x == 4) ==> (y == 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x + 2 * y <= 4;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x + 2 * y == 2 * x + y;\nloop invariant (y == 0 ==> x != 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= y;\nloop invariant x + y <= 4;\nloop invariant x + y == 4 ==> (x == 4 && y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x == 4 ==> y == 0;\nloop invariant x != 4 ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x && x <= 4;\nloop invariant 0 <= y && y <= 4;\nloop invariant x - 2*y <= 0;\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> x == 0 && y == 0;\nloop invariant (x >= 2 && x <= 4 && y >= 2 && y <= 4) ==> x == 4 && y == 4;\nloop invariant (x == 0 && y == 0) ==> x == 0 && y == 0;\nloop invariant (x == 4 && y == 4) ==> x == 4 && y == 4;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 2;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x + y <= 4;\nloop invariant x + y == 2 * y;\nloop invariant x + y == 2 * x - 2;\nloop invariant x + y == 2 * y + 2;\nloop invariant x + y == 2 * y + 2 * x - 2;\nloop invariant x + y == 2 * y + 2 * x - 2 * y;\nloop invariant x + y == 2 * x;\nloop invariant x + y == 2 * y + 2 * x;\nloop invariant x + y == 2 * y + 2 * x - 2 * y;\nloop invariant x + y == 2 * x - 2 * y;\nloop invariant x + y == 2 * x + 2 * y - 2 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant (y <= 2 ==> x <= 4);\nloop invariant (y == 0 ==> x != 4);\n*/\n```",
            "```\n/*@\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant x <= y;\nloop invariant x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 >= 2 && y + 2 >= 2);\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 <= 4 && y + 2 <= 4);\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 == 4 && y + 2 == 4) ==> (x == 2 && y == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 >= 2 && y + 2 >= 2);\nloop invariant i4: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 <= 4 && y + 2 <= 4);\nloop invariant i5: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 == 4 && y + 2 == 4) ==> (x == 2 && y == 2);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x + 2 * y <= 4;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\nloop invariant z1 + 2 * z2 + 4 * z3 <= 4;\nloop invariant (y == 0) ==> (x != 4);\nloop invariant (y == 2) ==> (x != 4);\nloop invariant (y == 0) ==> (z1 != 2);\nloop invariant (y == 2) ==> (z1 != 2);\nloop invariant (y == 0) ==> (z2 != 1);\nloop invariant (y == 2) ==> (z2 != 1);\nloop invariant (y == 0) ==> (z3 != 0);\nloop invariant (y == 2) ==> (z3 != 0);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 0) ==> (x != 4) ==> (z1 != 2);\nloop invariant (y == 2) ==> (x != 4) ==> (z1 != 2);\nloop invariant (y == 0) ==> (x != 4) ==> (z2 != 1);\nloop invariant (y == 2) ==> (x != 4) ==> (z2 != 1);\nloop invariant (y == 0) ==> (x != 4) ==> (z3 != 0);\nloop invariant (y == 2) ==> (x != 4) ==> (z3 != 0);\nloop invariant (y == 0) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 2) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 != 2);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 != 2);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z2 != 1);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z2 != 1);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z3 != 0);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z3 != 0);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z1 != 2);\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z1 != 2);\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z2 != 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x % 2 == 0);\nloop invariant (y % 2 == 0);\nloop invariant ((x == 0) ==> (y == 0));\nloop invariant ((x == 2) ==> (y == 4));\nloop invariant ((x == 4) ==> (y == 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x + 2 * y <= 4;\nloop invariant z1 >= 0;\nloop invariant z2 >= 0;\nloop invariant z3 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x + 2 * y == 2 * x + y;\nloop invariant (y == 0 ==> x != 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= y;\nloop invariant x + y <= 4;\nloop invariant x + y == 4 ==> (x == 4 && y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x == 4 ==> y == 0;\nloop invariant x != 4 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x && x <= 4;\nloop invariant 0 <= y && y <= 4;\nloop invariant x - 2*y <= 0;\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> x == 0 && y == 0;\nloop invariant (x >= 2 && x <= 4 && y >= 2 && y <= 4) ==> x == 4 && y == 4;\nloop invariant (x == 0 && y == 0) ==> x == 0 && y == 0;\nloop invariant (x == 4 && y == 4) ==> x == 4 && y == 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\nloop invariant i6: (x == 0 && y == 0) ==> x == 0 && y == 0;\nloop invariant i7: (x == 4 && y == 4) ==> x == 4 && y == 4;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 2;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x + y <= 4;\nloop invariant x + y == 2 * y;\nloop invariant x + y == 2 * x - 2;\nloop invariant x + y == 2 * y + 2;\nloop invariant x + y == 2 * y + 2 * x - 2;\nloop invariant x + y == 2 * y + 2 * x - 2 * y;\nloop invariant x + y == 2 * x;\nloop invariant x + y == 2 * y + 2 * x;\nloop invariant x + y == 2 * y + 2 * x - 2 * y;\nloop invariant x + y == 2 * x - 2 * y;\nloop invariant x + y == 2 * x + 2 * y - 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: x + y >= 0;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant (y <= 2 ==> x <= 4);\nloop invariant (y == 0 ==> x != 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant x <= y;\nloop invariant x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 0 <= y <= 4 is partially proven to be inductive.\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 >= 2 && y + 2 >= 2) is partially proven to be inductive.\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 <= 4 && y + 2 <= 4) is partially proven to be inductive.\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 == 4 && y + 2 == 4) ==> (x == 2 && y == 2) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x + 2 * y <= 4 is preserved but not established.\nloop invariant z1 >= 0 is preserved but not established.\nloop invariant z2 >= 0 is preserved but not established.\nloop invariant z3 >= 0 is preserved but not established.\nloop invariant z1 + 2 * z2 + 4 * z3 <= 4 is preserved but not established.\nloop invariant (y == 0) ==> (x != 4) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x != 4) is partially proven to be inductive.\nloop invariant (y == 0) ==> (z1 != 2) is preserved but not established.\nloop invariant (y == 2) ==> (z1 != 2) is preserved but not established.\nloop invariant (y == 0) ==> (z2 != 1) is preserved but not established.\nloop invariant (y == 2) ==> (z2 != 1) is preserved but not established.\nloop invariant (y == 0) ==> (z3 != 0) is preserved but not established.\nloop invariant (y == 2) ==> (z3 != 0) is preserved but not established.\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) is preserved but not established.\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) is preserved but not established.\nloop invariant (y == 0) ==> (x != 4) ==> (z1 != 2) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x != 4) ==> (z1 != 2) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x != 4) ==> (z2 != 1) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x != 4) ==> (z2 != 1) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x != 4) ==> (z3 != 0) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x != 4) ==> (z3 != 0) is partially proven to be inductive.\nloop invariant (y == 0) ==> (z1 + 2 * z2 + 4 * z3 != 4) is preserved but not established.\nloop invariant (y == 2) ==> (z1 + 2 * z2 + 4 * z3 != 4) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 != 2) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 != 2) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z2 != 1) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z2 != 1) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z3 != 0) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z3 != 0) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 + 2 * z2 + 4 * z3 != 4) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 + 2 * z2 + 4 * z3 != 4) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z1 != 2) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z1 != 2) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z2 != 1) is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is preserved but not established.\nloop invariant (x % 2 == 0) is preserved but not established.\nloop invariant (y % 2 == 0) is preserved but not established.\nloop invariant ((x == 0) ==> (y == 0)) is partially proven to be inductive.\nloop invariant ((x == 2) ==> (y == 4)) is partially proven to be inductive.\nloop invariant ((x == 4) ==> (y == 0)) is partially proven to be inductive.\nloop invariant 1 <= x <= 2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x + 2 * y == 2 * x + y is partially proven to be inductive.\nloop invariant (y == 0 ==> x != 4) is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x + y <= 4 is partially proven to be inductive.\nloop invariant x + y == 4 ==> (x == 4 && y == 0) is partially proven to be inductive.\nloop invariant x <= 2 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant x == 4 ==> y == 0 is partially proven to be inductive.\nloop invariant x != 4 ==> y != 0 is partially proven to be inductive.\nloop invariant 0 <= x && x <= 4 is partially proven to be inductive.\nloop invariant 0 <= y && y <= 4 is partially proven to be inductive.\nloop invariant x - 2*y <= 0 is partially proven to be inductive.\nloop invariant (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> x == 0 && y == 0 is partially proven to be inductive.\nloop invariant (x >= 2 && x <= 4 && y >= 2 && y <= 4) ==> x == 4 && y == 4 is partially proven to be inductive.\nloop invariant (x == 0 && y == 0) ==> x == 0 && y == 0 is partially proven to be inductive.\nloop invariant (x == 4 && y == 4) ==> x == 4 && y == 4 is partially proven to be inductive.\nloop invariant x >= 2 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y == 2 * y is partially proven to be inductive.\nloop invariant x + y == 2 * x - 2 is partially proven to be inductive.\nloop invariant x + y == 2 * y + 2 is partially proven to be inductive.\nloop invariant x + y == 2 * y + 2 * x - 2 is partially proven to be inductive.\nloop invariant x + y == 2 * y + 2 * x - 2 * y is partially proven to be inductive.\nloop invariant x + y == 2 * x is partially proven to be inductive.\nloop invariant x + y == 2 * y + 2 * x is partially proven to be inductive.\nloop invariant x + y == 2 * x - 2 * y is partially proven to be inductive.\nloop invariant x + y == 2 * x + 2 * y - 2 * y is partially proven to be inductive.\nloop invariant (y <= 2 ==> x <= 4) is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nAssertion x != 4: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: 0 <= x <= 4;\nloop invariant i4: 0 <= y <= 4;\nloop invariant i5: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 >= 2 && y + 2 >= 2);\nloop invariant i6: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 <= 4 && y + 2 <= 4);\nloop invariant i7: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 == 4 && y + 2 == 4) ==> (x == 2 && y == 2);\nloop invariant i8: x >= 0;\nloop invariant i9: x + 2 * y <= 4;\nloop invariant i10: z1 >= 0;\nloop invariant i11: z2 >= 0;\nloop invariant i12: z3 >= 0;\nloop invariant i13: z1 + 2 * z2 + 4 * z3 <= 4;\nloop invariant i14: (y == 0) ==> (x != 4);\nloop invariant i15: (y == 2) ==> (x != 4);\nloop invariant i16: (y == 0) ==> (z1 != 2);\nloop invariant i17: (y == 2) ==> (z1 != 2);\nloop invariant i18: (y == 0) ==> (z2 != 1);\nloop invariant i19: (y == 2) ==> (z2 != 1);\nloop invariant i20: (y == 0) ==> (z3 != 0);\nloop invariant i21: (y == 2) ==> (z3 != 0);\nloop invariant i22: (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant i23: (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant i24: (y == 0) ==> (x != 4) ==> (z1 != 2);\nloop invariant i25: (y == 2) ==> (x != 4) ==> (z1 != 2);\nloop invariant i26: (y == 0) ==> (x != 4) ==> (z2 != 1);\nloop invariant i27: (y == 2) ==> (x != 4) ==> (z2 != 1);\nloop invariant i28: (y == 0) ==> (x != 4) ==> (z3 != 0);\nloop invariant i29: (y == 2) ==> (x != 4) ==> (z3 != 0);\nloop invariant i30: (y == 0) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant i31: (y == 2) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant i32: (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 != 2);\nloop invariant i33: (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 != 2);\nloop invariant i34: (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z2 != 1);\nloop invariant i35: (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z2 != 1);\nloop invariant i36: (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z3 != 0);\nloop invariant i37: (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z3 != 0);\nloop invariant i38: (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant i39: (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (z1 + 2 * z2 + 4 * z3 != 4);\nloop invariant i40: (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z1 != 2);\nloop invariant i41: (y == 2) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z1 != 2);\nloop invariant i42: (y == 0) ==> (x + 2 * z1 + 2 * z2 + 4 * z3 != 4) ==> (x != 4) ==> (z2 != 1);\nloop invariant i43: 1 <= x <= 4;\nloop invariant i44: (x % 2 == 0);\nloop invariant i45: (y % 2 == 0);\nloop invariant i46: ((x == 0) ==> (y == 0));\nloop invariant i47: ((x == 2) ==> (y == 4));\nloop invariant i48: ((x == 4) ==> (y == 0));\nloop invariant i49: 1 <= x <= 2;\nloop invariant i50: x >= y;\nloop invariant i51: x + 2 * y == 2 * x + y;\nloop invariant i52: (y == 0 ==> x != 4);\nloop invariant i53: y >= 0;\nloop invariant i54: x + y <= 4;\nloop invariant i55: x + y == 4 ==> (x == 4 && y == 0);\nloop invariant i56: x <= 2;\nloop invariant i57: y <= 2;\nloop invariant i58: x == 4 ==> y == 0;\nloop invariant i59: x != 4 ==> y != 0;\nloop invariant i60: 0 <= x && x <= 4;\nloop invariant i61: 0 <= y && y <= 4;\nloop invariant i62: x - 2*y <= 0;\nloop invariant i63: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> x == 0 && y == 0;\nloop invariant i64: (x >= 2 && x <= 4 && y >= 2 && y <= 4) ==> x == 4 && y == 4;\nloop invariant i65: (x == 0 && y == 0) ==> x == 0 && y == 0;\nloop invariant i66: (x == 4 && y == 4) ==> x == 4 && y == 4;\nloop invariant i67: x >= 2;\nloop invariant i68: x + y >= 0;\nloop invariant i69: x + y == 2 * y;\nloop invariant i70: x + y == 2 * x - 2;\nloop invariant i71: x + y == 2 * y + 2;\nloop invariant i72: x + y == 2 * y + 2 * x - 2;\nloop invariant i73: x + y == 2 * y + 2 * x - 2 * y;\nloop invariant i74: x + y == 2 * x;\nloop invariant i75: x + y == 2 * y + 2 * x;\nloop invariant i76: x + y == 2 * x - 2 * y;\nloop invariant i77: x + y == 2 * x + 2 * y - 2 * y;\nloop invariant i78: (y <= 2 ==> x <= 4);\nloop invariant i79: x <= y;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 >= 2 && y + 2 >= 2);\nloop invariant i6: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 <= 4 && y + 2 <= 4);\nloop invariant i7: (x >= 0 && x <= 2 && y >= 0 && y <= 2) ==> (x + 2 == 4 && y + 2 == 4) ==> (x == 2 && y == 2);\nloop invariant i8: x >= 0;\n\n\n\n\n\nloop invariant i14: (y == 0) ==> (x != 4);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i52: (y == 0 ==> x != 4);\nloop invariant i53: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i65: (x == 0 && y == 0) ==> x == 0 && y == 0;\nloop invariant i66: (x == 4 && y == 4) ==> x == 4 && y == 4;\n\nloop invariant i68: x + y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c"
        ],
        "skipped": [],
        "total": 11,
        "success_count": 7,
        "failure_count": 4,
        "success_rate": 0.6363636363636364
    }
}