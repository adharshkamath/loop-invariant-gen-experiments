{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant 0 <= i <= unknown_int();\nloop invariant 0 <= j <= unknown_int();\nloop invariant flag ==> (j >= i);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i >= j;\nloop invariant x >= y;\nloop invariant flag ==> (x > 0 ==> i >= x-1);\nloop invariant !flag ==> (x > 0 ==> i >= x);\nloop invariant flag ==> (y > 0 ==> j >= y-1);\nloop invariant !flag ==> (y > 0 ==> j >= y);\nloop invariant x > 0 ==> y > 0 ==> i >= x + y - 1;\nloop invariant x > 0 ==> y > 0 ==> j >= x + y - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == x && j == y;\nloop invariant i == x ==> x >= 0;\nloop invariant i == x ==> x <= i;\nloop invariant j == y ==> y >= 0;\nloop invariant j == y ==> y <= j;\nloop invariant i == x ==> y == j;\nloop invariant j == y ==> x == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1 && 0 <= y <= 1 && i == 0 && j == 0 && x <= y && unknown_bool() ==> j >= i && (unknown_bool() ==> j >= i && (x <= y && i == 0 && j == 0 && unknown_bool()));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= i <= j;\nloop invariant i <= j;\nloop invariant i <= j + 1;\nloop invariant i <= j + x;\nloop invariant i <= j + y;\nloop invariant i <= j + x + y;\nloop invariant i <= j + x + y + 1;\nloop invariant i <= j + x + y + x;\nloop invariant i <= j + x + y + y;\nloop invariant i <= j + x + y + x + y;\nloop invariant i <= j + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i <= j;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant x <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= i;\nloop invariant y >= j;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag ==> j >= i;\nloop invariant i <= y * (y + 1) / 2;\nloop invariant j <= y * (y + 1) / 2 + flag;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant flag ==> x >= i;\nloop invariant flag ==> y >= j;\nloop invariant !flag ==> x <= i;\nloop invariant !flag ==> y <= j;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant (flag ==> j >= i + 1);\nloop invariant (flag ==> x >= y);\nloop invariant (flag ==> j >= y);\nloop invariant (flag ==> j >= x);\nloop invariant (flag ==> j >= i);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> j == y + 1);\nloop invariant (flag ==> j == x + 1);\nloop invariant (flag ==> j == i + y);\nloop invariant (flag ==> j == i + x);\nloop invariant (flag ==> j == y + x);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 0 <= x;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x <= j;\nloop invariant i <= j;\nloop invariant j <= (j + 1);\nloop invariant i <= (i + 1);\nloop invariant j >= (j - 1);\nloop invariant i >= (i - 1);\nloop invariant j >= (j - 2);\nloop invariant i >= (i - 2);\nloop invariant j >= (j - 3);\nloop invariant i >= (i - 3);\nloop invariant j >= (j - 4);\nloop invariant i >= (i - 4);\nloop invariant j >= (j - 5);\nloop invariant i >= (i - 5);\nloop invariant j >= (j - 6);\nloop invariant i >= (i - 6);\nloop invariant j >= (j - 7);\nloop invariant i >= (i - 7);\nloop invariant j >= (j - 8);\nloop invariant i >= (i - 8);\nloop invariant j >= (j - 9);\nloop invariant i >= (i - 9);\nloop invariant j >= (j - 10);\nloop invariant i >= (i - 10);\nloop invariant j >= (j - 11);\nloop invariant i >= (i - 11);\nloop invariant j >= (j - 12);\nloop invariant i >= (i - 12);\nloop invariant j >= (j - 13);\nloop invariant i >= (i - 13);\nloop invariant j >= (j - 14);\nloop invariant i >= (i - 14);\nloop invariant j >= (j - 15);\nloop invariant i >= (i - 15);\nloop invariant j >= (j - 16);\nloop invariant i >= (i - 16);\nloop invariant j >= (j - 17);\nloop invariant i >= (i - 17);\nloop invariant j >= (j - 18);\nloop invariant i >= (i - 18);\nloop invariant j >= (j - 19);\nloop invariant i >= (i - 19);\nloop invariant j >= (j - 20);\nloop invariant i >= (i - 20);\nloop invariant j >= (j - 21);\nloop invariant i >= (i - 21);\nloop invariant j >= (j - 22);\nloop invariant i >= (i - 22);\nloop invariant j >= (j - 23);\nloop invariant i >= (i - 23);\nloop invariant j >= (j - 24);\nloop invariant i >= (i - 24);\nloop invariant j >= (j - 25);\nloop invariant i >= (i - 25);\nloop invariant j >= (j - 26);\nloop invariant i >= (i - 26);\nloop invariant j >= (j - 27);\nloop invariant i >= (i - 27);\nloop invariant j >= (j - 28);\nloop invariant i >= (i - 28);\nloop invariant j >= (j - 29);\nloop invariant i >= (i - 29);\nloop invariant j >= (j - 30);\nloop invariant i >= (i - 30);\nloop invariant j >= (j - 31);\nloop invariant i >= (i - 31);\nloop invariant j >= (j - 32);\nloop invariant i >= (i - 32);\nloop invariant j >= (j - 33);\nloop invariant i >= (i - 33);\nloop invariant j >= (j - 34);\nloop invariant i >= (i - 34);\nloop invariant j >= (j - 35);\nloop invariant i >= (i - 35);\nloop invariant j >= (j - 36);\nloop invariant i >= (i - 36);\nloop invariant j >= (j - 37);\nloop invariant i >= (i - 37);\nloop invariant j >= (j - 38);\nloop invariant i >= (i - 38);\nloop invariant j >= (j - 39);\nloop invariant i >= (i - 39);\nloop invariant j >= (j - 40);\nloop invariant i >= (i - 40);\nloop invariant j >= (j - 41);\nloop invariant i >= (i - 41);\nloop invariant j >= (j - 42);\nloop invariant i >= (i - 42);\nloop invariant j >= (j - 43);\nloop invariant i >= (i - 43);\nloop invariant j >= (j - 44);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant (i == x);\nloop invariant (j == y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant j >= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i || x == i + 1;\nloop invariant y == j || y == j + 1;\nloop invariant x == j - y || x == j - y + 1;\nloop invariant y == i - x || y == i - x + 1;\nloop invariant i == j - y || i == j - y + 1;\nloop invariant j == i + x || j == i + x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant j >= i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant 0 <= i <= unknown_int();\nloop invariant 0 <= j <= unknown_int();\nloop invariant flag ==> (j >= i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i >= j;\nloop invariant x >= y;\nloop invariant flag ==> (x > 0 ==> i >= x-1);\nloop invariant !flag ==> (x > 0 ==> i >= x);\nloop invariant flag ==> (y > 0 ==> j >= y-1);\nloop invariant !flag ==> (y > 0 ==> j >= y);\nloop invariant x > 0 ==> y > 0 ==> i >= x + y - 1;\nloop invariant x > 0 ==> y > 0 ==> j >= x + y - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n\nloop invariant i6: x >= y;\nloop invariant i7: flag ==> (x > 0 ==> i >= x-1);\nloop invariant i8: !flag ==> (x > 0 ==> i >= x);\nloop invariant i9: flag ==> (y > 0 ==> j >= y-1);\nloop invariant i10: !flag ==> (y > 0 ==> j >= y);\nloop invariant i11: x > 0 ==> y > 0 ==> i >= x + y - 1;\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i == x && j == y;\nloop invariant i == x ==> x >= 0;\nloop invariant i == x ==> x <= i;\nloop invariant j == y ==> y >= 0;\nloop invariant j == y ==> y <= j;\nloop invariant i == x ==> y == j;\nloop invariant j == y ==> x == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= x <= i;\nloop invariant i3: 0 <= y <= j;\n\n\n\nloop invariant i7: i == x ==> x >= 0;\nloop invariant i8: i == x ==> x <= i;\nloop invariant i9: j == y ==> y >= 0;\nloop invariant i10: j == y ==> y <= j;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1 && 0 <= y <= 1 && i == 0 && j == 0 && x <= y && unknown_bool() ==> j >= i && (unknown_bool() ==> j >= i && (x <= y && i == 0 && j == 0 && unknown_bool()));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= i <= j;\nloop invariant i <= j;\nloop invariant i <= j + 1;\nloop invariant i <= j + x;\nloop invariant i <= j + y;\nloop invariant i <= j + x + y;\nloop invariant i <= j + x + y + 1;\nloop invariant i <= j + x + y + x;\nloop invariant i <= j + x + y + y;\nloop invariant i <= j + x + y + x + y;\nloop invariant i <= j + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: 0 <= i <= j;\nloop invariant i3: i <= j;\nloop invariant i4: i <= j + 1;\nloop invariant i5: i <= j + x;\nloop invariant i6: i <= j + y;\nloop invariant i7: i <= j + x + y;\nloop invariant i8: i <= j + x + y + 1;\nloop invariant i9: i <= j + x + y + x;\nloop invariant i10: i <= j + x + y + y;\nloop invariant i11: i <= j + x + y + x + y;\nloop invariant i12: i <= j + x + y + x + y + 1;\nloop invariant i13: i <= j + x + y + x + y + x;\nloop invariant i14: i <= j + x + y + x + y + y;\nloop invariant i15: i <= j + x + y + x + y + x + y;\nloop invariant i16: i <= j + x + y + x + y + x + y + 1;\nloop invariant i17: i <= j + x + y + x + y + x + y + x;\nloop invariant i18: i <= j + x + y + x + y + x + y + y;\nloop invariant i19: i <= j + x + y + x + y + x + y + x + y;\nloop invariant i20: i <= j + x + y + x + y + x + y + x + y + 1;\nloop invariant i21: i <= j + x + y + x + y + x + y + x + y + x;\nloop invariant i22: i <= j + x + y + x + y + x + y + x + y + y;\nloop invariant i23: i <= j + x + y + x + y + x + y + x + y + x + y;\nloop invariant i24: i <= j + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i25: i <= j + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i26: i <= j + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i27: i <= j + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i28: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i29: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i30: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i31: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i32: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i33: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i34: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i35: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i36: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i37: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i38: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i39: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i40: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i <= j;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant x <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant j <= x;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant i <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: i <= j;\n\n\nloop invariant i8: x <= y;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= i;\nloop invariant y >= j;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\nloop invariant i + j <= x + y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= y <= j;\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag ==> j >= i;\nloop invariant i <= y * (y + 1) / 2;\nloop invariant j <= y * (y + 1) / 2 + flag;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant flag ==> x >= i;\nloop invariant flag ==> y >= j;\nloop invariant !flag ==> x <= i;\nloop invariant !flag ==> y <= j;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i == 0 ==> j == 0;\nloop invariant j == 0 ==> i == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\n\n\nloop invariant i6: y >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: j >= 0;\n\n\nloop invariant i12: !flag ==> x <= i;\nloop invariant i13: !flag ==> y <= j;\nloop invariant i14: i == 0 ==> j == 0;\nloop invariant i15: j == 0 ==> i == 0;\nloop invariant i16: x == 0 ==> y == 0;\nloop invariant i17: y == 0 ==> x == 0;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= i <= 100000;\nloop invariant 0 <= j <= 100000;\nloop invariant (flag ==> j >= i + 1);\nloop invariant (flag ==> x >= y);\nloop invariant (flag ==> j >= y);\nloop invariant (flag ==> j >= x);\nloop invariant (flag ==> j >= i);\nloop invariant (flag ==> j == i + 1);\nloop invariant (flag ==> j == y + 1);\nloop invariant (flag ==> j == x + 1);\nloop invariant (flag ==> j == i + y);\nloop invariant (flag ==> j == i + x);\nloop invariant (flag ==> j == y + x);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\nloop invariant (flag ==> j == i + x + y);\nloop invariant (flag ==> j == i + y + x);\nloop invariant (flag ==> j == y + x + i);\nloop invariant (flag ==> j == x + y + i);\nloop invariant (flag ==> j == y + i + x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= y <= j;\n\n\n\nloop invariant i6: (flag ==> x >= y);\nloop invariant i7: (flag ==> j >= y);\nloop invariant i8: (flag ==> j >= x);\nloop invariant i9: (flag ==> j >= i);\n\n\n\nloop invariant i13: (flag ==> j == i + y);\nloop invariant i14: (flag ==> j == i + x);\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 0 <= x;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= j;\nloop invariant 1 <= x;\nloop invariant x <= y;\nloop invariant x <= i;\nloop invariant x <= j;\nloop invariant 1 <= y;\nloop invariant y <= i;\nloop invariant y <= j;\nloop invariant 1 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: x <= y;\nloop invariant i3: x <= j;\nloop invariant i4: 0 <= x;\nloop invariant i5: x <= i;\n\nloop invariant i7: y <= i;\nloop invariant i8: y <= j;\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x <= j;\nloop invariant i <= j;\nloop invariant j <= (j + 1);\nloop invariant i <= (i + 1);\nloop invariant j >= (j - 1);\nloop invariant i >= (i - 1);\nloop invariant j >= (j - 2);\nloop invariant i >= (i - 2);\nloop invariant j >= (j - 3);\nloop invariant i >= (i - 3);\nloop invariant j >= (j - 4);\nloop invariant i >= (i - 4);\nloop invariant j >= (j - 5);\nloop invariant i >= (i - 5);\nloop invariant j >= (j - 6);\nloop invariant i >= (i - 6);\nloop invariant j >= (j - 7);\nloop invariant i >= (i - 7);\nloop invariant j >= (j - 8);\nloop invariant i >= (i - 8);\nloop invariant j >= (j - 9);\nloop invariant i >= (i - 9);\nloop invariant j >= (j - 10);\nloop invariant i >= (i - 10);\nloop invariant j >= (j - 11);\nloop invariant i >= (i - 11);\nloop invariant j >= (j - 12);\nloop invariant i >= (i - 12);\nloop invariant j >= (j - 13);\nloop invariant i >= (i - 13);\nloop invariant j >= (j - 14);\nloop invariant i >= (i - 14);\nloop invariant j >= (j - 15);\nloop invariant i >= (i - 15);\nloop invariant j >= (j - 16);\nloop invariant i >= (i - 16);\nloop invariant j >= (j - 17);\nloop invariant i >= (i - 17);\nloop invariant j >= (j - 18);\nloop invariant i >= (i - 18);\nloop invariant j >= (j - 19);\nloop invariant i >= (i - 19);\nloop invariant j >= (j - 20);\nloop invariant i >= (i - 20);\nloop invariant j >= (j - 21);\nloop invariant i >= (i - 21);\nloop invariant j >= (j - 22);\nloop invariant i >= (i - 22);\nloop invariant j >= (j - 23);\nloop invariant i >= (i - 23);\nloop invariant j >= (j - 24);\nloop invariant i >= (i - 24);\nloop invariant j >= (j - 25);\nloop invariant i >= (i - 25);\nloop invariant j >= (j - 26);\nloop invariant i >= (i - 26);\nloop invariant j >= (j - 27);\nloop invariant i >= (i - 27);\nloop invariant j >= (j - 28);\nloop invariant i >= (i - 28);\nloop invariant j >= (j - 29);\nloop invariant i >= (i - 29);\nloop invariant j >= (j - 30);\nloop invariant i >= (i - 30);\nloop invariant j >= (j - 31);\nloop invariant i >= (i - 31);\nloop invariant j >= (j - 32);\nloop invariant i >= (i - 32);\nloop invariant j >= (j - 33);\nloop invariant i >= (i - 33);\nloop invariant j >= (j - 34);\nloop invariant i >= (i - 34);\nloop invariant j >= (j - 35);\nloop invariant i >= (i - 35);\nloop invariant j >= (j - 36);\nloop invariant i >= (i - 36);\nloop invariant j >= (j - 37);\nloop invariant i >= (i - 37);\nloop invariant j >= (j - 38);\nloop invariant i >= (i - 38);\nloop invariant j >= (j - 39);\nloop invariant i >= (i - 39);\nloop invariant j >= (j - 40);\nloop invariant i >= (i - 40);\nloop invariant j >= (j - 41);\nloop invariant i >= (i - 41);\nloop invariant j >= (j - 42);\nloop invariant i >= (i - 42);\nloop invariant j >= (j - 43);\nloop invariant i >= (i - 43);\nloop invariant j >= (j - 44);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: x <= j;\n\nloop invariant i7: j <= (j + 1);\nloop invariant i8: i <= (i + 1);\nloop invariant i9: j >= (j - 1);\nloop invariant i10: i >= (i - 1);\nloop invariant i11: j >= (j - 2);\nloop invariant i12: i >= (i - 2);\nloop invariant i13: j >= (j - 3);\nloop invariant i14: i >= (i - 3);\nloop invariant i15: j >= (j - 4);\nloop invariant i16: i >= (i - 4);\nloop invariant i17: j >= (j - 5);\nloop invariant i18: i >= (i - 5);\nloop invariant i19: j >= (j - 6);\nloop invariant i20: i >= (i - 6);\nloop invariant i21: j >= (j - 7);\nloop invariant i22: i >= (i - 7);\nloop invariant i23: j >= (j - 8);\nloop invariant i24: i >= (i - 8);\nloop invariant i25: j >= (j - 9);\nloop invariant i26: i >= (i - 9);\nloop invariant i27: j >= (j - 10);\nloop invariant i28: i >= (i - 10);\nloop invariant i29: j >= (j - 11);\nloop invariant i30: i >= (i - 11);\nloop invariant i31: j >= (j - 12);\nloop invariant i32: i >= (i - 12);\nloop invariant i33: j >= (j - 13);\nloop invariant i34: i >= (i - 13);\nloop invariant i35: j >= (j - 14);\nloop invariant i36: i >= (i - 14);\nloop invariant i37: j >= (j - 15);\nloop invariant i38: i >= (i - 15);\nloop invariant i39: j >= (j - 16);\nloop invariant i40: i >= (i - 16);\nloop invariant i41: j >= (j - 17);\nloop invariant i42: i >= (i - 17);\nloop invariant i43: j >= (j - 18);\nloop invariant i44: i >= (i - 18);\nloop invariant i45: j >= (j - 19);\nloop invariant i46: i >= (i - 19);\nloop invariant i47: j >= (j - 20);\nloop invariant i48: i >= (i - 20);\nloop invariant i49: j >= (j - 21);\nloop invariant i50: i >= (i - 21);\nloop invariant i51: j >= (j - 22);\nloop invariant i52: i >= (i - 22);\nloop invariant i53: j >= (j - 23);\nloop invariant i54: i >= (i - 23);\nloop invariant i55: j >= (j - 24);\nloop invariant i56: i >= (i - 24);\nloop invariant i57: j >= (j - 25);\nloop invariant i58: i >= (i - 25);\nloop invariant i59: j >= (j - 26);\nloop invariant i60: i >= (i - 26);\nloop invariant i61: j >= (j - 27);\nloop invariant i62: i >= (i - 27);\nloop invariant i63: j >= (j - 28);\nloop invariant i64: i >= (i - 28);\nloop invariant i65: j >= (j - 29);\nloop invariant i66: i >= (i - 29);\nloop invariant i67: j >= (j - 30);\nloop invariant i68: i >= (i - 30);\nloop invariant i69: j >= (j - 31);\nloop invariant i70: i >= (i - 31);\nloop invariant i71: j >= (j - 32);\nloop invariant i72: i >= (i - 32);\nloop invariant i73: j >= (j - 33);\nloop invariant i74: i >= (i - 33);\nloop invariant i75: j >= (j - 34);\nloop invariant i76: i >= (i - 34);\nloop invariant i77: j >= (j - 35);\nloop invariant i78: i >= (i - 35);\nloop invariant i79: j >= (j - 36);\nloop invariant i80: i >= (i - 36);\nloop invariant i81: j >= (j - 37);\nloop invariant i82: i >= (i - 37);\nloop invariant i83: j >= (j - 38);\nloop invariant i84: i >= (i - 38);\nloop invariant i85: j >= (j - 39);\nloop invariant i86: i >= (i - 39);\nloop invariant i87: j >= (j - 40);\nloop invariant i88: i >= (i - 40);\nloop invariant i89: j >= (j - 41);\nloop invariant i90: i >= (i - 41);\nloop invariant i91: j >= (j - 42);\nloop invariant i92: i >= (i - 42);\nloop invariant i93: j >= (j - 43);\nloop invariant i94: i >= (i - 43);\nloop invariant i95: j >= (j - 44);\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant (i == x);\nloop invariant (j == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 2147483647;\nloop invariant i2: 0 <= j <= 2147483647;\nloop invariant i3: 0 <= x <= 2147483647;\nloop invariant i4: 0 <= y <= 2147483647;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant j >= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i || x == i + 1;\nloop invariant y == j || y == j + 1;\nloop invariant x == j - y || x == j - y + 1;\nloop invariant y == i - x || y == i - x + 1;\nloop invariant i == j - y || i == j - y + 1;\nloop invariant j == i + x || j == i + x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x <= i;\nloop invariant i3: y <= j;\nloop invariant i4: j >= i;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= unknown_int();\nloop invariant i2: 0 <= y <= unknown_int();\nloop invariant i3: 0 <= i <= unknown_int();\nloop invariant i4: 0 <= j <= unknown_int();\nloop invariant i5: flag ==> (j >= i);\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: j >= 0;\nloop invariant i10: i >= j;\nloop invariant i11: x >= y;\nloop invariant i12: flag ==> (x > 0 ==> i >= x-1);\nloop invariant i13: !flag ==> (x > 0 ==> i >= x);\nloop invariant i14: flag ==> (y > 0 ==> j >= y-1);\nloop invariant i15: !flag ==> (y > 0 ==> j >= y);\nloop invariant i16: x > 0 ==> y > 0 ==> i >= x + y - 1;\nloop invariant i17: x > 0 ==> y > 0 ==> j >= x + y - 1;\nloop invariant i18: 0 <= i <= j;\nloop invariant i19: 0 <= x <= i;\nloop invariant i20: 0 <= y <= j;\nloop invariant i21: x == i;\nloop invariant i22: y == j;\nloop invariant i23: i == x && j == y;\nloop invariant i24: i == x ==> x >= 0;\nloop invariant i25: i == x ==> x <= i;\nloop invariant i26: j == y ==> y >= 0;\nloop invariant i27: j == y ==> y <= j;\nloop invariant i28: i == x ==> y == j;\nloop invariant i29: j == y ==> x == i;\nloop invariant i30: 0 <= x <= 1 && 0 <= y <= 1 && i == 0 && j == 0 && x <= y && unknown_bool() ==> j >= i && (unknown_bool() ==> j >= i && (x <= y && i == 0 && j == 0 && unknown_bool()));\nloop invariant i31: 0 <= x <= y;\nloop invariant i32: i <= j;\nloop invariant i33: i <= j + 1;\nloop invariant i34: i <= j + x;\nloop invariant i35: i <= j + y;\nloop invariant i36: i <= j + x + y;\nloop invariant i37: i <= j + x + y + 1;\nloop invariant i38: i <= j + x + y + x;\nloop invariant i39: i <= j + x + y + y;\nloop invariant i40: i <= j + x + y + x + y;\nloop invariant i41: i <= j + x + y + x + y + 1;\nloop invariant i42: i <= j + x + y + x + y + x;\nloop invariant i43: i <= j + x + y + x + y + y;\nloop invariant i44: i <= j + x + y + x + y + x + y;\nloop invariant i45: i <= j + x + y + x + y + x + y + 1;\nloop invariant i46: i <= j + x + y + x + y + x + y + x;\nloop invariant i47: i <= j + x + y + x + y + x + y + y;\nloop invariant i48: i <= j + x + y + x + y + x + y + x + y;\nloop invariant i49: i <= j + x + y + x + y + x + y + x + y + 1;\nloop invariant i50: i <= j + x + y + x + y + x + y + x + y + x;\nloop invariant i51: i <= j + x + y + x + y + x + y + x + y + y;\nloop invariant i52: i <= j + x + y + x + y + x + y + x + y + x + y;\nloop invariant i53: i <= j + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i54: i <= j + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i55: i <= j + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i56: i <= j + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i57: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i58: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i59: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i60: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i61: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i62: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i63: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i64: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i65: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i66: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i67: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i68: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i69: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i70: j <= x;\nloop invariant i71: j <= y;\nloop invariant i72: x <= y;\nloop invariant i73: i <= x;\nloop invariant i74: i <= y;\nloop invariant i75: x >= i;\nloop invariant i76: y >= j;\nloop invariant i77: i + j <= x + y;\nloop invariant i78: 1 <= y <= 100000;\nloop invariant i79: x >= (1 + (y - 1) * y / 2);\nloop invariant i80: flag ==> j >= i;\nloop invariant i81: i <= y * (y + 1) / 2;\nloop invariant i82: j <= y * (y + 1) / 2 + flag;\nloop invariant i83: flag ==> x >= i;\nloop invariant i84: flag ==> y >= j;\nloop invariant i85: !flag ==> x <= i;\nloop invariant i86: !flag ==> y <= j;\nloop invariant i87: i == 0 ==> j == 0;\nloop invariant i88: j == 0 ==> i == 0;\nloop invariant i89: x == 0 ==> y == 0;\nloop invariant i90: y == 0 ==> x == 0;\nloop invariant i91: i == y * (y + 1) / 2 ==> j == y * (y + 1) / 2 + flag;\nloop invariant i92: j == y * (y + 1) / 2 + flag ==> i == y * (y + 1) / 2;\nloop invariant i93: 0 <= i <= 100000;\nloop invariant i94: 0 <= j <= 100000;\nloop invariant i95: (flag ==> j >= i + 1);\nloop invariant i96: (flag ==> x >= y);\nloop invariant i97: (flag ==> j >= y);\nloop invariant i98: (flag ==> j >= x);\nloop invariant i99: (flag ==> j >= i);\nloop invariant i100: (flag ==> j == i + 1);\nloop invariant i101: (flag ==> j == y + 1);\nloop invariant i102: (flag ==> j == x + 1);\nloop invariant i103: (flag ==> j == i + y);\nloop invariant i104: (flag ==> j == i + x);\nloop invariant i105: (flag ==> j == y + x);\nloop invariant i106: (flag ==> j == i + y + x);\nloop invariant i107: (flag ==> j == y + x + i);\nloop invariant i108: (flag ==> j == x + y + i);\nloop invariant i109: (flag ==> j == y + i + x);\nloop invariant i110: (flag ==> j == i + x + y);\nloop invariant i111: 0 <= y;\nloop invariant i112: x <= j;\nloop invariant i113: 0 <= x;\nloop invariant i114: x <= i;\nloop invariant i115: 1 <= y;\nloop invariant i116: y <= i;\nloop invariant i117: y <= j;\nloop invariant i118: 1 <= x;\nloop invariant i119: j <= (j + 1);\nloop invariant i120: i <= (i + 1);\nloop invariant i121: j >= (j - 1);\nloop invariant i122: i >= (i - 1);\nloop invariant i123: j >= (j - 2);\nloop invariant i124: i >= (i - 2);\nloop invariant i125: j >= (j - 3);\nloop invariant i126: i >= (i - 3);\nloop invariant i127: j >= (j - 4);\nloop invariant i128: i >= (i - 4);\nloop invariant i129: j >= (j - 5);\nloop invariant i130: i >= (i - 5);\nloop invariant i131: j >= (j - 6);\nloop invariant i132: i >= (i - 6);\nloop invariant i133: j >= (j - 7);\nloop invariant i134: i >= (i - 7);\nloop invariant i135: j >= (j - 8);\nloop invariant i136: i >= (i - 8);\nloop invariant i137: j >= (j - 9);\nloop invariant i138: i >= (i - 9);\nloop invariant i139: j >= (j - 10);\nloop invariant i140: i >= (i - 10);\nloop invariant i141: j >= (j - 11);\nloop invariant i142: i >= (i - 11);\nloop invariant i143: j >= (j - 12);\nloop invariant i144: i >= (i - 12);\nloop invariant i145: j >= (j - 13);\nloop invariant i146: i >= (i - 13);\nloop invariant i147: j >= (j - 14);\nloop invariant i148: i >= (i - 14);\nloop invariant i149: j >= (j - 15);\nloop invariant i150: i >= (i - 15);\nloop invariant i151: j >= (j - 16);\nloop invariant i152: i >= (i - 16);\nloop invariant i153: j >= (j - 17);\nloop invariant i154: i >= (i - 17);\nloop invariant i155: j >= (j - 18);\nloop invariant i156: i >= (i - 18);\nloop invariant i157: j >= (j - 19);\nloop invariant i158: i >= (i - 19);\nloop invariant i159: j >= (j - 20);\nloop invariant i160: i >= (i - 20);\nloop invariant i161: j >= (j - 21);\nloop invariant i162: i >= (i - 21);\nloop invariant i163: j >= (j - 22);\nloop invariant i164: i >= (i - 22);\nloop invariant i165: j >= (j - 23);\nloop invariant i166: i >= (i - 23);\nloop invariant i167: j >= (j - 24);\nloop invariant i168: i >= (i - 24);\nloop invariant i169: j >= (j - 25);\nloop invariant i170: i >= (i - 25);\nloop invariant i171: j >= (j - 26);\nloop invariant i172: i >= (i - 26);\nloop invariant i173: j >= (j - 27);\nloop invariant i174: i >= (i - 27);\nloop invariant i175: j >= (j - 28);\nloop invariant i176: i >= (i - 28);\nloop invariant i177: j >= (j - 29);\nloop invariant i178: i >= (i - 29);\nloop invariant i179: j >= (j - 30);\nloop invariant i180: i >= (i - 30);\nloop invariant i181: j >= (j - 31);\nloop invariant i182: i >= (i - 31);\nloop invariant i183: j >= (j - 32);\nloop invariant i184: i >= (i - 32);\nloop invariant i185: j >= (j - 33);\nloop invariant i186: i >= (i - 33);\nloop invariant i187: j >= (j - 34);\nloop invariant i188: i >= (i - 34);\nloop invariant i189: j >= (j - 35);\nloop invariant i190: i >= (i - 35);\nloop invariant i191: j >= (j - 36);\nloop invariant i192: i >= (i - 36);\nloop invariant i193: j >= (j - 37);\nloop invariant i194: i >= (i - 37);\nloop invariant i195: j >= (j - 38);\nloop invariant i196: i >= (i - 38);\nloop invariant i197: j >= (j - 39);\nloop invariant i198: i >= (i - 39);\nloop invariant i199: j >= (j - 40);\nloop invariant i200: i >= (i - 40);\nloop invariant i201: j >= (j - 41);\nloop invariant i202: i >= (i - 41);\nloop invariant i203: j >= (j - 42);\nloop invariant i204: i >= (i - 42);\nloop invariant i205: j >= (j - 43);\nloop invariant i206: i >= (i - 43);\nloop invariant i207: j >= (j - 44);\nloop invariant i208: 0 <= i <= 2147483647;\nloop invariant i209: 0 <= j <= 2147483647;\nloop invariant i210: 0 <= x <= 2147483647;\nloop invariant i211: 0 <= y <= 2147483647;\nloop invariant i212: (i == x);\nloop invariant i213: (j == y);\nloop invariant i214: j >= i;\nloop invariant i215: x == i || x == i + 1;\nloop invariant i216: y == j || y == j + 1;\nloop invariant i217: x == j - y || x == j - y + 1;\nloop invariant i218: y == i - x || y == i - x + 1;\nloop invariant i219: i == j - y || i == j - y + 1;\nloop invariant i220: j == i + x || j == i + x + 1;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 28,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: flag ==> (j >= i);\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: j >= 0;\n\nloop invariant i11: x >= y;\nloop invariant i12: flag ==> (x > 0 ==> i >= x-1);\nloop invariant i13: !flag ==> (x > 0 ==> i >= x);\nloop invariant i14: flag ==> (y > 0 ==> j >= y-1);\nloop invariant i15: !flag ==> (y > 0 ==> j >= y);\nloop invariant i16: x > 0 ==> y > 0 ==> i >= x + y - 1;\nloop invariant i17: x > 0 ==> y > 0 ==> j >= x + y - 1;\nloop invariant i18: 0 <= i <= j;\nloop invariant i19: 0 <= x <= i;\nloop invariant i20: 0 <= y <= j;\n\n\n\nloop invariant i24: i == x ==> x >= 0;\nloop invariant i25: i == x ==> x <= i;\nloop invariant i26: j == y ==> y >= 0;\nloop invariant i27: j == y ==> y <= j;\n\nloop invariant i29: j == y ==> x == i;\n\nloop invariant i31: 0 <= x <= y;\nloop invariant i32: i <= j;\nloop invariant i33: i <= j + 1;\nloop invariant i34: i <= j + x;\nloop invariant i35: i <= j + y;\nloop invariant i36: i <= j + x + y;\nloop invariant i37: i <= j + x + y + 1;\nloop invariant i38: i <= j + x + y + x;\nloop invariant i39: i <= j + x + y + y;\nloop invariant i40: i <= j + x + y + x + y;\nloop invariant i41: i <= j + x + y + x + y + 1;\nloop invariant i42: i <= j + x + y + x + y + x;\nloop invariant i43: i <= j + x + y + x + y + y;\nloop invariant i44: i <= j + x + y + x + y + x + y;\nloop invariant i45: i <= j + x + y + x + y + x + y + 1;\nloop invariant i46: i <= j + x + y + x + y + x + y + x;\nloop invariant i47: i <= j + x + y + x + y + x + y + y;\nloop invariant i48: i <= j + x + y + x + y + x + y + x + y;\nloop invariant i49: i <= j + x + y + x + y + x + y + x + y + 1;\nloop invariant i50: i <= j + x + y + x + y + x + y + x + y + x;\nloop invariant i51: i <= j + x + y + x + y + x + y + x + y + y;\nloop invariant i52: i <= j + x + y + x + y + x + y + x + y + x + y;\nloop invariant i53: i <= j + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i54: i <= j + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i55: i <= j + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i56: i <= j + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i57: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i58: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i59: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i60: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i61: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i62: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i63: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i64: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i65: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\nloop invariant i66: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x;\nloop invariant i67: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + y;\nloop invariant i68: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y;\nloop invariant i69: i <= j + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + x + y + 1;\n\n\nloop invariant i72: x <= y;\n\n\n\n\n\n\n\nloop invariant i80: flag ==> j >= i;\nloop invariant i81: i <= y * (y + 1) / 2;\n\n\n\nloop invariant i85: !flag ==> x <= i;\nloop invariant i86: !flag ==> y <= j;\nloop invariant i87: i == 0 ==> j == 0;\nloop invariant i88: j == 0 ==> i == 0;\nloop invariant i89: x == 0 ==> y == 0;\nloop invariant i90: y == 0 ==> x == 0;\n\n\n\n\n\nloop invariant i96: (flag ==> x >= y);\nloop invariant i97: (flag ==> j >= y);\nloop invariant i98: (flag ==> j >= x);\nloop invariant i99: (flag ==> j >= i);\n\n\n\nloop invariant i103: (flag ==> j == i + y);\nloop invariant i104: (flag ==> j == i + x);\n\n\n\n\n\n\nloop invariant i111: 0 <= y;\nloop invariant i112: x <= j;\nloop invariant i113: 0 <= x;\nloop invariant i114: x <= i;\n\nloop invariant i116: y <= i;\nloop invariant i117: y <= j;\n\nloop invariant i119: j <= (j + 1);\nloop invariant i120: i <= (i + 1);\nloop invariant i121: j >= (j - 1);\nloop invariant i122: i >= (i - 1);\nloop invariant i123: j >= (j - 2);\nloop invariant i124: i >= (i - 2);\nloop invariant i125: j >= (j - 3);\nloop invariant i126: i >= (i - 3);\nloop invariant i127: j >= (j - 4);\nloop invariant i128: i >= (i - 4);\nloop invariant i129: j >= (j - 5);\nloop invariant i130: i >= (i - 5);\nloop invariant i131: j >= (j - 6);\nloop invariant i132: i >= (i - 6);\nloop invariant i133: j >= (j - 7);\nloop invariant i134: i >= (i - 7);\nloop invariant i135: j >= (j - 8);\nloop invariant i136: i >= (i - 8);\nloop invariant i137: j >= (j - 9);\nloop invariant i138: i >= (i - 9);\nloop invariant i139: j >= (j - 10);\nloop invariant i140: i >= (i - 10);\nloop invariant i141: j >= (j - 11);\nloop invariant i142: i >= (i - 11);\nloop invariant i143: j >= (j - 12);\nloop invariant i144: i >= (i - 12);\nloop invariant i145: j >= (j - 13);\nloop invariant i146: i >= (i - 13);\nloop invariant i147: j >= (j - 14);\nloop invariant i148: i >= (i - 14);\nloop invariant i149: j >= (j - 15);\nloop invariant i150: i >= (i - 15);\nloop invariant i151: j >= (j - 16);\nloop invariant i152: i >= (i - 16);\nloop invariant i153: j >= (j - 17);\nloop invariant i154: i >= (i - 17);\nloop invariant i155: j >= (j - 18);\nloop invariant i156: i >= (i - 18);\nloop invariant i157: j >= (j - 19);\nloop invariant i158: i >= (i - 19);\nloop invariant i159: j >= (j - 20);\nloop invariant i160: i >= (i - 20);\nloop invariant i161: j >= (j - 21);\nloop invariant i162: i >= (i - 21);\nloop invariant i163: j >= (j - 22);\nloop invariant i164: i >= (i - 22);\nloop invariant i165: j >= (j - 23);\nloop invariant i166: i >= (i - 23);\nloop invariant i167: j >= (j - 24);\nloop invariant i168: i >= (i - 24);\nloop invariant i169: j >= (j - 25);\nloop invariant i170: i >= (i - 25);\nloop invariant i171: j >= (j - 26);\nloop invariant i172: i >= (i - 26);\nloop invariant i173: j >= (j - 27);\nloop invariant i174: i >= (i - 27);\nloop invariant i175: j >= (j - 28);\nloop invariant i176: i >= (i - 28);\nloop invariant i177: j >= (j - 29);\nloop invariant i178: i >= (i - 29);\nloop invariant i179: j >= (j - 30);\nloop invariant i180: i >= (i - 30);\nloop invariant i181: j >= (j - 31);\nloop invariant i182: i >= (i - 31);\nloop invariant i183: j >= (j - 32);\nloop invariant i184: i >= (i - 32);\nloop invariant i185: j >= (j - 33);\nloop invariant i186: i >= (i - 33);\nloop invariant i187: j >= (j - 34);\nloop invariant i188: i >= (i - 34);\nloop invariant i189: j >= (j - 35);\nloop invariant i190: i >= (i - 35);\nloop invariant i191: j >= (j - 36);\nloop invariant i192: i >= (i - 36);\nloop invariant i193: j >= (j - 37);\nloop invariant i194: i >= (i - 37);\nloop invariant i195: j >= (j - 38);\nloop invariant i196: i >= (i - 38);\nloop invariant i197: j >= (j - 39);\nloop invariant i198: i >= (i - 39);\nloop invariant i199: j >= (j - 40);\nloop invariant i200: i >= (i - 40);\nloop invariant i201: j >= (j - 41);\nloop invariant i202: i >= (i - 41);\nloop invariant i203: j >= (j - 42);\nloop invariant i204: i >= (i - 42);\nloop invariant i205: j >= (j - 43);\nloop invariant i206: i >= (i - 43);\nloop invariant i207: j >= (j - 44);\nloop invariant i208: 0 <= i <= 2147483647;\nloop invariant i209: 0 <= j <= 2147483647;\nloop invariant i210: 0 <= x <= 2147483647;\nloop invariant i211: 0 <= y <= 2147483647;\n\n\nloop invariant i214: j >= i;\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c"
        ],
        "skipped": [],
        "total": 125,
        "success_count": 107,
        "failure_count": 18,
        "success_rate": 0.856
    }
}