{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  while (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y; loop invariant x >= (1 + (y - 1) * y / 2); loop invariant x >= y; loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; loop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant unknown_bool() ==> y <= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= 2;\nloop invariant y >= 2;\nloop invariant x >= 3;\nloop invariant y >= 3;\nloop invariant x >= 4;\nloop invariant y >= 4;\nloop invariant x >= 5;\nloop invariant y >= 5;\nloop invariant x >= 6;\nloop invariant y >= 6;\nloop invariant x >= 7;\nloop invariant y >= 7;\nloop invariant x >= 8;\nloop invariant y >= 8;\nloop invariant x >= 9;\nloop invariant y >= 9;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x >= 11;\nloop invariant y >= 11;\nloop invariant x >= 12;\nloop invariant y >= 12;\nloop invariant x >= 13;\nloop invariant y >= 13;\nloop invariant x >= 14;\nloop invariant y >= 14;\nloop invariant x >= 15;\nloop invariant y >= 15;\nloop invariant x >= 16;\nloop invariant y >= 16;\nloop invariant x >= 17;\nloop invariant y >= 17;\nloop invariant x >= 18;\nloop invariant y >= 18;\nloop invariant x >= 19;\nloop invariant y >= 19;\nloop invariant x >= 20;\nloop invariant y >= 20;\nloop invariant x >= 21;\nloop invariant y >= 21;\nloop invariant x >= 22;\nloop invariant y >= 22;\nloop invariant x >= 23;\nloop invariant y >= 23;\nloop invariant x >= 24;\nloop invariant y >= 24;\nloop invariant x >= 25;\nloop invariant y >= 25;\nloop invariant x >= 26;\nloop invariant y >= 26;\nloop invariant x >= 27;\nloop invariant y >= 27;\nloop invariant x >= 28;\nloop invariant y >= 28;\nloop invariant x >= 29;\nloop invariant y >= 29;\nloop invariant x >= 30;\nloop invariant y >= 30;\nloop invariant x >= 31;\nloop invariant y >= 31;\nloop invariant x >= 32;\nloop invariant y >= 32;\nloop invariant x >= 33;\nloop invariant y >= 33;\nloop invariant x >= 34;\nloop invariant y >= 34;\nloop invariant x >= 35;\nloop invariant y >= 35;\nloop invariant x >= 36;\nloop invariant y >= 36;\nloop invariant x >= 37;\nloop invariant y >= 37;\nloop invariant x >= 38;\nloop invariant y >= 38;\nloop invariant x >= 39;\nloop invariant y >= 39;\nloop invariant x >= 40;\nloop invariant y >= 40;\nloop invariant x >= 41;\nloop invariant y >= 41;\nloop invariant x >= 42;\nloop invariant y >= 42;\nloop invariant x >= 43;\nloop invariant y >= 43;\nloop invariant x >= 44;\nloop invariant y >= 44;\nloop invariant x >= 45;\nloop invariant y >= 45;\nloop invariant x >= 46;\nloop invariant y >= 46;\nloop invariant x >= 47;\nloop invariant y >= 47;\nloop invariant x >= 48;\nloop invariant y >= 48;\nloop invariant x >= 49;\nloop invariant y >= 49;\nloop invariant x >= 50;\nloop invariant y >= 50;\nloop invariant x >= 51;\nloop invariant y >= 51;\nloop invariant x >= 52;\nloop invariant y >= 52;\nloop invariant x >= 53;\nloop invariant y >= 53;\nloop invariant x >= 54;\nloop invariant y >= 54;\nloop invariant x >= 55;\nloop invariant y >= 55;\nloop invariant x >= 56;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 1 <= y <= INT_MAX;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x >= (1 + (y - 1) * y / 2); loop invariant x >= y; loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y; loop invariant x >= (1 + (y - 1) * y / 2); loop invariant x >= y; loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y);\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\nloop invariant x + y >= y;\nloop invariant x + y >= x;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant x >= y ==> y <= x;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y == y;\nloop invariant y == x;\nloop invariant x == y;\nloop invariant x == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y;\n\nloop invariant i3: x >= y ==> y <= x;\n\nloop invariant i5: y >= 0;\nloop invariant i6: x >= 0;\n\nloop invariant i8: y == y;\n\n\nloop invariant i11: x == x;\nloop invariant i12: x + y >= y;\nloop invariant i13: x + y >= x;\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y; loop invariant x <= y;\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant unknown_bool() ==> y <= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\nloop invariant unknown_bool() ==> y >= 100000;\nloop invariant unknown_bool() ==> x >= y + 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y;\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant y == y;\nloop invariant x == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x >= y;\nloop invariant i4: y >= 0;\nloop invariant i5: y <= 100000;\nloop invariant i6: y == y;\nloop invariant i7: x == x;\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= y;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y;\n\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 110,
                "annotations": "```\n/*@\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= 2;\nloop invariant y >= 2;\nloop invariant x >= 3;\nloop invariant y >= 3;\nloop invariant x >= 4;\nloop invariant y >= 4;\nloop invariant x >= 5;\nloop invariant y >= 5;\nloop invariant x >= 6;\nloop invariant y >= 6;\nloop invariant x >= 7;\nloop invariant y >= 7;\nloop invariant x >= 8;\nloop invariant y >= 8;\nloop invariant x >= 9;\nloop invariant y >= 9;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant x >= 11;\nloop invariant y >= 11;\nloop invariant x >= 12;\nloop invariant y >= 12;\nloop invariant x >= 13;\nloop invariant y >= 13;\nloop invariant x >= 14;\nloop invariant y >= 14;\nloop invariant x >= 15;\nloop invariant y >= 15;\nloop invariant x >= 16;\nloop invariant y >= 16;\nloop invariant x >= 17;\nloop invariant y >= 17;\nloop invariant x >= 18;\nloop invariant y >= 18;\nloop invariant x >= 19;\nloop invariant y >= 19;\nloop invariant x >= 20;\nloop invariant y >= 20;\nloop invariant x >= 21;\nloop invariant y >= 21;\nloop invariant x >= 22;\nloop invariant y >= 22;\nloop invariant x >= 23;\nloop invariant y >= 23;\nloop invariant x >= 24;\nloop invariant y >= 24;\nloop invariant x >= 25;\nloop invariant y >= 25;\nloop invariant x >= 26;\nloop invariant y >= 26;\nloop invariant x >= 27;\nloop invariant y >= 27;\nloop invariant x >= 28;\nloop invariant y >= 28;\nloop invariant x >= 29;\nloop invariant y >= 29;\nloop invariant x >= 30;\nloop invariant y >= 30;\nloop invariant x >= 31;\nloop invariant y >= 31;\nloop invariant x >= 32;\nloop invariant y >= 32;\nloop invariant x >= 33;\nloop invariant y >= 33;\nloop invariant x >= 34;\nloop invariant y >= 34;\nloop invariant x >= 35;\nloop invariant y >= 35;\nloop invariant x >= 36;\nloop invariant y >= 36;\nloop invariant x >= 37;\nloop invariant y >= 37;\nloop invariant x >= 38;\nloop invariant y >= 38;\nloop invariant x >= 39;\nloop invariant y >= 39;\nloop invariant x >= 40;\nloop invariant y >= 40;\nloop invariant x >= 41;\nloop invariant y >= 41;\nloop invariant x >= 42;\nloop invariant y >= 42;\nloop invariant x >= 43;\nloop invariant y >= 43;\nloop invariant x >= 44;\nloop invariant y >= 44;\nloop invariant x >= 45;\nloop invariant y >= 45;\nloop invariant x >= 46;\nloop invariant y >= 46;\nloop invariant x >= 47;\nloop invariant y >= 47;\nloop invariant x >= 48;\nloop invariant y >= 48;\nloop invariant x >= 49;\nloop invariant y >= 49;\nloop invariant x >= 50;\nloop invariant y >= 50;\nloop invariant x >= 51;\nloop invariant y >= 51;\nloop invariant x >= 52;\nloop invariant y >= 52;\nloop invariant x >= 53;\nloop invariant y >= 53;\nloop invariant x >= 54;\nloop invariant y >= 54;\nloop invariant x >= 55;\nloop invariant y >= 55;\nloop invariant x >= 56;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: x >= y;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 1 <= y <= INT_MAX;\nloop invariant x >= y;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\nloop invariant x == INT_MAX ==> !unknown_bool();\nloop invariant x == INT_MIN ==> !unknown_bool();\nloop invariant y == INT_MAX ==> !unknown_bool();\nloop invariant y == INT_MIN ==> !unknown_bool();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= INT_MAX;\n\nloop invariant i3: x >= y;\nloop invariant i4: x >= (1 + (y - 1) * y / 2);\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= y * (y + 1) / 2 + y;\nloop invariant y <= x - 1;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 99999;\nloop invariant x <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: x >= y;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= 1;\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y; loop invariant x >= (1 + (y - 1) * y / 2); loop invariant x >= y; loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y);\nloop invariant i2: 0 <= y;\nloop invariant i3: x >= y;\nloop invariant i4: x >= y ==> y <= x;\nloop invariant i5: y >= 0 ==> x >= y;\nloop invariant i6: y >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: y <= x;\nloop invariant i9: y == y;\nloop invariant i10: y == x;\nloop invariant i11: x == y;\nloop invariant i12: x == x;\nloop invariant i13: x + y >= y;\nloop invariant i14: x + y >= x;\nloop invariant i15: 0 <= y <= 100000;\nloop invariant i16: x >= (1 + (y - 1) * y / 2);\nloop invariant i17: 0 <= y <= 1; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i18: 0 <= y; loop invariant x <= y;\nloop invariant i19: unknown_bool() ==> y <= 100000;\nloop invariant i20: unknown_bool() ==> x >= y + 100000;\nloop invariant i21: unknown_bool() ==> y >= 100000;\nloop invariant i22: y <= 100000;\nloop invariant i23: x >= 1;\nloop invariant i24: y >= 1;\nloop invariant i25: x >= 2;\nloop invariant i26: y >= 2;\nloop invariant i27: x >= 3;\nloop invariant i28: y >= 3;\nloop invariant i29: x >= 4;\nloop invariant i30: y >= 4;\nloop invariant i31: x >= 5;\nloop invariant i32: y >= 5;\nloop invariant i33: x >= 6;\nloop invariant i34: y >= 6;\nloop invariant i35: x >= 7;\nloop invariant i36: y >= 7;\nloop invariant i37: x >= 8;\nloop invariant i38: y >= 8;\nloop invariant i39: x >= 9;\nloop invariant i40: y >= 9;\nloop invariant i41: x >= 10;\nloop invariant i42: y >= 10;\nloop invariant i43: x >= 11;\nloop invariant i44: y >= 11;\nloop invariant i45: x >= 12;\nloop invariant i46: y >= 12;\nloop invariant i47: x >= 13;\nloop invariant i48: y >= 13;\nloop invariant i49: x >= 14;\nloop invariant i50: y >= 14;\nloop invariant i51: x >= 15;\nloop invariant i52: y >= 15;\nloop invariant i53: x >= 16;\nloop invariant i54: y >= 16;\nloop invariant i55: x >= 17;\nloop invariant i56: y >= 17;\nloop invariant i57: x >= 18;\nloop invariant i58: y >= 18;\nloop invariant i59: x >= 19;\nloop invariant i60: y >= 19;\nloop invariant i61: x >= 20;\nloop invariant i62: y >= 20;\nloop invariant i63: x >= 21;\nloop invariant i64: y >= 21;\nloop invariant i65: x >= 22;\nloop invariant i66: y >= 22;\nloop invariant i67: x >= 23;\nloop invariant i68: y >= 23;\nloop invariant i69: x >= 24;\nloop invariant i70: y >= 24;\nloop invariant i71: x >= 25;\nloop invariant i72: y >= 25;\nloop invariant i73: x >= 26;\nloop invariant i74: y >= 26;\nloop invariant i75: x >= 27;\nloop invariant i76: y >= 27;\nloop invariant i77: x >= 28;\nloop invariant i78: y >= 28;\nloop invariant i79: x >= 29;\nloop invariant i80: y >= 29;\nloop invariant i81: x >= 30;\nloop invariant i82: y >= 30;\nloop invariant i83: x >= 31;\nloop invariant i84: y >= 31;\nloop invariant i85: x >= 32;\nloop invariant i86: y >= 32;\nloop invariant i87: x >= 33;\nloop invariant i88: y >= 33;\nloop invariant i89: x >= 34;\nloop invariant i90: y >= 34;\nloop invariant i91: x >= 35;\nloop invariant i92: y >= 35;\nloop invariant i93: x >= 36;\nloop invariant i94: y >= 36;\nloop invariant i95: x >= 37;\nloop invariant i96: y >= 37;\nloop invariant i97: x >= 38;\nloop invariant i98: y >= 38;\nloop invariant i99: x >= 39;\nloop invariant i100: y >= 39;\nloop invariant i101: x >= 40;\nloop invariant i102: y >= 40;\nloop invariant i103: x >= 41;\nloop invariant i104: y >= 41;\nloop invariant i105: x >= 42;\nloop invariant i106: y >= 42;\nloop invariant i107: x >= 43;\nloop invariant i108: y >= 43;\nloop invariant i109: x >= 44;\nloop invariant i110: y >= 44;\nloop invariant i111: x >= 45;\nloop invariant i112: y >= 45;\nloop invariant i113: x >= 46;\nloop invariant i114: y >= 46;\nloop invariant i115: x >= 47;\nloop invariant i116: y >= 47;\nloop invariant i117: x >= 48;\nloop invariant i118: y >= 48;\nloop invariant i119: x >= 49;\nloop invariant i120: y >= 49;\nloop invariant i121: x >= 50;\nloop invariant i122: y >= 50;\nloop invariant i123: x >= 51;\nloop invariant i124: y >= 51;\nloop invariant i125: x >= 52;\nloop invariant i126: y >= 52;\nloop invariant i127: x >= 53;\nloop invariant i128: y >= 53;\nloop invariant i129: x >= 54;\nloop invariant i130: y >= 54;\nloop invariant i131: x >= 55;\nloop invariant i132: y >= 55;\nloop invariant i133: x >= 56;\nloop invariant i134: 0 <= x <= INT_MAX;\nloop invariant i135: 1 <= y <= INT_MAX;\nloop invariant i136: y == INT_MAX ==> !unknown_bool();\nloop invariant i137: y == INT_MIN ==> !unknown_bool();\nloop invariant i138: x == INT_MAX ==> !unknown_bool();\nloop invariant i139: x == INT_MIN ==> !unknown_bool();\nloop invariant i140: y <= 99999;\nloop invariant i141: x <= 100000;\nloop invariant i142: x >= y + 1;\nloop invariant i143: x <= y * (y + 1) / 2 + y;\nloop invariant i144: y <= x - 1;\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  /*@\nloop invariant i1: 0 <= y; loop invariant x >= (1 + (y - 1) * y / 2); loop invariant x >= y; loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y); loop invariant x >= y ==> (x == (1 + (y - 1) * y / 2)) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y) ==> (x >= y);\nloop invariant i2: 0 <= y;\nloop invariant i3: x >= y;\nloop invariant i4: x >= y ==> y <= x;\nloop invariant i5: y >= 0 ==> x >= y;\nloop invariant i6: y >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: y <= x;\nloop invariant i9: y == y;\n\n\nloop invariant i12: x == x;\nloop invariant i13: x + y >= y;\nloop invariant i14: x + y >= x;\nloop invariant i15: 0 <= y <= 100000;\nloop invariant i16: x >= (1 + (y - 1) * y / 2);\nloop invariant i17: 0 <= y <= 1; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i18: 0 <= y; loop invariant x <= y;\n\n\n\nloop invariant i22: y <= 100000;\nloop invariant i23: x >= 1;\nloop invariant i24: y >= 1;\nloop invariant i25: x >= 2;\nloop invariant i26: y >= 2;\nloop invariant i27: x >= 3;\nloop invariant i28: y >= 3;\nloop invariant i29: x >= 4;\nloop invariant i30: y >= 4;\nloop invariant i31: x >= 5;\nloop invariant i32: y >= 5;\nloop invariant i33: x >= 6;\nloop invariant i34: y >= 6;\nloop invariant i35: x >= 7;\nloop invariant i36: y >= 7;\nloop invariant i37: x >= 8;\nloop invariant i38: y >= 8;\nloop invariant i39: x >= 9;\nloop invariant i40: y >= 9;\nloop invariant i41: x >= 10;\nloop invariant i42: y >= 10;\nloop invariant i43: x >= 11;\nloop invariant i44: y >= 11;\nloop invariant i45: x >= 12;\nloop invariant i46: y >= 12;\nloop invariant i47: x >= 13;\nloop invariant i48: y >= 13;\nloop invariant i49: x >= 14;\nloop invariant i50: y >= 14;\nloop invariant i51: x >= 15;\nloop invariant i52: y >= 15;\nloop invariant i53: x >= 16;\nloop invariant i54: y >= 16;\nloop invariant i55: x >= 17;\nloop invariant i56: y >= 17;\nloop invariant i57: x >= 18;\nloop invariant i58: y >= 18;\nloop invariant i59: x >= 19;\nloop invariant i60: y >= 19;\nloop invariant i61: x >= 20;\nloop invariant i62: y >= 20;\nloop invariant i63: x >= 21;\nloop invariant i64: y >= 21;\nloop invariant i65: x >= 22;\nloop invariant i66: y >= 22;\nloop invariant i67: x >= 23;\nloop invariant i68: y >= 23;\nloop invariant i69: x >= 24;\nloop invariant i70: y >= 24;\nloop invariant i71: x >= 25;\nloop invariant i72: y >= 25;\nloop invariant i73: x >= 26;\nloop invariant i74: y >= 26;\nloop invariant i75: x >= 27;\nloop invariant i76: y >= 27;\nloop invariant i77: x >= 28;\nloop invariant i78: y >= 28;\nloop invariant i79: x >= 29;\nloop invariant i80: y >= 29;\nloop invariant i81: x >= 30;\nloop invariant i82: y >= 30;\nloop invariant i83: x >= 31;\nloop invariant i84: y >= 31;\nloop invariant i85: x >= 32;\nloop invariant i86: y >= 32;\nloop invariant i87: x >= 33;\nloop invariant i88: y >= 33;\nloop invariant i89: x >= 34;\nloop invariant i90: y >= 34;\nloop invariant i91: x >= 35;\nloop invariant i92: y >= 35;\nloop invariant i93: x >= 36;\nloop invariant i94: y >= 36;\nloop invariant i95: x >= 37;\nloop invariant i96: y >= 37;\nloop invariant i97: x >= 38;\nloop invariant i98: y >= 38;\nloop invariant i99: x >= 39;\nloop invariant i100: y >= 39;\nloop invariant i101: x >= 40;\nloop invariant i102: y >= 40;\nloop invariant i103: x >= 41;\nloop invariant i104: y >= 41;\nloop invariant i105: x >= 42;\nloop invariant i106: y >= 42;\nloop invariant i107: x >= 43;\nloop invariant i108: y >= 43;\nloop invariant i109: x >= 44;\nloop invariant i110: y >= 44;\nloop invariant i111: x >= 45;\nloop invariant i112: y >= 45;\nloop invariant i113: x >= 46;\nloop invariant i114: y >= 46;\nloop invariant i115: x >= 47;\nloop invariant i116: y >= 47;\nloop invariant i117: x >= 48;\nloop invariant i118: y >= 48;\nloop invariant i119: x >= 49;\nloop invariant i120: y >= 49;\nloop invariant i121: x >= 50;\nloop invariant i122: y >= 50;\nloop invariant i123: x >= 51;\nloop invariant i124: y >= 51;\nloop invariant i125: x >= 52;\nloop invariant i126: y >= 52;\nloop invariant i127: x >= 53;\nloop invariant i128: y >= 53;\nloop invariant i129: x >= 54;\nloop invariant i130: y >= 54;\nloop invariant i131: x >= 55;\nloop invariant i132: y >= 55;\nloop invariant i133: x >= 56;\nloop invariant i134: 0 <= x <= INT_MAX;\nloop invariant i135: 1 <= y <= INT_MAX;\n\n\n\n\nloop invariant i140: y <= 99999;\nloop invariant i141: x <= 100000;\nloop invariant i142: x >= y + 1;\nloop invariant i143: x <= y * (y + 1) / 2 + y;\nloop invariant i144: y <= x - 1;\n*/\nwhile (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 143,
        "success_count": 124,
        "failure_count": 19,
        "success_rate": 0.8671328671328671
    }
}