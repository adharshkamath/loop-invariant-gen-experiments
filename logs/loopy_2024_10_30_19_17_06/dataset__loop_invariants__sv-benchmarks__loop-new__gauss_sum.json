{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    for(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == (i * (i + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sum <= (n * (n + 1)) / 2;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= n <= 1000;\nloop invariant 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant 1 <= n <= 1000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == i*(i-1)/2;\nloop invariant sum + i*(i+1)/2 == n*(n+1)/2;\nloop invariant sum >= 0;\nloop invariant sum <= n*(n+1)/2;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sum + i*(i+1)/2 == sum + i*(i+1)/2;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 1 <= i <= n;\nloop invariant sum >= i*(i-1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 1 <= i <= n;\nloop invariant sum >= i - 1;\nloop invariant sum <= i * (i + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 1 <= i <= n;\nloop invariant 2*sum == i*(i+1)/2;\nloop invariant 2*sum == (i-1)*i/2;\nloop invariant 2*sum == n*(n+1)/2;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sum >= 0;\nloop invariant i*(i - 1)/2 <= sum <= i*(i + 1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= (n * (n + 1) / 2);\nloop invariant (1 <= i && i <= n);\nloop invariant (sum == ((i - 1) * i / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 0 <= i <= n;\nloop invariant n >= 1 && n <= 1000;\nloop invariant (sum + i) == sum + i ==> 0 <= sum + i <= n*(n+1)/2;\nloop invariant i == n ==> sum + i == sum + n == n*(n+1)/2;\nloop invariant i == n ==> sum == n*(n+1)/2;\nloop invariant i == n ==> (sum + i) == n*(n+1)/2;\nloop invariant i == n ==> sum == n*(n+1)/2 - i;\nloop invariant i == n ==> sum == n*(n+1)/2 - (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - n + 1;\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + n - 1;\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == (i * (i - 1)) / 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 1 <= i <= n;\nloop invariant sum == i*(i+1)/2;\nloop invariant i*(i+1)/2 <= n*(n+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= (i * (i - 1) / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == (i * (i + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= sum <= (n * (n + 1)) / 2;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= n <= 1000;\nloop invariant 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant 1 <= n <= 1000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\nloop invariant i3: 0 <= n <= 1000;\n\nloop invariant i5: 1 <= n <= 1000;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == i*(i-1)/2;\nloop invariant sum + i*(i+1)/2 == n*(n+1)/2;\nloop invariant sum >= 0;\nloop invariant sum <= n*(n+1)/2;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sum + i*(i+1)/2 == sum + i*(i+1)/2;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant sum + i*(i+1)/2 >= 0;\nloop invariant sum + i*(i+1)/2 <= n*(n+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: sum == i*(i-1)/2;\n\nloop invariant i4: sum >= 0;\nloop invariant i5: sum <= n*(n+1)/2;\nloop invariant i6: i >= 1;\n\nloop invariant i8: sum + i*(i+1)/2 == sum + i*(i+1)/2;\n\nloop invariant i10: sum + i*(i+1)/2 >= 0;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 1 <= i <= n;\nloop invariant sum >= i*(i-1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\nloop invariant i3: sum >= i*(i-1)/2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 1 <= i <= n;\nloop invariant sum >= i - 1;\nloop invariant sum <= i * (i + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 0 <= n <= 1000;\n\n\nloop invariant i4: sum <= i * (i + 1) / 2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 1 <= i <= n;\nloop invariant 2*sum == i*(i+1)/2;\nloop invariant 2*sum == (i-1)*i/2;\nloop invariant 2*sum == n*(n+1)/2;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n\n\n\n\n\nloop invariant i8: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1;\nloop invariant i9: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1;\nloop invariant i10: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i11: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i12: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i13: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i14: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i15: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i16: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i17: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i18: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i19: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sum >= 0;\nloop invariant i*(i - 1)/2 <= sum <= i*(i + 1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 0 <= i <= n + 1;\nloop invariant i2: sum >= 0;\nloop invariant i3: i*(i - 1)/2 <= sum <= i*(i + 1)/2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= (n * (n + 1) / 2);\nloop invariant (1 <= i && i <= n);\nloop invariant (sum == ((i - 1) * i / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\nloop invariant (i <= n);\nloop invariant (sum <= (i * (i + 1) / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\nloop invariant i3: (sum == ((i - 1) * i / 2));\n\nloop invariant i5: (sum <= (i * (i + 1) / 2));\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 0 <= i <= n;\nloop invariant n >= 1 && n <= 1000;\nloop invariant (sum + i) == sum + i ==> 0 <= sum + i <= n*(n+1)/2;\nloop invariant i == n ==> sum + i == sum + n == n*(n+1)/2;\nloop invariant i == n ==> sum == n*(n+1)/2;\nloop invariant i == n ==> (sum + i) == n*(n+1)/2;\nloop invariant i == n ==> sum == n*(n+1)/2 - i;\nloop invariant i == n ==> sum == n*(n+1)/2 - (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - n + 1;\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + n - 1;\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\nloop invariant i3: n >= 1 && n <= 1000;\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == (i * (i - 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: sum == (i * (i - 1)) / 2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 1 <= i <= n;\nloop invariant sum == i*(i+1)/2;\nloop invariant i*(i+1)/2 <= n*(n+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum >= (i * (i - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: sum == i * (i - 1) / 2;\nloop invariant i3: sum >= 0;\nloop invariant i4: sum <= n * (n + 1) / 2;\nloop invariant i5: sum >= (i * (i - 1) / 2);\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 72: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: sum == (i * (i + 1)) / 2;\nloop invariant i3: 1 <= sum <= (n * (n + 1)) / 2;\nloop invariant i4: 0 <= n <= 1000;\nloop invariant i5: 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant i6: 1 <= n <= 1000;\nloop invariant i7: sum == i*(i-1)/2;\nloop invariant i8: sum + i*(i+1)/2 == n*(n+1)/2;\nloop invariant i9: sum >= 0;\nloop invariant i10: sum <= n*(n+1)/2;\nloop invariant i11: i >= 1;\nloop invariant i12: i <= n;\nloop invariant i13: sum + i*(i+1)/2 == sum + i*(i+1)/2;\nloop invariant i14: sum + i*(i+1)/2 <= n*(n+1)/2;\nloop invariant i15: sum + i*(i+1)/2 >= 0;\nloop invariant i16: 0 <= sum <= n*(n+1)/2;\nloop invariant i17: sum >= i*(i-1)/2;\nloop invariant i18: sum >= i - 1;\nloop invariant i19: sum <= i * (i + 1) / 2;\nloop invariant i20: 2*sum == i*(i+1)/2;\nloop invariant i21: 2*sum == (i-1)*i/2;\nloop invariant i22: 2*sum == n*(n+1)/2;\nloop invariant i23: 2*sum == n*(n+1)/2 ==> i == n+1;\nloop invariant i24: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i25: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1;\nloop invariant i26: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1;\nloop invariant i27: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i28: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i29: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i30: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i31: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i32: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i33: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i34: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i35: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i36: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i37: 0 <= i <= n + 1;\nloop invariant i38: i*(i - 1)/2 <= sum <= i*(i + 1)/2;\nloop invariant i39: 0 <= sum <= (n * (n + 1) / 2);\nloop invariant i40: (1 <= i && i <= n);\nloop invariant i41: (sum == ((i - 1) * i / 2));\nloop invariant i42: (i <= n);\nloop invariant i43: (sum <= (i * (i + 1) / 2));\nloop invariant i44: 0 <= i <= n;\nloop invariant i45: n >= 1 && n <= 1000;\nloop invariant i46: (sum + i) == sum + i ==> 0 <= sum + i <= n*(n+1)/2;\nloop invariant i47: i == n ==> sum + i == sum + n == n*(n+1)/2;\nloop invariant i48: i == n ==> sum == n*(n+1)/2;\nloop invariant i49: i == n ==> (sum + i) == n*(n+1)/2;\nloop invariant i50: i == n ==> sum == n*(n+1)/2 - i;\nloop invariant i51: i == n ==> sum == n*(n+1)/2 - (n - 1);\nloop invariant i52: i == n ==> sum == (n*(n+1)/2) - (n - 1);\nloop invariant i53: i == n ==> sum == (n*(n+1)/2) - n + 1;\nloop invariant i54: i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2);\nloop invariant i55: i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + n - 1;\nloop invariant i56: i == n ==> sum == (n*(n+1)/2) - (n*(n-1)/2) + (n - 1);\nloop invariant i57: sum == (i * (i - 1)) / 2;\nloop invariant i58: i1;\nloop invariant i59: i2;\nloop invariant i60: i3;\nloop invariant i61: i4;\nloop invariant i62: i5;\nloop invariant i63: i6;\nloop invariant i64: i7;\nloop invariant i65: i8;\nloop invariant i66: i9;\nloop invariant i67: i10;\nloop invariant i68: i11;\nloop invariant i69: i12;\nloop invariant i70: i13;\nloop invariant i71: i14;\nloop invariant i72: i15;\nloop invariant i73: i16;\nloop invariant i74: i17;\nloop invariant i75: i18;\nloop invariant i76: i19;\nloop invariant i77: i20;\nloop invariant i78: i21;\nloop invariant i79: i22;\nloop invariant i80: i23;\nloop invariant i81: i24;\nloop invariant i82: i25;\nloop invariant i83: i26;\nloop invariant i84: i27;\nloop invariant i85: i28;\nloop invariant i86: i29;\nloop invariant i87: i30;\nloop invariant i88: i31;\nloop invariant i89: i32;\nloop invariant i90: i33;\nloop invariant i91: i34;\nloop invariant i92: i35;\nloop invariant i93: i36;\nloop invariant i94: i37;\nloop invariant i95: i38;\nloop invariant i96: i39;\nloop invariant i97: i40;\nloop invariant i98: i41;\nloop invariant i99: i42;\nloop invariant i100: i43;\nloop invariant i101: i44;\nloop invariant i102: i45;\nloop invariant i103: i46;\nloop invariant i104: i47;\nloop invariant i105: i48;\nloop invariant i106: i49;\nloop invariant i107: i50;\nloop invariant i108: i51;\nloop invariant i109: i52;\nloop invariant i110: i53;\nloop invariant i111: i54;\nloop invariant i112: i55;\nloop invariant i113: i56;\nloop invariant i114: i57;\nloop invariant i115: i58;\nloop invariant i116: i59;\nloop invariant i117: i60;\nloop invariant i118: i61;\nloop invariant i119: i62;\nloop invariant i120: i63;\nloop invariant i121: i64;\nloop invariant i122: i65;\nloop invariant i123: i66;\nloop invariant i124: i67;\nloop invariant i125: i68;\nloop invariant i126: i69;\nloop invariant i127: i70;\nloop invariant i128: i71;\nloop invariant i129: i72;\nloop invariant i130: i73;\nloop invariant i131: i74;\nloop invariant i132: i75;\nloop invariant i133: i76;\nloop invariant i134: i77;\nloop invariant i135: i78;\nloop invariant i136: i79;\nloop invariant i137: i80;\nloop invariant i138: i81;\nloop invariant i139: i82;\nloop invariant i140: i83;\nloop invariant i141: i84;\nloop invariant i142: i85;\nloop invariant i143: i86;\nloop invariant i144: i87;\nloop invariant i145: i88;\nloop invariant i146: i89;\nloop invariant i147: i90;\nloop invariant i148: i91;\nloop invariant i149: i92;\nloop invariant i150: i93;\nloop invariant i151: i94;\nloop invariant i152: i95;\nloop invariant i153: i96;\nloop invariant i154: i97;\nloop invariant i155: i98;\nloop invariant i156: i99;\nloop invariant i157: i100;\nloop invariant i158: i101;\nloop invariant i159: i102;\nloop invariant i160: i103;\nloop invariant i161: i104;\nloop invariant i162: i105;\nloop invariant i163: i106;\nloop invariant i164: i107;\nloop invariant i165: i108;\nloop invariant i166: i109;\nloop invariant i167: i110;\nloop invariant i168: i111;\nloop invariant i169: i112;\nloop invariant i170: i113;\nloop invariant i171: i114;\nloop invariant i172: i115;\nloop invariant i173: i116;\nloop invariant i174: i117;\nloop invariant i175: i118;\nloop invariant i176: i119;\nloop invariant i177: i120;\nloop invariant i178: i121;\nloop invariant i179: i122;\nloop invariant i180: i123;\nloop invariant i181: i124;\nloop invariant i182: i125;\nloop invariant i183: i126;\nloop invariant i184: i127;\nloop invariant i185: i128;\nloop invariant i186: i129;\nloop invariant i187: i130;\nloop invariant i188: i131;\nloop invariant i189: i132;\nloop invariant i190: i133;\nloop invariant i191: i134;\nloop invariant i192: i135;\nloop invariant i193: i136;\nloop invariant i194: i137;\nloop invariant i195: i138;\nloop invariant i196: i139;\nloop invariant i197: i140;\nloop invariant i198: i141;\nloop invariant i199: i142;\nloop invariant i200: i143;\nloop invariant i201: i144;\nloop invariant i202: i145;\nloop invariant i203: i146;\nloop invariant i204: i147;\nloop invariant i205: i148;\nloop invariant i206: i149;\nloop invariant i207: i150;\nloop invariant i208: i151;\nloop invariant i209: i152;\nloop invariant i210: i153;\nloop invariant i211: i154;\nloop invariant i212: i155;\nloop invariant i213: i156;\nloop invariant i214: i157;\nloop invariant i215: i158;\nloop invariant i216: sum == i*(i+1)/2;\nloop invariant i217: i*(i+1)/2 <= n*(n+1)/2;\nloop invariant i218: sum == i * (i - 1) / 2;\nloop invariant i219: sum <= n * (n + 1) / 2;\nloop invariant i220: sum >= (i * (i - 1) / 2);\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 174,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n\nloop invariant i4: 0 <= n <= 1000;\nloop invariant i5: 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant i6: 1 <= n <= 1000;\nloop invariant i7: sum == i*(i-1)/2;\n\nloop invariant i9: sum >= 0;\nloop invariant i10: sum <= n*(n+1)/2;\nloop invariant i11: i >= 1;\n\nloop invariant i13: sum + i*(i+1)/2 == sum + i*(i+1)/2;\n\nloop invariant i15: sum + i*(i+1)/2 >= 0;\nloop invariant i16: 0 <= sum <= n*(n+1)/2;\nloop invariant i17: sum >= i*(i-1)/2;\nloop invariant i18: sum >= i - 1;\nloop invariant i19: sum <= i * (i + 1) / 2;\n\n\n\n\nloop invariant i24: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i25: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1;\nloop invariant i26: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1;\nloop invariant i27: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i28: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i29: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i30: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i31: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i32: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i33: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i34: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i35: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i36: 2*sum == n*(n+1)/2 ==> i == n+1 ==> sum == n*(n+1)/2 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1;\nloop invariant i37: 0 <= i <= n + 1;\nloop invariant i38: i*(i - 1)/2 <= sum <= i*(i + 1)/2;\nloop invariant i39: 0 <= sum <= (n * (n + 1) / 2);\n\nloop invariant i41: (sum == ((i - 1) * i / 2));\n\nloop invariant i43: (sum <= (i * (i + 1) / 2));\n\nloop invariant i45: n >= 1 && n <= 1000;\n\nloop invariant i47: i == n ==> sum + i == sum + n == n*(n+1)/2;\n\nloop invariant i49: i == n ==> (sum + i) == n*(n+1)/2;\nloop invariant i50: i == n ==> sum == n*(n+1)/2 - i;\n\n\n\n\n\n\nloop invariant i57: sum == (i * (i - 1)) / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i218: sum == i * (i - 1) / 2;\nloop invariant i219: sum <= n * (n + 1) / 2;\nloop invariant i220: sum >= (i * (i - 1) / 2);\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c"
        ],
        "skipped": [],
        "total": 121,
        "success_count": 103,
        "failure_count": 18,
        "success_rate": 0.8512396694214877
    }
}