{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  while (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i <= j + 1;\nloop invariant k >= 1;\nloop invariant j >= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= i + j; loop invariant i <= j; loop invariant k > i; loop invariant k > j; loop invariant k >= j - i; loop invariant k <= j + i; loop invariant k >= i - j; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i is non-negative;\nloop invariant k is non-negative;\nloop invariant i >= j - k;\nloop invariant i <= j;\nloop invariant k <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 0;\nloop invariant k >= j - i;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= j - i ==> i == j;\nloop invariant k >= j - i ==> k == j;\nloop invariant k >= j - i ==> i >= 0;\nloop invariant k >= j - i ==> j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 5;\nloop invariant i >= 0;\nloop invariant j > 0;\nloop invariant i < j;\nloop invariant k >= j - i;\nloop invariant k == i + j - 1;\nloop invariant k == i + j - 1 ==> i < j;\nloop invariant k == i + j - 1 ==> i >= 0;\nloop invariant k == i + j - 1 ==> j > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i >= 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> j > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i >= 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> j > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0 ==> i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 0;\nloop invariant k <= j - i + k;\nloop invariant i <= j;\nloop invariant k >= j - i + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 0 <= k <= 1 + (j - i) * (j - i + 1) / 2;\nloop invariant i + k >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 1;\nloop invariant k >= j - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < j;\nloop invariant k >= 1;\nloop invariant i+j==k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j; loop invariant 0 <= k <= k + 1; loop invariant k > j - i ==> k > j - i; loop invariant i < j ==> k > j - i; loop invariant i >= j ==> k > j - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 1 + (j - i) * (j - i + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < j;\nloop invariant k >= 0;\nloop invariant k >= (i + 1) - 1;\nloop invariant k >= (i + 1) - i;\nloop invariant k >= (i + 1) - (i - 1);\nloop invariant k >= (i + 1) - (i - 1) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9) - (i - 10);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i;\nloop invariant 0 < j;\nloop invariant k >= j - i;\nloop invariant k >= j - i ==> k > j - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < j;\nloop invariant 0 <= k <= j - i;\nloop invariant k = i + j - i;\nloop invariant k > j - i ==> k > 0;\nloop invariant k > j - i ==> k > j;\nloop invariant k > j - i ==> k > 0 && k > j;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i <= j + 1;\nloop invariant k >= 1;\nloop invariant j >= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\nloop invariant i1: i <= j + 1;\nloop invariant i2: k >= 1;\nloop invariant i3: j >= i;\n\n\nloop invariant i6: k >= 0;\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= i + j; loop invariant i <= j; loop invariant k > i; loop invariant k > j; loop invariant k >= j - i; loop invariant k <= j + i; loop invariant k >= i - j; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i is non-negative;\nloop invariant k is non-negative;\nloop invariant i >= j - k;\nloop invariant i <= j;\nloop invariant k <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\n\n\nloop invariant i4: i <= j;\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 0;\nloop invariant k >= j - i;\nloop invariant i <= j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= j - i ==> i == j;\nloop invariant k >= j - i ==> k == j;\nloop invariant k >= j - i ==> i >= 0;\nloop invariant k >= j - i ==> j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\nloop invariant i2: k >= 0;\n\nloop invariant i4: i <= j;\n\n\n\n\n\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 5;\nloop invariant i >= 0;\nloop invariant j > 0;\nloop invariant i < j;\nloop invariant k >= j - i;\nloop invariant k == i + j - 1;\nloop invariant k == i + j - 1 ==> i < j;\nloop invariant k == i + j - 1 ==> i >= 0;\nloop invariant k == i + j - 1 ==> j > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i >= 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> j > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i >= 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> j > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\nloop invariant k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0 ==> i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: k == i + j - 1 ==> j > 0;\n\nloop invariant i11: k == i + j - 1 ==> i < j && k > 0 ==> i < j;\n\nloop invariant i13: k == i + j - 1 ==> i < j && k > 0 ==> j > 0;\nloop invariant i14: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant i15: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\n\nloop invariant i17: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> j > 0;\nloop invariant i18: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant i19: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 0;\nloop invariant k <= j - i + k;\nloop invariant i <= j;\nloop invariant k >= j - i + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\nloop invariant i2: k >= 0;\nloop invariant i3: k <= j - i + k;\nloop invariant i4: i <= j;\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 0 <= k <= 1 + (j - i) * (j - i + 1) / 2;\nloop invariant i + k >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 1;\nloop invariant k >= j - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\nloop invariant i2: k >= 1;\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i < j;\nloop invariant k >= 1;\nloop invariant i+j==k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\nloop invariant i2: k >= 1;\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j; loop invariant 0 <= k <= k + 1; loop invariant k > j - i ==> k > j - i; loop invariant i < j ==> k > j - i; loop invariant i >= j ==> k > j - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 1 + (j - i) * (j - i + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\nloop invariant i2: k >= 1;\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i < j;\nloop invariant k >= 0;\nloop invariant k >= (i + 1) - 1;\nloop invariant k >= (i + 1) - i;\nloop invariant k >= (i + 1) - (i - 1);\nloop invariant k >= (i + 1) - (i - 1) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9);\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9) - 1;\nloop invariant k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9) - (i - 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\nloop invariant i2: k >= 0;\n\nloop invariant i4: k >= (i + 1) - i;\n\nloop invariant i6: k >= (i + 1) - (i - 1) - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i;\nloop invariant 0 < j;\nloop invariant k >= j - i;\nloop invariant k >= j - i ==> k > j - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i < j;\nloop invariant 0 <= k <= j - i;\nloop invariant k = i + j - i;\nloop invariant k > j - i ==> k > 0;\nloop invariant k > j - i ==> k > j;\nloop invariant k > j - i ==> k > 0 && k > j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\n\n\n\nloop invariant i4: k > j - i ==> k > 0;\n\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\nloop invariant i1: i <= j + 1;\nloop invariant i2: k >= 1;\nloop invariant i3: j >= i;\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\nloop invariant i6: k >= 0;\nloop invariant i7: 0 <= k <= i + j; loop invariant i <= j; loop invariant k > i; loop invariant k > j; loop invariant k >= j - i; loop invariant k <= j + i; loop invariant k >= i - j; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0; loop invariant k <= i + j; loop invariant k >= 0;\nloop invariant i8: i is non-negative;\nloop invariant i9: k is non-negative;\nloop invariant i10: i >= j - k;\nloop invariant i11: i <= j;\nloop invariant i12: k <= j;\nloop invariant i13: 0 <= i <= j;\nloop invariant i14: k >= j - i;\nloop invariant i15: k >= j - i ==> i == j;\nloop invariant i16: k >= j - i ==> k == j;\nloop invariant i17: k >= j - i ==> i >= 0;\nloop invariant i18: k >= j - i ==> j >= 0;\nloop invariant i19: 0 <= k <= 5;\nloop invariant i20: j > 0;\nloop invariant i21: i < j;\nloop invariant i22: k == i + j - 1;\nloop invariant i23: k == i + j - 1 ==> i < j;\nloop invariant i24: k == i + j - 1 ==> i >= 0;\nloop invariant i25: k == i + j - 1 ==> j > 0;\nloop invariant i26: k == i + j - 1 ==> i < j && k > 0;\nloop invariant i27: k == i + j - 1 ==> i < j && k > 0 ==> i < j;\nloop invariant i28: k == i + j - 1 ==> i < j && k > 0 ==> i >= 0;\nloop invariant i29: k == i + j - 1 ==> i < j && k > 0 ==> j > 0;\nloop invariant i30: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant i31: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\nloop invariant i32: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i >= 0;\nloop invariant i33: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> j > 0;\nloop invariant i34: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant i35: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\nloop invariant i36: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0 ==> i >= 0;\nloop invariant i37: k <= j - i + k;\nloop invariant i38: k >= j - i + 1;\nloop invariant i39: 0 <= k <= 1 + (j - i) * (j - i + 1) / 2;\nloop invariant i40: i + k >= j;\nloop invariant i41: 0 <= i < j;\nloop invariant i42: i+j==k;\nloop invariant i43: 0 <= i <= j; loop invariant 0 <= k <= k + 1; loop invariant k > j - i ==> k > j - i; loop invariant i < j ==> k > j - i; loop invariant i >= j ==> k > j - i;\nloop invariant i44: k >= 1 + (j - i) * (j - i + 1) / 2;\nloop invariant i45: k >= (i + 1) - 1;\nloop invariant i46: k >= (i + 1) - i;\nloop invariant i47: k >= (i + 1) - (i - 1);\nloop invariant i48: k >= (i + 1) - (i - 1) - 1;\nloop invariant i49: k >= (i + 1) - (i - 1) - (i - 2);\nloop invariant i50: k >= (i + 1) - (i - 1) - (i - 2) - 1;\nloop invariant i51: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3);\nloop invariant i52: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - 1;\nloop invariant i53: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4);\nloop invariant i54: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - 1;\nloop invariant i55: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5);\nloop invariant i56: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - 1;\nloop invariant i57: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6);\nloop invariant i58: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - 1;\nloop invariant i59: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7);\nloop invariant i60: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - 1;\nloop invariant i61: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8);\nloop invariant i62: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - 1;\nloop invariant i63: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9);\nloop invariant i64: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9) - 1;\nloop invariant i65: k >= (i + 1) - (i - 1) - (i - 2) - (i - 3) - (i - 4) - (i - 5) - (i - 6) - (i - 7) - (i - 8) - (i - 9) - (i - 10);\nloop invariant i66: 1 <= i;\nloop invariant i67: 0 < j;\nloop invariant i68: k >= j - i ==> k > j - i;\nloop invariant i69: 0 <= k <= j - i;\nloop invariant i70: k = i + j - i;\nloop invariant i71: k > j - i ==> k > 0;\nloop invariant i72: k > j - i ==> k > j;\nloop invariant i73: k > j - i ==> k > 0 && k > j;\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  /*@\nloop invariant i1: i <= j + 1;\nloop invariant i2: k >= 1;\nloop invariant i3: j >= i;\n\n\nloop invariant i6: k >= 0;\n\n\n\n\nloop invariant i11: i <= j;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: k == i + j - 1 ==> j > 0;\n\nloop invariant i27: k == i + j - 1 ==> i < j && k > 0 ==> i < j;\n\nloop invariant i29: k == i + j - 1 ==> i < j && k > 0 ==> j > 0;\nloop invariant i30: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant i31: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\n\nloop invariant i33: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> j > 0;\nloop invariant i34: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0;\nloop invariant i35: k == i + j - 1 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j && k > 0 ==> i < j;\n\nloop invariant i37: k <= j - i + k;\n\n\n\n\n\n\n\n\nloop invariant i46: k >= (i + 1) - i;\n\nloop invariant i48: k >= (i + 1) - (i - 1) - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i71: k > j - i ==> k > 0;\n\n\n*/\nwhile (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c"
        ],
        "skipped": [],
        "total": 166,
        "success_count": 146,
        "failure_count": 20,
        "success_rate": 0.8795180722891566
    }
}