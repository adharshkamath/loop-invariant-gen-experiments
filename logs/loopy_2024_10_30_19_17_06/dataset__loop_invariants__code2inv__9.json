{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/9.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant x == 2 * y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 2 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant (y == 0) ==> (x == 4);\nloop invariant (y == 2) ==> (x == 4);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant x % 2 == 0 ==> 0 <= x <= 2;\nloop invariant y % 2 == 0 ==> 0 <= y <= 2;\nloop invariant x % 2 != 0 ==> 1 <= x <= 2;\nloop invariant y % 2 != 0 ==> 1 <= y <= 2;\nloop invariant x == 4 ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x == (2 * y);\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x <= 4;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= ( 2 * (y - 2) + 2 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant (   1 <= x && x <= 4   );\nloop invariant (   0 <= y && y <= 4   );\nloop invariant (   x >= 0 && x <= 2 && y <= 2 && y >= 0 ==> (x + 2 == 4) == (y + 2 == 0)   );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant (x - y) % 2 == 0 ==> y <= x;\nloop invariant x >= 2 * y;\nloop invariant (x % 2 == 0) ==> (y % 2 == 0);\nloop invariant (x % 2 == 1) ==> (y % 2 == 1);\nloop invariant (x == 4) ==> (y != 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 2) ==> (y == 0);\nloop invariant (x == 2) ==> (y == 2);\nloop invariant (x == 4) ==> (y == 0) ==> (y == 1) ==> (y == 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant x <= y;\nloop invariant x == 4 ==> y != 0;\nloop invariant y == 4 ==> x != 4;\nloop invariant x + 2 * y == 4 ==> y != 0;\nloop invariant x + 2 * y == 8 ==> x != 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant x == 4 ==> y != 0;\nloop invariant x == 4 ==> y >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x == 4) ==> (y != 0);\nloop invariant (x >= 0) ==> (y >= 0);\nloop invariant (x <= 2) ==> (y <= 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant x == 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant (y == 0) ==> (x == 4);\nloop invariant (y == 2) ==> (x == 4);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y == 2) ==> (x == 2);\nloop invariant (y == 0) ==> (x == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant x % 2 == 0 ==> 0 <= x <= 2;\nloop invariant y % 2 == 0 ==> 0 <= y <= 2;\nloop invariant x % 2 != 0 ==> 1 <= x <= 2;\nloop invariant y % 2 != 0 ==> 1 <= y <= 2;\nloop invariant x == 4 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x == (2 * y);\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: x >= 0;\n\nloop invariant i6: y >= 0;\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x <= 4;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= ( 2 * (y - 2) + 2 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant (   1 <= x && x <= 4   );\nloop invariant (   0 <= y && y <= 4   );\nloop invariant (   x >= 0 && x <= 2 && y <= 2 && y >= 0 ==> (x + 2 == 4) == (y + 2 == 0)   );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant (x - y) % 2 == 0 ==> y <= x;\nloop invariant x >= 2 * y;\nloop invariant (x % 2 == 0) ==> (y % 2 == 0);\nloop invariant (x % 2 == 1) ==> (y % 2 == 1);\nloop invariant (x == 4) ==> (y != 0);\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 2) ==> (y == 0);\nloop invariant (x == 2) ==> (y == 2);\nloop invariant (x == 4) ==> (y == 0) ==> (y == 1) ==> (y == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: (x == 4) ==> (y == 0) ==> (y == 1) ==> (y == 2);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x + 2 * y >= 0;\nloop invariant x + 2 * y <= 8;\nloop invariant x <= y;\nloop invariant x == 4 ==> y != 0;\nloop invariant y == 4 ==> x != 4;\nloop invariant x + 2 * y == 4 ==> y != 0;\nloop invariant x + 2 * y == 8 ==> x != 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\nloop invariant x + 2 * y == 0 ==> y == 0;\nloop invariant x + 2 * y == 2 ==> y == 1;\nloop invariant x + 2 * y == 4 ==> y == 2;\nloop invariant x + 2 * y == 6 ==> y == 3;\nloop invariant x + 2 * y == 8 ==> y == 4;\nloop invariant x + 2 * y == 0 ==> x == 0;\nloop invariant x + 2 * y == 2 ==> x == 0;\nloop invariant x + 2 * y == 4 ==> x == 0;\nloop invariant x + 2 * y == 6 ==> x == 0;\nloop invariant x + 2 * y == 8 ==> x == 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\nloop invariant i7: x + 2 * y >= 0;\n\n\nloop invariant i10: x == 4 ==> y != 0;\n\nloop invariant i12: x + 2 * y == 4 ==> y != 0;\n\nloop invariant i14: x + 2 * y == 0 ==> y == 0;\n\n\n\n\nloop invariant i19: x + 2 * y == 0 ==> x == 0;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant x == 4 ==> y != 0;\nloop invariant x == 4 ==> y >= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x == 4) ==> (y != 0);\nloop invariant (x >= 0) ==> (y >= 0);\nloop invariant (x <= 2) ==> (y <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant x == 2 * y is preserved but not established.\nloop invariant 1 <= x <= 2 is preserved but not established.\nloop invariant x >= 2 * y is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant (y == 0) ==> (x == 4) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x == 4) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x == 0) is partially proven to be inductive.\nloop invariant (y == 2) ==> (x == 2) is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> 0 <= x <= 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> 0 <= y <= 2 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> 1 <= x <= 2 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> 1 <= y <= 2 is partially proven to be inductive.\nloop invariant x == 4 ==> y != 0 is partially proven to be inductive.\nloop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 0 <= y <= 4 is partially proven to be inductive.\nloop invariant x == (2 * y) is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 4 is partially proven to be inductive.\nloop invariant x >= ( 2 * (y - 2) + 2 ) is partially proven to be inductive.\nloop invariant x <= y is preserved but not established.\nloop invariant (   1 <= x && x <= 4   ) is partially proven to be inductive.\nloop invariant (   0 <= y && y <= 4   ) is partially proven to be inductive.\nloop invariant (   x >= 0 && x <= 2 && y <= 2 && y >= 0 ==> (x + 2 == 4) == (y + 2 == 0)   ) is partially proven to be inductive.\nloop invariant (x - y) % 2 == 0 ==> y <= x is partially proven to be inductive.\nloop invariant (x % 2 == 0) ==> (y % 2 == 0) is partially proven to be inductive.\nloop invariant (x % 2 == 1) ==> (y % 2 == 1) is partially proven to be inductive.\nloop invariant (x == 4) ==> (y != 0) is partially proven to be inductive.\nloop invariant (x == 0) ==> (y == 0) is partially proven to be inductive.\nloop invariant (x == 2) ==> (y == 0) is partially proven to be inductive.\nloop invariant (x == 2) ==> (y == 2) is partially proven to be inductive.\nloop invariant (x == 4) ==> (y == 0) ==> (y == 1) ==> (y == 2) is partially proven to be inductive.\nloop invariant x <= 2 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant x + 2 * y >= 0 is partially proven to be inductive.\nloop invariant x + 2 * y <= 8 is partially proven to be inductive.\nloop invariant y == 4 ==> x != 4 is partially proven to be inductive.\nloop invariant x + 2 * y == 4 ==> y != 0 is partially proven to be inductive.\nloop invariant x + 2 * y == 8 ==> x != 4 is partially proven to be inductive.\nloop invariant x + 2 * y == 0 ==> y == 0 is partially proven to be inductive.\nloop invariant x + 2 * y == 2 ==> y == 1 is partially proven to be inductive.\nloop invariant x + 2 * y == 4 ==> y == 2 is partially proven to be inductive.\nloop invariant x + 2 * y == 6 ==> y == 3 is partially proven to be inductive.\nloop invariant x + 2 * y == 8 ==> y == 4 is partially proven to be inductive.\nloop invariant x + 2 * y == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x + 2 * y == 2 ==> x == 0 is partially proven to be inductive.\nloop invariant x + 2 * y == 4 ==> x == 0 is partially proven to be inductive.\nloop invariant x + 2 * y == 6 ==> x == 0 is partially proven to be inductive.\nloop invariant x + 2 * y == 8 ==> x == 4 is partially proven to be inductive.\nloop invariant x == 4 ==> y >= 2 is partially proven to be inductive.\nloop invariant (x >= 0) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (x <= 2) ==> (y <= 2) is partially proven to be inductive.\nAssertion y != 0: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= y <= 2;\nloop invariant i2: 0 <= x <= 2;\nloop invariant i3: x == 2 * y;\nloop invariant i4: 1 <= x <= 2;\nloop invariant i5: x >= 2 * y;\nloop invariant i6: x >= y;\nloop invariant i7: x >= 0;\nloop invariant i8: x <= 4;\nloop invariant i9: (y == 0) ==> (x == 4);\nloop invariant i10: (y == 2) ==> (x == 4);\nloop invariant i11: (y == 0) ==> (x == 0);\nloop invariant i12: (y == 2) ==> (x == 2);\nloop invariant i13: x % 2 == 0 ==> 0 <= x <= 2;\nloop invariant i14: y % 2 == 0 ==> 0 <= y <= 2;\nloop invariant i15: x % 2 != 0 ==> 1 <= x <= 2;\nloop invariant i16: y % 2 != 0 ==> 1 <= y <= 2;\nloop invariant i17: x == 4 ==> y != 0;\nloop invariant i18: 0 <= x <= 4;\nloop invariant i19: 0 <= y <= 4;\nloop invariant i20: x == (2 * y);\nloop invariant i21: y >= 0;\nloop invariant i22: y <= 4;\nloop invariant i23: x >= ( 2 * (y - 2) + 2 );\nloop invariant i24: x <= y;\nloop invariant i25: (   1 <= x && x <= 4   );\nloop invariant i26: (   0 <= y && y <= 4   );\nloop invariant i27: (   x >= 0 && x <= 2 && y <= 2 && y >= 0 ==> (x + 2 == 4) == (y + 2 == 0)   );\nloop invariant i28: (x - y) % 2 == 0 ==> y <= x;\nloop invariant i29: (x % 2 == 0) ==> (y % 2 == 0);\nloop invariant i30: (x % 2 == 1) ==> (y % 2 == 1);\nloop invariant i31: (x == 4) ==> (y != 0);\nloop invariant i32: (x == 0) ==> (y == 0);\nloop invariant i33: (x == 2) ==> (y == 0);\nloop invariant i34: (x == 2) ==> (y == 2);\nloop invariant i35: (x == 4) ==> (y == 0) ==> (y == 1) ==> (y == 2);\nloop invariant i36: x <= 2;\nloop invariant i37: y <= 2;\nloop invariant i38: x + 2 * y >= 0;\nloop invariant i39: x + 2 * y <= 8;\nloop invariant i40: y == 4 ==> x != 4;\nloop invariant i41: x + 2 * y == 4 ==> y != 0;\nloop invariant i42: x + 2 * y == 8 ==> x != 4;\nloop invariant i43: x + 2 * y == 0 ==> y == 0;\nloop invariant i44: x + 2 * y == 2 ==> y == 1;\nloop invariant i45: x + 2 * y == 4 ==> y == 2;\nloop invariant i46: x + 2 * y == 6 ==> y == 3;\nloop invariant i47: x + 2 * y == 8 ==> y == 4;\nloop invariant i48: x + 2 * y == 0 ==> x == 0;\nloop invariant i49: x + 2 * y == 2 ==> x == 0;\nloop invariant i50: x + 2 * y == 4 ==> x == 0;\nloop invariant i51: x + 2 * y == 6 ==> x == 0;\nloop invariant i52: x + 2 * y == 8 ==> x == 4;\nloop invariant i53: x == 4 ==> y >= 2;\nloop invariant i54: (x >= 0) ==> (y >= 0);\nloop invariant i55: (x <= 2) ==> (y <= 2);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i17: x == 4 ==> y != 0;\n\n\n\nloop invariant i21: y >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i31: (x == 4) ==> (y != 0);\n\n\n\nloop invariant i35: (x == 4) ==> (y == 0) ==> (y == 1) ==> (y == 2);\n\n\nloop invariant i38: x + 2 * y >= 0;\n\n\nloop invariant i41: x + 2 * y == 4 ==> y != 0;\n\nloop invariant i43: x + 2 * y == 0 ==> y == 0;\n\n\n\n\nloop invariant i48: x + 2 * y == 0 ==> x == 0;\n\n\n\n\nloop invariant i53: x == 4 ==> y >= 2;\nloop invariant i54: (x >= 0) ==> (y >= 0);\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 75,
        "success_count": 63,
        "failure_count": 12,
        "success_rate": 0.84
    }
}