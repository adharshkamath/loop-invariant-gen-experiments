{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/98.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (i * y);\nloop invariant i == j ==> y == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= x;\nloop invariant y >= 2;\nloop invariant j >= 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2*i;\nloop invariant j >= 2;\nloop invariant j <= 2*i + 2;\nloop invariant (i == j) ==> (y == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= x;\nloop invariant y != 1 ==> i != j;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j == 2 * i;\nloop invariant y == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j + y * i <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= x;\nloop invariant 1 <= j <= x * y;\nloop invariant y != 1 ==> (x <= y);\nloop invariant y != 1 ==> (j <= x * y);\nloop invariant y != 1 ==> (i <= j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (y * i);\nloop invariant y != 1 ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (i * y);\nloop invariant (i * y) == j;\nloop invariant (i != j) ==> (y != 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant j <= (2 * i);\nloop invariant (i == j) ==> (y == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i * y;\nloop invariant y > 0 || i == 0;\nloop invariant y == 1 ==> i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = (i * y);\nloop invariant y >= 1;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= 2 * x;\nloop invariant y == 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (i * y);\nloop invariant i == j ==> y == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= x;\nloop invariant y >= 2;\nloop invariant j >= 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: y >= 2;\nloop invariant i4: j >= 2 * i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2*i;\nloop invariant j >= 2;\nloop invariant j <= 2*i + 2;\nloop invariant (i == j) ==> (y == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= x;\nloop invariant y != 1 ==> i != j;\nloop invariant x >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i >= 0;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant i <= x;\nloop invariant j = y * i;\nloop invariant x >= i;\nloop invariant y != 1 ==> i != j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: y <= 100000;\nloop invariant i6: i >= 0;\nloop invariant i7: j >= 0;\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j == 2 * i;\nloop invariant y == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: j == 2 * i;\nloop invariant i3: y == 2;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\nloop invariant 0 <= i <= x;\nloop invariant j == (y * i);\nloop invariant y == 2;\nloop invariant y > 0;\nloop invariant (i == j) ==>(y == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: j == (y * i);\nloop invariant i3: y == 2;\nloop invariant i4: y > 0;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j + y * i <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\nloop invariant j >= i * y;\nloop invariant y >= 1;\nloop invariant j <= y * (i + 1);\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 2;\nloop invariant i <= y * (i + 1) / y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: j >= i * y;\nloop invariant i4: y >= 2;\nloop invariant i5: i <= y * (i + 1) / y;\nloop invariant i6: y >= 1;\nloop invariant i7: j <= y * (i + 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= x;\nloop invariant 1 <= j <= x * y;\nloop invariant y != 1 ==> (x <= y);\nloop invariant y != 1 ==> (j <= x * y);\nloop invariant y != 1 ==> (i <= j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (y * i);\nloop invariant y != 1 ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (i * y);\nloop invariant (i * y) == j;\nloop invariant (i != j) ==> (y != 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: (i * y) == j;\nloop invariant i4: (i != j) ==> (y != 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant j <= (2 * i);\nloop invariant (i == j) ==> (y == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i * y;\nloop invariant y > 0 || i == 0;\nloop invariant y == 1 ==> i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j = (i * y);\nloop invariant y >= 1;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y >= 1;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= 2 * x;\nloop invariant y == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y == 2;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: 0 <= i <= x;\nloop invariant i2: 0 <= j <= (i * y);\nloop invariant i3: i == j ==> y == 1;\nloop invariant i4: 0 <= i;\nloop invariant i5: i <= x;\nloop invariant i6: y >= 2;\nloop invariant i7: j >= 2 * i;\nloop invariant i8: 0 <= j <= 2*i;\nloop invariant i9: j >= 2;\nloop invariant i10: j <= 2*i + 2;\nloop invariant i11: (i == j) ==> (y == 1);\nloop invariant i12: j = y * i;\nloop invariant i13: x >= i;\nloop invariant i14: y >= 0;\nloop invariant i15: y <= 100000;\nloop invariant i16: i >= 0;\nloop invariant i17: j >= 0;\nloop invariant i18: y != 1 ==> i != j;\nloop invariant i19: x >= 0;\nloop invariant i20: j == 2 * i;\nloop invariant i21: y == 2;\nloop invariant i22: j == (y * i);\nloop invariant i23: y > 0;\nloop invariant i24: (i == j) ==>(y == 1);\nloop invariant i25: 0 <= j + y * i <= y * (i + 1);\nloop invariant i26: j >= i * y;\nloop invariant i27: i <= y * (i + 1) / y;\nloop invariant i28: y >= 1;\nloop invariant i29: j <= y * (i + 1);\nloop invariant i30: 1 <= i <= x;\nloop invariant i31: 1 <= j <= x * y;\nloop invariant i32: y != 1 ==> (x <= y);\nloop invariant i33: y != 1 ==> (j <= x * y);\nloop invariant i34: y != 1 ==> (i <= j);\nloop invariant i35: 0 <= j <= (y * i);\nloop invariant i36: y != 1 ==> (i == j);\nloop invariant i37: i1;\nloop invariant i38: i2;\nloop invariant i39: i3;\nloop invariant i40: i4;\nloop invariant i41: i5;\nloop invariant i42: i6;\nloop invariant i43: i7;\nloop invariant i44: i8;\nloop invariant i45: i9;\nloop invariant i46: i10;\nloop invariant i47: i11;\nloop invariant i48: i12;\nloop invariant i49: i13;\nloop invariant i50: i14;\nloop invariant i51: i15;\nloop invariant i52: i16;\nloop invariant i53: i17;\nloop invariant i54: i18;\nloop invariant i55: i19;\nloop invariant i56: i20;\nloop invariant i57: i21;\nloop invariant i58: i22;\nloop invariant i59: i23;\nloop invariant i60: i24;\nloop invariant i61: i25;\nloop invariant i62: i26;\nloop invariant i63: i27;\nloop invariant i64: i28;\nloop invariant i65: i29;\nloop invariant i66: i30;\nloop invariant i67: i31;\nloop invariant i68: i32;\nloop invariant i69: i33;\nloop invariant i70: i34;\nloop invariant i71: i35;\nloop invariant i72: i36;\nloop invariant i73: i37;\nloop invariant i74: i38;\nloop invariant i75: i39;\nloop invariant i76: i40;\nloop invariant i77: i41;\nloop invariant i78: i42;\nloop invariant i79: i43;\nloop invariant i80: i44;\nloop invariant i81: i45;\nloop invariant i82: i46;\nloop invariant i83: i47;\nloop invariant i84: i48;\nloop invariant i85: i49;\nloop invariant i86: i50;\nloop invariant i87: i51;\nloop invariant i88: i52;\nloop invariant i89: i53;\nloop invariant i90: i54;\nloop invariant i91: i55;\nloop invariant i92: i56;\nloop invariant i93: i57;\nloop invariant i94: i58;\nloop invariant i95: i59;\nloop invariant i96: i60;\nloop invariant i97: i61;\nloop invariant i98: i62;\nloop invariant i99: i63;\nloop invariant i100: i64;\nloop invariant i101: i65;\nloop invariant i102: i66;\nloop invariant i103: i67;\nloop invariant i104: i68;\nloop invariant i105: i69;\nloop invariant i106: i70;\nloop invariant i107: i71;\nloop invariant i108: i72;\nloop invariant i109: i73;\nloop invariant i110: i74;\nloop invariant i111: i75;\nloop invariant i112: i76;\nloop invariant i113: i77;\nloop invariant i114: i78;\nloop invariant i115: i79;\nloop invariant i116: i80;\nloop invariant i117: i81;\nloop invariant i118: i82;\nloop invariant i119: i83;\nloop invariant i120: i84;\nloop invariant i121: i85;\nloop invariant i122: i86;\nloop invariant i123: i87;\nloop invariant i124: i88;\nloop invariant i125: i89;\nloop invariant i126: i90;\nloop invariant i127: i91;\nloop invariant i128: i92;\nloop invariant i129: i93;\nloop invariant i130: i94;\nloop invariant i131: i95;\nloop invariant i132: i96;\nloop invariant i133: i97;\nloop invariant i134: i98;\nloop invariant i135: i99;\nloop invariant i136: i100;\nloop invariant i137: i101;\nloop invariant i138: i102;\nloop invariant i139: i103;\nloop invariant i140: i104;\nloop invariant i141: i105;\nloop invariant i142: i106;\nloop invariant i143: i107;\nloop invariant i144: i108;\nloop invariant i145: i109;\nloop invariant i146: i110;\nloop invariant i147: i111;\nloop invariant i148: i112;\nloop invariant i149: i113;\nloop invariant i150: i114;\nloop invariant i151: i115;\nloop invariant i152: i116;\nloop invariant i153: i117;\nloop invariant i154: i118;\nloop invariant i155: i119;\nloop invariant i156: i120;\nloop invariant i157: i121;\nloop invariant i158: i122;\nloop invariant i159: i123;\nloop invariant i160: i124;\nloop invariant i161: i125;\nloop invariant i162: i126;\nloop invariant i163: i127;\nloop invariant i164: i128;\nloop invariant i165: i129;\nloop invariant i166: i130;\nloop invariant i167: i131;\nloop invariant i168: i132;\nloop invariant i169: i133;\nloop invariant i170: i134;\nloop invariant i171: i135;\nloop invariant i172: i136;\nloop invariant i173: i137;\nloop invariant i174: i138;\nloop invariant i175: i139;\nloop invariant i176: i140;\nloop invariant i177: i141;\nloop invariant i178: i142;\nloop invariant i179: i143;\nloop invariant i180: i144;\nloop invariant i181: i145;\nloop invariant i182: i146;\nloop invariant i183: i147;\nloop invariant i184: i148;\nloop invariant i185: i149;\nloop invariant i186: i150;\nloop invariant i187: i151;\nloop invariant i188: i152;\nloop invariant i189: i153;\nloop invariant i190: i154;\nloop invariant i191: i155;\nloop invariant i192: i156;\nloop invariant i193: i157;\nloop invariant i194: i158;\nloop invariant i195: (i * y) == j;\nloop invariant i196: (i != j) ==> (y != 1);\nloop invariant i197: j <= (2 * i);\nloop invariant i198: 0 <= j <= i * y;\nloop invariant i199: y > 0 || i == 0;\nloop invariant i200: y == 1 ==> i == 0;\nloop invariant i201: j = (i * y);\nloop invariant i202: 0 <= j <= 2 * x;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 170,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: 0 <= j <= (i * y);\n\nloop invariant i4: 0 <= i;\n\nloop invariant i6: y >= 2;\nloop invariant i7: j >= 2 * i;\nloop invariant i8: 0 <= j <= 2*i;\n\nloop invariant i10: j <= 2*i + 2;\n\n\n\nloop invariant i14: y >= 0;\nloop invariant i15: y <= 100000;\nloop invariant i16: i >= 0;\nloop invariant i17: j >= 0;\n\n\nloop invariant i20: j == 2 * i;\nloop invariant i21: y == 2;\nloop invariant i22: j == (y * i);\nloop invariant i23: y > 0;\n\n\nloop invariant i26: j >= i * y;\nloop invariant i27: i <= y * (i + 1) / y;\nloop invariant i28: y >= 1;\nloop invariant i29: j <= y * (i + 1);\n\n\n\n\nloop invariant i34: y != 1 ==> (i <= j);\nloop invariant i35: 0 <= j <= (y * i);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i195: (i * y) == j;\nloop invariant i196: (i != j) ==> (y != 1);\nloop invariant i197: j <= (2 * i);\nloop invariant i198: 0 <= j <= i * y;\nloop invariant i199: y > 0 || i == 0;\nloop invariant i200: y == 1 ==> i == 0;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 84,
        "success_count": 72,
        "failure_count": 12,
        "success_rate": 0.8571428571428571
    }
}