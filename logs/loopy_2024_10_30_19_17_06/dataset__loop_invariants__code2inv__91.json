{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/91.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    while(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= y;\nloop invariant x >= y * (y - 1) / 2;\nloop invariant x <= y * (y + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant y >= x - 1;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y >= x + y;\nloop invariant y >= x + y + x;\nloop invariant y >= x + y + x + y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant y == max(0, y + x);\nloop invariant x <= x + y;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 0;\nloop invariant 0 <= y <= 100000;\nloop invariant y < 0;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= x * x + x;\nloop invariant y >= -x * x - x;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> y <= x * x + x;\nloop invariant y >= 0 ==> y >= -x * x - x;\nloop invariant x >= 0 ==> x <= y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y <= x * x + x;\nloop invariant x >= 0 ==> y >= -x * x - x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant x == y ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 0;\nloop invariant x >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= y;\nloop invariant x >= y * (y - 1) / 2;\nloop invariant x <= y * (y + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\nloop invariant i3: x <= y * (y + 1) / 2;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant y >= x - 1;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\nloop invariant y >= 0 ==> y >= x - 1;\nloop invariant y >= 0 ==> y <= x;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y >= -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\nloop invariant i4: y >= x - 1;\nloop invariant i5: y >= 0 ==> y >= 0;\nloop invariant i6: y >= 0 ==> y >= -1;\nloop invariant i7: y >= 0 ==> y >= x - 1;\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= x;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y >= x + y;\nloop invariant y >= x + y + x;\nloop invariant y >= x + y + x + y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\nloop invariant i3: y >= x;\nloop invariant i4: y >= x + y;\nloop invariant i5: y >= x + y + x;\nloop invariant i6: y >= x + y + x + y;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant y == max(0, y + x);\nloop invariant x <= x + y;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 0;\nloop invariant 0 <= y <= 100000;\nloop invariant y < 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= y <= 100000;loop invariant x >= (1 + (y - 1) * y / 2);\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\nloop invariant i2: x >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= x * x + x;\nloop invariant y >= -x * x - x;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> y <= x * x + x;\nloop invariant y >= 0 ==> y >= -x * x - x;\nloop invariant x >= 0 ==> x <= y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y <= x * x + x;\nloop invariant x >= 0 ==> y >= -x * x - x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: y >= 0;\n\nloop invariant i3: y >= -x * x - x;\nloop invariant i4: x >= 0;\nloop invariant i5: x <= y;\n\n\nloop invariant i8: y >= 0 ==> y >= -x * x - x;\nloop invariant i9: x >= 0 ==> x <= y;\nloop invariant i10: x >= 0 ==> y >= 0;\n\nloop invariant i12: x >= 0 ==> y >= -x * x - x;\n\nloop invariant i14: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x;\nloop invariant i15: x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x;\n\nloop invariant i17: x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i18: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i19: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant x == y ==> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x == y ==> y >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\nloop invariant i2: x >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 32: unbound logic function max. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 1 <= y;\nloop invariant i2: x >= y * (y - 1) / 2;\nloop invariant i3: x <= y * (y + 1) / 2;\nloop invariant i4: 0 <= y <= 100000;\nloop invariant i5: x >= (1 + (y - 1) * y / 2);\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: y <= x;\nloop invariant i9: y >= x - 1;\nloop invariant i10: y >= 0 ==> y >= 0;\nloop invariant i11: y >= 0 ==> y >= -1;\nloop invariant i12: y >= 0 ==> y >= x - 1;\nloop invariant i13: y >= 0 ==> y <= x;\nloop invariant i14: y >= x;\nloop invariant i15: 0 <= y;\nloop invariant i16: y >= x + y;\nloop invariant i17: y >= x + y + x;\nloop invariant i18: y >= x + y + x + y;\nloop invariant i19: 0 <= y <= x;\nloop invariant i20: y == max(0, y + x);\nloop invariant i21: x <= x + y;\nloop invariant i22: 0 <= y <= 0;\nloop invariant i23: y < 0;\nloop invariant i24: i1;\nloop invariant i25: i2;\nloop invariant i26: 0 <= y <= 100000;loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i27: y <= x * x + x;\nloop invariant i28: y >= -x * x - x;\nloop invariant i29: x <= y;\nloop invariant i30: y >= 0 ==> x >= y;\nloop invariant i31: y >= 0 ==> y <= x * x + x;\nloop invariant i32: y >= 0 ==> y >= -x * x - x;\nloop invariant i33: x >= 0 ==> x <= y;\nloop invariant i34: x >= 0 ==> y >= 0;\nloop invariant i35: x >= 0 ==> y <= x * x + x;\nloop invariant i36: x >= 0 ==> y >= -x * x - x;\nloop invariant i37: x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x;\nloop invariant i38: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x;\nloop invariant i39: x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x;\nloop invariant i40: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i41: x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i42: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i43: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i44: x >= y;\nloop invariant i45: x == y ==> y >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\nloop invariant i2: x >= y * (y - 1) / 2;\nloop invariant i3: x <= y * (y + 1) / 2;\nloop invariant i4: 0 <= y <= 100000;\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: y <= x;\nloop invariant i9: y >= x - 1;\nloop invariant i10: y >= 0 ==> y >= 0;\nloop invariant i11: y >= 0 ==> y >= -1;\nloop invariant i12: y >= 0 ==> y >= x - 1;\nloop invariant i13: y >= 0 ==> y <= x;\nloop invariant i14: y >= x;\nloop invariant i15: 0 <= y;\nloop invariant i16: y >= x + y;\nloop invariant i17: y >= x + y + x;\nloop invariant i18: y >= x + y + x + y;\nloop invariant i19: 0 <= y <= x;\n\nloop invariant i21: x <= x + y;\nloop invariant i22: 0 <= y <= 0;\n\n\n\nloop invariant i26: 0 <= y <= 100000;loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i27: y <= x * x + x;\nloop invariant i28: y >= -x * x - x;\nloop invariant i29: x <= y;\nloop invariant i30: y >= 0 ==> x >= y;\nloop invariant i31: y >= 0 ==> y <= x * x + x;\nloop invariant i32: y >= 0 ==> y >= -x * x - x;\nloop invariant i33: x >= 0 ==> x <= y;\nloop invariant i34: x >= 0 ==> y >= 0;\nloop invariant i35: x >= 0 ==> y <= x * x + x;\nloop invariant i36: x >= 0 ==> y >= -x * x - x;\nloop invariant i37: x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x;\nloop invariant i38: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x;\nloop invariant i39: x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x;\nloop invariant i40: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i41: x >= 0 ==> x <= y ==> y >= 0 ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i42: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i43: x >= 0 ==> x <= y ==> y >= 0 ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x ==> y >= -x * x - x ==> y <= x * x + x;\nloop invariant i44: x >= y;\nloop invariant i45: x == y ==> y >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 77,
        "success_count": 65,
        "failure_count": 12,
        "success_rate": 0.8441558441558441
    }
}