{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  while (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 10 && i >= -10 && i * i >= 0 && i * i < 100 ==> (i == 10);\n*/\n```",
            "```\n/*@\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i <= 100 ==> i * i < 100 ==> i < 10;\nloop invariant i * i <= 100 ==> i * i >= 100 ==> i >= 10;\nloop invariant i * i <= 100 ==> i * i >= 100 ==> i <= -10;\nloop invariant i * i <= 100 ==> i * i >= 100 ==> i >= -10;\nloop invariant i * i <= 100 ==> i * i < 100 && i * i >= 0 ==> i >= 0 && i < 10;\nloop invariant i * i <= 100 ==> i * i < 100 && i * i >= 0 ==> i <= 0 && i > -10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i * i >= 100;\nloop invariant i == 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant i * i >= 100;\nloop invariant i * i < 100 ==> i >= 10;\nloop invariant i * i < 100 ==> i <= -10;\nloop invariant i * i >= 100 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i * i >= 100 ==> i == 10;\n*/\n```",
            "```\n/*@\nloop invariant i = 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant i < 100;\nloop invariant i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\n*/\n```",
            "```\n/*@\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\n*/\n```",
            "```\n/*@\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= -100;\nloop invariant i * i <= 100;\nloop invariant i * i < 100 ==> i < 10;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant i * i >= 10;\nloop invariant i * i <= 100;\nloop invariant i * i >= 100 ==> i == 10;\nloop invariant i * i <= 100 ==> i == 10;\nloop invariant i * i >= 100 ==> i <= 10;\nloop invariant i * i <= 100 ==> i >= 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i == 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i == 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100;\nloop invariant i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i == 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i == 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i == 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i * i >= 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i * i <= 100;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i >= 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i <= 100;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10 ==> i == 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= i * i <= 100;\nloop invariant i * i < 100 ==> i <= 10;\nloop invariant i * i < 100 ==> i >= 0;\nloop invariant i * i < 100 ==> i == 10;\nloop invariant i * i < 100 ==> i * i < 100;\n*/\n```",
            "```\n/*@\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100 ==> i * i >= 0;\nloop invariant i * i < 100 ==> i * i <= 100;\nloop invariant i * i < 100 ==> i >= -10;\nloop invariant i * i < 100 ==> i <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 10 * 10 < i * i ==> i == 10;\nloop invariant i * i <= 100 ==> i <= 10;\nloop invariant unknown_int() <= i <= 10;\nloop invariant unknown_int() > -10;\nloop invariant -10 <= unknown_int();\nloop invariant i == unknown_int() ==> i == 10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10;\nloop invariant i == unknown_int() ==> unknown_int() > -10;\nloop invariant i == unknown_int() ==> -10 <= unknown_int();\nloop invariant i <= unknown_int() <= 10 ==> i == 10;\nloop invariant i <= unknown_int() <= 10 ==> unknown_int() <= 10;\nloop invariant i <= unknown_int() <= 10 ==> unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> -10 <= unknown_int();\nloop invariant unknown_int() <= 10 ==> i == 10;\nloop invariant unknown_int() > -10 ==> i == 10;\nloop invariant -10 <= unknown_int() ==> i == 10;\nloop invariant i <= 10 ==> i == 10;\nloop invariant i == unknown_int() ==> i <= 10 && i > -10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() <= i <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() > -10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant -10 <= unknown_int() ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i == unknown_int() ==> i == unknown_int() && i <= 10 && i > -10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() <= i <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() > -10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant -10 <= unknown_int() ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i == unknown_int() ==> i == unknown_int() && i <= 10 && i > -10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() <= i <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() > -10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant -10 <= unknown_int() ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i == unknown_int() ==> i == unknown_int() && i <= 10 && i > -10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 9; i * i >= 0; i * i < 100;\n*/\n```",
            "```\n/*@\nloop invariant - i * i >= 100;\nloop invariant - 10 >= i;\nloop invariant - i >= 0;\nloop invariant - i * i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i * i >= i * i - 10;\nloop invariant i * i <= i * i + 10;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10 && i >= -10 && i * i >= 0 && i * i < 100 ==> (i == 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i <= 100 ==> i * i < 100 ==> i < 10;\nloop invariant i * i <= 100 ==> i * i >= 100 ==> i >= 10;\nloop invariant i * i <= 100 ==> i * i >= 100 ==> i <= -10;\nloop invariant i * i <= 100 ==> i * i >= 100 ==> i >= -10;\nloop invariant i * i <= 100 ==> i * i < 100 && i * i >= 0 ==> i >= 0 && i < 10;\nloop invariant i * i <= 100 ==> i * i < 100 && i * i >= 0 ==> i <= 0 && i > -10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\nloop invariant i1: i >= -10;\nloop invariant i2: i <= 10;\nloop invariant i3: i * i >= 0;\nloop invariant i4: i * i <= 100;\nloop invariant i5: i * i <= 100 ==> i * i < 100 ==> i < 10;\nloop invariant i6: i * i <= 100 ==> i * i >= 100 ==> i >= 10;\n\nloop invariant i8: i * i <= 100 ==> i * i >= 100 ==> i >= -10;\n\n\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i * i >= 100;\nloop invariant i == 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\n\n\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant i * i >= 100;\nloop invariant i * i < 100 ==> i >= 10;\nloop invariant i * i < 100 ==> i <= -10;\nloop invariant i * i >= 100 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: i * i >= 100 ==> i == 10;\nloop invariant i6: i * i < 100 ==> i == 10 ==> i == 10;\nloop invariant i7: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i8: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i9: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i10: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i11: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i12: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i13: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i14: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i15: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i16: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i17: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i18: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i19: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i * i >= 100 ==> i == 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\nloop invariant i2: i * i >= 100 ==> i == 10;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i = 0;\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant i < 100;\nloop invariant i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\nloop invariant i * i <= 100;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\n\nloop invariant i3: i <= 10;\nloop invariant i4: i < 100;\nloop invariant i5: i <= 100;\nloop invariant i6: i * i >= 0;\nloop invariant i7: i * i <= 100;\n\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\nloop invariant i1: i >= -10;\nloop invariant i2: i <= 10;\nloop invariant i3: i * i >= 0;\nloop invariant i4: i * i <= 100;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= -100;\nloop invariant i * i <= 100;\nloop invariant i * i < 100 ==> i < 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\nloop invariant i1: i >= -10;\nloop invariant i2: i <= 10;\nloop invariant i3: i * i >= -100;\nloop invariant i4: i * i <= 100;\nloop invariant i5: i * i < 100 ==> i < 10;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant i * i >= 10;\nloop invariant i * i <= 100;\nloop invariant i * i >= 100 ==> i == 10;\nloop invariant i * i <= 100 ==> i == 10;\nloop invariant i * i >= 100 ==> i <= 10;\nloop invariant i * i <= 100 ==> i >= 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i == 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i == 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100;\nloop invariant i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i == 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i == 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i == 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i * i >= 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i * i <= 100;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i >= 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i <= 100;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10;\nloop invariant i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10 ==> i == 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\n\nloop invariant i3: i * i <= 100;\nloop invariant i4: i * i >= 100 ==> i == 10;\n\nloop invariant i6: i * i >= 100 ==> i <= 10;\n\nloop invariant i8: i * i >= 100 ==> i <= 10 ==> i == 10;\nloop invariant i9: i * i <= 100 ==> i >= 10 ==> i == 10;\nloop invariant i10: i * i >= 100 ==> i <= 10 ==> i * i >= 10;\nloop invariant i11: i * i <= 100 ==> i >= 10 ==> i * i <= 100;\nloop invariant i12: i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i == 10;\nloop invariant i13: i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i == 10;\nloop invariant i14: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i == 10;\nloop invariant i15: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i16: i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i * i >= 10;\nloop invariant i17: i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i * i <= 100;\nloop invariant i18: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i >= 10;\nloop invariant i19: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i <= 100;\nloop invariant i20: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100;\nloop invariant i21: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10;\nloop invariant i22: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i23: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10 ==> i == 10;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= i * i <= 100;\nloop invariant i * i < 100 ==> i <= 10;\nloop invariant i * i < 100 ==> i >= 0;\nloop invariant i * i < 100 ==> i == 10;\nloop invariant i * i < 100 ==> i * i < 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\nloop invariant i2: 0 <= i * i <= 100;\nloop invariant i3: i * i < 100 ==> i <= 10;\n\n\nloop invariant i6: i * i < 100 ==> i * i < 100;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= -10;\nloop invariant i <= 10;\nloop invariant i * i >= 0;\nloop invariant i * i <= 100;\nloop invariant i * i < 100 ==> i * i >= 0;\nloop invariant i * i < 100 ==> i * i <= 100;\nloop invariant i * i < 100 ==> i >= -10;\nloop invariant i * i < 100 ==> i <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\nloop invariant i1: i >= -10;\nloop invariant i2: i <= 10;\nloop invariant i3: i * i >= 0;\nloop invariant i4: i * i <= 100;\nloop invariant i5: i * i < 100 ==> i * i >= 0;\nloop invariant i6: i * i < 100 ==> i * i <= 100;\nloop invariant i7: i * i < 100 ==> i >= -10;\nloop invariant i8: i * i < 100 ==> i <= 10;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 23,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 10 * 10 < i * i ==> i == 10;\nloop invariant i * i <= 100 ==> i <= 10;\nloop invariant unknown_int() <= i <= 10;\nloop invariant unknown_int() > -10;\nloop invariant -10 <= unknown_int();\nloop invariant i == unknown_int() ==> i == 10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10;\nloop invariant i == unknown_int() ==> unknown_int() > -10;\nloop invariant i == unknown_int() ==> -10 <= unknown_int();\nloop invariant i <= unknown_int() <= 10 ==> i == 10;\nloop invariant i <= unknown_int() <= 10 ==> unknown_int() <= 10;\nloop invariant i <= unknown_int() <= 10 ==> unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> -10 <= unknown_int();\nloop invariant unknown_int() <= 10 ==> i == 10;\nloop invariant unknown_int() > -10 ==> i == 10;\nloop invariant -10 <= unknown_int() ==> i == 10;\nloop invariant i <= 10 ==> i == 10;\nloop invariant i == unknown_int() ==> i <= 10 && i > -10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() <= i <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() > -10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant -10 <= unknown_int() ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i == unknown_int() ==> i == unknown_int() && i <= 10 && i > -10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() <= i <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() > -10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant -10 <= unknown_int() ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i == unknown_int() ==> i == unknown_int() && i <= 10 && i > -10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() <= i <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant unknown_int() > -10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant -10 <= unknown_int() ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i == unknown_int() ==> i == unknown_int() && i <= 10 && i > -10;\nloop invariant i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\nloop invariant i2: 10 * 10 < i * i ==> i == 10;\nloop invariant i3: i * i <= 100 ==> i <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 9; i * i >= 0; i * i < 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant - i * i >= 100;\nloop invariant - 10 >= i;\nloop invariant - i >= 0;\nloop invariant - i * i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i * i >= i * i - 10;\nloop invariant i * i <= i * i + 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\nloop invariant i2: i * i >= i * i - 10;\nloop invariant i3: i * i <= i * i + 10;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 47: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 10 && i >= -10 && i * i >= 0 && i * i < 100 ==> (i == 10);\nloop invariant i2: i >= -10;\nloop invariant i3: i <= 10;\nloop invariant i4: i * i >= 0;\nloop invariant i5: i * i <= 100;\nloop invariant i6: i * i <= 100 ==> i * i < 100 ==> i < 10;\nloop invariant i7: i * i <= 100 ==> i * i >= 100 ==> i >= 10;\nloop invariant i8: i * i <= 100 ==> i * i >= 100 ==> i <= -10;\nloop invariant i9: i * i <= 100 ==> i * i >= 100 ==> i >= -10;\nloop invariant i10: i * i <= 100 ==> i * i < 100 && i * i >= 0 ==> i >= 0 && i < 10;\nloop invariant i11: i * i <= 100 ==> i * i < 100 && i * i >= 0 ==> i <= 0 && i > -10;\nloop invariant i12: 0 <= i <= 10;\nloop invariant i13: i * i >= 100;\nloop invariant i14: i == 10;\nloop invariant i15: 0 <= i <= 9;\nloop invariant i16: i * i < 100 ==> i >= 10;\nloop invariant i17: i * i < 100 ==> i <= -10;\nloop invariant i18: i * i >= 100 ==> i == 10;\nloop invariant i19: i * i < 100 ==> i == 10 ==> i == 10;\nloop invariant i20: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i21: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i22: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i23: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i24: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i25: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i26: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i27: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i28: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i29: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i30: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i31: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i32: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i33: i = 0;\nloop invariant i34: i >= 0;\nloop invariant i35: i < 100;\nloop invariant i36: i <= 100;\nloop invariant i37: i * i < 100;\nloop invariant i38: i * i >= -100;\nloop invariant i39: i * i < 100 ==> i < 10;\nloop invariant i40: 1 <= i <= 10;\nloop invariant i41: i * i >= 10;\nloop invariant i42: i * i <= 100 ==> i == 10;\nloop invariant i43: i * i >= 100 ==> i <= 10;\nloop invariant i44: i * i <= 100 ==> i >= 10;\nloop invariant i45: i * i >= 100 ==> i <= 10 ==> i == 10;\nloop invariant i46: i * i <= 100 ==> i >= 10 ==> i == 10;\nloop invariant i47: i * i >= 100 ==> i <= 10 ==> i * i >= 10;\nloop invariant i48: i * i <= 100 ==> i >= 10 ==> i * i <= 100;\nloop invariant i49: i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i == 10;\nloop invariant i50: i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i == 10;\nloop invariant i51: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i == 10;\nloop invariant i52: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i53: i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i * i >= 10;\nloop invariant i54: i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i * i <= 100;\nloop invariant i55: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i >= 10;\nloop invariant i56: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i <= 100;\nloop invariant i57: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100;\nloop invariant i58: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10;\nloop invariant i59: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i60: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10 ==> i == 10;\nloop invariant i61: 0 <= i * i <= 100;\nloop invariant i62: i * i < 100 ==> i <= 10;\nloop invariant i63: i * i < 100 ==> i >= 0;\nloop invariant i64: i * i < 100 ==> i == 10;\nloop invariant i65: i * i < 100 ==> i * i < 100;\nloop invariant i66: i * i < 100 ==> i * i >= 0;\nloop invariant i67: i * i < 100 ==> i * i <= 100;\nloop invariant i68: i * i < 100 ==> i >= -10;\nloop invariant i69: 10 * 10 < i * i ==> i == 10;\nloop invariant i70: i * i <= 100 ==> i <= 10;\nloop invariant i71: unknown_int() <= i <= 10;\nloop invariant i72: unknown_int() > -10;\nloop invariant i73: -10 <= unknown_int();\nloop invariant i74: i == unknown_int() ==> i == 10;\nloop invariant i75: i == unknown_int() ==> unknown_int() <= 10;\nloop invariant i76: i == unknown_int() ==> unknown_int() > -10;\nloop invariant i77: i == unknown_int() ==> -10 <= unknown_int();\nloop invariant i78: i <= unknown_int() <= 10 ==> i == 10;\nloop invariant i79: i <= unknown_int() <= 10 ==> unknown_int() <= 10;\nloop invariant i80: i <= unknown_int() <= 10 ==> unknown_int() > -10;\nloop invariant i81: i <= unknown_int() <= 10 ==> -10 <= unknown_int();\nloop invariant i82: unknown_int() <= 10 ==> i == 10;\nloop invariant i83: unknown_int() > -10 ==> i == 10;\nloop invariant i84: -10 <= unknown_int() ==> i == 10;\nloop invariant i85: i <= 10 ==> i == 10;\nloop invariant i86: i == unknown_int() ==> i <= 10 && i > -10;\nloop invariant i87: i == unknown_int() ==> unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i88: i <= unknown_int() <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i89: unknown_int() <= i <= 10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i90: unknown_int() > -10 ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i91: -10 <= unknown_int() ==> i == unknown_int() && unknown_int() <= 10 && unknown_int() > -10;\nloop invariant i92: i == unknown_int() ==> i == unknown_int() && i <= 10 && i > -10;\nloop invariant i93: 0 <= i <= 9; i * i >= 0; i * i < 100;\nloop invariant i94: - i * i >= 100;\nloop invariant i95: - 10 >= i;\nloop invariant i96: - i >= 0;\nloop invariant i97: - i * i >= 0;\nloop invariant i98: i * i >= i * i - 10;\nloop invariant i99: i * i <= i * i + 10;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 38,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  /*@\n\nloop invariant i2: i >= -10;\nloop invariant i3: i <= 10;\nloop invariant i4: i * i >= 0;\nloop invariant i5: i * i <= 100;\nloop invariant i6: i * i <= 100 ==> i * i < 100 ==> i < 10;\nloop invariant i7: i * i <= 100 ==> i * i >= 100 ==> i >= 10;\n\nloop invariant i9: i * i <= 100 ==> i * i >= 100 ==> i >= -10;\n\n\n\n\n\n\n\n\nloop invariant i18: i * i >= 100 ==> i == 10;\nloop invariant i19: i * i < 100 ==> i == 10 ==> i == 10;\nloop invariant i20: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i21: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i22: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i23: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i24: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i25: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i26: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i27: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i28: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i29: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i30: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i31: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\nloop invariant i32: i * i < 100 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10 ==> i == 10;\n\n\nloop invariant i35: i < 100;\nloop invariant i36: i <= 100;\n\nloop invariant i38: i * i >= -100;\nloop invariant i39: i * i < 100 ==> i < 10;\n\n\n\nloop invariant i43: i * i >= 100 ==> i <= 10;\n\nloop invariant i45: i * i >= 100 ==> i <= 10 ==> i == 10;\nloop invariant i46: i * i <= 100 ==> i >= 10 ==> i == 10;\nloop invariant i47: i * i >= 100 ==> i <= 10 ==> i * i >= 10;\nloop invariant i48: i * i <= 100 ==> i >= 10 ==> i * i <= 100;\nloop invariant i49: i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i == 10;\nloop invariant i50: i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i == 10;\nloop invariant i51: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i == 10;\nloop invariant i52: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i53: i * i >= 100 ==> i <= 10 ==> i <= 10 ==> i * i >= 10;\nloop invariant i54: i * i <= 100 ==> i >= 10 ==> i >= 10 ==> i * i <= 100;\nloop invariant i55: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i >= 10;\nloop invariant i56: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i <= 100;\nloop invariant i57: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100;\nloop invariant i58: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10;\nloop invariant i59: i * i >= 100 ==> i <= 10 ==> i * i >= 10 ==> i * i <= 100 ==> i == 10;\nloop invariant i60: i * i <= 100 ==> i >= 10 ==> i * i <= 100 ==> i * i >= 10 ==> i == 10;\nloop invariant i61: 0 <= i * i <= 100;\nloop invariant i62: i * i < 100 ==> i <= 10;\n\n\nloop invariant i65: i * i < 100 ==> i * i < 100;\nloop invariant i66: i * i < 100 ==> i * i >= 0;\nloop invariant i67: i * i < 100 ==> i * i <= 100;\nloop invariant i68: i * i < 100 ==> i >= -10;\nloop invariant i69: 10 * 10 < i * i ==> i == 10;\nloop invariant i70: i * i <= 100 ==> i <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i98: i * i >= i * i - 10;\nloop invariant i99: i * i <= i * i + 10;\n*/\nwhile (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c"
        ],
        "skipped": [],
        "total": 170,
        "success_count": 150,
        "failure_count": 20,
        "success_rate": 0.8823529411764706
    }
}