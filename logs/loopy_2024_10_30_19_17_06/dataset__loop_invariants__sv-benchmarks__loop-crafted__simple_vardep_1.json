{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff * 2;\nloop invariant 0 <= k <= 0x0fffffff * 3;\nloop invariant i == (k - j) / 2;\nloop invariant j == (i * 2) + (k - i);\nloop invariant k == (i * 3) + (j - i);\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant k % 2 == 1;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\nloop invariant k == i * 3 + j;\nloop invariant k == i * 3 + (i * 2);\nloop invariant k == i * 5;\nloop invariant k == i * 3 + j + 1;\nloop invariant k == i * 3 + j + 2;\nloop invariant k == i * 3 + j + 3;\nloop invariant k == i * 3 + j + 4;\nloop invariant k == i * 3 + j + 5;\nloop invariant k == i * 3 + j + 6;\nloop invariant k == i * 3 + j + 7;\nloop invariant k == i * 3 + j + 8;\nloop invariant k == i * 3 + j + 9;\nloop invariant k == i * 3 + j + 10;\nloop invariant k == i * 3 + j + 11;\nloop invariant k == i * 3 + j + 12;\nloop invariant k == i * 3 + j + 13;\nloop invariant k == i * 3 + j + 14;\nloop invariant k == i * 3 + j + 15;\nloop invariant k == i * 3 + j + 16;\nloop invariant k == i * 3 + j + 17;\nloop invariant k == i * 3 + j + 18;\nloop invariant k == i * 3 + j + 19;\nloop invariant k == i * 3 + j + 20;\nloop invariant k == i * 3 + j + 21;\nloop invariant k == i * 3 + j + 22;\nloop invariant k == i * 3 + j + 23;\nloop invariant k == i * 3 + j + 24;\nloop invariant k == i * 3 + j + 25;\nloop invariant k == i * 3 + j + 26;\nloop invariant k == i * 3 + j + 27;\nloop invariant k == i * 3 + j + 28;\nloop invariant k == i * 3 + j + 29;\nloop invariant k == i * 3 + j + 30;\nloop invariant k == i * 3 + j + 31;\nloop invariant k == i * 3 + j + 32;\nloop invariant k == i * 3 + j + 33;\nloop invariant k == i * 3 + j + 34;\nloop invariant k == i * 3 + j + 35;\nloop invariant k == i * 3 + j + 36;\nloop invariant k == i * 3 + j + 37;\nloop invariant k == i * 3 + j + 38;\nloop invariant k == i * 3 + j + 39;\nloop invariant k == i * 3 + j + 40;\nloop invariant k == i * 3 + j + 41;\nloop invariant k == i * 3 + j + 42;\nloop invariant k == i * 3 + j + 43;\nloop invariant k == i * 3 + j + 44;\nloop invariant k == i * 3 + j + 45;\nloop invariant k == i * 3 + j + 46;\nloop invariant k == i * 3 + j + 47;\nloop invariant k == i * 3 + j + 48;\nloop invariant k == i * 3 + j + 49;\nloop invariant k == i * 3 + j + 50;\nloop invariant k == i * 3 + j + 51;\nloop invariant k == i * 3 + j + 52;\nloop invariant k == i * 3 + j + 53;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j) ==> i == (k - j);\nloop invariant k == (i + j) ==> j == (k - i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0xffffffff;\nloop invariant 0 <= j <= 0xffffffff;\nloop invariant 0 <= k <= 0xffffffff;\nloop invariant i <= j;\nloop invariant k == (i + j);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k <= (i + j);\nloop invariant i + j >= k;\nloop invariant i <= (j + k/2);\nloop invariant j <= (i + k/2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant i == (j / 2);\nloop invariant k == ((3 * j) - (3 * i));\nloop invariant k == (3 * (i + (j / 2)));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k < 0x0fffffff;\nloop invariant i >= k/3;\nloop invariant j >= 2*(k/3);\nloop invariant k%3 == 0;\nloop invariant i%2 == 1;\nloop invariant j%2 == 0;\nloop invariant (i + j) == k;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i + j == k;\nloop invariant i <= 255;\nloop invariant j <= 255;\nloop invariant k <= 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= k + 1;\nloop invariant j <= k + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant k <= (i + j);\nloop invariant k == (0 + (i + 1));\nloop invariant k == (1 + (j + 1));\nloop invariant k == (2 + (k + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= k - i <= 0x0fffffff;\nloop invariant 0 <= k - j <= 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= 0x0fffffff;\nloop invariant j <= 0x0fffffff;\nloop invariant k <= 0x0fffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i + j == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant k == 3 * i + 3 * j / 2;\nloop invariant i == j / 2;\nloop invariant j == 2 * i;\nloop invariant k == 3 * i + 3 * j / 2 ==> k < 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i == (k - 3 * j) / 3;\nloop invariant j == (k - 3 * i) / 3;\nloop invariant k == (i + j);\nloop invariant i * i + i == 3 * j;\nloop invariant j * j + j == 3 * i;\nloop invariant i + j == k;\nloop invariant i + i == j;\nloop invariant j + j == i;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k >= 3*i;\nloop invariant k >= 2*j;\nloop invariant k < 0x0fffffff;\nloop invariant i == (k - j) / 3;\nloop invariant j == 2*i;\nloop invariant k == 3*i + j;\nloop invariant k == (i + j) * (i + j + 1) / 2 - i * (i + 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x1fffffff;\nloop invariant 0 <= k <= 0x3fffffff;\nloop invariant i <= j;\nloop invariant j <= k;\nloop invariant k <= 0x3fffffff ==> (k == (i + j));\nloop invariant i <= 0x0fffffff ==> (i == 0);\nloop invariant j <= 0x1fffffff ==> (j == 2 * i);\nloop invariant k <= 0x3fffffff ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 64,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff * 2;\nloop invariant 0 <= k <= 0x0fffffff * 3;\nloop invariant i == (k - j) / 2;\nloop invariant j == (i * 2) + (k - i);\nloop invariant k == (i * 3) + (j - i);\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant k % 2 == 1;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\nloop invariant k == i * 3 + j;\nloop invariant k == i * 3 + (i * 2);\nloop invariant k == i * 5;\nloop invariant k == i * 3 + j + 1;\nloop invariant k == i * 3 + j + 2;\nloop invariant k == i * 3 + j + 3;\nloop invariant k == i * 3 + j + 4;\nloop invariant k == i * 3 + j + 5;\nloop invariant k == i * 3 + j + 6;\nloop invariant k == i * 3 + j + 7;\nloop invariant k == i * 3 + j + 8;\nloop invariant k == i * 3 + j + 9;\nloop invariant k == i * 3 + j + 10;\nloop invariant k == i * 3 + j + 11;\nloop invariant k == i * 3 + j + 12;\nloop invariant k == i * 3 + j + 13;\nloop invariant k == i * 3 + j + 14;\nloop invariant k == i * 3 + j + 15;\nloop invariant k == i * 3 + j + 16;\nloop invariant k == i * 3 + j + 17;\nloop invariant k == i * 3 + j + 18;\nloop invariant k == i * 3 + j + 19;\nloop invariant k == i * 3 + j + 20;\nloop invariant k == i * 3 + j + 21;\nloop invariant k == i * 3 + j + 22;\nloop invariant k == i * 3 + j + 23;\nloop invariant k == i * 3 + j + 24;\nloop invariant k == i * 3 + j + 25;\nloop invariant k == i * 3 + j + 26;\nloop invariant k == i * 3 + j + 27;\nloop invariant k == i * 3 + j + 28;\nloop invariant k == i * 3 + j + 29;\nloop invariant k == i * 3 + j + 30;\nloop invariant k == i * 3 + j + 31;\nloop invariant k == i * 3 + j + 32;\nloop invariant k == i * 3 + j + 33;\nloop invariant k == i * 3 + j + 34;\nloop invariant k == i * 3 + j + 35;\nloop invariant k == i * 3 + j + 36;\nloop invariant k == i * 3 + j + 37;\nloop invariant k == i * 3 + j + 38;\nloop invariant k == i * 3 + j + 39;\nloop invariant k == i * 3 + j + 40;\nloop invariant k == i * 3 + j + 41;\nloop invariant k == i * 3 + j + 42;\nloop invariant k == i * 3 + j + 43;\nloop invariant k == i * 3 + j + 44;\nloop invariant k == i * 3 + j + 45;\nloop invariant k == i * 3 + j + 46;\nloop invariant k == i * 3 + j + 47;\nloop invariant k == i * 3 + j + 48;\nloop invariant k == i * 3 + j + 49;\nloop invariant k == i * 3 + j + 50;\nloop invariant k == i * 3 + j + 51;\nloop invariant k == i * 3 + j + 52;\nloop invariant k == i * 3 + j + 53;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff * 2;\nloop invariant i3: 0 <= k <= 0x0fffffff * 3;\n\n\n\n\n\nloop invariant i9: k % 3 == 0;\n\n\n\nloop invariant i13: i <= k;\nloop invariant i14: j <= k;\nloop invariant i15: i + j == k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j) ==> i == (k - j);\nloop invariant k == (i + j) ==> j == (k - i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\nloop invariant i2: k == (i + j) ==> i == (k - j);\nloop invariant i3: k == (i + j) ==> j == (k - i);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0xffffffff;\nloop invariant 0 <= j <= 0xffffffff;\nloop invariant 0 <= k <= 0xffffffff;\nloop invariant i <= j;\nloop invariant k == (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0xffffffff;\nloop invariant i2: 0 <= j <= 0xffffffff;\nloop invariant i3: 0 <= k <= 0xffffffff;\nloop invariant i4: i <= j;\nloop invariant i5: k == (i + j);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k <= (i + j);\nloop invariant i + j >= k;\nloop invariant i <= (j + k/2);\nloop invariant j <= (i + k/2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: k <= (i + j);\nloop invariant i5: i + j >= k;\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant i == (j / 2);\nloop invariant k == ((3 * j) - (3 * i));\nloop invariant k == (3 * (i + (j / 2)));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\nloop invariant k == (3 * i) + (3 * (j / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= 0x0fffffff;\nloop invariant i3: 0 <= j <= 0x0fffffff;\nloop invariant i4: k == (i + j);\nloop invariant i5: i == (j / 2);\nloop invariant i6: k == ((3 * j) - (3 * i));\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k < 0x0fffffff;\nloop invariant i >= k/3;\nloop invariant j >= 2*(k/3);\nloop invariant k%3 == 0;\nloop invariant i%2 == 1;\nloop invariant j%2 == 0;\nloop invariant (i + j) == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\nloop invariant i2: i >= k/3;\nloop invariant i3: j >= 2*(k/3);\nloop invariant i4: k%3 == 0;\n\nloop invariant i6: j%2 == 0;\nloop invariant i7: (i + j) == k;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i + j == k;\nloop invariant i <= 255;\nloop invariant j <= 255;\nloop invariant k <= 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: i + j == k;\n\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= k + 1;\nloop invariant j <= k + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\nloop invariant i2: k == (i + j);\nloop invariant i3: i <= k;\nloop invariant i4: j <= k;\nloop invariant i5: i <= k + 1;\nloop invariant i6: j <= k + 2;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant k <= (i + j);\nloop invariant k == (0 + (i + 1));\nloop invariant k == (1 + (j + 1));\nloop invariant k == (2 + (k + 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\n\n\nloop invariant i4: k == (i + j);\nloop invariant i5: i <= k;\nloop invariant i6: j <= k;\nloop invariant i7: k <= (i + j);\n\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= k - i <= 0x0fffffff;\nloop invariant 0 <= k - j <= 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\n\n\n\nloop invariant i5: 0 <= k - j <= 0x0fffffff;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= 0x0fffffff;\nloop invariant j <= 0x0fffffff;\nloop invariant k <= 0x0fffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i + j == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\n\n\nloop invariant i4: i <= k;\nloop invariant i5: j <= k;\nloop invariant i6: i <= 0x0fffffff;\n\n\nloop invariant i9: i >= 0;\nloop invariant i10: j >= 0;\nloop invariant i11: k >= 0;\nloop invariant i12: i + j == k;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant k == 3 * i + 3 * j / 2;\nloop invariant i == j / 2;\nloop invariant j == 2 * i;\nloop invariant k == 3 * i + 3 * j / 2 ==> k < 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= k;\n\nloop invariant i5: i == j / 2;\nloop invariant i6: j == 2 * i;\nloop invariant i7: k == 3 * i + 3 * j / 2 ==> k < 0x0fffffff;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i == (k - 3 * j) / 3;\nloop invariant j == (k - 3 * i) / 3;\nloop invariant k == (i + j);\nloop invariant i * i + i == 3 * j;\nloop invariant j * j + j == 3 * i;\nloop invariant i + j == k;\nloop invariant i + i == j;\nloop invariant j + j == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\n\n\nloop invariant i4: k == (i + j);\n\n\nloop invariant i7: i + j == k;\nloop invariant i8: i + i == j;\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k >= 3*i;\nloop invariant k >= 2*j;\nloop invariant k < 0x0fffffff;\nloop invariant i == (k - j) / 3;\nloop invariant j == 2*i;\nloop invariant k == 3*i + j;\nloop invariant k == (i + j) * (i + j + 1) / 2 - i * (i + 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: k >= 3*i;\n\n\n\nloop invariant i8: j == 2*i;\n\n\nloop invariant i11: k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x1fffffff;\nloop invariant 0 <= k <= 0x3fffffff;\nloop invariant i <= j;\nloop invariant j <= k;\nloop invariant k <= 0x3fffffff ==> (k == (i + j));\nloop invariant i <= 0x0fffffff ==> (i == 0);\nloop invariant j <= 0x1fffffff ==> (j == 2 * i);\nloop invariant k <= 0x3fffffff ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\nloop invariant i == 0 ==> (j == 0);\nloop invariant j == 0 ==> (k == 0);\nloop invariant i == 0 ==> (j == 2 * i);\nloop invariant j == 2 * i ==> (k == 3 * j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x1fffffff;\nloop invariant i3: 0 <= k <= 0x3fffffff;\nloop invariant i4: i <= j;\nloop invariant i5: j <= k;\nloop invariant i6: k <= 0x3fffffff ==> (k == (i + j));\n\nloop invariant i8: j <= 0x1fffffff ==> (j == 2 * i);\n\nloop invariant i10: i == 0 ==> (j == 0);\nloop invariant i11: j == 0 ==> (k == 0);\nloop invariant i12: i == 0 ==> (j == 2 * i);\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= 0x0fffffff is partially proven to be inductive.\nloop invariant 0 <= j <= 0x0fffffff * 2 is partially proven to be inductive.\nloop invariant 0 <= k <= 0x0fffffff * 3 is partially proven to be inductive.\nloop invariant i == (k - j) / 2 is partially proven to be inductive.\nloop invariant j == (i * 2) + (k - i) is partially proven to be inductive.\nloop invariant k == (i * 3) + (j - i) is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant j % 2 == 1 is preserved but not established.\nloop invariant k % 2 == 1 is partially proven to be inductive.\nloop invariant i <= k is partially proven to be inductive.\nloop invariant j <= k is partially proven to be inductive.\nloop invariant i + j == k is partially proven to be inductive.\nloop invariant k == i * 3 + j is partially proven to be inductive.\nloop invariant k == i * 3 + (i * 2) is partially proven to be inductive.\nloop invariant k == i * 5 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 1 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 2 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 3 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 4 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 5 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 6 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 7 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 8 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 9 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 10 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 11 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 12 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 13 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 14 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 15 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 16 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 17 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 18 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 19 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 20 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 21 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 22 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 23 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 24 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 25 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 26 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 27 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 28 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 29 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 30 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 31 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 32 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 33 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 34 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 35 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 36 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 37 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 38 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 39 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 40 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 41 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 42 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 43 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 44 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 45 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 46 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 47 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 48 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 49 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 50 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 51 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 52 is partially proven to be inductive.\nloop invariant k == i * 3 + j + 53 is partially proven to be inductive.\nloop invariant 0 <= k <= 0x0fffffff is partially proven to be inductive.\nloop invariant k == (i + j) ==> i == (k - j) is partially proven to be inductive.\nloop invariant k == (i + j) ==> j == (k - i) is partially proven to be inductive.\nloop invariant 0 <= i <= 0xffffffff is partially proven to be inductive.\nloop invariant 0 <= j <= 0xffffffff is partially proven to be inductive.\nloop invariant 0 <= k <= 0xffffffff is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant k == (i + j) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= (i + j) is partially proven to be inductive.\nloop invariant i + j >= k is partially proven to be inductive.\nloop invariant i <= (j + k/2) is partially proven to be inductive.\nloop invariant j <= (i + k/2) is partially proven to be inductive.\nloop invariant 0 <= j <= 0x0fffffff is partially proven to be inductive.\nloop invariant i == (j / 2) is partially proven to be inductive.\nloop invariant k == ((3 * j) - (3 * i)) is partially proven to be inductive.\nloop invariant k == (3 * (i + (j / 2))) is partially proven to be inductive.\nloop invariant k == (3 * i) + (3 * (j / 2)) is partially proven to be inductive.\nloop invariant 0 <= k < 0x0fffffff is partially proven to be inductive.\nloop invariant i >= k/3 is partially proven to be inductive.\nloop invariant j >= 2*(k/3) is partially proven to be inductive.\nloop invariant k%3 == 0 is partially proven to be inductive.\nloop invariant i%2 == 1 is partially proven to be inductive.\nloop invariant j%2 == 0 is partially proven to be inductive.\nloop invariant (i + j) == k is partially proven to be inductive.\nloop invariant i <= 255 is partially proven to be inductive.\nloop invariant j <= 255 is partially proven to be inductive.\nloop invariant k <= 0x0fffffff is partially proven to be inductive.\nloop invariant i <= k + 1 is partially proven to be inductive.\nloop invariant j <= k + 2 is partially proven to be inductive.\nloop invariant k == (0 + (i + 1)) is partially proven to be inductive.\nloop invariant k == (1 + (j + 1)) is partially proven to be inductive.\nloop invariant k == (2 + (k + 1)) is partially proven to be inductive.\nloop invariant 0 <= k - i <= 0x0fffffff is partially proven to be inductive.\nloop invariant 0 <= k - j <= 0x0fffffff is partially proven to be inductive.\nloop invariant i == 0 is partially proven to be inductive.\nloop invariant j == 0 is partially proven to be inductive.\nloop invariant k == 0 is partially proven to be inductive.\nloop invariant i <= 0x0fffffff is partially proven to be inductive.\nloop invariant j <= 0x0fffffff is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant 0 <= k is partially proven to be inductive.\nloop invariant k == 3 * i + 3 * j / 2 is partially proven to be inductive.\nloop invariant i == j / 2 is partially proven to be inductive.\nloop invariant j == 2 * i is partially proven to be inductive.\nloop invariant k == 3 * i + 3 * j / 2 ==> k < 0x0fffffff is partially proven to be inductive.\nloop invariant i == (k - 3 * j) / 3 is partially proven to be inductive.\nloop invariant j == (k - 3 * i) / 3 is partially proven to be inductive.\nloop invariant i * i + i == 3 * j is partially proven to be inductive.\nloop invariant j * j + j == 3 * i is partially proven to be inductive.\nloop invariant i + i == j is partially proven to be inductive.\nloop invariant j + j == i is partially proven to be inductive.\nloop invariant k >= 3*i is partially proven to be inductive.\nloop invariant k >= 2*j is partially proven to be inductive.\nloop invariant k < 0x0fffffff is partially proven to be inductive.\nloop invariant i == (k - j) / 3 is partially proven to be inductive.\nloop invariant j == 2*i is partially proven to be inductive.\nloop invariant k == 3*i + j is partially proven to be inductive.\nloop invariant k == (i + j) * (i + j + 1) / 2 - i * (i + 1) / 2 is partially proven to be inductive.\nloop invariant k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2 is partially proven to be inductive.\nloop invariant 0 <= j <= 0x1fffffff is partially proven to be inductive.\nloop invariant 0 <= k <= 0x3fffffff is partially proven to be inductive.\nloop invariant k <= 0x3fffffff ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant i <= 0x0fffffff ==> (i == 0) is partially proven to be inductive.\nloop invariant j <= 0x1fffffff ==> (j == 2 * i) is partially proven to be inductive.\nloop invariant k <= 0x3fffffff ==> (k == 3 * j) is partially proven to be inductive.\nloop invariant i == 0 ==> (j == 0) is partially proven to be inductive.\nloop invariant j == 0 ==> (k == 0) is partially proven to be inductive.\nloop invariant i == 0 ==> (j == 2 * i) is partially proven to be inductive.\nloop invariant j == 2 * i ==> (k == 3 * j) is partially proven to be inductive.\nAssertion k == i + j: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff * 2;\nloop invariant i3: 0 <= k <= 0x0fffffff * 3;\nloop invariant i4: i == (k - j) / 2;\nloop invariant i5: j == (i * 2) + (k - i);\nloop invariant i6: k == (i * 3) + (j - i);\nloop invariant i7: i % 3 == 0;\nloop invariant i8: j % 3 == 0;\nloop invariant i9: k % 3 == 0;\nloop invariant i10: i % 2 == 0;\nloop invariant i11: j % 2 == 1;\nloop invariant i12: k % 2 == 1;\nloop invariant i13: i <= k;\nloop invariant i14: j <= k;\nloop invariant i15: i + j == k;\nloop invariant i16: k == i * 3 + j;\nloop invariant i17: k == i * 3 + (i * 2);\nloop invariant i18: k == i * 5;\nloop invariant i19: k == i * 3 + j + 1;\nloop invariant i20: k == i * 3 + j + 2;\nloop invariant i21: k == i * 3 + j + 3;\nloop invariant i22: k == i * 3 + j + 4;\nloop invariant i23: k == i * 3 + j + 5;\nloop invariant i24: k == i * 3 + j + 6;\nloop invariant i25: k == i * 3 + j + 7;\nloop invariant i26: k == i * 3 + j + 8;\nloop invariant i27: k == i * 3 + j + 9;\nloop invariant i28: k == i * 3 + j + 10;\nloop invariant i29: k == i * 3 + j + 11;\nloop invariant i30: k == i * 3 + j + 12;\nloop invariant i31: k == i * 3 + j + 13;\nloop invariant i32: k == i * 3 + j + 14;\nloop invariant i33: k == i * 3 + j + 15;\nloop invariant i34: k == i * 3 + j + 16;\nloop invariant i35: k == i * 3 + j + 17;\nloop invariant i36: k == i * 3 + j + 18;\nloop invariant i37: k == i * 3 + j + 19;\nloop invariant i38: k == i * 3 + j + 20;\nloop invariant i39: k == i * 3 + j + 21;\nloop invariant i40: k == i * 3 + j + 22;\nloop invariant i41: k == i * 3 + j + 23;\nloop invariant i42: k == i * 3 + j + 24;\nloop invariant i43: k == i * 3 + j + 25;\nloop invariant i44: k == i * 3 + j + 26;\nloop invariant i45: k == i * 3 + j + 27;\nloop invariant i46: k == i * 3 + j + 28;\nloop invariant i47: k == i * 3 + j + 29;\nloop invariant i48: k == i * 3 + j + 30;\nloop invariant i49: k == i * 3 + j + 31;\nloop invariant i50: k == i * 3 + j + 32;\nloop invariant i51: k == i * 3 + j + 33;\nloop invariant i52: k == i * 3 + j + 34;\nloop invariant i53: k == i * 3 + j + 35;\nloop invariant i54: k == i * 3 + j + 36;\nloop invariant i55: k == i * 3 + j + 37;\nloop invariant i56: k == i * 3 + j + 38;\nloop invariant i57: k == i * 3 + j + 39;\nloop invariant i58: k == i * 3 + j + 40;\nloop invariant i59: k == i * 3 + j + 41;\nloop invariant i60: k == i * 3 + j + 42;\nloop invariant i61: k == i * 3 + j + 43;\nloop invariant i62: k == i * 3 + j + 44;\nloop invariant i63: k == i * 3 + j + 45;\nloop invariant i64: k == i * 3 + j + 46;\nloop invariant i65: k == i * 3 + j + 47;\nloop invariant i66: k == i * 3 + j + 48;\nloop invariant i67: k == i * 3 + j + 49;\nloop invariant i68: k == i * 3 + j + 50;\nloop invariant i69: k == i * 3 + j + 51;\nloop invariant i70: k == i * 3 + j + 52;\nloop invariant i71: k == i * 3 + j + 53;\nloop invariant i72: 0 <= k <= 0x0fffffff;\nloop invariant i73: k == (i + j) ==> i == (k - j);\nloop invariant i74: k == (i + j) ==> j == (k - i);\nloop invariant i75: 0 <= i <= 0xffffffff;\nloop invariant i76: 0 <= j <= 0xffffffff;\nloop invariant i77: 0 <= k <= 0xffffffff;\nloop invariant i78: i <= j;\nloop invariant i79: k == (i + j);\nloop invariant i80: i >= 0;\nloop invariant i81: j >= 0;\nloop invariant i82: k >= 0;\nloop invariant i83: k <= (i + j);\nloop invariant i84: i + j >= k;\nloop invariant i85: i <= (j + k/2);\nloop invariant i86: j <= (i + k/2);\nloop invariant i87: 0 <= j <= 0x0fffffff;\nloop invariant i88: i == (j / 2);\nloop invariant i89: k == ((3 * j) - (3 * i));\nloop invariant i90: k == (3 * (i + (j / 2)));\nloop invariant i91: k == (3 * i) + (3 * (j / 2));\nloop invariant i92: 0 <= k < 0x0fffffff;\nloop invariant i93: i >= k/3;\nloop invariant i94: j >= 2*(k/3);\nloop invariant i95: k%3 == 0;\nloop invariant i96: i%2 == 1;\nloop invariant i97: j%2 == 0;\nloop invariant i98: (i + j) == k;\nloop invariant i99: i <= 255;\nloop invariant i100: j <= 255;\nloop invariant i101: k <= 0x0fffffff;\nloop invariant i102: i <= k + 1;\nloop invariant i103: j <= k + 2;\nloop invariant i104: k == (0 + (i + 1));\nloop invariant i105: k == (1 + (j + 1));\nloop invariant i106: k == (2 + (k + 1));\nloop invariant i107: 0 <= k - i <= 0x0fffffff;\nloop invariant i108: 0 <= k - j <= 0x0fffffff;\nloop invariant i109: i == 0;\nloop invariant i110: j == 0;\nloop invariant i111: k == 0;\nloop invariant i112: i <= 0x0fffffff;\nloop invariant i113: j <= 0x0fffffff;\nloop invariant i114: 0 <= i;\nloop invariant i115: 0 <= j;\nloop invariant i116: 0 <= k;\nloop invariant i117: k == 3 * i + 3 * j / 2;\nloop invariant i118: i == j / 2;\nloop invariant i119: j == 2 * i;\nloop invariant i120: k == 3 * i + 3 * j / 2 ==> k < 0x0fffffff;\nloop invariant i121: i == (k - 3 * j) / 3;\nloop invariant i122: j == (k - 3 * i) / 3;\nloop invariant i123: i * i + i == 3 * j;\nloop invariant i124: j * j + j == 3 * i;\nloop invariant i125: i + i == j;\nloop invariant i126: j + j == i;\nloop invariant i127: k >= 3*i;\nloop invariant i128: k >= 2*j;\nloop invariant i129: k < 0x0fffffff;\nloop invariant i130: i == (k - j) / 3;\nloop invariant i131: j == 2*i;\nloop invariant i132: k == 3*i + j;\nloop invariant i133: k == (i + j) * (i + j + 1) / 2 - i * (i + 1) / 2;\nloop invariant i134: k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant i135: 0 <= j <= 0x1fffffff;\nloop invariant i136: 0 <= k <= 0x3fffffff;\nloop invariant i137: k <= 0x3fffffff ==> (k == (i + j));\nloop invariant i138: i <= 0x0fffffff ==> (i == 0);\nloop invariant i139: j <= 0x1fffffff ==> (j == 2 * i);\nloop invariant i140: k <= 0x3fffffff ==> (k == 3 * j);\nloop invariant i141: i == 0 ==> (j == 0);\nloop invariant i142: j == 0 ==> (k == 0);\nloop invariant i143: i == 0 ==> (j == 2 * i);\nloop invariant i144: j == 2 * i ==> (k == 3 * j);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
        "combined_annotation_num_solver_calls": 91,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff * 2;\nloop invariant i3: 0 <= k <= 0x0fffffff * 3;\n\n\n\n\n\nloop invariant i9: k % 3 == 0;\n\n\n\nloop invariant i13: i <= k;\nloop invariant i14: j <= k;\nloop invariant i15: i + j == k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: 0 <= k <= 0x0fffffff;\nloop invariant i73: k == (i + j) ==> i == (k - j);\nloop invariant i74: k == (i + j) ==> j == (k - i);\nloop invariant i75: 0 <= i <= 0xffffffff;\nloop invariant i76: 0 <= j <= 0xffffffff;\nloop invariant i77: 0 <= k <= 0xffffffff;\nloop invariant i78: i <= j;\nloop invariant i79: k == (i + j);\nloop invariant i80: i >= 0;\nloop invariant i81: j >= 0;\nloop invariant i82: k >= 0;\nloop invariant i83: k <= (i + j);\nloop invariant i84: i + j >= k;\nloop invariant i85: i <= (j + k/2);\nloop invariant i86: j <= (i + k/2);\nloop invariant i87: 0 <= j <= 0x0fffffff;\nloop invariant i88: i == (j / 2);\nloop invariant i89: k == ((3 * j) - (3 * i));\n\n\n\nloop invariant i93: i >= k/3;\nloop invariant i94: j >= 2*(k/3);\nloop invariant i95: k%3 == 0;\n\nloop invariant i97: j%2 == 0;\nloop invariant i98: (i + j) == k;\n\n\nloop invariant i101: k <= 0x0fffffff;\nloop invariant i102: i <= k + 1;\nloop invariant i103: j <= k + 2;\n\n\n\nloop invariant i107: 0 <= k - i <= 0x0fffffff;\nloop invariant i108: 0 <= k - j <= 0x0fffffff;\n\n\n\nloop invariant i112: i <= 0x0fffffff;\nloop invariant i113: j <= 0x0fffffff;\nloop invariant i114: 0 <= i;\nloop invariant i115: 0 <= j;\nloop invariant i116: 0 <= k;\n\nloop invariant i118: i == j / 2;\nloop invariant i119: j == 2 * i;\nloop invariant i120: k == 3 * i + 3 * j / 2 ==> k < 0x0fffffff;\n\n\n\n\nloop invariant i125: i + i == j;\n\nloop invariant i127: k >= 3*i;\n\n\n\nloop invariant i131: j == 2*i;\n\n\nloop invariant i134: k == (i + j) * (i + j + 1) / 2 - (i + j) * (i + j - 1) / 2;\nloop invariant i135: 0 <= j <= 0x1fffffff;\nloop invariant i136: 0 <= k <= 0x3fffffff;\nloop invariant i137: k <= 0x3fffffff ==> (k == (i + j));\n\nloop invariant i139: j <= 0x1fffffff ==> (j == 2 * i);\n\nloop invariant i141: i == 0 ==> (j == 0);\nloop invariant i142: j == 0 ==> (k == 0);\nloop invariant i143: i == 0 ==> (j == 2 * i);\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 96,
        "success_count": 84,
        "failure_count": 12,
        "success_rate": 0.875
    }
}