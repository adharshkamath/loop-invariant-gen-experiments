{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/35.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= 40;\nloop invariant c != 40 ==> c == 1;\nloop invariant c == 40 ==> c != 1;\nloop invariant c >= 0;\nloop invariant c <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= 40 ==> c != 40;\nloop invariant c != 40 ==> c >= 0;\nloop invariant c != 40 ==> c <= 40;\nloop invariant c != 40 ==> c == c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c != 40 ==> (c >= 0));\nloop invariant (c == 40 ==> (c == 1));\nloop invariant 0 <= c <= 40;\nloop invariant (c != 40 ==> (c >= 0));\nloop invariant (c == 40 ==> (c == 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c <= 1 + c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 2;\nloop invariant 40 <= c ==> (c = 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c; loop invariant c <= 40; loop invariant (c == 40) ==> (c == 1); loop invariant (c != 40) ==> (c != 1); loop invariant c <= 40; loop invariant c >= 0; loop invariant (c != 40) ==> (unknown() ==> (c == 0)); loop invariant (c != 40) ==> ((!unknown() ==> (c == 1))); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() || !unknown())); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown()));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= 40 ==> c <= 40;\nloop invariant 1 <= c <= 40 ==> c >= 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c >= 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c <= 40;\nloop invariant 1 <= c <= 40 ==> c == 40 ==> c != 40;\nloop invariant 1 <= c <= 40 ==> c == 40 ==> c == 1;\nloop invariant 1 <= c <= 40 ==> c == 1 ==> c != 40;\nloop invariant 1 <= c <= 40 ==> c == 1 ==> c == 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c == 40 ==> c == 1;\nloop invariant 1 <= c <= 40 ==> c == 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= 40;\nloop invariant c == 1 ==> c >= 0;\nloop invariant c == 40 ==> c >= 0;\nloop invariant c != 40 ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c <= 40 ==> c < 40;\nloop invariant c >= 40 ==> c == 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c >= 40 ==> c >= 40;\nloop invariant c <= 40 ==> c >= c;\nloop invariant c >= 40 ==> c >= c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c == 40 || c == 1;\nloop invariant c == 40 ==> \\at(c, Pre) == 0;\nloop invariant c == 1 ==> \\at(c, Pre) == 40;\nloop invariant c == 40 ==> \\at(c, Post) == 40;\nloop invariant c == 1 ==> \\at(c, Post) == 1;\nloop invariant c == 40 ==> unknown() ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;loop invariant (c == 40) ==> (c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c <= 40 ==> c == 40;\nloop invariant c >= 0 ==> c < 40;\nloop invariant c == 40 ==> c == 1;\nloop invariant c == 0 ==> c == 0;\nloop invariant c == 40 ==> c != 40;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == 1 ==> c != 40;\nloop invariant c == 0 ==> c != 40;\nloop invariant c != 40 ==> c != 40;\nloop invariant c != 40 ==> c == 0;\nloop invariant c != 40 ==> c == 1;\nloop invariant c != 40 ==> c >= 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> c <= 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c >= 1;\nloop invariant c >= c;\nloop invariant c >= 0;\nloop invariant c >= 1 ==> c <= 40;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c >= 1;\nloop invariant c >= 1 ==> c <= 40;\nloop invariant c >= 1 ==> c <= 40;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c >= 0;\nloop invariant c <= 40;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= 40;\nloop invariant c != 40 ==> c == 1;\nloop invariant c == 40 ==> c != 1;\nloop invariant c >= 0;\nloop invariant c <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\nloop invariant i3: c == 40 ==> c != 1;\nloop invariant i4: c >= 0;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= 40 ==> c != 40;\nloop invariant c != 40 ==> c >= 0;\nloop invariant c != 40 ==> c <= 40;\nloop invariant c != 40 ==> c == c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: c != 40 ==> c >= 0;\nloop invariant i3: c != 40 ==> c <= 40;\nloop invariant i4: c != 40 ==> c == c;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant (c != 40 ==> (c >= 0));\nloop invariant (c == 40 ==> (c == 1));\nloop invariant 0 <= c <= 40;\nloop invariant (c != 40 ==> (c >= 0));\nloop invariant (c == 40 ==> (c == 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: (c != 40 ==> (c >= 0));\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c <= 1 + c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: c <= 1 + c;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 2;\nloop invariant 40 <= c ==> (c = 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c; loop invariant c <= 40; loop invariant (c == 40) ==> (c == 1); loop invariant (c != 40) ==> (c != 1); loop invariant c <= 40; loop invariant c >= 0; loop invariant (c != 40) ==> (unknown() ==> (c == 0)); loop invariant (c != 40) ==> ((!unknown() ==> (c == 1))); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() || !unknown())); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown()));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= 40 ==> c <= 40;\nloop invariant 1 <= c <= 40 ==> c >= 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c >= 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c <= 40;\nloop invariant 1 <= c <= 40 ==> c == 40 ==> c != 40;\nloop invariant 1 <= c <= 40 ==> c == 40 ==> c == 1;\nloop invariant 1 <= c <= 40 ==> c == 1 ==> c != 40;\nloop invariant 1 <= c <= 40 ==> c == 1 ==> c == 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c == 40 ==> c == 1;\nloop invariant 1 <= c <= 40 ==> c == 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant 1 <= c <= 40 ==> c != 40 ==> c != 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 1 <= c <= 40 ==> c <= 40;\nloop invariant i2: 1 <= c <= 40 ==> c >= 1;\nloop invariant i3: 1 <= c <= 40 ==> c != 40 ==> c >= 1;\nloop invariant i4: 1 <= c <= 40 ==> c != 40 ==> c <= 40;\n\n\nloop invariant i7: 1 <= c <= 40 ==> c == 1 ==> c != 40;\nloop invariant i8: 1 <= c <= 40 ==> c == 1 ==> c == 1;\n\nloop invariant i10: 1 <= c <= 40 ==> c == 40 ==> c != 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= 40;\nloop invariant c == 1 ==> c >= 0;\nloop invariant c == 40 ==> c >= 0;\nloop invariant c != 40 ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: c == 1 ==> c >= 0;\nloop invariant i3: c == 40 ==> c >= 0;\nloop invariant i4: c != 40 ==> c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c <= 40 ==> c < 40;\nloop invariant c >= 40 ==> c == 40;\nloop invariant c <= 40 ==> c >= 0;\nloop invariant c >= 40 ==> c >= 40;\nloop invariant c <= 40 ==> c >= c;\nloop invariant c >= 40 ==> c >= c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\nloop invariant i3: c >= 40 ==> c == 40;\nloop invariant i4: c <= 40 ==> c >= 0;\nloop invariant i5: c >= 40 ==> c >= 40;\nloop invariant i6: c <= 40 ==> c >= c;\nloop invariant i7: c >= 40 ==> c >= c;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c == 40 || c == 1;\nloop invariant c == 40 ==> \\at(c, Pre) == 0;\nloop invariant c == 1 ==> \\at(c, Pre) == 40;\nloop invariant c == 40 ==> \\at(c, Post) == 40;\nloop invariant c == 1 ==> \\at(c, Post) == 1;\nloop invariant c == 40 ==> unknown() ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;loop invariant (c == 40) ==> (c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;loop invariant (c == 40) ==> (c >= 0);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c <= 40 ==> c == 40;\nloop invariant c >= 0 ==> c < 40;\nloop invariant c == 40 ==> c == 1;\nloop invariant c == 0 ==> c == 0;\nloop invariant c == 40 ==> c != 40;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == 1 ==> c != 40;\nloop invariant c == 0 ==> c != 40;\nloop invariant c != 40 ==> c != 40;\nloop invariant c != 40 ==> c == 0;\nloop invariant c != 40 ==> c == 1;\nloop invariant c != 40 ==> c >= 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> c <= 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 0;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 40;\nloop invariant c >= 0 ==> c != 40;\nloop invariant c >= 0 ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\n\n\nloop invariant i5: c == 0 ==> c == 0;\n\nloop invariant i7: c == 1 ==> c == 1;\nloop invariant i8: c == 1 ==> c != 40;\nloop invariant i9: c == 0 ==> c != 40;\nloop invariant i10: c != 40 ==> c != 40;\n\n\nloop invariant i13: c != 40 ==> c >= 0;\n\n\n\n\nloop invariant i18: c >= 0 ==> c >= 0;\nloop invariant i19: c >= 0 ==> c <= 40;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c >= 1;\nloop invariant c >= c;\nloop invariant c >= 0;\nloop invariant c >= 1 ==> c <= 40;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c >= 1;\nloop invariant c >= 1 ==> c <= 40;\nloop invariant c >= 1 ==> c <= 40;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\n\nloop invariant i3: c >= c;\nloop invariant i4: c >= 0;\nloop invariant i5: c >= 1 ==> c <= 40;\nloop invariant i6: c >= 1 ==> c >= 0;\nloop invariant i7: c >= 1 ==> c >= 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 40;\nloop invariant c >= 0;\nloop invariant c <= 40;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 40;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= 40;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 1 <= c <= 40;\nloop invariant i2: c != 40 ==> c == 1;\nloop invariant i3: c == 40 ==> c != 1;\nloop invariant i4: c >= 0;\nloop invariant i5: c <= 1;\nloop invariant i6: 1 <= c <= 40 ==> c != 40;\nloop invariant i7: c != 40 ==> c >= 0;\nloop invariant i8: c != 40 ==> c <= 40;\nloop invariant i9: c != 40 ==> c == c;\nloop invariant i10: 0 <= c <= 40;\nloop invariant i11: (c != 40 ==> (c >= 0));\nloop invariant i12: (c == 40 ==> (c == 1));\nloop invariant i13: c <= 1 + c;\nloop invariant i14: 0 <= c <= 2;\nloop invariant i15: 40 <= c ==> (c = 1);\nloop invariant i16: 0 <= c; loop invariant c <= 40; loop invariant (c == 40) ==> (c == 1); loop invariant (c != 40) ==> (c != 1); loop invariant c <= 40; loop invariant c >= 0; loop invariant (c != 40) ==> (unknown() ==> (c == 0)); loop invariant (c != 40) ==> ((!unknown() ==> (c == 1))); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() || !unknown())); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown())); loop invariant (c == 40) ==> (unknown() && !unknown()); loop invariant (c == 40) ==> (unknown()); loop invariant (c == 40) ==> (!unknown()); loop invariant (c == 40) ==> ((unknown() && !unknown()) || (unknown() && !unknown()));\nloop invariant i17: 1 <= c <= 40 ==> c <= 40;\nloop invariant i18: 1 <= c <= 40 ==> c >= 1;\nloop invariant i19: 1 <= c <= 40 ==> c != 40 ==> c >= 1;\nloop invariant i20: 1 <= c <= 40 ==> c != 40 ==> c <= 40;\nloop invariant i21: 1 <= c <= 40 ==> c == 40 ==> c != 40;\nloop invariant i22: 1 <= c <= 40 ==> c == 40 ==> c == 1;\nloop invariant i23: 1 <= c <= 40 ==> c == 1 ==> c != 40;\nloop invariant i24: 1 <= c <= 40 ==> c == 1 ==> c == 1;\nloop invariant i25: 1 <= c <= 40 ==> c != 40 ==> c != 1;\nloop invariant i26: 1 <= c <= 40 ==> c == 40 ==> c != 1;\nloop invariant i27: c == 1 ==> c >= 0;\nloop invariant i28: c == 40 ==> c >= 0;\nloop invariant i29: c <= 40 ==> c < 40;\nloop invariant i30: c >= 40 ==> c == 40;\nloop invariant i31: c <= 40 ==> c >= 0;\nloop invariant i32: c >= 40 ==> c >= 40;\nloop invariant i33: c <= 40 ==> c >= c;\nloop invariant i34: c >= 40 ==> c >= c;\nloop invariant i35: c == 40 || c == 1;\nloop invariant i36: c == 40 ==> \\at(c, Pre) == 0;\nloop invariant i37: c == 1 ==> \\at(c, Pre) == 40;\nloop invariant i38: c == 40 ==> \\at(c, Post) == 40;\nloop invariant i39: c == 1 ==> \\at(c, Post) == 1;\nloop invariant i40: c == 40 ==> unknown() ==> \\at(c, Loop) == c;\nloop invariant i41: c == 1 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant i42: c == 40 ==> \\at(unknown(), Loop) ==> \\at(c, Loop) == c;\nloop invariant i43: 0 <= c <= 40;loop invariant (c == 40) ==> (c >= 0);\nloop invariant i44: c <= 40 ==> c == 40;\nloop invariant i45: c >= 0 ==> c < 40;\nloop invariant i46: c == 40 ==> c == 1;\nloop invariant i47: c == 0 ==> c == 0;\nloop invariant i48: c == 40 ==> c != 40;\nloop invariant i49: c == 1 ==> c == 1;\nloop invariant i50: c == 1 ==> c != 40;\nloop invariant i51: c == 0 ==> c != 40;\nloop invariant i52: c != 40 ==> c != 40;\nloop invariant i53: c != 40 ==> c == 0;\nloop invariant i54: c >= 0 ==> c != 40;\nloop invariant i55: c >= 0 ==> c == 0;\nloop invariant i56: c >= 0 ==> c == 1;\nloop invariant i57: c >= 0 ==> c == 40;\nloop invariant i58: c >= 0 ==> c >= 0;\nloop invariant i59: c >= 0 ==> c <= 40;\nloop invariant i60: c >= 1;\nloop invariant i61: c >= c;\nloop invariant i62: c >= 1 ==> c <= 40;\nloop invariant i63: c >= 1 ==> c >= 0;\nloop invariant i64: c >= 1 ==> c >= 1;\nloop invariant i65: c <= 40;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 31,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\nloop invariant i3: c == 40 ==> c != 1;\nloop invariant i4: c >= 0;\n\n\nloop invariant i7: c != 40 ==> c >= 0;\nloop invariant i8: c != 40 ==> c <= 40;\nloop invariant i9: c != 40 ==> c == c;\nloop invariant i10: 0 <= c <= 40;\nloop invariant i11: (c != 40 ==> (c >= 0));\n\nloop invariant i13: c <= 1 + c;\n\n\n\nloop invariant i17: 1 <= c <= 40 ==> c <= 40;\nloop invariant i18: 1 <= c <= 40 ==> c >= 1;\nloop invariant i19: 1 <= c <= 40 ==> c != 40 ==> c >= 1;\nloop invariant i20: 1 <= c <= 40 ==> c != 40 ==> c <= 40;\n\n\nloop invariant i23: 1 <= c <= 40 ==> c == 1 ==> c != 40;\nloop invariant i24: 1 <= c <= 40 ==> c == 1 ==> c == 1;\n\nloop invariant i26: 1 <= c <= 40 ==> c == 40 ==> c != 1;\nloop invariant i27: c == 1 ==> c >= 0;\nloop invariant i28: c == 40 ==> c >= 0;\n\nloop invariant i30: c >= 40 ==> c == 40;\nloop invariant i31: c <= 40 ==> c >= 0;\nloop invariant i32: c >= 40 ==> c >= 40;\nloop invariant i33: c <= 40 ==> c >= c;\nloop invariant i34: c >= 40 ==> c >= c;\n\n\n\n\n\n\n\n\nloop invariant i43: 0 <= c <= 40;loop invariant (c == 40) ==> (c >= 0);\n\n\n\nloop invariant i47: c == 0 ==> c == 0;\n\nloop invariant i49: c == 1 ==> c == 1;\nloop invariant i50: c == 1 ==> c != 40;\nloop invariant i51: c == 0 ==> c != 40;\nloop invariant i52: c != 40 ==> c != 40;\n\n\n\n\n\nloop invariant i58: c >= 0 ==> c >= 0;\nloop invariant i59: c >= 0 ==> c <= 40;\n\nloop invariant i61: c >= c;\nloop invariant i62: c >= 1 ==> c <= 40;\nloop invariant i63: c >= 1 ==> c >= 0;\nloop invariant i64: c >= 1 ==> c >= 1;\nloop invariant i65: c <= 40;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 26,
        "success_count": 19,
        "failure_count": 7,
        "success_rate": 0.7307692307692307
    }
}