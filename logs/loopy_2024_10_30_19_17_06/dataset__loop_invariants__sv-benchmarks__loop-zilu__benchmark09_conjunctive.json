{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  while (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x <= 0 ==> y == 0;\nloop invariant x >= y ==> y == 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant x >= y ==> y == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= y ==> y >= x;\nloop invariant x >= y ==> y >= 0;\nloop invariant x >= y ==> x >= 0;\nloop invariant x >= y ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + y;\n*/\n```",
            "```\n/*@\nloop invariant 1 < x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y; (initially x==y) loop invariant x>=0 && y>=0; (if x<0 || y<0 then break) loop invariant x<=y && x<=y; (x-- and y--) loop invariant x==0 || y==0; (break condition) loop invariant x==0 ==> y==0; (if x==0 then y==0) loop invariant x==0 || y==0 ==> x==0; (if y==0 then x==0) loop invariant x==0 ==> y==0 && x==0; (if x==0 then y==0 and x==0) loop invariant x==0 && y==0; (if x==0 and y==0 then x==0 and y==0) loop invariant x==0 ==> y==0 && x==0 && y==0; (if x==0 then y==0 and x==0 and y==0) loop invariant x==0 && y==0 ==> x==0 && y==0; (if y==0 and x==0 then x==0 and y==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0 && x==0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y == x;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0 && y >= 0 && y <= x;\nloop invariant x >= y && x <= y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant (x - y) <= x;\nloop invariant (y - x) <= 0;\nloop invariant (x - y) >= 0;\nloop invariant (x - y) <= (x - 1);\nloop invariant (y - x) >= (y - 1);\nloop invariant (x - y) >= x;\nloop invariant (y - x) <= y;\nloop invariant (x - y) <= (y - 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= y;\nloop invariant x >= y;\nloop invariant y <= (x - 1);\nloop invariant x >= (y + 1);\nloop invariant y >= (x - 1);\nloop invariant x >= (y + 1);\nloop invariant y <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x - y >= 0;\nloop invariant x - y <= 100000;\nloop invariant y >= 1;\nloop invariant y <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= 100000 + y;\nloop invariant x >= 1;\nloop invariant x <= 100000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= 100000 + y;\nloop invariant x >= 1;\nloop invariant x <= 100000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= MAX_INT;\nloop invariant 0 <= y <= MAX_INT;\nloop invariant x >= y;\nloop invariant x - y == x0 - y0;\nloop invariant y >= y0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x - y <= y;\nloop invariant y - x <= x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x != y;\nloop invariant y == x || y != x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x == y ==> x == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant y == 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x <= 0 ==> y == 0;\nloop invariant x >= y ==> y == 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant x >= y ==> y == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= y ==> y >= x;\nloop invariant x >= y ==> y >= 0;\nloop invariant x >= y ==> x >= 0;\nloop invariant x >= y ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= x;\n\nloop invariant i8: y == 0 ==> x == 0;\nloop invariant i9: y >= 0 ==> x >= 0;\nloop invariant i10: x >= 0 ==> y >= 0;\nloop invariant i11: x >= y ==> y >= x;\nloop invariant i12: x >= y ==> y >= 0;\nloop invariant i13: x >= y ==> x >= 0;\nloop invariant i14: x >= y ==> y == 0 ==> x == 0;\nloop invariant i15: x >= y ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i16: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i17: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i18: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i19: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i20: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i21: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i22: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i23: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i24: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i25: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i26: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i27: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i28: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i29: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\n\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\nloop invariant (x == y) => (x >= y);\nloop invariant (x == y) => (y >= x);\nloop invariant (x == y) => (x >= 0);\nloop invariant (x == y) => (y >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n\n\n\n\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: y >= 0;\n\nloop invariant i3: x >= y;\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 < x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y; (initially x==y) loop invariant x>=0 && y>=0; (if x<0 || y<0 then break) loop invariant x<=y && x<=y; (x-- and y--) loop invariant x==0 || y==0; (break condition) loop invariant x==0 ==> y==0; (if x==0 then y==0) loop invariant x==0 || y==0 ==> x==0; (if y==0 then x==0) loop invariant x==0 ==> y==0 && x==0; (if x==0 then y==0 and x==0) loop invariant x==0 && y==0; (if x==0 and y==0 then x==0 and y==0) loop invariant x==0 ==> y==0 && x==0 && y==0; (if x==0 then y==0 and x==0 and y==0) loop invariant x==0 && y==0 ==> x==0 && y==0; (if y==0 and x==0 then x==0 and y==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0 && x==0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y == x;\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0 && y >= 0 && y <= x;\nloop invariant x >= y && x <= y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: x >= 0 && y >= 0 && y <= x;\nloop invariant i2: x >= y && x <= y + 1;\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant (x - y) <= x;\nloop invariant (y - x) <= 0;\nloop invariant (x - y) >= 0;\nloop invariant (x - y) <= (x - 1);\nloop invariant (y - x) >= (y - 1);\nloop invariant (x - y) >= x;\nloop invariant (y - x) <= y;\nloop invariant (x - y) <= (y - 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= y;\nloop invariant x >= y;\nloop invariant y <= (x - 1);\nloop invariant x >= (y + 1);\nloop invariant y >= (x - 1);\nloop invariant x >= (y + 1);\nloop invariant y <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\nloop invariant (x - y) <= (y + 1);\nloop invariant (y - x) >= (x - 1);\nloop invariant (x - y) >= (y + 1);\nloop invariant (y - x) <= (x - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= x;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: y <= x;\nloop invariant i5: (x - y) <= x;\nloop invariant i6: (y - x) <= 0;\nloop invariant i7: (x - y) >= 0;\n\n\n\nloop invariant i11: (y - x) <= y;\n\n\n\nloop invariant i15: x >= y;\n\n\nloop invariant i18: y >= (x - 1);\nloop invariant i19: (x - y) <= (y + 1);\n\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x - y >= 0;\nloop invariant x - y <= 100000;\nloop invariant y >= 1;\nloop invariant y <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= 100000 + y;\nloop invariant x >= 1;\nloop invariant x <= 100000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= y + 1;\nloop invariant x <= 100000 + y;\nloop invariant x >= 1;\nloop invariant x <= 100000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\n\n\nloop invariant i3: y >= 0;\nloop invariant i4: x - y >= 0;\nloop invariant i5: x - y <= 100000;\n\n\n\nloop invariant i9: x <= 100000 + y;\n\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= MAX_INT;\nloop invariant 0 <= y <= MAX_INT;\nloop invariant x >= y;\nloop invariant x - y == x0 - y0;\nloop invariant y >= y0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\n\n\nloop invariant i3: x >= y;\n\n\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x - y <= y;\nloop invariant y - x <= x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x != y;\nloop invariant y == x || y != x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\nloop invariant y == x || y < x;\nloop invariant x == y || x >= y;\nloop invariant y == x || y >= x;\nloop invariant x == y || x <= y;\nloop invariant y == x || y <= x;\nloop invariant x == y || x == y;\nloop invariant y == x || y == y;\nloop invariant x == y || x > y;\nloop invariant y == x || y > x;\nloop invariant x == y || x < y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= x;\nloop invariant i2: x >= y;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: x - y <= y;\nloop invariant i6: y - x <= x;\nloop invariant i7: x == y || x < y;\nloop invariant i8: y == x || y < x;\nloop invariant i9: x == y || x > y;\nloop invariant i10: y == x || y > x;\nloop invariant i11: x == y || x != y;\nloop invariant i12: y == x || y != x;\nloop invariant i13: x == y || x >= y;\nloop invariant i14: y == x || y >= x;\nloop invariant i15: x == y || x <= y;\nloop invariant i16: y == x || y <= x;\nloop invariant i17: x == y || x == y;\nloop invariant i18: y == x || y == y;\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x == y ==> x == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant y == 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= y;\nloop invariant i4: x <= y + 1;\n\n\nloop invariant i7: y == 0 ==> x >= 0;\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 48: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x <= 0 ==> y == 0;\nloop invariant i3: x >= y ==> y == 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= x;\nloop invariant i7: x == 0 ==> y == 0;\nloop invariant i8: y == 0 ==> x == 0;\nloop invariant i9: y >= 0 ==> x >= 0;\nloop invariant i10: x >= 0 ==> y >= 0;\nloop invariant i11: x >= y ==> y >= x;\nloop invariant i12: x >= y ==> y >= 0;\nloop invariant i13: x >= y ==> x >= 0;\nloop invariant i14: x >= y ==> y == 0 ==> x == 0;\nloop invariant i15: x >= y ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i16: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i17: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i18: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i19: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i20: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i21: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i22: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i23: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i24: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i25: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i26: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i27: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i28: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i29: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i30: 0 <= y <= 100000;\nloop invariant i31: x >= (1 + (y - 1) * y / 2);\nloop invariant i32: (x == y) => (x >= 0);\nloop invariant i33: (x == y) => (y >= 0);\nloop invariant i34: (x == y) => (x >= y);\nloop invariant i35: (x == y) => (y >= x);\nloop invariant i36: x >= 1;\nloop invariant i37: x >= y;\nloop invariant i38: x >= 1 + y;\nloop invariant i39: 1 < x <= y;\nloop invariant i40: 0 <= x <= y; (initially x==y) loop invariant x>=0 && y>=0; (if x<0 || y<0 then break) loop invariant x<=y && x<=y; (x-- and y--) loop invariant x==0 || y==0; (break condition) loop invariant x==0 ==> y==0; (if x==0 then y==0) loop invariant x==0 || y==0 ==> x==0; (if y==0 then x==0) loop invariant x==0 ==> y==0 && x==0; (if x==0 then y==0 and x==0) loop invariant x==0 && y==0; (if x==0 and y==0 then x==0 and y==0) loop invariant x==0 ==> y==0 && x==0 && y==0; (if x==0 then y==0 and x==0 and y==0) loop invariant x==0 && y==0 ==> x==0 && y==0; (if y==0 and x==0 then x==0 and y==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if y==0 and x==0 then x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 ==> y==0 && x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0 && x==0; (if x==0 then y==0 and x==0 and y==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0) loop invariant x==0 && y==0 ==> x==0 && y==0 && x==0 && x==0 && x==0 && x==0 && x==0 && x==0;\nloop invariant i41: y == x;\nloop invariant i42: x >= 0 && y >= 0 && y <= x;\nloop invariant i43: x >= y && x <= y + 1;\nloop invariant i44: 0 <= y <= x;\nloop invariant i45: y <= x;\nloop invariant i46: (x - y) <= x;\nloop invariant i47: (y - x) <= 0;\nloop invariant i48: (x - y) >= 0;\nloop invariant i49: (x - y) <= (x - 1);\nloop invariant i50: (y - x) >= (y - 1);\nloop invariant i51: (x - y) >= x;\nloop invariant i52: (y - x) <= y;\nloop invariant i53: (x - y) <= (y - 1);\nloop invariant i54: (y - x) >= (x - 1);\nloop invariant i55: (x - y) >= y;\nloop invariant i56: y <= (x - 1);\nloop invariant i57: x >= (y + 1);\nloop invariant i58: y >= (x - 1);\nloop invariant i59: (x - y) <= (y + 1);\nloop invariant i60: (x - y) >= (y + 1);\nloop invariant i61: (y - x) <= (x - 1);\nloop invariant i62: 0 <= x <= 100000;\nloop invariant i63: x - y >= 0;\nloop invariant i64: x - y <= 100000;\nloop invariant i65: y >= 1;\nloop invariant i66: y <= 100000;\nloop invariant i67: x >= y + 1;\nloop invariant i68: x <= 100000 + y;\nloop invariant i69: x <= 100000;\nloop invariant i70: 0 <= x <= MAX_INT;\nloop invariant i71: 0 <= y <= MAX_INT;\nloop invariant i72: x - y == x0 - y0;\nloop invariant i73: y >= y0;\nloop invariant i74: x - y <= y;\nloop invariant i75: y - x <= x;\nloop invariant i76: x == y || x < y;\nloop invariant i77: y == x || y < x;\nloop invariant i78: x == y || x > y;\nloop invariant i79: y == x || y > x;\nloop invariant i80: x == y || x != y;\nloop invariant i81: y == x || y != x;\nloop invariant i82: x == y || x >= y;\nloop invariant i83: y == x || y >= x;\nloop invariant i84: x == y || x <= y;\nloop invariant i85: y == x || y <= x;\nloop invariant i86: x == y || x == y;\nloop invariant i87: y == x || y == y;\nloop invariant i88: x <= y + 1;\nloop invariant i89: x == y ==> x == 0;\nloop invariant i90: y == 0 ==> x >= 0;\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 21,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x <= 0 ==> y == 0;\n\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= x;\nloop invariant i7: x == 0 ==> y == 0;\nloop invariant i8: y == 0 ==> x == 0;\nloop invariant i9: y >= 0 ==> x >= 0;\nloop invariant i10: x >= 0 ==> y >= 0;\nloop invariant i11: x >= y ==> y >= x;\nloop invariant i12: x >= y ==> y >= 0;\nloop invariant i13: x >= y ==> x >= 0;\nloop invariant i14: x >= y ==> y == 0 ==> x == 0;\nloop invariant i15: x >= y ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i16: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i17: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i18: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i19: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i20: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i21: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i22: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i23: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i24: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i25: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i26: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i27: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\nloop invariant i28: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0;\nloop invariant i29: x >= y ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0 ==> x == 0 ==> y == 0;\n\n\n\n\n\n\n\nloop invariant i37: x >= y;\n\n\n\nloop invariant i41: y == x;\nloop invariant i42: x >= 0 && y >= 0 && y <= x;\nloop invariant i43: x >= y && x <= y + 1;\nloop invariant i44: 0 <= y <= x;\nloop invariant i45: y <= x;\nloop invariant i46: (x - y) <= x;\nloop invariant i47: (y - x) <= 0;\nloop invariant i48: (x - y) >= 0;\n\n\n\nloop invariant i52: (y - x) <= y;\n\n\n\n\n\nloop invariant i58: y >= (x - 1);\nloop invariant i59: (x - y) <= (y + 1);\n\n\n\nloop invariant i63: x - y >= 0;\nloop invariant i64: x - y <= 100000;\n\n\n\nloop invariant i68: x <= 100000 + y;\n\n\n\n\n\nloop invariant i74: x - y <= y;\nloop invariant i75: y - x <= x;\nloop invariant i76: x == y || x < y;\nloop invariant i77: y == x || y < x;\nloop invariant i78: x == y || x > y;\nloop invariant i79: y == x || y > x;\nloop invariant i80: x == y || x != y;\nloop invariant i81: y == x || y != x;\nloop invariant i82: x == y || x >= y;\nloop invariant i83: y == x || y >= x;\nloop invariant i84: x == y || x <= y;\nloop invariant i85: y == x || y <= x;\nloop invariant i86: x == y || x == y;\nloop invariant i87: y == x || y == y;\nloop invariant i88: x <= y + 1;\n\nloop invariant i90: y == 0 ==> x >= 0;\n*/\nwhile (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c"
        ],
        "skipped": [],
        "total": 130,
        "success_count": 112,
        "failure_count": 18,
        "success_rate": 0.8615384615384616
    }
}