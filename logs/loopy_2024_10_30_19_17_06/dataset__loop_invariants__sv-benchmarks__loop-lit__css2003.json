{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i > 0;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant i >= k;\nloop invariant j >= i;\nloop invariant j >= i + (k * (i - 1)) / 2;\nloop invariant j <= i + (k * (i - 1)) / 2 + i;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 2 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 2 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 3 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 3 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 3 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 3 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 4 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 4 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 4 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 4 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 5 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 5 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 5 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 5 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 6 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 6 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 6 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 6 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 7 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 7 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 7 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 7 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 8 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 8 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 8 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 8 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 9 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 9 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 9 * k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k && k <= 1;\nloop invariant i > 1;\nloop invariant j = j + k;\nloop invariant k < 0;\nloop invariant 0 <= k && k <= 1;\nloop invariant i > 1;\nloop invariant j = j + k;\nloop invariant k < 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i && i < LARGE_INT;\nloop invariant 1 <= j && j <= i * k;\nloop invariant j == i * k + 1;\nloop invariant k == 1 - i + k;\nloop invariant j == i * (k + 1) + 1;\nloop invariant j == i * k + i + 1;\nloop invariant j == i * (k + 1) + i + 1;\nloop invariant j == i * k + i * (k + 1) + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i + k >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i && i < LARGE_INT;\nloop invariant 1 <= j && j <= i * k;\nloop invariant 1 <= k <= i;\nloop invariant 1 <= i + k && i + k <= 2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant i + k <= 2;\nloop invariant j >= i;\nloop invariant j <= i + (1 - k);\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= 2;\nloop invariant j >= i;\nloop invariant j <= i + (1 - k);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= j <= 2 * (LARGE_INT - 1);\nloop invariant i + k >= 1;\nloop invariant i + k <= 2 * (LARGE_INT - 1);\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j <= i + k;\nloop invariant j >= i;\nloop invariant i <= LARGE_INT;\nloop invariant k <= 1;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant i <= LARGE_INT - 1;\nloop invariant k >= 0;\nloop invariant j >= i + (k * (k + 1)) / 2;\nloop invariant j <= LARGE_INT + (k * (k + 1)) / 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= k + 1;\nloop invariant k >= 0;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2 * j;\nloop invariant i + k >= j;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j >= 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= LARGE_INT;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= 1 + k * i;\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= LARGE_INT + 1 - 1;\nloop invariant i + k >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant i > 0;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant i >= k;\nloop invariant j >= i;\nloop invariant j >= i + (k * (i - 1)) / 2;\nloop invariant j <= i + (k * (i - 1)) / 2 + i;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 2 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 2 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 3 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 3 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 3 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 3 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 4 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 4 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 4 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 4 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 5 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 5 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 5 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 5 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 6 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 6 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 6 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 6 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 7 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 7 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 7 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 7 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 8 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 8 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 8 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 8 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 9 * k;\nloop invariant j <= i + (k * (i - 1)) / 2 + 2 * i + 9 * k + k;\nloop invariant j <= i + (k * (i - 1)) / 2 + i + 9 * k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: i > 0;\nloop invariant i2: i < LARGE_INT;\n\n\nloop invariant i5: k <= 1;\nloop invariant i6: 1 <= i + k && i + k <= 2;\nloop invariant i7: i >= 1;\nloop invariant i8: i >= k;\n\n\nloop invariant i11: j <= i + (k * (i - 1)) / 2 + i;\nloop invariant i12: j <= i + (k * (i - 1)) / 2 + i + k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k && k <= 1;\nloop invariant i > 1;\nloop invariant j = j + k;\nloop invariant k < 0;\nloop invariant 0 <= k && k <= 1;\nloop invariant i > 1;\nloop invariant j = j + k;\nloop invariant k < 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i && i < LARGE_INT;\nloop invariant 1 <= j && j <= i * k;\nloop invariant j == i * k + 1;\nloop invariant k == 1 - i + k;\nloop invariant j == i * (k + 1) + 1;\nloop invariant j == i * k + i + 1;\nloop invariant j == i * (k + 1) + i + 1;\nloop invariant j == i * k + i * (k + 1) + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\nloop invariant j == i * k + i * k + i + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i + k && i + k <= 2 && i >= 1;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i + k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: i + k >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i && i < LARGE_INT;\nloop invariant 1 <= j && j <= i * k;\nloop invariant 1 <= k <= i;\nloop invariant 1 <= i + k && i + k <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: 1 <= i + k && i + k <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant i + k <= 2;\nloop invariant j >= i;\nloop invariant j <= i + (1 - k);\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= 2;\nloop invariant j >= i;\nloop invariant j <= i + (1 - k);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: i >= 1;\n\n\nloop invariant i4: k <= 1;\n\nloop invariant i6: i + k <= 2;\n\nloop invariant i8: j <= i + (1 - k);\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i <= LARGE_INT;\n\n\nloop invariant i4: 1 <= i + k && i + k <= 2;\nloop invariant i5: i >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= j <= 2 * (LARGE_INT - 1);\nloop invariant i + k >= 1;\nloop invariant i + k <= 2 * (LARGE_INT - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: i + k >= 1;\nloop invariant i5: i + k <= 2 * (LARGE_INT - 1);\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j <= i + k;\nloop invariant j >= i;\nloop invariant i <= LARGE_INT;\nloop invariant k <= 1;\nloop invariant k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: i >= 1;\n\n\n\n\nloop invariant i6: i <= LARGE_INT;\nloop invariant i7: k <= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant i <= LARGE_INT - 1;\nloop invariant k >= 0;\nloop invariant j >= i + (k * (k + 1)) / 2;\nloop invariant j <= LARGE_INT + (k * (k + 1)) / 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i + k && i + k <= 2 && i >= 1;\n\n\n\n\nloop invariant i6: i + k >= 1;\nloop invariant i7: i + k <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= k + 1;\nloop invariant k >= 0;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i + k <= 2 * j;\nloop invariant i + k >= j;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\nloop invariant j <= k + 1;\nloop invariant j >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: i + k >= 1;\nloop invariant i5: i + k <= 2;\nloop invariant i6: i >= 1;\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j >= 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= LARGE_INT;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i <= LARGE_INT;\n\n\nloop invariant i4: i + k <= 2;\nloop invariant i5: i >= 1;\n\n\nloop invariant i8: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= LARGE_INT;\nloop invariant i9: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i;\nloop invariant i10: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k;\n\nloop invariant i12: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1;\n\nloop invariant i14: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1;\n\nloop invariant i16: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i18: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i20: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i22: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i24: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i26: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= 1 + k * i;\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: 1 <= i <= LARGE_INT;\n\nloop invariant i4: 1 <= i + k <= 2;\nloop invariant i5: i >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant i + k <= LARGE_INT + 1 - 1;\nloop invariant i + k >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: i >= 1;\n\n\nloop invariant i7: i + k <= 2;\nloop invariant i8: i + k >= 1;\nloop invariant i9: i + k <= LARGE_INT + 1 - 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 62: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: i > 0;\nloop invariant i2: i < LARGE_INT;\nloop invariant i3: j >= 1;\nloop invariant i4: k >= 0;\nloop invariant i5: k <= 1;\nloop invariant i6: 1 <= i + k && i + k <= 2;\nloop invariant i7: i >= 1;\nloop invariant i8: i >= k;\nloop invariant i9: j >= i;\nloop invariant i10: j >= i + (k * (i - 1)) / 2;\nloop invariant i11: j <= i + (k * (i - 1)) / 2 + i;\nloop invariant i12: j <= i + (k * (i - 1)) / 2 + i + k;\nloop invariant i13: j <= i + (k * (i - 1)) / 2 + i + k + k;\nloop invariant i14: j <= i + (k * (i - 1)) / 2 + i + 2 * k;\nloop invariant i15: j <= i + (k * (i - 1)) / 2 + i + 2 * k + k;\nloop invariant i16: j <= i + (k * (i - 1)) / 2 + 2 * i + 3 * k;\nloop invariant i17: j <= i + (k * (i - 1)) / 2 + 2 * i + 3 * k + k;\nloop invariant i18: j <= i + (k * (i - 1)) / 2 + i + 3 * k;\nloop invariant i19: j <= i + (k * (i - 1)) / 2 + i + 3 * k + k;\nloop invariant i20: j <= i + (k * (i - 1)) / 2 + 2 * i + 4 * k;\nloop invariant i21: j <= i + (k * (i - 1)) / 2 + 2 * i + 4 * k + k;\nloop invariant i22: j <= i + (k * (i - 1)) / 2 + i + 4 * k;\nloop invariant i23: j <= i + (k * (i - 1)) / 2 + i + 4 * k + k;\nloop invariant i24: j <= i + (k * (i - 1)) / 2 + 2 * i + 5 * k;\nloop invariant i25: j <= i + (k * (i - 1)) / 2 + 2 * i + 5 * k + k;\nloop invariant i26: j <= i + (k * (i - 1)) / 2 + i + 5 * k;\nloop invariant i27: j <= i + (k * (i - 1)) / 2 + i + 5 * k + k;\nloop invariant i28: j <= i + (k * (i - 1)) / 2 + 2 * i + 6 * k;\nloop invariant i29: j <= i + (k * (i - 1)) / 2 + 2 * i + 6 * k + k;\nloop invariant i30: j <= i + (k * (i - 1)) / 2 + i + 6 * k;\nloop invariant i31: j <= i + (k * (i - 1)) / 2 + i + 6 * k + k;\nloop invariant i32: j <= i + (k * (i - 1)) / 2 + 2 * i + 7 * k;\nloop invariant i33: j <= i + (k * (i - 1)) / 2 + 2 * i + 7 * k + k;\nloop invariant i34: j <= i + (k * (i - 1)) / 2 + i + 7 * k;\nloop invariant i35: j <= i + (k * (i - 1)) / 2 + i + 7 * k + k;\nloop invariant i36: j <= i + (k * (i - 1)) / 2 + 2 * i + 8 * k;\nloop invariant i37: j <= i + (k * (i - 1)) / 2 + 2 * i + 8 * k + k;\nloop invariant i38: j <= i + (k * (i - 1)) / 2 + i + 8 * k;\nloop invariant i39: j <= i + (k * (i - 1)) / 2 + i + 8 * k + k;\nloop invariant i40: j <= i + (k * (i - 1)) / 2 + 2 * i + 9 * k;\nloop invariant i41: j <= i + (k * (i - 1)) / 2 + 2 * i + 9 * k + k;\nloop invariant i42: j <= i + (k * (i - 1)) / 2 + i + 9 * k;\nloop invariant i43: 0 <= k && k <= 1;\nloop invariant i44: i > 1;\nloop invariant i45: j = j + k;\nloop invariant i46: k < 0;\nloop invariant i47: 1 <= i + k && i + k <= 2 && i >= 1;\nloop invariant i48: 0 <= k <= 1;\nloop invariant i49: 1 <= i && i < LARGE_INT;\nloop invariant i50: 1 <= j && j <= i * k;\nloop invariant i51: j == i * k + 1;\nloop invariant i52: k == 1 - i + k;\nloop invariant i53: j == i * (k + 1) + 1;\nloop invariant i54: j == i * k + i + 1;\nloop invariant i55: j == i * (k + 1) + i + 1;\nloop invariant i56: j == i * k + i * (k + 1) + 1;\nloop invariant i57: j == i * k + i * k + i + 1;\nloop invariant i58: 0 <= k <= 2;\nloop invariant i59: i + k >= 1;\nloop invariant i60: 1 <= k <= i;\nloop invariant i61: i + k <= 2;\nloop invariant i62: j <= i + (1 - k);\nloop invariant i63: 1 <= i <= LARGE_INT;\nloop invariant i64: 1 <= j <= LARGE_INT;\nloop invariant i65: 0 <= i <= LARGE_INT - 1;\nloop invariant i66: 1 <= j <= 2 * (LARGE_INT - 1);\nloop invariant i67: i + k <= 2 * (LARGE_INT - 1);\nloop invariant i68: j <= i + k;\nloop invariant i69: i <= LARGE_INT;\nloop invariant i70: i <= LARGE_INT - 1;\nloop invariant i71: j >= i + (k * (k + 1)) / 2;\nloop invariant i72: j <= LARGE_INT + (k * (k + 1)) / 2;\nloop invariant i73: 1 <= j <= k + 1;\nloop invariant i74: i + k <= 2 * j;\nloop invariant i75: i + k >= j;\nloop invariant i76: j <= k + 1;\nloop invariant i77: 0 <= i + k && i + k <= 2 && i >= 1 ==> j >= 1;\nloop invariant i78: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= LARGE_INT;\nloop invariant i79: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i;\nloop invariant i80: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k;\nloop invariant i81: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1;\nloop invariant i82: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1;\nloop invariant i83: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1;\nloop invariant i84: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1;\nloop invariant i85: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1;\nloop invariant i86: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i87: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i88: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i89: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i90: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i91: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i92: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i93: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i94: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i95: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1;\nloop invariant i96: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\nloop invariant i97: 1 <= j <= 1 + k * i;\nloop invariant i98: 1 <= i + k <= 2;\nloop invariant i99: 1 <= i <= LARGE_INT - 1;\nloop invariant i100: i + k <= LARGE_INT + 1 - 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 49,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: i > 0;\nloop invariant i2: i < LARGE_INT;\n\n\nloop invariant i5: k <= 1;\nloop invariant i6: 1 <= i + k && i + k <= 2;\nloop invariant i7: i >= 1;\nloop invariant i8: i >= k;\n\n\nloop invariant i11: j <= i + (k * (i - 1)) / 2 + i;\nloop invariant i12: j <= i + (k * (i - 1)) / 2 + i + k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i47: 1 <= i + k && i + k <= 2 && i >= 1;\n\nloop invariant i49: 1 <= i && i < LARGE_INT;\n\n\n\n\n\n\n\n\n\nloop invariant i59: i + k >= 1;\n\nloop invariant i61: i + k <= 2;\nloop invariant i62: j <= i + (1 - k);\nloop invariant i63: 1 <= i <= LARGE_INT;\n\nloop invariant i65: 0 <= i <= LARGE_INT - 1;\n\nloop invariant i67: i + k <= 2 * (LARGE_INT - 1);\nloop invariant i68: j <= i + k;\nloop invariant i69: i <= LARGE_INT;\nloop invariant i70: i <= LARGE_INT - 1;\n\nloop invariant i72: j <= LARGE_INT + (k * (k + 1)) / 2;\n\n\nloop invariant i75: i + k >= j;\n\n\nloop invariant i78: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= LARGE_INT;\nloop invariant i79: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i;\nloop invariant i80: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k;\n\nloop invariant i82: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1;\n\nloop invariant i84: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1;\n\nloop invariant i86: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i88: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i90: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i92: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i94: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i96: 0 <= i + k && i + k <= 2 && i >= 1 ==> j <= i + k - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1;\n\nloop invariant i98: 1 <= i + k <= 2;\nloop invariant i99: 1 <= i <= LARGE_INT - 1;\nloop invariant i100: i + k <= LARGE_INT + 1 - 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c"
        ],
        "skipped": [],
        "total": 109,
        "success_count": 94,
        "failure_count": 15,
        "success_rate": 0.8623853211009175
    }
}