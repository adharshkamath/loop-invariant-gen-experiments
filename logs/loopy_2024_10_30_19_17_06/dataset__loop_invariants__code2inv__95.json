{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/95.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant i <= j <= (2 * i);\nloop invariant y == (j - i);\nloop invariant (y == 1) ==> (i == j);\nloop invariant (y != 1) ==> ((i <= x) && (i <= j) && (j <= 2 * i) && (y == (j - i)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i <= x;\nloop invariant j >= (1 + (i - 1) * i / 2);\nloop invariant j <= (1 + (i * (i + 1)) / 2);\nloop invariant y == 1 ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 0 ==> j == y;\nloop invariant y >= 1 ==> x >= y;\nloop invariant y >= 1 ==> x >= i;\nloop invariant y >= 1 ==> x >= j;\nloop invariant y >= 1 ==> j >= i;\nloop invariant y >= 1 ==> j >= y;\nloop invariant y >= 1 ==> i >= y;\nloop invariant y >= 1 ==> i >= 0;\nloop invariant y >= 1 ==> j >= 0;\nloop invariant y >= 1 ==> x >= 0;\nloop invariant y >= 1 ==> j == x;\nloop invariant y >= 1 ==> j == i;\nloop invariant y >= 1 ==> j == 0;\nloop invariant y >= 1 ==> x == 0;\nloop invariant y >= 1 ==> i == 0;\nloop invariant y >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> i >= 1;\nloop invariant y >= 1 ==> j >= 1;\nloop invariant y >= 1 ==> j >= x;\nloop invariant y >= 1 ==> i >= x;\nloop invariant y >= 1 ==> x >= i;\nloop invariant y >= 1 ==> j >= i;\nloop invariant y >= 1 ==> i >= j;\nloop invariant y >= 1 ==> j >= 0;\nloop invariant y >= 1 ==> i >= 0;\nloop invariant y >= 1 ==> x >= 0;\nloop invariant y >= 1 ==> j == x;\nloop invariant y >= 1 ==> j == i;\nloop invariant y >= 1 ==> j == 0;\nloop invariant y >= 1 ==> x == 0;\nloop invariant y >= 1 ==> i == 0;\nloop invariant y >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> i >= 1;\nloop invariant y >= 1 ==> j >= 1;\nloop invariant y >= 1 ==> j >= x;\nloop invariant y >= 1 ==> i >= x;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant y == 1 ==> i == j;\nloop invariant y != 1 ==> i <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant i <= j;\nloop invariant j <= x + 1;\nloop invariant y == 1 ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i >= 0;\nloop invariant y == 1 ==> i <= x;\nloop invariant y == 1 ==> j >= 0;\nloop invariant y == 1 ==> j <= i;\nloop invariant y == 1 ==> i == j ==> i == x;\nloop invariant y == 1 ==> i == j ==> j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= i;\nloop invariant j == sum_k(1, i, k);\nloop invariant y == 1;\nloop invariant i == x - j;\nloop invariant y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 1 <= y <= (x + 1);\nloop invariant j == (i * y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 1 + (i * x);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (y == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x*(x+1)/2;\nloop invariant y == 1;\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x*(x+1)/2;\nloop invariant y == 1;\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x*(x+1)/2;\nloop invariant y == 1;\n*/\n```",
            "```\n/*@\nloop invariant i = j;\nloop invariant i <= x;\nloop invariant j <= i;\nloop invariant y == 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y == 1 ==> i + y == j;\nloop invariant y == 1 ==> i + 1 == i + y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant i <= x;\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= ((x * (x + 1)) / 2);\nloop invariant (i * y) == (j - ((i * (i - 1)) / 2));\nloop invariant (y == 1) ==> (i == j);\nloop invariant (y == 1) ==> (x == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x + 1);\nloop invariant j == (i + 1);\nloop invariant y == 1;\nloop invariant x >= 0;\nloop invariant i * y == j;\nloop invariant y == 1 ==> (i == j);\nloop invariant 0 <= j <= (x + 1);\nloop invariant j == (i + 1);\nloop invariant y == 1;\nloop invariant x >= 0;\nloop invariant i * y == j;\nloop invariant y == 1 ==> (i == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= i * y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= x;\nloop invariant j <= i * y;\nloop invariant i >= 0;\nloop invariant j >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant i <= j <= (2 * i);\nloop invariant y == (j - i);\nloop invariant (y == 1) ==> (i == j);\nloop invariant (y != 1) ==> ((i <= x) && (i <= j) && (j <= 2 * i) && (y == (j - i)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\n\nloop invariant i4: (y == 1) ==> (i == j);\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant i <= x;\nloop invariant j >= (1 + (i - 1) * i / 2);\nloop invariant j <= (1 + (i * (i + 1)) / 2);\nloop invariant y == 1 ==> i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\n\n\n\nloop invariant i6: y == 1 ==> i == j;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 0 ==> j == y;\nloop invariant y >= 1 ==> x >= y;\nloop invariant y >= 1 ==> x >= i;\nloop invariant y >= 1 ==> x >= j;\nloop invariant y >= 1 ==> j >= i;\nloop invariant y >= 1 ==> j >= y;\nloop invariant y >= 1 ==> i >= y;\nloop invariant y >= 1 ==> i >= 0;\nloop invariant y >= 1 ==> j >= 0;\nloop invariant y >= 1 ==> x >= 0;\nloop invariant y >= 1 ==> j == x;\nloop invariant y >= 1 ==> j == i;\nloop invariant y >= 1 ==> j == 0;\nloop invariant y >= 1 ==> x == 0;\nloop invariant y >= 1 ==> i == 0;\nloop invariant y >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> i >= 1;\nloop invariant y >= 1 ==> j >= 1;\nloop invariant y >= 1 ==> j >= x;\nloop invariant y >= 1 ==> i >= x;\nloop invariant y >= 1 ==> x >= i;\nloop invariant y >= 1 ==> j >= i;\nloop invariant y >= 1 ==> i >= j;\nloop invariant y >= 1 ==> j >= 0;\nloop invariant y >= 1 ==> i >= 0;\nloop invariant y >= 1 ==> x >= 0;\nloop invariant y >= 1 ==> j == x;\nloop invariant y >= 1 ==> j == i;\nloop invariant y >= 1 ==> j == 0;\nloop invariant y >= 1 ==> x == 0;\nloop invariant y >= 1 ==> i == 0;\nloop invariant y >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> i >= 1;\nloop invariant y >= 1 ==> j >= 1;\nloop invariant y >= 1 ==> j >= x;\nloop invariant y >= 1 ==> i >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y == 1 ==> i == j;\nloop invariant i4: y == 0 ==> j == y;\n\n\n\nloop invariant i8: y >= 1 ==> j >= i;\n\n\nloop invariant i11: y >= 1 ==> i >= 0;\nloop invariant i12: y >= 1 ==> j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant y == 1 ==> i == j;\nloop invariant y != 1 ==> i <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\nloop invariant i2: y == 1 ==> i == j;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant i <= j;\nloop invariant j <= x + 1;\nloop invariant y == 1 ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\n\nloop invariant i4: y == 1 ==> (i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant i == j;\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> i >= 0;\nloop invariant y == 1 ==> i <= x;\nloop invariant y == 1 ==> j >= 0;\nloop invariant y == 1 ==> j <= i;\nloop invariant y == 1 ==> i == j ==> i == x;\nloop invariant y == 1 ==> i == j ==> j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y == 1 ==> i == j;\nloop invariant i4: y == 1 ==> i >= 0;\n\nloop invariant i6: y == 1 ==> j >= 0;\nloop invariant i7: y == 1 ==> j <= i;\n\n\n\nloop invariant i11: y == 1 ==> i == j ==> i == j == x ==> i == j;\nloop invariant i12: y == 1 ==> i == j ==> i == j == x ==> j == i;\nloop invariant i13: y == 1 ==> i == j ==> i == j == x ==> i == j == x;\nloop invariant i14: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i15: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i16: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i17: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i18: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i19: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i20: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i21: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i22: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i23: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i24: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i25: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i26: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i27: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i28: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i29: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i30: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i31: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= i;\nloop invariant j == sum_k(1, i, k);\nloop invariant y == 1;\nloop invariant i == x - j;\nloop invariant y >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\nloop invariant i2: 0 <= j <= i;\n\nloop invariant i4: y == 1;\n\nloop invariant i6: y >= 1;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 1 <= y <= (x + 1);\nloop invariant j == (i * y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: j == (i * y);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 1 + (i * x);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (y == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: (y == 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x*(x+1)/2;\nloop invariant y == 1;\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x*(x+1)/2;\nloop invariant y == 1;\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x*(x+1)/2;\nloop invariant y == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y == 1;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i = j;\nloop invariant i <= x;\nloop invariant j <= i;\nloop invariant y == 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y == 1 ==> i + y == j;\nloop invariant y == 1 ==> i + 1 == i + y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: j <= i;\nloop invariant i4: y == 1;\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\n\n\nloop invariant i9: y == 1 ==> i + 1 == i + y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant i <= x;\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= ((x * (x + 1)) / 2);\nloop invariant (i * y) == (j - ((i * (i - 1)) / 2));\nloop invariant (y == 1) ==> (i == j);\nloop invariant (y == 1) ==> (x == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\nloop invariant i2: 0 <= y;\n\nloop invariant i4: y >= 1;\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\n\n\nloop invariant i9: (y == 1) ==> (i == j);\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x + 1);\nloop invariant j == (i + 1);\nloop invariant y == 1;\nloop invariant x >= 0;\nloop invariant i * y == j;\nloop invariant y == 1 ==> (i == j);\nloop invariant 0 <= j <= (x + 1);\nloop invariant j == (i + 1);\nloop invariant y == 1;\nloop invariant x >= 0;\nloop invariant i * y == j;\nloop invariant y == 1 ==> (i == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\n\nloop invariant i4: y == 1;\n\nloop invariant i6: i * y == j;\nloop invariant i7: y == 1 ==> (i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= i * y;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= x;\nloop invariant j <= i * y;\nloop invariant i >= 0;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: i >= 0;\n\n\nloop invariant i6: j <= i * y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 96: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= x;\nloop invariant i2: i <= j <= (2 * i);\nloop invariant i3: y == (j - i);\nloop invariant i4: (y == 1) ==> (i == j);\nloop invariant i5: (y != 1) ==> ((i <= x) && (i <= j) && (j <= 2 * i) && (y == (j - i)));\nloop invariant i6: 0 <= i;\nloop invariant i7: 0 <= j;\nloop invariant i8: i <= x;\nloop invariant i9: j >= (1 + (i - 1) * i / 2);\nloop invariant i10: j <= (1 + (i * (i + 1)) / 2);\nloop invariant i11: y == 1 ==> i == j;\nloop invariant i12: j >= 0;\nloop invariant i13: y == 0 ==> j == y;\nloop invariant i14: y >= 1 ==> x >= y;\nloop invariant i15: y >= 1 ==> x >= i;\nloop invariant i16: y >= 1 ==> x >= j;\nloop invariant i17: y >= 1 ==> j >= i;\nloop invariant i18: y >= 1 ==> j >= y;\nloop invariant i19: y >= 1 ==> i >= y;\nloop invariant i20: y >= 1 ==> i >= 0;\nloop invariant i21: y >= 1 ==> j >= 0;\nloop invariant i22: y >= 1 ==> x >= 0;\nloop invariant i23: y >= 1 ==> j == x;\nloop invariant i24: y >= 1 ==> j == i;\nloop invariant i25: y >= 1 ==> j == 0;\nloop invariant i26: y >= 1 ==> x == 0;\nloop invariant i27: y >= 1 ==> i == 0;\nloop invariant i28: y >= 1 ==> x >= 1;\nloop invariant i29: y >= 1 ==> i >= 1;\nloop invariant i30: y >= 1 ==> j >= 1;\nloop invariant i31: y >= 1 ==> j >= x;\nloop invariant i32: y >= 1 ==> i >= x;\nloop invariant i33: y >= 1 ==> i >= j;\nloop invariant i34: y != 1 ==> i <= j;\nloop invariant i35: i <= j;\nloop invariant i36: j <= x + 1;\nloop invariant i37: y == 1 ==> (i == j);\nloop invariant i38: i == j;\nloop invariant i39: y == 1 ==> i >= 0;\nloop invariant i40: y == 1 ==> i <= x;\nloop invariant i41: y == 1 ==> j >= 0;\nloop invariant i42: y == 1 ==> j <= i;\nloop invariant i43: y == 1 ==> i == j ==> i == x;\nloop invariant i44: y == 1 ==> i == j ==> j == x;\nloop invariant i45: y == 1 ==> i == j ==> i == j == x;\nloop invariant i46: y == 1 ==> i == j ==> i == j == x ==> i == j;\nloop invariant i47: y == 1 ==> i == j ==> i == j == x ==> j == i;\nloop invariant i48: y == 1 ==> i == j ==> i == j == x ==> i == j == x;\nloop invariant i49: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i50: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i51: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i52: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i53: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i54: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i55: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i56: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i57: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i58: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i59: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i60: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i61: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i62: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i63: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i64: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i65: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i66: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i67: 0 <= j <= i;\nloop invariant i68: j == sum_k(1, i, k);\nloop invariant i69: y == 1;\nloop invariant i70: i == x - j;\nloop invariant i71: y >= 1;\nloop invariant i72: 1 <= y <= (x + 1);\nloop invariant i73: j == (i * y);\nloop invariant i74: 0 <= j <= 1 + (i * x);\nloop invariant i75: i >= 0;\nloop invariant i76: (y == 1);\nloop invariant i77: 0 <= j <= x*(x+1)/2;\nloop invariant i78: i = j;\nloop invariant i79: j <= i;\nloop invariant i80: x >= 0;\nloop invariant i81: y == 1 ==> i + y == j;\nloop invariant i82: y == 1 ==> i + 1 == i + y;\nloop invariant i83: 0 <= x;\nloop invariant i84: 0 <= y;\nloop invariant i85: j <= ((x * (x + 1)) / 2);\nloop invariant i86: (i * y) == (j - ((i * (i - 1)) / 2));\nloop invariant i87: (y == 1) ==> (x == 0);\nloop invariant i88: 0 <= j <= (x + 1);\nloop invariant i89: j == (i + 1);\nloop invariant i90: i * y == j;\nloop invariant i91: 0 <= j <= i * y;\nloop invariant i92: j <= i * y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\nloop invariant i2: i <= j <= (2 * i);\n\nloop invariant i4: (y == 1) ==> (i == j);\nloop invariant i5: (y != 1) ==> ((i <= x) && (i <= j) && (j <= 2 * i) && (y == (j - i)));\nloop invariant i6: 0 <= i;\nloop invariant i7: 0 <= j;\n\n\nloop invariant i10: j <= (1 + (i * (i + 1)) / 2);\nloop invariant i11: y == 1 ==> i == j;\nloop invariant i12: j >= 0;\nloop invariant i13: y == 0 ==> j == y;\n\n\n\nloop invariant i17: y >= 1 ==> j >= i;\n\n\nloop invariant i20: y >= 1 ==> i >= 0;\nloop invariant i21: y >= 1 ==> j >= 0;\n\n\nloop invariant i24: y >= 1 ==> j == i;\n\n\n\n\n\n\n\n\nloop invariant i33: y >= 1 ==> i >= j;\nloop invariant i34: y != 1 ==> i <= j;\nloop invariant i35: i <= j;\n\nloop invariant i37: y == 1 ==> (i == j);\nloop invariant i38: i == j;\nloop invariant i39: y == 1 ==> i >= 0;\n\nloop invariant i41: y == 1 ==> j >= 0;\nloop invariant i42: y == 1 ==> j <= i;\n\n\n\nloop invariant i46: y == 1 ==> i == j ==> i == j == x ==> i == j;\nloop invariant i47: y == 1 ==> i == j ==> i == j == x ==> j == i;\nloop invariant i48: y == 1 ==> i == j ==> i == j == x ==> i == j == x;\nloop invariant i49: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i50: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i51: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i52: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i53: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i54: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i55: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i56: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i57: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i58: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i59: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i60: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i61: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i62: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i63: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i64: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j;\nloop invariant i65: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> j == i;\nloop invariant i66: y == 1 ==> i == j ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x ==> i == j == x;\nloop invariant i67: 0 <= j <= i;\n\nloop invariant i69: y == 1;\n\nloop invariant i71: y >= 1;\n\nloop invariant i73: j == (i * y);\nloop invariant i74: 0 <= j <= 1 + (i * x);\nloop invariant i75: i >= 0;\nloop invariant i76: (y == 1);\n\n\nloop invariant i79: j <= i;\n\n\nloop invariant i82: y == 1 ==> i + 1 == i + y;\n\nloop invariant i84: 0 <= y;\n\n\n\n\n\nloop invariant i90: i * y == j;\nloop invariant i91: 0 <= j <= i * y;\nloop invariant i92: j <= i * y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 81,
        "success_count": 69,
        "failure_count": 12,
        "success_rate": 0.8518518518518519
    }
}