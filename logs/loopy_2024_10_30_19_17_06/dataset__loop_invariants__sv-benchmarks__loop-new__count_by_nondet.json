{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j >= LARGE_INT ==> k < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i == k * LARGE_INT + j;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT / LARGE_INT;\nloop invariant k <= i / LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k <= i / j;\nloop invariant k <= i / (j + 1);\nloop invariant k <= i / (j + 2);\nloop invariant k <= i / (j + 3);\nloop invariant k <= i / (j + 4);\nloop invariant k <= i / (j + 5);\nloop invariant k <= i / (j + 6);\nloop invariant k <= i / (j + 7);\nloop invariant k <= i / (j + 8);\nloop invariant k <= i / (j + 9);\nloop invariant k <= i / (j + 10);\nloop invariant k <= i / (j + 11);\nloop invariant k <= i / (j + 12);\nloop invariant k <= i / (j + 13);\nloop invariant k <= i / (j + 14);\nloop invariant k <= i / (j + 15);\nloop invariant k <= i / (j + 16);\nloop invariant k <= i / (j + 17);\nloop invariant k <= i / (j + 18);\nloop invariant k <= i / (j + 19);\nloop invariant k <= i / (j + 20);\nloop invariant k <= i / (j + 21);\nloop invariant k <= i / (j + 22);\nloop invariant k <= i / (j + 23);\nloop invariant k <= i / (j + 24);\nloop invariant k <= i / (j + 25);\nloop invariant k <= i / (j + 26);\nloop invariant k <= i / (j + 27);\nloop invariant k <= i / (j + 28);\nloop invariant k <= i / (j + 29);\nloop invariant k <= i / (j + 30);\nloop invariant k <= i / (j + 31);\nloop invariant k <= i / (j + 32);\nloop invariant k <= i / (j + 33);\nloop invariant k <= i / (j + 34);\nloop invariant k <= i / (j + 35);\nloop invariant k <= i / (j + 36);\nloop invariant k <= i / (j + 37);\nloop invariant k <= i / (j + 38);\nloop invariant k <= i / (j + 39);\nloop invariant k <= i / (j + 40);\nloop invariant k <= i / (j + 41);\nloop invariant k <= i / (j + 42);\nloop invariant k <= i / (j + 43);\nloop invariant k <= i / (j + 44);\nloop invariant k <= i / (j + 45);\nloop invariant k <= i / (j + 46);\nloop invariant k <= i / (j + 47);\nloop invariant k <= i / (j + 48);\nloop invariant k <= i / (j + 49);\nloop invariant k <= i / (j + 50);\nloop invariant k <= i / (j + 51);\nloop invariant k <= i / (j + 52);\nloop invariant k <= i / (j + 53);\nloop invariant k <= i / (j + 54);\nloop invariant k <= i / (j + 55);\nloop invariant k <= i / (j + 56);\nloop invariant k <= i / (j + 57);\nloop invariant k <= i / (j + 58);\nloop invariant k <= i / (j + 59);\nloop invariant k <= i / (j + 60);\nloop invariant k <= i / (j + 61);\nloop invariant k <= i / (j + 62);\nloop invariant k <= i / (j + 63);\nloop invariant k <= i / (j + 64);\nloop invariant k <= i / (j + 65);\nloop invariant k <= i / (j + 66);\nloop invariant k <= i / (j + 67);\nloop invariant k <= i / (j + 68);\nloop invariant k <= i / (j + 69);\nloop invariant k <= i / (j + 70);\nloop invariant k <= i / (j + 71);\nloop invariant k <= i / (j + 72);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i == i + j * k ==> 0 <= j <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant 1 <= k * LARGE_INT <= LARGE_INT * LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j >= i;\nloop invariant k + 1 >= k;\nloop invariant i + j < i + j + 1;\nloop invariant k + 1 < k + 2;\nloop invariant i + j < i + j + 2;\nloop invariant k + 1 < k + 3;\nloop invariant i + j < i + j + 3;\nloop invariant k + 1 < k + 4;\nloop invariant i + j < i + j + 4;\nloop invariant k + 1 < k + 5;\nloop invariant i + j < i + j + 5;\nloop invariant k + 1 < k + 6;\nloop invariant i + j < i + j + 6;\nloop invariant k + 1 < k + 7;\nloop invariant i + j < i + j + 7;\nloop invariant k + 1 < k + 8;\nloop invariant i + j < i + j + 8;\nloop invariant k + 1 < k + 9;\nloop invariant i + j < i + j + 9;\nloop invariant k + 1 < k + 10;\nloop invariant i + j < i + j + 10;\nloop invariant k + 1 < k + 11;\nloop invariant i + j < i + j + 11;\nloop invariant k + 1 < k + 12;\nloop invariant i + j < i + j + 12;\nloop invariant k + 1 < k + 13;\nloop invariant i + j < i + j + 13;\nloop invariant k + 1 < k + 14;\nloop invariant i + j < i + j + 14;\nloop invariant k + 1 < k + 15;\nloop invariant i + j < i + j + 15;\nloop invariant k + 1 < k + 16;\nloop invariant i + j < i + j + 16;\nloop invariant k + 1 < k + 17;\nloop invariant i + j < i + j + 17;\nloop invariant k + 1 < k + 18;\nloop invariant i + j < i + j + 18;\nloop invariant k + 1 < k + 19;\nloop invariant i + j < i + j + 19;\nloop invariant k + 1 < k + 20;\nloop invariant i + j < i + j + 20;\nloop invariant k + 1 < k + 21;\nloop invariant i + j < i + j + 21;\nloop invariant k + 1 < k + 22;\nloop invariant i + j < i + j + 22;\nloop invariant k + 1 < k + 23;\nloop invariant i + j < i + j + 23;\nloop invariant k + 1 < k + 24;\nloop invariant i + j < i + j + 24;\nloop invariant k + 1 < k + 25;\nloop invariant i + j < i + j + 25;\nloop invariant k + 1 < k + 26;\nloop invariant i + j < i + j + 26;\nloop invariant k + 1 < k + 27;\nloop invariant i + j < i + j + 27;\nloop invariant k + 1 < k + 28;\nloop invariant i + j < i + j + 28;\nloop invariant k + 1 < k + 29;\nloop invariant i + j < i + j + 29;\nloop invariant k + 1 < k + 30;\nloop invariant i + j < i + j + 30;\nloop invariant k + 1 < k + 31;\nloop invariant i + j < i + j + 31;\nloop invariant k + 1 < k + 32;\nloop invariant i + j < i + j + 32;\nloop invariant k + 1 < k + 33;\nloop invariant i + j < i + j + 33;\nloop invariant k + 1 < k + 34;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant unknown_int() >= 1;\nloop invariant unknown_int() < LARGE_INT;\nloop invariant i >= (1 + (unknown_int() - 1) * unknown_int() / 2);\nloop invariant k >= unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant i + j >= i;\nloop invariant k + 1 >= k;\nloop invariant i + j <= i + (LARGE_INT - 1);\nloop invariant k + 1 <= LARGE_INT;\nloop invariant k + 1 <= i + (LARGE_INT - 1) / j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + k * j <= LARGE_INT;\nloop invariant i + k * j + j <= LARGE_INT;\nloop invariant i + k * j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i = i + j;\nloop invariant k = k + 1;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i = k * j + j * (j - 1) / 2;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= k;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k < LARGE_INT;\nloop invariant 0 <= j;\nloop invariant j < LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant 0 <= i < LARGE_INT;\nloop invariant 0 <= k < LARGE_INT;\nloop invariant j = unknown_int();\nloop invariant i + j < LARGE_INT ==> (i + j) < LARGE_INT;\nloop invariant i + j < LARGE_INT ==> (i + j) >= 0;\nloop invariant i + j < LARGE_INT ==> (i + j) < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= k + 1 <= 2 * LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j >= LARGE_INT ==> k < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i == k * LARGE_INT + j;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 78,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT / LARGE_INT;\nloop invariant k <= i / LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k <= i / j;\nloop invariant k <= i / (j + 1);\nloop invariant k <= i / (j + 2);\nloop invariant k <= i / (j + 3);\nloop invariant k <= i / (j + 4);\nloop invariant k <= i / (j + 5);\nloop invariant k <= i / (j + 6);\nloop invariant k <= i / (j + 7);\nloop invariant k <= i / (j + 8);\nloop invariant k <= i / (j + 9);\nloop invariant k <= i / (j + 10);\nloop invariant k <= i / (j + 11);\nloop invariant k <= i / (j + 12);\nloop invariant k <= i / (j + 13);\nloop invariant k <= i / (j + 14);\nloop invariant k <= i / (j + 15);\nloop invariant k <= i / (j + 16);\nloop invariant k <= i / (j + 17);\nloop invariant k <= i / (j + 18);\nloop invariant k <= i / (j + 19);\nloop invariant k <= i / (j + 20);\nloop invariant k <= i / (j + 21);\nloop invariant k <= i / (j + 22);\nloop invariant k <= i / (j + 23);\nloop invariant k <= i / (j + 24);\nloop invariant k <= i / (j + 25);\nloop invariant k <= i / (j + 26);\nloop invariant k <= i / (j + 27);\nloop invariant k <= i / (j + 28);\nloop invariant k <= i / (j + 29);\nloop invariant k <= i / (j + 30);\nloop invariant k <= i / (j + 31);\nloop invariant k <= i / (j + 32);\nloop invariant k <= i / (j + 33);\nloop invariant k <= i / (j + 34);\nloop invariant k <= i / (j + 35);\nloop invariant k <= i / (j + 36);\nloop invariant k <= i / (j + 37);\nloop invariant k <= i / (j + 38);\nloop invariant k <= i / (j + 39);\nloop invariant k <= i / (j + 40);\nloop invariant k <= i / (j + 41);\nloop invariant k <= i / (j + 42);\nloop invariant k <= i / (j + 43);\nloop invariant k <= i / (j + 44);\nloop invariant k <= i / (j + 45);\nloop invariant k <= i / (j + 46);\nloop invariant k <= i / (j + 47);\nloop invariant k <= i / (j + 48);\nloop invariant k <= i / (j + 49);\nloop invariant k <= i / (j + 50);\nloop invariant k <= i / (j + 51);\nloop invariant k <= i / (j + 52);\nloop invariant k <= i / (j + 53);\nloop invariant k <= i / (j + 54);\nloop invariant k <= i / (j + 55);\nloop invariant k <= i / (j + 56);\nloop invariant k <= i / (j + 57);\nloop invariant k <= i / (j + 58);\nloop invariant k <= i / (j + 59);\nloop invariant k <= i / (j + 60);\nloop invariant k <= i / (j + 61);\nloop invariant k <= i / (j + 62);\nloop invariant k <= i / (j + 63);\nloop invariant k <= i / (j + 64);\nloop invariant k <= i / (j + 65);\nloop invariant k <= i / (j + 66);\nloop invariant k <= i / (j + 67);\nloop invariant k <= i / (j + 68);\nloop invariant k <= i / (j + 69);\nloop invariant k <= i / (j + 70);\nloop invariant k <= i / (j + 71);\nloop invariant k <= i / (j + 72);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\nloop invariant i2: k >= 0;\n\n\n\n\nloop invariant i7: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i == i + j * k ==> 0 <= j <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 40,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant 1 <= k * LARGE_INT <= LARGE_INT * LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j >= i;\nloop invariant k + 1 >= k;\nloop invariant i + j < i + j + 1;\nloop invariant k + 1 < k + 2;\nloop invariant i + j < i + j + 2;\nloop invariant k + 1 < k + 3;\nloop invariant i + j < i + j + 3;\nloop invariant k + 1 < k + 4;\nloop invariant i + j < i + j + 4;\nloop invariant k + 1 < k + 5;\nloop invariant i + j < i + j + 5;\nloop invariant k + 1 < k + 6;\nloop invariant i + j < i + j + 6;\nloop invariant k + 1 < k + 7;\nloop invariant i + j < i + j + 7;\nloop invariant k + 1 < k + 8;\nloop invariant i + j < i + j + 8;\nloop invariant k + 1 < k + 9;\nloop invariant i + j < i + j + 9;\nloop invariant k + 1 < k + 10;\nloop invariant i + j < i + j + 10;\nloop invariant k + 1 < k + 11;\nloop invariant i + j < i + j + 11;\nloop invariant k + 1 < k + 12;\nloop invariant i + j < i + j + 12;\nloop invariant k + 1 < k + 13;\nloop invariant i + j < i + j + 13;\nloop invariant k + 1 < k + 14;\nloop invariant i + j < i + j + 14;\nloop invariant k + 1 < k + 15;\nloop invariant i + j < i + j + 15;\nloop invariant k + 1 < k + 16;\nloop invariant i + j < i + j + 16;\nloop invariant k + 1 < k + 17;\nloop invariant i + j < i + j + 17;\nloop invariant k + 1 < k + 18;\nloop invariant i + j < i + j + 18;\nloop invariant k + 1 < k + 19;\nloop invariant i + j < i + j + 19;\nloop invariant k + 1 < k + 20;\nloop invariant i + j < i + j + 20;\nloop invariant k + 1 < k + 21;\nloop invariant i + j < i + j + 21;\nloop invariant k + 1 < k + 22;\nloop invariant i + j < i + j + 22;\nloop invariant k + 1 < k + 23;\nloop invariant i + j < i + j + 23;\nloop invariant k + 1 < k + 24;\nloop invariant i + j < i + j + 24;\nloop invariant k + 1 < k + 25;\nloop invariant i + j < i + j + 25;\nloop invariant k + 1 < k + 26;\nloop invariant i + j < i + j + 26;\nloop invariant k + 1 < k + 27;\nloop invariant i + j < i + j + 27;\nloop invariant k + 1 < k + 28;\nloop invariant i + j < i + j + 28;\nloop invariant k + 1 < k + 29;\nloop invariant i + j < i + j + 29;\nloop invariant k + 1 < k + 30;\nloop invariant i + j < i + j + 30;\nloop invariant k + 1 < k + 31;\nloop invariant i + j < i + j + 31;\nloop invariant k + 1 < k + 32;\nloop invariant i + j < i + j + 32;\nloop invariant k + 1 < k + 33;\nloop invariant i + j < i + j + 33;\nloop invariant k + 1 < k + 34;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\nloop invariant i2: k >= 0;\n\n\n\n\n\nloop invariant i8: k + 1 >= k;\n\nloop invariant i10: k + 1 < k + 2;\n\nloop invariant i12: k + 1 < k + 3;\n\nloop invariant i14: k + 1 < k + 4;\n\nloop invariant i16: k + 1 < k + 5;\n\nloop invariant i18: k + 1 < k + 6;\n\nloop invariant i20: k + 1 < k + 7;\n\nloop invariant i22: k + 1 < k + 8;\n\nloop invariant i24: k + 1 < k + 9;\n\nloop invariant i26: k + 1 < k + 10;\n\nloop invariant i28: k + 1 < k + 11;\n\nloop invariant i30: k + 1 < k + 12;\n\nloop invariant i32: k + 1 < k + 13;\n\nloop invariant i34: k + 1 < k + 14;\n\nloop invariant i36: k + 1 < k + 15;\n\nloop invariant i38: k + 1 < k + 16;\n\nloop invariant i40: k + 1 < k + 17;\n\nloop invariant i42: k + 1 < k + 18;\n\nloop invariant i44: k + 1 < k + 19;\n\nloop invariant i46: k + 1 < k + 20;\n\nloop invariant i48: k + 1 < k + 21;\n\nloop invariant i50: k + 1 < k + 22;\n\nloop invariant i52: k + 1 < k + 23;\n\nloop invariant i54: k + 1 < k + 24;\n\nloop invariant i56: k + 1 < k + 25;\n\nloop invariant i58: k + 1 < k + 26;\n\nloop invariant i60: k + 1 < k + 27;\n\nloop invariant i62: k + 1 < k + 28;\n\nloop invariant i64: k + 1 < k + 29;\n\nloop invariant i66: k + 1 < k + 30;\n\nloop invariant i68: k + 1 < k + 31;\n\nloop invariant i70: k + 1 < k + 32;\n\nloop invariant i72: k + 1 < k + 33;\n\nloop invariant i74: k + 1 < k + 34;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant unknown_int() >= 1;\nloop invariant unknown_int() < LARGE_INT;\nloop invariant i >= (1 + (unknown_int() - 1) * unknown_int() / 2);\nloop invariant k >= unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant i + j >= i;\nloop invariant k + 1 >= k;\nloop invariant i + j <= i + (LARGE_INT - 1);\nloop invariant k + 1 <= LARGE_INT;\nloop invariant k + 1 <= i + (LARGE_INT - 1) / j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\nloop invariant i5: k + 1 >= k;\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 27,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + k * j <= LARGE_INT;\nloop invariant i + k * j + j <= LARGE_INT;\nloop invariant i + k * j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i = i + j;\nloop invariant k = k + 1;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i = k * j + j * (j - 1) / 2;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\nloop invariant 0 <= k + 1 <= LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant i == k * LARGE_INT;\nloop invariant 0 <= i + j <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= k;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k < LARGE_INT;\nloop invariant 0 <= j;\nloop invariant j < LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\nloop invariant k + 1 >= k;\nloop invariant k + 1 < k + LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j < i + LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= k;\nloop invariant i3: i >= 0;\n\nloop invariant i5: k >= 0;\n\n\n\n\n\nloop invariant i11: k + 1 >= k;\nloop invariant i12: k + 1 < k + LARGE_INT;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant k == 0;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant 0 <= i < LARGE_INT;\nloop invariant 0 <= k < LARGE_INT;\nloop invariant j = unknown_int();\nloop invariant i + j < LARGE_INT ==> (i + j) < LARGE_INT;\nloop invariant i + j < LARGE_INT ==> (i + j) >= 0;\nloop invariant i + j < LARGE_INT ==> (i + j) < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= k + 1 <= 2 * LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 173: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: i + j >= LARGE_INT ==> k < LARGE_INT;\nloop invariant i4: i == k * LARGE_INT + j;\nloop invariant i5: 0 <= j < LARGE_INT;\nloop invariant i6: 1 <= j < LARGE_INT;\nloop invariant i7: k >= 0;\nloop invariant i8: k <= LARGE_INT / LARGE_INT;\nloop invariant i9: k <= i / LARGE_INT;\nloop invariant i10: j >= 1;\nloop invariant i11: j < LARGE_INT;\nloop invariant i12: i >= 0;\nloop invariant i13: i < LARGE_INT;\nloop invariant i14: k <= i / j;\nloop invariant i15: k <= i / (j + 1);\nloop invariant i16: k <= i / (j + 2);\nloop invariant i17: k <= i / (j + 3);\nloop invariant i18: k <= i / (j + 4);\nloop invariant i19: k <= i / (j + 5);\nloop invariant i20: k <= i / (j + 6);\nloop invariant i21: k <= i / (j + 7);\nloop invariant i22: k <= i / (j + 8);\nloop invariant i23: k <= i / (j + 9);\nloop invariant i24: k <= i / (j + 10);\nloop invariant i25: k <= i / (j + 11);\nloop invariant i26: k <= i / (j + 12);\nloop invariant i27: k <= i / (j + 13);\nloop invariant i28: k <= i / (j + 14);\nloop invariant i29: k <= i / (j + 15);\nloop invariant i30: k <= i / (j + 16);\nloop invariant i31: k <= i / (j + 17);\nloop invariant i32: k <= i / (j + 18);\nloop invariant i33: k <= i / (j + 19);\nloop invariant i34: k <= i / (j + 20);\nloop invariant i35: k <= i / (j + 21);\nloop invariant i36: k <= i / (j + 22);\nloop invariant i37: k <= i / (j + 23);\nloop invariant i38: k <= i / (j + 24);\nloop invariant i39: k <= i / (j + 25);\nloop invariant i40: k <= i / (j + 26);\nloop invariant i41: k <= i / (j + 27);\nloop invariant i42: k <= i / (j + 28);\nloop invariant i43: k <= i / (j + 29);\nloop invariant i44: k <= i / (j + 30);\nloop invariant i45: k <= i / (j + 31);\nloop invariant i46: k <= i / (j + 32);\nloop invariant i47: k <= i / (j + 33);\nloop invariant i48: k <= i / (j + 34);\nloop invariant i49: k <= i / (j + 35);\nloop invariant i50: k <= i / (j + 36);\nloop invariant i51: k <= i / (j + 37);\nloop invariant i52: k <= i / (j + 38);\nloop invariant i53: k <= i / (j + 39);\nloop invariant i54: k <= i / (j + 40);\nloop invariant i55: k <= i / (j + 41);\nloop invariant i56: k <= i / (j + 42);\nloop invariant i57: k <= i / (j + 43);\nloop invariant i58: k <= i / (j + 44);\nloop invariant i59: k <= i / (j + 45);\nloop invariant i60: k <= i / (j + 46);\nloop invariant i61: k <= i / (j + 47);\nloop invariant i62: k <= i / (j + 48);\nloop invariant i63: k <= i / (j + 49);\nloop invariant i64: k <= i / (j + 50);\nloop invariant i65: k <= i / (j + 51);\nloop invariant i66: k <= i / (j + 52);\nloop invariant i67: k <= i / (j + 53);\nloop invariant i68: k <= i / (j + 54);\nloop invariant i69: k <= i / (j + 55);\nloop invariant i70: k <= i / (j + 56);\nloop invariant i71: k <= i / (j + 57);\nloop invariant i72: k <= i / (j + 58);\nloop invariant i73: k <= i / (j + 59);\nloop invariant i74: k <= i / (j + 60);\nloop invariant i75: k <= i / (j + 61);\nloop invariant i76: k <= i / (j + 62);\nloop invariant i77: k <= i / (j + 63);\nloop invariant i78: k <= i / (j + 64);\nloop invariant i79: k <= i / (j + 65);\nloop invariant i80: k <= i / (j + 66);\nloop invariant i81: k <= i / (j + 67);\nloop invariant i82: k <= i / (j + 68);\nloop invariant i83: k <= i / (j + 69);\nloop invariant i84: k <= i / (j + 70);\nloop invariant i85: k <= i / (j + 71);\nloop invariant i86: k <= i / (j + 72);\nloop invariant i87: i == i + j * k ==> 0 <= j <= LARGE_INT;\nloop invariant i88: 1 <= i <= LARGE_INT;\nloop invariant i89: k <= LARGE_INT;\nloop invariant i90: 1 <= k * LARGE_INT <= LARGE_INT * LARGE_INT;\nloop invariant i91: i + j >= i;\nloop invariant i92: k + 1 >= k;\nloop invariant i93: i + j < i + j + 1;\nloop invariant i94: k + 1 < k + 2;\nloop invariant i95: i + j < i + j + 2;\nloop invariant i96: k + 1 < k + 3;\nloop invariant i97: i + j < i + j + 3;\nloop invariant i98: k + 1 < k + 4;\nloop invariant i99: i + j < i + j + 4;\nloop invariant i100: k + 1 < k + 5;\nloop invariant i101: i + j < i + j + 5;\nloop invariant i102: k + 1 < k + 6;\nloop invariant i103: i + j < i + j + 6;\nloop invariant i104: k + 1 < k + 7;\nloop invariant i105: i + j < i + j + 7;\nloop invariant i106: k + 1 < k + 8;\nloop invariant i107: i + j < i + j + 8;\nloop invariant i108: k + 1 < k + 9;\nloop invariant i109: i + j < i + j + 9;\nloop invariant i110: k + 1 < k + 10;\nloop invariant i111: i + j < i + j + 10;\nloop invariant i112: k + 1 < k + 11;\nloop invariant i113: i + j < i + j + 11;\nloop invariant i114: k + 1 < k + 12;\nloop invariant i115: i + j < i + j + 12;\nloop invariant i116: k + 1 < k + 13;\nloop invariant i117: i + j < i + j + 13;\nloop invariant i118: k + 1 < k + 14;\nloop invariant i119: i + j < i + j + 14;\nloop invariant i120: k + 1 < k + 15;\nloop invariant i121: i + j < i + j + 15;\nloop invariant i122: k + 1 < k + 16;\nloop invariant i123: i + j < i + j + 16;\nloop invariant i124: k + 1 < k + 17;\nloop invariant i125: i + j < i + j + 17;\nloop invariant i126: k + 1 < k + 18;\nloop invariant i127: i + j < i + j + 18;\nloop invariant i128: k + 1 < k + 19;\nloop invariant i129: i + j < i + j + 19;\nloop invariant i130: k + 1 < k + 20;\nloop invariant i131: i + j < i + j + 20;\nloop invariant i132: k + 1 < k + 21;\nloop invariant i133: i + j < i + j + 21;\nloop invariant i134: k + 1 < k + 22;\nloop invariant i135: i + j < i + j + 22;\nloop invariant i136: k + 1 < k + 23;\nloop invariant i137: i + j < i + j + 23;\nloop invariant i138: k + 1 < k + 24;\nloop invariant i139: i + j < i + j + 24;\nloop invariant i140: k + 1 < k + 25;\nloop invariant i141: i + j < i + j + 25;\nloop invariant i142: k + 1 < k + 26;\nloop invariant i143: i + j < i + j + 26;\nloop invariant i144: k + 1 < k + 27;\nloop invariant i145: i + j < i + j + 27;\nloop invariant i146: k + 1 < k + 28;\nloop invariant i147: i + j < i + j + 28;\nloop invariant i148: k + 1 < k + 29;\nloop invariant i149: i + j < i + j + 29;\nloop invariant i150: k + 1 < k + 30;\nloop invariant i151: i + j < i + j + 30;\nloop invariant i152: k + 1 < k + 31;\nloop invariant i153: i + j < i + j + 31;\nloop invariant i154: k + 1 < k + 32;\nloop invariant i155: i + j < i + j + 32;\nloop invariant i156: k + 1 < k + 33;\nloop invariant i157: i + j < i + j + 33;\nloop invariant i158: k + 1 < k + 34;\nloop invariant i159: unknown_int() >= 1;\nloop invariant i160: unknown_int() < LARGE_INT;\nloop invariant i161: i >= (1 + (unknown_int() - 1) * unknown_int() / 2);\nloop invariant i162: k >= unknown_int();\nloop invariant i163: i + j <= i + (LARGE_INT - 1);\nloop invariant i164: k + 1 <= LARGE_INT;\nloop invariant i165: k + 1 <= i + (LARGE_INT - 1) / j;\nloop invariant i166: i + k * j <= LARGE_INT;\nloop invariant i167: i + k * j + j <= LARGE_INT;\nloop invariant i168: i + k * j + j + j <= LARGE_INT;\nloop invariant i169: i + k * j + j + j + j <= LARGE_INT;\nloop invariant i170: i + k * j + j + j + j + j <= LARGE_INT;\nloop invariant i171: i + k * j + j + j + j + j + j <= LARGE_INT;\nloop invariant i172: i + k * j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i173: i + k * j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i174: i + k * j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i175: i + k * j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i176: i + k * j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i177: i + k * j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i178: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i179: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i180: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i181: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i182: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i183: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i184: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i185: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i186: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i187: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i188: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i189: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i190: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i191: i + k * j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j <= LARGE_INT;\nloop invariant i192: i = i + j;\nloop invariant i193: k = k + 1;\nloop invariant i194: i = k * j + j * (j - 1) / 2;\nloop invariant i195: j <= LARGE_INT;\nloop invariant i196: 0 <= i <= 1000000;\nloop invariant i197: 0 <= k <= 1000000;\nloop invariant i198: i == k * LARGE_INT;\nloop invariant i199: 0 <= i + j <= LARGE_INT;\nloop invariant i200: 0 <= k + 1 <= LARGE_INT;\nloop invariant i201: 0 <= i;\nloop invariant i202: 0 <= k;\nloop invariant i203: k < LARGE_INT;\nloop invariant i204: 0 <= j;\nloop invariant i205: i + j < i + LARGE_INT;\nloop invariant i206: k + 1 < k + LARGE_INT;\nloop invariant i207: i == 0;\nloop invariant i208: k == 0;\nloop invariant i209: 0 <= i < LARGE_INT;\nloop invariant i210: 0 <= k < LARGE_INT;\nloop invariant i211: j = unknown_int();\nloop invariant i212: i + j < LARGE_INT ==> (i + j) < LARGE_INT;\nloop invariant i213: i + j < LARGE_INT ==> (i + j) >= 0;\nloop invariant i214: 0 <= i + j <= 2 * LARGE_INT;\nloop invariant i215: 0 <= k + 1 <= 2 * LARGE_INT;\nloop invariant i216: 0 <= j <= LARGE_INT;\nloop invariant i217: 0 <= k <= 2 * LARGE_INT;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 176,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: k >= 0;\n\n\n\n\nloop invariant i12: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i92: k + 1 >= k;\n\nloop invariant i94: k + 1 < k + 2;\n\nloop invariant i96: k + 1 < k + 3;\n\nloop invariant i98: k + 1 < k + 4;\n\nloop invariant i100: k + 1 < k + 5;\n\nloop invariant i102: k + 1 < k + 6;\n\nloop invariant i104: k + 1 < k + 7;\n\nloop invariant i106: k + 1 < k + 8;\n\nloop invariant i108: k + 1 < k + 9;\n\nloop invariant i110: k + 1 < k + 10;\n\nloop invariant i112: k + 1 < k + 11;\n\nloop invariant i114: k + 1 < k + 12;\n\nloop invariant i116: k + 1 < k + 13;\n\nloop invariant i118: k + 1 < k + 14;\n\nloop invariant i120: k + 1 < k + 15;\n\nloop invariant i122: k + 1 < k + 16;\n\nloop invariant i124: k + 1 < k + 17;\n\nloop invariant i126: k + 1 < k + 18;\n\nloop invariant i128: k + 1 < k + 19;\n\nloop invariant i130: k + 1 < k + 20;\n\nloop invariant i132: k + 1 < k + 21;\n\nloop invariant i134: k + 1 < k + 22;\n\nloop invariant i136: k + 1 < k + 23;\n\nloop invariant i138: k + 1 < k + 24;\n\nloop invariant i140: k + 1 < k + 25;\n\nloop invariant i142: k + 1 < k + 26;\n\nloop invariant i144: k + 1 < k + 27;\n\nloop invariant i146: k + 1 < k + 28;\n\nloop invariant i148: k + 1 < k + 29;\n\nloop invariant i150: k + 1 < k + 30;\n\nloop invariant i152: k + 1 < k + 31;\n\nloop invariant i154: k + 1 < k + 32;\n\nloop invariant i156: k + 1 < k + 33;\n\nloop invariant i158: k + 1 < k + 34;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i201: 0 <= i;\nloop invariant i202: 0 <= k;\n\n\n\nloop invariant i206: k + 1 < k + LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 120,
        "success_count": 103,
        "failure_count": 17,
        "success_rate": 0.8583333333333333
    }
}