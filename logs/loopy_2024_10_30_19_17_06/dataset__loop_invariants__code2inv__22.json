{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/22.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x = n ==> m >= 1;\nloop invariant n > 1 ==> m >= 1;\nloop invariant x = n ==> x = n;\nloop invariant n > 1 ==> m >= 1;\nloop invariant z1 = z1;\nloop invariant z2 = z2;\nloop invariant z3 = z3;\nloop invariant m >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant (m >= 1) ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> m == x;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m >= 1;\nloop invariant n > 1 ==> (m >= 1);\nloop invariant n > 1 ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant n > 1;\n*/\n```",
            "```\n/*@\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant n >= 1;\nloop invariant m >= 1;\nloop invariant m >= 1 ==> n > 1;\nloop invariant x == n ==> n > 1;\nloop invariant m == x ==> n > 1;\nloop invariant m == x ==> m >= 1;\nloop invariant m == x ==> x >= 1;\nloop invariant m == x ==> n >= 1;\nloop invariant m <= x ==> m >= 1;\nloop invariant m <= x ==> x >= 1;\nloop invariant m <= x ==> n >= 1;\nloop invariant x >= 1 ==> m >= 1;\nloop invariant 1 <= m <= x;\nloop invariant 1 <= x <= n;\nloop invariant n >= 1;\nloop invariant 1 <= m;\nloop invariant m >= 1 ==> n > 1;\nloop invariant x == n ==> n > 1;\nloop invariant m == x ==> n > 1;\nloop invariant m == x ==> m >= 1;\nloop invariant m == x ==> x >= 1;\nloop invariant m == x ==> n >= 1;\nloop invariant m <= x ==> m >= 1;\nloop invariant m <= x ==> x >= 1;\nloop invariant m <= x ==> n >= 1;\nloop invariant x >= 1 ==> m >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant 1 <= m <= x;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x - 1 ==> implies(unknown(), m == x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant if (unknown()) then m <= x;\nloop invariant m < x ==> (if (unknown()) then x <= n);\nloop invariant n <= 1 ==> m = 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant 1 <= m <= x; loop invariant m <= x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant (unknown() ==> (m = x));\nloop invariant ((m >= 1) ==> (m <= n));\nloop invariant ((m >= 1) ==> (m <= x));\nloop invariant ((m >= 1) ==> (m <= n));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 1 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant x >= m;\nloop invariant x < n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m == x || (m < x && x < n && unknown());\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant x >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x = n ==> m >= 1;\nloop invariant n > 1 ==> m >= 1;\nloop invariant x = n ==> x = n;\nloop invariant n > 1 ==> m >= 1;\nloop invariant z1 = z1;\nloop invariant z2 = z2;\nloop invariant z3 = z3;\nloop invariant m >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant (m >= 1) ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> m == x;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\nloop invariant m >= 1 ==> (m == 1 || x > 1);\nloop invariant m > 1 ==> x == m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\n\nloop invariant i4: m <= x;\nloop invariant i5: (m >= 1) ==> (m == 1 || x > 1);\n\nloop invariant i7: m >= 1 ==> (m == 1 || x > 1);\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m >= 1;\nloop invariant n > 1 ==> (m >= 1);\nloop invariant n > 1 ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\nloop invariant i5: n > 1 ==> (m >= 1) ==> (m <= n);\nloop invariant i6: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i7: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i8: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i9: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i10: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i11: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i12: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i13: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i14: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i15: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i16: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i17: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i18: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant n > 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant n >= 1;\nloop invariant m >= 1;\nloop invariant m >= 1 ==> n > 1;\nloop invariant x == n ==> n > 1;\nloop invariant m == x ==> n > 1;\nloop invariant m == x ==> m >= 1;\nloop invariant m == x ==> x >= 1;\nloop invariant m == x ==> n >= 1;\nloop invariant m <= x ==> m >= 1;\nloop invariant m <= x ==> x >= 1;\nloop invariant m <= x ==> n >= 1;\nloop invariant x >= 1 ==> m >= 1;\nloop invariant 1 <= m <= x;\nloop invariant 1 <= x <= n;\nloop invariant n >= 1;\nloop invariant 1 <= m;\nloop invariant m >= 1 ==> n > 1;\nloop invariant x == n ==> n > 1;\nloop invariant m == x ==> n > 1;\nloop invariant m == x ==> m >= 1;\nloop invariant m == x ==> x >= 1;\nloop invariant m == x ==> n >= 1;\nloop invariant m <= x ==> m >= 1;\nloop invariant m <= x ==> x >= 1;\nloop invariant m <= x ==> n >= 1;\nloop invariant x >= 1 ==> m >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: m <= x;\n\n\nloop invariant i4: m >= 1;\n\n\n\nloop invariant i8: m == x ==> m >= 1;\nloop invariant i9: m == x ==> x >= 1;\n\nloop invariant i11: m <= x ==> m >= 1;\nloop invariant i12: m <= x ==> x >= 1;\n\nloop invariant i14: x >= 1 ==> m >= 1;\nloop invariant i15: 1 <= m <= x;\n\nloop invariant i17: 1 <= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant 1 <= m <= x;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x - 1 ==> implies(unknown(), m == x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant if (unknown()) then m <= x;\nloop invariant m < x ==> (if (unknown()) then x <= n);\nloop invariant n <= 1 ==> m = 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant 1 <= m <= x; loop invariant m <= x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant (unknown() ==> (m = x));\nloop invariant ((m >= 1) ==> (m <= n));\nloop invariant ((m >= 1) ==> (m <= x));\nloop invariant ((m >= 1) ==> (m <= n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\nloop invariant i5: m >= 1;\n\n\nloop invariant i8: ((m >= 1) ==> (m <= x));\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 1 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m >= 1;\nloop invariant i4: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant x >= m;\nloop invariant x < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: x >= m;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m == x || (m < x && x < n && unknown());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\n\nloop invariant i4: x >= m;\n\nloop invariant i6: x >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: x = n ==> m >= 1;\nloop invariant i2: n > 1 ==> m >= 1;\nloop invariant i3: x = n ==> x = n;\nloop invariant i4: z1 = z1;\nloop invariant i5: z2 = z2;\nloop invariant i6: z3 = z3;\nloop invariant i7: m >= 1;\nloop invariant i8: 0 <= x <= n;\nloop invariant i9: m <= n;\nloop invariant i10: m <= x;\nloop invariant i11: (m >= 1) ==> (m == 1 || x > 1);\nloop invariant i12: m > 1 ==> m == x;\nloop invariant i13: m >= 1 ==> (m == 1 || x > 1);\nloop invariant i14: m > 1 ==> x == m;\nloop invariant i15: 1 <= x <= n;\nloop invariant i16: 0 <= m <= n;\nloop invariant i17: n > 1 ==> (m >= 1);\nloop invariant i18: n > 1 ==> (m >= 1) ==> (m <= n);\nloop invariant i19: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i20: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i21: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i22: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i23: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i24: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i25: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i26: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i27: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i28: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i29: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i30: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i31: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i32: n > 1;\nloop invariant i33: x <= n;\nloop invariant i34: n >= 1;\nloop invariant i35: m >= 1 ==> n > 1;\nloop invariant i36: x == n ==> n > 1;\nloop invariant i37: m == x ==> n > 1;\nloop invariant i38: m == x ==> m >= 1;\nloop invariant i39: m == x ==> x >= 1;\nloop invariant i40: m == x ==> n >= 1;\nloop invariant i41: m <= x ==> m >= 1;\nloop invariant i42: m <= x ==> x >= 1;\nloop invariant i43: m <= x ==> n >= 1;\nloop invariant i44: x >= 1 ==> m >= 1;\nloop invariant i45: 1 <= m <= x;\nloop invariant i46: 1 <= m;\nloop invariant i47: 0 <= x < n;\nloop invariant i48: 1 <= m <= x - 1 ==> implies(unknown(), m == x);\nloop invariant i49: if (unknown()) then m <= x;\nloop invariant i50: m < x ==> (if (unknown()) then x <= n);\nloop invariant i51: n <= 1 ==> m = 1;\nloop invariant i52: 0 <= x <= n; loop invariant 1 <= m <= x; loop invariant m <= x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n; loop invariant x <= n;\nloop invariant i53: 1 <= m <= n;\nloop invariant i54: (unknown() ==> (m = x));\nloop invariant i55: ((m >= 1) ==> (m <= n));\nloop invariant i56: ((m >= 1) ==> (m <= x));\nloop invariant i57: 1 <= n;\nloop invariant i58: m <= x <= n;\nloop invariant i59: x >= m;\nloop invariant i60: x < n;\nloop invariant i61: m == x || (m < x && x < n && unknown());\nloop invariant i62: x >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 25,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: n > 1 ==> m >= 1;\n\n\n\n\nloop invariant i7: m >= 1;\n\n\nloop invariant i10: m <= x;\nloop invariant i11: (m >= 1) ==> (m == 1 || x > 1);\n\nloop invariant i13: m >= 1 ==> (m == 1 || x > 1);\n\n\n\nloop invariant i17: n > 1 ==> (m >= 1);\nloop invariant i18: n > 1 ==> (m >= 1) ==> (m <= n);\nloop invariant i19: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i20: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i21: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i22: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i23: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i24: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i25: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i26: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i27: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i28: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i29: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\nloop invariant i30: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n);\nloop invariant i31: (n > 1) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1) ==> (m <= n) ==> (m >= 1);\n\n\n\n\n\n\nloop invariant i38: m == x ==> m >= 1;\nloop invariant i39: m == x ==> x >= 1;\n\nloop invariant i41: m <= x ==> m >= 1;\nloop invariant i42: m <= x ==> x >= 1;\n\nloop invariant i44: x >= 1 ==> m >= 1;\nloop invariant i45: 1 <= m <= x;\nloop invariant i46: 1 <= m;\n\n\n\n\n\n\n\n\n\nloop invariant i56: ((m >= 1) ==> (m <= x));\n\n\nloop invariant i59: x >= m;\n\n\nloop invariant i62: x >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c"
        ],
        "skipped": [],
        "total": 19,
        "success_count": 15,
        "failure_count": 4,
        "success_rate": 0.7894736842105263
    }
}