{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/51.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= 4;loop invariant if (unknown()) then c <= 3 else c >= 3;loop invariant if (unknown()) then c <= 3 else c >= 4;loop invariant if (unknown()) then c <= 3 else c >= 2;loop invariant if (unknown()) then c <= 3 else c >= 1;loop invariant if (unknown()) then c <= 3 else c >= 0;loop invariant if (unknown()) then c <= 3 else c >= 5;loop invariant if (unknown()) then c <= 3 else c >= 6;loop invariant if (unknown()) then c <= 3 else c >= 7;loop invariant if (unknown()) then c <= 3 else c >= 8;loop invariant if (unknown()) then c <= 3 else c >= 9;loop invariant if (unknown()) then c <= 3 else c >= 10;loop invariant if (unknown()) then c <= 3 else c >= 11;loop invariant if (unknown()) then c <= 3 else c >= 12;loop invariant if (unknown()) then c <= 3 else c >= 13;\nloop invariant 0 <= c <= 4;\nloop invariant if (unknown()) then c <= 3 else c >= 3;\nloop invariant if (unknown()) then c <= 3 else c >= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c == 1 ==> c != 4;\nloop invariant c != 1 ==> c == 4;\nloop invariant c == 4 ==> c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant c == 4 ==> c >= 4;\nloop invariant c == 4 ==> c <= 4;\nloop invariant c != 4 ==> c != 4;\nloop invariant c == 4 ==> c == 4;\nloop invariant c != 4 ==> c != 1;\nloop invariant c == 4 ==> c == 1;\nloop invariant c != 4 ==> c != 2;\nloop invariant c == 4 ==> c == 2;\nloop invariant c != 4 ==> c != 3;\nloop invariant c == 4 ==> c == 3;\nloop invariant c != 4 ==> c != 5;\nloop invariant c == 4 ==> c == 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (((c == 0) && (unknown()) && unknown()) ==> (c == 0));\nloop invariant (((c == 1) && (unknown()) && !(unknown())) ==> (c == 1));\nloop invariant (((c == 4) && !(unknown()) && unknown()) ==> (c == 4));\nloop invariant (((c == 4) && !(unknown()) && !(unknown())) ==> (c == 4));\nloop invariant (((c == 0) && !(unknown()) && unknown()) ==> (c == 0));\nloop invariant (((c == 0) && !(unknown()) && !(unknown())) ==> (c == 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c == 1 || c == 2 || c == 3 || c == 4;\nloop invariant c == 1 ==> unknown() == 0;\nloop invariant !(c == 1) ==> unknown() != 0;\nloop invariant !(c == 1) ==> (unknown() ==> c == 4);\nloop invariant c == 4 ==> !(unknown());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= 4;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == 2 ==> c == 2;\nloop invariant c == 3 ==> c == 3;\nloop invariant c == 4 ==> c == 4;\nloop invariant c != 4 ==> c != 4;\nloop invariant (unknown() ==> (c != 4));\nloop invariant (unknown() ==> (c <= 4));\nloop invariant (unknown() ==> (c >= 0));\nloop invariant (unknown() ==> (c == 1 || c == 2 || c == 3 || c == 4));\nloop invariant (unknown() ==> (c != 5));\nloop invariant (unknown() ==> (c != 6));\nloop invariant (unknown() ==> (c != 7));\nloop invariant (unknown() ==> (c != 8));\nloop invariant (unknown() ==> (c != 9));\nloop invariant (unknown() ==> (c != 10));\nloop invariant (unknown() ==> (c != 11));\nloop invariant (unknown() ==> (c != 12));\nloop invariant (unknown() ==> (c != 13));\nloop invariant (unknown() ==> (c != 14));\nloop invariant (unknown() ==> (c != 15));\nloop invariant (unknown() ==> (c != 16));\nloop invariant (unknown() ==> (c != 17));\nloop invariant (unknown() ==> (c != 18));\nloop invariant (unknown() ==> (c != 19));\nloop invariant (unknown() ==> (c != 20));\nloop invariant (unknown() ==> (c != 21));\nloop invariant (unknown() ==> (c != 22));\nloop invariant (unknown() ==> (c != 23));\nloop invariant (unknown() ==> (c != 24));\nloop invariant (unknown() ==> (c != 25));\nloop invariant (unknown() ==> (c != 26));\nloop invariant (unknown() ==> (c != 27));\nloop invariant (unknown() ==> (c != 28));\nloop invariant (unknown() ==> (c != 29));\nloop invariant (unknown() ==> (c != 30));\nloop invariant (unknown() ==> (c != 31));\nloop invariant (unknown() ==> (c != 32));\nloop invariant (unknown() ==> (c != 33));\nloop invariant (unknown() ==> (c != 34));\nloop invariant (unknown() ==> (c != 35));\nloop invariant (unknown() ==> (c != 36));\nloop invariant (unknown() ==> (c != 37));\nloop invariant (unknown() ==> (c != 38));\nloop invariant (unknown() ==> (c != 39));\nloop invariant (unknown() ==> (c != 40));\nloop invariant (unknown() ==> (c != 41));\nloop invariant (unknown() ==> (c != 42));\nloop invariant (unknown() ==> (c != 43));\nloop invariant (unknown() ==> (c != 44));\nloop invariant (unknown() ==> (c != 45));\nloop invariant (unknown() ==> (c != 46));\nloop invariant (unknown() ==> (c != 47));\nloop invariant (unknown() ==> (c != 48));\nloop invariant (unknown() ==> (c != 49));\nloop invariant (unknown() ==> (c != 50));\nloop invariant (unknown() ==> (c != 51));\nloop invariant (unknown() ==> (c != 52));\nloop invariant (unknown() ==> (c != 53));\nloop invariant (unknown() ==> (c != 54));\nloop invariant (unknown() ==> (c != 55));\nloop invariant (unknown() ==> (c != 56));\nloop invariant (unknown() ==> (c != 57));\nloop invariant (unknown() ==> (c != 58));\nloop invariant (unknown() ==> (c != 59));\nloop invariant (unknown() ==> (c != 60));\nloop invariant (unknown() ==> (c != 61));\nloop invariant (unknown() ==> (c != 62));\nloop invariant (unknown() ==> (c != 63));\nloop invariant (unknown() ==> (c != 64));\nloop invariant (unknown() ==> (c != 65));\nloop invariant (unknown() ==> (c != 66));\nloop invariant (unknown() ==> (c != 67));\nloop invariant (unknown() ==> (c != 68));\nloop invariant (unknown() ==> (c != 69));\nloop invariant (unknown() ==> (c != 70));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant unknown() ==> c == 4;\nloop invariant !unknown() ==> c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c == 1 ==> c >= 1;\nloop invariant c == 4 ==> c >= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= 4;\nloop invariant c == 1 || c == 4;\nloop invariant c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> ((c + 1) >= 4);\nloop invariant (c != 4) ==> ((c + 1) <= 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant ((c == 0) || (c == 1) || (c == 4));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) || (c == 0);\nloop invariant (c == 4) ==> c + 1 >= 5;\nloop invariant (c == 4) ==> c + 1 <= 5;\nloop invariant (c == 4) ==> c + 1 == 5;\nloop invariant (c != 4) ==> c + 1 >= 1;\nloop invariant (c != 4) ==> c + 1 <= 5;\nloop invariant (c != 4) ==> c + 1 == 1;\nloop invariant (c != 4) ==> c + 1 == 2;\nloop invariant (c != 4) ==> c + 1 == 3;\nloop invariant (c != 4) ==> c + 1 == 4;\nloop invariant (c != 4) ==> c + 1 == 5;\nloop invariant (c == 4) ==> c >= 4;\nloop invariant (c == 4) ==> c <= 4;\nloop invariant (c == 4) ==> c == 4;\nloop invariant (c != 4) ==> c >= 0;\nloop invariant (c != 4) ==> c <= 4;\nloop invariant (c != 4) ==> c == 1;\nloop invariant (c != 4) ==> c == 2;\nloop invariant (c != 4) ==> c == 3;\nloop invariant (c != 4) ==> c == 4;\nloop invariant (c == 4) ==> c == 4;\nloop invariant (c != 4) ==> c == 0;\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) || (c == 0);\nloop invariant (c == 4) ==> c + 1 >= 5;\nloop invariant (c == 4) ==> c + 1 <= 5;\nloop invariant (c == 4) ==> c + 1 == 5;\nloop invariant (c != 4) ==> c + 1 >= 1;\nloop invariant (c != 4) ==> c + 1 <= 5;\nloop invariant (c != 4) ==> c + 1 == 1;\nloop invariant (c != 4) ==> c + 1 == 2;\nloop invariant (c != 4) ==> c + 1 == 3;\nloop invariant (c != 4) ==> c + 1 == 4;\nloop invariant (c != 4) ==> c + 1 == 5;\nloop invariant (c == 4) ==> c >= 4;\nloop invariant (c == 4) ==> c <= 4;\nloop invariant (c == 4) ==> c == 4;\nloop invariant (c != 4) ==> c >= 0;\nloop invariant (c != 4) ==> c <= 4;\nloop invariant (c != 4) ==> c == 1;\nloop invariant (c != 4) ==> c == 2;\nloop invariant (c != 4) ==> c == 3;\nloop invariant (c != 4) ==> c == 4;\nloop invariant (c == 4) ==> c == 4;\nloop invariant (c != 4) ==> c == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c == 0 ==> c == 1;\nloop invariant c == 1 ==> c == 4;\nloop invariant c == 4 ==> c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (if c == 4 then c <= 1 else c >= 1);\nloop invariant (if c == 4 then c >= 4 else c <= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 1) ==> (unknown() == 0);\nloop invariant (c == 1) ==> !unknown();\nloop invariant (c == 2) ==> (unknown() != 0);\nloop invariant (c == 3) ==> (c != 4);\nloop invariant (c == 4) ==> (c == 4);\nloop invariant (c == 4) ==> unknown();\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> (unknown() != 0);\nloop invariant (c == 4) ==> (c != 4);\nloop invariant 0 <= c <= 4;\nloop invariant (c == 1) ==> (unknown() == 0);\nloop invariant (c == 1) ==> !unknown();\nloop invariant (c == 2) ==> (unknown() != 0);\nloop invariant (c == 3) ==> (c != 4);\nloop invariant (c == 4) ==> (c == 4);\nloop invariant (c == 4) ==> unknown();\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> (unknown() != 0);\nloop invariant (c == 4) ==> (c != 4);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;loop invariant if (unknown()) then c <= 3 else c >= 3;loop invariant if (unknown()) then c <= 3 else c >= 4;loop invariant if (unknown()) then c <= 3 else c >= 2;loop invariant if (unknown()) then c <= 3 else c >= 1;loop invariant if (unknown()) then c <= 3 else c >= 0;loop invariant if (unknown()) then c <= 3 else c >= 5;loop invariant if (unknown()) then c <= 3 else c >= 6;loop invariant if (unknown()) then c <= 3 else c >= 7;loop invariant if (unknown()) then c <= 3 else c >= 8;loop invariant if (unknown()) then c <= 3 else c >= 9;loop invariant if (unknown()) then c <= 3 else c >= 10;loop invariant if (unknown()) then c <= 3 else c >= 11;loop invariant if (unknown()) then c <= 3 else c >= 12;loop invariant if (unknown()) then c <= 3 else c >= 13;\nloop invariant 0 <= c <= 4;\nloop invariant if (unknown()) then c <= 3 else c >= 3;\nloop invariant if (unknown()) then c <= 3 else c >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: 0 <= c <= 4;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c == 1 ==> c != 4;\nloop invariant c != 1 ==> c == 4;\nloop invariant c == 4 ==> c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: c == 1 ==> c != 4;\n\nloop invariant i4: c == 4 ==> c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant c == 4 ==> c >= 4;\nloop invariant c == 4 ==> c <= 4;\nloop invariant c != 4 ==> c != 4;\nloop invariant c == 4 ==> c == 4;\nloop invariant c != 4 ==> c != 1;\nloop invariant c == 4 ==> c == 1;\nloop invariant c != 4 ==> c != 2;\nloop invariant c == 4 ==> c == 2;\nloop invariant c != 4 ==> c != 3;\nloop invariant c == 4 ==> c == 3;\nloop invariant c != 4 ==> c != 5;\nloop invariant c == 4 ==> c == 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c != 4 ==> c >= 0;\nloop invariant i3: c != 4 ==> c <= 4;\nloop invariant i4: c == 4 ==> c >= 4;\nloop invariant i5: c == 4 ==> c <= 4;\nloop invariant i6: c != 4 ==> c != 4;\nloop invariant i7: c == 4 ==> c == 4;\n\n\n\n\n\n\nloop invariant i14: c != 4 ==> c != 5;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (((c == 0) && (unknown()) && unknown()) ==> (c == 0));\nloop invariant (((c == 1) && (unknown()) && !(unknown())) ==> (c == 1));\nloop invariant (((c == 4) && !(unknown()) && unknown()) ==> (c == 4));\nloop invariant (((c == 4) && !(unknown()) && !(unknown())) ==> (c == 4));\nloop invariant (((c == 0) && !(unknown()) && unknown()) ==> (c == 0));\nloop invariant (((c == 0) && !(unknown()) && !(unknown())) ==> (c == 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c == 1 || c == 2 || c == 3 || c == 4;\nloop invariant c == 1 ==> unknown() == 0;\nloop invariant !(c == 1) ==> unknown() != 0;\nloop invariant !(c == 1) ==> (unknown() ==> c == 4);\nloop invariant c == 4 ==> !(unknown());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 70,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= 4;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == 2 ==> c == 2;\nloop invariant c == 3 ==> c == 3;\nloop invariant c == 4 ==> c == 4;\nloop invariant c != 4 ==> c != 4;\nloop invariant (unknown() ==> (c != 4));\nloop invariant (unknown() ==> (c <= 4));\nloop invariant (unknown() ==> (c >= 0));\nloop invariant (unknown() ==> (c == 1 || c == 2 || c == 3 || c == 4));\nloop invariant (unknown() ==> (c != 5));\nloop invariant (unknown() ==> (c != 6));\nloop invariant (unknown() ==> (c != 7));\nloop invariant (unknown() ==> (c != 8));\nloop invariant (unknown() ==> (c != 9));\nloop invariant (unknown() ==> (c != 10));\nloop invariant (unknown() ==> (c != 11));\nloop invariant (unknown() ==> (c != 12));\nloop invariant (unknown() ==> (c != 13));\nloop invariant (unknown() ==> (c != 14));\nloop invariant (unknown() ==> (c != 15));\nloop invariant (unknown() ==> (c != 16));\nloop invariant (unknown() ==> (c != 17));\nloop invariant (unknown() ==> (c != 18));\nloop invariant (unknown() ==> (c != 19));\nloop invariant (unknown() ==> (c != 20));\nloop invariant (unknown() ==> (c != 21));\nloop invariant (unknown() ==> (c != 22));\nloop invariant (unknown() ==> (c != 23));\nloop invariant (unknown() ==> (c != 24));\nloop invariant (unknown() ==> (c != 25));\nloop invariant (unknown() ==> (c != 26));\nloop invariant (unknown() ==> (c != 27));\nloop invariant (unknown() ==> (c != 28));\nloop invariant (unknown() ==> (c != 29));\nloop invariant (unknown() ==> (c != 30));\nloop invariant (unknown() ==> (c != 31));\nloop invariant (unknown() ==> (c != 32));\nloop invariant (unknown() ==> (c != 33));\nloop invariant (unknown() ==> (c != 34));\nloop invariant (unknown() ==> (c != 35));\nloop invariant (unknown() ==> (c != 36));\nloop invariant (unknown() ==> (c != 37));\nloop invariant (unknown() ==> (c != 38));\nloop invariant (unknown() ==> (c != 39));\nloop invariant (unknown() ==> (c != 40));\nloop invariant (unknown() ==> (c != 41));\nloop invariant (unknown() ==> (c != 42));\nloop invariant (unknown() ==> (c != 43));\nloop invariant (unknown() ==> (c != 44));\nloop invariant (unknown() ==> (c != 45));\nloop invariant (unknown() ==> (c != 46));\nloop invariant (unknown() ==> (c != 47));\nloop invariant (unknown() ==> (c != 48));\nloop invariant (unknown() ==> (c != 49));\nloop invariant (unknown() ==> (c != 50));\nloop invariant (unknown() ==> (c != 51));\nloop invariant (unknown() ==> (c != 52));\nloop invariant (unknown() ==> (c != 53));\nloop invariant (unknown() ==> (c != 54));\nloop invariant (unknown() ==> (c != 55));\nloop invariant (unknown() ==> (c != 56));\nloop invariant (unknown() ==> (c != 57));\nloop invariant (unknown() ==> (c != 58));\nloop invariant (unknown() ==> (c != 59));\nloop invariant (unknown() ==> (c != 60));\nloop invariant (unknown() ==> (c != 61));\nloop invariant (unknown() ==> (c != 62));\nloop invariant (unknown() ==> (c != 63));\nloop invariant (unknown() ==> (c != 64));\nloop invariant (unknown() ==> (c != 65));\nloop invariant (unknown() ==> (c != 66));\nloop invariant (unknown() ==> (c != 67));\nloop invariant (unknown() ==> (c != 68));\nloop invariant (unknown() ==> (c != 69));\nloop invariant (unknown() ==> (c != 70));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: c <= 4;\nloop invariant i3: c == 1 ==> c == 1;\nloop invariant i4: c == 2 ==> c == 2;\nloop invariant i5: c == 3 ==> c == 3;\nloop invariant i6: c == 4 ==> c == 4;\nloop invariant i7: c != 4 ==> c != 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant unknown() ==> c == 4;\nloop invariant !unknown() ==> c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c == 1 ==> c >= 1;\nloop invariant c == 4 ==> c >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c == 1 ==> c >= 1;\nloop invariant i3: c == 4 ==> c >= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= 4;\nloop invariant c == 1 || c == 4;\nloop invariant c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: c <= 4;\n\nloop invariant i4: c != 4 || c <= 4;\nloop invariant i5: c == 1 || c == 4 || c <= 4;\nloop invariant i6: c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i7: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i8: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i9: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i10: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i11: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i12: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i13: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i14: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i15: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i16: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> ((c + 1) >= 4);\nloop invariant (c != 4) ==> ((c + 1) <= 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: (c == 4) ==> ((c + 1) >= 4);\nloop invariant i3: (c != 4) ==> ((c + 1) <= 4);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant ((c == 0) || (c == 1) || (c == 4));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) || (c == 0);\nloop invariant (c == 4) ==> c + 1 >= 5;\nloop invariant (c == 4) ==> c + 1 <= 5;\nloop invariant (c == 4) ==> c + 1 == 5;\nloop invariant (c != 4) ==> c + 1 >= 1;\nloop invariant (c != 4) ==> c + 1 <= 5;\nloop invariant (c != 4) ==> c + 1 == 1;\nloop invariant (c != 4) ==> c + 1 == 2;\nloop invariant (c != 4) ==> c + 1 == 3;\nloop invariant (c != 4) ==> c + 1 == 4;\nloop invariant (c != 4) ==> c + 1 == 5;\nloop invariant (c == 4) ==> c >= 4;\nloop invariant (c == 4) ==> c <= 4;\nloop invariant (c == 4) ==> c == 4;\nloop invariant (c != 4) ==> c >= 0;\nloop invariant (c != 4) ==> c <= 4;\nloop invariant (c != 4) ==> c == 1;\nloop invariant (c != 4) ==> c == 2;\nloop invariant (c != 4) ==> c == 3;\nloop invariant (c != 4) ==> c == 4;\nloop invariant (c == 4) ==> c == 4;\nloop invariant (c != 4) ==> c == 0;\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) || (c == 0);\nloop invariant (c == 4) ==> c + 1 >= 5;\nloop invariant (c == 4) ==> c + 1 <= 5;\nloop invariant (c == 4) ==> c + 1 == 5;\nloop invariant (c != 4) ==> c + 1 >= 1;\nloop invariant (c != 4) ==> c + 1 <= 5;\nloop invariant (c != 4) ==> c + 1 == 1;\nloop invariant (c != 4) ==> c + 1 == 2;\nloop invariant (c != 4) ==> c + 1 == 3;\nloop invariant (c != 4) ==> c + 1 == 4;\nloop invariant (c != 4) ==> c + 1 == 5;\nloop invariant (c == 4) ==> c >= 4;\nloop invariant (c == 4) ==> c <= 4;\nloop invariant (c == 4) ==> c == 4;\nloop invariant (c != 4) ==> c >= 0;\nloop invariant (c != 4) ==> c <= 4;\nloop invariant (c != 4) ==> c == 1;\nloop invariant (c != 4) ==> c == 2;\nloop invariant (c != 4) ==> c == 3;\nloop invariant (c != 4) ==> c == 4;\nloop invariant (c == 4) ==> c == 4;\nloop invariant (c != 4) ==> c == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\nloop invariant i3: (c == 4) ==> c + 1 >= 5;\nloop invariant i4: (c == 4) ==> c + 1 <= 5;\nloop invariant i5: (c == 4) ==> c + 1 == 5;\nloop invariant i6: (c != 4) ==> c + 1 >= 1;\nloop invariant i7: (c != 4) ==> c + 1 <= 5;\n\n\n\n\n\nloop invariant i13: (c == 4) ==> c >= 4;\nloop invariant i14: (c == 4) ==> c <= 4;\nloop invariant i15: (c == 4) ==> c == 4;\nloop invariant i16: (c != 4) ==> c >= 0;\nloop invariant i17: (c != 4) ==> c <= 4;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c == 0 ==> c == 1;\nloop invariant c == 1 ==> c == 4;\nloop invariant c == 4 ==> c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\nloop invariant i4: c == 4 ==> c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (if c == 4 then c <= 1 else c >= 1);\nloop invariant (if c == 4 then c >= 4 else c <= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\nloop invariant (if c == 4 then c <= 4 else c >= 0);\nloop invariant (if c == 4 then c <= 4 else c >= 1);\nloop invariant (if c == 4 then c <= 4 else c >= 2);\nloop invariant (if c == 4 then c <= 4 else c >= 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 1) ==> (unknown() == 0);\nloop invariant (c == 1) ==> !unknown();\nloop invariant (c == 2) ==> (unknown() != 0);\nloop invariant (c == 3) ==> (c != 4);\nloop invariant (c == 4) ==> (c == 4);\nloop invariant (c == 4) ==> unknown();\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> (unknown() != 0);\nloop invariant (c == 4) ==> (c != 4);\nloop invariant 0 <= c <= 4;\nloop invariant (c == 1) ==> (unknown() == 0);\nloop invariant (c == 1) ==> !unknown();\nloop invariant (c == 2) ==> (unknown() != 0);\nloop invariant (c == 3) ==> (c != 4);\nloop invariant (c == 4) ==> (c == 4);\nloop invariant (c == 4) ==> unknown();\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> (unknown() != 0);\nloop invariant (c == 4) ==> (c != 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\nloop invariant i5: (c == 3) ==> (c != 4);\nloop invariant i6: (c == 4) ==> (c == 4);\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;loop invariant if (unknown()) then c <= 3 else c >= 3;loop invariant if (unknown()) then c <= 3 else c >= 4;loop invariant if (unknown()) then c <= 3 else c >= 2;loop invariant if (unknown()) then c <= 3 else c >= 1;loop invariant if (unknown()) then c <= 3 else c >= 0;loop invariant if (unknown()) then c <= 3 else c >= 5;loop invariant if (unknown()) then c <= 3 else c >= 6;loop invariant if (unknown()) then c <= 3 else c >= 7;loop invariant if (unknown()) then c <= 3 else c >= 8;loop invariant if (unknown()) then c <= 3 else c >= 9;loop invariant if (unknown()) then c <= 3 else c >= 10;loop invariant if (unknown()) then c <= 3 else c >= 11;loop invariant if (unknown()) then c <= 3 else c >= 12;loop invariant if (unknown()) then c <= 3 else c >= 13;\nloop invariant i2: 0 <= c <= 4;\nloop invariant i3: if (unknown()) then c <= 3 else c >= 3;\nloop invariant i4: if (unknown()) then c <= 3 else c >= 4;\nloop invariant i5: 0 <= c <= 5;\nloop invariant i6: c == 1 ==> c != 4;\nloop invariant i7: c != 1 ==> c == 4;\nloop invariant i8: c == 4 ==> c <= 4;\nloop invariant i9: c != 4 ==> c >= 0;\nloop invariant i10: c != 4 ==> c <= 4;\nloop invariant i11: c == 4 ==> c >= 4;\nloop invariant i12: c != 4 ==> c != 4;\nloop invariant i13: c == 4 ==> c == 4;\nloop invariant i14: c != 4 ==> c != 1;\nloop invariant i15: c == 4 ==> c == 1;\nloop invariant i16: c != 4 ==> c != 2;\nloop invariant i17: c == 4 ==> c == 2;\nloop invariant i18: c != 4 ==> c != 3;\nloop invariant i19: c == 4 ==> c == 3;\nloop invariant i20: c != 4 ==> c != 5;\nloop invariant i21: c == 4 ==> c == 5;\nloop invariant i22: (((c == 0) && (unknown()) && unknown()) ==> (c == 0));\nloop invariant i23: (((c == 1) && (unknown()) && !(unknown())) ==> (c == 1));\nloop invariant i24: (((c == 4) && !(unknown()) && unknown()) ==> (c == 4));\nloop invariant i25: (((c == 4) && !(unknown()) && !(unknown())) ==> (c == 4));\nloop invariant i26: (((c == 0) && !(unknown()) && unknown()) ==> (c == 0));\nloop invariant i27: (((c == 0) && !(unknown()) && !(unknown())) ==> (c == 0));\nloop invariant i28: c == 1 || c == 2 || c == 3 || c == 4;\nloop invariant i29: c == 1 ==> unknown() == 0;\nloop invariant i30: !(c == 1) ==> unknown() != 0;\nloop invariant i31: !(c == 1) ==> (unknown() ==> c == 4);\nloop invariant i32: c == 4 ==> !(unknown());\nloop invariant i33: 0 <= c;\nloop invariant i34: c <= 4;\nloop invariant i35: c == 1 ==> c == 1;\nloop invariant i36: c == 2 ==> c == 2;\nloop invariant i37: c == 3 ==> c == 3;\nloop invariant i38: (unknown() ==> (c != 4));\nloop invariant i39: (unknown() ==> (c <= 4));\nloop invariant i40: (unknown() ==> (c >= 0));\nloop invariant i41: (unknown() ==> (c == 1 || c == 2 || c == 3 || c == 4));\nloop invariant i42: (unknown() ==> (c != 5));\nloop invariant i43: (unknown() ==> (c != 6));\nloop invariant i44: (unknown() ==> (c != 7));\nloop invariant i45: (unknown() ==> (c != 8));\nloop invariant i46: (unknown() ==> (c != 9));\nloop invariant i47: (unknown() ==> (c != 10));\nloop invariant i48: (unknown() ==> (c != 11));\nloop invariant i49: (unknown() ==> (c != 12));\nloop invariant i50: (unknown() ==> (c != 13));\nloop invariant i51: (unknown() ==> (c != 14));\nloop invariant i52: (unknown() ==> (c != 15));\nloop invariant i53: (unknown() ==> (c != 16));\nloop invariant i54: (unknown() ==> (c != 17));\nloop invariant i55: (unknown() ==> (c != 18));\nloop invariant i56: (unknown() ==> (c != 19));\nloop invariant i57: (unknown() ==> (c != 20));\nloop invariant i58: (unknown() ==> (c != 21));\nloop invariant i59: (unknown() ==> (c != 22));\nloop invariant i60: (unknown() ==> (c != 23));\nloop invariant i61: (unknown() ==> (c != 24));\nloop invariant i62: (unknown() ==> (c != 25));\nloop invariant i63: (unknown() ==> (c != 26));\nloop invariant i64: (unknown() ==> (c != 27));\nloop invariant i65: (unknown() ==> (c != 28));\nloop invariant i66: (unknown() ==> (c != 29));\nloop invariant i67: (unknown() ==> (c != 30));\nloop invariant i68: (unknown() ==> (c != 31));\nloop invariant i69: (unknown() ==> (c != 32));\nloop invariant i70: (unknown() ==> (c != 33));\nloop invariant i71: (unknown() ==> (c != 34));\nloop invariant i72: (unknown() ==> (c != 35));\nloop invariant i73: (unknown() ==> (c != 36));\nloop invariant i74: (unknown() ==> (c != 37));\nloop invariant i75: (unknown() ==> (c != 38));\nloop invariant i76: (unknown() ==> (c != 39));\nloop invariant i77: (unknown() ==> (c != 40));\nloop invariant i78: (unknown() ==> (c != 41));\nloop invariant i79: (unknown() ==> (c != 42));\nloop invariant i80: (unknown() ==> (c != 43));\nloop invariant i81: (unknown() ==> (c != 44));\nloop invariant i82: (unknown() ==> (c != 45));\nloop invariant i83: (unknown() ==> (c != 46));\nloop invariant i84: (unknown() ==> (c != 47));\nloop invariant i85: (unknown() ==> (c != 48));\nloop invariant i86: (unknown() ==> (c != 49));\nloop invariant i87: (unknown() ==> (c != 50));\nloop invariant i88: (unknown() ==> (c != 51));\nloop invariant i89: (unknown() ==> (c != 52));\nloop invariant i90: (unknown() ==> (c != 53));\nloop invariant i91: (unknown() ==> (c != 54));\nloop invariant i92: (unknown() ==> (c != 55));\nloop invariant i93: (unknown() ==> (c != 56));\nloop invariant i94: (unknown() ==> (c != 57));\nloop invariant i95: (unknown() ==> (c != 58));\nloop invariant i96: (unknown() ==> (c != 59));\nloop invariant i97: (unknown() ==> (c != 60));\nloop invariant i98: (unknown() ==> (c != 61));\nloop invariant i99: (unknown() ==> (c != 62));\nloop invariant i100: (unknown() ==> (c != 63));\nloop invariant i101: (unknown() ==> (c != 64));\nloop invariant i102: (unknown() ==> (c != 65));\nloop invariant i103: (unknown() ==> (c != 66));\nloop invariant i104: (unknown() ==> (c != 67));\nloop invariant i105: (unknown() ==> (c != 68));\nloop invariant i106: (unknown() ==> (c != 69));\nloop invariant i107: (unknown() ==> (c != 70));\nloop invariant i108: unknown() ==> c == 4;\nloop invariant i109: !unknown() ==> c <= 4;\nloop invariant i110: c == 1 ==> c >= 1;\nloop invariant i111: c == 1 || c == 4;\nloop invariant i112: c != 4 || c <= 4;\nloop invariant i113: c == 1 || c == 4 || c <= 4;\nloop invariant i114: c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i115: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i116: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i117: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i118: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i119: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i120: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i121: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i122: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i123: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i124: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i125: (c == 4) ==> ((c + 1) >= 4);\nloop invariant i126: (c != 4) ==> ((c + 1) <= 4);\nloop invariant i127: ((c == 0) || (c == 1) || (c == 4));\nloop invariant i128: (c == 4) || (c == 0);\nloop invariant i129: (c == 4) ==> c + 1 >= 5;\nloop invariant i130: (c == 4) ==> c + 1 <= 5;\nloop invariant i131: (c == 4) ==> c + 1 == 5;\nloop invariant i132: (c != 4) ==> c + 1 >= 1;\nloop invariant i133: (c != 4) ==> c + 1 <= 5;\nloop invariant i134: (c != 4) ==> c + 1 == 1;\nloop invariant i135: (c != 4) ==> c + 1 == 2;\nloop invariant i136: (c != 4) ==> c + 1 == 3;\nloop invariant i137: (c != 4) ==> c + 1 == 4;\nloop invariant i138: (c != 4) ==> c + 1 == 5;\nloop invariant i139: (c == 4) ==> c >= 4;\nloop invariant i140: (c == 4) ==> c <= 4;\nloop invariant i141: (c == 4) ==> c == 4;\nloop invariant i142: (c != 4) ==> c >= 0;\nloop invariant i143: (c != 4) ==> c <= 4;\nloop invariant i144: (c != 4) ==> c == 1;\nloop invariant i145: (c != 4) ==> c == 2;\nloop invariant i146: (c != 4) ==> c == 3;\nloop invariant i147: (c != 4) ==> c == 4;\nloop invariant i148: (c != 4) ==> c == 0;\nloop invariant i149: c == 0 ==> c == 1;\nloop invariant i150: c == 1 ==> c == 4;\nloop invariant i151: (if c == 4 then c <= 1 else c >= 1);\nloop invariant i152: (if c == 4 then c >= 4 else c <= 3);\nloop invariant i153: (if c == 4 then c <= 4 else c >= 0);\nloop invariant i154: (if c == 4 then c <= 4 else c >= 1);\nloop invariant i155: (if c == 4 then c <= 4 else c >= 2);\nloop invariant i156: (if c == 4 then c <= 4 else c >= 3);\nloop invariant i157: (c == 1) ==> (unknown() == 0);\nloop invariant i158: (c == 1) ==> !unknown();\nloop invariant i159: (c == 2) ==> (unknown() != 0);\nloop invariant i160: (c == 3) ==> (c != 4);\nloop invariant i161: (c == 4) ==> (c == 4);\nloop invariant i162: (c == 4) ==> unknown();\nloop invariant i163: (c == 4) ==> unknown() == 0;\nloop invariant i164: (c == 4) ==> (unknown() != 0);\nloop invariant i165: (c == 4) ==> (c != 4);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 123,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: 0 <= c <= 4;\n\n\nloop invariant i5: 0 <= c <= 5;\nloop invariant i6: c == 1 ==> c != 4;\n\nloop invariant i8: c == 4 ==> c <= 4;\nloop invariant i9: c != 4 ==> c >= 0;\nloop invariant i10: c != 4 ==> c <= 4;\nloop invariant i11: c == 4 ==> c >= 4;\nloop invariant i12: c != 4 ==> c != 4;\nloop invariant i13: c == 4 ==> c == 4;\n\n\n\n\n\n\nloop invariant i20: c != 4 ==> c != 5;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i33: 0 <= c;\nloop invariant i34: c <= 4;\nloop invariant i35: c == 1 ==> c == 1;\nloop invariant i36: c == 2 ==> c == 2;\nloop invariant i37: c == 3 ==> c == 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i110: c == 1 ==> c >= 1;\n\nloop invariant i112: c != 4 || c <= 4;\nloop invariant i113: c == 1 || c == 4 || c <= 4;\nloop invariant i114: c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i115: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i116: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i117: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i118: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i119: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i120: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i121: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i122: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i123: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4;\nloop invariant i124: c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4 ==> c != 4 || c <= 4 ==> c == 1 || c == 4 || c <= 4;\nloop invariant i125: (c == 4) ==> ((c + 1) >= 4);\nloop invariant i126: (c != 4) ==> ((c + 1) <= 4);\n\n\nloop invariant i129: (c == 4) ==> c + 1 >= 5;\nloop invariant i130: (c == 4) ==> c + 1 <= 5;\nloop invariant i131: (c == 4) ==> c + 1 == 5;\nloop invariant i132: (c != 4) ==> c + 1 >= 1;\nloop invariant i133: (c != 4) ==> c + 1 <= 5;\n\n\n\n\n\nloop invariant i139: (c == 4) ==> c >= 4;\nloop invariant i140: (c == 4) ==> c <= 4;\nloop invariant i141: (c == 4) ==> c == 4;\nloop invariant i142: (c != 4) ==> c >= 0;\nloop invariant i143: (c != 4) ==> c <= 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i160: (c == 3) ==> (c != 4);\nloop invariant i161: (c == 4) ==> (c == 4);\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c"
        ],
        "skipped": [],
        "total": 44,
        "success_count": 36,
        "failure_count": 8,
        "success_rate": 0.8181818181818182
    }
}