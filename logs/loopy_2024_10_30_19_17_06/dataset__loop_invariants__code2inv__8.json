{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/8.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant (y == 0) ==> (x != 20);\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant x >= y;\nloop invariant x <= 20;\nloop invariant y == 0 ==> x != 20;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= (y + 10) * (x - y) / 10;\nloop invariant y == 0 ==> x != 20;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10;\nloop invariant y == 10 ==> x == 20;\nloop invariant y == 0 ==> x == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant y == 10 ==> x == 20;\nloop invariant y == 10 ==> x == 20;\nloop invariant y == 0 ==> x == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= (y + 10) * (x - y) / 10;\nloop invariant y == 0 ==> x != 20;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10;\nloop invariant y == 10 ==> x == 20;\nloop invariant y == 0 ==> x == 0;\nloop invariant y == 10 ==> x == 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant unknown() == 1 ==> (x >= 0) && (x <= 10) && (y <= 10) && (y >= 0);\nloop invariant unknown() == 0 ==> (x >= 0) && (x <= 20) && (y <= 20) && (y >= 0);\nloop invariant x >= 0;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant x + 10 <= x + 10;\nloop invariant y + 10 <= y + 10;\nloop invariant x + 10 <= 20;\nloop invariant y + 10 <= 20;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant x <= 20;\nloop invariant x <= (y + 10);\nloop invariant (unknown() == true) ==> (y == 0);\nloop invariant (unknown() == false) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant ( x >= 0 );\nloop invariant ( x <= 20 );\nloop invariant ( y >= 0 );\nloop invariant ( y <= 20 );\nloop invariant ( x >= y );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + 10 * n <= 20;\nloop invariant y + 10 * n <= 20;\nloop invariant x + 10 * n == 0 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 10 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= (y - 1) * 10;\nloop invariant y >= x;\nloop invariant x != 20 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= y;\nloop invariant x + y < 20;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant y <= x;\nloop invariant (y == 0) ==> (x == 0);\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant y <= x;\nloop invariant (y == 0) ==> (x == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= (x + 10);\nloop invariant y <= (y + 10);\nloop invariant x + y <= 20;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant (x + y) % 10 == 0;\nloop invariant (x + y) % 10 == 0 ==> (x != 20);\nloop invariant (x + y) % 10 == 0 ==> (x < 20);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant (y == 0) ==> (x != 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant x >= y;\nloop invariant x <= 20;\nloop invariant y == 0 ==> x != 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: y >= 0;\n\nloop invariant i3: x >= 0;\n\n\n\nloop invariant i7: y == 0 ==> x != 20;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= (y + 10) * (x - y) / 10;\nloop invariant y == 0 ==> x != 20;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10;\nloop invariant y == 10 ==> x == 20;\nloop invariant y == 0 ==> x == 0;\nloop invariant y == 0 ==> x == 0;\nloop invariant y == 10 ==> x == 20;\nloop invariant y == 10 ==> x == 20;\nloop invariant y == 0 ==> x == 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= (y + 10) * (x - y) / 10;\nloop invariant y == 0 ==> x != 20;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 10 ==> y == 10;\nloop invariant y == 10 ==> x == 20;\nloop invariant y == 0 ==> x == 0;\nloop invariant y == 10 ==> x == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n\nloop invariant i6: y == 0 ==> x != 20;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= x;\nloop invariant x + y >= y;\nloop invariant x + y <= 10 + 10;\nloop invariant x + y <= x + y;\nloop invariant x + y >= x + y;\nloop invariant x + y <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\nloop invariant i7: x + y >= 0;\n\nloop invariant i9: x + y >= x;\nloop invariant i10: x + y >= y;\n\nloop invariant i12: x + y <= x + y;\nloop invariant i13: x + y >= x + y;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: x >= 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant unknown() == 1 ==> (x >= 0) && (x <= 10) && (y <= 10) && (y >= 0);\nloop invariant unknown() == 0 ==> (x >= 0) && (x <= 20) && (y <= 20) && (y >= 0);\nloop invariant x >= 0;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant y >= 0;\nloop invariant x + 10 <= x + 10;\nloop invariant y + 10 <= y + 10;\nloop invariant x + 10 <= 20;\nloop invariant y + 10 <= 20;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\nloop invariant i6: y >= 0;\nloop invariant i7: x + 10 <= x + 10;\nloop invariant i8: y + 10 <= y + 10;\n\n\nloop invariant i11: x + 10 >= x;\nloop invariant i12: y + 10 >= y;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant x <= 20;\nloop invariant x <= (y + 10);\nloop invariant (unknown() == true) ==> (y == 0);\nloop invariant (unknown() == false) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: x <= (y + 10);\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( x >= 0 );\nloop invariant ( x <= 20 );\nloop invariant ( y >= 0 );\nloop invariant ( y <= 20 );\nloop invariant ( x >= y );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: ( x >= 0 );\n\nloop invariant i3: ( y >= 0 );\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x <= 20;\nloop invariant y <= 20;\nloop invariant x + 10 * n <= 20;\nloop invariant y + 10 * n <= 20;\nloop invariant x + 10 * n == 0 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 10 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant x + 10 * n == 20 ==> y + 10 * n == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= (y - 1) * 10;\nloop invariant y >= x;\nloop invariant x != 20 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant x >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= y;\nloop invariant x + y < 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant y <= x;\nloop invariant (y == 0) ==> (x == 0);\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant y <= x;\nloop invariant (y == 0) ==> (x == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= (x + 10);\nloop invariant y <= (y + 10);\nloop invariant x + y <= 20;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x <= (x + 10);\nloop invariant i4: y <= (y + 10);\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\n\n\nloop invariant i10: x + y >= 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant (x + y) % 10 == 0;\nloop invariant (x + y) % 10 == 0 ==> (x != 20);\nloop invariant (x + y) % 10 == 0 ==> (x < 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 42: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: 0 <= y <= 10;\nloop invariant i3: (y == 0) ==> (x != 20);\nloop invariant i4: y >= 0;\nloop invariant i5: y <= 10;\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 10;\nloop invariant i8: x >= y;\nloop invariant i9: x <= 20;\nloop invariant i10: y == 0 ==> x != 20;\nloop invariant i11: x >= (y + 10) * (x - y) / 10;\nloop invariant i12: x == 0 ==> y == 0;\nloop invariant i13: x == 10 ==> y == 10;\nloop invariant i14: y == 10 ==> x == 20;\nloop invariant i15: y == 0 ==> x == 0;\nloop invariant i16: x + y >= 0;\nloop invariant i17: x + y <= 20;\nloop invariant i18: x + y >= x;\nloop invariant i19: x + y >= y;\nloop invariant i20: x + y <= 10 + 10;\nloop invariant i21: x + y <= x + y;\nloop invariant i22: x + y >= x + y;\nloop invariant i23: unknown() == 1 ==> (x >= 0) && (x <= 10) && (y <= 10) && (y >= 0);\nloop invariant i24: unknown() == 0 ==> (x >= 0) && (x <= 20) && (y <= 20) && (y >= 0);\nloop invariant i25: y <= 20;\nloop invariant i26: x + 10 <= x + 10;\nloop invariant i27: y + 10 <= y + 10;\nloop invariant i28: x + 10 <= 20;\nloop invariant i29: y + 10 <= 20;\nloop invariant i30: x + 10 >= x;\nloop invariant i31: y + 10 >= y;\nloop invariant i32: x <= (y + 10);\nloop invariant i33: (unknown() == true) ==> (y == 0);\nloop invariant i34: (unknown() == false) ==> (y != 0);\nloop invariant i35: ( x >= 0 );\nloop invariant i36: ( x <= 20 );\nloop invariant i37: ( y >= 0 );\nloop invariant i38: ( y <= 20 );\nloop invariant i39: ( x >= y );\nloop invariant i40: x + 10 * n <= 20;\nloop invariant i41: y + 10 * n <= 20;\nloop invariant i42: x + 10 * n == 0 ==> y + 10 * n == 0;\nloop invariant i43: x + 10 * n == 10 ==> y + 10 * n == 10;\nloop invariant i44: x + 10 * n == 20 ==> y + 10 * n == 0;\nloop invariant i45: x + 10 * n == 20 ==> y + 10 * n == 10;\nloop invariant i46: x + 10 * n == 20 ==> y + 10 * n == 20;\nloop invariant i47: x >= (y - 1) * 10;\nloop invariant i48: y >= x;\nloop invariant i49: x != 20 ==> y == 0;\nloop invariant i50: x >= 10;\nloop invariant i51: 1 <= x <= 10;\nloop invariant i52: x + y < 20;\nloop invariant i53: y <= x;\nloop invariant i54: (y == 0) ==> (x == 0);\nloop invariant i55: x <= (x + 10);\nloop invariant i56: y <= (y + 10);\nloop invariant i57: (x + y) % 10 == 0;\nloop invariant i58: (x + y) % 10 == 0 ==> (x != 20);\nloop invariant i59: (x + y) % 10 == 0 ==> (x < 20);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 20,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: (y == 0) ==> (x != 20);\nloop invariant i4: y >= 0;\n\nloop invariant i6: x >= 0;\n\n\n\nloop invariant i10: y == 0 ==> x != 20;\nloop invariant i11: x >= (y + 10) * (x - y) / 10;\n\n\n\n\nloop invariant i16: x + y >= 0;\n\nloop invariant i18: x + y >= x;\nloop invariant i19: x + y >= y;\n\nloop invariant i21: x + y <= x + y;\nloop invariant i22: x + y >= x + y;\n\n\n\nloop invariant i26: x + 10 <= x + 10;\nloop invariant i27: y + 10 <= y + 10;\n\n\nloop invariant i30: x + 10 >= x;\nloop invariant i31: y + 10 >= y;\nloop invariant i32: x <= (y + 10);\n\n\nloop invariant i35: ( x >= 0 );\n\nloop invariant i37: ( y >= 0 );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i55: x <= (x + 10);\nloop invariant i56: y <= (y + 10);\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c"
        ],
        "skipped": [],
        "total": 67,
        "success_count": 56,
        "failure_count": 11,
        "success_rate": 0.835820895522388
    }
}