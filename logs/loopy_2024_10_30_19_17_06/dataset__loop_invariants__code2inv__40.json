{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/40.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= c;\nloop invariant 0 <= c - n < 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant ((c == n) ==> (c == 1));\nloop invariant !((c == n) && (c == 1));\nloop invariant ((c != n) ==> (c >= 0));\nloop invariant 0 <= c <= n;\nloop invariant ((c == n) ==> (c == 1));\nloop invariant !((c == n) && (c == 1));\nloop invariant ((c != n) ==> (c >= 0));\nloop invariant c <= n;\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= 100000;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n + 1;\nloop invariant c <= n + 2;\nloop invariant c <= n + 3;\nloop invariant c <= n + 4;\nloop invariant c <= n + 5;\nloop invariant 1 <= c <= n + 5;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n + 1;\nloop invariant c <= n + 2;\nloop invariant c <= n + 3;\nloop invariant c <= n + 4;\nloop invariant c <= n + 5;\nloop invariant n >= 0;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c <= n + 2;\nloop invariant c <= n + 3;\nloop invariant c <= n + 4;\nloop invariant c <= n + 5;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant n > 0;\nloop invariant c <= n;\nloop invariant c == n ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant c <= (n + 1) ==> (c == 0 || (c > n && c == n + 1));\nloop invariant 0 <= c <= n + 1;\nloop invariant c <= (n + 1) ==> (c == 0 || (c > n && c == n + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant if (unknown()) ==> c <= n;\nloop invariant if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\n*/\n```",
            "```\n/*@\nloop invariant c <= n;\nloop invariant 0 <= c;\nloop invariant 0 <= n;\nloop invariant n >= 1;\nloop invariant n == n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= c <= n;\nloop invariant (c > n) ==> (n == c + 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (0 <= c <= n - 1);\nloop invariant (c < n) ==> (n - 1 <= n <= n + 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == 1) ==> (c == n);\nloop invariant (c > n) ==> (c == 0);\nloop invariant (!unknown() || (c <= n));\nloop invariant (c <= n) ==> (!unknown() || (c == n));\nloop invariant (c == n) ==> (!unknown() || (c == n));\nloop invariant (c < n) ==> (!unknown() || (c <= n));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c > 0) ==> (!unknown() || (c < n));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\n*/\n```",
            "```\n/*@\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n;\nloop invariant c <= n ==> c == 1 ==> c >= 0;\nloop invariant c <= n ==> c == 1 ==> c <= n;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> !c == 1 ==> c >= 0;\nloop invariant c <= n ==> !c == 1 ==> c <= n;\nloop invariant c <= n ==> !c == 1 ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= c && c <= n;\nloop invariant c == 0 ==> n == 0;\nloop invariant c == n ==> c == 1 || c == n;\nloop invariant c > n ==> c == n + 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 9;\nloop invariant c <= n;\nloop invariant c >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= c;\nloop invariant 0 <= c - n < 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: 0 <= c;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant ((c == n) ==> (c == 1));\nloop invariant !((c == n) && (c == 1));\nloop invariant ((c != n) ==> (c >= 0));\nloop invariant 0 <= c <= n;\nloop invariant ((c == n) ==> (c == 1));\nloop invariant !((c == n) && (c == 1));\nloop invariant ((c != n) ==> (c >= 0));\nloop invariant c <= n;\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\nloop invariant !(c == n && c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: ((c == n) ==> (c == 1));\nloop invariant i3: !((c == n) && (c == 1));\nloop invariant i4: ((c != n) ==> (c >= 0));\nloop invariant i5: c <= n;\nloop invariant i6: !(c == n && c == 1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= 100000;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n + 1;\nloop invariant c <= n + 2;\nloop invariant c <= n + 3;\nloop invariant c <= n + 4;\nloop invariant c <= n + 5;\nloop invariant 1 <= c <= n + 5;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n + 1;\nloop invariant c <= n + 2;\nloop invariant c <= n + 3;\nloop invariant c <= n + 4;\nloop invariant c <= n + 5;\nloop invariant n >= 0;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c <= n + 2;\nloop invariant c <= n + 3;\nloop invariant c <= n + 4;\nloop invariant c <= n + 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n\n\n\n\n\n\n\nloop invariant i10: n >= 0;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant n > 0;\nloop invariant c <= n;\nloop invariant c == n ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: n > 0;\nloop invariant i3: c <= n;\nloop invariant i4: c == n ==> c == 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant c <= (n + 1) ==> (c == 0 || (c > n && c == n + 1));\nloop invariant 0 <= c <= n + 1;\nloop invariant c <= (n + 1) ==> (c == 0 || (c > n && c == n + 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c <= (n + 1) ==> (c == 0 || (c > n && c == n + 1));\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 26,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant if (unknown()) ==> c <= n;\nloop invariant if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant c <= n;\nloop invariant 0 <= c;\nloop invariant 0 <= n;\nloop invariant n >= 1;\nloop invariant n == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c <= n;\nloop invariant i2: 0 <= c;\nloop invariant i3: 0 <= n;\nloop invariant i4: n >= 1;\nloop invariant i5: n == n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= c <= n;\nloop invariant (c > n) ==> (n == c + 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (0 <= c <= n - 1);\nloop invariant (c < n) ==> (n - 1 <= n <= n + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 1 <= n;\nloop invariant i2: 0 <= c <= n;\nloop invariant i3: (c > n) ==> (n == c + 1);\nloop invariant i4: (c == n) ==> (c == 1);\nloop invariant i5: (c < n) ==> (0 <= c <= n - 1);\nloop invariant i6: (c < n) ==> (n - 1 <= n <= n + 1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == 1) ==> (c == n);\nloop invariant (c > n) ==> (c == 0);\nloop invariant (!unknown() || (c <= n));\nloop invariant (c <= n) ==> (!unknown() || (c == n));\nloop invariant (c == n) ==> (!unknown() || (c == n));\nloop invariant (c < n) ==> (!unknown() || (c <= n));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c > 0) ==> (!unknown() || (c < n));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\nloop invariant (c == 0) ==> (!unknown() || (c == 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (c == n) ==> (c == 1);\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n;\nloop invariant c <= n ==> c == 1 ==> c >= 0;\nloop invariant c <= n ==> c == 1 ==> c <= n;\nloop invariant c <= n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> !c == 1 ==> c >= 0;\nloop invariant c <= n ==> !c == 1 ==> c <= n;\nloop invariant c <= n ==> !c == 1 ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c <= n ==> c >= 0;\nloop invariant i2: c <= n ==> c <= n;\nloop invariant i3: c <= n ==> c == 1 ==> c >= 0;\nloop invariant i4: c <= n ==> c == 1 ==> c <= n;\nloop invariant i5: c <= n ==> c == 1 ==> c == 1;\nloop invariant i6: c <= n ==> !c == 1 ==> c >= 0;\nloop invariant i7: c <= n ==> !c == 1 ==> c <= n;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= c && c <= n;\nloop invariant c == 0 ==> n == 0;\nloop invariant c == n ==> c == 1 || c == n;\nloop invariant c > n ==> c == n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\n\n\nloop invariant i4: c == n ==> c == 1 || c == n;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c >= n - 1;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 9;\nloop invariant c <= n;\nloop invariant c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 41: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: 0 <= c;\nloop invariant i3: 0 <= c - n < 2;\nloop invariant i4: 0 <= c <= n;\nloop invariant i5: ((c == n) ==> (c == 1));\nloop invariant i6: !((c == n) && (c == 1));\nloop invariant i7: ((c != n) ==> (c >= 0));\nloop invariant i8: c <= n;\nloop invariant i9: !(c == n && c == 1);\nloop invariant i10: c >= 0;\nloop invariant i11: 1 <= n <= 100000;\nloop invariant i12: c <= n + 1;\nloop invariant i13: c <= n + 2;\nloop invariant i14: c <= n + 3;\nloop invariant i15: c <= n + 4;\nloop invariant i16: c <= n + 5;\nloop invariant i17: 1 <= c <= n + 5;\nloop invariant i18: n >= 0;\nloop invariant i19: n <= 100000;\nloop invariant i20: n > 0;\nloop invariant i21: c == n ==> c == 1;\nloop invariant i22: 0 <= c <= n + 1;\nloop invariant i23: c <= (n + 1) ==> (c == 0 || (c > n && c == n + 1));\nloop invariant i24: if (unknown()) ==> c <= n;\nloop invariant i25: if (!unknown()) ==> c >= 1;\nloop invariant i26: if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i27: if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i28: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i29: if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i30: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i31: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i32: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i33: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i34: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i35: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i36: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i37: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i38: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i39: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i40: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i41: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i42: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i43: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i44: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i45: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i46: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> c <= n;\nloop invariant i47: if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (unknown()) ==> if (!unknown()) ==> c >= 1;\nloop invariant i48: n >= 1;\nloop invariant i49: n == n;\nloop invariant i50: 1 <= n;\nloop invariant i51: (c > n) ==> (n == c + 1);\nloop invariant i52: (c == n) ==> (c == 1);\nloop invariant i53: (c < n) ==> (0 <= c <= n - 1);\nloop invariant i54: (c < n) ==> (n - 1 <= n <= n + 1);\nloop invariant i55: 1 <= c <= n;\nloop invariant i56: (c == 1) ==> (c == n);\nloop invariant i57: (c > n) ==> (c == 0);\nloop invariant i58: (!unknown() || (c <= n));\nloop invariant i59: (c <= n) ==> (!unknown() || (c == n));\nloop invariant i60: (c == n) ==> (!unknown() || (c == n));\nloop invariant i61: (c < n) ==> (!unknown() || (c <= n));\nloop invariant i62: (c == 0) ==> (!unknown() || (c == 0));\nloop invariant i63: (c > 0) ==> (!unknown() || (c < n));\nloop invariant i64: c <= n ==> c >= 0;\nloop invariant i65: c <= n ==> c <= n;\nloop invariant i66: c <= n ==> c == 1 ==> c >= 0;\nloop invariant i67: c <= n ==> c == 1 ==> c <= n;\nloop invariant i68: c <= n ==> c == 1 ==> c == 1;\nloop invariant i69: c <= n ==> !c == 1 ==> c >= 0;\nloop invariant i70: c <= n ==> !c == 1 ==> c <= n;\nloop invariant i71: c <= n ==> !c == 1 ==> c == 1;\nloop invariant i72: 0 <= c && c <= n;\nloop invariant i73: c == 0 ==> n == 0;\nloop invariant i74: c == n ==> c == 1 || c == n;\nloop invariant i75: c > n ==> c == n + 1;\nloop invariant i76: c >= n - 1;\nloop invariant i77: c <= 2 * n;\nloop invariant i78: 0 <= c <= 9;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 37,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: 0 <= c;\n\nloop invariant i4: 0 <= c <= n;\nloop invariant i5: ((c == n) ==> (c == 1));\nloop invariant i6: !((c == n) && (c == 1));\nloop invariant i7: ((c != n) ==> (c >= 0));\nloop invariant i8: c <= n;\nloop invariant i9: !(c == n && c == 1);\nloop invariant i10: c >= 0;\n\nloop invariant i12: c <= n + 1;\nloop invariant i13: c <= n + 2;\nloop invariant i14: c <= n + 3;\nloop invariant i15: c <= n + 4;\nloop invariant i16: c <= n + 5;\n\nloop invariant i18: n >= 0;\n\nloop invariant i20: n > 0;\nloop invariant i21: c == n ==> c == 1;\nloop invariant i22: 0 <= c <= n + 1;\nloop invariant i23: c <= (n + 1) ==> (c == 0 || (c > n && c == n + 1));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i48: n >= 1;\nloop invariant i49: n == n;\nloop invariant i50: 1 <= n;\nloop invariant i51: (c > n) ==> (n == c + 1);\nloop invariant i52: (c == n) ==> (c == 1);\nloop invariant i53: (c < n) ==> (0 <= c <= n - 1);\nloop invariant i54: (c < n) ==> (n - 1 <= n <= n + 1);\n\nloop invariant i56: (c == 1) ==> (c == n);\nloop invariant i57: (c > n) ==> (c == 0);\n\n\n\n\n\n\nloop invariant i64: c <= n ==> c >= 0;\nloop invariant i65: c <= n ==> c <= n;\nloop invariant i66: c <= n ==> c == 1 ==> c >= 0;\nloop invariant i67: c <= n ==> c == 1 ==> c <= n;\nloop invariant i68: c <= n ==> c == 1 ==> c == 1;\nloop invariant i69: c <= n ==> !c == 1 ==> c >= 0;\nloop invariant i70: c <= n ==> !c == 1 ==> c <= n;\n\nloop invariant i72: 0 <= c && c <= n;\n\nloop invariant i74: c == n ==> c == 1 || c == n;\nloop invariant i75: c > n ==> c == n + 1;\n\nloop invariant i77: c <= 2 * n;\nloop invariant i78: 0 <= c <= 9;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 32,
        "success_count": 25,
        "failure_count": 7,
        "success_rate": 0.78125
    }
}