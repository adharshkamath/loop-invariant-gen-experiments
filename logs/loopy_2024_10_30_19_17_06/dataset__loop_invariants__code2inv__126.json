{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/126.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant ( x = 0 ) ==> y = 0;\nloop invariant ( x >= 1 ) ==> y >= 0;\nloop invariant z1 <= x;\nloop invariant z1 >= 0;\nloop invariant z2 <= y;\nloop invariant z2 >= 0;\nloop invariant z3 = x;\nloop invariant z3 >= 0;\nloop invariant z3 <= 100000;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= (i - y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= j;\nloop invariant x == i - j;\nloop invariant y == j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - j;\nloop invariant y == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x == i - y;\n*/\n```",
            "```\n/*@\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - y;\nloop invariant y == j - y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x == y ==> y == j;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y >= i - x;\nloop invariant y <= j + x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= (i + (j - i) * i / 2);\nloop invariant y >= (j - (i - j) * j / 2);\n*/\n```",
            "```\n/*@\nloop invariant i;\nloop invariant j;\nloop invariant i >= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant x != 0 ==> x >= 1;\nloop invariant y != 0 ==> y >= 1;\nloop invariant x != 0 ==> i >= 1;\nloop invariant y != 0 ==> j >= 1;\nloop invariant x != 0 ==> y >= 0;\nloop invariant x != 0 ==> i >= 0;\nloop invariant y != 0 ==> j >= 0;\nloop invariant x != 0 ==> x >= y;\nloop invariant y != 0 ==> y >= i;\nloop invariant x != 0 ==> x <= i;\nloop invariant y != 0 ==> y <= j;\nloop invariant x != 0 ==> x <= j;\nloop invariant y != 0 ==> y <= i;\nloop invariant x != 0 ==> x <= y;\nloop invariant y != 0 ==> y <= x;\nloop invariant x != 0 ==> x != y;\nloop invariant y != 0 ==> x != j;\nloop invariant y != 0 ==> x != i;\nloop invariant y != 0 ==> y != i;\nloop invariant y != 0 ==> y != j;\nloop invariant x != 0 ==> x == y;\nloop invariant y != 0 ==> x == i;\nloop invariant y != 0 ==> x == j;\nloop invariant y != 0 ==> y == i;\nloop invariant y != 0 ==> y == j;\nloop invariant y != 0 ==> y != x;\nloop invariant x != 0 ==> y != x;\nloop invariant x != 0 ==> y != j;\nloop invariant x != 0 ==> y != i;\nloop invariant y != 0 ==> x != j;\nloop invariant y != 0 ==> x != i;\nloop invariant y != 0 ==> i != j;\nloop invariant x != 0 ==> i != j;\nloop invariant y != 0 ==> i != x;\nloop invariant x != 0 ==> i != y;\nloop invariant y != 0 ==> j != i;\nloop invariant y != 0 ==> j != x;\nloop invariant y != 0 ==> j != y;\nloop invariant x != 0 ==> i != j;\nloop invariant x != 0 ==> i != y;\nloop invariant x != 0 ==> i != x;\nloop invariant x != 0 ==> j != y;\nloop invariant x != 0 ==> j != x;\nloop invariant x != 0 ==> x != y;\nloop invariant y != 0 ==> x != y;\nloop invariant y != 0 ==> y != x;\nloop invariant x != 0 ==> x == y;\nloop invariant y != 0 ==> x == y;\nloop invariant x != 0 ==> x == i;\nloop invariant y != 0 ==> x == i;\nloop invariant y != 0 ==> x == j;\nloop invariant y != 0 ==> x == j;\nloop invariant x != 0 ==> y == i;\nloop invariant y != 0 ==> y == i;\nloop invariant x != 0 ==> y == j;\nloop invariant y != 0 ==> y == j;\nloop invariant x != 0 ==> y == x;\nloop invariant y != 0 ==> y == x;\nloop invariant x != 0 ==> y == j;\nloop invariant y != 0 ==> y == j;\nloop invariant x != 0 ==> y == i;\nloop invariant y != 0 ==> y == i;\nloop invariant x != 0 ==> i == j;\nloop invariant y != 0 ==> i == j;\nloop invariant x != 0 ==> i == x;\nloop invariant y != 0 ==> i == x;\nloop invariant x != 0 ==> i == y;\nloop invariant y != 0 ==> i == y;\nloop invariant x != 0 ==> j == i;\nloop invariant y != 0 ==> j == i;\nloop invariant x != 0 ==> j == x;\nloop invariant y != 0 ==> j == x;\nloop invariant x != 0 ==> j == y;\nloop invariant y != 0 ==> j == y;\nloop invariant x != 0 ==> i == y;\nloop invariant y != 0 ==> i == y;\nloop invariant x != 0 ==> i == x;\nloop invariant y != 0 ==> i == x;\nloop invariant x != 0 ==> j == y;\nloop invariant y != 0 ==> j == y;\nloop invariant x != 0 ==> j == i;\nloop invariant y != 0 ==> j == i;\nloop invariant x != 0 ==> i == j;\nloop invariant y != 0 ==> i == j;\nloop invariant x != 0 ==> i == x;\nloop invariant y != 0 ==> i == x;\nloop invariant x != 0 ==> i == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i + j == x + y;\nloop invariant i == j ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (i <= x) ==> (x == 0);\nloop invariant (j <= y) ==> (y == 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( x = 0 ) ==> y = 0;\nloop invariant ( x >= 1 ) ==> y >= 0;\nloop invariant z1 <= x;\nloop invariant z1 >= 0;\nloop invariant z2 <= y;\nloop invariant z2 >= 0;\nloop invariant z3 = x;\nloop invariant z3 >= 0;\nloop invariant z3 <= 100000;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= (i - y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= j;\nloop invariant x == i - j;\nloop invariant y == j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - j;\nloop invariant y == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\nloop invariant x + y >= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\nloop invariant i3: x <= i;\nloop invariant i4: y <= j;\n\n\nloop invariant i7: x + y <= i + j;\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x == i - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - y;\nloop invariant y == j - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: x <= i;\nloop invariant i2: y <= j;\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant x == y ==> y == j;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\nloop invariant x == y ==> j == 0;\nloop invariant x == y ==> i == j;\nloop invariant x == y ==> x == 0;\nloop invariant x == y ==> y == 0;\nloop invariant x == y ==> i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x <= i;\nloop invariant i8: y <= j;\n\n\n\nloop invariant i12: x == y ==> i == j;\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y >= i - x;\nloop invariant y <= j + x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\nloop invariant i3: y <= j;\n\nloop invariant i5: x <= i;\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= (i + (j - i) * i / 2);\nloop invariant y >= (j - (i - j) * j / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant i;\nloop invariant j;\nloop invariant i >= j;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant x != 0 ==> x >= 1;\nloop invariant y != 0 ==> y >= 1;\nloop invariant x != 0 ==> i >= 1;\nloop invariant y != 0 ==> j >= 1;\nloop invariant x != 0 ==> y >= 0;\nloop invariant x != 0 ==> i >= 0;\nloop invariant y != 0 ==> j >= 0;\nloop invariant x != 0 ==> x >= y;\nloop invariant y != 0 ==> y >= i;\nloop invariant x != 0 ==> x <= i;\nloop invariant y != 0 ==> y <= j;\nloop invariant x != 0 ==> x <= j;\nloop invariant y != 0 ==> y <= i;\nloop invariant x != 0 ==> x <= y;\nloop invariant y != 0 ==> y <= x;\nloop invariant x != 0 ==> x != y;\nloop invariant y != 0 ==> x != j;\nloop invariant y != 0 ==> x != i;\nloop invariant y != 0 ==> y != i;\nloop invariant y != 0 ==> y != j;\nloop invariant x != 0 ==> x == y;\nloop invariant y != 0 ==> x == i;\nloop invariant y != 0 ==> x == j;\nloop invariant y != 0 ==> y == i;\nloop invariant y != 0 ==> y == j;\nloop invariant y != 0 ==> y != x;\nloop invariant x != 0 ==> y != x;\nloop invariant x != 0 ==> y != j;\nloop invariant x != 0 ==> y != i;\nloop invariant y != 0 ==> x != j;\nloop invariant y != 0 ==> x != i;\nloop invariant y != 0 ==> i != j;\nloop invariant x != 0 ==> i != j;\nloop invariant y != 0 ==> i != x;\nloop invariant x != 0 ==> i != y;\nloop invariant y != 0 ==> j != i;\nloop invariant y != 0 ==> j != x;\nloop invariant y != 0 ==> j != y;\nloop invariant x != 0 ==> i != j;\nloop invariant x != 0 ==> i != y;\nloop invariant x != 0 ==> i != x;\nloop invariant x != 0 ==> j != y;\nloop invariant x != 0 ==> j != x;\nloop invariant x != 0 ==> x != y;\nloop invariant y != 0 ==> x != y;\nloop invariant y != 0 ==> y != x;\nloop invariant x != 0 ==> x == y;\nloop invariant y != 0 ==> x == y;\nloop invariant x != 0 ==> x == i;\nloop invariant y != 0 ==> x == i;\nloop invariant y != 0 ==> x == j;\nloop invariant y != 0 ==> x == j;\nloop invariant x != 0 ==> y == i;\nloop invariant y != 0 ==> y == i;\nloop invariant x != 0 ==> y == j;\nloop invariant y != 0 ==> y == j;\nloop invariant x != 0 ==> y == x;\nloop invariant y != 0 ==> y == x;\nloop invariant x != 0 ==> y == j;\nloop invariant y != 0 ==> y == j;\nloop invariant x != 0 ==> y == i;\nloop invariant y != 0 ==> y == i;\nloop invariant x != 0 ==> i == j;\nloop invariant y != 0 ==> i == j;\nloop invariant x != 0 ==> i == x;\nloop invariant y != 0 ==> i == x;\nloop invariant x != 0 ==> i == y;\nloop invariant y != 0 ==> i == y;\nloop invariant x != 0 ==> j == i;\nloop invariant y != 0 ==> j == i;\nloop invariant x != 0 ==> j == x;\nloop invariant y != 0 ==> j == x;\nloop invariant x != 0 ==> j == y;\nloop invariant y != 0 ==> j == y;\nloop invariant x != 0 ==> i == y;\nloop invariant y != 0 ==> i == y;\nloop invariant x != 0 ==> i == x;\nloop invariant y != 0 ==> i == x;\nloop invariant x != 0 ==> j == y;\nloop invariant y != 0 ==> j == y;\nloop invariant x != 0 ==> j == i;\nloop invariant y != 0 ==> j == i;\nloop invariant x != 0 ==> i == j;\nloop invariant y != 0 ==> i == j;\nloop invariant x != 0 ==> i == x;\nloop invariant y != 0 ==> i == x;\nloop invariant x != 0 ==> i == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: x != 0 ==> x <= i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i + j == x + y;\nloop invariant i == j ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (i <= x) ==> (x == 0);\nloop invariant (j <= y) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: 1 <= x <= i;\nloop invariant i2: 0 <= y <= j;\nloop invariant i3: y <= x;\nloop invariant i4: x >= 1;\nloop invariant i5: y >= 0;\nloop invariant i6: x >= y;\nloop invariant i7: ( x = 0 ) ==> y = 0;\nloop invariant i8: ( x >= 1 ) ==> y >= 0;\nloop invariant i9: z1 <= x;\nloop invariant i10: z1 >= 0;\nloop invariant i11: z2 <= y;\nloop invariant i12: z2 >= 0;\nloop invariant i13: z3 = x;\nloop invariant i14: z3 >= 0;\nloop invariant i15: z3 <= 100000;\nloop invariant i16: i >= 1;\nloop invariant i17: j >= 1;\nloop invariant i18: i >= j;\nloop invariant i19: 0 <= x <= i;\nloop invariant i20: x >= (i - y);\nloop invariant i21: x >= 0;\nloop invariant i22: y >= j;\nloop invariant i23: x == i - j;\nloop invariant i24: y == j;\nloop invariant i25: x <= i;\nloop invariant i26: y <= j;\nloop invariant i27: x + y <= i + j;\nloop invariant i28: x + y >= i;\nloop invariant i29: x + y >= j;\nloop invariant i30: x == i - y;\nloop invariant i31: y == j - y;\nloop invariant i32: i >= 0;\nloop invariant i33: j >= 0;\nloop invariant i34: x <= y;\nloop invariant i35: x == y ==> y == j;\nloop invariant i36: x == y ==> j == 0;\nloop invariant i37: x == y ==> i == j;\nloop invariant i38: x == y ==> x == 0;\nloop invariant i39: x == y ==> y == 0;\nloop invariant i40: x == y ==> i == 0;\nloop invariant i41: 0 <= i <= j;\nloop invariant i42: y >= i - x;\nloop invariant i43: y <= j + x;\nloop invariant i44: 0 <= y <= x;\nloop invariant i45: x >= (i + (j - i) * i / 2);\nloop invariant i46: y >= (j - (i - j) * j / 2);\nloop invariant i47: i;\nloop invariant i48: j;\nloop invariant i49: x == i;\nloop invariant i50: x != 0 ==> x >= 1;\nloop invariant i51: y != 0 ==> y >= 1;\nloop invariant i52: x != 0 ==> i >= 1;\nloop invariant i53: y != 0 ==> j >= 1;\nloop invariant i54: x != 0 ==> y >= 0;\nloop invariant i55: x != 0 ==> i >= 0;\nloop invariant i56: y != 0 ==> j >= 0;\nloop invariant i57: x != 0 ==> x >= y;\nloop invariant i58: y != 0 ==> y >= i;\nloop invariant i59: x != 0 ==> x <= i;\nloop invariant i60: y != 0 ==> y <= j;\nloop invariant i61: x != 0 ==> x <= j;\nloop invariant i62: y != 0 ==> y <= i;\nloop invariant i63: x != 0 ==> x <= y;\nloop invariant i64: y != 0 ==> y <= x;\nloop invariant i65: x != 0 ==> x != y;\nloop invariant i66: y != 0 ==> x != j;\nloop invariant i67: y != 0 ==> x != i;\nloop invariant i68: y != 0 ==> y != i;\nloop invariant i69: y != 0 ==> y != j;\nloop invariant i70: x != 0 ==> x == y;\nloop invariant i71: y != 0 ==> x == i;\nloop invariant i72: y != 0 ==> x == j;\nloop invariant i73: y != 0 ==> y == i;\nloop invariant i74: y != 0 ==> y == j;\nloop invariant i75: y != 0 ==> y != x;\nloop invariant i76: x != 0 ==> y != x;\nloop invariant i77: x != 0 ==> y != j;\nloop invariant i78: x != 0 ==> y != i;\nloop invariant i79: y != 0 ==> i != j;\nloop invariant i80: x != 0 ==> i != j;\nloop invariant i81: y != 0 ==> i != x;\nloop invariant i82: x != 0 ==> i != y;\nloop invariant i83: y != 0 ==> j != i;\nloop invariant i84: y != 0 ==> j != x;\nloop invariant i85: y != 0 ==> j != y;\nloop invariant i86: x != 0 ==> i != x;\nloop invariant i87: x != 0 ==> j != y;\nloop invariant i88: x != 0 ==> j != x;\nloop invariant i89: y != 0 ==> x != y;\nloop invariant i90: y != 0 ==> x == y;\nloop invariant i91: x != 0 ==> x == i;\nloop invariant i92: x != 0 ==> y == i;\nloop invariant i93: x != 0 ==> y == j;\nloop invariant i94: x != 0 ==> y == x;\nloop invariant i95: y != 0 ==> y == x;\nloop invariant i96: x != 0 ==> i == j;\nloop invariant i97: y != 0 ==> i == j;\nloop invariant i98: x != 0 ==> i == x;\nloop invariant i99: y != 0 ==> i == x;\nloop invariant i100: x != 0 ==> i == y;\nloop invariant i101: y != 0 ==> i == y;\nloop invariant i102: x != 0 ==> j == i;\nloop invariant i103: y != 0 ==> j == i;\nloop invariant i104: x != 0 ==> j == x;\nloop invariant i105: y != 0 ==> j == x;\nloop invariant i106: x != 0 ==> j == y;\nloop invariant i107: y != 0 ==> j == y;\nloop invariant i108: i + j == x + y;\nloop invariant i109: i == j ==> y == 0;\nloop invariant i110: (i <= x) ==> (x == 0);\nloop invariant i111: (j <= y) ==> (y == 0);\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 28,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: x <= i;\nloop invariant i26: y <= j;\nloop invariant i27: x + y <= i + j;\n\n\n\n\n\n\n\n\n\nloop invariant i37: x == y ==> i == j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i59: x != 0 ==> x <= i;\nloop invariant i60: y != 0 ==> y <= j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c"
        ],
        "skipped": [],
        "total": 3,
        "success_count": 1,
        "failure_count": 2,
        "success_rate": 0.3333333333333333
    }
}