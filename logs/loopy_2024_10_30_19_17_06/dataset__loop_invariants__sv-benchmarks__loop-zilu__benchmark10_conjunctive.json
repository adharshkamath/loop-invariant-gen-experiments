{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  while (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i >= 0;\nloop invariant c >= 0;\nloop invariant i <= 100;\nloop invariant c <= (i * (i + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant c >= 0;\nloop invariant c <= (100 * i - i * (i - 1) / 2);\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant c >= i * (i + 1) / 2;\nloop invariant i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2;\nloop invariant (i < 100) ==> (i >= 0);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 5050;\nloop invariant 0 <= i <= 100;\nloop invariant c <= i*(i+1)/2;\nloop invariant (i==100 ==> c==5050);\nloop invariant (i==0 ==> c==0);\nloop invariant (i>0 ==> c>=i);\nloop invariant (i>0 ==> c<=i*(i+1)/2);\nloop invariant (i<=0 ==> c<=0);\nloop invariant (i<=0 ==> c>=0);\nloop invariant (i<=0 ==> c==0);\nloop invariant (i>0 ==> c>=i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant c >= i * (i - 1) / 2;\nloop invariant c <= c + i;\nloop invariant c <= c + i + (i + 1) * (i + 2) / 2;\nloop invariant c >= c + i;\nloop invariant c >= c + i + (i + 1) * (i + 2) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant c >= 0;\nloop invariant c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= 0;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\n*/\n```",
            "```\n/*@\nloop invariant i > 0;\nloop invariant c >= i;\nloop invariant i <= 100;\nloop invariant c <= (i * (i + 1) / 2);\nloop invariant i <= 100 ==> c >= (i * (i + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= c <= i * (i + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant ( ( c >= 0 ) && ( i >= 0 ) );\nloop invariant ( ( c <= ( ( i * ( i + 1 ) ) / 2 ) ) && ( i <= 100 ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;loop invariant c >= 0;loop invariant c < 100 * i + (i * (i-1))/2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1 && i <= 100;\nloop invariant c >= 0;\nloop invariant (c + i - 1) * i / 2 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant (c >= (i * (i - 1)) / 2);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant c >= 0;\nloop invariant c <= (i * (i + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant c >= 0;\nloop invariant c <= 5050;\nloop invariant c == (i * (i - 1) / 2);\nloop invariant i == 0 ==> c == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= c <= i * (i + 1) / 2;\nloop invariant c == sum_{k=1}^{i} k;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant c >= 0;\nloop invariant i <= 100;\nloop invariant c <= (i * (i + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: c >= 0;\nloop invariant i3: i <= 100;\nloop invariant i4: c <= (i * (i + 1)) / 2;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant c >= 0;\nloop invariant c <= (100 * i - i * (i - 1) / 2);\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: c >= 0;\n\nloop invariant i4: i >= 0;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant c >= i * (i + 1) / 2;\nloop invariant i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2;\nloop invariant (i < 100) ==> (i >= 0);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant (i < 100) ==> (c >= 0);\nloop invariant (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant (i < 100) ==> (i * (i + 1) / 2 <= c);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\n\n\nloop invariant i4: (i < 100) ==> (i >= 0);\nloop invariant i5: (i < 100) ==> (c >= 0);\nloop invariant i6: (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\n\nloop invariant i8: (i < 100) ==> (c <= i * (i + 1) / 2);\n\n\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 5050;\nloop invariant 0 <= i <= 100;\nloop invariant c <= i*(i+1)/2;\nloop invariant (i==100 ==> c==5050);\nloop invariant (i==0 ==> c==0);\nloop invariant (i>0 ==> c>=i);\nloop invariant (i>0 ==> c<=i*(i+1)/2);\nloop invariant (i<=0 ==> c<=0);\nloop invariant (i<=0 ==> c>=0);\nloop invariant (i<=0 ==> c==0);\nloop invariant (i>0 ==> c>=i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= c <= 5050;\nloop invariant i2: 0 <= i <= 100;\nloop invariant i3: c <= i*(i+1)/2;\n\nloop invariant i5: (i==0 ==> c==0);\n\nloop invariant i7: (i>0 ==> c<=i*(i+1)/2);\nloop invariant i8: (i<=0 ==> c<=0);\nloop invariant i9: (i<=0 ==> c>=0);\nloop invariant i10: (i<=0 ==> c==0);\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant c >= i * (i - 1) / 2;\nloop invariant c <= c + i;\nloop invariant c <= c + i + (i + 1) * (i + 2) / 2;\nloop invariant c >= c + i;\nloop invariant c >= c + i + (i + 1) * (i + 2) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: c >= i * (i - 1) / 2;\nloop invariant i3: c <= c + i;\nloop invariant i4: c <= c + i + (i + 1) * (i + 2) / 2;\n\n\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 100;\nloop invariant c >= 0;\nloop invariant c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= 0;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\nloop invariant if i <= 0 then c >= i;\nloop invariant if i <= 0 then c >= i*(i-1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\n\nloop invariant i2: c >= 0;\nloop invariant i3: c >= i*(i-1)/2;\n\n\n\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i > 0;\nloop invariant c >= i;\nloop invariant i <= 100;\nloop invariant c <= (i * (i + 1) / 2);\nloop invariant i <= 100 ==> c >= (i * (i + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\n\n\nloop invariant i3: i <= 100;\nloop invariant i4: c <= (i * (i + 1) / 2);\n\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= c <= i * (i + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= c <= i * (i + 1) / 2;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant ( ( c >= 0 ) && ( i >= 0 ) );\nloop invariant ( ( c <= ( ( i * ( i + 1 ) ) / 2 ) ) && ( i <= 100 ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: ( ( c >= 0 ) && ( i >= 0 ) );\nloop invariant i2: ( ( c <= ( ( i * ( i + 1 ) ) / 2 ) ) && ( i <= 100 ) );\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;loop invariant c >= 0;loop invariant c < 100 * i + (i * (i-1))/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;loop invariant c >= 0;loop invariant c < 100 * i + (i * (i-1))/2;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 1 && i <= 100;\nloop invariant c >= 0;\nloop invariant (c + i - 1) * i / 2 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\n\nloop invariant i2: c >= 0;\nloop invariant i3: (c + i - 1) * i / 2 >= 0;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant (c >= (i * (i - 1)) / 2);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\nloop invariant (i <= 100);\nloop invariant (c <= (i * (i + 1)) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: (c >= (i * (i - 1)) / 2);\nloop invariant i3: (c <= (i * (i + 1)) / 2);\nloop invariant i4: (i <= 100);\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant c >= 0;\nloop invariant c <= (i * (i + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= (i * (i + 1)) / 2;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant c >= 0;\nloop invariant c <= 5050;\nloop invariant c == (i * (i - 1) / 2);\nloop invariant i == 0 ==> c == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 100;\nloop invariant i3: c >= 0;\nloop invariant i4: c <= 5050;\nloop invariant i5: c == (i * (i - 1) / 2);\nloop invariant i6: i == 0 ==> c == 0;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= c <= i * (i + 1) / 2;\nloop invariant c == sum_{k=1}^{i} k;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\nloop invariant c + i * (i + 1) / 2 >= 0;\nloop invariant c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= c <= i * (i + 1) / 2;\n\nloop invariant i4: c + i * (i + 1) / 2 >= 0;\n\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 48: unexpected token 'i'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: c >= 0;\nloop invariant i3: i <= 100;\nloop invariant i4: c <= (i * (i + 1)) / 2;\nloop invariant i5: 0 <= i <= 100;\nloop invariant i6: c <= (100 * i - i * (i - 1) / 2);\nloop invariant i7: c >= i * (i + 1) / 2;\nloop invariant i8: i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2;\nloop invariant i9: (i < 100) ==> (i >= 0);\nloop invariant i10: (i < 100) ==> (c >= 0);\nloop invariant i11: (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant i12: (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant i13: (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant i14: (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant i15: (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant i16: 0 <= c <= 5050;\nloop invariant i17: c <= i*(i+1)/2;\nloop invariant i18: (i==100 ==> c==5050);\nloop invariant i19: (i==0 ==> c==0);\nloop invariant i20: (i>0 ==> c>=i);\nloop invariant i21: (i>0 ==> c<=i*(i+1)/2);\nloop invariant i22: (i<=0 ==> c<=0);\nloop invariant i23: (i<=0 ==> c>=0);\nloop invariant i24: (i<=0 ==> c==0);\nloop invariant i25: c >= i * (i - 1) / 2;\nloop invariant i26: c <= c + i;\nloop invariant i27: c <= c + i + (i + 1) * (i + 2) / 2;\nloop invariant i28: c >= c + i;\nloop invariant i29: c >= c + i + (i + 1) * (i + 2) / 2;\nloop invariant i30: 1 <= i <= 100;\nloop invariant i31: c >= i*(i-1)/2;\nloop invariant i32: if i <= 0 then c >= i*(i-1)/2;\nloop invariant i33: if i <= 0 then c >= 0;\nloop invariant i34: if i <= 0 then c >= i;\nloop invariant i35: i > 0;\nloop invariant i36: c >= i;\nloop invariant i37: c <= (i * (i + 1) / 2);\nloop invariant i38: i <= 100 ==> c >= (i * (i + 1) / 2);\nloop invariant i39: 0 <= c <= i * (i + 1) / 2;\nloop invariant i40: ( ( c >= 0 ) && ( i >= 0 ) );\nloop invariant i41: ( ( c <= ( ( i * ( i + 1 ) ) / 2 ) ) && ( i <= 100 ) );\nloop invariant i42: 0 <= i <= 100;loop invariant c >= 0;loop invariant c < 100 * i + (i * (i-1))/2;\nloop invariant i43: i >= 1 && i <= 100;\nloop invariant i44: (c + i - 1) * i / 2 >= 0;\nloop invariant i45: (c >= (i * (i - 1)) / 2);\nloop invariant i46: (c <= (i * (i + 1)) / 2);\nloop invariant i47: (i <= 100);\nloop invariant i48: c <= 5050;\nloop invariant i49: c == (i * (i - 1) / 2);\nloop invariant i50: i == 0 ==> c == 0;\nloop invariant i51: c == sum_{k=1}^{i} k;\nloop invariant i52: c + i * (i + 1) / 2 >= 0;\nloop invariant i53: c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: c >= 0;\nloop invariant i3: i <= 100;\nloop invariant i4: c <= (i * (i + 1)) / 2;\nloop invariant i5: 0 <= i <= 100;\nloop invariant i6: c <= (100 * i - i * (i - 1) / 2);\nloop invariant i7: c >= i * (i + 1) / 2;\nloop invariant i8: i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2;\nloop invariant i9: (i < 100) ==> (i >= 0);\nloop invariant i10: (i < 100) ==> (c >= 0);\nloop invariant i11: (i < 100) ==> (c <= (i + 1) * (i + 2) / 2);\nloop invariant i12: (i < 100) ==> (i * (i + 1) / 2 <= c);\nloop invariant i13: (i < 100) ==> (c <= i * (i + 1) / 2);\nloop invariant i14: (i < 100) ==> (i * (i + 1) / 2 <= c <= (i + 1) * (i + 2) / 2);\nloop invariant i15: (i < 100) ==> (c >= i * (i + 1) / 2);\nloop invariant i16: 0 <= c <= 5050;\nloop invariant i17: c <= i*(i+1)/2;\nloop invariant i18: (i==100 ==> c==5050);\nloop invariant i19: (i==0 ==> c==0);\nloop invariant i20: (i>0 ==> c>=i);\nloop invariant i21: (i>0 ==> c<=i*(i+1)/2);\nloop invariant i22: (i<=0 ==> c<=0);\nloop invariant i23: (i<=0 ==> c>=0);\nloop invariant i24: (i<=0 ==> c==0);\nloop invariant i25: c >= i * (i - 1) / 2;\nloop invariant i26: c <= c + i;\nloop invariant i27: c <= c + i + (i + 1) * (i + 2) / 2;\nloop invariant i28: c >= c + i;\n\n\nloop invariant i31: c >= i*(i-1)/2;\n\n\n\n\nloop invariant i36: c >= i;\nloop invariant i37: c <= (i * (i + 1) / 2);\nloop invariant i38: i <= 100 ==> c >= (i * (i + 1) / 2);\nloop invariant i39: 0 <= c <= i * (i + 1) / 2;\nloop invariant i40: ( ( c >= 0 ) && ( i >= 0 ) );\nloop invariant i41: ( ( c <= ( ( i * ( i + 1 ) ) / 2 ) ) && ( i <= 100 ) );\nloop invariant i42: 0 <= i <= 100;loop invariant c >= 0;loop invariant c < 100 * i + (i * (i-1))/2;\nloop invariant i43: i >= 1 && i <= 100;\nloop invariant i44: (c + i - 1) * i / 2 >= 0;\nloop invariant i45: (c >= (i * (i - 1)) / 2);\nloop invariant i46: (c <= (i * (i + 1)) / 2);\nloop invariant i47: (i <= 100);\nloop invariant i48: c <= 5050;\nloop invariant i49: c == (i * (i - 1) / 2);\nloop invariant i50: i == 0 ==> c == 0;\n\nloop invariant i52: c + i * (i + 1) / 2 >= 0;\nloop invariant i53: c + i * (i + 1) / 2 <= 100 * (100 + 1) / 2;\n*/\nwhile (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c"
        ],
        "skipped": [],
        "total": 131,
        "success_count": 113,
        "failure_count": 18,
        "success_rate": 0.8625954198473282
    }
}