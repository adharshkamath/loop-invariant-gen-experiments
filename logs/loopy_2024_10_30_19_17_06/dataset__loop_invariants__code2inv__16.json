{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/16.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> (m >= 0 && x <= n && x >= m);\nloop invariant m < 0 ==> (m < 0 && x <= n);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= m;\nloop invariant m >= 0;\nloop invariant (n > 0) ==> (m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m < n ==> x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant x > m ==> m == 0;\nloop invariant x < n ==> m >= 0;\nloop invariant x >= n ==> m >= n;\nloop invariant x == n ==> m == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 && m <= x;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant x == 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant (if n > 0 then m >= 0 else true);\n*/\n```",
            "```\n/*@\nloop invariant m >= 0;\nloop invariant 0 <= x <= n;\nloop invariant if n > 0 then x >= 0 else x < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then x >= 0 else x < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> (m >= 0 && x <= n && x >= m);\nloop invariant m < 0 ==> (m < 0 && x <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m < 0 ==> (m < 0 && x <= n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: m >= 0;\nloop invariant i4: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= m;\nloop invariant m >= 0;\nloop invariant (n > 0) ==> (m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: x >= m;\nloop invariant i5: m >= 0;\nloop invariant i6: (n > 0) ==> (m >= 0);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m < n ==> x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: m < n ==> x <= n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant x > m ==> m == 0;\nloop invariant x < n ==> m >= 0;\nloop invariant x >= n ==> m >= n;\nloop invariant x == n ==> m == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\nloop invariant i4: x < n ==> m >= 0;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 && m <= x;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 0 && m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x == 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m == x || m == 0;\nloop invariant x < n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 0;\n\n\n\n\nloop invariant i7: x >= 0;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x < n;\nloop invariant 0 <= m;\nloop invariant m <= x;\nloop invariant (if n > 0 then m >= 0 else true);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: 0 <= m;\nloop invariant i4: m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant m >= 0;\nloop invariant 0 <= x <= n;\nloop invariant if n > 0 then x >= 0 else x < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then x >= 0 else x < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= x else m <= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m <= n else m >= n;\nloop invariant if n > 0 then m <= x else m >= x;\nloop invariant if n > 0 then x <= n else x >= n;\nloop invariant if n > 0 then m >= 0 else m < 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 41: unexpected token 'n'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m >= 0 ==> (m >= 0 && x <= n && x >= m);\nloop invariant i3: m < 0 ==> (m < 0 && x <= n);\nloop invariant i4: x >= 0;\nloop invariant i5: x <= n;\nloop invariant i6: m >= 0;\nloop invariant i7: m <= x;\nloop invariant i8: 0 <= m <= n;\nloop invariant i9: x >= m;\nloop invariant i10: (n > 0) ==> (m >= 0);\nloop invariant i11: 0 <= m <= x;\nloop invariant i12: m < n ==> x <= n;\nloop invariant i13: x > m ==> m == 0;\nloop invariant i14: x < n ==> m >= 0;\nloop invariant i15: x >= n ==> m >= n;\nloop invariant i16: x == n ==> m == n;\nloop invariant i17: m >= 0 && m <= x;\nloop invariant i18: m <= n;\nloop invariant i19: x == 0;\nloop invariant i20: n >= 0;\nloop invariant i21: m <= x <= n;\nloop invariant i22: m == x || m == 0;\nloop invariant i23: x < n;\nloop invariant i24: 0 <= x;\nloop invariant i25: 0 <= m;\nloop invariant i26: (if n > 0 then m >= 0 else true);\nloop invariant i27: if n > 0 then x >= 0 else x < 0;\nloop invariant i28: if n > 0 then m <= x else m >= x;\nloop invariant i29: if n > 0 then m <= n else m >= n;\nloop invariant i30: if n > 0 then m >= 0 else m < 0;\nloop invariant i31: if n > 0 then m >= x else m <= x;\nloop invariant i32: if n > 0 then x <= n else x >= n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m < 0 ==> (m < 0 && x <= n);\nloop invariant i4: x >= 0;\n\nloop invariant i6: m >= 0;\nloop invariant i7: m <= x;\n\nloop invariant i9: x >= m;\nloop invariant i10: (n > 0) ==> (m >= 0);\nloop invariant i11: 0 <= m <= x;\nloop invariant i12: m < n ==> x <= n;\n\nloop invariant i14: x < n ==> m >= 0;\n\n\nloop invariant i17: m >= 0 && m <= x;\n\n\n\n\n\n\nloop invariant i24: 0 <= x;\nloop invariant i25: 0 <= m;\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 9,
        "failure_count": 4,
        "success_rate": 0.6923076923076923
    }
}