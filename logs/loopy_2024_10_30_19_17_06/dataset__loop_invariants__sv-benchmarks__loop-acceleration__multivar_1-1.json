{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  while (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant x == y;\nloop invariant x >= 1;\nloop invariant x < 1024 ==> y < 1024;\nloop invariant x == y ==> x >= y;\nloop invariant x == y ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant x - y <= 1024;\nloop invariant x - y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant y = x;\nloop invariant x >= y;\nloop invariant x < 1024;\nloop invariant y < 1024;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant y = x;\nloop invariant x < 1024 ==> y < 1024;\nloop invariant x >= 1024 ==> y >= 1024;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1023;\nloop invariant x == y;\nloop invariant y == (x - 1);\nloop invariant x <= 1024;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 1023;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant y == x;\nloop invariant x < 1024 ==> x == 1024;\nloop invariant y == 1024;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1023;\nloop invariant 0 <= y <= 1023;\nloop invariant x == y;\nloop invariant 0 <= x <= 1023;\nloop invariant 0 <= y <= 1023;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 1024;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant 0 <= y <= 1024;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x == y ==> x >= 0;\nloop invariant x == y ==> y >= 0;\nloop invariant x == y ==> x <= 1024;\nloop invariant x == y ==> y <= 1024;\nloop invariant x == y ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant x == y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant y <= x - 1;\nloop invariant y >= x - 1;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant y = x + (x - 1);\nloop invariant x >= y - 1;\n*/\n```",
            "```\n/*@\nloop invariant y == x + (i - 1) ==> (i <= 1024);\nloop invariant y == x + (i - 1) ==> (i >= 0);\nloop invariant y == x + (i - 1) ==> (x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant y >= x; loop invariant x <= y; loop invariant x < 1024; loop invariant y < 1024; loop invariant x >= 0; loop invariant y >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant x == y;\nloop invariant x >= 1;\nloop invariant x < 1024 ==> y < 1024;\nloop invariant x == y ==> x >= y;\nloop invariant x == y ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\nloop invariant i2: x == y;\n\nloop invariant i4: x < 1024 ==> y < 1024;\nloop invariant i5: x == y ==> x >= y;\nloop invariant i6: x == y ==> x == y;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\n\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant x - y <= 1024;\nloop invariant x - y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\nloop invariant i2: x == y;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= x;\nloop invariant i5: x - y <= 1024;\nloop invariant i6: x - y >= 0;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant y = x;\nloop invariant x >= y;\nloop invariant x < 1024;\nloop invariant y < 1024;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\n\nloop invariant i3: x >= y;\n\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\n\n\nloop invariant i10: x <= y;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant y = x;\nloop invariant x < 1024 ==> y < 1024;\nloop invariant x >= 1024 ==> y >= 1024;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\n\n\n\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\nloop invariant i2: x == y;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1023;\nloop invariant x == y;\nloop invariant y == (x - 1);\nloop invariant x <= 1024;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 1023;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\nloop invariant i2: x == y;\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n\nloop invariant i8: x <= y;\nloop invariant i9: y <= x;\nloop invariant i10: x >= y;\nloop invariant i11: y >= x;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant y == x;\nloop invariant x < 1024 ==> x == 1024;\nloop invariant y == 1024;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\nloop invariant i2: y == x;\n\n\nloop invariant i5: x == y;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1023;\nloop invariant 0 <= y <= 1023;\nloop invariant x == y;\nloop invariant 0 <= x <= 1023;\nloop invariant 0 <= y <= 1023;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\n\nloop invariant i3: x == y;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 1024;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\nloop invariant i2: x == y;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant 0 <= y <= 1024;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x == y ==> x >= 0;\nloop invariant x == y ==> y >= 0;\nloop invariant x == y ==> x <= 1024;\nloop invariant x == y ==> y <= 1024;\nloop invariant x == y ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\n\nloop invariant i3: x == y;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\n\nloop invariant i8: x == y ==> x >= 0;\nloop invariant i9: x == y ==> y >= 0;\n\n\nloop invariant i12: x == y ==> x == y;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant x == y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= 1024;\nloop invariant y <= 1024;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant y <= x - 1;\nloop invariant y >= x - 1;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\nloop invariant x >= y;\nloop invariant x <= y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\nloop invariant i2: x == y;\n\n\n\n\nloop invariant i7: x >= y;\nloop invariant i8: x <= y + 1;\n\nloop invariant i10: y >= x - 1;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1024;\nloop invariant y = x + (x - 1);\nloop invariant x >= y - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\n\nloop invariant i3: x >= y - 1;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y == x + (i - 1) ==> (i <= 1024);\nloop invariant y == x + (i - 1) ==> (i >= 0);\nloop invariant y == x + (i - 1) ==> (x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\n\n\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= x; loop invariant x <= y; loop invariant x < 1024; loop invariant y < 1024; loop invariant x >= 0; loop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\nloop invariant i1: y >= x; loop invariant x <= y; loop invariant x < 1024; loop invariant y < 1024; loop invariant x >= 0; loop invariant y >= 0;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\nloop invariant i1: 0 <= x <= 1024;\nloop invariant i2: x == y;\nloop invariant i3: x >= 1;\nloop invariant i4: x < 1024 ==> y < 1024;\nloop invariant i5: x == y ==> x >= y;\nloop invariant i6: x == y ==> x == y;\nloop invariant i7: 0 <= y <= 100000;\nloop invariant i8: x >= (1 + (y - 1) * y / 2);\nloop invariant i9: x >= 0;\nloop invariant i10: y >= x;\nloop invariant i11: x - y <= 1024;\nloop invariant i12: x - y >= 0;\nloop invariant i13: y = x;\nloop invariant i14: x >= y;\nloop invariant i15: x < 1024;\nloop invariant i16: y < 1024;\nloop invariant i17: y >= 0;\nloop invariant i18: x <= 1024;\nloop invariant i19: y <= 1024;\nloop invariant i20: x <= y;\nloop invariant i21: x >= 1024 ==> y >= 1024;\nloop invariant i22: 0 <= x <= 1023;\nloop invariant i23: y == (x - 1);\nloop invariant i24: y <= 1023;\nloop invariant i25: y <= x;\nloop invariant i26: y == x;\nloop invariant i27: x < 1024 ==> x == 1024;\nloop invariant i28: y == 1024;\nloop invariant i29: 0 <= y <= 1023;\nloop invariant i30: 1 <= x <= 1024;\nloop invariant i31: 0 <= y <= 1024;\nloop invariant i32: x == y ==> x >= 0;\nloop invariant i33: x == y ==> y >= 0;\nloop invariant i34: x == y ==> x <= 1024;\nloop invariant i35: x == y ==> y <= 1024;\nloop invariant i36: y >= 1;\nloop invariant i37: x <= y + 1;\nloop invariant i38: y <= x - 1;\nloop invariant i39: y >= x - 1;\nloop invariant i40: y = x + (x - 1);\nloop invariant i41: x >= y - 1;\nloop invariant i42: y == x + (i - 1) ==> (i <= 1024);\nloop invariant i43: y == x + (i - 1) ==> (i >= 0);\nloop invariant i44: y == x + (i - 1) ==> (x >= 0);\nloop invariant i45: y >= x; loop invariant x <= y; loop invariant x < 1024; loop invariant y < 1024; loop invariant x >= 0; loop invariant y >= 0;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  /*@\n\nloop invariant i2: x == y;\n\nloop invariant i4: x < 1024 ==> y < 1024;\nloop invariant i5: x == y ==> x >= y;\nloop invariant i6: x == y ==> x == y;\n\n\nloop invariant i9: x >= 0;\nloop invariant i10: y >= x;\nloop invariant i11: x - y <= 1024;\nloop invariant i12: x - y >= 0;\n\nloop invariant i14: x >= y;\n\n\nloop invariant i17: y >= 0;\n\n\nloop invariant i20: x <= y;\nloop invariant i21: x >= 1024 ==> y >= 1024;\n\n\n\nloop invariant i25: y <= x;\nloop invariant i26: y == x;\n\n\n\n\n\nloop invariant i32: x == y ==> x >= 0;\nloop invariant i33: x == y ==> y >= 0;\n\n\n\nloop invariant i37: x <= y + 1;\n\nloop invariant i39: y >= x - 1;\n\nloop invariant i41: x >= y - 1;\n\n\n\nloop invariant i45: y >= x; loop invariant x <= y; loop invariant x < 1024; loop invariant y < 1024; loop invariant x >= 0; loop invariant y >= 0;\n*/\nwhile (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 87,
        "success_count": 75,
        "failure_count": 12,
        "success_rate": 0.8620689655172413
    }
}