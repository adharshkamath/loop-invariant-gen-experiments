{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/77.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y ==> x >= i + 1;\nloop invariant i < y ==> x >= y;\nloop invariant i < y ==> x >= i + 1 + (y - i - 1) * y / 2;\nloop invariant i >= y ==> x >= y + 1;\n*/\n```",
            "```\n/*@\nloop invariant i <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= i;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant y <= x;\nloop invariant i1 ==> (i <= y) && (y <= x);\nloop invariant i1 ==> (i < x);\nloop invariant 0 <= i <= y;\nloop invariant y <= x;\nloop invariant i1 ==> (i <= y) && (y <= x);\nloop invariant i1 ==> (i < x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < y;\nloop invariant x >= y;\nloop invariant i <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant y <= x;\n*/\n```",
            "```\n/*@\nloop invariant x >= i;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant i < y;\nloop invariant i < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i < y;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant i <= y;\nloop invariant unknown() ==> i >= 0;\nloop invariant unknown() ==> y >= 0;\nloop invariant unknown() ==> x >= 0;\nloop invariant unknown() ==> x >= y;\nloop invariant unknown() ==> i <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= i;\nloop invariant x >= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant i < y ==> x >= i;\nloop invariant i >= y ==> x >= i;\nloop invariant i < y ==> x >= (y - i);\nloop invariant i >= y ==> x >= (y - i);\nloop invariant x >= y ==> i >= y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= y;\nloop invariant x >= i + y;\nloop invariant x >= y;\nloop invariant x >= i + y;\nloop invariant x >= i + y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant i < y ==> (x >= (i + y));\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (x >= y);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y ==> x >= i + 1;\nloop invariant i < y ==> x >= y;\nloop invariant i < y ==> x >= i + 1 + (y - i - 1) * y / 2;\nloop invariant i >= y ==> x >= y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i < y ==> x >= i + 1;\nloop invariant i3: i < y ==> x >= y;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i <= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant i < y;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\n\nloop invariant i4: i >= 0;\nloop invariant i5: i <= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= i;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= i;\nloop invariant i3: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\nloop invariant i < y ==> (i < x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant y <= x;\nloop invariant i1 ==> (i <= y) && (y <= x);\nloop invariant i1 ==> (i < x);\nloop invariant 0 <= i <= y;\nloop invariant y <= x;\nloop invariant i1 ==> (i <= y) && (y <= x);\nloop invariant i1 ==> (i < x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: y <= x;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i < y;\nloop invariant x >= y;\nloop invariant i <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\nloop invariant i2: x >= y;\nloop invariant i3: i <= x;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: i >= 0;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant y <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: y <= x;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= i;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant i < y;\nloop invariant i < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: y >= 0;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i < y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= y;\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant i <= y;\nloop invariant unknown() ==> i >= 0;\nloop invariant unknown() ==> y >= 0;\nloop invariant unknown() ==> x >= 0;\nloop invariant unknown() ==> x >= y;\nloop invariant unknown() ==> i <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: x >= y;\nloop invariant i5: i <= y;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= i;\nloop invariant x >= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= i;\nloop invariant i3: x >= y;\nloop invariant i4: i <= x;\nloop invariant i5: i <= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant i < y ==> x >= i;\nloop invariant i >= y ==> x >= i;\nloop invariant i < y ==> x >= (y - i);\nloop invariant i >= y ==> x >= (y - i);\nloop invariant x >= y ==> i >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= y;\nloop invariant i3: x >= y;\nloop invariant i4: i < y ==> x >= i;\nloop invariant i5: i >= y ==> x >= i;\nloop invariant i6: i < y ==> x >= (y - i);\nloop invariant i7: i >= y ==> x >= (y - i);\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= y;\nloop invariant x >= i + y;\nloop invariant x >= y;\nloop invariant x >= i + y;\nloop invariant x >= i + y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\n\nloop invariant i3: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant i < y ==> (x >= (i + y));\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (x >= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i <= y;\nloop invariant i2: i >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\n\nloop invariant i7: i >= y ==> (x >= y);\nloop invariant i8: i < y ==> (x >= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 40: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i < y ==> x >= i + 1;\nloop invariant i3: i < y ==> x >= y;\nloop invariant i4: i < y ==> x >= i + 1 + (y - i - 1) * y / 2;\nloop invariant i5: i >= y ==> x >= y + 1;\nloop invariant i6: i <= y;\nloop invariant i7: x >= y;\nloop invariant i8: i < y;\nloop invariant i9: i >= 0;\nloop invariant i10: x >= i;\nloop invariant i11: i < y ==> (i < x);\nloop invariant i12: y <= x;\nloop invariant i13: i1 ==> (i <= y) && (y <= x);\nloop invariant i14: i1 ==> (i < x);\nloop invariant i15: 0 <= i < y;\nloop invariant i16: i <= x;\nloop invariant i17: y >= 0;\nloop invariant i18: x >= 0;\nloop invariant i19: i < x;\nloop invariant i20: unknown() ==> i >= 0;\nloop invariant i21: unknown() ==> y >= 0;\nloop invariant i22: unknown() ==> x >= 0;\nloop invariant i23: unknown() ==> x >= y;\nloop invariant i24: unknown() ==> i <= y;\nloop invariant i25: 0 <= i;\nloop invariant i26: i < y ==> x >= i;\nloop invariant i27: i >= y ==> x >= i;\nloop invariant i28: i < y ==> x >= (y - i);\nloop invariant i29: i >= y ==> x >= (y - i);\nloop invariant i30: x >= y ==> i >= y;\nloop invariant i31: 1 <= i <= y;\nloop invariant i32: x >= i + y;\nloop invariant i33: i < y ==> (x >= (i + y));\nloop invariant i34: i >= y ==> (x >= y);\nloop invariant i35: i < y ==> (x >= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i < y ==> x >= i + 1;\nloop invariant i3: i < y ==> x >= y;\n\n\nloop invariant i6: i <= y;\nloop invariant i7: x >= y;\n\nloop invariant i9: i >= 0;\nloop invariant i10: x >= i;\nloop invariant i11: i < y ==> (i < x);\nloop invariant i12: y <= x;\n\n\n\nloop invariant i16: i <= x;\nloop invariant i17: y >= 0;\nloop invariant i18: x >= 0;\n\n\n\n\n\n\nloop invariant i25: 0 <= i;\nloop invariant i26: i < y ==> x >= i;\nloop invariant i27: i >= y ==> x >= i;\nloop invariant i28: i < y ==> x >= (y - i);\nloop invariant i29: i >= y ==> x >= (y - i);\n\n\n\n\nloop invariant i34: i >= y ==> (x >= y);\nloop invariant i35: i < y ==> (x >= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c"
        ],
        "skipped": [],
        "total": 64,
        "success_count": 53,
        "failure_count": 11,
        "success_rate": 0.828125
    }
}