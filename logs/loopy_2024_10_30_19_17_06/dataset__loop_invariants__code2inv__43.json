{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/43.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c < n ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> n > -1;\n*/\n```",
            "```\n/*@\nloop invariant c >= 1;\nloop invariant c <= n + 1;\nloop invariant c == n ==> n > -1;\nloop invariant c == n ==> unknown() == 0;\nloop invariant c == n ==> c >= 1;\nloop invariant c == n ==> c <= n + 1;\nloop invariant unknown() ==> c >= 1;\nloop invariant unknown() ==> c <= n + 1;\nloop invariant unknown() ==> c >= 1;\nloop invariant unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n > -1;\nloop invariant (c > n) ==> (c + 1 == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n) ==> (c >= 1);\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c == 1};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant c > n ==> (c == n + 1);\nloop invariant (n > 0) ==> (c > -1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n) ==> (c == n) ==> (n > -1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n > -1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c == n => n > -1;\nloop invariant c != n => c == c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (n > -1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c > n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n; loop invariant 0 <= n; loop invariant (c + 1) > n ==> c < n; loop invariant (c + 1) <= n ==> c > n; loop invariant (c + 1) > n ==> c == n; loop invariant (c + 1) <= n ==> c > 0; loop invariant (c + 1) == n ==> c > 0; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == 1 ==> c <= n;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1;\nloop invariant n >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1;\nloop invariant c <= 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c >= n ==> c == n;\nloop invariant c <= n ==> c >= 1;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c < n ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> n > -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n\nloop invariant i4: c == n ==> c == n;\nloop invariant i5: c == n ==> n > -1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant c >= 1;\nloop invariant c <= n + 1;\nloop invariant c == n ==> n > -1;\nloop invariant c == n ==> unknown() == 0;\nloop invariant c == n ==> c >= 1;\nloop invariant c == n ==> c <= n + 1;\nloop invariant unknown() ==> c >= 1;\nloop invariant unknown() ==> c <= n + 1;\nloop invariant unknown() ==> c >= 1;\nloop invariant unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\nloop invariant c == n ==> unknown() ==> c >= 1;\nloop invariant c == n ==> unknown() ==> c <= n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c == n ==> n > -1;\n\nloop invariant i5: c == n ==> c >= 1;\nloop invariant i6: c == n ==> c <= n + 1;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n > -1;\nloop invariant (c > n) ==> (c + 1 == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: n > -1;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n) ==> (c >= 1);\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c == 1};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\nloop invariant if(unknown()) {c <= n} else {c == n};\nloop invariant if(unknown()) {c <= n} else {c <= n};\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant c > n ==> (c == n + 1);\nloop invariant (n > 0) ==> (c > -1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: (n > 0) ==> (c > -1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n) ==> (c == n) ==> (n > -1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (c <= n) ==> (c == n) ==> (n > -1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n > -1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c == n => n > -1;\nloop invariant c != n => c == c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: n > -1;\n\nloop invariant i4: c >= 0;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (n > -1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c > n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c == n) ==> (n > -1);\nloop invariant i3: (c == n) ==> (c == 1);\nloop invariant i4: (c == n) ==> (c > n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n; loop invariant 0 <= n; loop invariant (c + 1) > n ==> c < n; loop invariant (c + 1) <= n ==> c > n; loop invariant (c + 1) > n ==> c == n; loop invariant (c + 1) <= n ==> c > 0; loop invariant (c + 1) == n ==> c > 0; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n; loop invariant 0 <= n; loop invariant (c + 1) > n ==> c < n; loop invariant (c + 1) <= n ==> c > n; loop invariant (c + 1) > n ==> c == n; loop invariant (c + 1) <= n ==> c > 0; loop invariant (c + 1) == n ==> c > 0; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == 1 ==> c <= n;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c == n ==> c == n;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1;\nloop invariant n >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\nloop invariant i3: n >= 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1;\nloop invariant c <= 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c >= n ==> c == n;\nloop invariant c <= n ==> c >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 25: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: c <= n;\nloop invariant i3: c < n ==> c == 1;\nloop invariant i4: c == n ==> c == n;\nloop invariant i5: c == n ==> n > -1;\nloop invariant i6: c >= 1;\nloop invariant i7: c <= n + 1;\nloop invariant i8: c == n ==> unknown() == 0;\nloop invariant i9: c == n ==> c >= 1;\nloop invariant i10: c == n ==> c <= n + 1;\nloop invariant i11: unknown() ==> c >= 1;\nloop invariant i12: unknown() ==> c <= n + 1;\nloop invariant i13: c == n ==> unknown() ==> c >= 1;\nloop invariant i14: c == n ==> unknown() ==> c <= n + 1;\nloop invariant i15: 0 <= c <= n;\nloop invariant i16: n > -1;\nloop invariant i17: (c > n) ==> (c + 1 == n);\nloop invariant i18: (c <= n) ==> (c >= 1);\nloop invariant i19: if(unknown()) {c <= n} else {c == n};\nloop invariant i20: if(unknown()) {c <= n} else {c == 1};\nloop invariant i21: if(unknown()) {c <= n} else {c <= n};\nloop invariant i22: 0 <= c <= n + 1;\nloop invariant i23: c > n ==> (c == n + 1);\nloop invariant i24: (n > 0) ==> (c > -1);\nloop invariant i25: (c <= n) ==> (c == n) ==> (n > -1);\nloop invariant i26: c >= 0;\nloop invariant i27: c == n => n > -1;\nloop invariant i28: c != n => c == c;\nloop invariant i29: (c == n) ==> (n > -1);\nloop invariant i30: (c == n) ==> (c == 1);\nloop invariant i31: (c == n) ==> (c > n);\nloop invariant i32: 0 <= c <= n; loop invariant 0 <= n; loop invariant (c + 1) > n ==> c < n; loop invariant (c + 1) <= n ==> c > n; loop invariant (c + 1) > n ==> c == n; loop invariant (c + 1) <= n ==> c > 0; loop invariant (c + 1) == n ==> c > 0; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n;\nloop invariant i33: 1 <= c <= n;\nloop invariant i34: c == 1 ==> c <= n;\nloop invariant i35: n >= 1;\nloop invariant i36: c <= 2*n;\nloop invariant i37: c >= 1 ==> c <= n;\nloop invariant i38: c >= n ==> c == n;\nloop invariant i39: c <= n ==> c >= 1;\nloop invariant i40: i1;\nloop invariant i41: i2;\nloop invariant i42: if (unknown()) then (c > n) else (c == n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 18,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: c <= n;\n\nloop invariant i4: c == n ==> c == n;\nloop invariant i5: c == n ==> n > -1;\n\nloop invariant i7: c <= n + 1;\n\nloop invariant i9: c == n ==> c >= 1;\nloop invariant i10: c == n ==> c <= n + 1;\n\n\n\n\nloop invariant i15: 0 <= c <= n;\nloop invariant i16: n > -1;\nloop invariant i17: (c > n) ==> (c + 1 == n);\n\n\n\n\nloop invariant i22: 0 <= c <= n + 1;\nloop invariant i23: c > n ==> (c == n + 1);\nloop invariant i24: (n > 0) ==> (c > -1);\nloop invariant i25: (c <= n) ==> (c == n) ==> (n > -1);\nloop invariant i26: c >= 0;\n\n\nloop invariant i29: (c == n) ==> (n > -1);\nloop invariant i30: (c == n) ==> (c == 1);\nloop invariant i31: (c == n) ==> (c > n);\nloop invariant i32: 0 <= c <= n; loop invariant 0 <= n; loop invariant (c + 1) > n ==> c < n; loop invariant (c + 1) <= n ==> c > n; loop invariant (c + 1) > n ==> c == n; loop invariant (c + 1) <= n ==> c > 0; loop invariant (c + 1) == n ==> c > 0; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n; loop invariant (c + 1) == n ==> c == n;\nloop invariant i33: 1 <= c <= n;\nloop invariant i34: c == 1 ==> c <= n;\nloop invariant i35: n >= 1;\nloop invariant i36: c <= 2*n;\nloop invariant i37: c >= 1 ==> c <= n;\nloop invariant i38: c >= n ==> c == n;\nloop invariant i39: c <= n ==> c >= 1;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 35,
        "success_count": 28,
        "failure_count": 7,
        "success_rate": 0.8
    }
}