{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/47.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= unknown() <= 1;\nloop invariant 0 <= c <= n;\nloop invariant (unknown() ==> (c <= n));\nloop invariant (!unknown() ==> (c == n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c + n - c <= n;\nloop invariant c < n ==> c == n;\nloop invariant c > n ==> c == n;\nloop invariant unknown() ==> c < n;\nloop invariant !unknown() ==> c > n;\nloop invariant !unknown() ==> c == 1;\nloop invariant c < n ==> c + 1 <= n;\nloop invariant c > n ==> c == 1;\nloop invariant 0 <= c <= n;\nloop invariant c + n - c <= n;\nloop invariant c < n ==> c == n;\nloop invariant c > n ==> c == n;\nloop invariant unknown() ==> c < n;\nloop invariant !unknown() ==> c > n;\nloop invariant !unknown() ==> c == 1;\nloop invariant c < n ==> c + 1 <= n;\nloop invariant c > n ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant n >= 0;\nloop invariant n >= 1;\nloop invariant n >= 2;\nloop invariant n >= 3;\nloop invariant n >= 4;\nloop invariant n >= 5;\nloop invariant n >= 6;\nloop invariant n >= 7;\nloop invariant n >= 8;\nloop invariant n >= 9;\nloop invariant n >= 10;\nloop invariant n >= 11;\nloop invariant n >= 12;\nloop invariant n >= 13;\nloop invariant n >= 14;\nloop invariant n >= 15;\nloop invariant n >= 16;\nloop invariant n >= 17;\nloop invariant n >= 18;\nloop invariant n >= 19;\nloop invariant n >= 20;\nloop invariant n >= 21;\nloop invariant n >= 22;\nloop invariant n >= 23;\nloop invariant n >= 24;\nloop invariant n >= 25;\nloop invariant n >= 26;\nloop invariant n >= 27;\nloop invariant n >= 28;\nloop invariant n >= 29;\nloop invariant n >= 30;\nloop invariant n >= 31;\nloop invariant n >= 32;\nloop invariant n >= 33;\nloop invariant n >= 34;\nloop invariant n >= 35;\nloop invariant n >= 36;\nloop invariant n >= 37;\nloop invariant n >= 38;\nloop invariant n >= 39;\nloop invariant n >= 40;\nloop invariant n >= 41;\nloop invariant n >= 42;\nloop invariant n >= 43;\nloop invariant n >= 44;\nloop invariant n >= 45;\nloop invariant n >= 46;\nloop invariant n >= 47;\nloop invariant n >= 48;\nloop invariant n >= 49;\nloop invariant n >= 50;\nloop invariant n >= 51;\nloop invariant n >= 52;\nloop invariant n >= 53;\nloop invariant n >= 54;\nloop invariant n >= 55;\nloop invariant n >= 56;\nloop invariant n >= 57;\nloop invariant n >= 58;\nloop invariant n >= 59;\nloop invariant n >= 60;\nloop invariant n >= 61;\nloop invariant n >= 62;\nloop invariant n >= 63;\nloop invariant n >= 64;\nloop invariant n >= 65;\nloop invariant n >= 66;\nloop invariant n >= 67;\nloop invariant n >= 68;\nloop invariant n >= 69;\nloop invariant n >= 70;\nloop invariant n >= 71;\nloop invariant n >= 72;\nloop invariant n >= 73;\nloop invariant n >= 74;\nloop invariant n >= 75;\nloop invariant n >= 76;\nloop invariant n >= 77;\nloop invariant n >= 78;\nloop invariant n >= 79;\nloop invariant n >= 80;\nloop invariant n >= 81;\nloop invariant n >= 82;\nloop invariant n >= 83;\nloop invariant n >= 84;\nloop invariant n >= 85;\nloop invariant n >= 86;\nloop invariant n >= 87;\nloop invariant n >= 88;\nloop invariant n >= 89;\nloop invariant n >= 90;\nloop invariant n >= 91;\nloop invariant n >= 92;\nloop invariant n >= 93;\nloop invariant n >= 94;\nloop invariant n >= 95;\nloop invariant n >= 96;\nloop invariant n >= 97;\nloop invariant n >= 98;\nloop invariant n >= 99;\nloop invariant n >= 100;\nloop invariant n >= 101;\nloop invariant n >= 102;\nloop invariant n >= 103;\nloop invariant n >= 104;\nloop invariant n >= 105;\nloop invariant n >= 106;\nloop invariant n >= 107;\nloop invariant n >= 108;\nloop invariant n >= 109;\nloop invariant n >= 110;\nloop invariant n >= 111;\nloop invariant n >= 112;\nloop invariant n >= 113;\nloop invariant n >= 114;\nloop invariant n >= 115;\nloop invariant n >= 116;\nloop invariant n >= 117;\nloop invariant n >= 118;\nloop invariant n >= 119;\nloop invariant n >= 120;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant unknown() ==> (c < n);\nloop invariant !unknown() ==> (c == n);\nloop invariant c == 0 ==> (c < n);\nloop invariant c == n ==> (c == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n;\nloop invariant c < 0 ==> c == n;\nloop invariant c > n ==> c == n;\nloop invariant c <= n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c is non-deterministic at the beginning and end of the loop;\nloop invariant c == 1 when the condition (c == n) is true;\nloop invariant c != n when the condition (c != n) is true;\nloop invariant c >= 0 when the condition (c < 0) is true;\nloop invariant c <= n when the condition (c > n) is true;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c is non-deterministic at the beginning and end of the loop;\nloop invariant c == 1 ==> (c == n);\nloop invariant c != n ==> (c != n);\nloop invariant c >= 0 ==> (c < 0);\nloop invariant c <= n ==> (c > n);\nloop invariant c == n ==> (c == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c <= n ==> (c == n) || (c < n);\nloop invariant c >= 0;\nloop invariant c >= 0 ==> (c == 0) || (c > 0);\nloop invariant c == n ==> (c == n);\nloop invariant c == 0 ==> (c == 0);\nloop invariant c < n ==> (c == n) || (c < n);\nloop invariant c > 0 ==> (c == n) || (c > 0);\nloop invariant c < 0 ==> (c == n) || (c < n);\nloop invariant c > n ==> (c == n) || (c > n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (if (unknown()) then (if (unknown()) then (c == 0) else (c == n)) else (if (unknown()) then (c <= n) else (c < 0)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> n > 0;\nloop invariant c < 0 ==> c < n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant unknown() ==> c == 0;\nloop invariant !unknown() ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 0 ==> !unknown();\nloop invariant c == n ==> unknown();\nloop invariant c < n ==> unknown();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c != 0;\nloop invariant c != 0 ==> c != n;\nloop invariant c != n ==> c != 1;\nloop invariant c != 1 ==> c != n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n <= (c + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0 ==> c <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= unknown() <= 1;\nloop invariant 0 <= c <= n;\nloop invariant (unknown() ==> (c <= n));\nloop invariant (!unknown() ==> (c == n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c + n - c <= n;\nloop invariant c < n ==> c == n;\nloop invariant c > n ==> c == n;\nloop invariant unknown() ==> c < n;\nloop invariant !unknown() ==> c > n;\nloop invariant !unknown() ==> c == 1;\nloop invariant c < n ==> c + 1 <= n;\nloop invariant c > n ==> c == 1;\nloop invariant 0 <= c <= n;\nloop invariant c + n - c <= n;\nloop invariant c < n ==> c == n;\nloop invariant c > n ==> c == n;\nloop invariant unknown() ==> c < n;\nloop invariant !unknown() ==> c > n;\nloop invariant !unknown() ==> c == 1;\nloop invariant c < n ==> c + 1 <= n;\nloop invariant c > n ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c + n - c <= n;\n\n\n\n\n\nloop invariant i8: c < n ==> c + 1 <= n;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant n >= 0;\nloop invariant n >= 1;\nloop invariant n >= 2;\nloop invariant n >= 3;\nloop invariant n >= 4;\nloop invariant n >= 5;\nloop invariant n >= 6;\nloop invariant n >= 7;\nloop invariant n >= 8;\nloop invariant n >= 9;\nloop invariant n >= 10;\nloop invariant n >= 11;\nloop invariant n >= 12;\nloop invariant n >= 13;\nloop invariant n >= 14;\nloop invariant n >= 15;\nloop invariant n >= 16;\nloop invariant n >= 17;\nloop invariant n >= 18;\nloop invariant n >= 19;\nloop invariant n >= 20;\nloop invariant n >= 21;\nloop invariant n >= 22;\nloop invariant n >= 23;\nloop invariant n >= 24;\nloop invariant n >= 25;\nloop invariant n >= 26;\nloop invariant n >= 27;\nloop invariant n >= 28;\nloop invariant n >= 29;\nloop invariant n >= 30;\nloop invariant n >= 31;\nloop invariant n >= 32;\nloop invariant n >= 33;\nloop invariant n >= 34;\nloop invariant n >= 35;\nloop invariant n >= 36;\nloop invariant n >= 37;\nloop invariant n >= 38;\nloop invariant n >= 39;\nloop invariant n >= 40;\nloop invariant n >= 41;\nloop invariant n >= 42;\nloop invariant n >= 43;\nloop invariant n >= 44;\nloop invariant n >= 45;\nloop invariant n >= 46;\nloop invariant n >= 47;\nloop invariant n >= 48;\nloop invariant n >= 49;\nloop invariant n >= 50;\nloop invariant n >= 51;\nloop invariant n >= 52;\nloop invariant n >= 53;\nloop invariant n >= 54;\nloop invariant n >= 55;\nloop invariant n >= 56;\nloop invariant n >= 57;\nloop invariant n >= 58;\nloop invariant n >= 59;\nloop invariant n >= 60;\nloop invariant n >= 61;\nloop invariant n >= 62;\nloop invariant n >= 63;\nloop invariant n >= 64;\nloop invariant n >= 65;\nloop invariant n >= 66;\nloop invariant n >= 67;\nloop invariant n >= 68;\nloop invariant n >= 69;\nloop invariant n >= 70;\nloop invariant n >= 71;\nloop invariant n >= 72;\nloop invariant n >= 73;\nloop invariant n >= 74;\nloop invariant n >= 75;\nloop invariant n >= 76;\nloop invariant n >= 77;\nloop invariant n >= 78;\nloop invariant n >= 79;\nloop invariant n >= 80;\nloop invariant n >= 81;\nloop invariant n >= 82;\nloop invariant n >= 83;\nloop invariant n >= 84;\nloop invariant n >= 85;\nloop invariant n >= 86;\nloop invariant n >= 87;\nloop invariant n >= 88;\nloop invariant n >= 89;\nloop invariant n >= 90;\nloop invariant n >= 91;\nloop invariant n >= 92;\nloop invariant n >= 93;\nloop invariant n >= 94;\nloop invariant n >= 95;\nloop invariant n >= 96;\nloop invariant n >= 97;\nloop invariant n >= 98;\nloop invariant n >= 99;\nloop invariant n >= 100;\nloop invariant n >= 101;\nloop invariant n >= 102;\nloop invariant n >= 103;\nloop invariant n >= 104;\nloop invariant n >= 105;\nloop invariant n >= 106;\nloop invariant n >= 107;\nloop invariant n >= 108;\nloop invariant n >= 109;\nloop invariant n >= 110;\nloop invariant n >= 111;\nloop invariant n >= 112;\nloop invariant n >= 113;\nloop invariant n >= 114;\nloop invariant n >= 115;\nloop invariant n >= 116;\nloop invariant n >= 117;\nloop invariant n >= 118;\nloop invariant n >= 119;\nloop invariant n >= 120;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 1 <= n;\nloop invariant i2: 0 <= c;\nloop invariant i3: c <= n;\nloop invariant i4: n >= 0;\nloop invariant i5: n >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant unknown() ==> (c < n);\nloop invariant !unknown() ==> (c == n);\nloop invariant c == 0 ==> (c < n);\nloop invariant c == n ==> (c == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\n\nloop invariant i4: c == 0 ==> (c < n);\nloop invariant i5: c == n ==> (c == n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n;\nloop invariant c < 0 ==> c == n;\nloop invariant c > n ==> c == n;\nloop invariant c <= n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c < 0 ==> c == n;\n\n\nloop invariant i6: c == n ==> c == n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c is non-deterministic at the beginning and end of the loop;\nloop invariant c == 1 when the condition (c == n) is true;\nloop invariant c != n when the condition (c != n) is true;\nloop invariant c >= 0 when the condition (c < 0) is true;\nloop invariant c <= n when the condition (c > n) is true;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c is non-deterministic at the beginning and end of the loop;\nloop invariant c == 1 ==> (c == n);\nloop invariant c != n ==> (c != n);\nloop invariant c >= 0 ==> (c < 0);\nloop invariant c <= n ==> (c > n);\nloop invariant c == n ==> (c == n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\n\n\n\n\n\n\n\nloop invariant i9: c != n ==> (c != n);\n\n\nloop invariant i12: c == n ==> (c == n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c <= n ==> (c == n) || (c < n);\nloop invariant c >= 0;\nloop invariant c >= 0 ==> (c == 0) || (c > 0);\nloop invariant c == n ==> (c == n);\nloop invariant c == 0 ==> (c == 0);\nloop invariant c < n ==> (c == n) || (c < n);\nloop invariant c > 0 ==> (c == n) || (c > 0);\nloop invariant c < 0 ==> (c == n) || (c < n);\nloop invariant c > n ==> (c == n) || (c > n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c <= n ==> (c == n) || (c < n);\nloop invariant i4: c >= 0;\nloop invariant i5: c >= 0 ==> (c == 0) || (c > 0);\nloop invariant i6: c == n ==> (c == n);\nloop invariant i7: c == 0 ==> (c == 0);\nloop invariant i8: c < n ==> (c == n) || (c < n);\nloop invariant i9: c > 0 ==> (c == n) || (c > 0);\nloop invariant i10: c < 0 ==> (c == n) || (c < n);\nloop invariant i11: c > n ==> (c == n) || (c > n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (if (unknown()) then (if (unknown()) then (c == 0) else (c == n)) else (if (unknown()) then (c <= n) else (c < 0)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> n > 0;\nloop invariant c < 0 ==> c < n;\nloop invariant c > n ==> c > n;\nloop invariant c <= n ==> c <= n;\nloop invariant c >= 0 ==> c >= 0;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c != n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\nloop invariant c < n ==> c < n;\nloop invariant c > 0 ==> c > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: c == n ==> n > 0;\nloop invariant i3: c < 0 ==> c < n;\nloop invariant i4: c > n ==> c > n;\nloop invariant i5: c <= n ==> c <= n;\nloop invariant i6: c >= 0 ==> c >= 0;\nloop invariant i7: c != n ==> c != n;\nloop invariant i8: c == 1 ==> c == 1;\nloop invariant i9: c == n ==> c == n;\nloop invariant i10: c < n ==> c < n;\nloop invariant i11: c > 0 ==> c > 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant unknown() ==> c == 0;\nloop invariant !unknown() ==> c == n;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == 1 ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: c == n ==> c == n;\nloop invariant i5: c == 1 ==> c == 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 0 ==> !unknown();\nloop invariant c == n ==> unknown();\nloop invariant c < n ==> unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n;\nloop invariant i3: c >= 0;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c != 0;\nloop invariant c != 0 ==> c != n;\nloop invariant c != n ==> c != 1;\nloop invariant c != 1 ==> c != n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c == n ==> c >= 0;\nloop invariant i3: c == n ==> c <= n;\nloop invariant i4: c != n ==> c >= 0;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n <= (c + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0 ==> c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= unknown() <= 1;\nloop invariant i2: 0 <= c <= n;\nloop invariant i3: (unknown() ==> (c <= n));\nloop invariant i4: (!unknown() ==> (c == n));\nloop invariant i5: c + n - c <= n;\nloop invariant i6: c < n ==> c == n;\nloop invariant i7: c > n ==> c == n;\nloop invariant i8: unknown() ==> c < n;\nloop invariant i9: !unknown() ==> c > n;\nloop invariant i10: !unknown() ==> c == 1;\nloop invariant i11: c < n ==> c + 1 <= n;\nloop invariant i12: c > n ==> c == 1;\nloop invariant i13: 1 <= n;\nloop invariant i14: 0 <= c;\nloop invariant i15: c <= n;\nloop invariant i16: n >= 0;\nloop invariant i17: n >= 1;\nloop invariant i18: n >= 2;\nloop invariant i19: n >= 3;\nloop invariant i20: n >= 4;\nloop invariant i21: n >= 5;\nloop invariant i22: n >= 6;\nloop invariant i23: n >= 7;\nloop invariant i24: n >= 8;\nloop invariant i25: n >= 9;\nloop invariant i26: n >= 10;\nloop invariant i27: n >= 11;\nloop invariant i28: n >= 12;\nloop invariant i29: n >= 13;\nloop invariant i30: n >= 14;\nloop invariant i31: n >= 15;\nloop invariant i32: n >= 16;\nloop invariant i33: n >= 17;\nloop invariant i34: n >= 18;\nloop invariant i35: n >= 19;\nloop invariant i36: n >= 20;\nloop invariant i37: n >= 21;\nloop invariant i38: n >= 22;\nloop invariant i39: n >= 23;\nloop invariant i40: n >= 24;\nloop invariant i41: n >= 25;\nloop invariant i42: n >= 26;\nloop invariant i43: n >= 27;\nloop invariant i44: n >= 28;\nloop invariant i45: n >= 29;\nloop invariant i46: n >= 30;\nloop invariant i47: n >= 31;\nloop invariant i48: n >= 32;\nloop invariant i49: n >= 33;\nloop invariant i50: n >= 34;\nloop invariant i51: n >= 35;\nloop invariant i52: n >= 36;\nloop invariant i53: n >= 37;\nloop invariant i54: n >= 38;\nloop invariant i55: n >= 39;\nloop invariant i56: n >= 40;\nloop invariant i57: n >= 41;\nloop invariant i58: n >= 42;\nloop invariant i59: n >= 43;\nloop invariant i60: n >= 44;\nloop invariant i61: n >= 45;\nloop invariant i62: n >= 46;\nloop invariant i63: n >= 47;\nloop invariant i64: n >= 48;\nloop invariant i65: n >= 49;\nloop invariant i66: n >= 50;\nloop invariant i67: n >= 51;\nloop invariant i68: n >= 52;\nloop invariant i69: n >= 53;\nloop invariant i70: n >= 54;\nloop invariant i71: n >= 55;\nloop invariant i72: n >= 56;\nloop invariant i73: n >= 57;\nloop invariant i74: n >= 58;\nloop invariant i75: n >= 59;\nloop invariant i76: n >= 60;\nloop invariant i77: n >= 61;\nloop invariant i78: n >= 62;\nloop invariant i79: n >= 63;\nloop invariant i80: n >= 64;\nloop invariant i81: n >= 65;\nloop invariant i82: n >= 66;\nloop invariant i83: n >= 67;\nloop invariant i84: n >= 68;\nloop invariant i85: n >= 69;\nloop invariant i86: n >= 70;\nloop invariant i87: n >= 71;\nloop invariant i88: n >= 72;\nloop invariant i89: n >= 73;\nloop invariant i90: n >= 74;\nloop invariant i91: n >= 75;\nloop invariant i92: n >= 76;\nloop invariant i93: n >= 77;\nloop invariant i94: n >= 78;\nloop invariant i95: n >= 79;\nloop invariant i96: n >= 80;\nloop invariant i97: n >= 81;\nloop invariant i98: n >= 82;\nloop invariant i99: n >= 83;\nloop invariant i100: n >= 84;\nloop invariant i101: n >= 85;\nloop invariant i102: n >= 86;\nloop invariant i103: n >= 87;\nloop invariant i104: n >= 88;\nloop invariant i105: n >= 89;\nloop invariant i106: n >= 90;\nloop invariant i107: n >= 91;\nloop invariant i108: n >= 92;\nloop invariant i109: n >= 93;\nloop invariant i110: n >= 94;\nloop invariant i111: n >= 95;\nloop invariant i112: n >= 96;\nloop invariant i113: n >= 97;\nloop invariant i114: n >= 98;\nloop invariant i115: n >= 99;\nloop invariant i116: n >= 100;\nloop invariant i117: n >= 101;\nloop invariant i118: n >= 102;\nloop invariant i119: n >= 103;\nloop invariant i120: n >= 104;\nloop invariant i121: n >= 105;\nloop invariant i122: n >= 106;\nloop invariant i123: n >= 107;\nloop invariant i124: n >= 108;\nloop invariant i125: n >= 109;\nloop invariant i126: n >= 110;\nloop invariant i127: n >= 111;\nloop invariant i128: n >= 112;\nloop invariant i129: n >= 113;\nloop invariant i130: n >= 114;\nloop invariant i131: n >= 115;\nloop invariant i132: n >= 116;\nloop invariant i133: n >= 117;\nloop invariant i134: n >= 118;\nloop invariant i135: n >= 119;\nloop invariant i136: n >= 120;\nloop invariant i137: unknown() ==> (c < n);\nloop invariant i138: !unknown() ==> (c == n);\nloop invariant i139: c == 0 ==> (c < n);\nloop invariant i140: c == n ==> (c == n);\nloop invariant i141: c == n;\nloop invariant i142: c < 0 ==> c == n;\nloop invariant i143: c <= n ==> c == n;\nloop invariant i144: c == n ==> c == n;\nloop invariant i145: c >= 0;\nloop invariant i146: c is non-deterministic at the beginning and end of the loop;\nloop invariant i147: c == 1 when the condition (c == n) is true;\nloop invariant i148: c != n when the condition (c != n) is true;\nloop invariant i149: c >= 0 when the condition (c < 0) is true;\nloop invariant i150: c <= n when the condition (c > n) is true;\nloop invariant i151: c == 1 ==> (c == n);\nloop invariant i152: c != n ==> (c != n);\nloop invariant i153: c >= 0 ==> (c < 0);\nloop invariant i154: c <= n ==> (c > n);\nloop invariant i155: c <= n ==> (c == n) || (c < n);\nloop invariant i156: c >= 0 ==> (c == 0) || (c > 0);\nloop invariant i157: c == 0 ==> (c == 0);\nloop invariant i158: c < n ==> (c == n) || (c < n);\nloop invariant i159: c > 0 ==> (c == n) || (c > 0);\nloop invariant i160: c < 0 ==> (c == n) || (c < n);\nloop invariant i161: c > n ==> (c == n) || (c > n);\nloop invariant i162: (if (unknown()) then (if (unknown()) then (c == 0) else (c == n)) else (if (unknown()) then (c <= n) else (c < 0)));\nloop invariant i163: c == n ==> n > 0;\nloop invariant i164: c < 0 ==> c < n;\nloop invariant i165: c > n ==> c > n;\nloop invariant i166: c <= n ==> c <= n;\nloop invariant i167: c >= 0 ==> c >= 0;\nloop invariant i168: c != n ==> c != n;\nloop invariant i169: c == 1 ==> c == 1;\nloop invariant i170: c < n ==> c < n;\nloop invariant i171: c > 0 ==> c > 0;\nloop invariant i172: unknown() ==> c == 0;\nloop invariant i173: !unknown() ==> c == n;\nloop invariant i174: 0 <= n;\nloop invariant i175: c == 0 ==> !unknown();\nloop invariant i176: c == n ==> unknown();\nloop invariant i177: c < n ==> unknown();\nloop invariant i178: c == n ==> c >= 0;\nloop invariant i179: c == n ==> c <= n;\nloop invariant i180: c != n ==> c >= 0;\nloop invariant i181: c != n ==> c <= n;\nloop invariant i182: c != n ==> c != 0;\nloop invariant i183: c != 0 ==> c != n;\nloop invariant i184: c != n ==> c != 1;\nloop invariant i185: c != 1 ==> c != n;\nloop invariant i186: 0 <= n <= (c + 1);\nloop invariant i187: c >= 0 ==> c <= n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 29,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= c <= n;\n\n\nloop invariant i5: c + n - c <= n;\n\nloop invariant i7: c > n ==> c == n;\n\n\n\nloop invariant i11: c < n ==> c + 1 <= n;\nloop invariant i12: c > n ==> c == 1;\nloop invariant i13: 1 <= n;\nloop invariant i14: 0 <= c;\nloop invariant i15: c <= n;\nloop invariant i16: n >= 0;\nloop invariant i17: n >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i139: c == 0 ==> (c < n);\nloop invariant i140: c == n ==> (c == n);\n\nloop invariant i142: c < 0 ==> c == n;\n\nloop invariant i144: c == n ==> c == n;\nloop invariant i145: c >= 0;\n\n\n\n\n\n\nloop invariant i152: c != n ==> (c != n);\n\n\nloop invariant i155: c <= n ==> (c == n) || (c < n);\nloop invariant i156: c >= 0 ==> (c == 0) || (c > 0);\nloop invariant i157: c == 0 ==> (c == 0);\nloop invariant i158: c < n ==> (c == n) || (c < n);\nloop invariant i159: c > 0 ==> (c == n) || (c > 0);\nloop invariant i160: c < 0 ==> (c == n) || (c < n);\nloop invariant i161: c > n ==> (c == n) || (c > n);\n\nloop invariant i163: c == n ==> n > 0;\nloop invariant i164: c < 0 ==> c < n;\nloop invariant i165: c > n ==> c > n;\nloop invariant i166: c <= n ==> c <= n;\nloop invariant i167: c >= 0 ==> c >= 0;\nloop invariant i168: c != n ==> c != n;\nloop invariant i169: c == 1 ==> c == 1;\nloop invariant i170: c < n ==> c < n;\nloop invariant i171: c > 0 ==> c > 0;\n\n\nloop invariant i174: 0 <= n;\n\n\n\nloop invariant i178: c == n ==> c >= 0;\nloop invariant i179: c == n ==> c <= n;\nloop invariant i180: c != n ==> c >= 0;\nloop invariant i181: c != n ==> c <= n;\n\n\n\n\n\nloop invariant i187: c >= 0 ==> c <= n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 39,
        "success_count": 32,
        "failure_count": 7,
        "success_rate": 0.8205128205128205
    }
}