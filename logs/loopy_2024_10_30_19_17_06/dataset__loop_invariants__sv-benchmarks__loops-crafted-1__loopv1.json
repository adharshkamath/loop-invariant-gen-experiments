{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  while(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= i <= n;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i%3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant i % 3 == 0;\nloop invariant j >= 0;\nloop invariant j <= n;\n*/\n```",
            "```\n/*@\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant (i%3) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant ((i % 3) == 0);\nloop invariant ((j % 3) == 0);\nloop invariant ((i - n) % 3 == 0);\nloop invariant ((j - n) % 3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j == 0;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= j <= n;\nloop invariant i%3 == 0 ==> i >= 3;\nloop invariant i%3 == 1 ==> i >= 1;\nloop invariant i%3 == 2 ==> i >= 2;\nloop invariant i%6 == 0 ==> i >= 6;\nloop invariant i%6 == 1 ==> i >= 1;\nloop invariant i%6 == 2 ==> i >= 2;\nloop invariant i%6 == 3 ==> i >= 3;\nloop invariant i%6 == 4 ==> i >= 4;\nloop invariant i%6 == 5 ==> i >= 5;\nloop invariant i%6 == 0 ==> i%3 == 0;\nloop invariant i%6 == 1 ==> i%3 == 0;\nloop invariant i%6 == 2 ==> i%3 == 0;\nloop invariant i%6 == 3 ==> i%3 == 0;\nloop invariant i%6 == 4 ==> i%3 == 0;\nloop invariant i%6 == 5 ==> i%3 == 0;\nloop invariant i%6 == 0 ==> i%2 == 0;\nloop invariant i%6 == 1 ==> i%2 == 1;\nloop invariant i%6 == 2 ==> i%2 == 0;\nloop invariant i%6 == 3 ==> i%2 == 1;\nloop invariant i%6 == 4 ==> i%2 == 0;\nloop invariant i%6 == 5 ==> i%2 == 1;\nloop invariant i%6 == 0 ==> i%5 == 0;\nloop invariant i%6 == 1 ==> i%5 == 1;\nloop invariant i%6 == 2 ==> i%5 == 2;\nloop invariant i%6 == 3 ==> i%5 == 3;\nloop invariant i%6 == 4 ==> i%5 == 4;\nloop invariant i%6 == 5 ==> i%5 == 0;\nloop invariant i%6 == 0 ==> i%4 == 0;\nloop invariant i%6 == 1 ==> i%4 == 1;\nloop invariant i%6 == 2 ==> i%4 == 2;\nloop invariant i%6 == 3 ==> i%4 == 3;\nloop invariant i%6 == 4 ==> i%4 == 0;\nloop invariant i%6 == 5 ==> i%4 == 1;\nloop invariant i%6 == 0 ==> i%7 == 0;\nloop invariant i%6 == 1 ==> i%7 == 1;\nloop invariant i%6 == 2 ==> i%7 == 2;\nloop invariant i%6 == 3 ==> i%7 == 3;\nloop invariant i%6 == 4 ==> i%7 == 4;\nloop invariant i%6 == 5 ==> i%7 == 5;\nloop invariant i%6 == 0 ==> i%8 == 0;\nloop invariant i%6 == 1 ==> i%8 == 1;\nloop invariant i%6 == 2 ==> i%8 == 2;\nloop invariant i%6 == 3 ==> i%8 == 3;\nloop invariant i%6 == 4 ==> i%8 == 4;\nloop invariant i%6 == 5 ==> i%8 == 5;\nloop invariant i%6 == 0 ==> i%9 == 0;\nloop invariant i%6 == 1 ==> i%9 == 1;\nloop invariant i%6 == 2 ==> i%9 == 2;\nloop invariant i%6 == 3 ==> i%9 == 3;\nloop invariant i%6 == 4 ==> i%9 == 4;\nloop invariant i%6 == 5 ==> i%9 == 5;\nloop invariant i%6 == 0 ==> i%10 == 0;\nloop invariant i%6 == 1 ==> i%10 == 1;\nloop invariant i%6 == 2 ==> i%10 == 2;\nloop invariant i%6 == 3 ==> i%10 == 3;\nloop invariant i%6 == 4 ==> i%10 == 4;\nloop invariant i%6 == 5 ==> i%10 == 5;\nloop invariant i%6 == 0 ==> i%11 == 0;\nloop invariant i%6 == 1 ==> i%11 == 1;\nloop invariant i%6 == 2 ==> i%11 == 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant (i%3) == 0 ==> (i <= n);\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 3*i <= j <= 6*i;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) != 0 ==> (i%3) != 0;\nloop invariant 0 <= i <= n;\nloop invariant i >= n ==> (i%3) == 0;\nloop invariant i < n ==> (i%3) != 0;\nloop invariant 0 <= i <= n;\nloop invariant i >= n ==> (i%3) == 0;\nloop invariant i < n ==> (i%3) != 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i%3 == (i%3) ==> i%3 == 0;\nloop invariant i%3 == (i%3) ==> i%3 == 3;\nloop invariant i%3 == (i%3) ==> i%3 == 6;\nloop invariant i%6 == i%3 ==> i%6 == 0;\nloop invariant i%6 == i%3 ==> i%6 == 3;\nloop invariant i%6 == i%3 ==> i%6 == 6;\nloop invariant i%9 == i%6 ==> i%9 == 0;\nloop invariant i%9 == i%6 ==> i%9 == 3;\nloop invariant i%9 == i%6 ==> i%9 == 6;\nloop invariant i%12 == i%9 ==> i%12 == 0;\nloop invariant i%12 == i%9 ==> i%12 == 3;\nloop invariant i%12 == i%9 ==> i%12 == 6;\nloop invariant i%15 == i%12 ==> i%15 == 0;\nloop invariant i%15 == i%12 ==> i%15 == 3;\nloop invariant i%15 == i%12 ==> i%15 == 6;\nloop invariant i%18 == i%15 ==> i%18 == 0;\nloop invariant i%18 == i%15 ==> i%18 == 3;\nloop invariant i%18 == i%15 ==> i%18 == 6;\nloop invariant i%21 == i%18 ==> i%21 == 0;\nloop invariant i%21 == i%18 ==> i%21 == 3;\nloop invariant i%21 == i%18 ==> i%21 == 6;\nloop invariant i%24 == i%21 ==> i%24 == 0;\nloop invariant i%24 == i%21 ==> i%24 == 3;\nloop invariant i%24 == i%21 ==> i%24 == 6;\nloop invariant i%27 == i%24 ==> i%27 == 0;\nloop invariant i%27 == i%24 ==> i%27 == 3;\nloop invariant i%27 == i%24 ==> i%27 == 6;\nloop invariant i%30 == i%27 ==> i%30 == 0;\nloop invariant i%30 == i%27 ==> i%30 == 3;\nloop invariant i%30 == i%27 ==> i%30 == 6;\nloop invariant i%33 == i%30 ==> i%33 == 0;\nloop invariant i%33 == i%30 ==> i%33 == 3;\nloop invariant i%33 == i%30 ==> i%33 == 6;\nloop invariant i%36 == i%33 ==> i%36 == 0;\nloop invariant i%36 == i%33 ==> i%36 == 3;\nloop invariant i%36 == i%33 ==> i%36 == 6;\nloop invariant i%39 == i%36 ==> i%39 == 0;\nloop invariant i%39 == i%36 ==> i%39 == 3;\nloop invariant i%39 == i%36 ==> i%39 == 6;\nloop invariant i%42 == i%39 ==> i%42 == 0;\nloop invariant i%42 == i%39 ==> i%42 == 3;\nloop invariant i%42 == i%39 ==> i%42 == 6;\nloop invariant i%45 == i%42 ==> i%45 == 0;\nloop invariant i%45 == i%42 ==> i%45 == 3;\nloop invariant i%45 == i%42 ==> i%45 == 6;\nloop invariant i%48 == i%45 ==> i%48 == 0;\nloop invariant i%48 == i%45 ==> i%48 == 3;\nloop invariant i%48 == i%45 ==> i%48 == 6;\nloop invariant i%51 == i%48 ==> i%51 == 0;\nloop invariant i%51 == i%48 ==> i%51 == 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant if (i % 3 == 0) then (i >= 3) else (i < 3);\nloop invariant if (i % 3 == 0) then (i + 6 <= n) else (i + 3 <= n);\nloop invariant if (i % 3 == 0) then (i + 6 >= 0) else (i + 3 >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i <= n - 1 ==> j <= n - 1;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 1;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 1;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 2;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 2;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 3;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 3;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 4;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 4;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 5;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 5;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 6;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 6;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 7;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 7;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 8;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 8;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 9;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 9;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 10;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 10;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 11;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 11;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 12;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 12;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 13;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 13;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 14;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 14;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 15;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 15;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 16;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 16;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 17;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 17;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 18;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 18;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 19;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 19;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= i <= n;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant (i % 3) == 0 ==> (i >= 0);\nloop invariant (i % 3) == 0 ==> (i <= n);\nloop invariant (i % 3) == 0 ==> (i % 3) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n\nloop invariant i3: (i % 3) == 0 ==> (i >= 0);\n\nloop invariant i5: (i % 3) == 0 ==> (i % 3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i%3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\nloop invariant i2: i%3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i % 3 == 0;\nloop invariant j >= 0;\nloop invariant j <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i % 3 == 0;\nloop invariant i2: j >= 0;\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant (i%3) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: (i%3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant ((i % 3) == 0);\nloop invariant ((j % 3) == 0);\nloop invariant ((i - n) % 3 == 0);\nloop invariant ((j - n) % 3 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n\nloop invariant i3: ((i % 3) == 0);\nloop invariant i4: ((j % 3) == 0);\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j == 0;\nloop invariant 0 <= j <= i;\nloop invariant 0 <= j <= n;\nloop invariant i%3 == 0 ==> i >= 3;\nloop invariant i%3 == 1 ==> i >= 1;\nloop invariant i%3 == 2 ==> i >= 2;\nloop invariant i%6 == 0 ==> i >= 6;\nloop invariant i%6 == 1 ==> i >= 1;\nloop invariant i%6 == 2 ==> i >= 2;\nloop invariant i%6 == 3 ==> i >= 3;\nloop invariant i%6 == 4 ==> i >= 4;\nloop invariant i%6 == 5 ==> i >= 5;\nloop invariant i%6 == 0 ==> i%3 == 0;\nloop invariant i%6 == 1 ==> i%3 == 0;\nloop invariant i%6 == 2 ==> i%3 == 0;\nloop invariant i%6 == 3 ==> i%3 == 0;\nloop invariant i%6 == 4 ==> i%3 == 0;\nloop invariant i%6 == 5 ==> i%3 == 0;\nloop invariant i%6 == 0 ==> i%2 == 0;\nloop invariant i%6 == 1 ==> i%2 == 1;\nloop invariant i%6 == 2 ==> i%2 == 0;\nloop invariant i%6 == 3 ==> i%2 == 1;\nloop invariant i%6 == 4 ==> i%2 == 0;\nloop invariant i%6 == 5 ==> i%2 == 1;\nloop invariant i%6 == 0 ==> i%5 == 0;\nloop invariant i%6 == 1 ==> i%5 == 1;\nloop invariant i%6 == 2 ==> i%5 == 2;\nloop invariant i%6 == 3 ==> i%5 == 3;\nloop invariant i%6 == 4 ==> i%5 == 4;\nloop invariant i%6 == 5 ==> i%5 == 0;\nloop invariant i%6 == 0 ==> i%4 == 0;\nloop invariant i%6 == 1 ==> i%4 == 1;\nloop invariant i%6 == 2 ==> i%4 == 2;\nloop invariant i%6 == 3 ==> i%4 == 3;\nloop invariant i%6 == 4 ==> i%4 == 0;\nloop invariant i%6 == 5 ==> i%4 == 1;\nloop invariant i%6 == 0 ==> i%7 == 0;\nloop invariant i%6 == 1 ==> i%7 == 1;\nloop invariant i%6 == 2 ==> i%7 == 2;\nloop invariant i%6 == 3 ==> i%7 == 3;\nloop invariant i%6 == 4 ==> i%7 == 4;\nloop invariant i%6 == 5 ==> i%7 == 5;\nloop invariant i%6 == 0 ==> i%8 == 0;\nloop invariant i%6 == 1 ==> i%8 == 1;\nloop invariant i%6 == 2 ==> i%8 == 2;\nloop invariant i%6 == 3 ==> i%8 == 3;\nloop invariant i%6 == 4 ==> i%8 == 4;\nloop invariant i%6 == 5 ==> i%8 == 5;\nloop invariant i%6 == 0 ==> i%9 == 0;\nloop invariant i%6 == 1 ==> i%9 == 1;\nloop invariant i%6 == 2 ==> i%9 == 2;\nloop invariant i%6 == 3 ==> i%9 == 3;\nloop invariant i%6 == 4 ==> i%9 == 4;\nloop invariant i%6 == 5 ==> i%9 == 5;\nloop invariant i%6 == 0 ==> i%10 == 0;\nloop invariant i%6 == 1 ==> i%10 == 1;\nloop invariant i%6 == 2 ==> i%10 == 2;\nloop invariant i%6 == 3 ==> i%10 == 3;\nloop invariant i%6 == 4 ==> i%10 == 4;\nloop invariant i%6 == 5 ==> i%10 == 5;\nloop invariant i%6 == 0 ==> i%11 == 0;\nloop invariant i%6 == 1 ==> i%11 == 1;\nloop invariant i%6 == 2 ==> i%11 == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\nloop invariant i2: j == 0;\nloop invariant i3: 0 <= j <= i;\n\n\nloop invariant i6: i%3 == 1 ==> i >= 1;\nloop invariant i7: i%3 == 2 ==> i >= 2;\n\nloop invariant i9: i%6 == 1 ==> i >= 1;\nloop invariant i10: i%6 == 2 ==> i >= 2;\nloop invariant i11: i%6 == 3 ==> i >= 3;\nloop invariant i12: i%6 == 4 ==> i >= 4;\nloop invariant i13: i%6 == 5 ==> i >= 5;\nloop invariant i14: i%6 == 0 ==> i%3 == 0;\nloop invariant i15: i%6 == 1 ==> i%3 == 0;\nloop invariant i16: i%6 == 2 ==> i%3 == 0;\nloop invariant i17: i%6 == 3 ==> i%3 == 0;\nloop invariant i18: i%6 == 4 ==> i%3 == 0;\nloop invariant i19: i%6 == 5 ==> i%3 == 0;\nloop invariant i20: i%6 == 0 ==> i%2 == 0;\nloop invariant i21: i%6 == 1 ==> i%2 == 1;\nloop invariant i22: i%6 == 2 ==> i%2 == 0;\nloop invariant i23: i%6 == 3 ==> i%2 == 1;\nloop invariant i24: i%6 == 4 ==> i%2 == 0;\nloop invariant i25: i%6 == 5 ==> i%2 == 1;\n\nloop invariant i27: i%6 == 1 ==> i%5 == 1;\nloop invariant i28: i%6 == 2 ==> i%5 == 2;\n\nloop invariant i30: i%6 == 4 ==> i%5 == 4;\nloop invariant i31: i%6 == 5 ==> i%5 == 0;\n\nloop invariant i33: i%6 == 1 ==> i%4 == 1;\nloop invariant i34: i%6 == 2 ==> i%4 == 2;\n\nloop invariant i36: i%6 == 4 ==> i%4 == 0;\nloop invariant i37: i%6 == 5 ==> i%4 == 1;\n\nloop invariant i39: i%6 == 1 ==> i%7 == 1;\nloop invariant i40: i%6 == 2 ==> i%7 == 2;\n\nloop invariant i42: i%6 == 4 ==> i%7 == 4;\nloop invariant i43: i%6 == 5 ==> i%7 == 5;\n\nloop invariant i45: i%6 == 1 ==> i%8 == 1;\nloop invariant i46: i%6 == 2 ==> i%8 == 2;\n\nloop invariant i48: i%6 == 4 ==> i%8 == 4;\nloop invariant i49: i%6 == 5 ==> i%8 == 5;\n\nloop invariant i51: i%6 == 1 ==> i%9 == 1;\nloop invariant i52: i%6 == 2 ==> i%9 == 2;\n\nloop invariant i54: i%6 == 4 ==> i%9 == 4;\nloop invariant i55: i%6 == 5 ==> i%9 == 5;\n\nloop invariant i57: i%6 == 1 ==> i%10 == 1;\nloop invariant i58: i%6 == 2 ==> i%10 == 2;\n\nloop invariant i60: i%6 == 4 ==> i%10 == 4;\nloop invariant i61: i%6 == 5 ==> i%10 == 5;\n\nloop invariant i63: i%6 == 1 ==> i%11 == 1;\nloop invariant i64: i%6 == 2 ==> i%11 == 2;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant (i%3) == 0 ==> (i <= n);\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) == 0 ==> (i >= 0);\nloop invariant (i%3) == 0 ==> (j <= n);\nloop invariant (i%3) == 0 ==> (j >= 0);\nloop invariant (i%3) == 0 ==> (i%3) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\nloop invariant i2: 0 <= j <= i;\n\nloop invariant i4: (i%3) == 0 ==> (i >= 0);\n\nloop invariant i6: (i%3) == 0 ==> (j >= 0);\nloop invariant i7: (i%3) == 0 ==> (i%3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\nloop invariant 0 <= j <= n;\nloop invariant 0 <= i <= (n + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 3*i <= j <= 6*i;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i;\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (i%3) == 0 ==> (i%3) == 0;\nloop invariant (i%3) != 0 ==> (i%3) != 0;\nloop invariant 0 <= i <= n;\nloop invariant i >= n ==> (i%3) == 0;\nloop invariant i < n ==> (i%3) != 0;\nloop invariant 0 <= i <= n;\nloop invariant i >= n ==> (i%3) == 0;\nloop invariant i < n ==> (i%3) != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\nloop invariant i2: (i%3) == 0 ==> (i%3) == 0;\nloop invariant i3: (i%3) != 0 ==> (i%3) != 0;\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 35,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i%3 == (i%3) ==> i%3 == 0;\nloop invariant i%3 == (i%3) ==> i%3 == 3;\nloop invariant i%3 == (i%3) ==> i%3 == 6;\nloop invariant i%6 == i%3 ==> i%6 == 0;\nloop invariant i%6 == i%3 ==> i%6 == 3;\nloop invariant i%6 == i%3 ==> i%6 == 6;\nloop invariant i%9 == i%6 ==> i%9 == 0;\nloop invariant i%9 == i%6 ==> i%9 == 3;\nloop invariant i%9 == i%6 ==> i%9 == 6;\nloop invariant i%12 == i%9 ==> i%12 == 0;\nloop invariant i%12 == i%9 ==> i%12 == 3;\nloop invariant i%12 == i%9 ==> i%12 == 6;\nloop invariant i%15 == i%12 ==> i%15 == 0;\nloop invariant i%15 == i%12 ==> i%15 == 3;\nloop invariant i%15 == i%12 ==> i%15 == 6;\nloop invariant i%18 == i%15 ==> i%18 == 0;\nloop invariant i%18 == i%15 ==> i%18 == 3;\nloop invariant i%18 == i%15 ==> i%18 == 6;\nloop invariant i%21 == i%18 ==> i%21 == 0;\nloop invariant i%21 == i%18 ==> i%21 == 3;\nloop invariant i%21 == i%18 ==> i%21 == 6;\nloop invariant i%24 == i%21 ==> i%24 == 0;\nloop invariant i%24 == i%21 ==> i%24 == 3;\nloop invariant i%24 == i%21 ==> i%24 == 6;\nloop invariant i%27 == i%24 ==> i%27 == 0;\nloop invariant i%27 == i%24 ==> i%27 == 3;\nloop invariant i%27 == i%24 ==> i%27 == 6;\nloop invariant i%30 == i%27 ==> i%30 == 0;\nloop invariant i%30 == i%27 ==> i%30 == 3;\nloop invariant i%30 == i%27 ==> i%30 == 6;\nloop invariant i%33 == i%30 ==> i%33 == 0;\nloop invariant i%33 == i%30 ==> i%33 == 3;\nloop invariant i%33 == i%30 ==> i%33 == 6;\nloop invariant i%36 == i%33 ==> i%36 == 0;\nloop invariant i%36 == i%33 ==> i%36 == 3;\nloop invariant i%36 == i%33 ==> i%36 == 6;\nloop invariant i%39 == i%36 ==> i%39 == 0;\nloop invariant i%39 == i%36 ==> i%39 == 3;\nloop invariant i%39 == i%36 ==> i%39 == 6;\nloop invariant i%42 == i%39 ==> i%42 == 0;\nloop invariant i%42 == i%39 ==> i%42 == 3;\nloop invariant i%42 == i%39 ==> i%42 == 6;\nloop invariant i%45 == i%42 ==> i%45 == 0;\nloop invariant i%45 == i%42 ==> i%45 == 3;\nloop invariant i%45 == i%42 ==> i%45 == 6;\nloop invariant i%48 == i%45 ==> i%48 == 0;\nloop invariant i%48 == i%45 ==> i%48 == 3;\nloop invariant i%48 == i%45 ==> i%48 == 6;\nloop invariant i%51 == i%48 ==> i%51 == 0;\nloop invariant i%51 == i%48 ==> i%51 == 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: i%3 == (i%3) ==> i%3 == 0;\n\n\nloop invariant i6: i%6 == i%3 ==> i%6 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant if (i % 3 == 0) then (i >= 3) else (i < 3);\nloop invariant if (i % 3 == 0) then (i + 6 <= n) else (i + 3 <= n);\nloop invariant if (i % 3 == 0) then (i + 6 >= 0) else (i + 3 >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i <= n - 1 ==> j <= n - 1;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 1;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 1;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 2;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 2;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 3;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 3;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 4;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 4;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 5;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 5;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 6;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 6;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 7;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 7;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 8;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 8;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 9;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 9;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 10;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 10;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 11;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 11;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 12;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 12;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 13;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 13;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 14;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 14;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 15;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 15;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 16;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 16;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 17;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 17;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 18;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 18;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> i <= n - 19;\nloop invariant i <= n - 1 ==> j <= n - 1 ==> j <= n - 19;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n\n\n\nloop invariant i5: i <= n - 1 ==> j <= n - 1;\nloop invariant i6: i <= n - 1 ==> j <= n - 1 ==> i <= n;\nloop invariant i7: i <= n - 1 ==> j <= n - 1 ==> j <= n;\nloop invariant i8: i <= n - 1 ==> j <= n - 1 ==> i <= n - 1;\nloop invariant i9: i <= n - 1 ==> j <= n - 1 ==> j <= n - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 158: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= n <= SIZE;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: (i % 3) == 0 ==> (i >= 0);\nloop invariant i4: (i % 3) == 0 ==> (i <= n);\nloop invariant i5: (i % 3) == 0 ==> (i % 3) == 0;\nloop invariant i6: 1 <= i <= n;\nloop invariant i7: i%3 == 0;\nloop invariant i8: i % 3 == 0;\nloop invariant i9: j >= 0;\nloop invariant i10: j <= n;\nloop invariant i11: i <= n;\nloop invariant i12: i >= 0;\nloop invariant i13: (i%3) == 0;\nloop invariant i14: 0 <= j <= n;\nloop invariant i15: ((i % 3) == 0);\nloop invariant i16: ((j % 3) == 0);\nloop invariant i17: ((i - n) % 3 == 0);\nloop invariant i18: ((j - n) % 3 == 0);\nloop invariant i19: j == 0;\nloop invariant i20: 0 <= j <= i;\nloop invariant i21: i%3 == 0 ==> i >= 3;\nloop invariant i22: i%3 == 1 ==> i >= 1;\nloop invariant i23: i%3 == 2 ==> i >= 2;\nloop invariant i24: i%6 == 0 ==> i >= 6;\nloop invariant i25: i%6 == 1 ==> i >= 1;\nloop invariant i26: i%6 == 2 ==> i >= 2;\nloop invariant i27: i%6 == 3 ==> i >= 3;\nloop invariant i28: i%6 == 4 ==> i >= 4;\nloop invariant i29: i%6 == 5 ==> i >= 5;\nloop invariant i30: i%6 == 0 ==> i%3 == 0;\nloop invariant i31: i%6 == 1 ==> i%3 == 0;\nloop invariant i32: i%6 == 2 ==> i%3 == 0;\nloop invariant i33: i%6 == 3 ==> i%3 == 0;\nloop invariant i34: i%6 == 4 ==> i%3 == 0;\nloop invariant i35: i%6 == 5 ==> i%3 == 0;\nloop invariant i36: i%6 == 0 ==> i%2 == 0;\nloop invariant i37: i%6 == 1 ==> i%2 == 1;\nloop invariant i38: i%6 == 2 ==> i%2 == 0;\nloop invariant i39: i%6 == 3 ==> i%2 == 1;\nloop invariant i40: i%6 == 4 ==> i%2 == 0;\nloop invariant i41: i%6 == 5 ==> i%2 == 1;\nloop invariant i42: i%6 == 0 ==> i%5 == 0;\nloop invariant i43: i%6 == 1 ==> i%5 == 1;\nloop invariant i44: i%6 == 2 ==> i%5 == 2;\nloop invariant i45: i%6 == 3 ==> i%5 == 3;\nloop invariant i46: i%6 == 4 ==> i%5 == 4;\nloop invariant i47: i%6 == 5 ==> i%5 == 0;\nloop invariant i48: i%6 == 0 ==> i%4 == 0;\nloop invariant i49: i%6 == 1 ==> i%4 == 1;\nloop invariant i50: i%6 == 2 ==> i%4 == 2;\nloop invariant i51: i%6 == 3 ==> i%4 == 3;\nloop invariant i52: i%6 == 4 ==> i%4 == 0;\nloop invariant i53: i%6 == 5 ==> i%4 == 1;\nloop invariant i54: i%6 == 0 ==> i%7 == 0;\nloop invariant i55: i%6 == 1 ==> i%7 == 1;\nloop invariant i56: i%6 == 2 ==> i%7 == 2;\nloop invariant i57: i%6 == 3 ==> i%7 == 3;\nloop invariant i58: i%6 == 4 ==> i%7 == 4;\nloop invariant i59: i%6 == 5 ==> i%7 == 5;\nloop invariant i60: i%6 == 0 ==> i%8 == 0;\nloop invariant i61: i%6 == 1 ==> i%8 == 1;\nloop invariant i62: i%6 == 2 ==> i%8 == 2;\nloop invariant i63: i%6 == 3 ==> i%8 == 3;\nloop invariant i64: i%6 == 4 ==> i%8 == 4;\nloop invariant i65: i%6 == 5 ==> i%8 == 5;\nloop invariant i66: i%6 == 0 ==> i%9 == 0;\nloop invariant i67: i%6 == 1 ==> i%9 == 1;\nloop invariant i68: i%6 == 2 ==> i%9 == 2;\nloop invariant i69: i%6 == 3 ==> i%9 == 3;\nloop invariant i70: i%6 == 4 ==> i%9 == 4;\nloop invariant i71: i%6 == 5 ==> i%9 == 5;\nloop invariant i72: i%6 == 0 ==> i%10 == 0;\nloop invariant i73: i%6 == 1 ==> i%10 == 1;\nloop invariant i74: i%6 == 2 ==> i%10 == 2;\nloop invariant i75: i%6 == 3 ==> i%10 == 3;\nloop invariant i76: i%6 == 4 ==> i%10 == 4;\nloop invariant i77: i%6 == 5 ==> i%10 == 5;\nloop invariant i78: i%6 == 0 ==> i%11 == 0;\nloop invariant i79: i%6 == 1 ==> i%11 == 1;\nloop invariant i80: i%6 == 2 ==> i%11 == 2;\nloop invariant i81: (i%3) == 0 ==> (i <= n);\nloop invariant i82: (i%3) == 0 ==> (i >= 0);\nloop invariant i83: (i%3) == 0 ==> (j <= n);\nloop invariant i84: (i%3) == 0 ==> (j >= 0);\nloop invariant i85: (i%3) == 0 ==> (i%3) == 0;\nloop invariant i86: 0 <= i <= (n + 1);\nloop invariant i87: 0 <= i;\nloop invariant i88: 3*i <= j <= 6*i;\nloop invariant i89: (i%3) != 0 ==> (i%3) != 0;\nloop invariant i90: i >= n ==> (i%3) == 0;\nloop invariant i91: i < n ==> (i%3) != 0;\nloop invariant i92: i%3 == (i%3) ==> i%3 == 0;\nloop invariant i93: i%3 == (i%3) ==> i%3 == 3;\nloop invariant i94: i%3 == (i%3) ==> i%3 == 6;\nloop invariant i95: i%6 == i%3 ==> i%6 == 0;\nloop invariant i96: i%6 == i%3 ==> i%6 == 3;\nloop invariant i97: i%6 == i%3 ==> i%6 == 6;\nloop invariant i98: i%9 == i%6 ==> i%9 == 0;\nloop invariant i99: i%9 == i%6 ==> i%9 == 3;\nloop invariant i100: i%9 == i%6 ==> i%9 == 6;\nloop invariant i101: i%12 == i%9 ==> i%12 == 0;\nloop invariant i102: i%12 == i%9 ==> i%12 == 3;\nloop invariant i103: i%12 == i%9 ==> i%12 == 6;\nloop invariant i104: i%15 == i%12 ==> i%15 == 0;\nloop invariant i105: i%15 == i%12 ==> i%15 == 3;\nloop invariant i106: i%15 == i%12 ==> i%15 == 6;\nloop invariant i107: i%18 == i%15 ==> i%18 == 0;\nloop invariant i108: i%18 == i%15 ==> i%18 == 3;\nloop invariant i109: i%18 == i%15 ==> i%18 == 6;\nloop invariant i110: i%21 == i%18 ==> i%21 == 0;\nloop invariant i111: i%21 == i%18 ==> i%21 == 3;\nloop invariant i112: i%21 == i%18 ==> i%21 == 6;\nloop invariant i113: i%24 == i%21 ==> i%24 == 0;\nloop invariant i114: i%24 == i%21 ==> i%24 == 3;\nloop invariant i115: i%24 == i%21 ==> i%24 == 6;\nloop invariant i116: i%27 == i%24 ==> i%27 == 0;\nloop invariant i117: i%27 == i%24 ==> i%27 == 3;\nloop invariant i118: i%27 == i%24 ==> i%27 == 6;\nloop invariant i119: i%30 == i%27 ==> i%30 == 0;\nloop invariant i120: i%30 == i%27 ==> i%30 == 3;\nloop invariant i121: i%30 == i%27 ==> i%30 == 6;\nloop invariant i122: i%33 == i%30 ==> i%33 == 0;\nloop invariant i123: i%33 == i%30 ==> i%33 == 3;\nloop invariant i124: i%33 == i%30 ==> i%33 == 6;\nloop invariant i125: i%36 == i%33 ==> i%36 == 0;\nloop invariant i126: i%36 == i%33 ==> i%36 == 3;\nloop invariant i127: i%36 == i%33 ==> i%36 == 6;\nloop invariant i128: i%39 == i%36 ==> i%39 == 0;\nloop invariant i129: i%39 == i%36 ==> i%39 == 3;\nloop invariant i130: i%39 == i%36 ==> i%39 == 6;\nloop invariant i131: i%42 == i%39 ==> i%42 == 0;\nloop invariant i132: i%42 == i%39 ==> i%42 == 3;\nloop invariant i133: i%42 == i%39 ==> i%42 == 6;\nloop invariant i134: i%45 == i%42 ==> i%45 == 0;\nloop invariant i135: i%45 == i%42 ==> i%45 == 3;\nloop invariant i136: i%45 == i%42 ==> i%45 == 6;\nloop invariant i137: i%48 == i%45 ==> i%48 == 0;\nloop invariant i138: i%48 == i%45 ==> i%48 == 3;\nloop invariant i139: i%48 == i%45 ==> i%48 == 6;\nloop invariant i140: i%51 == i%48 ==> i%51 == 0;\nloop invariant i141: i%51 == i%48 ==> i%51 == 3;\nloop invariant i142: if (i % 3 == 0) then (i >= 3) else (i < 3);\nloop invariant i143: if (i % 3 == 0) then (i + 6 <= n) else (i + 3 <= n);\nloop invariant i144: if (i % 3 == 0) then (i + 6 >= 0) else (i + 3 >= 0);\nloop invariant i145: i <= n - 1 ==> j <= n - 1;\nloop invariant i146: i <= n - 1 ==> j <= n - 1 ==> i <= n;\nloop invariant i147: i <= n - 1 ==> j <= n - 1 ==> j <= n;\nloop invariant i148: i <= n - 1 ==> j <= n - 1 ==> i <= n - 1;\nloop invariant i149: i <= n - 1 ==> j <= n - 1 ==> j <= n - 1;\nloop invariant i150: i <= n - 1 ==> j <= n - 1 ==> i <= n - 2;\nloop invariant i151: i <= n - 1 ==> j <= n - 1 ==> j <= n - 2;\nloop invariant i152: i <= n - 1 ==> j <= n - 1 ==> i <= n - 3;\nloop invariant i153: i <= n - 1 ==> j <= n - 1 ==> j <= n - 3;\nloop invariant i154: i <= n - 1 ==> j <= n - 1 ==> i <= n - 4;\nloop invariant i155: i <= n - 1 ==> j <= n - 1 ==> j <= n - 4;\nloop invariant i156: i <= n - 1 ==> j <= n - 1 ==> i <= n - 5;\nloop invariant i157: i <= n - 1 ==> j <= n - 1 ==> j <= n - 5;\nloop invariant i158: i <= n - 1 ==> j <= n - 1 ==> i <= n - 6;\nloop invariant i159: i <= n - 1 ==> j <= n - 1 ==> j <= n - 6;\nloop invariant i160: i <= n - 1 ==> j <= n - 1 ==> i <= n - 7;\nloop invariant i161: i <= n - 1 ==> j <= n - 1 ==> j <= n - 7;\nloop invariant i162: i <= n - 1 ==> j <= n - 1 ==> i <= n - 8;\nloop invariant i163: i <= n - 1 ==> j <= n - 1 ==> j <= n - 8;\nloop invariant i164: i <= n - 1 ==> j <= n - 1 ==> i <= n - 9;\nloop invariant i165: i <= n - 1 ==> j <= n - 1 ==> j <= n - 9;\nloop invariant i166: i <= n - 1 ==> j <= n - 1 ==> i <= n - 10;\nloop invariant i167: i <= n - 1 ==> j <= n - 1 ==> j <= n - 10;\nloop invariant i168: i <= n - 1 ==> j <= n - 1 ==> i <= n - 11;\nloop invariant i169: i <= n - 1 ==> j <= n - 1 ==> j <= n - 11;\nloop invariant i170: i <= n - 1 ==> j <= n - 1 ==> i <= n - 12;\nloop invariant i171: i <= n - 1 ==> j <= n - 1 ==> j <= n - 12;\nloop invariant i172: i <= n - 1 ==> j <= n - 1 ==> i <= n - 13;\nloop invariant i173: i <= n - 1 ==> j <= n - 1 ==> j <= n - 13;\nloop invariant i174: i <= n - 1 ==> j <= n - 1 ==> i <= n - 14;\nloop invariant i175: i <= n - 1 ==> j <= n - 1 ==> j <= n - 14;\nloop invariant i176: i <= n - 1 ==> j <= n - 1 ==> i <= n - 15;\nloop invariant i177: i <= n - 1 ==> j <= n - 1 ==> j <= n - 15;\nloop invariant i178: i <= n - 1 ==> j <= n - 1 ==> i <= n - 16;\nloop invariant i179: i <= n - 1 ==> j <= n - 1 ==> j <= n - 16;\nloop invariant i180: i <= n - 1 ==> j <= n - 1 ==> i <= n - 17;\nloop invariant i181: i <= n - 1 ==> j <= n - 1 ==> j <= n - 17;\nloop invariant i182: i <= n - 1 ==> j <= n - 1 ==> i <= n - 18;\nloop invariant i183: i <= n - 1 ==> j <= n - 1 ==> j <= n - 18;\nloop invariant i184: i <= n - 1 ==> j <= n - 1 ==> i <= n - 19;\nloop invariant i185: i <= n - 1 ==> j <= n - 1 ==> j <= n - 19;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 47,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n\nloop invariant i3: (i % 3) == 0 ==> (i >= 0);\n\nloop invariant i5: (i % 3) == 0 ==> (i % 3) == 0;\n\nloop invariant i7: i%3 == 0;\nloop invariant i8: i % 3 == 0;\nloop invariant i9: j >= 0;\n\n\nloop invariant i12: i >= 0;\nloop invariant i13: (i%3) == 0;\n\nloop invariant i15: ((i % 3) == 0);\nloop invariant i16: ((j % 3) == 0);\n\n\nloop invariant i19: j == 0;\nloop invariant i20: 0 <= j <= i;\n\nloop invariant i22: i%3 == 1 ==> i >= 1;\nloop invariant i23: i%3 == 2 ==> i >= 2;\n\nloop invariant i25: i%6 == 1 ==> i >= 1;\nloop invariant i26: i%6 == 2 ==> i >= 2;\nloop invariant i27: i%6 == 3 ==> i >= 3;\nloop invariant i28: i%6 == 4 ==> i >= 4;\nloop invariant i29: i%6 == 5 ==> i >= 5;\nloop invariant i30: i%6 == 0 ==> i%3 == 0;\nloop invariant i31: i%6 == 1 ==> i%3 == 0;\nloop invariant i32: i%6 == 2 ==> i%3 == 0;\nloop invariant i33: i%6 == 3 ==> i%3 == 0;\nloop invariant i34: i%6 == 4 ==> i%3 == 0;\nloop invariant i35: i%6 == 5 ==> i%3 == 0;\nloop invariant i36: i%6 == 0 ==> i%2 == 0;\nloop invariant i37: i%6 == 1 ==> i%2 == 1;\nloop invariant i38: i%6 == 2 ==> i%2 == 0;\nloop invariant i39: i%6 == 3 ==> i%2 == 1;\nloop invariant i40: i%6 == 4 ==> i%2 == 0;\nloop invariant i41: i%6 == 5 ==> i%2 == 1;\n\nloop invariant i43: i%6 == 1 ==> i%5 == 1;\nloop invariant i44: i%6 == 2 ==> i%5 == 2;\n\nloop invariant i46: i%6 == 4 ==> i%5 == 4;\nloop invariant i47: i%6 == 5 ==> i%5 == 0;\n\nloop invariant i49: i%6 == 1 ==> i%4 == 1;\nloop invariant i50: i%6 == 2 ==> i%4 == 2;\n\nloop invariant i52: i%6 == 4 ==> i%4 == 0;\nloop invariant i53: i%6 == 5 ==> i%4 == 1;\n\nloop invariant i55: i%6 == 1 ==> i%7 == 1;\nloop invariant i56: i%6 == 2 ==> i%7 == 2;\n\nloop invariant i58: i%6 == 4 ==> i%7 == 4;\nloop invariant i59: i%6 == 5 ==> i%7 == 5;\n\nloop invariant i61: i%6 == 1 ==> i%8 == 1;\nloop invariant i62: i%6 == 2 ==> i%8 == 2;\n\nloop invariant i64: i%6 == 4 ==> i%8 == 4;\nloop invariant i65: i%6 == 5 ==> i%8 == 5;\n\nloop invariant i67: i%6 == 1 ==> i%9 == 1;\nloop invariant i68: i%6 == 2 ==> i%9 == 2;\n\nloop invariant i70: i%6 == 4 ==> i%9 == 4;\nloop invariant i71: i%6 == 5 ==> i%9 == 5;\n\nloop invariant i73: i%6 == 1 ==> i%10 == 1;\nloop invariant i74: i%6 == 2 ==> i%10 == 2;\n\nloop invariant i76: i%6 == 4 ==> i%10 == 4;\nloop invariant i77: i%6 == 5 ==> i%10 == 5;\n\nloop invariant i79: i%6 == 1 ==> i%11 == 1;\nloop invariant i80: i%6 == 2 ==> i%11 == 2;\n\nloop invariant i82: (i%3) == 0 ==> (i >= 0);\n\nloop invariant i84: (i%3) == 0 ==> (j >= 0);\nloop invariant i85: (i%3) == 0 ==> (i%3) == 0;\n\nloop invariant i87: 0 <= i;\n\nloop invariant i89: (i%3) != 0 ==> (i%3) != 0;\nloop invariant i90: i >= n ==> (i%3) == 0;\n\nloop invariant i92: i%3 == (i%3) ==> i%3 == 0;\n\n\nloop invariant i95: i%6 == i%3 ==> i%6 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i145: i <= n - 1 ==> j <= n - 1;\nloop invariant i146: i <= n - 1 ==> j <= n - 1 ==> i <= n;\nloop invariant i147: i <= n - 1 ==> j <= n - 1 ==> j <= n;\nloop invariant i148: i <= n - 1 ==> j <= n - 1 ==> i <= n - 1;\nloop invariant i149: i <= n - 1 ==> j <= n - 1 ==> j <= n - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/iftelse.c"
        ],
        "skipped": [],
        "total": 174,
        "success_count": 153,
        "failure_count": 21,
        "success_rate": 0.8793103448275862
    }
}