{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/85.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant y <= 0;\nloop invariant x <= -15000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= -15000 + y;\nloop invariant y > 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 25000;\nloop invariant x >= (y * (y + 1) / 2) - 15000;\nloop invariant x <= (y * (y - 1) / 2) - 15000;\nloop invariant (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\nloop invariant (y > 0) ==> (x >= (y * (y + 1) / 2) - 15000);\n*/\n```",
            "```\n/*@\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y > 0;\nloop invariant x = 0;\nloop invariant y = 1;\n*/\n```",
            "```\n/*@\nloop invariant y > 0;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x < 0;\nloop invariant y <= 100000;\nloop invariant x >= -15000;\nloop invariant y > 0;\nloop invariant x >= -15000;\nloop invariant y >= 1;\nloop invariant x < 0;\nloop invariant y <= 100000;\nloop invariant x >= (y - 1) * y / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; loop invariant x <= -15000; loop invariant x <= -15000 + y; loop invariant y <= x + 15000; loop invariant y <= x + 15000 - 1; loop invariant y <= x + 15000 - 2; loop invariant y <= x + 15000 - 3; loop invariant y <= x + 15000 - 4; loop invariant y <= x + 15000 - 5; loop invariant y <= x + 15000 - 6; loop invariant y <= x + 15000 - 7; loop invariant y <= x + 15000 - 8; loop invariant y <= x + 15000 - 9; loop invariant y <= x + 15000 - 10; loop invariant y <= x + 15000 - 11; loop invariant y <= x + 15000 - 12; loop invariant y <= x + 15000 - 13; loop invariant y <= x + 15000 - 14; loop invariant y <= x + 15000 - 15; loop invariant y <= x + 15000 - 16; loop invariant y <= x + 15000 - 17; loop invariant y <= x + 15000 - 18; loop invariant y <= x + 15000 - 19; loop invariant y <= x + 15000 - 20; loop invariant y <= x + 15000 - 21; loop invariant y <= x + 15000 - 22; loop invariant y <= x + 15000 - 23; loop invariant y <= x + 15000 - 24; loop invariant y <= x + 15000 - 25; loop invariant y <= x + 15000 - 26; loop invariant y <= x + 15000 - 27; loop invariant y <= x + 15000 - 28; loop invariant y <= x + 15000 - 29; loop invariant y <= x + 15000 - 30; loop invariant y <= x + 15000 - 31; loop invariant y <= x + 15000 - 32; loop invariant y <= x + 15000 - 33; loop invariant y <= x + 15000 - 34; loop invariant y <= x + 15000 - 35; loop invariant y <= x + 15000 - 36; loop invariant y <= x + 15000 - 37; loop invariant y <= x + 15000 - 38; loop invariant y <= x + 15000 - 39; loop invariant y <= x + 15000 - 40; loop invariant y <= x + 15000 - 41; loop invariant y <= x + 15000 - 42; loop invariant y <= x + 15000 - 43; loop invariant y <= x + 15000 - 44; loop invariant y <= x + 15000 - 45; loop invariant y <= x + 15000 - 46; loop invariant y <= x + 15000 - 47; loop invariant y <= x + 15000 - 48; loop invariant y <= x + 15000 - 49; loop invariant y <= x + 15000 - 50; loop invariant y <= x + 15000 - 51; loop invariant y <= x + 15000 - 52; loop invariant y <= x + 15000 - 53; loop invariant y <= x + 15000 - 54; loop invariant y <= x + 15000 - 55; loop invariant y <= x + 15000 - 56;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 0; loop invariant y > 0; loop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -15000;\nloop invariant y > 0;\nloop invariant y >= 1;\nloop invariant y <= 100000;\nloop invariant x >= -15000 + y;\nloop invariant x >= y;\nloop invariant x >= -15000 + (y - 1) * y / 2;\nloop invariant x >= -15000 + y - 1;\nloop invariant x >= -15000 + y;\nloop invariant x >= -15000 + y + 1;\nloop invariant x >= -15000 + y + 2;\nloop invariant x >= -15000 + y + 3;\nloop invariant x >= -15000 + y + 4;\nloop invariant x >= -15000 + y + 5;\nloop invariant x >= -15000 + y + 6;\nloop invariant x >= -15000 + y + 7;\nloop invariant x >= -15000 + y + 8;\nloop invariant x >= -15000 + y + 9;\nloop invariant x >= -15000 + y + 10;\nloop invariant x >= -15000 + y + 11;\nloop invariant x >= -15000 + y + 12;\nloop invariant x >= -15000 + y + 13;\nloop invariant x >= -15000 + y + 14;\nloop invariant x >= -15000 + y + 15;\nloop invariant x >= -15000 + y + 16;\nloop invariant x >= -15000 + y + 17;\nloop invariant x >= -15000 + y + 18;\nloop invariant x >= -15000 + y + 19;\nloop invariant x >= -15000 + y + 20;\nloop invariant x >= -15000 + y + 21;\nloop invariant x >= -15000 + y + 22;\nloop invariant x >= -15000 + y + 23;\nloop invariant x >= -15000 + y + 24;\nloop invariant x >= -15000 + y + 25;\nloop invariant x >= -15000 + y + 26;\nloop invariant x >= -15000 + y + 27;\nloop invariant x >= -15000 + y + 28;\nloop invariant x >= -15000 + y + 29;\nloop invariant x >= -15000 + y + 30;\nloop invariant x >= -15000 + y + 31;\nloop invariant x >= -15000 + y + 32;\nloop invariant x >= -15000 + y + 33;\nloop invariant x >= -15000 + y + 34;\nloop invariant x >= -15000 + y + 35;\nloop invariant x >= -15000 + y + 36;\nloop invariant x >= -15000 + y + 37;\nloop invariant x >= -15000 + y + 38;\nloop invariant x >= -15000 + y + 39;\nloop invariant x >= -15000 + y + 40;\nloop invariant x >= -15000 + y + 41;\nloop invariant x >= -15000 + y + 42;\nloop invariant x >= -15000 + y + 43;\nloop invariant x >= -15000 + y + 44;\nloop invariant x >= -15000 + y + 45;\nloop invariant x >= -15000 + y + 46;\nloop invariant x >= -15000 + y + 47;\nloop invariant x >= -15000 + y + 48;\nloop invariant x >= -15000 + y + 49;\nloop invariant x >= -15000 + y + 50;\nloop invariant x >= -15000 + y + 51;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= -15000;\nloop invariant y >= 1;\nloop invariant y <= 15000;\nloop invariant x == (x + y) - y;\nloop invariant x + y == y + x;\nloop invariant x + y == x + y;\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant y > 0; (This is another implication, because it holds even after the loop termination) loop invariant x = (x + y) * y / 2; (This is a simplified version of the invariant) loop invariant x = (x + y) * y / 2 ==> y > 0;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 < y <= x;\nloop invariant x >= -15000;\nloop invariant y = x + 15000;\nloop invariant y > 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant x < 15000;\nloop invariant y = x + 15000;\nloop invariant y > 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant x < 15000;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y <= 0;\nloop invariant x <= -15000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= -15000 + y;\nloop invariant y > 0;\nloop invariant x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y <= 0 is preserved but not established.\nloop invariant x <= -15000 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x >= -15000 + y is partially proven to be inductive.\nloop invariant y > 0 is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 25000;\nloop invariant x >= (y * (y + 1) / 2) - 15000;\nloop invariant x <= (y * (y - 1) / 2) - 15000;\nloop invariant (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\nloop invariant (y > 0) ==> (x >= (y * (y + 1) / 2) - 15000);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 25000 is preserved but not established.\nloop invariant x >= (y * (y + 1) / 2) - 15000 is neither established nor preserved.\nloop invariant x <= (y * (y - 1) / 2) - 15000 is partially proven to be inductive.\nloop invariant (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000) is partially proven to be inductive.\nloop invariant (y > 0) ==> (x >= (y * (y + 1) / 2) - 15000) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\nloop invariant i3: x <= (y * (y - 1) / 2) - 15000;\nloop invariant i4: (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y > 0;\nloop invariant x = 0;\nloop invariant y = 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x < 0;\nloop invariant y <= 100000;\nloop invariant x >= -15000;\nloop invariant y > 0;\nloop invariant x >= -15000;\nloop invariant y >= 1;\nloop invariant x < 0;\nloop invariant y <= 100000;\nloop invariant x >= (y - 1) * y / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y > 0 is preserved but not established.\nloop invariant x >= (y - 1) * y / 2 is preserved but not established.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x >= -15000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x <= -15000; loop invariant x <= -15000 + y; loop invariant y <= x + 15000; loop invariant y <= x + 15000 - 1; loop invariant y <= x + 15000 - 2; loop invariant y <= x + 15000 - 3; loop invariant y <= x + 15000 - 4; loop invariant y <= x + 15000 - 5; loop invariant y <= x + 15000 - 6; loop invariant y <= x + 15000 - 7; loop invariant y <= x + 15000 - 8; loop invariant y <= x + 15000 - 9; loop invariant y <= x + 15000 - 10; loop invariant y <= x + 15000 - 11; loop invariant y <= x + 15000 - 12; loop invariant y <= x + 15000 - 13; loop invariant y <= x + 15000 - 14; loop invariant y <= x + 15000 - 15; loop invariant y <= x + 15000 - 16; loop invariant y <= x + 15000 - 17; loop invariant y <= x + 15000 - 18; loop invariant y <= x + 15000 - 19; loop invariant y <= x + 15000 - 20; loop invariant y <= x + 15000 - 21; loop invariant y <= x + 15000 - 22; loop invariant y <= x + 15000 - 23; loop invariant y <= x + 15000 - 24; loop invariant y <= x + 15000 - 25; loop invariant y <= x + 15000 - 26; loop invariant y <= x + 15000 - 27; loop invariant y <= x + 15000 - 28; loop invariant y <= x + 15000 - 29; loop invariant y <= x + 15000 - 30; loop invariant y <= x + 15000 - 31; loop invariant y <= x + 15000 - 32; loop invariant y <= x + 15000 - 33; loop invariant y <= x + 15000 - 34; loop invariant y <= x + 15000 - 35; loop invariant y <= x + 15000 - 36; loop invariant y <= x + 15000 - 37; loop invariant y <= x + 15000 - 38; loop invariant y <= x + 15000 - 39; loop invariant y <= x + 15000 - 40; loop invariant y <= x + 15000 - 41; loop invariant y <= x + 15000 - 42; loop invariant y <= x + 15000 - 43; loop invariant y <= x + 15000 - 44; loop invariant y <= x + 15000 - 45; loop invariant y <= x + 15000 - 46; loop invariant y <= x + 15000 - 47; loop invariant y <= x + 15000 - 48; loop invariant y <= x + 15000 - 49; loop invariant y <= x + 15000 - 50; loop invariant y <= x + 15000 - 51; loop invariant y <= x + 15000 - 52; loop invariant y <= x + 15000 - 53; loop invariant y <= x + 15000 - 54; loop invariant y <= x + 15000 - 55; loop invariant y <= x + 15000 - 56;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y; loop invariant x <= -15000; loop invariant x <= -15000 + y; loop invariant y <= x + 15000; loop invariant y <= x + 15000 - 1; loop invariant y <= x + 15000 - 2; loop invariant y <= x + 15000 - 3; loop invariant y <= x + 15000 - 4; loop invariant y <= x + 15000 - 5; loop invariant y <= x + 15000 - 6; loop invariant y <= x + 15000 - 7; loop invariant y <= x + 15000 - 8; loop invariant y <= x + 15000 - 9; loop invariant y <= x + 15000 - 10; loop invariant y <= x + 15000 - 11; loop invariant y <= x + 15000 - 12; loop invariant y <= x + 15000 - 13; loop invariant y <= x + 15000 - 14; loop invariant y <= x + 15000 - 15; loop invariant y <= x + 15000 - 16; loop invariant y <= x + 15000 - 17; loop invariant y <= x + 15000 - 18; loop invariant y <= x + 15000 - 19; loop invariant y <= x + 15000 - 20; loop invariant y <= x + 15000 - 21; loop invariant y <= x + 15000 - 22; loop invariant y <= x + 15000 - 23; loop invariant y <= x + 15000 - 24; loop invariant y <= x + 15000 - 25; loop invariant y <= x + 15000 - 26; loop invariant y <= x + 15000 - 27; loop invariant y <= x + 15000 - 28; loop invariant y <= x + 15000 - 29; loop invariant y <= x + 15000 - 30; loop invariant y <= x + 15000 - 31; loop invariant y <= x + 15000 - 32; loop invariant y <= x + 15000 - 33; loop invariant y <= x + 15000 - 34; loop invariant y <= x + 15000 - 35; loop invariant y <= x + 15000 - 36; loop invariant y <= x + 15000 - 37; loop invariant y <= x + 15000 - 38; loop invariant y <= x + 15000 - 39; loop invariant y <= x + 15000 - 40; loop invariant y <= x + 15000 - 41; loop invariant y <= x + 15000 - 42; loop invariant y <= x + 15000 - 43; loop invariant y <= x + 15000 - 44; loop invariant y <= x + 15000 - 45; loop invariant y <= x + 15000 - 46; loop invariant y <= x + 15000 - 47; loop invariant y <= x + 15000 - 48; loop invariant y <= x + 15000 - 49; loop invariant y <= x + 15000 - 50; loop invariant y <= x + 15000 - 51; loop invariant y <= x + 15000 - 52; loop invariant y <= x + 15000 - 53; loop invariant y <= x + 15000 - 54; loop invariant y <= x + 15000 - 55; loop invariant y <= x + 15000 - 56 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0; loop invariant y > 0; loop invariant x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x < 0; loop invariant y > 0; loop invariant x >= y is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -15000;\nloop invariant y > 0;\nloop invariant y >= 1;\nloop invariant y <= 100000;\nloop invariant x >= -15000 + y;\nloop invariant x >= y;\nloop invariant x >= -15000 + (y - 1) * y / 2;\nloop invariant x >= -15000 + y - 1;\nloop invariant x >= -15000 + y;\nloop invariant x >= -15000 + y + 1;\nloop invariant x >= -15000 + y + 2;\nloop invariant x >= -15000 + y + 3;\nloop invariant x >= -15000 + y + 4;\nloop invariant x >= -15000 + y + 5;\nloop invariant x >= -15000 + y + 6;\nloop invariant x >= -15000 + y + 7;\nloop invariant x >= -15000 + y + 8;\nloop invariant x >= -15000 + y + 9;\nloop invariant x >= -15000 + y + 10;\nloop invariant x >= -15000 + y + 11;\nloop invariant x >= -15000 + y + 12;\nloop invariant x >= -15000 + y + 13;\nloop invariant x >= -15000 + y + 14;\nloop invariant x >= -15000 + y + 15;\nloop invariant x >= -15000 + y + 16;\nloop invariant x >= -15000 + y + 17;\nloop invariant x >= -15000 + y + 18;\nloop invariant x >= -15000 + y + 19;\nloop invariant x >= -15000 + y + 20;\nloop invariant x >= -15000 + y + 21;\nloop invariant x >= -15000 + y + 22;\nloop invariant x >= -15000 + y + 23;\nloop invariant x >= -15000 + y + 24;\nloop invariant x >= -15000 + y + 25;\nloop invariant x >= -15000 + y + 26;\nloop invariant x >= -15000 + y + 27;\nloop invariant x >= -15000 + y + 28;\nloop invariant x >= -15000 + y + 29;\nloop invariant x >= -15000 + y + 30;\nloop invariant x >= -15000 + y + 31;\nloop invariant x >= -15000 + y + 32;\nloop invariant x >= -15000 + y + 33;\nloop invariant x >= -15000 + y + 34;\nloop invariant x >= -15000 + y + 35;\nloop invariant x >= -15000 + y + 36;\nloop invariant x >= -15000 + y + 37;\nloop invariant x >= -15000 + y + 38;\nloop invariant x >= -15000 + y + 39;\nloop invariant x >= -15000 + y + 40;\nloop invariant x >= -15000 + y + 41;\nloop invariant x >= -15000 + y + 42;\nloop invariant x >= -15000 + y + 43;\nloop invariant x >= -15000 + y + 44;\nloop invariant x >= -15000 + y + 45;\nloop invariant x >= -15000 + y + 46;\nloop invariant x >= -15000 + y + 47;\nloop invariant x >= -15000 + y + 48;\nloop invariant x >= -15000 + y + 49;\nloop invariant x >= -15000 + y + 50;\nloop invariant x >= -15000 + y + 51;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -15000 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant x >= -15000 + y is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= -15000 + (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x >= -15000 + y - 1 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 1 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 2 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 3 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 4 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 5 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 6 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 7 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 8 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 9 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 10 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 11 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 12 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 13 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 14 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 15 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 16 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 17 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 18 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 19 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 20 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 21 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 22 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 23 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 24 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 25 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 26 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 27 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 28 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 29 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 30 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 31 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 32 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 33 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 34 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 35 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 36 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 37 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 38 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 39 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 40 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 41 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 42 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 43 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 44 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 45 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 46 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 47 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 48 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 49 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 50 is partially proven to be inductive.\nloop invariant x >= -15000 + y + 51 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= -15000;\nloop invariant y >= 1;\nloop invariant y <= 15000;\nloop invariant x == (x + y) - y;\nloop invariant x + y == y + x;\nloop invariant x + y == x + y;\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant y > 0 ==> (x >= y) ==> (x >= y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= -15000 is preserved but not established.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 15000 is partially proven to be inductive.\nloop invariant x == (x + y) - y is partially proven to be inductive.\nloop invariant x + y == y + x is partially proven to be inductive.\nloop invariant x + y == x + y is partially proven to be inductive.\nloop invariant y > 0 ==> (x >= y) ==> (x >= y) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\nloop invariant i4: x == (x + y) - y;\nloop invariant i5: x + y == y + x;\nloop invariant i6: x + y == x + y;\nloop invariant i7: y > 0 ==> (x >= y) ==> (x >= y);\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant y > 0; (This is another implication, because it holds even after the loop termination) loop invariant x = (x + y) * y / 2; (This is a simplified version of the invariant) loop invariant x = (x + y) * y / 2 ==> y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 < y <= x;\nloop invariant x >= -15000;\nloop invariant y = x + 15000;\nloop invariant y > 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant x < 15000;\nloop invariant y = x + 15000;\nloop invariant y > 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant x < 15000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\nloop invariant i1: y <= 0;\nloop invariant i2: x <= -15000;\nloop invariant i3: y >= 0;\nloop invariant i4: y <= 100000;\nloop invariant i5: x >= -15000 + y;\nloop invariant i6: y > 0;\nloop invariant i7: x >= y;\nloop invariant i8: 0 <= y <= 25000;\nloop invariant i9: x >= (y * (y + 1) / 2) - 15000;\nloop invariant i10: x <= (y * (y - 1) / 2) - 15000;\nloop invariant i11: (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\nloop invariant i12: (y > 0) ==> (x >= (y * (y + 1) / 2) - 15000);\nloop invariant i13: 0 <= x < 0;\nloop invariant i14: x = 0;\nloop invariant i15: y = 1;\nloop invariant i16: x >= (y - 1) * y / 2;\nloop invariant i17: y >= 1;\nloop invariant i18: x < 0;\nloop invariant i19: x >= -15000;\nloop invariant i20: 0 <= y; loop invariant x <= -15000; loop invariant x <= -15000 + y; loop invariant y <= x + 15000; loop invariant y <= x + 15000 - 1; loop invariant y <= x + 15000 - 2; loop invariant y <= x + 15000 - 3; loop invariant y <= x + 15000 - 4; loop invariant y <= x + 15000 - 5; loop invariant y <= x + 15000 - 6; loop invariant y <= x + 15000 - 7; loop invariant y <= x + 15000 - 8; loop invariant y <= x + 15000 - 9; loop invariant y <= x + 15000 - 10; loop invariant y <= x + 15000 - 11; loop invariant y <= x + 15000 - 12; loop invariant y <= x + 15000 - 13; loop invariant y <= x + 15000 - 14; loop invariant y <= x + 15000 - 15; loop invariant y <= x + 15000 - 16; loop invariant y <= x + 15000 - 17; loop invariant y <= x + 15000 - 18; loop invariant y <= x + 15000 - 19; loop invariant y <= x + 15000 - 20; loop invariant y <= x + 15000 - 21; loop invariant y <= x + 15000 - 22; loop invariant y <= x + 15000 - 23; loop invariant y <= x + 15000 - 24; loop invariant y <= x + 15000 - 25; loop invariant y <= x + 15000 - 26; loop invariant y <= x + 15000 - 27; loop invariant y <= x + 15000 - 28; loop invariant y <= x + 15000 - 29; loop invariant y <= x + 15000 - 30; loop invariant y <= x + 15000 - 31; loop invariant y <= x + 15000 - 32; loop invariant y <= x + 15000 - 33; loop invariant y <= x + 15000 - 34; loop invariant y <= x + 15000 - 35; loop invariant y <= x + 15000 - 36; loop invariant y <= x + 15000 - 37; loop invariant y <= x + 15000 - 38; loop invariant y <= x + 15000 - 39; loop invariant y <= x + 15000 - 40; loop invariant y <= x + 15000 - 41; loop invariant y <= x + 15000 - 42; loop invariant y <= x + 15000 - 43; loop invariant y <= x + 15000 - 44; loop invariant y <= x + 15000 - 45; loop invariant y <= x + 15000 - 46; loop invariant y <= x + 15000 - 47; loop invariant y <= x + 15000 - 48; loop invariant y <= x + 15000 - 49; loop invariant y <= x + 15000 - 50; loop invariant y <= x + 15000 - 51; loop invariant y <= x + 15000 - 52; loop invariant y <= x + 15000 - 53; loop invariant y <= x + 15000 - 54; loop invariant y <= x + 15000 - 55; loop invariant y <= x + 15000 - 56;\nloop invariant i21: 0 <= x < 0; loop invariant y > 0; loop invariant x >= y;\nloop invariant i22: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i23: 0 <= y <= 100000;\nloop invariant i24: x >= (1 + (y - 1) * y / 2);\nloop invariant i25: x >= -15000 + (y - 1) * y / 2;\nloop invariant i26: x >= -15000 + y - 1;\nloop invariant i27: x >= -15000 + y + 1;\nloop invariant i28: x >= -15000 + y + 2;\nloop invariant i29: x >= -15000 + y + 3;\nloop invariant i30: x >= -15000 + y + 4;\nloop invariant i31: x >= -15000 + y + 5;\nloop invariant i32: x >= -15000 + y + 6;\nloop invariant i33: x >= -15000 + y + 7;\nloop invariant i34: x >= -15000 + y + 8;\nloop invariant i35: x >= -15000 + y + 9;\nloop invariant i36: x >= -15000 + y + 10;\nloop invariant i37: x >= -15000 + y + 11;\nloop invariant i38: x >= -15000 + y + 12;\nloop invariant i39: x >= -15000 + y + 13;\nloop invariant i40: x >= -15000 + y + 14;\nloop invariant i41: x >= -15000 + y + 15;\nloop invariant i42: x >= -15000 + y + 16;\nloop invariant i43: x >= -15000 + y + 17;\nloop invariant i44: x >= -15000 + y + 18;\nloop invariant i45: x >= -15000 + y + 19;\nloop invariant i46: x >= -15000 + y + 20;\nloop invariant i47: x >= -15000 + y + 21;\nloop invariant i48: x >= -15000 + y + 22;\nloop invariant i49: x >= -15000 + y + 23;\nloop invariant i50: x >= -15000 + y + 24;\nloop invariant i51: x >= -15000 + y + 25;\nloop invariant i52: x >= -15000 + y + 26;\nloop invariant i53: x >= -15000 + y + 27;\nloop invariant i54: x >= -15000 + y + 28;\nloop invariant i55: x >= -15000 + y + 29;\nloop invariant i56: x >= -15000 + y + 30;\nloop invariant i57: x >= -15000 + y + 31;\nloop invariant i58: x >= -15000 + y + 32;\nloop invariant i59: x >= -15000 + y + 33;\nloop invariant i60: x >= -15000 + y + 34;\nloop invariant i61: x >= -15000 + y + 35;\nloop invariant i62: x >= -15000 + y + 36;\nloop invariant i63: x >= -15000 + y + 37;\nloop invariant i64: x >= -15000 + y + 38;\nloop invariant i65: x >= -15000 + y + 39;\nloop invariant i66: x >= -15000 + y + 40;\nloop invariant i67: x >= -15000 + y + 41;\nloop invariant i68: x >= -15000 + y + 42;\nloop invariant i69: x >= -15000 + y + 43;\nloop invariant i70: x >= -15000 + y + 44;\nloop invariant i71: x >= -15000 + y + 45;\nloop invariant i72: x >= -15000 + y + 46;\nloop invariant i73: x >= -15000 + y + 47;\nloop invariant i74: x >= -15000 + y + 48;\nloop invariant i75: x >= -15000 + y + 49;\nloop invariant i76: x >= -15000 + y + 50;\nloop invariant i77: x >= -15000 + y + 51;\nloop invariant i78: 1 <= x <= -15000;\nloop invariant i79: y <= 15000;\nloop invariant i80: x == (x + y) - y;\nloop invariant i81: x + y == y + x;\nloop invariant i82: x + y == x + y;\nloop invariant i83: y > 0 ==> (x >= y) ==> (x >= y);\nloop invariant i84: y > 0; (This is another implication, because it holds even after the loop termination) loop invariant x = (x + y) * y / 2; (This is a simplified version of the invariant) loop invariant x = (x + y) * y / 2 ==> y > 0;\nloop invariant i85: 0 < y <= x;\nloop invariant i86: y = x + 15000;\nloop invariant i87: y <= x;\nloop invariant i88: x >= 0;\nloop invariant i89: x < 15000;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x <= (y * (y - 1) / 2) - 15000;\nloop invariant i11: (y > 0) ==> (x <= (y * (y - 1) / 2) - 15000);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i80: x == (x + y) - y;\nloop invariant i81: x + y == y + x;\nloop invariant i82: x + y == x + y;\nloop invariant i83: y > 0 ==> (x >= y) ==> (x >= y);\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c",
            "../dataset/loop_invariants/code2inv/122.c",
            "../dataset/loop_invariants/code2inv/85.c"
        ],
        "skipped": [],
        "total": 21,
        "success_count": 6,
        "failure_count": 15,
        "success_rate": 0.2857142857142857
    }
}