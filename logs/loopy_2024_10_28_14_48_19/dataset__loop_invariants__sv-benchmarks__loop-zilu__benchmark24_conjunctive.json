{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  while (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i/2;\nloop invariant k >= n/2;\nloop invariant i % 2 == 0;\nloop invariant k >= 0;\nloop invariant i < n;\nloop invariant i % 2 == 0 ==> k >= 0;\nloop invariant (i >= 0) ==> (k >= i/2) ==> (k >= n/2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant i % 2 == 0;\nloop invariant k >= n - i;\nloop invariant k <= n;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= n - 1;\nloop invariant 0 <= i < n ==> k = n - 1;\nloop invariant i >= n ==> k >= n - 1;\nloop invariant i >= n ==> 2*k >= n - 1 ==> 2*(n - 1) >= n - 1 ==> n >= 1;\nloop invariant i >= n ==> n >= 1;\nloop invariant i >= n ==> n >= 1;\n*/\n```",
            "```\n/*@\nloop invariant k >= n - i;\nloop invariant i % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i is even;\nloop invariant k is odd;\nloop invariant k >= n;\nloop invariant 2*k >= n-1;\nloop invariant i = 2*k - (n-1);\nloop invariant i - k = n - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k == n - i;\nloop invariant i % 2 == 0;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant k >= n - 1;\nloop invariant k >= (n - 1) / 2;\nloop invariant k <= (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i % 2 == 0;\nloop invariant k == n - i;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant k >= n - 1;\nloop invariant k <= (n - 1) / 2;\nloop invariant k >= (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 2 == 0;\nloop invariant i <= 2*k+1;\nloop invariant k >= (n-1)/2;\nloop invariant k >= (n-2)/2 ==> i >= 2;\nloop invariant k >= (n-3)/2 ==> i >= 4;\nloop invariant k >= (n-4)/2 ==> i >= 6;\nloop invariant k >= (n-5)/2 ==> i >= 8;\nloop invariant k >= (n-6)/2 ==> i >= 10;\nloop invariant k >= (n-7)/2 ==> i >= 12;\nloop invariant k >= (n-8)/2 ==> i >= 14;\nloop invariant k >= (n-9)/2 ==> i >= 16;\nloop invariant k >= (n-10)/2 ==> i >= 18;\nloop invariant k >= (n-11)/2 ==> i >= 20;\nloop invariant k >= (n-12)/2 ==> i >= 22;\nloop invariant k >= (n-13)/2 ==> i >= 24;\nloop invariant k >= (n-14)/2 ==> i >= 26;\nloop invariant k >= (n-15)/2 ==> i >= 28;\nloop invariant k >= (n-16)/2 ==> i >= 30;\nloop invariant k >= (n-17)/2 ==> i >= 32;\nloop invariant k >= (n-18)/2 ==> i >= 34;\nloop invariant k >= (n-19)/2 ==> i >= 36;\nloop invariant k >= (n-20)/2 ==> i >= 38;\nloop invariant k >= (n-21)/2 ==> i >= 40;\nloop invariant k >= (n-22)/2 ==> i >= 42;\nloop invariant k >= (n-23)/2 ==> i >= 44;\nloop invariant k >= (n-24)/2 ==> i >= 46;\nloop invariant k >= (n-25)/2 ==> i >= 48;\nloop invariant k >= (n-26)/2 ==> i >= 50;\nloop invariant k >= (n-27)/2 ==> i >= 52;\nloop invariant k >= (n-28)/2 ==> i >= 54;\nloop invariant k >= (n-29)/2 ==> i >= 56;\nloop invariant k >= (n-30)/2 ==> i >= 58;\nloop invariant k >= (n-31)/2 ==> i >= 60;\nloop invariant k >= (n-32)/2 ==> i >= 62;\nloop invariant k >= (n-33)/2 ==> i >= 64;\nloop invariant k >= (n-34)/2 ==> i >= 66;\nloop invariant k >= (n-35)/2 ==> i >= 68;\nloop invariant k >= (n-36)/2 ==> i >= 70;\nloop invariant k >= (n-37)/2 ==> i >= 72;\nloop invariant k >= (n-38)/2 ==> i >= 74;\nloop invariant k >= (n-39)/2 ==> i >= 76;\nloop invariant k >= (n-40)/2 ==> i >= 78;\nloop invariant k >= (n-41)/2 ==> i >= 80;\nloop invariant k >= (n-42)/2 ==> i >= 82;\nloop invariant k >= (n-43)/2 ==> i >= 84;\nloop invariant k >= (n-44)/2 ==> i >= 86;\nloop invariant k >= (n-45)/2 ==> i >= 88;\nloop invariant k >= (n-46)/2 ==> i >= 90;\nloop invariant k >= (n-47)/2 ==> i >= 92;\nloop invariant k >= (n-48)/2 ==> i >= 94;\nloop invariant k >= (n-49)/2 ==> i >= 96;\nloop invariant k >= (n-50)/2 ==> i >= 98;\nloop invariant k >= (n-51)/2 ==> i >= 100;\nloop invariant k >= (n-52)/2 ==> i >= 102;\nloop invariant k >= (n-53)/2 ==> i >= 104;\nloop invariant k >= (n-54)/2 ==> i >= 106;\n*/\n```",
            "```\n/*@\nloop invariant i <= n;\nloop invariant k == n - i;\nloop invariant i % 2 == 0;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i%2 == 0;\nloop invariant k == n - i/2;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < n;\nloop invariant 0 <= k <= n;\nloop invariant n-1 <= 2*k;\nloop invariant n-1 <= 2*k ==> i == n;\nloop invariant n-1 <= 2*k ==> 2*k >= n-1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i%2==0;\nloop invariant k==n-i/2;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= n;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant n <= i - k;\nloop invariant n <= k - i;\nloop invariant n <= i;\nloop invariant n <= k;\nloop invariant i <= k;\nloop invariant k >= i;\nloop invariant n <= i + k;\nloop invariant i + k <= n;\nloop invariant n >= i;\nloop invariant n >= k;\nloop invariant i - k <= n;\nloop invariant k - i <= n;\nloop invariant n >= i - k;\nloop invariant n >= k - i;\nloop invariant n <= 2*i;\nloop invariant n <= 2*k;\nloop invariant i <= k/2;\nloop invariant k <= 2*i;\nloop invariant n >= 2*i;\nloop invariant n >= 2*k;\nloop invariant i >= k/2;\nloop invariant k >= 2*i;\nloop invariant n >= 2*i - k;\nloop invariant n >= 2*k - i;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 2 = 0;\nloop invariant k = n - i / 2;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> k < n;\nloop invariant i < n ==> k > 0;\nloop invariant i < n ==> k > -1;\nloop invariant i < n ==> k > -2;\nloop invariant i < n ==> k > -3;\nloop invariant i < n ==> k > -4;\nloop invariant i < n ==> k > -5;\nloop invariant i < n ==> k > -6;\nloop invariant i < n ==> k > -7;\nloop invariant i < n ==> k > -8;\nloop invariant i < n ==> k > -9;\nloop invariant i < n ==> k > -10;\nloop invariant i < n ==> k > -11;\nloop invariant i < n ==> k > -12;\nloop invariant i < n ==> k > -13;\nloop invariant i < n ==> k > -14;\nloop invariant i < n ==> k > -15;\nloop invariant i < n ==> k > -16;\nloop invariant i < n ==> k > -17;\nloop invariant i < n ==> k > -18;\nloop invariant i < n ==> k > -19;\nloop invariant i < n ==> k > -20;\nloop invariant i < n ==> k > -21;\nloop invariant i < n ==> k > -22;\nloop invariant i < n ==> k > -23;\nloop invariant i < n ==> k > -24;\nloop invariant i < n ==> k > -25;\nloop invariant i < n ==> k > -26;\nloop invariant i < n ==> k > -27;\nloop invariant i < n ==> k > -28;\nloop invariant i < n ==> k > -29;\nloop invariant i < n ==> k > -30;\nloop invariant i < n ==> k > -31;\nloop invariant i < n ==> k > -32;\nloop invariant i < n ==> k > -33;\nloop invariant i < n ==> k > -34;\nloop invariant i < n ==> k > -35;\nloop invariant i < n ==> k > -36;\nloop invariant i < n ==> k > -37;\nloop invariant i < n ==> k > -38;\nloop invariant i < n ==> k > -39;\nloop invariant i < n ==> k > -40;\nloop invariant i < n ==> k > -41;\nloop invariant i < n ==> k > -42;\nloop invariant i < n ==> k > -43;\nloop invariant i < n ==> k > -44;\nloop invariant i < n ==> k > -45;\nloop invariant i < n ==> k > -46;\nloop invariant i < n ==> k > -47;\nloop invariant i < n ==> k > -48;\nloop invariant i < n ==> k > -49;\nloop invariant i < n ==> k > -50;\nloop invariant i < n ==> k > -51;\nloop invariant i < n ==> k > -52;\nloop invariant i < n ==> k > -53;\nloop invariant i < n ==> k > -54;\nloop invariant i < n ==> k > -55;\nloop invariant i < n ==> k > -56;\nloop invariant i < n ==> k > -57;\nloop invariant i < n ==> k > -58;\nloop invariant i < n ==> k > -59;\nloop invariant i < n ==> k > -60;\nloop invariant i < n ==> k > -61;\nloop invariant i < n ==> k > -62;\nloop invariant i < n ==> k > -63;\nloop invariant i < n ==> k > -64;\nloop invariant i < n ==> k > -65;\nloop invariant i < n ==> k > -66;\nloop invariant i < n ==> k > -67;\nloop invariant i < n ==> k > -68;\nloop invariant i < n ==> k > -69;\nloop invariant i < n ==> k > -70;\nloop invariant i < n ==> k > -71;\nloop invariant i < n ==> k > -72;\nloop invariant i < n ==> k > -73;\nloop invariant i < n ==> k > -74;\nloop invariant i < n ==> k > -75;\nloop invariant i < n ==> k > -76;\nloop invariant i < n ==> k > -77;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 2 == 0;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> k == n - i;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 2*k <= n - 1;\nloop invariant k >= n - 1;\nloop invariant i % 2 == 0;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant k <= n / 2;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n / 2;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i/2;\nloop invariant k >= n/2;\nloop invariant i % 2 == 0;\nloop invariant k >= 0;\nloop invariant i < n;\nloop invariant i % 2 == 0 ==> k >= 0;\nloop invariant (i >= 0) ==> (k >= i/2) ==> (k >= n/2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant k >= i/2 is established but not preserved.\nloop invariant k >= n/2 is established but not preserved.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i < n is neither established nor preserved.\nloop invariant i % 2 == 0 ==> k >= 0 is partially proven to be inductive.\nloop invariant (i >= 0) ==> (k >= i/2) ==> (k >= n/2) is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\nloop invariant i4: i % 2 == 0;\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant i % 2 == 0;\nloop invariant k >= n - i;\nloop invariant k <= n;\nloop invariant i >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i <= n is established but not preserved.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant k >= n - i is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\nloop invariant i1: 0 <= k <= n;\n\nloop invariant i3: i % 2 == 0;\nloop invariant i4: k >= n - i;\nloop invariant i5: k <= n;\nloop invariant i6: i >= 0;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= n - 1;\nloop invariant 0 <= i < n ==> k = n - 1;\nloop invariant i >= n ==> k >= n - 1;\nloop invariant i >= n ==> 2*k >= n - 1 ==> 2*(n - 1) >= n - 1 ==> n >= 1;\nloop invariant i >= n ==> n >= 1;\nloop invariant i >= n ==> n >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: i >= n ==> 2*k >= n - 1 ==> 2*(n - 1) >= n - 1 ==> n >= 1;\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant k >= n - i;\nloop invariant i % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant k >= n - i is inductive.\nloop invariant i % 2 == 0 is inductive.\nAssertion 2 * k >= n - 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\nloop invariant i1: k >= n - i;\nloop invariant i2: i % 2 == 0;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i is even;\nloop invariant k is odd;\nloop invariant k >= n;\nloop invariant 2*k >= n-1;\nloop invariant i = 2*k - (n-1);\nloop invariant i - k = n - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token 'is'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k == n - i;\nloop invariant i % 2 == 0;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant k >= n - 1;\nloop invariant k >= (n - 1) / 2;\nloop invariant k <= (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant i % 2 == 0;\nloop invariant k == n - i;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant k >= n - 1;\nloop invariant k <= (n - 1) / 2;\nloop invariant k >= (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\nloop invariant k == (n - 1) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k == n - i is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant k >= n - 1 is partially proven to be inductive.\nloop invariant k >= (n - 1) / 2 is partially proven to be inductive.\nloop invariant k <= (n - 1) / 2 is preserved but not established.\nloop invariant k == (n - 1) / 2 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\nloop invariant i3: i % 2 == 0;\nloop invariant i4: i >= 0;\n\n\nloop invariant i7: k <= n;\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 56,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 2 == 0;\nloop invariant i <= 2*k+1;\nloop invariant k >= (n-1)/2;\nloop invariant k >= (n-2)/2 ==> i >= 2;\nloop invariant k >= (n-3)/2 ==> i >= 4;\nloop invariant k >= (n-4)/2 ==> i >= 6;\nloop invariant k >= (n-5)/2 ==> i >= 8;\nloop invariant k >= (n-6)/2 ==> i >= 10;\nloop invariant k >= (n-7)/2 ==> i >= 12;\nloop invariant k >= (n-8)/2 ==> i >= 14;\nloop invariant k >= (n-9)/2 ==> i >= 16;\nloop invariant k >= (n-10)/2 ==> i >= 18;\nloop invariant k >= (n-11)/2 ==> i >= 20;\nloop invariant k >= (n-12)/2 ==> i >= 22;\nloop invariant k >= (n-13)/2 ==> i >= 24;\nloop invariant k >= (n-14)/2 ==> i >= 26;\nloop invariant k >= (n-15)/2 ==> i >= 28;\nloop invariant k >= (n-16)/2 ==> i >= 30;\nloop invariant k >= (n-17)/2 ==> i >= 32;\nloop invariant k >= (n-18)/2 ==> i >= 34;\nloop invariant k >= (n-19)/2 ==> i >= 36;\nloop invariant k >= (n-20)/2 ==> i >= 38;\nloop invariant k >= (n-21)/2 ==> i >= 40;\nloop invariant k >= (n-22)/2 ==> i >= 42;\nloop invariant k >= (n-23)/2 ==> i >= 44;\nloop invariant k >= (n-24)/2 ==> i >= 46;\nloop invariant k >= (n-25)/2 ==> i >= 48;\nloop invariant k >= (n-26)/2 ==> i >= 50;\nloop invariant k >= (n-27)/2 ==> i >= 52;\nloop invariant k >= (n-28)/2 ==> i >= 54;\nloop invariant k >= (n-29)/2 ==> i >= 56;\nloop invariant k >= (n-30)/2 ==> i >= 58;\nloop invariant k >= (n-31)/2 ==> i >= 60;\nloop invariant k >= (n-32)/2 ==> i >= 62;\nloop invariant k >= (n-33)/2 ==> i >= 64;\nloop invariant k >= (n-34)/2 ==> i >= 66;\nloop invariant k >= (n-35)/2 ==> i >= 68;\nloop invariant k >= (n-36)/2 ==> i >= 70;\nloop invariant k >= (n-37)/2 ==> i >= 72;\nloop invariant k >= (n-38)/2 ==> i >= 74;\nloop invariant k >= (n-39)/2 ==> i >= 76;\nloop invariant k >= (n-40)/2 ==> i >= 78;\nloop invariant k >= (n-41)/2 ==> i >= 80;\nloop invariant k >= (n-42)/2 ==> i >= 82;\nloop invariant k >= (n-43)/2 ==> i >= 84;\nloop invariant k >= (n-44)/2 ==> i >= 86;\nloop invariant k >= (n-45)/2 ==> i >= 88;\nloop invariant k >= (n-46)/2 ==> i >= 90;\nloop invariant k >= (n-47)/2 ==> i >= 92;\nloop invariant k >= (n-48)/2 ==> i >= 94;\nloop invariant k >= (n-49)/2 ==> i >= 96;\nloop invariant k >= (n-50)/2 ==> i >= 98;\nloop invariant k >= (n-51)/2 ==> i >= 100;\nloop invariant k >= (n-52)/2 ==> i >= 102;\nloop invariant k >= (n-53)/2 ==> i >= 104;\nloop invariant k >= (n-54)/2 ==> i >= 106;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i <= 2*k+1 is partially proven to be inductive.\nloop invariant k >= (n-1)/2 is partially proven to be inductive.\nloop invariant k >= (n-2)/2 ==> i >= 2 is preserved but not established.\nloop invariant k >= (n-3)/2 ==> i >= 4 is partially proven to be inductive.\nloop invariant k >= (n-4)/2 ==> i >= 6 is partially proven to be inductive.\nloop invariant k >= (n-5)/2 ==> i >= 8 is partially proven to be inductive.\nloop invariant k >= (n-6)/2 ==> i >= 10 is partially proven to be inductive.\nloop invariant k >= (n-7)/2 ==> i >= 12 is partially proven to be inductive.\nloop invariant k >= (n-8)/2 ==> i >= 14 is partially proven to be inductive.\nloop invariant k >= (n-9)/2 ==> i >= 16 is partially proven to be inductive.\nloop invariant k >= (n-10)/2 ==> i >= 18 is partially proven to be inductive.\nloop invariant k >= (n-11)/2 ==> i >= 20 is partially proven to be inductive.\nloop invariant k >= (n-12)/2 ==> i >= 22 is partially proven to be inductive.\nloop invariant k >= (n-13)/2 ==> i >= 24 is partially proven to be inductive.\nloop invariant k >= (n-14)/2 ==> i >= 26 is partially proven to be inductive.\nloop invariant k >= (n-15)/2 ==> i >= 28 is partially proven to be inductive.\nloop invariant k >= (n-16)/2 ==> i >= 30 is partially proven to be inductive.\nloop invariant k >= (n-17)/2 ==> i >= 32 is partially proven to be inductive.\nloop invariant k >= (n-18)/2 ==> i >= 34 is partially proven to be inductive.\nloop invariant k >= (n-19)/2 ==> i >= 36 is partially proven to be inductive.\nloop invariant k >= (n-20)/2 ==> i >= 38 is partially proven to be inductive.\nloop invariant k >= (n-21)/2 ==> i >= 40 is partially proven to be inductive.\nloop invariant k >= (n-22)/2 ==> i >= 42 is partially proven to be inductive.\nloop invariant k >= (n-23)/2 ==> i >= 44 is partially proven to be inductive.\nloop invariant k >= (n-24)/2 ==> i >= 46 is partially proven to be inductive.\nloop invariant k >= (n-25)/2 ==> i >= 48 is partially proven to be inductive.\nloop invariant k >= (n-26)/2 ==> i >= 50 is partially proven to be inductive.\nloop invariant k >= (n-27)/2 ==> i >= 52 is partially proven to be inductive.\nloop invariant k >= (n-28)/2 ==> i >= 54 is partially proven to be inductive.\nloop invariant k >= (n-29)/2 ==> i >= 56 is partially proven to be inductive.\nloop invariant k >= (n-30)/2 ==> i >= 58 is partially proven to be inductive.\nloop invariant k >= (n-31)/2 ==> i >= 60 is partially proven to be inductive.\nloop invariant k >= (n-32)/2 ==> i >= 62 is partially proven to be inductive.\nloop invariant k >= (n-33)/2 ==> i >= 64 is partially proven to be inductive.\nloop invariant k >= (n-34)/2 ==> i >= 66 is partially proven to be inductive.\nloop invariant k >= (n-35)/2 ==> i >= 68 is partially proven to be inductive.\nloop invariant k >= (n-36)/2 ==> i >= 70 is partially proven to be inductive.\nloop invariant k >= (n-37)/2 ==> i >= 72 is partially proven to be inductive.\nloop invariant k >= (n-38)/2 ==> i >= 74 is partially proven to be inductive.\nloop invariant k >= (n-39)/2 ==> i >= 76 is partially proven to be inductive.\nloop invariant k >= (n-40)/2 ==> i >= 78 is partially proven to be inductive.\nloop invariant k >= (n-41)/2 ==> i >= 80 is partially proven to be inductive.\nloop invariant k >= (n-42)/2 ==> i >= 82 is partially proven to be inductive.\nloop invariant k >= (n-43)/2 ==> i >= 84 is partially proven to be inductive.\nloop invariant k >= (n-44)/2 ==> i >= 86 is partially proven to be inductive.\nloop invariant k >= (n-45)/2 ==> i >= 88 is partially proven to be inductive.\nloop invariant k >= (n-46)/2 ==> i >= 90 is partially proven to be inductive.\nloop invariant k >= (n-47)/2 ==> i >= 92 is partially proven to be inductive.\nloop invariant k >= (n-48)/2 ==> i >= 94 is partially proven to be inductive.\nloop invariant k >= (n-49)/2 ==> i >= 96 is partially proven to be inductive.\nloop invariant k >= (n-50)/2 ==> i >= 98 is partially proven to be inductive.\nloop invariant k >= (n-51)/2 ==> i >= 100 is partially proven to be inductive.\nloop invariant k >= (n-52)/2 ==> i >= 102 is partially proven to be inductive.\nloop invariant k >= (n-53)/2 ==> i >= 104 is partially proven to be inductive.\nloop invariant k >= (n-54)/2 ==> i >= 106 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: i % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant k == n - i;\nloop invariant i % 2 == 0;\nloop invariant k >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i <= n is established but not preserved.\nloop invariant k == n - i is established but not preserved.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\nloop invariant i3: i % 2 == 0;\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i%2 == 0;\nloop invariant k == n - i/2;\nloop invariant k >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i%2 == 0 is partially proven to be inductive.\nloop invariant k == n - i/2 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= k <= n;\nloop invariant i3: i%2 == 0;\nloop invariant i4: k == n - i/2;\nloop invariant i5: k >= 0;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i < n;\nloop invariant 0 <= k <= n;\nloop invariant n-1 <= 2*k;\nloop invariant n-1 <= 2*k ==> i == n;\nloop invariant n-1 <= 2*k ==> 2*k >= n-1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < n is preserved but not established.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant n-1 <= 2*k is partially proven to be inductive.\nloop invariant n-1 <= 2*k ==> i == n is preserved but not established.\nloop invariant n-1 <= 2*k ==> 2*k >= n-1 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: n-1 <= 2*k ==> 2*k >= n-1;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i%2==0;\nloop invariant k==n-i/2;\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant i%2==0 is partially proven to be inductive.\nloop invariant k==n-i/2 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: i%2==0;\nloop invariant i3: k==n-i/2;\nloop invariant i4: n >= 0;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= n;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant n <= i - k;\nloop invariant n <= k - i;\nloop invariant n <= i;\nloop invariant n <= k;\nloop invariant i <= k;\nloop invariant k >= i;\nloop invariant n <= i + k;\nloop invariant i + k <= n;\nloop invariant n >= i;\nloop invariant n >= k;\nloop invariant i - k <= n;\nloop invariant k - i <= n;\nloop invariant n >= i - k;\nloop invariant n >= k - i;\nloop invariant n <= 2*i;\nloop invariant n <= 2*k;\nloop invariant i <= k/2;\nloop invariant k <= 2*i;\nloop invariant n >= 2*i;\nloop invariant n >= 2*k;\nloop invariant i >= k/2;\nloop invariant k >= 2*i;\nloop invariant n >= 2*i - k;\nloop invariant n >= 2*k - i;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\nloop invariant k >= 2*i - 1;\nloop invariant n >= 2*i - k - 1;\nloop invariant n >= 2*k - i - 1;\nloop invariant i >= k/2 - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant k >= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant n <= i - k is preserved but not established.\nloop invariant n <= k - i is partially proven to be inductive.\nloop invariant n <= i is partially proven to be inductive.\nloop invariant n <= k is partially proven to be inductive.\nloop invariant i <= k is partially proven to be inductive.\nloop invariant k >= i is partially proven to be inductive.\nloop invariant n <= i + k is partially proven to be inductive.\nloop invariant i + k <= n is partially proven to be inductive.\nloop invariant n >= i is partially proven to be inductive.\nloop invariant n >= k is partially proven to be inductive.\nloop invariant i - k <= n is partially proven to be inductive.\nloop invariant k - i <= n is partially proven to be inductive.\nloop invariant n >= i - k is partially proven to be inductive.\nloop invariant n >= k - i is partially proven to be inductive.\nloop invariant n <= 2*i is partially proven to be inductive.\nloop invariant n <= 2*k is partially proven to be inductive.\nloop invariant i <= k/2 is partially proven to be inductive.\nloop invariant k <= 2*i is partially proven to be inductive.\nloop invariant n >= 2*i is partially proven to be inductive.\nloop invariant n >= 2*k is partially proven to be inductive.\nloop invariant i >= k/2 is partially proven to be inductive.\nloop invariant k >= 2*i is partially proven to be inductive.\nloop invariant n >= 2*i - k is partially proven to be inductive.\nloop invariant n >= 2*k - i is partially proven to be inductive.\nloop invariant i >= k/2 - 1 is partially proven to be inductive.\nloop invariant k >= 2*i - 1 is partially proven to be inductive.\nloop invariant n >= 2*i - k - 1 is partially proven to be inductive.\nloop invariant n >= 2*k - i - 1 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: n >= 0;\n\nloop invariant i5: k <= n;\n\n\n\n\n\n\nloop invariant i12: n <= i + k;\n\n\nloop invariant i15: n >= k;\n\nloop invariant i17: k - i <= n;\n\nloop invariant i19: n >= k - i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 84,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 2 = 0;\nloop invariant k = n - i / 2;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> k < n;\nloop invariant i < n ==> k > 0;\nloop invariant i < n ==> k > -1;\nloop invariant i < n ==> k > -2;\nloop invariant i < n ==> k > -3;\nloop invariant i < n ==> k > -4;\nloop invariant i < n ==> k > -5;\nloop invariant i < n ==> k > -6;\nloop invariant i < n ==> k > -7;\nloop invariant i < n ==> k > -8;\nloop invariant i < n ==> k > -9;\nloop invariant i < n ==> k > -10;\nloop invariant i < n ==> k > -11;\nloop invariant i < n ==> k > -12;\nloop invariant i < n ==> k > -13;\nloop invariant i < n ==> k > -14;\nloop invariant i < n ==> k > -15;\nloop invariant i < n ==> k > -16;\nloop invariant i < n ==> k > -17;\nloop invariant i < n ==> k > -18;\nloop invariant i < n ==> k > -19;\nloop invariant i < n ==> k > -20;\nloop invariant i < n ==> k > -21;\nloop invariant i < n ==> k > -22;\nloop invariant i < n ==> k > -23;\nloop invariant i < n ==> k > -24;\nloop invariant i < n ==> k > -25;\nloop invariant i < n ==> k > -26;\nloop invariant i < n ==> k > -27;\nloop invariant i < n ==> k > -28;\nloop invariant i < n ==> k > -29;\nloop invariant i < n ==> k > -30;\nloop invariant i < n ==> k > -31;\nloop invariant i < n ==> k > -32;\nloop invariant i < n ==> k > -33;\nloop invariant i < n ==> k > -34;\nloop invariant i < n ==> k > -35;\nloop invariant i < n ==> k > -36;\nloop invariant i < n ==> k > -37;\nloop invariant i < n ==> k > -38;\nloop invariant i < n ==> k > -39;\nloop invariant i < n ==> k > -40;\nloop invariant i < n ==> k > -41;\nloop invariant i < n ==> k > -42;\nloop invariant i < n ==> k > -43;\nloop invariant i < n ==> k > -44;\nloop invariant i < n ==> k > -45;\nloop invariant i < n ==> k > -46;\nloop invariant i < n ==> k > -47;\nloop invariant i < n ==> k > -48;\nloop invariant i < n ==> k > -49;\nloop invariant i < n ==> k > -50;\nloop invariant i < n ==> k > -51;\nloop invariant i < n ==> k > -52;\nloop invariant i < n ==> k > -53;\nloop invariant i < n ==> k > -54;\nloop invariant i < n ==> k > -55;\nloop invariant i < n ==> k > -56;\nloop invariant i < n ==> k > -57;\nloop invariant i < n ==> k > -58;\nloop invariant i < n ==> k > -59;\nloop invariant i < n ==> k > -60;\nloop invariant i < n ==> k > -61;\nloop invariant i < n ==> k > -62;\nloop invariant i < n ==> k > -63;\nloop invariant i < n ==> k > -64;\nloop invariant i < n ==> k > -65;\nloop invariant i < n ==> k > -66;\nloop invariant i < n ==> k > -67;\nloop invariant i < n ==> k > -68;\nloop invariant i < n ==> k > -69;\nloop invariant i < n ==> k > -70;\nloop invariant i < n ==> k > -71;\nloop invariant i < n ==> k > -72;\nloop invariant i < n ==> k > -73;\nloop invariant i < n ==> k > -74;\nloop invariant i < n ==> k > -75;\nloop invariant i < n ==> k > -76;\nloop invariant i < n ==> k > -77;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n\nloop invariant i6: i < n ==> k <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 2 == 0;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> k == n - i;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\nloop invariant i < n ==> i >= 0;\nloop invariant i < n ==> k >= 0;\nloop invariant i < n ==> k <= n;\nloop invariant i < n ==> i % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i < n ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant i < n ==> k == n - i is established but not preserved.\nloop invariant i < n ==> i >= 0 is partially proven to be inductive.\nloop invariant i < n ==> k >= 0 is partially proven to be inductive.\nloop invariant i < n ==> k <= n is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\nloop invariant i3: i % 2 == 0;\nloop invariant i4: k <= n;\nloop invariant i5: i >= 0;\n\nloop invariant i7: i < n ==> i % 2 == 0;\n\nloop invariant i9: i < n ==> i >= 0;\n\nloop invariant i11: i < n ==> k <= n;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 2*k <= n - 1;\nloop invariant k >= n - 1;\nloop invariant i % 2 == 0;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant k <= n / 2;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n / 2;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + 2*k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant i + k == n;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant i <= n;\nloop invariant k <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 2*k <= n - 1 is preserved but not established.\nloop invariant k >= n - 1 is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i + k == n is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant k <= n / 2 is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant i + 2*k == n is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\nloop invariant i4: i % 2 == 0;\n\n\n\nloop invariant i8: i >= 0;\n\nloop invariant i10: k <= n;\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 32: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: k >= i/2;\nloop invariant i3: k >= n/2;\nloop invariant i4: i % 2 == 0;\nloop invariant i5: k >= 0;\nloop invariant i6: i < n;\nloop invariant i7: i % 2 == 0 ==> k >= 0;\nloop invariant i8: (i >= 0) ==> (k >= i/2) ==> (k >= n/2);\nloop invariant i9: 0 <= k <= n;\nloop invariant i10: i <= n;\nloop invariant i11: k >= n - i;\nloop invariant i12: k <= n;\nloop invariant i13: i >= 0;\nloop invariant i14: k >= n - 1;\nloop invariant i15: 0 <= i < n ==> k = n - 1;\nloop invariant i16: i >= n ==> k >= n - 1;\nloop invariant i17: i >= n ==> 2*k >= n - 1 ==> 2*(n - 1) >= n - 1 ==> n >= 1;\nloop invariant i18: i >= n ==> n >= 1;\nloop invariant i19: 1 <= i <= n;\nloop invariant i20: i is even;\nloop invariant i21: k is odd;\nloop invariant i22: k >= n;\nloop invariant i23: 2*k >= n-1;\nloop invariant i24: i = 2*k - (n-1);\nloop invariant i25: i - k = n - 1;\nloop invariant i26: k == n - i;\nloop invariant i27: k >= (n - 1) / 2;\nloop invariant i28: k <= (n - 1) / 2;\nloop invariant i29: k == (n - 1) / 2;\nloop invariant i30: i <= 2*k+1;\nloop invariant i31: k >= (n-1)/2;\nloop invariant i32: k >= (n-2)/2 ==> i >= 2;\nloop invariant i33: k >= (n-3)/2 ==> i >= 4;\nloop invariant i34: k >= (n-4)/2 ==> i >= 6;\nloop invariant i35: k >= (n-5)/2 ==> i >= 8;\nloop invariant i36: k >= (n-6)/2 ==> i >= 10;\nloop invariant i37: k >= (n-7)/2 ==> i >= 12;\nloop invariant i38: k >= (n-8)/2 ==> i >= 14;\nloop invariant i39: k >= (n-9)/2 ==> i >= 16;\nloop invariant i40: k >= (n-10)/2 ==> i >= 18;\nloop invariant i41: k >= (n-11)/2 ==> i >= 20;\nloop invariant i42: k >= (n-12)/2 ==> i >= 22;\nloop invariant i43: k >= (n-13)/2 ==> i >= 24;\nloop invariant i44: k >= (n-14)/2 ==> i >= 26;\nloop invariant i45: k >= (n-15)/2 ==> i >= 28;\nloop invariant i46: k >= (n-16)/2 ==> i >= 30;\nloop invariant i47: k >= (n-17)/2 ==> i >= 32;\nloop invariant i48: k >= (n-18)/2 ==> i >= 34;\nloop invariant i49: k >= (n-19)/2 ==> i >= 36;\nloop invariant i50: k >= (n-20)/2 ==> i >= 38;\nloop invariant i51: k >= (n-21)/2 ==> i >= 40;\nloop invariant i52: k >= (n-22)/2 ==> i >= 42;\nloop invariant i53: k >= (n-23)/2 ==> i >= 44;\nloop invariant i54: k >= (n-24)/2 ==> i >= 46;\nloop invariant i55: k >= (n-25)/2 ==> i >= 48;\nloop invariant i56: k >= (n-26)/2 ==> i >= 50;\nloop invariant i57: k >= (n-27)/2 ==> i >= 52;\nloop invariant i58: k >= (n-28)/2 ==> i >= 54;\nloop invariant i59: k >= (n-29)/2 ==> i >= 56;\nloop invariant i60: k >= (n-30)/2 ==> i >= 58;\nloop invariant i61: k >= (n-31)/2 ==> i >= 60;\nloop invariant i62: k >= (n-32)/2 ==> i >= 62;\nloop invariant i63: k >= (n-33)/2 ==> i >= 64;\nloop invariant i64: k >= (n-34)/2 ==> i >= 66;\nloop invariant i65: k >= (n-35)/2 ==> i >= 68;\nloop invariant i66: k >= (n-36)/2 ==> i >= 70;\nloop invariant i67: k >= (n-37)/2 ==> i >= 72;\nloop invariant i68: k >= (n-38)/2 ==> i >= 74;\nloop invariant i69: k >= (n-39)/2 ==> i >= 76;\nloop invariant i70: k >= (n-40)/2 ==> i >= 78;\nloop invariant i71: k >= (n-41)/2 ==> i >= 80;\nloop invariant i72: k >= (n-42)/2 ==> i >= 82;\nloop invariant i73: k >= (n-43)/2 ==> i >= 84;\nloop invariant i74: k >= (n-44)/2 ==> i >= 86;\nloop invariant i75: k >= (n-45)/2 ==> i >= 88;\nloop invariant i76: k >= (n-46)/2 ==> i >= 90;\nloop invariant i77: k >= (n-47)/2 ==> i >= 92;\nloop invariant i78: k >= (n-48)/2 ==> i >= 94;\nloop invariant i79: k >= (n-49)/2 ==> i >= 96;\nloop invariant i80: k >= (n-50)/2 ==> i >= 98;\nloop invariant i81: k >= (n-51)/2 ==> i >= 100;\nloop invariant i82: k >= (n-52)/2 ==> i >= 102;\nloop invariant i83: k >= (n-53)/2 ==> i >= 104;\nloop invariant i84: k >= (n-54)/2 ==> i >= 106;\nloop invariant i85: i%2 == 0;\nloop invariant i86: k == n - i/2;\nloop invariant i87: 0 <= i < n;\nloop invariant i88: n-1 <= 2*k;\nloop invariant i89: n-1 <= 2*k ==> i == n;\nloop invariant i90: n-1 <= 2*k ==> 2*k >= n-1;\nloop invariant i91: i%2==0;\nloop invariant i92: k==n-i/2;\nloop invariant i93: n >= 0;\nloop invariant i94: n <= i - k;\nloop invariant i95: n <= k - i;\nloop invariant i96: n <= i;\nloop invariant i97: n <= k;\nloop invariant i98: i <= k;\nloop invariant i99: k >= i;\nloop invariant i100: n <= i + k;\nloop invariant i101: i + k <= n;\nloop invariant i102: n >= i;\nloop invariant i103: n >= k;\nloop invariant i104: i - k <= n;\nloop invariant i105: k - i <= n;\nloop invariant i106: n >= i - k;\nloop invariant i107: n >= k - i;\nloop invariant i108: n <= 2*i;\nloop invariant i109: n <= 2*k;\nloop invariant i110: i <= k/2;\nloop invariant i111: k <= 2*i;\nloop invariant i112: n >= 2*i;\nloop invariant i113: n >= 2*k;\nloop invariant i114: i >= k/2;\nloop invariant i115: k >= 2*i;\nloop invariant i116: n >= 2*i - k;\nloop invariant i117: n >= 2*k - i;\nloop invariant i118: i >= k/2 - 1;\nloop invariant i119: k >= 2*i - 1;\nloop invariant i120: n >= 2*i - k - 1;\nloop invariant i121: n >= 2*k - i - 1;\nloop invariant i122: i % 2 = 0;\nloop invariant i123: k = n - i / 2;\nloop invariant i124: i < n ==> k >= 0;\nloop invariant i125: i < n ==> k <= n;\nloop invariant i126: i < n ==> k < n;\nloop invariant i127: i < n ==> k > 0;\nloop invariant i128: i < n ==> k > -1;\nloop invariant i129: i < n ==> k > -2;\nloop invariant i130: i < n ==> k > -3;\nloop invariant i131: i < n ==> k > -4;\nloop invariant i132: i < n ==> k > -5;\nloop invariant i133: i < n ==> k > -6;\nloop invariant i134: i < n ==> k > -7;\nloop invariant i135: i < n ==> k > -8;\nloop invariant i136: i < n ==> k > -9;\nloop invariant i137: i < n ==> k > -10;\nloop invariant i138: i < n ==> k > -11;\nloop invariant i139: i < n ==> k > -12;\nloop invariant i140: i < n ==> k > -13;\nloop invariant i141: i < n ==> k > -14;\nloop invariant i142: i < n ==> k > -15;\nloop invariant i143: i < n ==> k > -16;\nloop invariant i144: i < n ==> k > -17;\nloop invariant i145: i < n ==> k > -18;\nloop invariant i146: i < n ==> k > -19;\nloop invariant i147: i < n ==> k > -20;\nloop invariant i148: i < n ==> k > -21;\nloop invariant i149: i < n ==> k > -22;\nloop invariant i150: i < n ==> k > -23;\nloop invariant i151: i < n ==> k > -24;\nloop invariant i152: i < n ==> k > -25;\nloop invariant i153: i < n ==> k > -26;\nloop invariant i154: i < n ==> k > -27;\nloop invariant i155: i < n ==> k > -28;\nloop invariant i156: i < n ==> k > -29;\nloop invariant i157: i < n ==> k > -30;\nloop invariant i158: i < n ==> k > -31;\nloop invariant i159: i < n ==> k > -32;\nloop invariant i160: i < n ==> k > -33;\nloop invariant i161: i < n ==> k > -34;\nloop invariant i162: i < n ==> k > -35;\nloop invariant i163: i < n ==> k > -36;\nloop invariant i164: i < n ==> k > -37;\nloop invariant i165: i < n ==> k > -38;\nloop invariant i166: i < n ==> k > -39;\nloop invariant i167: i < n ==> k > -40;\nloop invariant i168: i < n ==> k > -41;\nloop invariant i169: i < n ==> k > -42;\nloop invariant i170: i < n ==> k > -43;\nloop invariant i171: i < n ==> k > -44;\nloop invariant i172: i < n ==> k > -45;\nloop invariant i173: i < n ==> k > -46;\nloop invariant i174: i < n ==> k > -47;\nloop invariant i175: i < n ==> k > -48;\nloop invariant i176: i < n ==> k > -49;\nloop invariant i177: i < n ==> k > -50;\nloop invariant i178: i < n ==> k > -51;\nloop invariant i179: i < n ==> k > -52;\nloop invariant i180: i < n ==> k > -53;\nloop invariant i181: i < n ==> k > -54;\nloop invariant i182: i < n ==> k > -55;\nloop invariant i183: i < n ==> k > -56;\nloop invariant i184: i < n ==> k > -57;\nloop invariant i185: i < n ==> k > -58;\nloop invariant i186: i < n ==> k > -59;\nloop invariant i187: i < n ==> k > -60;\nloop invariant i188: i < n ==> k > -61;\nloop invariant i189: i < n ==> k > -62;\nloop invariant i190: i < n ==> k > -63;\nloop invariant i191: i < n ==> k > -64;\nloop invariant i192: i < n ==> k > -65;\nloop invariant i193: i < n ==> k > -66;\nloop invariant i194: i < n ==> k > -67;\nloop invariant i195: i < n ==> k > -68;\nloop invariant i196: i < n ==> k > -69;\nloop invariant i197: i < n ==> k > -70;\nloop invariant i198: i < n ==> k > -71;\nloop invariant i199: i < n ==> k > -72;\nloop invariant i200: i < n ==> k > -73;\nloop invariant i201: i < n ==> k > -74;\nloop invariant i202: i < n ==> k > -75;\nloop invariant i203: i < n ==> k > -76;\nloop invariant i204: i < n ==> k > -77;\nloop invariant i205: i < n ==> i % 2 == 0;\nloop invariant i206: i < n ==> k == n - i;\nloop invariant i207: i < n ==> i >= 0;\nloop invariant i208: 2*k <= n - 1;\nloop invariant i209: i + k == n;\nloop invariant i210: k <= n / 2;\nloop invariant i211: i + 2*k == n;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 83,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\nloop invariant i3: k >= n/2;\nloop invariant i4: i % 2 == 0;\nloop invariant i5: k >= 0;\n\nloop invariant i7: i % 2 == 0 ==> k >= 0;\nloop invariant i8: (i >= 0) ==> (k >= i/2) ==> (k >= n/2);\nloop invariant i9: 0 <= k <= n;\n\nloop invariant i11: k >= n - i;\nloop invariant i12: k <= n;\nloop invariant i13: i >= 0;\n\n\n\nloop invariant i17: i >= n ==> 2*k >= n - 1 ==> 2*(n - 1) >= n - 1 ==> n >= 1;\n\n\n\n\n\nloop invariant i23: 2*k >= n-1;\n\n\n\nloop invariant i27: k >= (n - 1) / 2;\n\n\n\nloop invariant i31: k >= (n-1)/2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i85: i%2 == 0;\nloop invariant i86: k == n - i/2;\n\nloop invariant i88: n-1 <= 2*k;\n\nloop invariant i90: n-1 <= 2*k ==> 2*k >= n-1;\nloop invariant i91: i%2==0;\nloop invariant i92: k==n-i/2;\nloop invariant i93: n >= 0;\n\n\n\n\n\n\nloop invariant i100: n <= i + k;\n\n\nloop invariant i103: n >= k;\n\nloop invariant i105: k - i <= n;\n\nloop invariant i107: n >= k - i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i124: i < n ==> k >= 0;\nloop invariant i125: i < n ==> k <= n;\n\nloop invariant i127: i < n ==> k > 0;\nloop invariant i128: i < n ==> k > -1;\nloop invariant i129: i < n ==> k > -2;\nloop invariant i130: i < n ==> k > -3;\nloop invariant i131: i < n ==> k > -4;\nloop invariant i132: i < n ==> k > -5;\nloop invariant i133: i < n ==> k > -6;\nloop invariant i134: i < n ==> k > -7;\nloop invariant i135: i < n ==> k > -8;\nloop invariant i136: i < n ==> k > -9;\nloop invariant i137: i < n ==> k > -10;\nloop invariant i138: i < n ==> k > -11;\nloop invariant i139: i < n ==> k > -12;\nloop invariant i140: i < n ==> k > -13;\nloop invariant i141: i < n ==> k > -14;\nloop invariant i142: i < n ==> k > -15;\nloop invariant i143: i < n ==> k > -16;\nloop invariant i144: i < n ==> k > -17;\nloop invariant i145: i < n ==> k > -18;\nloop invariant i146: i < n ==> k > -19;\nloop invariant i147: i < n ==> k > -20;\nloop invariant i148: i < n ==> k > -21;\nloop invariant i149: i < n ==> k > -22;\nloop invariant i150: i < n ==> k > -23;\nloop invariant i151: i < n ==> k > -24;\nloop invariant i152: i < n ==> k > -25;\nloop invariant i153: i < n ==> k > -26;\nloop invariant i154: i < n ==> k > -27;\nloop invariant i155: i < n ==> k > -28;\nloop invariant i156: i < n ==> k > -29;\nloop invariant i157: i < n ==> k > -30;\nloop invariant i158: i < n ==> k > -31;\nloop invariant i159: i < n ==> k > -32;\nloop invariant i160: i < n ==> k > -33;\nloop invariant i161: i < n ==> k > -34;\nloop invariant i162: i < n ==> k > -35;\nloop invariant i163: i < n ==> k > -36;\nloop invariant i164: i < n ==> k > -37;\nloop invariant i165: i < n ==> k > -38;\nloop invariant i166: i < n ==> k > -39;\nloop invariant i167: i < n ==> k > -40;\nloop invariant i168: i < n ==> k > -41;\nloop invariant i169: i < n ==> k > -42;\nloop invariant i170: i < n ==> k > -43;\nloop invariant i171: i < n ==> k > -44;\nloop invariant i172: i < n ==> k > -45;\nloop invariant i173: i < n ==> k > -46;\nloop invariant i174: i < n ==> k > -47;\nloop invariant i175: i < n ==> k > -48;\nloop invariant i176: i < n ==> k > -49;\nloop invariant i177: i < n ==> k > -50;\nloop invariant i178: i < n ==> k > -51;\nloop invariant i179: i < n ==> k > -52;\nloop invariant i180: i < n ==> k > -53;\nloop invariant i181: i < n ==> k > -54;\nloop invariant i182: i < n ==> k > -55;\nloop invariant i183: i < n ==> k > -56;\nloop invariant i184: i < n ==> k > -57;\nloop invariant i185: i < n ==> k > -58;\nloop invariant i186: i < n ==> k > -59;\nloop invariant i187: i < n ==> k > -60;\nloop invariant i188: i < n ==> k > -61;\nloop invariant i189: i < n ==> k > -62;\nloop invariant i190: i < n ==> k > -63;\nloop invariant i191: i < n ==> k > -64;\nloop invariant i192: i < n ==> k > -65;\nloop invariant i193: i < n ==> k > -66;\nloop invariant i194: i < n ==> k > -67;\nloop invariant i195: i < n ==> k > -68;\nloop invariant i196: i < n ==> k > -69;\nloop invariant i197: i < n ==> k > -70;\nloop invariant i198: i < n ==> k > -71;\nloop invariant i199: i < n ==> k > -72;\nloop invariant i200: i < n ==> k > -73;\nloop invariant i201: i < n ==> k > -74;\nloop invariant i202: i < n ==> k > -75;\nloop invariant i203: i < n ==> k > -76;\nloop invariant i204: i < n ==> k > -77;\nloop invariant i205: i < n ==> i % 2 == 0;\n\nloop invariant i207: i < n ==> i >= 0;\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c"
        ],
        "skipped": [],
        "total": 16,
        "success_count": 5,
        "failure_count": 11,
        "success_rate": 0.3125
    }
}