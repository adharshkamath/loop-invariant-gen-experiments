{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  while(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y + 1;\nloop invariant 1 <= y <= 100000;\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y+1;\nloop invariant a >= 1;\nloop invariant a <= 2;\nloop invariant a%2 == 1;\nloop invariant a%2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant flag == 0;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant flag == 0 ==> (0 < a && a < 3);\nloop invariant flag == 1 ==> (0 <= a && a <= 3);\n*/\n```",
            "```\n/*@\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant a >= 0;\nloop invariant x + y <= a;\nloop invariant x <= y + 1;\nloop invariant y <= x + 1;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2;\nloop invariant (x >= 1) ==> (y >= 1);\nloop invariant (x >= 1) ==> (x <= 2);\nloop invariant (y >= 1) ==> (y <= 2);\nloop invariant (a%2 == 1) ==> (a == 1);\nloop invariant (a%2 == 0) ==> (a == 0);\nloop invariant (x >= 1) ==> (a <= 2);\nloop invariant (y >= 1) ==> (a <= 2);\nloop invariant (x >= 1) ==> (a >= 0);\nloop invariant (y >= 1) ==> (a >= 0);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant a <= 100000;\nloop invariant a%2 == 0 ==> x == y;\nloop invariant a%2 == 1 ==> x == y+1;\nloop invariant a%2 == 0 ==> y == x;\nloop invariant a%2 == 1 ==> y == x+1;\nloop invariant a%2 == 0 ==> a == x + y;\nloop invariant a%2 == 1 ==> a == x + y + 1;\nloop invariant a%2 == 0 ==> x >= 1;\nloop invariant a%2 == 1 ==> x >= 0;\nloop invariant a%2 == 0 ==> y >= 1;\nloop invariant a%2 == 1 ==> y >= 0;\nloop invariant a%2 == 0 ==> a >= y;\nloop invariant a%2 == 1 ==> a >= x;\nloop invariant a%2 == 0 ==> x <= a;\nloop invariant a%2 == 1 ==> y <= a;\nloop invariant a%2 == 0 ==> y <= a - 1;\nloop invariant a%2 == 1 ==> x <= a - 1;\nloop invariant a%2 == 0 ==> a <= x + y;\nloop invariant a%2 == 1 ==> a <= x + y + 1;\nloop invariant a%2 == 0 ==> x + y <= a;\nloop invariant a%2 == 1 ==> x + y + 1 <= a;\nloop invariant a%2 == 0 ==> x + y <= a - 1;\nloop invariant a%2 == 1 ==> x + y + 1 <= a - 1;\nloop invariant a%2 == 0 ==> x + y - 1 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 2;\nloop invariant a%2 == 0 ==> x + y - 2 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 3;\nloop invariant a%2 == 0 ==> x + y - 3 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 4;\nloop invariant a%2 == 0 ==> x + y - 4 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 5;\nloop invariant a%2 == 0 ==> x + y - 5 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 6;\nloop invariant a%2 == 0 ==> x + y - 6 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 7;\nloop invariant a%2 == 0 ==> x + y - 7 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 8;\nloop invariant a%2 == 0 ==> x + y - 8 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 9;\nloop invariant a%2 == 0 ==> x + y - 9 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 10;\nloop invariant a%2 == 0 ==> x + y - 10 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 11;\nloop invariant a%2 == 0 ==> x + y - 11 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 12;\nloop invariant a%2 == 0 ==> x + y - 12 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 13;\nloop invariant a%2 == 0 ==> x + y - 13 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 14;\nloop invariant a%2 == 0 ==> x + y - 14 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 15;\nloop invariant a%2 == 0 ==> x + y - 15 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 16;\nloop invariant a%2 == 0 ==> x + y - 16 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 17;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant a%2 == 1 ==> a >= 1;\nloop invariant a%2 == 0 ==> a >= 2;\nloop invariant a%2 == 1 ==> a <= 3;\nloop invariant a%2 == 0 ==> a <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant a <= 100000;\nloop invariant a%2==1 ==> a < 100000;\nloop invariant a%2==1 ==> a >= 1;\nloop invariant a%2==1 ==> a >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> a >= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= y;\nloop invariant a%2==1 ==> x <= 100000;\nloop invariant a%2==1 ==> y <= 100000;\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y >= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a = x + y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant a >= 3;\nloop invariant a <= 4;\nloop invariant flag ==> a == 1;\nloop invariant !flag ==> a == 0;\nloop invariant flag ==> y == x;\nloop invariant !flag ==> y == x + 1;\nloop invariant flag ==> x >= 1;\nloop invariant flag ==> x <= 2;\nloop invariant !flag ==> x >= 1;\nloop invariant !flag ==> x <= 2;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a == 2 * x + y;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant a >= 3;\nloop invariant a <= 4;\nloop invariant flag ==> a == 1;\nloop invariant !flag ==> a == 0;\nloop invariant flag ==> y == x;\nloop invariant !flag ==> y == x + 1;\nloop invariant flag ==> x >= 1;\nloop invariant flag ==> x <= 2;\nloop invariant !flag ==> x >= 1;\nloop invariant !flag ==> x <= 2;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a == 2 * x + y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= (a + 1);\nloop invariant 1 <= y <= (a + 1);\nloop invariant a%2==1 ==> (x == 1 && y == 1);\nloop invariant a%2==0 ==> (x == 2 && y == 1);\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x <= a;\nloop invariant y <= a;\nloop invariant a%2==1 ==> (y == (a + 1));\nloop invariant a%2==0 ==> (x == (a + 1));\nloop invariant a%2==1 ==> (x == 1);\nloop invariant a%2==0 ==> (y == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x+y <= a <= x+y+1;\nloop invariant a%2 == 0 or a%2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant a >= x+y;\nloop invariant a >= x+y+1;\nloop invariant a%2==1 ==> y%2==1;\nloop invariant a%2==0 ==> x%2==0;\nloop invariant (flag ==> a%2==1) || (!flag ==> a%2==0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant (x + y) >= a;\nloop invariant a % 2 == 1 ==> a >= 2;\nloop invariant flag == 1 ==> x == y;\nloop invariant flag == 0 ==> x >= y;\nloop invariant a % 2 == 0 ==> a >= 2;\nloop invariant flag == 1 ==> a == x + y + 1;\nloop invariant flag == 0 ==> a == x + y + 2;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a == 2 * x + y + 2;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a >= 3;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a >= 3;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is established but not preserved.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y + 1;\nloop invariant 1 <= y <= 100000;\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\nloop invariant (flag ? x == y + 1 : x == y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= y + 1 is partially proven to be inductive.\nloop invariant 1 <= y <= 100000 is established but not preserved.\nloop invariant (flag ? x == y + 1 : x == y) is neither established nor preserved.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y+1;\nloop invariant a >= 1;\nloop invariant a <= 2;\nloop invariant a%2 == 1;\nloop invariant a%2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x <= y+1 is partially proven to be inductive.\nloop invariant a >= 1 is preserved but not established.\nloop invariant a <= 2 is partially proven to be inductive.\nloop invariant a%2 == 1 is partially proven to be inductive.\nloop invariant a%2 == 0 is preserved but not established.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\nloop invariant i3: x >= 1;\nloop invariant i4: y >= 1;\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant flag == 0;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant flag == 0 ==> (0 < a && a < 3);\nloop invariant flag == 1 ==> (0 <= a && a <= 3);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant flag == 0 is preserved but not established.\nloop invariant 1 <= x <= 2 is established but not preserved.\nloop invariant 1 <= y <= 2 is established but not preserved.\nloop invariant flag == 0 ==> (0 < a && a < 3) is partially proven to be inductive.\nloop invariant flag == 1 ==> (0 <= a && a <= 3) is partially proven to be inductive.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant a >= 0;\nloop invariant x + y <= a;\nloop invariant x <= y + 1;\nloop invariant y <= x + 1;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\nloop invariant x + y <= a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant x + y <= a is preserved but not established.\nloop invariant x <= y + 1 is partially proven to be inductive.\nloop invariant y <= x + 1 is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: a >= 0;\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2;\nloop invariant (x >= 1) ==> (y >= 1);\nloop invariant (x >= 1) ==> (x <= 2);\nloop invariant (y >= 1) ==> (y <= 2);\nloop invariant (a%2 == 1) ==> (a == 1);\nloop invariant (a%2 == 0) ==> (a == 0);\nloop invariant (x >= 1) ==> (a <= 2);\nloop invariant (y >= 1) ==> (a <= 2);\nloop invariant (x >= 1) ==> (a >= 0);\nloop invariant (y >= 1) ==> (a >= 0);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\nloop invariant (!flag ==> y >= x);\nloop invariant (flag ==> y < 2);\nloop invariant (!flag ==> x < 2);\nloop invariant (flag ==> y > x);\nloop invariant (!flag ==> x > y);\nloop invariant (flag ==> a < 2);\nloop invariant (!flag ==> a > 0);\nloop invariant (flag ==> a > 0);\nloop invariant (!flag ==> a < 2);\nloop invariant (flag ==> a == 1);\nloop invariant (!flag ==> a == 0);\nloop invariant (flag ==> y == 1);\nloop invariant (!flag ==> y == 2);\nloop invariant (flag ==> x == 1);\nloop invariant (!flag ==> x == 2);\nloop invariant (flag ==> x >= y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= a <= 2 is partially proven to be inductive.\nloop invariant (x >= 1) ==> (y >= 1) is partially proven to be inductive.\nloop invariant (x >= 1) ==> (x <= 2) is partially proven to be inductive.\nloop invariant (y >= 1) ==> (y <= 2) is partially proven to be inductive.\nloop invariant (a%2 == 1) ==> (a == 1) is partially proven to be inductive.\nloop invariant (a%2 == 0) ==> (a == 0) is partially proven to be inductive.\nloop invariant (x >= 1) ==> (a <= 2) is partially proven to be inductive.\nloop invariant (y >= 1) ==> (a <= 2) is partially proven to be inductive.\nloop invariant (x >= 1) ==> (a >= 0) is partially proven to be inductive.\nloop invariant (y >= 1) ==> (a >= 0) is partially proven to be inductive.\nloop invariant (flag ==> a == 1) is preserved but not established.\nloop invariant (!flag ==> a == 0) is preserved but not established.\nloop invariant (flag ==> y == 1) is partially proven to be inductive.\nloop invariant (!flag ==> y == 2) is partially proven to be inductive.\nloop invariant (flag ==> x == 1) is partially proven to be inductive.\nloop invariant (!flag ==> x == 2) is partially proven to be inductive.\nloop invariant (flag ==> x >= y) is partially proven to be inductive.\nloop invariant (!flag ==> y >= x) is partially proven to be inductive.\nloop invariant (flag ==> y < 2) is partially proven to be inductive.\nloop invariant (!flag ==> x < 2) is partially proven to be inductive.\nloop invariant (flag ==> y > x) is partially proven to be inductive.\nloop invariant (!flag ==> x > y) is partially proven to be inductive.\nloop invariant (flag ==> a < 2) is partially proven to be inductive.\nloop invariant (!flag ==> a > 0) is partially proven to be inductive.\nloop invariant (flag ==> a > 0) is partially proven to be inductive.\nloop invariant (!flag ==> a < 2) is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: (flag ==> x >= y);\nloop invariant i18: (!flag ==> y >= x);\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 26,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant a <= 100000;\nloop invariant a%2 == 0 ==> x == y;\nloop invariant a%2 == 1 ==> x == y+1;\nloop invariant a%2 == 0 ==> y == x;\nloop invariant a%2 == 1 ==> y == x+1;\nloop invariant a%2 == 0 ==> a == x + y;\nloop invariant a%2 == 1 ==> a == x + y + 1;\nloop invariant a%2 == 0 ==> x >= 1;\nloop invariant a%2 == 1 ==> x >= 0;\nloop invariant a%2 == 0 ==> y >= 1;\nloop invariant a%2 == 1 ==> y >= 0;\nloop invariant a%2 == 0 ==> a >= y;\nloop invariant a%2 == 1 ==> a >= x;\nloop invariant a%2 == 0 ==> x <= a;\nloop invariant a%2 == 1 ==> y <= a;\nloop invariant a%2 == 0 ==> y <= a - 1;\nloop invariant a%2 == 1 ==> x <= a - 1;\nloop invariant a%2 == 0 ==> a <= x + y;\nloop invariant a%2 == 1 ==> a <= x + y + 1;\nloop invariant a%2 == 0 ==> x + y <= a;\nloop invariant a%2 == 1 ==> x + y + 1 <= a;\nloop invariant a%2 == 0 ==> x + y <= a - 1;\nloop invariant a%2 == 1 ==> x + y + 1 <= a - 1;\nloop invariant a%2 == 0 ==> x + y - 1 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 2;\nloop invariant a%2 == 0 ==> x + y - 2 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 3;\nloop invariant a%2 == 0 ==> x + y - 3 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 4;\nloop invariant a%2 == 0 ==> x + y - 4 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 5;\nloop invariant a%2 == 0 ==> x + y - 5 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 6;\nloop invariant a%2 == 0 ==> x + y - 6 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 7;\nloop invariant a%2 == 0 ==> x + y - 7 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 8;\nloop invariant a%2 == 0 ==> x + y - 8 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 9;\nloop invariant a%2 == 0 ==> x + y - 9 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 10;\nloop invariant a%2 == 0 ==> x + y - 10 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 11;\nloop invariant a%2 == 0 ==> x + y - 11 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 12;\nloop invariant a%2 == 0 ==> x + y - 12 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 13;\nloop invariant a%2 == 0 ==> x + y - 13 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 14;\nloop invariant a%2 == 0 ==> x + y - 14 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 15;\nloop invariant a%2 == 0 ==> x + y - 15 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 16;\nloop invariant a%2 == 0 ==> x + y - 16 <= a;\nloop invariant a%2 == 1 ==> x + y <= a - 17;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= 100000 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x == y is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x == y+1 is preserved but not established.\nloop invariant a%2 == 0 ==> y == x is partially proven to be inductive.\nloop invariant a%2 == 1 ==> y == x+1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a == x + y is preserved but not established.\nloop invariant a%2 == 1 ==> a == x + y + 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x >= 1 is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x >= 0 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> y >= 1 is partially proven to be inductive.\nloop invariant a%2 == 1 ==> y >= 0 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a >= y is partially proven to be inductive.\nloop invariant a%2 == 1 ==> a >= x is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> y <= a is partially proven to be inductive.\nloop invariant a%2 == 0 ==> y <= a - 1 is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x <= a - 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a <= x + y is partially proven to be inductive.\nloop invariant a%2 == 1 ==> a <= x + y + 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y + 1 <= a is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y <= a - 1 is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y + 1 <= a - 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 1 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 2 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 2 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 3 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 3 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 4 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 4 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 5 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 5 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 6 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 6 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 7 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 7 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 8 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 8 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 9 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 9 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 10 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 10 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 11 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 11 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 12 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 12 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 13 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 13 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 14 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 14 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 15 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 15 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 16 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> x + y - 16 <= a is partially proven to be inductive.\nloop invariant a%2 == 1 ==> x + y <= a - 17 is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\nloop invariant i4: a >= 0;\n\n\n\n\n\n\n\nloop invariant i12: a%2 == 0 ==> x >= 1;\nloop invariant i13: a%2 == 1 ==> x >= 0;\n\n\n\n\n\n\n\n\nloop invariant i22: a%2 == 0 ==> a <= x + y;\nloop invariant i23: a%2 == 1 ==> a <= x + y + 1;\n\n\n\n\n\n\nloop invariant i30: a%2 == 0 ==> x + y - 2 <= a;\n\nloop invariant i32: a%2 == 0 ==> x + y - 3 <= a;\n\nloop invariant i34: a%2 == 0 ==> x + y - 4 <= a;\n\nloop invariant i36: a%2 == 0 ==> x + y - 5 <= a;\n\nloop invariant i38: a%2 == 0 ==> x + y - 6 <= a;\n\nloop invariant i40: a%2 == 0 ==> x + y - 7 <= a;\n\nloop invariant i42: a%2 == 0 ==> x + y - 8 <= a;\n\nloop invariant i44: a%2 == 0 ==> x + y - 9 <= a;\n\nloop invariant i46: a%2 == 0 ==> x + y - 10 <= a;\n\nloop invariant i48: a%2 == 0 ==> x + y - 11 <= a;\n\nloop invariant i50: a%2 == 0 ==> x + y - 12 <= a;\n\nloop invariant i52: a%2 == 0 ==> x + y - 13 <= a;\n\nloop invariant i54: a%2 == 0 ==> x + y - 14 <= a;\n\nloop invariant i56: a%2 == 0 ==> x + y - 15 <= a;\n\nloop invariant i58: a%2 == 0 ==> x + y - 16 <= a;\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant a%2 == 1 ==> a >= 1;\nloop invariant a%2 == 0 ==> a >= 2;\nloop invariant a%2 == 1 ==> a <= 3;\nloop invariant a%2 == 0 ==> a <= 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 is established but not preserved.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant a%2 == 1 ==> a >= 1 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a >= 2 is neither established nor preserved.\nloop invariant a%2 == 1 ==> a <= 3 is partially proven to be inductive.\nloop invariant a%2 == 0 ==> a <= 4 is partially proven to be inductive.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\nloop invariant i3: a%2 == 1 ==> a >= 1;\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant a <= 100000;\nloop invariant a%2==1 ==> a < 100000;\nloop invariant a%2==1 ==> a >= 1;\nloop invariant a%2==1 ==> a >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> a >= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= y;\nloop invariant a%2==1 ==> x <= 100000;\nloop invariant a%2==1 ==> y <= 100000;\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y >= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is established but not preserved.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant a <= 100000 is established but not preserved.\nloop invariant a%2==1 ==> a < 100000 is partially proven to be inductive.\nloop invariant a%2==1 ==> a >= 1 is partially proven to be inductive.\nloop invariant a%2==1 ==> a >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant a%2==1 ==> a >= (1 + (x - 1) * x / 2) is established but not preserved.\nloop invariant a%2==1 ==> x >= y is partially proven to be inductive.\nloop invariant a%2==1 ==> x <= 100000 is partially proven to be inductive.\nloop invariant a%2==1 ==> y <= 100000 is partially proven to be inductive.\nloop invariant a%2==1 ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant a%2==1 ==> y >= (1 + (x - 1) * x / 2) is established but not preserved.\nloop invariant a%2==1 ==> y <= (1 + (x - 1) * x / 2) is partially proven to be inductive.\nAssertion a % 2 == 1: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: a%2==1 ==> a >= 1;\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a = x + y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant a >= 3;\nloop invariant a <= 4;\nloop invariant flag ==> a == 1;\nloop invariant !flag ==> a == 0;\nloop invariant flag ==> y == x;\nloop invariant !flag ==> y == x + 1;\nloop invariant flag ==> x >= 1;\nloop invariant flag ==> x <= 2;\nloop invariant !flag ==> x >= 1;\nloop invariant !flag ==> x <= 2;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a == 2 * x + y;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant a >= 3;\nloop invariant a <= 4;\nloop invariant flag ==> a == 1;\nloop invariant !flag ==> a == 0;\nloop invariant flag ==> y == x;\nloop invariant !flag ==> y == x + 1;\nloop invariant flag ==> x >= 1;\nloop invariant flag ==> x <= 2;\nloop invariant !flag ==> x >= 1;\nloop invariant !flag ==> x <= 2;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant a == 2 * x + y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 2 is partially proven to be inductive.\nloop invariant 1 <= y <= 2 is partially proven to be inductive.\nloop invariant a >= 3 is preserved but not established.\nloop invariant a <= 4 is partially proven to be inductive.\nloop invariant flag ==> a == 1 is partially proven to be inductive.\nloop invariant !flag ==> a == 0 is partially proven to be inductive.\nloop invariant flag ==> y == x is partially proven to be inductive.\nloop invariant !flag ==> y == x + 1 is partially proven to be inductive.\nloop invariant flag ==> x >= 1 is partially proven to be inductive.\nloop invariant flag ==> x <= 2 is partially proven to be inductive.\nloop invariant !flag ==> x >= 1 is partially proven to be inductive.\nloop invariant !flag ==> x <= 2 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant a == 2 * x + y is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: flag ==> x >= 1;\n\nloop invariant i11: !flag ==> x >= 1;\n\nloop invariant i13: y >= 1;\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= (a + 1);\nloop invariant 1 <= y <= (a + 1);\nloop invariant a%2==1 ==> (x == 1 && y == 1);\nloop invariant a%2==0 ==> (x == 2 && y == 1);\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant x <= a;\nloop invariant y <= a;\nloop invariant a%2==1 ==> (y == (a + 1));\nloop invariant a%2==0 ==> (x == (a + 1));\nloop invariant a%2==1 ==> (x == 1);\nloop invariant a%2==0 ==> (y == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= (a + 1) is partially proven to be inductive.\nloop invariant 1 <= y <= (a + 1) is partially proven to be inductive.\nloop invariant a%2==1 ==> (x == 1 && y == 1) is partially proven to be inductive.\nloop invariant a%2==0 ==> (x == 2 && y == 1) is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x <= a is partially proven to be inductive.\nloop invariant y <= a is partially proven to be inductive.\nloop invariant a%2==1 ==> (y == (a + 1)) is preserved but not established.\nloop invariant a%2==0 ==> (x == (a + 1)) is partially proven to be inductive.\nloop invariant a%2==1 ==> (x == 1) is partially proven to be inductive.\nloop invariant a%2==0 ==> (y == 1) is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: 1 <= x <= (a + 1);\nloop invariant i2: 1 <= y <= (a + 1);\n\n\nloop invariant i5: x >= 1;\nloop invariant i6: y >= 1;\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x+y <= a <= x+y+1;\nloop invariant a%2 == 0 or a%2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 25: unexpected token 'or'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 100000;\nloop invariant a >= x+y;\nloop invariant a >= x+y+1;\nloop invariant a%2==1 ==> y%2==1;\nloop invariant a%2==0 ==> x%2==0;\nloop invariant (flag ==> a%2==1) || (!flag ==> a%2==0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= y <= 100000 is partially proven to be inductive.\nloop invariant a >= x+y is preserved but not established.\nloop invariant a >= x+y+1 is partially proven to be inductive.\nloop invariant a%2==1 ==> y%2==1 is partially proven to be inductive.\nloop invariant a%2==0 ==> x%2==0 is partially proven to be inductive.\nloop invariant (flag ==> a%2==1) || (!flag ==> a%2==0) is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\nloop invariant i6: (flag ==> a%2==1) || (!flag ==> a%2==0);\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant a >= 0;\nloop invariant (x + y) >= a;\nloop invariant a % 2 == 1 ==> a >= 2;\nloop invariant flag == 1 ==> x == y;\nloop invariant flag == 0 ==> x >= y;\nloop invariant a % 2 == 0 ==> a >= 2;\nloop invariant flag == 1 ==> a == x + y + 1;\nloop invariant flag == 0 ==> a == x + y + 2;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a == 2 * x + y + 2;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a >= 3;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a >= 3;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 100000 is partially proven to be inductive.\nloop invariant 1 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant a >= 0 is partially proven to be inductive.\nloop invariant (x + y) >= a is partially proven to be inductive.\nloop invariant a % 2 == 1 ==> a >= 2 is preserved but not established.\nloop invariant flag == 1 ==> x == y is partially proven to be inductive.\nloop invariant flag == 0 ==> x >= y is partially proven to be inductive.\nloop invariant a % 2 == 0 ==> a >= 2 is preserved but not established.\nloop invariant flag == 1 ==> a == x + y + 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a == x + y + 2 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a == 2 * x + y + 2 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a >= 3 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a >= 3 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33 is partially proven to be inductive.\nloop invariant flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1 is partially proven to be inductive.\nAssertion a % 2 == 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\nloop invariant i4: a >= 0;\nloop invariant i5: (x + y) >= a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 142: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 1 <= x <= y + 1;\nloop invariant i4: 1 <= y <= 100000;\nloop invariant i5: (flag ? x == y + 1 : x == y);\nloop invariant i6: 0 <= x <= 100000;\nloop invariant i7: x >= 1;\nloop invariant i8: y >= 1;\nloop invariant i9: x <= y+1;\nloop invariant i10: a >= 1;\nloop invariant i11: a <= 2;\nloop invariant i12: a%2 == 1;\nloop invariant i13: a%2 == 0;\nloop invariant i14: flag == 0;\nloop invariant i15: 1 <= x <= 2;\nloop invariant i16: 1 <= y <= 2;\nloop invariant i17: flag == 0 ==> (0 < a && a < 3);\nloop invariant i18: flag == 1 ==> (0 <= a && a <= 3);\nloop invariant i19: a >= 0;\nloop invariant i20: x + y <= a;\nloop invariant i21: x <= y + 1;\nloop invariant i22: y <= x + 1;\nloop invariant i23: 0 <= a <= 2;\nloop invariant i24: (x >= 1) ==> (y >= 1);\nloop invariant i25: (x >= 1) ==> (x <= 2);\nloop invariant i26: (y >= 1) ==> (y <= 2);\nloop invariant i27: (a%2 == 1) ==> (a == 1);\nloop invariant i28: (a%2 == 0) ==> (a == 0);\nloop invariant i29: (x >= 1) ==> (a <= 2);\nloop invariant i30: (y >= 1) ==> (a <= 2);\nloop invariant i31: (x >= 1) ==> (a >= 0);\nloop invariant i32: (y >= 1) ==> (a >= 0);\nloop invariant i33: (flag ==> a == 1);\nloop invariant i34: (!flag ==> a == 0);\nloop invariant i35: (flag ==> y == 1);\nloop invariant i36: (!flag ==> y == 2);\nloop invariant i37: (flag ==> x == 1);\nloop invariant i38: (!flag ==> x == 2);\nloop invariant i39: (flag ==> x >= y);\nloop invariant i40: (!flag ==> y >= x);\nloop invariant i41: (flag ==> y < 2);\nloop invariant i42: (!flag ==> x < 2);\nloop invariant i43: (flag ==> y > x);\nloop invariant i44: (!flag ==> x > y);\nloop invariant i45: (flag ==> a < 2);\nloop invariant i46: (!flag ==> a > 0);\nloop invariant i47: (flag ==> a > 0);\nloop invariant i48: (!flag ==> a < 2);\nloop invariant i49: a <= 100000;\nloop invariant i50: a%2 == 0 ==> x == y;\nloop invariant i51: a%2 == 1 ==> x == y+1;\nloop invariant i52: a%2 == 0 ==> y == x;\nloop invariant i53: a%2 == 1 ==> y == x+1;\nloop invariant i54: a%2 == 0 ==> a == x + y;\nloop invariant i55: a%2 == 1 ==> a == x + y + 1;\nloop invariant i56: a%2 == 0 ==> x >= 1;\nloop invariant i57: a%2 == 1 ==> x >= 0;\nloop invariant i58: a%2 == 0 ==> y >= 1;\nloop invariant i59: a%2 == 1 ==> y >= 0;\nloop invariant i60: a%2 == 0 ==> a >= y;\nloop invariant i61: a%2 == 1 ==> a >= x;\nloop invariant i62: a%2 == 0 ==> x <= a;\nloop invariant i63: a%2 == 1 ==> y <= a;\nloop invariant i64: a%2 == 0 ==> y <= a - 1;\nloop invariant i65: a%2 == 1 ==> x <= a - 1;\nloop invariant i66: a%2 == 0 ==> a <= x + y;\nloop invariant i67: a%2 == 1 ==> a <= x + y + 1;\nloop invariant i68: a%2 == 0 ==> x + y <= a;\nloop invariant i69: a%2 == 1 ==> x + y + 1 <= a;\nloop invariant i70: a%2 == 0 ==> x + y <= a - 1;\nloop invariant i71: a%2 == 1 ==> x + y + 1 <= a - 1;\nloop invariant i72: a%2 == 0 ==> x + y - 1 <= a;\nloop invariant i73: a%2 == 1 ==> x + y <= a - 2;\nloop invariant i74: a%2 == 0 ==> x + y - 2 <= a;\nloop invariant i75: a%2 == 1 ==> x + y <= a - 3;\nloop invariant i76: a%2 == 0 ==> x + y - 3 <= a;\nloop invariant i77: a%2 == 1 ==> x + y <= a - 4;\nloop invariant i78: a%2 == 0 ==> x + y - 4 <= a;\nloop invariant i79: a%2 == 1 ==> x + y <= a - 5;\nloop invariant i80: a%2 == 0 ==> x + y - 5 <= a;\nloop invariant i81: a%2 == 1 ==> x + y <= a - 6;\nloop invariant i82: a%2 == 0 ==> x + y - 6 <= a;\nloop invariant i83: a%2 == 1 ==> x + y <= a - 7;\nloop invariant i84: a%2 == 0 ==> x + y - 7 <= a;\nloop invariant i85: a%2 == 1 ==> x + y <= a - 8;\nloop invariant i86: a%2 == 0 ==> x + y - 8 <= a;\nloop invariant i87: a%2 == 1 ==> x + y <= a - 9;\nloop invariant i88: a%2 == 0 ==> x + y - 9 <= a;\nloop invariant i89: a%2 == 1 ==> x + y <= a - 10;\nloop invariant i90: a%2 == 0 ==> x + y - 10 <= a;\nloop invariant i91: a%2 == 1 ==> x + y <= a - 11;\nloop invariant i92: a%2 == 0 ==> x + y - 11 <= a;\nloop invariant i93: a%2 == 1 ==> x + y <= a - 12;\nloop invariant i94: a%2 == 0 ==> x + y - 12 <= a;\nloop invariant i95: a%2 == 1 ==> x + y <= a - 13;\nloop invariant i96: a%2 == 0 ==> x + y - 13 <= a;\nloop invariant i97: a%2 == 1 ==> x + y <= a - 14;\nloop invariant i98: a%2 == 0 ==> x + y - 14 <= a;\nloop invariant i99: a%2 == 1 ==> x + y <= a - 15;\nloop invariant i100: a%2 == 0 ==> x + y - 15 <= a;\nloop invariant i101: a%2 == 1 ==> x + y <= a - 16;\nloop invariant i102: a%2 == 0 ==> x + y - 16 <= a;\nloop invariant i103: a%2 == 1 ==> x + y <= a - 17;\nloop invariant i104: 0 <= x <= 2;\nloop invariant i105: 0 <= y <= 2;\nloop invariant i106: a%2 == 1 ==> a >= 1;\nloop invariant i107: a%2 == 0 ==> a >= 2;\nloop invariant i108: a%2 == 1 ==> a <= 3;\nloop invariant i109: a%2 == 0 ==> a <= 4;\nloop invariant i110: a%2==1 ==> a < 100000;\nloop invariant i111: a%2==1 ==> a >= 1;\nloop invariant i112: a%2==1 ==> a >= (1 + (y - 1) * y / 2);\nloop invariant i113: a%2==1 ==> a >= (1 + (x - 1) * x / 2);\nloop invariant i114: a%2==1 ==> x >= y;\nloop invariant i115: a%2==1 ==> x <= 100000;\nloop invariant i116: a%2==1 ==> y <= 100000;\nloop invariant i117: a%2==1 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i118: a%2==1 ==> y >= (1 + (x - 1) * x / 2);\nloop invariant i119: a%2==1 ==> y <= (1 + (x - 1) * x / 2);\nloop invariant i120: a = x + y;\nloop invariant i121: a >= 3;\nloop invariant i122: a <= 4;\nloop invariant i123: flag ==> a == 1;\nloop invariant i124: !flag ==> a == 0;\nloop invariant i125: flag ==> y == x;\nloop invariant i126: !flag ==> y == x + 1;\nloop invariant i127: flag ==> x >= 1;\nloop invariant i128: flag ==> x <= 2;\nloop invariant i129: !flag ==> x >= 1;\nloop invariant i130: !flag ==> x <= 2;\nloop invariant i131: y <= 2;\nloop invariant i132: a == 2 * x + y;\nloop invariant i133: 1 <= x <= (a + 1);\nloop invariant i134: 1 <= y <= (a + 1);\nloop invariant i135: a%2==1 ==> (x == 1 && y == 1);\nloop invariant i136: a%2==0 ==> (x == 2 && y == 1);\nloop invariant i137: x <= y;\nloop invariant i138: x <= a;\nloop invariant i139: y <= a;\nloop invariant i140: a%2==1 ==> (y == (a + 1));\nloop invariant i141: a%2==0 ==> (x == (a + 1));\nloop invariant i142: a%2==1 ==> (x == 1);\nloop invariant i143: a%2==0 ==> (y == 1);\nloop invariant i144: 0 <= x <= y;\nloop invariant i145: x+y <= a <= x+y+1;\nloop invariant i146: a%2 == 0 or a%2 == 1;\nloop invariant i147: 0 <= x <= y <= 100000;\nloop invariant i148: a >= x+y;\nloop invariant i149: a >= x+y+1;\nloop invariant i150: a%2==1 ==> y%2==1;\nloop invariant i151: a%2==0 ==> x%2==0;\nloop invariant i152: (flag ==> a%2==1) || (!flag ==> a%2==0);\nloop invariant i153: 1 <= x <= 100000;\nloop invariant i154: (x + y) >= a;\nloop invariant i155: a % 2 == 1 ==> a >= 2;\nloop invariant i156: flag == 1 ==> x == y;\nloop invariant i157: flag == 0 ==> x >= y;\nloop invariant i158: a % 2 == 0 ==> a >= 2;\nloop invariant i159: flag == 1 ==> a == x + y + 1;\nloop invariant i160: flag == 0 ==> a == x + y + 2;\nloop invariant i161: flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y;\nloop invariant i162: flag == 0 ==> a % 2 == 1 ==> a == 2 * x + y + 2;\nloop invariant i163: flag == 1 ==> a % 2 == 1 ==> a >= 3;\nloop invariant i164: flag == 0 ==> a % 2 == 1 ==> a >= 3;\nloop invariant i165: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant i166: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1;\nloop invariant i167: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant i168: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\nloop invariant i169: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant i170: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\nloop invariant i171: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant i172: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\nloop invariant i173: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant i174: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\nloop invariant i175: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant i176: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\nloop invariant i177: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant i178: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\nloop invariant i179: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant i180: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\nloop invariant i181: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\nloop invariant i182: flag == 0 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 65,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: x >= 1;\nloop invariant i8: y >= 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: a >= 0;\n\n\n\n\nloop invariant i24: (x >= 1) ==> (y >= 1);\n\n\n\n\n\n\nloop invariant i31: (x >= 1) ==> (a >= 0);\nloop invariant i32: (y >= 1) ==> (a >= 0);\n\n\nloop invariant i35: (flag ==> y == 1);\n\n\n\nloop invariant i39: (flag ==> x >= y);\nloop invariant i40: (!flag ==> y >= x);\nloop invariant i41: (flag ==> y < 2);\nloop invariant i42: (!flag ==> x < 2);\n\n\n\nloop invariant i46: (!flag ==> a > 0);\n\n\n\n\n\n\n\n\n\nloop invariant i56: a%2 == 0 ==> x >= 1;\nloop invariant i57: a%2 == 1 ==> x >= 0;\nloop invariant i58: a%2 == 0 ==> y >= 1;\nloop invariant i59: a%2 == 1 ==> y >= 0;\n\nloop invariant i61: a%2 == 1 ==> a >= x;\n\nloop invariant i63: a%2 == 1 ==> y <= a;\n\n\nloop invariant i66: a%2 == 0 ==> a <= x + y;\nloop invariant i67: a%2 == 1 ==> a <= x + y + 1;\n\n\n\n\n\n\nloop invariant i74: a%2 == 0 ==> x + y - 2 <= a;\n\nloop invariant i76: a%2 == 0 ==> x + y - 3 <= a;\n\nloop invariant i78: a%2 == 0 ==> x + y - 4 <= a;\n\nloop invariant i80: a%2 == 0 ==> x + y - 5 <= a;\n\nloop invariant i82: a%2 == 0 ==> x + y - 6 <= a;\n\nloop invariant i84: a%2 == 0 ==> x + y - 7 <= a;\n\nloop invariant i86: a%2 == 0 ==> x + y - 8 <= a;\n\nloop invariant i88: a%2 == 0 ==> x + y - 9 <= a;\n\nloop invariant i90: a%2 == 0 ==> x + y - 10 <= a;\n\nloop invariant i92: a%2 == 0 ==> x + y - 11 <= a;\n\nloop invariant i94: a%2 == 0 ==> x + y - 12 <= a;\n\nloop invariant i96: a%2 == 0 ==> x + y - 13 <= a;\n\nloop invariant i98: a%2 == 0 ==> x + y - 14 <= a;\n\nloop invariant i100: a%2 == 0 ==> x + y - 15 <= a;\n\nloop invariant i102: a%2 == 0 ==> x + y - 16 <= a;\n\n\n\nloop invariant i106: a%2 == 1 ==> a >= 1;\n\n\n\n\nloop invariant i111: a%2==1 ==> a >= 1;\n\nloop invariant i113: a%2==1 ==> a >= (1 + (x - 1) * x / 2);\n\nloop invariant i115: a%2==1 ==> x <= 100000;\n\n\nloop invariant i118: a%2==1 ==> y >= (1 + (x - 1) * x / 2);\n\n\n\n\n\n\n\n\nloop invariant i127: flag ==> x >= 1;\n\nloop invariant i129: !flag ==> x >= 1;\nloop invariant i130: !flag ==> x <= 2;\n\n\nloop invariant i133: 1 <= x <= (a + 1);\nloop invariant i134: 1 <= y <= (a + 1);\n\n\n\n\n\n\nloop invariant i141: a%2==0 ==> (x == (a + 1));\nloop invariant i142: a%2==1 ==> (x == 1);\nloop invariant i143: a%2==0 ==> (y == 1);\n\n\n\n\n\n\nloop invariant i150: a%2==1 ==> y%2==1;\n\nloop invariant i152: (flag ==> a%2==1) || (!flag ==> a%2==0);\n\nloop invariant i154: (x + y) >= a;\n\n\n\n\n\n\nloop invariant i161: flag == 1 ==> a % 2 == 1 ==> a == 2 * x + y;\n\nloop invariant i163: flag == 1 ==> a % 2 == 1 ==> a >= 3;\n\nloop invariant i165: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1;\n\nloop invariant i167: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a >= 5;\n\nloop invariant i169: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1;\n\nloop invariant i171: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a >= 9;\n\nloop invariant i173: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1;\n\nloop invariant i175: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a >= 17;\n\nloop invariant i177: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1;\n\nloop invariant i179: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a >= 33;\n\nloop invariant i181: flag == 1 ==> a % 2 == 1 ==> a % 4 == 1 ==> a % 8 == 1 ==> a % 16 == 1 ==> a % 32 == 1 ==> a % 64 == 1;\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c",
            "../dataset/loop_invariants/code2inv/122.c",
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 6,
        "failure_count": 17,
        "success_rate": 0.2608695652173913
    }
}