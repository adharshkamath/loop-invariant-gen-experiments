{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= leader_len + ielen;\nloop invariant p <= bufsize + leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant i <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant bufsize >= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= bufsize_0 <= LARGE_INT;\nloop invariant 0 <= leader_len <= LARGE_INT;\nloop invariant 0 <= ielen <= LARGE_INT;\nloop invariant 0 <= bufsize_0 <= LARGE_INT;\nloop invariant bufsize_0 >= bufsize + 2 * ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 2 * ielen;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant p >= 2*i;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;loop invariant bufsize >= bufsize_0 - p;loop invariant i >= 0;loop invariant i < ielen;loop invariant bufsize >= 2;loop invariant i * 2 <= bufsize;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant p + leader_len <= bufsize <= bufsize_0;\nloop invariant i >= 0 ==> i <= ielen;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize >= 2*i*(i+1) + leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize >= 2*(i+1) + leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant i <= ielen;\nloop invariant i <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= ielen;\nloop invariant 2 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p + 1 < bufsize_0 ==> i < ielen;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= leader_len + ielen;\nloop invariant p <= bufsize + leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize >= 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize >= 2*(i);\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= leader_len + ielen is established but not preserved.\nloop invariant p <= bufsize + leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize >= 2*(ielen-i) is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2*(ielen-i) is preserved but not established.\nloop invariant bufsize <= bufsize_0 - 2*i is established but not preserved.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*(i) is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize <= bufsize_0;\nloop invariant i3: p >= 0;\nloop invariant i4: p <= bufsize_0;\n\n\n\nloop invariant i8: bufsize >= 2*(ielen-i);\n\n\nloop invariant i11: bufsize >= 2;\n\nloop invariant i13: bufsize <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant i <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant bufsize >= 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant i <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: i <= p <= bufsize_0;\nloop invariant i3: i >= 0;\nloop invariant i4: bufsize >= 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= bufsize_0 <= LARGE_INT;\nloop invariant 0 <= leader_len <= LARGE_INT;\nloop invariant 0 <= ielen <= LARGE_INT;\nloop invariant 0 <= bufsize_0 <= LARGE_INT;\nloop invariant bufsize_0 >= bufsize + 2 * ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 2 * ielen;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 >= 1;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize_0 >= ielen;\nloop invariant bufsize_0 >= i;\nloop invariant bufsize_0 >= p;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= leader_len <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= ielen <= LARGE_INT is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize + 2 * ielen is preserved but not established.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= 2 * ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= 1 is partially proven to be inductive.\nloop invariant bufsize_0 >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= i is partially proven to be inductive.\nloop invariant bufsize_0 >= p is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0;\nloop invariant i4: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i5: 0 <= leader_len <= LARGE_INT;\nloop invariant i6: 0 <= ielen <= LARGE_INT;\n\nloop invariant i8: bufsize_0 >= leader_len;\nloop invariant i9: bufsize_0 >= 2 * ielen;\nloop invariant i10: bufsize_0 >= 2;\nloop invariant i11: bufsize_0 >= 1;\nloop invariant i12: bufsize_0 >= 0;\nloop invariant i13: bufsize_0 >= ielen;\nloop invariant i14: bufsize_0 >= i;\nloop invariant i15: bufsize_0 >= p;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2*i;\nloop invariant p >= 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant p >= 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= p <= bufsize_0;\n\nloop invariant i5: p >= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;loop invariant bufsize >= bufsize_0 - p;loop invariant i >= 0;loop invariant i < ielen;loop invariant bufsize >= 2;loop invariant i * 2 <= bufsize;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0;loop invariant bufsize >= bufsize_0 - p;loop invariant i >= 0;loop invariant i < ielen;loop invariant bufsize >= 2;loop invariant i * 2 <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;loop invariant bufsize >= bufsize_0 - p;loop invariant i >= 0;loop invariant i < ielen;loop invariant bufsize >= 2;loop invariant i * 2 <= bufsize;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant p + leader_len <= bufsize <= bufsize_0;\nloop invariant i >= 0 ==> i <= ielen;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize >= 2*i*(i+1) + leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize >= 2*(i+1) + leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant p + leader_len <= bufsize <= bufsize_0 is neither established nor preserved.\nloop invariant i >= 0 ==> i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len - 2*i is established but not preserved.\nloop invariant bufsize >= 2*i*(i+1) ==> bufsize >= 2*i*(i+1) + leader_len is established but not preserved.\nloop invariant bufsize >= 2*(i+1) ==> bufsize >= 2*(i+1) + leader_len is neither established nor preserved.\nloop invariant bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: i >= 0 ==> i <= ielen;\nloop invariant i3: bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\n\n\n\nloop invariant i7: bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant i <= ielen;\nloop invariant i <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize_0 <= ielen;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant ielen <= LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize is preserved but not established.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 <= ielen is preserved but not established.\nloop invariant ielen <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 <= LARGE_INT is partially proven to be inductive.\nloop invariant ielen <= LARGE_INT is partially proven to be inductive.\nloop invariant bufsize_0 <= bufsize is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant i <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: 0 <= bufsize;\nloop invariant i3: 0 <= bufsize_0;\n\nloop invariant i5: bufsize <= bufsize_0;\n\nloop invariant i7: ielen <= bufsize_0;\nloop invariant i8: bufsize_0 <= LARGE_INT;\nloop invariant i9: ielen <= LARGE_INT;\n\nloop invariant i11: i <= ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= ielen;\nloop invariant 2 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= ielen is preserved but not established.\nloop invariant 2 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: 2 <= bufsize <= bufsize_0;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p + 1 < bufsize_0 ==> i < ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < ielen is established but not preserved.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 ==> i < ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: p >= 0;\nloop invariant i4: p <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 58: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize <= bufsize_0;\nloop invariant i3: p >= 0;\nloop invariant i4: p <= bufsize_0;\nloop invariant i5: p <= leader_len + ielen;\nloop invariant i6: p <= bufsize + leader_len;\nloop invariant i7: bufsize >= 2*i;\nloop invariant i8: bufsize >= 2*(ielen-i);\nloop invariant i9: bufsize <= bufsize_0 - 2*(ielen-i);\nloop invariant i10: bufsize <= bufsize_0 - 2*i;\nloop invariant i11: bufsize >= 2;\nloop invariant i12: bufsize >= 2*(i);\nloop invariant i13: bufsize <= bufsize_0;\nloop invariant i14: i1;\nloop invariant i15: i2;\nloop invariant i16: i <= p <= bufsize_0;\nloop invariant i17: i >= 0;\nloop invariant i18: 0 <= p <= bufsize_0;\nloop invariant i19: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i20: 0 <= leader_len <= LARGE_INT;\nloop invariant i21: 0 <= ielen <= LARGE_INT;\nloop invariant i22: bufsize_0 >= bufsize + 2 * ielen;\nloop invariant i23: bufsize_0 >= leader_len;\nloop invariant i24: bufsize_0 >= 2 * ielen;\nloop invariant i25: bufsize_0 >= 2;\nloop invariant i26: bufsize_0 >= 1;\nloop invariant i27: bufsize_0 >= 0;\nloop invariant i28: bufsize_0 >= ielen;\nloop invariant i29: bufsize_0 >= i;\nloop invariant i30: bufsize_0 >= p;\nloop invariant i31: p >= 2*i;\nloop invariant i32: i3;\nloop invariant i33: i4;\nloop invariant i34: i5;\nloop invariant i35: i6;\nloop invariant i36: i7;\nloop invariant i37: i8;\nloop invariant i38: i9;\nloop invariant i39: i10;\nloop invariant i40: i11;\nloop invariant i41: i12;\nloop invariant i42: i13;\nloop invariant i43: i14;\nloop invariant i44: i15;\nloop invariant i45: i16;\nloop invariant i46: i17;\nloop invariant i47: i18;\nloop invariant i48: i19;\nloop invariant i49: i20;\nloop invariant i50: i21;\nloop invariant i51: i22;\nloop invariant i52: i23;\nloop invariant i53: i24;\nloop invariant i54: i25;\nloop invariant i55: i26;\nloop invariant i56: i27;\nloop invariant i57: i28;\nloop invariant i58: i29;\nloop invariant i59: i30;\nloop invariant i60: i31;\nloop invariant i61: i32;\nloop invariant i62: i33;\nloop invariant i63: i34;\nloop invariant i64: i35;\nloop invariant i65: i36;\nloop invariant i66: i37;\nloop invariant i67: i38;\nloop invariant i68: i39;\nloop invariant i69: i40;\nloop invariant i70: i41;\nloop invariant i71: i42;\nloop invariant i72: i43;\nloop invariant i73: i44;\nloop invariant i74: i45;\nloop invariant i75: i46;\nloop invariant i76: i47;\nloop invariant i77: i48;\nloop invariant i78: i49;\nloop invariant i79: i50;\nloop invariant i80: i51;\nloop invariant i81: i52;\nloop invariant i82: i53;\nloop invariant i83: i54;\nloop invariant i84: i55;\nloop invariant i85: i56;\nloop invariant i86: i57;\nloop invariant i87: i58;\nloop invariant i88: i59;\nloop invariant i89: i60;\nloop invariant i90: i61;\nloop invariant i91: i62;\nloop invariant i92: i63;\nloop invariant i93: i64;\nloop invariant i94: i65;\nloop invariant i95: i66;\nloop invariant i96: i67;\nloop invariant i97: i68;\nloop invariant i98: i69;\nloop invariant i99: i70;\nloop invariant i100: i71;\nloop invariant i101: i72;\nloop invariant i102: i73;\nloop invariant i103: i74;\nloop invariant i104: i75;\nloop invariant i105: i76;\nloop invariant i106: i77;\nloop invariant i107: i78;\nloop invariant i108: i79;\nloop invariant i109: i80;\nloop invariant i110: i81;\nloop invariant i111: i82;\nloop invariant i112: i83;\nloop invariant i113: i84;\nloop invariant i114: i85;\nloop invariant i115: i86;\nloop invariant i116: i87;\nloop invariant i117: i88;\nloop invariant i118: i89;\nloop invariant i119: i90;\nloop invariant i120: i91;\nloop invariant i121: i92;\nloop invariant i122: i93;\nloop invariant i123: i94;\nloop invariant i124: i95;\nloop invariant i125: i96;\nloop invariant i126: i97;\nloop invariant i127: i98;\nloop invariant i128: i99;\nloop invariant i129: i100;\nloop invariant i130: i101;\nloop invariant i131: i102;\nloop invariant i132: i103;\nloop invariant i133: i104;\nloop invariant i134: i105;\nloop invariant i135: i106;\nloop invariant i136: i107;\nloop invariant i137: i108;\nloop invariant i138: i109;\nloop invariant i139: i110;\nloop invariant i140: i111;\nloop invariant i141: i112;\nloop invariant i142: i113;\nloop invariant i143: i114;\nloop invariant i144: i115;\nloop invariant i145: i116;\nloop invariant i146: i117;\nloop invariant i147: i118;\nloop invariant i148: i119;\nloop invariant i149: i120;\nloop invariant i150: i121;\nloop invariant i151: i122;\nloop invariant i152: i123;\nloop invariant i153: i124;\nloop invariant i154: i125;\nloop invariant i155: i126;\nloop invariant i156: i127;\nloop invariant i157: i128;\nloop invariant i158: i129;\nloop invariant i159: i130;\nloop invariant i160: i131;\nloop invariant i161: i132;\nloop invariant i162: i133;\nloop invariant i163: i134;\nloop invariant i164: i135;\nloop invariant i165: i136;\nloop invariant i166: i137;\nloop invariant i167: i138;\nloop invariant i168: i139;\nloop invariant i169: i140;\nloop invariant i170: i141;\nloop invariant i171: i142;\nloop invariant i172: i143;\nloop invariant i173: i144;\nloop invariant i174: i145;\nloop invariant i175: i146;\nloop invariant i176: i147;\nloop invariant i177: i148;\nloop invariant i178: i149;\nloop invariant i179: i150;\nloop invariant i180: i151;\nloop invariant i181: i152;\nloop invariant i182: i153;\nloop invariant i183: i154;\nloop invariant i184: i155;\nloop invariant i185: i156;\nloop invariant i186: i157;\nloop invariant i187: i158;\nloop invariant i188: 0 <= p <= bufsize_0;loop invariant bufsize >= bufsize_0 - p;loop invariant i >= 0;loop invariant i < ielen;loop invariant bufsize >= 2;loop invariant i * 2 <= bufsize;\nloop invariant i189: p + leader_len <= bufsize <= bufsize_0;\nloop invariant i190: i >= 0 ==> i <= ielen;\nloop invariant i191: bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant i192: bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant i193: bufsize >= 2*i*(i+1) ==> bufsize >= 2*i*(i+1) + leader_len;\nloop invariant i194: bufsize >= 2*(i+1) ==> bufsize >= 2*(i+1) + leader_len;\nloop invariant i195: bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant i196: 0 <= p;\nloop invariant i197: 0 <= bufsize;\nloop invariant i198: 0 <= bufsize_0;\nloop invariant i199: p <= bufsize;\nloop invariant i200: bufsize_0 <= ielen;\nloop invariant i201: ielen <= bufsize_0;\nloop invariant i202: bufsize_0 <= LARGE_INT;\nloop invariant i203: ielen <= LARGE_INT;\nloop invariant i204: bufsize_0 <= bufsize;\nloop invariant i205: i <= ielen;\nloop invariant i206: i <= bufsize;\nloop invariant i207: 1 <= i <= ielen;\nloop invariant i208: 2 <= bufsize <= bufsize_0;\nloop invariant i209: i < ielen;\nloop invariant i210: p + 1 < bufsize_0 ==> i < ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "combined_annotation_num_solver_calls": 165,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize <= bufsize_0;\nloop invariant i3: p >= 0;\nloop invariant i4: p <= bufsize_0;\n\n\n\nloop invariant i8: bufsize >= 2*(ielen-i);\n\n\nloop invariant i11: bufsize >= 2;\n\nloop invariant i13: bufsize <= bufsize_0;\n\n\nloop invariant i16: i <= p <= bufsize_0;\nloop invariant i17: i >= 0;\nloop invariant i18: 0 <= p <= bufsize_0;\nloop invariant i19: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i20: 0 <= leader_len <= LARGE_INT;\nloop invariant i21: 0 <= ielen <= LARGE_INT;\n\nloop invariant i23: bufsize_0 >= leader_len;\nloop invariant i24: bufsize_0 >= 2 * ielen;\nloop invariant i25: bufsize_0 >= 2;\nloop invariant i26: bufsize_0 >= 1;\nloop invariant i27: bufsize_0 >= 0;\nloop invariant i28: bufsize_0 >= ielen;\nloop invariant i29: bufsize_0 >= i;\nloop invariant i30: bufsize_0 >= p;\nloop invariant i31: p >= 2*i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i188: 0 <= p <= bufsize_0;loop invariant bufsize >= bufsize_0 - p;loop invariant i >= 0;loop invariant i < ielen;loop invariant bufsize >= 2;loop invariant i * 2 <= bufsize;\n\nloop invariant i190: i >= 0 ==> i <= ielen;\nloop invariant i191: bufsize >= 2*i*(i+1) ==> bufsize <= bufsize_0 - leader_len;\n\n\n\nloop invariant i195: bufsize >= 2*(i+1) ==> bufsize <= bufsize_0 - leader_len;\nloop invariant i196: 0 <= p;\nloop invariant i197: 0 <= bufsize;\nloop invariant i198: 0 <= bufsize_0;\n\n\nloop invariant i201: ielen <= bufsize_0;\nloop invariant i202: bufsize_0 <= LARGE_INT;\nloop invariant i203: ielen <= LARGE_INT;\n\nloop invariant i205: i <= ielen;\nloop invariant i206: i <= bufsize;\n\nloop invariant i208: 2 <= bufsize <= bufsize_0;\nloop invariant i209: i < ielen;\nloop invariant i210: p + 1 < bufsize_0 ==> i < ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 1,
        "success_count": 0,
        "failure_count": 1,
        "success_rate": 0.0
    }
}