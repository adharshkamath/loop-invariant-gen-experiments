{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p >= 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 2 <= bufsize <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 2 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 2 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant bufsize + 2*i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= LARGE_INT - 1;\nloop invariant 0 <= bufsize_0 <= LARGE_INT - 1;\nloop invariant 0 <= i < ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 - p > 2;\nloop invariant bufsize_0 - leader_len >= 2 * i;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * i + leader_len;\nloop invariant bufsize >= 2 * i + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i <= ielen; loop invariant p + 1 < bufsize_0 ==> 2 <= bufsize; loop invariant p + 1 < bufsize_0 ==> i < ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i; loop invariant p + 1 < bufsize_0 ==> p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i - 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant i <= bufsize / 2;\nloop invariant i <= bufsize - 2;\nloop invariant i <= bufsize_0 - 2;\nloop invariant p <= bufsize_0 - 2;\nloop invariant p <= bufsize_0 - i * 2;\nloop invariant p <= bufsize_0 - 2 - bufsize_0 / 2;\nloop invariant p <= bufsize_0 - 3;\nloop invariant p <= bufsize_0 - 4;\nloop invariant p <= bufsize_0 - 5;\nloop invariant p <= bufsize_0 - 6;\nloop invariant p <= bufsize_0 - 7;\nloop invariant p <= bufsize_0 - 8;\nloop invariant p <= bufsize_0 - 9;\nloop invariant p <= bufsize_0 - 10;\nloop invariant p <= bufsize_0 - 11;\nloop invariant p <= bufsize_0 - 12;\nloop invariant p <= bufsize_0 - 13;\nloop invariant p <= bufsize_0 - 14;\nloop invariant p <= bufsize_0 - 15;\nloop invariant p <= bufsize_0 - 16;\nloop invariant p <= bufsize_0 - 17;\nloop invariant p <= bufsize_0 - 18;\nloop invariant p <= bufsize_0 - 19;\nloop invariant p <= bufsize_0 - 20;\nloop invariant p <= bufsize_0 - 21;\nloop invariant p <= bufsize_0 - 22;\nloop invariant p <= bufsize_0 - 23;\nloop invariant p <= bufsize_0 - 24;\nloop invariant p <= bufsize_0 - 25;\nloop invariant p <= bufsize_0 - 26;\nloop invariant p <= bufsize_0 - 27;\nloop invariant p <= bufsize_0 - 28;\nloop invariant p <= bufsize_0 - 29;\nloop invariant p <= bufsize_0 - 30;\nloop invariant p <= bufsize_0 - 31;\nloop invariant p <= bufsize_0 - 32;\nloop invariant p <= bufsize_0 - 33;\nloop invariant p <= bufsize_0 - 34;\nloop invariant p <= bufsize_0 - 35;\nloop invariant p <= bufsize_0 - 36;\nloop invariant p <= bufsize_0 - 37;\nloop invariant p <= bufsize_0 - 38;\nloop invariant p <= bufsize_0 - 39;\nloop invariant p <= bufsize_0 - 40;\nloop invariant p <= bufsize_0 - 41;\nloop invariant p <= bufsize_0 - 42;\nloop invariant p <= bufsize_0 - 43;\nloop invariant p <= bufsize_0 - 44;\nloop invariant p <= bufsize_0 - 45;\nloop invariant p <= bufsize_0 - 46;\nloop invariant p <= bufsize_0 - 47;\nloop invariant p <= bufsize_0 - 48;\nloop invariant p <= bufsize_0 - 49;\nloop invariant p <= bufsize_0 - 50;\nloop invariant p <= bufsize_0 - 51;\nloop invariant p <= bufsize_0 - 52;\nloop invariant p <= bufsize_0 - 53;\nloop invariant p <= bufsize_0 - 54;\nloop invariant p <= bufsize_0 - 55;\nloop invariant p <= bufsize_0 - 56;\nloop invariant p <= bufsize_0 - 57;\nloop invariant p <= bufsize_0 - 58;\nloop invariant p <= bufsize_0 - 59;\nloop invariant p <= bufsize_0 - 60;\nloop invariant p <= bufsize_0 - 61;\nloop invariant p <= bufsize_0 - 62;\nloop invariant p <= bufsize_0 - 63;\nloop invariant p <= bufsize_0 - 64;\nloop invariant p <= bufsize_0 - 65;\nloop invariant p <= bufsize_0 - 66;\nloop invariant p <= bufsize_0 - 67;\nloop invariant p <= bufsize_0 - 68;\nloop invariant p <= bufsize_0 - 69;\nloop invariant p <= bufsize_0 - 70;\nloop invariant p <= bufsize_0 - 71;\nloop invariant p <= bufsize_0 - 72;\nloop invariant p <= bufsize_0 - 73;\nloop invariant p <= bufsize_0 - 74;\nloop invariant p <= bufsize_0 - 75;\nloop invariant p <= bufsize_0 - 76;\nloop invariant p <= bufsize_0 - 77;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p % 2 == 0;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1);\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;loop invariant 0 <= i <= ielen;loop invariant p+1 < bufsize_0 ==> bufsize <= 2*i + 2;loop invariant bufsize < 2*i + 2 ==> i >= ielen;loop invariant i >= ielen ==> bufsize <= 2;loop invariant bufsize <= 2 ==> i = ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 < bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2*(ielen - i) + 2;\nloop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant bufsize > 2*i;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p >= 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 >= leader_len && bufsize_0 >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p + 1 <= bufsize - leader_len;\nloop invariant p + 1 <= bufsize - 2 * i;\nloop invariant p + 1 <= bufsize - 2 * (i + 1);\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\n*/\n```",
            "```\n/*@\nloop invariant bufsize >= 0;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant 0 <= p <= 2*i;\nloop invariant bufsize >= 0;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant 0 <= p <= 2*i;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p >= 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 2 <= bufsize <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 2 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 2 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < ielen is established but not preserved.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 2 * i is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 2 <= bufsize <= bufsize_0 - 2 * i is established but not preserved.\nloop invariant 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant 2 <= bufsize - 2 * i <= bufsize_0 - 2 * i is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: p >= 2 * i;\nloop invariant i4: 0 <= bufsize <= bufsize_0;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant bufsize + 2*i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p + 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize + 2*i <= ielen is preserved but not established.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\n\nloop invariant i4: bufsize >= 0;\nloop invariant i5: bufsize <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= LARGE_INT - 1;\nloop invariant 0 <= bufsize_0 <= LARGE_INT - 1;\nloop invariant 0 <= i < ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 - p > 2;\nloop invariant bufsize_0 - leader_len >= 2 * i;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * i + leader_len;\nloop invariant bufsize >= 2 * i + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\nloop invariant bufsize >= 2 * i + leader_len + 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize <= LARGE_INT - 1 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 <= LARGE_INT - 1 is partially proven to be inductive.\nloop invariant 0 <= i < ielen is established but not preserved.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - p > 2 is neither established nor preserved.\nloop invariant bufsize_0 - leader_len >= 2 * i is established but not preserved.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2 * i + leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2 * i + 2 is established but not preserved.\nloop invariant bufsize >= 2 * i + leader_len + 2 is neither established nor preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= LARGE_INT - 1;\nloop invariant i2: 0 <= bufsize_0 <= LARGE_INT - 1;\n\nloop invariant i4: 0 <= p <= bufsize_0;\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i <= ielen; loop invariant p + 1 < bufsize_0 ==> 2 <= bufsize; loop invariant p + 1 < bufsize_0 ==> i < ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i; loop invariant p + 1 < bufsize_0 ==> p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i - 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i <= ielen; loop invariant p + 1 < bufsize_0 ==> 2 <= bufsize; loop invariant p + 1 < bufsize_0 ==> i < ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i; loop invariant p + 1 < bufsize_0 ==> p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i - 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1) is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i <= ielen; loop invariant p + 1 < bufsize_0 ==> 2 <= bufsize; loop invariant p + 1 < bufsize_0 ==> i < ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i; loop invariant p + 1 < bufsize_0 ==> p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i - 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant i <= bufsize / 2;\nloop invariant i <= bufsize - 2;\nloop invariant i <= bufsize_0 - 2;\nloop invariant p <= bufsize_0 - 2;\nloop invariant p <= bufsize_0 - i * 2;\nloop invariant p <= bufsize_0 - 2 - bufsize_0 / 2;\nloop invariant p <= bufsize_0 - 3;\nloop invariant p <= bufsize_0 - 4;\nloop invariant p <= bufsize_0 - 5;\nloop invariant p <= bufsize_0 - 6;\nloop invariant p <= bufsize_0 - 7;\nloop invariant p <= bufsize_0 - 8;\nloop invariant p <= bufsize_0 - 9;\nloop invariant p <= bufsize_0 - 10;\nloop invariant p <= bufsize_0 - 11;\nloop invariant p <= bufsize_0 - 12;\nloop invariant p <= bufsize_0 - 13;\nloop invariant p <= bufsize_0 - 14;\nloop invariant p <= bufsize_0 - 15;\nloop invariant p <= bufsize_0 - 16;\nloop invariant p <= bufsize_0 - 17;\nloop invariant p <= bufsize_0 - 18;\nloop invariant p <= bufsize_0 - 19;\nloop invariant p <= bufsize_0 - 20;\nloop invariant p <= bufsize_0 - 21;\nloop invariant p <= bufsize_0 - 22;\nloop invariant p <= bufsize_0 - 23;\nloop invariant p <= bufsize_0 - 24;\nloop invariant p <= bufsize_0 - 25;\nloop invariant p <= bufsize_0 - 26;\nloop invariant p <= bufsize_0 - 27;\nloop invariant p <= bufsize_0 - 28;\nloop invariant p <= bufsize_0 - 29;\nloop invariant p <= bufsize_0 - 30;\nloop invariant p <= bufsize_0 - 31;\nloop invariant p <= bufsize_0 - 32;\nloop invariant p <= bufsize_0 - 33;\nloop invariant p <= bufsize_0 - 34;\nloop invariant p <= bufsize_0 - 35;\nloop invariant p <= bufsize_0 - 36;\nloop invariant p <= bufsize_0 - 37;\nloop invariant p <= bufsize_0 - 38;\nloop invariant p <= bufsize_0 - 39;\nloop invariant p <= bufsize_0 - 40;\nloop invariant p <= bufsize_0 - 41;\nloop invariant p <= bufsize_0 - 42;\nloop invariant p <= bufsize_0 - 43;\nloop invariant p <= bufsize_0 - 44;\nloop invariant p <= bufsize_0 - 45;\nloop invariant p <= bufsize_0 - 46;\nloop invariant p <= bufsize_0 - 47;\nloop invariant p <= bufsize_0 - 48;\nloop invariant p <= bufsize_0 - 49;\nloop invariant p <= bufsize_0 - 50;\nloop invariant p <= bufsize_0 - 51;\nloop invariant p <= bufsize_0 - 52;\nloop invariant p <= bufsize_0 - 53;\nloop invariant p <= bufsize_0 - 54;\nloop invariant p <= bufsize_0 - 55;\nloop invariant p <= bufsize_0 - 56;\nloop invariant p <= bufsize_0 - 57;\nloop invariant p <= bufsize_0 - 58;\nloop invariant p <= bufsize_0 - 59;\nloop invariant p <= bufsize_0 - 60;\nloop invariant p <= bufsize_0 - 61;\nloop invariant p <= bufsize_0 - 62;\nloop invariant p <= bufsize_0 - 63;\nloop invariant p <= bufsize_0 - 64;\nloop invariant p <= bufsize_0 - 65;\nloop invariant p <= bufsize_0 - 66;\nloop invariant p <= bufsize_0 - 67;\nloop invariant p <= bufsize_0 - 68;\nloop invariant p <= bufsize_0 - 69;\nloop invariant p <= bufsize_0 - 70;\nloop invariant p <= bufsize_0 - 71;\nloop invariant p <= bufsize_0 - 72;\nloop invariant p <= bufsize_0 - 73;\nloop invariant p <= bufsize_0 - 74;\nloop invariant p <= bufsize_0 - 75;\nloop invariant p <= bufsize_0 - 76;\nloop invariant p <= bufsize_0 - 77;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant i <= bufsize / 2 is established but not preserved.\nloop invariant i <= bufsize - 2 is partially proven to be inductive.\nloop invariant i <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - i * 2 is established but not preserved.\nloop invariant p <= bufsize_0 - 2 - bufsize_0 / 2 is neither established nor preserved.\nloop invariant p <= bufsize_0 - 3 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 4 is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 5 is preserved but not established.\nloop invariant p <= bufsize_0 - 6 is preserved but not established.\nloop invariant p <= bufsize_0 - 7 is preserved but not established.\nloop invariant p <= bufsize_0 - 8 is preserved but not established.\nloop invariant p <= bufsize_0 - 9 is preserved but not established.\nloop invariant p <= bufsize_0 - 10 is preserved but not established.\nloop invariant p <= bufsize_0 - 11 is preserved but not established.\nloop invariant p <= bufsize_0 - 12 is preserved but not established.\nloop invariant p <= bufsize_0 - 13 is preserved but not established.\nloop invariant p <= bufsize_0 - 14 is preserved but not established.\nloop invariant p <= bufsize_0 - 15 is preserved but not established.\nloop invariant p <= bufsize_0 - 16 is preserved but not established.\nloop invariant p <= bufsize_0 - 17 is preserved but not established.\nloop invariant p <= bufsize_0 - 18 is preserved but not established.\nloop invariant p <= bufsize_0 - 19 is preserved but not established.\nloop invariant p <= bufsize_0 - 20 is preserved but not established.\nloop invariant p <= bufsize_0 - 21 is preserved but not established.\nloop invariant p <= bufsize_0 - 22 is preserved but not established.\nloop invariant p <= bufsize_0 - 23 is preserved but not established.\nloop invariant p <= bufsize_0 - 24 is preserved but not established.\nloop invariant p <= bufsize_0 - 25 is preserved but not established.\nloop invariant p <= bufsize_0 - 26 is preserved but not established.\nloop invariant p <= bufsize_0 - 27 is preserved but not established.\nloop invariant p <= bufsize_0 - 28 is preserved but not established.\nloop invariant p <= bufsize_0 - 29 is preserved but not established.\nloop invariant p <= bufsize_0 - 30 is preserved but not established.\nloop invariant p <= bufsize_0 - 31 is preserved but not established.\nloop invariant p <= bufsize_0 - 32 is preserved but not established.\nloop invariant p <= bufsize_0 - 33 is preserved but not established.\nloop invariant p <= bufsize_0 - 34 is preserved but not established.\nloop invariant p <= bufsize_0 - 35 is preserved but not established.\nloop invariant p <= bufsize_0 - 36 is preserved but not established.\nloop invariant p <= bufsize_0 - 37 is preserved but not established.\nloop invariant p <= bufsize_0 - 38 is preserved but not established.\nloop invariant p <= bufsize_0 - 39 is preserved but not established.\nloop invariant p <= bufsize_0 - 40 is preserved but not established.\nloop invariant p <= bufsize_0 - 41 is preserved but not established.\nloop invariant p <= bufsize_0 - 42 is preserved but not established.\nloop invariant p <= bufsize_0 - 43 is preserved but not established.\nloop invariant p <= bufsize_0 - 44 is preserved but not established.\nloop invariant p <= bufsize_0 - 45 is preserved but not established.\nloop invariant p <= bufsize_0 - 46 is preserved but not established.\nloop invariant p <= bufsize_0 - 47 is preserved but not established.\nloop invariant p <= bufsize_0 - 48 is preserved but not established.\nloop invariant p <= bufsize_0 - 49 is preserved but not established.\nloop invariant p <= bufsize_0 - 50 is preserved but not established.\nloop invariant p <= bufsize_0 - 51 is preserved but not established.\nloop invariant p <= bufsize_0 - 52 is preserved but not established.\nloop invariant p <= bufsize_0 - 53 is preserved but not established.\nloop invariant p <= bufsize_0 - 54 is preserved but not established.\nloop invariant p <= bufsize_0 - 55 is preserved but not established.\nloop invariant p <= bufsize_0 - 56 is preserved but not established.\nloop invariant p <= bufsize_0 - 57 is preserved but not established.\nloop invariant p <= bufsize_0 - 58 is preserved but not established.\nloop invariant p <= bufsize_0 - 59 is preserved but not established.\nloop invariant p <= bufsize_0 - 60 is preserved but not established.\nloop invariant p <= bufsize_0 - 61 is preserved but not established.\nloop invariant p <= bufsize_0 - 62 is preserved but not established.\nloop invariant p <= bufsize_0 - 63 is preserved but not established.\nloop invariant p <= bufsize_0 - 64 is preserved but not established.\nloop invariant p <= bufsize_0 - 65 is preserved but not established.\nloop invariant p <= bufsize_0 - 66 is preserved but not established.\nloop invariant p <= bufsize_0 - 67 is preserved but not established.\nloop invariant p <= bufsize_0 - 68 is preserved but not established.\nloop invariant p <= bufsize_0 - 69 is preserved but not established.\nloop invariant p <= bufsize_0 - 70 is preserved but not established.\nloop invariant p <= bufsize_0 - 71 is preserved but not established.\nloop invariant p <= bufsize_0 - 72 is preserved but not established.\nloop invariant p <= bufsize_0 - 73 is preserved but not established.\nloop invariant p <= bufsize_0 - 74 is preserved but not established.\nloop invariant p <= bufsize_0 - 75 is preserved but not established.\nloop invariant p <= bufsize_0 - 76 is neither established nor preserved.\nloop invariant p <= bufsize_0 - 77 is neither established nor preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p % 2 == 0;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1);\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < ielen is established but not preserved.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant p % 2 == 0 is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) is established but not preserved.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen is neither established nor preserved.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen is neither established nor preserved.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen is neither established nor preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: i >= 0;\n\nloop invariant i4: bufsize >= 0;\nloop invariant i5: bufsize <= bufsize_0;\nloop invariant i6: p <= bufsize_0;\nloop invariant i7: bufsize >= 2;\n\nloop invariant i9: p + 1 < bufsize_0 ==> bufsize >= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 2 * i <= bufsize is neither established nor preserved.\nloop invariant p + 2 * i <= bufsize_0 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2;\nloop invariant i3: 0 <= p <= bufsize_0;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;loop invariant 0 <= i <= ielen;loop invariant p+1 < bufsize_0 ==> bufsize <= 2*i + 2;loop invariant bufsize < 2*i + 2 ==> i >= ielen;loop invariant i >= ielen ==> bufsize <= 2;loop invariant bufsize <= 2 ==> i = ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 < bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2*(ielen - i) + 2;\nloop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 < bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i < ielen is established but not preserved.\nloop invariant bufsize >= 2*(ielen - i) + 2 is preserved but not established.\nloop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize is neither established nor preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 < bufsize <= bufsize_0;\nloop invariant i2: 0 <= p <= bufsize_0;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant bufsize > 2*i;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p >= 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < ielen is established but not preserved.\nloop invariant bufsize > 2*i is established but not preserved.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p >= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 >= leader_len && bufsize_0 >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant ielen >= 0 && ielen <= bufsize_0;\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant p >= 0 && p <= bufsize_0;\nloop invariant i >= 0 && i <= ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len && bufsize_0 >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize >= 0 && bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant ielen >= 0 && ielen <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len && bufsize >= 2*ielen is preserved but not established.\nloop invariant p >= 0 && p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 && i <= ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize_0 >= leader_len && bufsize_0 >= 2*ielen;\nloop invariant i4: bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant i5: ielen >= 0 && ielen <= bufsize_0;\n\nloop invariant i7: p >= 0 && p <= bufsize_0;\nloop invariant i8: i >= 0 && i <= ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p + 1 <= bufsize - leader_len;\nloop invariant p + 1 <= bufsize - 2 * i;\nloop invariant p + 1 <= bufsize - 2 * (i + 1);\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize is preserved but not established.\nloop invariant p + 1 <= bufsize - leader_len is neither established nor preserved.\nloop invariant p + 1 <= bufsize - 2 * i is established but not preserved.\nloop invariant p + 1 <= bufsize - 2 * (i + 1) is neither established nor preserved.\nloop invariant p + 1 <= bufsize - 2 * (i + 1) + 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant bufsize >= 0;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant 0 <= p <= 2*i;\nloop invariant bufsize >= 0;\nloop invariant bufsize >= 2*ielen ==> i < ielen;\nloop invariant 0 <= p <= 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen ==> i < ielen is partially proven to be inductive.\nloop invariant 0 <= p <= 2*i is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: bufsize >= 0;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                "houdini_error": "No annotations found"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 176: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i < ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: p >= 2 * i;\nloop invariant i4: 0 <= bufsize <= bufsize_0;\nloop invariant i5: 2 <= bufsize <= bufsize_0 - 2 * i;\nloop invariant i6: 0 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant i7: 2 <= bufsize - 2 * i <= bufsize_0 - 2 * i;\nloop invariant i8: 0 <= i <= ielen;\nloop invariant i9: p + 2*i <= bufsize_0;\nloop invariant i10: bufsize + 2*i <= ielen;\nloop invariant i11: bufsize >= 0;\nloop invariant i12: bufsize <= bufsize_0;\nloop invariant i13: 0 <= bufsize <= LARGE_INT - 1;\nloop invariant i14: 0 <= bufsize_0 <= LARGE_INT - 1;\nloop invariant i15: bufsize_0 - p > 2;\nloop invariant i16: bufsize_0 - leader_len >= 2 * i;\nloop invariant i17: bufsize >= 2 * i;\nloop invariant i18: bufsize >= leader_len;\nloop invariant i19: bufsize >= 2 * i + leader_len;\nloop invariant i20: bufsize >= 2 * i + 2;\nloop invariant i21: bufsize >= 2 * i + leader_len + 2;\nloop invariant i22: 0 <= p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i <= ielen; loop invariant p + 1 < bufsize_0 ==> 2 <= bufsize; loop invariant p + 1 < bufsize_0 ==> i < ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i; loop invariant p + 1 < bufsize_0 ==> p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i - 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1);\nloop invariant i23: 0 <= p;\nloop invariant i24: p <= bufsize_0;\nloop invariant i25: i >= 0;\nloop invariant i26: i <= ielen;\nloop invariant i27: i <= bufsize / 2;\nloop invariant i28: i <= bufsize - 2;\nloop invariant i29: i <= bufsize_0 - 2;\nloop invariant i30: p <= bufsize_0 - 2;\nloop invariant i31: p <= bufsize_0 - i * 2;\nloop invariant i32: p <= bufsize_0 - 2 - bufsize_0 / 2;\nloop invariant i33: p <= bufsize_0 - 3;\nloop invariant i34: p <= bufsize_0 - 4;\nloop invariant i35: p <= bufsize_0 - 5;\nloop invariant i36: p <= bufsize_0 - 6;\nloop invariant i37: p <= bufsize_0 - 7;\nloop invariant i38: p <= bufsize_0 - 8;\nloop invariant i39: p <= bufsize_0 - 9;\nloop invariant i40: p <= bufsize_0 - 10;\nloop invariant i41: p <= bufsize_0 - 11;\nloop invariant i42: p <= bufsize_0 - 12;\nloop invariant i43: p <= bufsize_0 - 13;\nloop invariant i44: p <= bufsize_0 - 14;\nloop invariant i45: p <= bufsize_0 - 15;\nloop invariant i46: p <= bufsize_0 - 16;\nloop invariant i47: p <= bufsize_0 - 17;\nloop invariant i48: p <= bufsize_0 - 18;\nloop invariant i49: p <= bufsize_0 - 19;\nloop invariant i50: p <= bufsize_0 - 20;\nloop invariant i51: p <= bufsize_0 - 21;\nloop invariant i52: p <= bufsize_0 - 22;\nloop invariant i53: p <= bufsize_0 - 23;\nloop invariant i54: p <= bufsize_0 - 24;\nloop invariant i55: p <= bufsize_0 - 25;\nloop invariant i56: p <= bufsize_0 - 26;\nloop invariant i57: p <= bufsize_0 - 27;\nloop invariant i58: p <= bufsize_0 - 28;\nloop invariant i59: p <= bufsize_0 - 29;\nloop invariant i60: p <= bufsize_0 - 30;\nloop invariant i61: p <= bufsize_0 - 31;\nloop invariant i62: p <= bufsize_0 - 32;\nloop invariant i63: p <= bufsize_0 - 33;\nloop invariant i64: p <= bufsize_0 - 34;\nloop invariant i65: p <= bufsize_0 - 35;\nloop invariant i66: p <= bufsize_0 - 36;\nloop invariant i67: p <= bufsize_0 - 37;\nloop invariant i68: p <= bufsize_0 - 38;\nloop invariant i69: p <= bufsize_0 - 39;\nloop invariant i70: p <= bufsize_0 - 40;\nloop invariant i71: p <= bufsize_0 - 41;\nloop invariant i72: p <= bufsize_0 - 42;\nloop invariant i73: p <= bufsize_0 - 43;\nloop invariant i74: p <= bufsize_0 - 44;\nloop invariant i75: p <= bufsize_0 - 45;\nloop invariant i76: p <= bufsize_0 - 46;\nloop invariant i77: p <= bufsize_0 - 47;\nloop invariant i78: p <= bufsize_0 - 48;\nloop invariant i79: p <= bufsize_0 - 49;\nloop invariant i80: p <= bufsize_0 - 50;\nloop invariant i81: p <= bufsize_0 - 51;\nloop invariant i82: p <= bufsize_0 - 52;\nloop invariant i83: p <= bufsize_0 - 53;\nloop invariant i84: p <= bufsize_0 - 54;\nloop invariant i85: p <= bufsize_0 - 55;\nloop invariant i86: p <= bufsize_0 - 56;\nloop invariant i87: p <= bufsize_0 - 57;\nloop invariant i88: p <= bufsize_0 - 58;\nloop invariant i89: p <= bufsize_0 - 59;\nloop invariant i90: p <= bufsize_0 - 60;\nloop invariant i91: p <= bufsize_0 - 61;\nloop invariant i92: p <= bufsize_0 - 62;\nloop invariant i93: p <= bufsize_0 - 63;\nloop invariant i94: p <= bufsize_0 - 64;\nloop invariant i95: p <= bufsize_0 - 65;\nloop invariant i96: p <= bufsize_0 - 66;\nloop invariant i97: p <= bufsize_0 - 67;\nloop invariant i98: p <= bufsize_0 - 68;\nloop invariant i99: p <= bufsize_0 - 69;\nloop invariant i100: p <= bufsize_0 - 70;\nloop invariant i101: p <= bufsize_0 - 71;\nloop invariant i102: p <= bufsize_0 - 72;\nloop invariant i103: p <= bufsize_0 - 73;\nloop invariant i104: p <= bufsize_0 - 74;\nloop invariant i105: p <= bufsize_0 - 75;\nloop invariant i106: p <= bufsize_0 - 76;\nloop invariant i107: p <= bufsize_0 - 77;\nloop invariant i108: i < ielen;\nloop invariant i109: bufsize >= 2;\nloop invariant i110: p % 2 == 0;\nloop invariant i111: p + 1 < bufsize_0 ==> bufsize >= 2;\nloop invariant i112: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1);\nloop invariant i113: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len;\nloop invariant i114: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen;\nloop invariant i115: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen;\nloop invariant i116: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len;\nloop invariant i117: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen;\nloop invariant i118: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len;\nloop invariant i119: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant i120: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant i121: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant i122: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant i123: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant i124: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant i125: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant i126: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant i127: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant i128: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len;\nloop invariant i129: p + 1 < bufsize_0 ==> bufsize >= 2 * (i + 1) + leader_len + ielen + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen + leader_len + ielen;\nloop invariant i130: p + 2 * i <= bufsize;\nloop invariant i131: p + 2 * i <= bufsize_0;\nloop invariant i132: 0 <= p <= bufsize_0;loop invariant 0 <= i <= ielen;loop invariant p+1 < bufsize_0 ==> bufsize <= 2*i + 2;loop invariant bufsize < 2*i + 2 ==> i >= ielen;loop invariant i >= ielen ==> bufsize <= 2;loop invariant bufsize <= 2 ==> i = ielen;\nloop invariant i133: 0 < bufsize <= bufsize_0;\nloop invariant i134: bufsize >= 2*(ielen - i) + 2;\nloop invariant i135: p + 1 < bufsize_0 ==> p + 1 < bufsize;\nloop invariant i136: bufsize > 2*i;\nloop invariant i137: p >= 2*i;\nloop invariant i138: bufsize_0 >= leader_len && bufsize_0 >= 2*ielen;\nloop invariant i139: bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant i140: ielen >= 0 && ielen <= bufsize_0;\nloop invariant i141: bufsize >= leader_len && bufsize >= 2*ielen;\nloop invariant i142: p >= 0 && p <= bufsize_0;\nloop invariant i143: i >= 0 && i <= ielen;\nloop invariant i144: p <= bufsize;\nloop invariant i145: p + 1 <= bufsize - leader_len;\nloop invariant i146: p + 1 <= bufsize - 2 * i;\nloop invariant i147: p + 1 <= bufsize - 2 * (i + 1);\nloop invariant i148: p + 1 <= bufsize - 2 * (i + 1) + 2;\nloop invariant i149: bufsize >= 2*ielen ==> i < ielen;\nloop invariant i150: 0 <= p <= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: p >= 2 * i;\nloop invariant i4: 0 <= bufsize <= bufsize_0;\n\n\n\nloop invariant i8: 0 <= i <= ielen;\nloop invariant i9: p + 2*i <= bufsize_0;\n\nloop invariant i11: bufsize >= 0;\nloop invariant i12: bufsize <= bufsize_0;\nloop invariant i13: 0 <= bufsize <= LARGE_INT - 1;\nloop invariant i14: 0 <= bufsize_0 <= LARGE_INT - 1;\n\n\n\n\n\n\n\nloop invariant i22: 0 <= p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i <= ielen; loop invariant p + 1 < bufsize_0 ==> 2 <= bufsize; loop invariant p + 1 < bufsize_0 ==> i < ielen; loop invariant p + 1 < bufsize_0 ==> 0 <= i; loop invariant p + 1 < bufsize_0 ==> p <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) <= bufsize_0 - 2 * ielen; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i - 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1); loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * i; loop invariant p + 1 < bufsize_0 ==> (p + 2) < bufsize_0 - 2 * (i + 1);\nloop invariant i23: 0 <= p;\nloop invariant i24: p <= bufsize_0;\nloop invariant i25: i >= 0;\nloop invariant i26: i <= ielen;\n\n\nloop invariant i29: i <= bufsize_0 - 2;\nloop invariant i30: p <= bufsize_0 - 2;\nloop invariant i31: p <= bufsize_0 - i * 2;\n\nloop invariant i33: p <= bufsize_0 - 3;\nloop invariant i34: p <= bufsize_0 - 4;\nloop invariant i35: p <= bufsize_0 - 5;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i108: i < ielen;\nloop invariant i109: bufsize >= 2;\n\nloop invariant i111: p + 1 < bufsize_0 ==> bufsize >= 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i131: p + 2 * i <= bufsize_0;\n\nloop invariant i133: 0 < bufsize <= bufsize_0;\nloop invariant i134: bufsize >= 2*(ielen - i) + 2;\n\n\nloop invariant i137: p >= 2*i;\nloop invariant i138: bufsize_0 >= leader_len && bufsize_0 >= 2*ielen;\nloop invariant i139: bufsize >= 0 && bufsize <= bufsize_0;\nloop invariant i140: ielen >= 0 && ielen <= bufsize_0;\n\nloop invariant i142: p >= 0 && p <= bufsize_0;\nloop invariant i143: i >= 0 && i <= ielen;\n\n\n\n\n\nloop invariant i149: bufsize >= 2*ielen ==> i < ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 3,
        "failure_count": 10,
        "success_rate": 0.23076923076923078
    }
}