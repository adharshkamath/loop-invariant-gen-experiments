{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant i1 = 0 <= p;\nloop invariant i2 = 0 <= i;\nloop invariant i3 = i <= ielen;\nloop invariant i4 = bufsize <= bufsize_0;\nloop invariant i5 = bufsize >= 2*i;\nloop invariant i6 = 0 <= bufsize;\nloop invariant i7 = 0 <= ielen;\nloop invariant i8 = 0 <= leader_len;\nloop invariant i9 = 0 <= bufsize_0;\nloop invariant i10 = 0 <= p;\nloop invariant i11 = 0 <= leader_len;\nloop invariant i12 = 0 <= bufsize_0;\nloop invariant i13 = 0 <= ielen;\nloop invariant i14 = 0 <= p;\nloop invariant i15 = 0 <= i;\nloop invariant i16 = i <= ielen;\nloop invariant i17 = bufsize <= bufsize_0;\nloop invariant i18 = bufsize >= 2*i;\nloop invariant i19 = 0 <= bufsize;\nloop invariant i20 = 0 <= ielen;\nloop invariant i21 = 0 <= leader_len;\nloop invariant i22 = 0 <= bufsize_0;\nloop invariant i23 = 0 <= p;\nloop invariant i24 = 0 <= i;\nloop invariant i25 = i <= ielen;\nloop invariant i26 = bufsize <= bufsize_0;\nloop invariant i27 = bufsize >= 2*i;\nloop invariant i28 = 0 <= bufsize;\nloop invariant i29 = 0 <= ielen;\nloop invariant i30 = 0 <= leader_len;\nloop invariant i31 = 0 <= bufsize_0;\nloop invariant i32 = 0 <= p;\nloop invariant i33 = 0 <= i;\nloop invariant i34 = i <= ielen;\nloop invariant i35 = bufsize <= bufsize_0;\nloop invariant i36 = bufsize >= 2*i;\nloop invariant i37 = 0 <= bufsize;\nloop invariant i38 = 0 <= ielen;\nloop invariant i39 = 0 <= leader_len;\nloop invariant i40 = 0 <= bufsize_0;\nloop invariant i41 = 0 <= p;\nloop invariant i42 = 0 <= i;\nloop invariant i43 = i <= ielen;\nloop invariant i44 = bufsize <= bufsize_0;\nloop invariant i45 = bufsize >= 2*i;\nloop invariant i46 = 0 <= bufsize;\nloop invariant i47 = 0 <= ielen;\nloop invariant i48 = 0 <= leader_len;\nloop invariant i49 = 0 <= bufsize_0;\nloop invariant i50 = 0 <= p;\nloop invariant i51 = 0 <= i;\nloop invariant i52 = i <= ielen;\nloop invariant i53 = bufsize <= bufsize_0;\nloop invariant i54 = bufsize >= 2*i;\nloop invariant i55 = 0 <= bufsize;\nloop invariant i56 = 0 <= ielen;\nloop invariant i57 = 0 <= leader_len;\nloop invariant i58 = 0 <= bufsize_0;\nloop invariant i59 = 0 <= p;\nloop invariant i60 = 0 <= i;\nloop invariant i61 = i <= ielen;\nloop invariant i62 = bufsize <= bufsize_0;\nloop invariant i63 = bufsize >= 2*i;\nloop invariant i64 = 0 <= bufsize;\nloop invariant i65 = 0 <= ielen;\nloop invariant i66 = 0 <= leader_len;\nloop invariant i67 = 0 <= bufsize_0;\nloop invariant i68 = 0 <= p;\nloop invariant i69 = 0 <= i;\nloop invariant i70 = i <= ielen;\nloop invariant i71 = bufsize <= bufsize_0;\nloop invariant i72 = bufsize >= 2*i;\nloop invariant i73 = 0 <= bufsize;\nloop invariant i74 = 0 <= ielen;\nloop invariant i75 = 0 <= leader_len;\nloop invariant i76 = 0 <= bufsize_0;\nloop invariant i77 = 0 <= p;\nloop invariant i78 = 0 <= i;\nloop invariant i79 = i <= ielen;\nloop invariant i80 = bufsize <= bufsize_0;\nloop invariant i81 = bufsize >= 2*i;\nloop invariant i82 = 0 <= bufsize;\nloop invariant i83 = 0 <= ielen;\nloop invariant i84 = 0 <= leader_len;\nloop invariant i85 = 0 <= bufsize_0;\nloop invariant i86 = 0 <= p;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i * 2 <= bufsize;\nloop invariant 2 * i * i <= bufsize;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant p <= p + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0 - ielen * 2;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= bufsize_0 - 2 * i;\nloop invariant p + 1 <= bufsize_0 - 2 * i;\nloop invariant p - 2 * i <= bufsize_0 - 1;\nloop invariant p - 2 * i >= 0;\nloop invariant p - 2 * i <= bufsize_0;\nloop invariant p - 2 * i >= bufsize_0 - bufsize;\nloop invariant p - 2 * i <= bufsize_0 - bufsize + 1;\nloop invariant p - 2 * i >= bufsize_0 - bufsize - 1;\nloop invariant p - 2 * i <= bufsize_0 - bufsize + 2;\nloop invariant p - 2 * i >= bufsize_0 - bufsize - 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= p <= bufsize_0;\nloop invariant leader_len <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p + 2*i <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize;\nloop invariant 0 <= ielen;\nloop invariant ielen <= bufsize;\nloop invariant ielen <= bufsize_0;\nloop invariant ielen <= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2*ielen + leader_len;\nloop invariant i <= ielen;\nloop invariant p == leader_len + 2*i;\nloop invariant bufsize == bufsize_0 - leader_len - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - leader_len - 2*ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 >= leader_len + 2*ielen;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant 0 <= p <= bufsize_0 ==> (bufsize >= leader_len + 2*i);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*ielen);\nloop invariant 0 <= i <= ielen ==> (bufsize >= leader_len + 2*i);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p = bufsize_0 - bufsize + leader_len;\nloop invariant i = 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2 * ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - 2*ielen;\nloop invariant 0 <= p <= bufsize_0 - 2*ielen + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= leader_len <= bufsize_0;\nloop invariant 0 <= ielen <= bufsize_0;\nloop invariant bufsize - leader_len <= bufsize_0;\nloop invariant i + ielen <= bufsize_0 / 2;\nloop invariant p + 1 <= bufsize_0 - 2;\nloop invariant p + 2 <= bufsize_0;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant p + 2*i <= bufsize_0 - 2*i;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 2*i <= bufsize <= 2*ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 1 < bufsize_0 ==> 0 <= p + 1;\nloop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0;\nloop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant (i < ielen) ==> (bufsize >= 2);\nloop invariant (i < ielen) ==> (i >= 0);\nloop invariant (i < ielen) ==> (bufsize < bufsize_0 - 2*i);\nloop invariant (i < ielen) ==> (p < bufsize + bufsize_0);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*ielen);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\n*/\n```",
            "```\n/*@\nloop invariant (p = 0) ==> (p = 0);\nloop invariant (bufsize = bufsize_0 - leader_len) ==> (bufsize = bufsize_0 - leader_len);\nloop invariant (0 <= i < ielen) ==> (0 <= i < ielen);\nloop invariant (bufsize > 2) ==> (bufsize > 2);\nloop invariant (0 <= p <= bufsize_0) ==> (0 <= p <= bufsize_0);\nloop invariant (p + 1 < bufsize_0) ==> (p + 1 < bufsize_0);\nloop invariant (p + 2 <= bufsize_0) ==> (p + 2 <= bufsize_0);\nloop invariant (0 <= i <= ielen) ==> (0 <= i <= ielen);\nloop invariant (bufsize > 2) ==> (bufsize > 2);\nloop invariant (leader_len > 0) ==> (leader_len > 0);\nloop invariant (bufsize > 0) ==> (bufsize > 0);\nloop invariant (ielen > 0) ==> (ielen > 0);\nloop invariant (bufsize < leader_len) ==> (bufsize < leader_len);\nloop invariant (bufsize_0 = bufsize) ==> (bufsize_0 = bufsize);\nloop invariant (bufsize -= leader_len) ==> (bufsize -= leader_len);\nloop invariant (p += leader_len) ==> (p += leader_len);\nloop invariant (bufsize < 2*ielen) ==> (bufsize < 2*ielen);\nloop invariant (i >= ielen) ==> (i >= ielen);\nloop invariant (bufsize >= 2) ==> (bufsize >= 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= leader_len;\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2;\nloop invariant i5: bufsize <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 34: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 87,
                "annotations": "```\n/*@\nloop invariant i1 = 0 <= p;\nloop invariant i2 = 0 <= i;\nloop invariant i3 = i <= ielen;\nloop invariant i4 = bufsize <= bufsize_0;\nloop invariant i5 = bufsize >= 2*i;\nloop invariant i6 = 0 <= bufsize;\nloop invariant i7 = 0 <= ielen;\nloop invariant i8 = 0 <= leader_len;\nloop invariant i9 = 0 <= bufsize_0;\nloop invariant i10 = 0 <= p;\nloop invariant i11 = 0 <= leader_len;\nloop invariant i12 = 0 <= bufsize_0;\nloop invariant i13 = 0 <= ielen;\nloop invariant i14 = 0 <= p;\nloop invariant i15 = 0 <= i;\nloop invariant i16 = i <= ielen;\nloop invariant i17 = bufsize <= bufsize_0;\nloop invariant i18 = bufsize >= 2*i;\nloop invariant i19 = 0 <= bufsize;\nloop invariant i20 = 0 <= ielen;\nloop invariant i21 = 0 <= leader_len;\nloop invariant i22 = 0 <= bufsize_0;\nloop invariant i23 = 0 <= p;\nloop invariant i24 = 0 <= i;\nloop invariant i25 = i <= ielen;\nloop invariant i26 = bufsize <= bufsize_0;\nloop invariant i27 = bufsize >= 2*i;\nloop invariant i28 = 0 <= bufsize;\nloop invariant i29 = 0 <= ielen;\nloop invariant i30 = 0 <= leader_len;\nloop invariant i31 = 0 <= bufsize_0;\nloop invariant i32 = 0 <= p;\nloop invariant i33 = 0 <= i;\nloop invariant i34 = i <= ielen;\nloop invariant i35 = bufsize <= bufsize_0;\nloop invariant i36 = bufsize >= 2*i;\nloop invariant i37 = 0 <= bufsize;\nloop invariant i38 = 0 <= ielen;\nloop invariant i39 = 0 <= leader_len;\nloop invariant i40 = 0 <= bufsize_0;\nloop invariant i41 = 0 <= p;\nloop invariant i42 = 0 <= i;\nloop invariant i43 = i <= ielen;\nloop invariant i44 = bufsize <= bufsize_0;\nloop invariant i45 = bufsize >= 2*i;\nloop invariant i46 = 0 <= bufsize;\nloop invariant i47 = 0 <= ielen;\nloop invariant i48 = 0 <= leader_len;\nloop invariant i49 = 0 <= bufsize_0;\nloop invariant i50 = 0 <= p;\nloop invariant i51 = 0 <= i;\nloop invariant i52 = i <= ielen;\nloop invariant i53 = bufsize <= bufsize_0;\nloop invariant i54 = bufsize >= 2*i;\nloop invariant i55 = 0 <= bufsize;\nloop invariant i56 = 0 <= ielen;\nloop invariant i57 = 0 <= leader_len;\nloop invariant i58 = 0 <= bufsize_0;\nloop invariant i59 = 0 <= p;\nloop invariant i60 = 0 <= i;\nloop invariant i61 = i <= ielen;\nloop invariant i62 = bufsize <= bufsize_0;\nloop invariant i63 = bufsize >= 2*i;\nloop invariant i64 = 0 <= bufsize;\nloop invariant i65 = 0 <= ielen;\nloop invariant i66 = 0 <= leader_len;\nloop invariant i67 = 0 <= bufsize_0;\nloop invariant i68 = 0 <= p;\nloop invariant i69 = 0 <= i;\nloop invariant i70 = i <= ielen;\nloop invariant i71 = bufsize <= bufsize_0;\nloop invariant i72 = bufsize >= 2*i;\nloop invariant i73 = 0 <= bufsize;\nloop invariant i74 = 0 <= ielen;\nloop invariant i75 = 0 <= leader_len;\nloop invariant i76 = 0 <= bufsize_0;\nloop invariant i77 = 0 <= p;\nloop invariant i78 = 0 <= i;\nloop invariant i79 = i <= ielen;\nloop invariant i80 = bufsize <= bufsize_0;\nloop invariant i81 = bufsize >= 2*i;\nloop invariant i82 = 0 <= bufsize;\nloop invariant i83 = 0 <= ielen;\nloop invariant i84 = 0 <= leader_len;\nloop invariant i85 = 0 <= bufsize_0;\nloop invariant i86 = 0 <= p;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 34: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i * 2 <= bufsize;\nloop invariant 2 * i * i <= bufsize;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant i * 2 <= bufsize is established but not preserved.\nloop invariant 2 * i * i <= bufsize is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize;\nloop invariant p <= p + 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len <= bufsize is partially proven to be inductive.\nloop invariant p <= p + 2 is partially proven to be inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 - leader_len <= bufsize;\nloop invariant i3: p <= p + 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0 - ielen * 2;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize >= bufsize_0 - 2 * i;\nloop invariant p + 1 <= bufsize_0 - 2 * i;\nloop invariant p - 2 * i <= bufsize_0 - 1;\nloop invariant p - 2 * i >= 0;\nloop invariant p - 2 * i <= bufsize_0;\nloop invariant p - 2 * i >= bufsize_0 - bufsize;\nloop invariant p - 2 * i <= bufsize_0 - bufsize + 1;\nloop invariant p - 2 * i >= bufsize_0 - bufsize - 1;\nloop invariant p - 2 * i <= bufsize_0 - bufsize + 2;\nloop invariant p - 2 * i >= bufsize_0 - bufsize - 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 - ielen * 2 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2 * i is preserved but not established.\nloop invariant p + 1 <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant p - 2 * i <= bufsize_0 - 1 is partially proven to be inductive.\nloop invariant p - 2 * i >= 0 is partially proven to be inductive.\nloop invariant p - 2 * i <= bufsize_0 is partially proven to be inductive.\nloop invariant p - 2 * i >= bufsize_0 - bufsize is partially proven to be inductive.\nloop invariant p - 2 * i <= bufsize_0 - bufsize + 1 is partially proven to be inductive.\nloop invariant p - 2 * i >= bufsize_0 - bufsize - 1 is partially proven to be inductive.\nloop invariant p - 2 * i <= bufsize_0 - bufsize + 2 is partially proven to be inductive.\nloop invariant p - 2 * i >= bufsize_0 - bufsize - 2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 2 * i;\n\n\nloop invariant i6: p - 2 * i <= bufsize_0 - 1;\nloop invariant i7: p - 2 * i >= 0;\nloop invariant i8: p - 2 * i <= bufsize_0;\nloop invariant i9: p - 2 * i >= bufsize_0 - bufsize;\nloop invariant i10: p - 2 * i <= bufsize_0 - bufsize + 1;\nloop invariant i11: p - 2 * i >= bufsize_0 - bufsize - 1;\nloop invariant i12: p - 2 * i <= bufsize_0 - bufsize + 2;\nloop invariant i13: p - 2 * i >= bufsize_0 - bufsize - 2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= p <= bufsize_0;\nloop invariant leader_len <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p + 2*i <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize <= bufsize_0 is preserved but not established.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant leader_len <= p + 2*i <= bufsize_0 is established but not preserved.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 1 <= p <= bufsize_0;\n\nloop invariant i3: 0 <= i <= ielen;\n\nloop invariant i5: 0 <= bufsize <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize;\nloop invariant 0 <= ielen;\nloop invariant ielen <= bufsize;\nloop invariant ielen <= bufsize_0;\nloop invariant ielen <= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2*ielen + leader_len;\nloop invariant i <= ielen;\nloop invariant p == leader_len + 2*i;\nloop invariant bufsize == bufsize_0 - leader_len - 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize <= bufsize_0 - leader_len - 2*ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= ielen is partially proven to be inductive.\nloop invariant 0 <= leader_len is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize is preserved but not established.\nloop invariant ielen <= bufsize is partially proven to be inductive.\nloop invariant ielen <= bufsize_0 is partially proven to be inductive.\nloop invariant ielen <= leader_len is preserved but not established.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen + leader_len is preserved but not established.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant p == leader_len + 2*i is partially proven to be inductive.\nloop invariant bufsize == bufsize_0 - leader_len - 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len - 2*ielen is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: 0 <= bufsize;\nloop invariant i3: 0 <= bufsize_0;\nloop invariant i4: 0 <= i;\nloop invariant i5: 0 <= ielen;\nloop invariant i6: 0 <= leader_len;\nloop invariant i7: leader_len <= bufsize_0;\n\nloop invariant i9: ielen <= bufsize;\nloop invariant i10: ielen <= bufsize_0;\n\nloop invariant i12: bufsize >= 2*ielen;\n\nloop invariant i14: i <= ielen;\nloop invariant i15: p == leader_len + 2*i;\n\nloop invariant i17: bufsize >= 2;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 >= leader_len + 2*ielen;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant 0 <= p <= bufsize_0 ==> (bufsize >= leader_len + 2*i);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*ielen);\nloop invariant 0 <= i <= ielen ==> (bufsize >= leader_len + 2*i);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len + 2*i is preserved but not established.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2*ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 ==> (bufsize >= leader_len + 2*i) is partially proven to be inductive.\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*ielen) is preserved but not established.\nloop invariant 0 <= i <= ielen ==> (bufsize >= leader_len + 2*i) is partially proven to be inductive.\nloop invariant bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i) is partially proven to be inductive.\nloop invariant bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen) is partially proven to be inductive.\nloop invariant bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen) is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: bufsize_0 >= leader_len + 2*ielen;\n\n\n\nloop invariant i8: bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i);\n\nloop invariant i10: bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p = bufsize_0 - bufsize + leader_len;\nloop invariant i = 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2 * ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 35: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\n\nloop invariant i4: bufsize <= bufsize_0;\nloop invariant i5: bufsize >= 2 * ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize_0 >= leader_len + 2*ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - 2*ielen;\nloop invariant 0 <= p <= bufsize_0 - 2*ielen + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + 2*ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - 2*ielen is preserved but not established.\nloop invariant 0 <= p <= bufsize_0 - 2*ielen + 1 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= 0;\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize_0 >= leader_len + 2*ielen;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= leader_len <= bufsize_0;\nloop invariant 0 <= ielen <= bufsize_0;\nloop invariant bufsize - leader_len <= bufsize_0;\nloop invariant i + ielen <= bufsize_0 / 2;\nloop invariant p + 1 <= bufsize_0 - 2;\nloop invariant p + 2 <= bufsize_0;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant p + 2*i <= bufsize_0 - 2*i;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant p + 2*i <= bufsize_0 - 2*ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= ielen <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize - leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant i + ielen <= bufsize_0 / 2 is established but not preserved.\nloop invariant p + 1 <= bufsize_0 - 2 is neither established nor preserved.\nloop invariant p + 2 <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 2*i <= bufsize_0 - 2*i is established but not preserved.\nloop invariant p + 2*i <= bufsize_0 - 2*ielen is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: 0 <= leader_len <= bufsize_0;\nloop invariant i5: 0 <= ielen <= bufsize_0;\nloop invariant i6: bufsize - leader_len <= bufsize_0;\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 2*i <= bufsize <= 2*ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 1 < bufsize_0 ==> 0 <= p + 1;\nloop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0;\nloop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 2*i <= bufsize <= 2*ielen is neither established nor preserved.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 ==> 0 <= p + 1 is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 ==> p + 1 < bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p + 1 < bufsize_0 ==> 0 <= p + 1;\nloop invariant i5: p + 1 < bufsize_0 ==> p + 1 < bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant (i < ielen) ==> (bufsize >= 2);\nloop invariant (i < ielen) ==> (i >= 0);\nloop invariant (i < ielen) ==> (bufsize < bufsize_0 - 2*i);\nloop invariant (i < ielen) ==> (p < bufsize + bufsize_0);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*ielen);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant (i < ielen) ==> (bufsize >= 2) is partially proven to be inductive.\nloop invariant (i < ielen) ==> (i >= 0) is partially proven to be inductive.\nloop invariant (i < ielen) ==> (bufsize < bufsize_0 - 2*i) is established but not preserved.\nloop invariant (i < ielen) ==> (p < bufsize + bufsize_0) is partially proven to be inductive.\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize) is partially proven to be inductive.\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize) is established but not preserved.\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*ielen) is partially proven to be inductive.\nloop invariant (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i) is partially proven to be inductive.\nloop invariant (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i) is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= bufsize <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: (i < ielen) ==> (bufsize >= 2);\nloop invariant i5: (i < ielen) ==> (i >= 0);\n\nloop invariant i7: (i < ielen) ==> (p < bufsize + bufsize_0);\nloop invariant i8: (i < ielen) ==> (p >= bufsize_0 - bufsize);\n\nloop invariant i10: (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*ielen);\nloop invariant i11: (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant i12: (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant (p = 0) ==> (p = 0);\nloop invariant (bufsize = bufsize_0 - leader_len) ==> (bufsize = bufsize_0 - leader_len);\nloop invariant (0 <= i < ielen) ==> (0 <= i < ielen);\nloop invariant (bufsize > 2) ==> (bufsize > 2);\nloop invariant (0 <= p <= bufsize_0) ==> (0 <= p <= bufsize_0);\nloop invariant (p + 1 < bufsize_0) ==> (p + 1 < bufsize_0);\nloop invariant (p + 2 <= bufsize_0) ==> (p + 2 <= bufsize_0);\nloop invariant (0 <= i <= ielen) ==> (0 <= i <= ielen);\nloop invariant (bufsize > 2) ==> (bufsize > 2);\nloop invariant (leader_len > 0) ==> (leader_len > 0);\nloop invariant (bufsize > 0) ==> (bufsize > 0);\nloop invariant (ielen > 0) ==> (ielen > 0);\nloop invariant (bufsize < leader_len) ==> (bufsize < leader_len);\nloop invariant (bufsize_0 = bufsize) ==> (bufsize_0 = bufsize);\nloop invariant (bufsize -= leader_len) ==> (bufsize -= leader_len);\nloop invariant (p += leader_len) ==> (p += leader_len);\nloop invariant (bufsize < 2*ielen) ==> (bufsize < 2*ielen);\nloop invariant (i >= ielen) ==> (i >= ielen);\nloop invariant (bufsize >= 2) ==> (bufsize >= 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 34: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\nloop invariant i3: (0 <= i < ielen) ==> (0 <= i < ielen);\nloop invariant i4: (bufsize > 2) ==> (bufsize > 2);\nloop invariant i5: (0 <= p <= bufsize_0) ==> (0 <= p <= bufsize_0);\nloop invariant i6: (p + 1 < bufsize_0) ==> (p + 1 < bufsize_0);\nloop invariant i7: (p + 2 <= bufsize_0) ==> (p + 2 <= bufsize_0);\nloop invariant i8: (0 <= i <= ielen) ==> (0 <= i <= ielen);\nloop invariant i9: (leader_len > 0) ==> (leader_len > 0);\nloop invariant i10: (bufsize > 0) ==> (bufsize > 0);\nloop invariant i11: (ielen > 0) ==> (ielen > 0);\nloop invariant i12: (bufsize < leader_len) ==> (bufsize < leader_len);\n\n\n\nloop invariant i16: (bufsize < 2*ielen) ==> (bufsize < 2*ielen);\nloop invariant i17: (i >= ielen) ==> (i >= ielen);\nloop invariant i18: (bufsize >= 2) ==> (bufsize >= 2);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 39: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= leader_len;\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2;\nloop invariant i5: bufsize <= bufsize_0;\nloop invariant i6: i1 = 0 <= p;\nloop invariant i7: i2 = 0 <= i;\nloop invariant i8: i3 = i <= ielen;\nloop invariant i9: i4 = bufsize <= bufsize_0;\nloop invariant i10: i5 = bufsize >= 2*i;\nloop invariant i11: i6 = 0 <= bufsize;\nloop invariant i12: i7 = 0 <= ielen;\nloop invariant i13: i8 = 0 <= leader_len;\nloop invariant i14: i9 = 0 <= bufsize_0;\nloop invariant i15: i10 = 0 <= p;\nloop invariant i16: i11 = 0 <= leader_len;\nloop invariant i17: i12 = 0 <= bufsize_0;\nloop invariant i18: i13 = 0 <= ielen;\nloop invariant i19: i14 = 0 <= p;\nloop invariant i20: i15 = 0 <= i;\nloop invariant i21: i16 = i <= ielen;\nloop invariant i22: i17 = bufsize <= bufsize_0;\nloop invariant i23: i18 = bufsize >= 2*i;\nloop invariant i24: i19 = 0 <= bufsize;\nloop invariant i25: i20 = 0 <= ielen;\nloop invariant i26: i21 = 0 <= leader_len;\nloop invariant i27: i22 = 0 <= bufsize_0;\nloop invariant i28: i23 = 0 <= p;\nloop invariant i29: i24 = 0 <= i;\nloop invariant i30: i25 = i <= ielen;\nloop invariant i31: i26 = bufsize <= bufsize_0;\nloop invariant i32: i27 = bufsize >= 2*i;\nloop invariant i33: i28 = 0 <= bufsize;\nloop invariant i34: i29 = 0 <= ielen;\nloop invariant i35: i30 = 0 <= leader_len;\nloop invariant i36: i31 = 0 <= bufsize_0;\nloop invariant i37: i32 = 0 <= p;\nloop invariant i38: i33 = 0 <= i;\nloop invariant i39: i34 = i <= ielen;\nloop invariant i40: i35 = bufsize <= bufsize_0;\nloop invariant i41: i36 = bufsize >= 2*i;\nloop invariant i42: i37 = 0 <= bufsize;\nloop invariant i43: i38 = 0 <= ielen;\nloop invariant i44: i39 = 0 <= leader_len;\nloop invariant i45: i40 = 0 <= bufsize_0;\nloop invariant i46: i41 = 0 <= p;\nloop invariant i47: i42 = 0 <= i;\nloop invariant i48: i43 = i <= ielen;\nloop invariant i49: i44 = bufsize <= bufsize_0;\nloop invariant i50: i45 = bufsize >= 2*i;\nloop invariant i51: i46 = 0 <= bufsize;\nloop invariant i52: i47 = 0 <= ielen;\nloop invariant i53: i48 = 0 <= leader_len;\nloop invariant i54: i49 = 0 <= bufsize_0;\nloop invariant i55: i50 = 0 <= p;\nloop invariant i56: i51 = 0 <= i;\nloop invariant i57: i52 = i <= ielen;\nloop invariant i58: i53 = bufsize <= bufsize_0;\nloop invariant i59: i54 = bufsize >= 2*i;\nloop invariant i60: i55 = 0 <= bufsize;\nloop invariant i61: i56 = 0 <= ielen;\nloop invariant i62: i57 = 0 <= leader_len;\nloop invariant i63: i58 = 0 <= bufsize_0;\nloop invariant i64: i59 = 0 <= p;\nloop invariant i65: i60 = 0 <= i;\nloop invariant i66: i61 = i <= ielen;\nloop invariant i67: i62 = bufsize <= bufsize_0;\nloop invariant i68: i63 = bufsize >= 2*i;\nloop invariant i69: i64 = 0 <= bufsize;\nloop invariant i70: i65 = 0 <= ielen;\nloop invariant i71: i66 = 0 <= leader_len;\nloop invariant i72: i67 = 0 <= bufsize_0;\nloop invariant i73: i68 = 0 <= p;\nloop invariant i74: i69 = 0 <= i;\nloop invariant i75: i70 = i <= ielen;\nloop invariant i76: i71 = bufsize <= bufsize_0;\nloop invariant i77: i72 = bufsize >= 2*i;\nloop invariant i78: i73 = 0 <= bufsize;\nloop invariant i79: i74 = 0 <= ielen;\nloop invariant i80: i75 = 0 <= leader_len;\nloop invariant i81: i76 = 0 <= bufsize_0;\nloop invariant i82: i77 = 0 <= p;\nloop invariant i83: i78 = 0 <= i;\nloop invariant i84: i79 = i <= ielen;\nloop invariant i85: i80 = bufsize <= bufsize_0;\nloop invariant i86: i81 = bufsize >= 2*i;\nloop invariant i87: i82 = 0 <= bufsize;\nloop invariant i88: i83 = 0 <= ielen;\nloop invariant i89: i84 = 0 <= leader_len;\nloop invariant i90: i85 = 0 <= bufsize_0;\nloop invariant i91: i86 = 0 <= p;\nloop invariant i92: 0 <= p <= bufsize_0;\nloop invariant i93: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i94: i * 2 <= bufsize;\nloop invariant i95: 2 * i * i <= bufsize;\nloop invariant i96: bufsize_0 - leader_len <= bufsize;\nloop invariant i97: p <= p + 2;\nloop invariant i98: 0 <= p <= bufsize_0 - ielen * 2;\nloop invariant i99: bufsize >= 2 * i;\nloop invariant i100: bufsize >= bufsize_0 - 2 * i;\nloop invariant i101: p + 1 <= bufsize_0 - 2 * i;\nloop invariant i102: p - 2 * i <= bufsize_0 - 1;\nloop invariant i103: p - 2 * i >= 0;\nloop invariant i104: p - 2 * i <= bufsize_0;\nloop invariant i105: p - 2 * i >= bufsize_0 - bufsize;\nloop invariant i106: p - 2 * i <= bufsize_0 - bufsize + 1;\nloop invariant i107: p - 2 * i >= bufsize_0 - bufsize - 1;\nloop invariant i108: p - 2 * i <= bufsize_0 - bufsize + 2;\nloop invariant i109: p - 2 * i >= bufsize_0 - bufsize - 2;\nloop invariant i110: 1 <= p <= bufsize_0;\nloop invariant i111: leader_len <= bufsize <= bufsize_0;\nloop invariant i112: leader_len <= p + 2*i <= bufsize_0;\nloop invariant i113: 0 <= bufsize <= bufsize_0;\nloop invariant i114: 0 <= p;\nloop invariant i115: 0 <= bufsize;\nloop invariant i116: 0 <= bufsize_0;\nloop invariant i117: 0 <= i;\nloop invariant i118: 0 <= ielen;\nloop invariant i119: 0 <= leader_len;\nloop invariant i120: leader_len <= bufsize_0;\nloop invariant i121: leader_len <= bufsize;\nloop invariant i122: ielen <= bufsize;\nloop invariant i123: ielen <= bufsize_0;\nloop invariant i124: ielen <= leader_len;\nloop invariant i125: bufsize >= 2*ielen;\nloop invariant i126: bufsize >= 2*ielen + leader_len;\nloop invariant i127: i <= ielen;\nloop invariant i128: p == leader_len + 2*i;\nloop invariant i129: bufsize == bufsize_0 - leader_len - 2*i;\nloop invariant i130: bufsize <= bufsize_0 - leader_len - 2*ielen;\nloop invariant i131: bufsize >= leader_len + 2*i;\nloop invariant i132: bufsize_0 >= leader_len + 2*ielen;\nloop invariant i133: 0 <= p <= bufsize_0 ==> (bufsize >= leader_len + 2*i);\nloop invariant i134: bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*ielen);\nloop invariant i135: 0 <= i <= ielen ==> (bufsize >= leader_len + 2*i);\nloop invariant i136: bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i);\nloop invariant i137: bufsize >= leader_len + 2*i ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant i138: bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\nloop invariant i139: p = bufsize_0 - bufsize + leader_len;\nloop invariant i140: i = 0;\nloop invariant i141: bufsize >= 2 * ielen;\nloop invariant i142: p >= 0;\nloop invariant i143: 0 <= bufsize <= bufsize_0 - 2*ielen;\nloop invariant i144: 0 <= p <= bufsize_0 - 2*ielen + 1;\nloop invariant i145: 0 <= leader_len <= bufsize_0;\nloop invariant i146: 0 <= ielen <= bufsize_0;\nloop invariant i147: bufsize - leader_len <= bufsize_0;\nloop invariant i148: i + ielen <= bufsize_0 / 2;\nloop invariant i149: p + 1 <= bufsize_0 - 2;\nloop invariant i150: p + 2 <= bufsize_0;\nloop invariant i151: p + 2*i <= bufsize_0;\nloop invariant i152: p + 2*i <= bufsize_0 - 2*i;\nloop invariant i153: p + 2*i <= bufsize_0 - 2*ielen;\nloop invariant i154: 2*i <= bufsize <= 2*ielen;\nloop invariant i155: p + 1 < bufsize_0 ==> 0 <= p + 1;\nloop invariant i156: p + 1 < bufsize_0 ==> p + 1 < bufsize_0;\nloop invariant i157: (i < ielen) ==> (bufsize >= 2);\nloop invariant i158: (i < ielen) ==> (i >= 0);\nloop invariant i159: (i < ielen) ==> (bufsize < bufsize_0 - 2*i);\nloop invariant i160: (i < ielen) ==> (p < bufsize + bufsize_0);\nloop invariant i161: (i < ielen) ==> (p >= bufsize_0 - bufsize);\nloop invariant i162: (i < ielen) ==> (p <= bufsize_0 - bufsize);\nloop invariant i163: (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*ielen);\nloop invariant i164: (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant i165: (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\nloop invariant i166: (p = 0) ==> (p = 0);\nloop invariant i167: (bufsize = bufsize_0 - leader_len) ==> (bufsize = bufsize_0 - leader_len);\nloop invariant i168: (0 <= i < ielen) ==> (0 <= i < ielen);\nloop invariant i169: (bufsize > 2) ==> (bufsize > 2);\nloop invariant i170: (0 <= p <= bufsize_0) ==> (0 <= p <= bufsize_0);\nloop invariant i171: (p + 1 < bufsize_0) ==> (p + 1 < bufsize_0);\nloop invariant i172: (p + 2 <= bufsize_0) ==> (p + 2 <= bufsize_0);\nloop invariant i173: (0 <= i <= ielen) ==> (0 <= i <= ielen);\nloop invariant i174: (leader_len > 0) ==> (leader_len > 0);\nloop invariant i175: (bufsize > 0) ==> (bufsize > 0);\nloop invariant i176: (ielen > 0) ==> (ielen > 0);\nloop invariant i177: (bufsize < leader_len) ==> (bufsize < leader_len);\nloop invariant i178: (bufsize_0 = bufsize) ==> (bufsize_0 = bufsize);\nloop invariant i179: (bufsize -= leader_len) ==> (bufsize -= leader_len);\nloop invariant i180: (p += leader_len) ==> (p += leader_len);\nloop invariant i181: (bufsize < 2*ielen) ==> (bufsize < 2*ielen);\nloop invariant i182: (i >= ielen) ==> (i >= ielen);\nloop invariant i183: (bufsize >= 2) ==> (bufsize >= 2);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "combined_annotation_num_solver_calls": 101,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= leader_len;\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2;\nloop invariant i5: bufsize <= bufsize_0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i92: 0 <= p <= bufsize_0;\nloop invariant i93: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i94: i * 2 <= bufsize;\n\nloop invariant i96: bufsize_0 - leader_len <= bufsize;\nloop invariant i97: p <= p + 2;\n\nloop invariant i99: bufsize >= 2 * i;\n\n\nloop invariant i102: p - 2 * i <= bufsize_0 - 1;\nloop invariant i103: p - 2 * i >= 0;\nloop invariant i104: p - 2 * i <= bufsize_0;\nloop invariant i105: p - 2 * i >= bufsize_0 - bufsize;\nloop invariant i106: p - 2 * i <= bufsize_0 - bufsize + 1;\nloop invariant i107: p - 2 * i >= bufsize_0 - bufsize - 1;\nloop invariant i108: p - 2 * i <= bufsize_0 - bufsize + 2;\nloop invariant i109: p - 2 * i >= bufsize_0 - bufsize - 2;\nloop invariant i110: 1 <= p <= bufsize_0;\n\n\nloop invariant i113: 0 <= bufsize <= bufsize_0;\nloop invariant i114: 0 <= p;\nloop invariant i115: 0 <= bufsize;\nloop invariant i116: 0 <= bufsize_0;\nloop invariant i117: 0 <= i;\nloop invariant i118: 0 <= ielen;\nloop invariant i119: 0 <= leader_len;\nloop invariant i120: leader_len <= bufsize_0;\n\nloop invariant i122: ielen <= bufsize;\nloop invariant i123: ielen <= bufsize_0;\n\nloop invariant i125: bufsize >= 2*ielen;\n\nloop invariant i127: i <= ielen;\nloop invariant i128: p == leader_len + 2*i;\n\n\n\nloop invariant i132: bufsize_0 >= leader_len + 2*ielen;\n\n\n\nloop invariant i136: bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i);\n\nloop invariant i138: bufsize >= leader_len + 2*ielen ==> (bufsize >= leader_len + 2*i && bufsize >= leader_len + 2*ielen);\n\n\nloop invariant i141: bufsize >= 2 * ielen;\nloop invariant i142: p >= 0;\n\n\nloop invariant i145: 0 <= leader_len <= bufsize_0;\nloop invariant i146: 0 <= ielen <= bufsize_0;\nloop invariant i147: bufsize - leader_len <= bufsize_0;\n\n\n\n\n\n\n\nloop invariant i155: p + 1 < bufsize_0 ==> 0 <= p + 1;\nloop invariant i156: p + 1 < bufsize_0 ==> p + 1 < bufsize_0;\nloop invariant i157: (i < ielen) ==> (bufsize >= 2);\nloop invariant i158: (i < ielen) ==> (i >= 0);\n\nloop invariant i160: (i < ielen) ==> (p < bufsize + bufsize_0);\nloop invariant i161: (i < ielen) ==> (p >= bufsize_0 - bufsize);\n\nloop invariant i163: (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*ielen);\nloop invariant i164: (i < ielen) ==> (p <= bufsize_0 - bufsize + 2*i);\nloop invariant i165: (i < ielen) ==> (p >= bufsize_0 - bufsize - 2*i);\n\n\nloop invariant i168: (0 <= i < ielen) ==> (0 <= i < ielen);\nloop invariant i169: (bufsize > 2) ==> (bufsize > 2);\nloop invariant i170: (0 <= p <= bufsize_0) ==> (0 <= p <= bufsize_0);\nloop invariant i171: (p + 1 < bufsize_0) ==> (p + 1 < bufsize_0);\nloop invariant i172: (p + 2 <= bufsize_0) ==> (p + 2 <= bufsize_0);\nloop invariant i173: (0 <= i <= ielen) ==> (0 <= i <= ielen);\nloop invariant i174: (leader_len > 0) ==> (leader_len > 0);\nloop invariant i175: (bufsize > 0) ==> (bufsize > 0);\nloop invariant i176: (ielen > 0) ==> (ielen > 0);\nloop invariant i177: (bufsize < leader_len) ==> (bufsize < leader_len);\n\n\n\nloop invariant i181: (bufsize < 2*ielen) ==> (bufsize < 2*ielen);\nloop invariant i182: (i >= ielen) ==> (i >= ielen);\nloop invariant i183: (bufsize >= 2) ==> (bufsize >= 2);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 2,
        "success_count": 1,
        "failure_count": 1,
        "success_rate": 0.5
    }
}