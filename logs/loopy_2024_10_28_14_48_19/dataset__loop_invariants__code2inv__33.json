{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/33.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x <= n; loop invariant x >= 0; loop invariant n >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant x == 0 ==> n >= 0;\nloop invariant x > 0 ==> n < 0;\nloop invariant x == n ==> n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x == n;\nloop invariant x != n;\nloop invariant x == 0;\nloop invariant x < n;\nloop invariant x > n;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant x == 1;\nloop invariant x != 1;\nloop invariant x == 2;\nloop invariant x != 2;\nloop invariant x == 3;\nloop invariant x != 3;\nloop invariant x == 4;\nloop invariant x != 4;\nloop invariant x == 5;\nloop invariant x != 5;\nloop invariant x == 6;\nloop invariant x != 6;\nloop invariant x == 7;\nloop invariant x != 7;\nloop invariant x == 8;\nloop invariant x != 8;\nloop invariant x == 9;\nloop invariant x != 9;\nloop invariant x == 10;\nloop invariant x != 10;\nloop invariant x == 11;\nloop invariant x != 11;\nloop invariant x == 12;\nloop invariant x != 12;\nloop invariant x == 13;\nloop invariant x != 13;\nloop invariant x == 14;\nloop invariant x != 14;\nloop invariant x == 15;\nloop invariant x != 15;\nloop invariant x == 16;\nloop invariant x != 16;\nloop invariant x == 17;\nloop invariant x != 17;\nloop invariant x == 18;\nloop invariant x != 18;\nloop invariant x == 19;\nloop invariant x != 19;\nloop invariant x == 20;\nloop invariant x != 20;\nloop invariant x == 21;\nloop invariant x != 21;\nloop invariant x == 22;\nloop invariant x != 22;\nloop invariant x == 23;\nloop invariant x != 23;\nloop invariant x == 24;\nloop invariant x != 24;\nloop invariant x == 25;\nloop invariant x != 25;\nloop invariant x == 26;\nloop invariant x != 26;\nloop invariant x == 27;\nloop invariant x != 27;\nloop invariant x == 28;\nloop invariant x != 28;\nloop invariant x == 29;\nloop invariant x != 29;\nloop invariant x == 30;\nloop invariant x != 30;\nloop invariant x == 31;\nloop invariant x != 31;\nloop invariant x == 32;\nloop invariant x != 32;\nloop invariant x == 33;\nloop invariant x != 33;\nloop invariant x == 34;\nloop invariant x != 34;\nloop invariant x == 35;\nloop invariant x != 35;\nloop invariant x == 36;\nloop invariant x != 36;\nloop invariant x == 37;\nloop invariant x != 37;\nloop invariant x == 38;\nloop invariant x != 38;\nloop invariant x == 39;\nloop invariant x != 39;\nloop invariant x == 40;\nloop invariant x != 40;\nloop invariant x == 41;\nloop invariant x != 41;\nloop invariant x == 42;\nloop invariant x != 42;\nloop invariant x == 43;\nloop invariant x != 43;\nloop invariant x == 44;\nloop invariant x != 44;\nloop invariant x == 45;\nloop invariant x != 45;\nloop invariant x == 46;\nloop invariant x != 46;\nloop invariant x == 47;\nloop invariant x != 47;\nloop invariant x == 48;\nloop invariant x != 48;\nloop invariant x == 49;\nloop invariant x != 49;\nloop invariant x == 50;\nloop invariant x != 50;\nloop invariant x == 51;\nloop invariant x != 51;\nloop invariant x == 52;\nloop invariant x != 52;\nloop invariant x == 53;\nloop invariant x != 53;\nloop invariant x == 54;\nloop invariant x != 54;\nloop invariant x == 55;\nloop invariant x != 55;\nloop invariant x == 56;\nloop invariant x != 56;\nloop invariant x == 57;\nloop invariant x != 57;\nloop invariant x == 58;\nloop invariant x != 58;\nloop invariant x == 59;\nloop invariant x != 59;\nloop invariant x == 60;\n*/\n```",
            "```\n/*@\nloop invariant n == x;\nloop invariant n >= x;\nloop invariant x >= 0;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n - (n - x);\nloop invariant x == n - (n - x);\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant n >= 0 ==> x <= n;\nloop invariant n >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n - (x - n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= x;\nloop invariant x > 0;\nloop invariant (x <= n);\nloop invariant (x > 0);\nloop invariant (n >= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant n > 0;\nloop invariant n = x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n;\nloop invariant x == n ==> n >= 0;\nloop invariant x == n ==> n <= 0;\nloop invariant x == n ==> n == 0;\nloop invariant x == n ==> n == n;\nloop invariant x == n ==> n == x;\nloop invariant x == n ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\n*/\n```",
            "```\n/*@\nloop invariant n == x;\nloop invariant x >= 0;\nloop invariant n >= 0 ==> x <= n;\nloop invariant n < 0 ==> x >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
            "```\n/*@\nloop invariant n >= x;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x >= x + 1) ==> (n < 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x <= n; loop invariant x >= 0; loop invariant n >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable k. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant x == 0 ==> n >= 0;\nloop invariant x > 0 ==> n < 0;\nloop invariant x == n ==> n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == 0 ==> n >= 0 is partially proven to be inductive.\nloop invariant x > 0 ==> n < 0 is preserved but not established.\nloop invariant x == n ==> n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\nloop invariant i3: x == 0 ==> n >= 0;\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 66,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x == n;\nloop invariant x != n;\nloop invariant x == 0;\nloop invariant x < n;\nloop invariant x > n;\nloop invariant x >= 0;\nloop invariant x <= 0;\nloop invariant x == 1;\nloop invariant x != 1;\nloop invariant x == 2;\nloop invariant x != 2;\nloop invariant x == 3;\nloop invariant x != 3;\nloop invariant x == 4;\nloop invariant x != 4;\nloop invariant x == 5;\nloop invariant x != 5;\nloop invariant x == 6;\nloop invariant x != 6;\nloop invariant x == 7;\nloop invariant x != 7;\nloop invariant x == 8;\nloop invariant x != 8;\nloop invariant x == 9;\nloop invariant x != 9;\nloop invariant x == 10;\nloop invariant x != 10;\nloop invariant x == 11;\nloop invariant x != 11;\nloop invariant x == 12;\nloop invariant x != 12;\nloop invariant x == 13;\nloop invariant x != 13;\nloop invariant x == 14;\nloop invariant x != 14;\nloop invariant x == 15;\nloop invariant x != 15;\nloop invariant x == 16;\nloop invariant x != 16;\nloop invariant x == 17;\nloop invariant x != 17;\nloop invariant x == 18;\nloop invariant x != 18;\nloop invariant x == 19;\nloop invariant x != 19;\nloop invariant x == 20;\nloop invariant x != 20;\nloop invariant x == 21;\nloop invariant x != 21;\nloop invariant x == 22;\nloop invariant x != 22;\nloop invariant x == 23;\nloop invariant x != 23;\nloop invariant x == 24;\nloop invariant x != 24;\nloop invariant x == 25;\nloop invariant x != 25;\nloop invariant x == 26;\nloop invariant x != 26;\nloop invariant x == 27;\nloop invariant x != 27;\nloop invariant x == 28;\nloop invariant x != 28;\nloop invariant x == 29;\nloop invariant x != 29;\nloop invariant x == 30;\nloop invariant x != 30;\nloop invariant x == 31;\nloop invariant x != 31;\nloop invariant x == 32;\nloop invariant x != 32;\nloop invariant x == 33;\nloop invariant x != 33;\nloop invariant x == 34;\nloop invariant x != 34;\nloop invariant x == 35;\nloop invariant x != 35;\nloop invariant x == 36;\nloop invariant x != 36;\nloop invariant x == 37;\nloop invariant x != 37;\nloop invariant x == 38;\nloop invariant x != 38;\nloop invariant x == 39;\nloop invariant x != 39;\nloop invariant x == 40;\nloop invariant x != 40;\nloop invariant x == 41;\nloop invariant x != 41;\nloop invariant x == 42;\nloop invariant x != 42;\nloop invariant x == 43;\nloop invariant x != 43;\nloop invariant x == 44;\nloop invariant x != 44;\nloop invariant x == 45;\nloop invariant x != 45;\nloop invariant x == 46;\nloop invariant x != 46;\nloop invariant x == 47;\nloop invariant x != 47;\nloop invariant x == 48;\nloop invariant x != 48;\nloop invariant x == 49;\nloop invariant x != 49;\nloop invariant x == 50;\nloop invariant x != 50;\nloop invariant x == 51;\nloop invariant x != 51;\nloop invariant x == 52;\nloop invariant x != 52;\nloop invariant x == 53;\nloop invariant x != 53;\nloop invariant x == 54;\nloop invariant x != 54;\nloop invariant x == 55;\nloop invariant x != 55;\nloop invariant x == 56;\nloop invariant x != 56;\nloop invariant x == 57;\nloop invariant x != 57;\nloop invariant x == 58;\nloop invariant x != 58;\nloop invariant x == 59;\nloop invariant x != 59;\nloop invariant x == 60;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= n is partially proven to be inductive.\nloop invariant x == n is partially proven to be inductive.\nloop invariant x != n is preserved but not established.\nloop invariant x == 0 is partially proven to be inductive.\nloop invariant x < n is partially proven to be inductive.\nloop invariant x > n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 0 is partially proven to be inductive.\nloop invariant x == 1 is partially proven to be inductive.\nloop invariant x != 1 is partially proven to be inductive.\nloop invariant x == 2 is partially proven to be inductive.\nloop invariant x != 2 is partially proven to be inductive.\nloop invariant x == 3 is partially proven to be inductive.\nloop invariant x != 3 is partially proven to be inductive.\nloop invariant x == 4 is partially proven to be inductive.\nloop invariant x != 4 is partially proven to be inductive.\nloop invariant x == 5 is partially proven to be inductive.\nloop invariant x != 5 is partially proven to be inductive.\nloop invariant x == 6 is partially proven to be inductive.\nloop invariant x != 6 is partially proven to be inductive.\nloop invariant x == 7 is partially proven to be inductive.\nloop invariant x != 7 is partially proven to be inductive.\nloop invariant x == 8 is partially proven to be inductive.\nloop invariant x != 8 is partially proven to be inductive.\nloop invariant x == 9 is partially proven to be inductive.\nloop invariant x != 9 is partially proven to be inductive.\nloop invariant x == 10 is partially proven to be inductive.\nloop invariant x != 10 is partially proven to be inductive.\nloop invariant x == 11 is partially proven to be inductive.\nloop invariant x != 11 is partially proven to be inductive.\nloop invariant x == 12 is partially proven to be inductive.\nloop invariant x != 12 is partially proven to be inductive.\nloop invariant x == 13 is partially proven to be inductive.\nloop invariant x != 13 is partially proven to be inductive.\nloop invariant x == 14 is partially proven to be inductive.\nloop invariant x != 14 is partially proven to be inductive.\nloop invariant x == 15 is partially proven to be inductive.\nloop invariant x != 15 is partially proven to be inductive.\nloop invariant x == 16 is partially proven to be inductive.\nloop invariant x != 16 is partially proven to be inductive.\nloop invariant x == 17 is partially proven to be inductive.\nloop invariant x != 17 is partially proven to be inductive.\nloop invariant x == 18 is partially proven to be inductive.\nloop invariant x != 18 is partially proven to be inductive.\nloop invariant x == 19 is partially proven to be inductive.\nloop invariant x != 19 is partially proven to be inductive.\nloop invariant x == 20 is partially proven to be inductive.\nloop invariant x != 20 is partially proven to be inductive.\nloop invariant x == 21 is partially proven to be inductive.\nloop invariant x != 21 is partially proven to be inductive.\nloop invariant x == 22 is partially proven to be inductive.\nloop invariant x != 22 is partially proven to be inductive.\nloop invariant x == 23 is partially proven to be inductive.\nloop invariant x != 23 is partially proven to be inductive.\nloop invariant x == 24 is partially proven to be inductive.\nloop invariant x != 24 is partially proven to be inductive.\nloop invariant x == 25 is partially proven to be inductive.\nloop invariant x != 25 is partially proven to be inductive.\nloop invariant x == 26 is partially proven to be inductive.\nloop invariant x != 26 is partially proven to be inductive.\nloop invariant x == 27 is partially proven to be inductive.\nloop invariant x != 27 is partially proven to be inductive.\nloop invariant x == 28 is partially proven to be inductive.\nloop invariant x != 28 is partially proven to be inductive.\nloop invariant x == 29 is partially proven to be inductive.\nloop invariant x != 29 is partially proven to be inductive.\nloop invariant x == 30 is partially proven to be inductive.\nloop invariant x != 30 is partially proven to be inductive.\nloop invariant x == 31 is partially proven to be inductive.\nloop invariant x != 31 is partially proven to be inductive.\nloop invariant x == 32 is partially proven to be inductive.\nloop invariant x != 32 is partially proven to be inductive.\nloop invariant x == 33 is partially proven to be inductive.\nloop invariant x != 33 is partially proven to be inductive.\nloop invariant x == 34 is partially proven to be inductive.\nloop invariant x != 34 is partially proven to be inductive.\nloop invariant x == 35 is partially proven to be inductive.\nloop invariant x != 35 is partially proven to be inductive.\nloop invariant x == 36 is partially proven to be inductive.\nloop invariant x != 36 is partially proven to be inductive.\nloop invariant x == 37 is partially proven to be inductive.\nloop invariant x != 37 is partially proven to be inductive.\nloop invariant x == 38 is partially proven to be inductive.\nloop invariant x != 38 is partially proven to be inductive.\nloop invariant x == 39 is partially proven to be inductive.\nloop invariant x != 39 is partially proven to be inductive.\nloop invariant x == 40 is partially proven to be inductive.\nloop invariant x != 40 is partially proven to be inductive.\nloop invariant x == 41 is partially proven to be inductive.\nloop invariant x != 41 is partially proven to be inductive.\nloop invariant x == 42 is partially proven to be inductive.\nloop invariant x != 42 is partially proven to be inductive.\nloop invariant x == 43 is partially proven to be inductive.\nloop invariant x != 43 is partially proven to be inductive.\nloop invariant x == 44 is partially proven to be inductive.\nloop invariant x != 44 is partially proven to be inductive.\nloop invariant x == 45 is partially proven to be inductive.\nloop invariant x != 45 is partially proven to be inductive.\nloop invariant x == 46 is partially proven to be inductive.\nloop invariant x != 46 is partially proven to be inductive.\nloop invariant x == 47 is partially proven to be inductive.\nloop invariant x != 47 is partially proven to be inductive.\nloop invariant x == 48 is partially proven to be inductive.\nloop invariant x != 48 is partially proven to be inductive.\nloop invariant x == 49 is partially proven to be inductive.\nloop invariant x != 49 is partially proven to be inductive.\nloop invariant x == 50 is partially proven to be inductive.\nloop invariant x != 50 is partially proven to be inductive.\nloop invariant x == 51 is partially proven to be inductive.\nloop invariant x != 51 is partially proven to be inductive.\nloop invariant x == 52 is partially proven to be inductive.\nloop invariant x != 52 is partially proven to be inductive.\nloop invariant x == 53 is partially proven to be inductive.\nloop invariant x != 53 is partially proven to be inductive.\nloop invariant x == 54 is partially proven to be inductive.\nloop invariant x != 54 is partially proven to be inductive.\nloop invariant x == 55 is partially proven to be inductive.\nloop invariant x != 55 is partially proven to be inductive.\nloop invariant x == 56 is partially proven to be inductive.\nloop invariant x != 56 is partially proven to be inductive.\nloop invariant x == 57 is partially proven to be inductive.\nloop invariant x != 57 is partially proven to be inductive.\nloop invariant x == 58 is partially proven to be inductive.\nloop invariant x != 58 is partially proven to be inductive.\nloop invariant x == 59 is partially proven to be inductive.\nloop invariant x != 59 is partially proven to be inductive.\nloop invariant x == 60 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant n == x;\nloop invariant n >= x;\nloop invariant x >= 0;\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n == x is established but not preserved.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: n >= x;\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n - (n - x);\nloop invariant x == n - (n - x);\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= 0 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == n - (n - x) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\nloop invariant i4: x == n - (n - x);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant n >= 0 ==> x <= n;\nloop invariant n >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant x >= 0 ==> x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant n >= 0 ==> x <= n is partially proven to be inductive.\nloop invariant x >= 0 ==> x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: n >= 0 ==> x >= 0;\nloop invariant i3: n >= 0 ==> x <= n;\nloop invariant i4: x >= 0 ==> x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n - (x - n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == n - (x - n) is established but not preserved.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= x;\nloop invariant x > 0;\nloop invariant (x <= n);\nloop invariant (x > 0);\nloop invariant (n >= x);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant x > 0 is neither established nor preserved.\nloop invariant (x <= n) is partially proven to be inductive.\nloop invariant (x > 0) is partially proven to be inductive.\nloop invariant (n >= x) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: n >= x;\n\nloop invariant i4: (x <= n);\n\nloop invariant i6: (n >= x);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant n > 0;\nloop invariant n = x + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x == n;\nloop invariant x == n ==> n >= 0;\nloop invariant x == n ==> n <= 0;\nloop invariant x == n ==> n == 0;\nloop invariant x == n ==> n == n;\nloop invariant x == n ==> n == x;\nloop invariant x == n ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == n is partially proven to be inductive.\nloop invariant x == n ==> n >= 0 is partially proven to be inductive.\nloop invariant x == n ==> n <= 0 is preserved but not established.\nloop invariant x == n ==> n == 0 is partially proven to be inductive.\nloop invariant x == n ==> n == n is partially proven to be inductive.\nloop invariant x == n ==> n == x is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n >= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n <= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == n is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n >= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n <= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == n is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n >= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n <= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == n is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0 is partially proven to be inductive.\nloop invariant x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n\n\n\nloop invariant i8: x == n ==> n == n;\nloop invariant i9: x == n ==> n == x;\n\n\n\nloop invariant i13: x == n ==> n == x ==> n == n;\nloop invariant i14: x == n ==> n == x ==> n == x;\n\n\n\nloop invariant i18: x == n ==> n == x ==> n == x ==> n == n;\nloop invariant i19: x == n ==> n == x ==> n == x ==> n == x;\n\n\n\nloop invariant i23: x == n ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i24: x == n ==> n == x ==> n == x ==> n == x ==> n == x;\n\n\n\nloop invariant i28: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i29: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\n\n\n\nloop invariant i33: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i34: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\n\n\n\nloop invariant i38: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant n == x;\nloop invariant x >= 0;\nloop invariant n >= 0 ==> x <= n;\nloop invariant n < 0 ==> x >= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n == x is established but not preserved.\nloop invariant x >= 0 is preserved but not established.\nloop invariant n >= 0 ==> x <= n is partially proven to be inductive.\nloop invariant n < 0 ==> x >= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: n >= 0 ==> x <= n;\nloop invariant i4: n < 0 ==> x >= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant n >= x;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= x is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\nloop invariant i1: n >= x;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x >= x + 1) ==> (n < 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x >= x + 1) ==> (n < 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: (x >= x + 1) ==> (n < 0);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 166: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\nloop invariant i1: 0 <= x <= n; loop invariant x <= n; loop invariant x >= 0; loop invariant n >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0; loop invariant x == n - k; loop invariant x >= n - k; loop invariant k >= 0; loop invariant x == n - k; loop invariant n - k >= 0; loop invariant k >= 0;\nloop invariant i2: 0 <= x;\nloop invariant i3: x <= n;\nloop invariant i4: x == 0 ==> n >= 0;\nloop invariant i5: x > 0 ==> n < 0;\nloop invariant i6: x == n ==> n >= 0;\nloop invariant i7: 0 <= x <= n;\nloop invariant i8: x >= n;\nloop invariant i9: x == n;\nloop invariant i10: x != n;\nloop invariant i11: x == 0;\nloop invariant i12: x < n;\nloop invariant i13: x > n;\nloop invariant i14: x >= 0;\nloop invariant i15: x <= 0;\nloop invariant i16: x == 1;\nloop invariant i17: x != 1;\nloop invariant i18: x == 2;\nloop invariant i19: x != 2;\nloop invariant i20: x == 3;\nloop invariant i21: x != 3;\nloop invariant i22: x == 4;\nloop invariant i23: x != 4;\nloop invariant i24: x == 5;\nloop invariant i25: x != 5;\nloop invariant i26: x == 6;\nloop invariant i27: x != 6;\nloop invariant i28: x == 7;\nloop invariant i29: x != 7;\nloop invariant i30: x == 8;\nloop invariant i31: x != 8;\nloop invariant i32: x == 9;\nloop invariant i33: x != 9;\nloop invariant i34: x == 10;\nloop invariant i35: x != 10;\nloop invariant i36: x == 11;\nloop invariant i37: x != 11;\nloop invariant i38: x == 12;\nloop invariant i39: x != 12;\nloop invariant i40: x == 13;\nloop invariant i41: x != 13;\nloop invariant i42: x == 14;\nloop invariant i43: x != 14;\nloop invariant i44: x == 15;\nloop invariant i45: x != 15;\nloop invariant i46: x == 16;\nloop invariant i47: x != 16;\nloop invariant i48: x == 17;\nloop invariant i49: x != 17;\nloop invariant i50: x == 18;\nloop invariant i51: x != 18;\nloop invariant i52: x == 19;\nloop invariant i53: x != 19;\nloop invariant i54: x == 20;\nloop invariant i55: x != 20;\nloop invariant i56: x == 21;\nloop invariant i57: x != 21;\nloop invariant i58: x == 22;\nloop invariant i59: x != 22;\nloop invariant i60: x == 23;\nloop invariant i61: x != 23;\nloop invariant i62: x == 24;\nloop invariant i63: x != 24;\nloop invariant i64: x == 25;\nloop invariant i65: x != 25;\nloop invariant i66: x == 26;\nloop invariant i67: x != 26;\nloop invariant i68: x == 27;\nloop invariant i69: x != 27;\nloop invariant i70: x == 28;\nloop invariant i71: x != 28;\nloop invariant i72: x == 29;\nloop invariant i73: x != 29;\nloop invariant i74: x == 30;\nloop invariant i75: x != 30;\nloop invariant i76: x == 31;\nloop invariant i77: x != 31;\nloop invariant i78: x == 32;\nloop invariant i79: x != 32;\nloop invariant i80: x == 33;\nloop invariant i81: x != 33;\nloop invariant i82: x == 34;\nloop invariant i83: x != 34;\nloop invariant i84: x == 35;\nloop invariant i85: x != 35;\nloop invariant i86: x == 36;\nloop invariant i87: x != 36;\nloop invariant i88: x == 37;\nloop invariant i89: x != 37;\nloop invariant i90: x == 38;\nloop invariant i91: x != 38;\nloop invariant i92: x == 39;\nloop invariant i93: x != 39;\nloop invariant i94: x == 40;\nloop invariant i95: x != 40;\nloop invariant i96: x == 41;\nloop invariant i97: x != 41;\nloop invariant i98: x == 42;\nloop invariant i99: x != 42;\nloop invariant i100: x == 43;\nloop invariant i101: x != 43;\nloop invariant i102: x == 44;\nloop invariant i103: x != 44;\nloop invariant i104: x == 45;\nloop invariant i105: x != 45;\nloop invariant i106: x == 46;\nloop invariant i107: x != 46;\nloop invariant i108: x == 47;\nloop invariant i109: x != 47;\nloop invariant i110: x == 48;\nloop invariant i111: x != 48;\nloop invariant i112: x == 49;\nloop invariant i113: x != 49;\nloop invariant i114: x == 50;\nloop invariant i115: x != 50;\nloop invariant i116: x == 51;\nloop invariant i117: x != 51;\nloop invariant i118: x == 52;\nloop invariant i119: x != 52;\nloop invariant i120: x == 53;\nloop invariant i121: x != 53;\nloop invariant i122: x == 54;\nloop invariant i123: x != 54;\nloop invariant i124: x == 55;\nloop invariant i125: x != 55;\nloop invariant i126: x == 56;\nloop invariant i127: x != 56;\nloop invariant i128: x == 57;\nloop invariant i129: x != 57;\nloop invariant i130: x == 58;\nloop invariant i131: x != 58;\nloop invariant i132: x == 59;\nloop invariant i133: x != 59;\nloop invariant i134: x == 60;\nloop invariant i135: n == x;\nloop invariant i136: n >= x;\nloop invariant i137: n >= 0;\nloop invariant i138: x == n - (n - x);\nloop invariant i139: n >= 0 ==> x >= 0;\nloop invariant i140: n >= 0 ==> x <= n;\nloop invariant i141: x >= 0 ==> x <= n;\nloop invariant i142: x == n - (x - n);\nloop invariant i143: x > 0;\nloop invariant i144: (x <= n);\nloop invariant i145: (x > 0);\nloop invariant i146: (n >= x);\nloop invariant i147: 0 <= x < n;\nloop invariant i148: n > 0;\nloop invariant i149: n = x + 1;\nloop invariant i150: x == n ==> n <= 0;\nloop invariant i151: x == n ==> n == 0;\nloop invariant i152: x == n ==> n == n;\nloop invariant i153: x == n ==> n == x;\nloop invariant i154: x == n ==> n == x ==> n >= 0;\nloop invariant i155: x == n ==> n == x ==> n <= 0;\nloop invariant i156: x == n ==> n == x ==> n == 0;\nloop invariant i157: x == n ==> n == x ==> n == n;\nloop invariant i158: x == n ==> n == x ==> n == x;\nloop invariant i159: x == n ==> n == x ==> n == x ==> n >= 0;\nloop invariant i160: x == n ==> n == x ==> n == x ==> n <= 0;\nloop invariant i161: x == n ==> n == x ==> n == x ==> n == 0;\nloop invariant i162: x == n ==> n == x ==> n == x ==> n == n;\nloop invariant i163: x == n ==> n == x ==> n == x ==> n == x;\nloop invariant i164: x == n ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant i165: x == n ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant i166: x == n ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant i167: x == n ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i168: x == n ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant i169: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant i170: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant i171: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant i172: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i173: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant i174: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant i175: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant i176: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant i177: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i178: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\nloop invariant i179: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n >= 0;\nloop invariant i180: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n <= 0;\nloop invariant i181: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == 0;\nloop invariant i182: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i183: n < 0 ==> x >= n;\nloop invariant i184: x == n - y;\nloop invariant i185: (x >= x + 1) ==> (n < 0);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 85,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\nloop invariant i4: x == 0 ==> n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i136: n >= x;\n\nloop invariant i138: x == n - (n - x);\nloop invariant i139: n >= 0 ==> x >= 0;\nloop invariant i140: n >= 0 ==> x <= n;\nloop invariant i141: x >= 0 ==> x <= n;\n\n\nloop invariant i144: (x <= n);\n\nloop invariant i146: (n >= x);\n\n\n\n\n\nloop invariant i152: x == n ==> n == n;\nloop invariant i153: x == n ==> n == x;\n\n\n\nloop invariant i157: x == n ==> n == x ==> n == n;\nloop invariant i158: x == n ==> n == x ==> n == x;\n\n\n\nloop invariant i162: x == n ==> n == x ==> n == x ==> n == n;\nloop invariant i163: x == n ==> n == x ==> n == x ==> n == x;\n\n\n\nloop invariant i167: x == n ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i168: x == n ==> n == x ==> n == x ==> n == x ==> n == x;\n\n\n\nloop invariant i172: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i173: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\n\n\n\nloop invariant i177: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i178: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x;\n\n\n\nloop invariant i182: x == n ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == x ==> n == n;\nloop invariant i183: n < 0 ==> x >= n;\n\nloop invariant i185: (x >= x + 1) ==> (n < 0);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c"
        ],
        "skipped": [],
        "total": 14,
        "success_count": 4,
        "failure_count": 10,
        "success_rate": 0.2857142857142857
    }
}