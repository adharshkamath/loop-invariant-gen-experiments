{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x_min >= 10;\nloop invariant x_max >= x_min;\nloop invariant x_max <= 20;\nloop invariant x_min % 2 == 0;\nloop invariant x_max % 2 == 0;\nloop invariant x >= x_min;\nloop invariant x <= x_max;\nloop invariant x_min >= 10;\nloop invariant x_max >= x_min;\nloop invariant x_max <= 20;\nloop invariant x_min % 2 == 0;\nloop invariant x_max % 2 == 0;\nloop invariant x >= x_min;\nloop invariant x <= x_max;\nloop invariant !(x % 2);\n*/\n```",
            "```\n/*@\nloop invariant 10 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x <= -2;\nloop invariant x >= 12 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant (x - 2) % 2 == 0 ==> x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x >= 10 ==> 10 <= x <= 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 1;\nloop invariant x % 2 == 1 ==> x >= 10;\nloop invariant x % 2 == 1 ==> x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x >= 2;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 10 >= x >= 12;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x <= 12;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 22;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x <= 100 ==> x <= 100;\nloop invariant x >= 10;\nloop invariant x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= 10;\nloop invariant (x >= 10) ==> (x % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x_min >= 10;\nloop invariant x_max >= x_min;\nloop invariant x_max <= 20;\nloop invariant x_min % 2 == 0;\nloop invariant x_max % 2 == 0;\nloop invariant x >= x_min;\nloop invariant x <= x_max;\nloop invariant x_min >= 10;\nloop invariant x_max >= x_min;\nloop invariant x_max <= 20;\nloop invariant x_min % 2 == 0;\nloop invariant x_max % 2 == 0;\nloop invariant x >= x_min;\nloop invariant x <= x_max;\nloop invariant !(x % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: unbound logic variable x_min. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 10 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x <= -2;\nloop invariant x >= 12 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x <= 8 ==> x % 2 != 0;\nloop invariant x >= 10 ==> x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 10 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x <= -2 is partially proven to be inductive.\nloop invariant x >= 12 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x <= 8 ==> x % 2 != 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant (x - 2) % 2 == 0 ==> x >= 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 20 is established but not preserved.\nloop invariant (x - 2) % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x >= 10 ==> 10 <= x <= 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> 10 <= x <= 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant i7: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i8: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i9: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i10: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i11: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i12: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i13: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i14: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i15: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i16: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i17: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i18: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 1;\nloop invariant x % 2 == 1 ==> x >= 10;\nloop invariant x % 2 == 1 ==> x <= 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is partially proven to be inductive.\nloop invariant x % 2 == 1 is preserved but not established.\nloop invariant x % 2 == 1 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10 ==> x >= 2;\nloop invariant x >= 10 ==> x % 2 == 0 ==> x >= 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x >= 2 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\nloop invariant i3: x >= 10 ==> x >= 2;\nloop invariant i4: x >= 10 ==> x % 2 == 0 ==> x >= 10;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 10 >= x >= 12;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 10 >= x >= 12 is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0 ==> x >= 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nAssertion x % 2 == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x <= 12;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x <= 12 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 22;\nloop invariant x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 22 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x <= 100 ==> x <= 100;\nloop invariant x >= 10;\nloop invariant x <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 10 ==> x >= 10 is partially proven to be inductive.\nloop invariant x <= 100 ==> x <= 100 is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x <= 100 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: x >= 10 ==> x >= 10;\nloop invariant i2: x <= 100 ==> x <= 100;\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= 10;\nloop invariant (x >= 10) ==> (x % 2 == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant (x >= 10) ==> (x % 2 == 0) is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 20 is established but not preserved.\nAssertion x % 2 == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 11: unbound logic variable x_min. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: x_min >= 10;\nloop invariant i2: x_max >= x_min;\nloop invariant i3: x_max <= 20;\nloop invariant i4: x_min % 2 == 0;\nloop invariant i5: x_max % 2 == 0;\nloop invariant i6: x >= x_min;\nloop invariant i7: x <= x_max;\nloop invariant i8: !(x % 2);\nloop invariant i9: 10 <= x <= 10;\nloop invariant i10: x % 2 == 0 ==> x >= 10;\nloop invariant i11: x % 2 != 0 ==> x <= -2;\nloop invariant i12: x >= 12 ==> x % 2 == 0;\nloop invariant i13: x <= 8 ==> x % 2 != 0;\nloop invariant i14: x >= 10 ==> x % 2 == 0;\nloop invariant i15: 0 <= x <= 20;\nloop invariant i16: (x - 2) % 2 == 0 ==> x >= 10;\nloop invariant i17: 0 <= x <= 10;\nloop invariant i18: x % 2 == 0;\nloop invariant i19: x >= 10 ==> 10 <= x <= 10;\nloop invariant i20: x >= 10 ==> x % 2 == 0 ==> x == 10;\nloop invariant i21: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant i22: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i23: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i24: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i25: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i26: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i27: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i28: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i29: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i30: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i31: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i32: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i33: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i34: x % 2 == 1;\nloop invariant i35: x % 2 == 1 ==> x >= 10;\nloop invariant i36: x % 2 == 1 ==> x <= 10;\nloop invariant i37: x >= 10 ==> x >= 2;\nloop invariant i38: x >= 10 ==> x % 2 == 0 ==> x >= 10;\nloop invariant i39: 10 >= x >= 12;\nloop invariant i40: 0 <= x <= 100000;\nloop invariant i41: x >= (1 + (y - 1) * y / 2);\nloop invariant i42: x >= 10;\nloop invariant i43: x >= y;\nloop invariant i44: x <= 12;\nloop invariant i45: 0 <= x <= 22;\nloop invariant i46: x >= 10 ==> x >= 10;\nloop invariant i47: x <= 100 ==> x <= 100;\nloop invariant i48: x <= 100;\nloop invariant i49: (x >= 10) ==> (x % 2 == 0);\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10;\nloop invariant i22: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i23: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i24: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i25: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i26: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i27: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i28: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i29: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i30: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i31: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i32: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\nloop invariant i33: x >= 10 ==> x % 2 == 0 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10 ==> x == 10;\n\n\n\nloop invariant i37: x >= 10 ==> x >= 2;\nloop invariant i38: x >= 10 ==> x % 2 == 0 ==> x >= 10;\n\n\n\n\n\n\n\nloop invariant i46: x >= 10 ==> x >= 10;\nloop invariant i47: x <= 100 ==> x <= 100;\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c",
            "../dataset/loop_invariants/code2inv/122.c",
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/overflow_safe1.c"
        ],
        "skipped": [],
        "total": 32,
        "success_count": 7,
        "failure_count": 25,
        "success_rate": 0.21875
    }
}