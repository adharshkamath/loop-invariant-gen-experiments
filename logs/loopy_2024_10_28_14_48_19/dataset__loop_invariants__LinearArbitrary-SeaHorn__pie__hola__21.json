{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  while( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= (i * c1) + (i * c2);\nloop invariant k <= i * (c1 + c2);\nloop invariant 0 <= v <= 1;\nloop invariant c1 >= c2;\nloop invariant i < n ==> v == unknown2() % 2;\nloop invariant v == 0 ==> k == i * c1;\nloop invariant v == 1 ==> k == i * c2 + (i * (i - 1) / 2 * c1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * max(c1, c2);\nloop invariant k >= i * min(c1, c2);\nloop invariant if(unknown2() % 2 == 0) then v == 0 else v == 1;\nloop invariant k >= i * c1 if v == 0 else k >= i * c2;\nloop invariant k <= i * c1 + n * c2 if v == 0 else k <= i * c2 + n * c1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 1 <= k <= n * max(c1, c2);\nloop invariant 0 <= v <= 1;\nloop invariant v == (unknown2() % 2 == 0);\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant n >= 0;\nloop invariant n <= 10;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant j >= 0;\nloop invariant j <= n;\nloop invariant c1 >= c2;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * c1 + n * c2;\nloop invariant c1 <= k <= n * c1 + n * c2;\nloop invariant c2 <= k <= n * c1 + n * c2;\nloop invariant 0 <= v <= 1;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * c1;\nloop invariant c2 * i <= k <= c1 * i;\nloop invariant unknown1() == n ==> c1 * i < k;\nloop invariant unknown1() == n ==> c2 * i < k;\nloop invariant unknown1() == n ==> k < c1 * (n + 1);\nloop invariant unknown1() == n ==> k < c2 * (n + 1);\nloop invariant unknown1() == n ==> k < c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * (c1 + c2);\nloop invariant c1 <= k <= n * c1 || c2 <= k <= n * c2;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k == c1 * i + c2 * (n - i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k <= c1 * i;\nloop invariant k >= c2 * i;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n; loop invariant k >= 0; loop invariant k <= (n * c1) + (n * c2); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1));\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k >= ((i - 1) * c1 + (n - i) * c2);\nloop invariant k <= (i * c1 + (n - i) * c2);\nloop invariant n >= 1;\nloop invariant n < 10;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * max(c1, c2);\nloop invariant k >= i;\nloop invariant k <= i * max(c1, c2);\nloop invariant k <= n * max(c1, c2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= k <= n * (c1 + c2);\nloop invariant k == i * c1 + (n - i) * c2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= (i * c1) + (i * c2);\nloop invariant k <= i * (c1 + c2);\nloop invariant 0 <= v <= 1;\nloop invariant c1 >= c2;\nloop invariant i < n ==> v == unknown2() % 2;\nloop invariant v == 0 ==> k == i * c1;\nloop invariant v == 1 ==> k == i * c2 + (i * (i - 1) / 2 * c1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 28: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: c1 >= c2;\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * max(c1, c2);\nloop invariant k >= i * min(c1, c2);\nloop invariant if(unknown2() % 2 == 0) then v == 0 else v == 1;\nloop invariant k >= i * c1 if v == 0 else k >= i * c2;\nloop invariant k <= i * c1 + n * c2 if v == 0 else k <= i * c2 + n * c1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 1 <= k <= n * max(c1, c2);\nloop invariant 0 <= v <= 1;\nloop invariant v == (unknown2() % 2 == 0);\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant n >= 0;\nloop invariant n <= 10;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant j >= 0;\nloop invariant j <= n;\nloop invariant c1 >= c2;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k >= n * c1;\nloop invariant k <= n * c2;\nloop invariant k == i * max(c1, c2);\nloop invariant n % 2 == 0 ==> k >= n * c1;\nloop invariant n % 2 != 0 ==> k <= n * c2;\nloop invariant unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant c1 <= 4000;\nloop invariant c2 <= 2000;\nloop invariant 0 <= v <= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: n >= 0;\nloop invariant i13: n <= 10;\nloop invariant i14: c1 >= 0;\nloop invariant i15: c2 >= 0;\nloop invariant i16: c1 <= 4000;\nloop invariant i17: c2 <= 2000;\n\n\nloop invariant i20: c1 >= c2;\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * c1 + n * c2;\nloop invariant c1 <= k <= n * c1 + n * c2;\nloop invariant c2 <= k <= n * c1 + n * c2;\nloop invariant 0 <= v <= 1;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\nloop invariant i == n ==> k >= n * c1;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 1;\nloop invariant i == n ==> k >= n * c2;\nloop invariant i == n ==> k <= n * c1 + n * c2;\nloop invariant i == n ==> k == n * c1 + n * c2;\nloop invariant i == n ==> v == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n * c1 + n * c2 is partially proven to be inductive.\nloop invariant c1 <= k <= n * c1 + n * c2 is preserved but not established.\nloop invariant c2 <= k <= n * c1 + n * c2 is partially proven to be inductive.\nloop invariant 0 <= v <= 1 is partially proven to be inductive.\nloop invariant i == n ==> k == n * c1 + n * c2 is partially proven to be inductive.\nloop invariant i == n ==> v == 1 is partially proven to be inductive.\nloop invariant i == n ==> k >= n * c2 is partially proven to be inductive.\nloop invariant i == n ==> k <= n * c1 + n * c2 is partially proven to be inductive.\nloop invariant i == n ==> v == 0 is partially proven to be inductive.\nloop invariant i == n ==> k >= n * c1 is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 27,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * c1;\nloop invariant c2 * i <= k <= c1 * i;\nloop invariant unknown1() == n ==> c1 * i < k;\nloop invariant unknown1() == n ==> c2 * i < k;\nloop invariant unknown1() == n ==> k < c1 * (n + 1);\nloop invariant unknown1() == n ==> k < c2 * (n + 1);\nloop invariant unknown1() == n ==> k < c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\nloop invariant k >= (n * c1 + n * c2) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= i * c1 + (n - i) * c2 is preserved but not established.\nloop invariant k <= (n * c1 + n * c2) / 2 is partially proven to be inductive.\nloop invariant k >= (n * c1 + n * c2) / 2 is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * (c1 + c2);\nloop invariant c1 <= k <= n * c1 || c2 <= k <= n * c2;\nloop invariant 0 <= v <= 1;\nloop invariant unknown2() % 2 == 0 ==> v == 0;\nloop invariant unknown2() % 2 != 0 ==> v == 1;\nloop invariant k == c1 * i + c2 * (n - i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 27: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k <= c1 * i;\nloop invariant k >= c2 * i;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i <= n;\nloop invariant k <= c1 * n;\nloop invariant k >= c2 * n;\nloop invariant i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k <= c1 * i is partially proven to be inductive.\nloop invariant k >= c2 * i is partially proven to be inductive.\nloop invariant k <= c1 * n + c2 * (n - 1) * (n - i) / 2 is partially proven to be inductive.\nloop invariant k >= c2 * n - c1 * (n - 1) * (i - 1) / 2 is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k <= c1 * n is partially proven to be inductive.\nloop invariant k >= c2 * n is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\nloop invariant i6: i <= n;\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant k >= 0; loop invariant k <= (n * c1) + (n * c2); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: invalid operands to binary *; unexpected ℤ and 𝔹. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k >= ((i - 1) * c1 + (n - i) * c2);\nloop invariant k <= (i * c1 + (n - i) * c2);\nloop invariant n >= 1;\nloop invariant n < 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= 0 is established but not preserved.\nloop invariant k >= ((i - 1) * c1 + (n - i) * c2) is neither established nor preserved.\nloop invariant k <= (i * c1 + (n - i) * c2) is established but not preserved.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant n < 10 is partially proven to be inductive.\nAssertion k > n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: n >= 1;\nloop invariant i6: n < 10;\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * max(c1, c2);\nloop invariant k >= i;\nloop invariant k <= i * max(c1, c2);\nloop invariant k <= n * max(c1, c2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unbound logic function max. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= k <= n * (c1 + c2);\nloop invariant k == i * c1 + (n - i) * c2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= k <= n * (c1 + c2) is partially proven to be inductive.\nloop invariant k == i * c1 + (n - i) * c2 is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 28: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= k <= (i * c1) + (i * c2);\nloop invariant i3: k <= i * (c1 + c2);\nloop invariant i4: 0 <= v <= 1;\nloop invariant i5: c1 >= c2;\nloop invariant i6: i < n ==> v == unknown2() % 2;\nloop invariant i7: v == 0 ==> k == i * c1;\nloop invariant i8: v == 1 ==> k == i * c2 + (i * (i - 1) / 2 * c1);\nloop invariant i9: 0 <= k <= n * max(c1, c2);\nloop invariant i10: k >= i * min(c1, c2);\nloop invariant i11: if(unknown2() % 2 == 0) then v == 0 else v == 1;\nloop invariant i12: k >= i * c1 if v == 0 else k >= i * c2;\nloop invariant i13: k <= i * c1 + n * c2 if v == 0 else k <= i * c2 + n * c1;\nloop invariant i14: 1 <= i <= n;\nloop invariant i15: 1 <= k <= n * max(c1, c2);\nloop invariant i16: v == (unknown2() % 2 == 0);\nloop invariant i17: k >= n * c1;\nloop invariant i18: k <= n * c2;\nloop invariant i19: k == i * max(c1, c2);\nloop invariant i20: n % 2 == 0 ==> k >= n * c1;\nloop invariant i21: n % 2 != 0 ==> k <= n * c2;\nloop invariant i22: unknown2() % 2 == 0 ==> k >= i * c1;\nloop invariant i23: unknown2() % 2 != 0 ==> k <= i * c2;\nloop invariant i24: n >= 0;\nloop invariant i25: n <= 10;\nloop invariant i26: c1 >= 0;\nloop invariant i27: c2 >= 0;\nloop invariant i28: c1 <= 4000;\nloop invariant i29: c2 <= 2000;\nloop invariant i30: j >= 0;\nloop invariant i31: j <= n;\nloop invariant i32: unknown2() % 2 == 0 ==> v == 0;\nloop invariant i33: unknown2() % 2 != 0 ==> v == 1;\nloop invariant i34: 0 <= k <= n * c1 + n * c2;\nloop invariant i35: c1 <= k <= n * c1 + n * c2;\nloop invariant i36: c2 <= k <= n * c1 + n * c2;\nloop invariant i37: i == n ==> k == n * c1 + n * c2;\nloop invariant i38: i == n ==> v == 1;\nloop invariant i39: i == n ==> k >= n * c2;\nloop invariant i40: i == n ==> k <= n * c1 + n * c2;\nloop invariant i41: i == n ==> v == 0;\nloop invariant i42: i == n ==> k >= n * c1;\nloop invariant i43: 0 <= k <= n * c1;\nloop invariant i44: c2 * i <= k <= c1 * i;\nloop invariant i45: unknown1() == n ==> c1 * i < k;\nloop invariant i46: unknown1() == n ==> c2 * i < k;\nloop invariant i47: unknown1() == n ==> k < c1 * (n + 1);\nloop invariant i48: unknown1() == n ==> k < c2 * (n + 1);\nloop invariant i49: unknown1() == n ==> k < c1 * n + c2;\nloop invariant i50: unknown1() == n ==> k < c1 * n + c2 * n;\nloop invariant i51: unknown1() == n ==> k < c1 * n + c2 * n + c1;\nloop invariant i52: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n;\nloop invariant i53: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2;\nloop invariant i54: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant i55: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant i56: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant i57: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant i58: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant i59: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant i60: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant i61: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant i62: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant i63: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant i64: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant i65: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2;\nloop invariant i66: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n;\nloop invariant i67: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1;\nloop invariant i68: unknown1() == n ==> k < c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n + c2 * n + c1 * n;\nloop invariant i69: k >= i * c1 + (n - i) * c2;\nloop invariant i70: k <= (n * c1 + n * c2) / 2;\nloop invariant i71: k >= (n * c1 + n * c2) / 2;\nloop invariant i72: 0 <= k <= n * (c1 + c2);\nloop invariant i73: c1 <= k <= n * c1 || c2 <= k <= n * c2;\nloop invariant i74: k == c1 * i + c2 * (n - i);\nloop invariant i75: k <= c1 * i;\nloop invariant i76: k >= c2 * i;\nloop invariant i77: k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\nloop invariant i78: k >= c2 * n - c1 * (n - 1) * (i - 1) / 2;\nloop invariant i79: i <= n;\nloop invariant i80: k <= c1 * n;\nloop invariant i81: k >= c2 * n;\nloop invariant i82: 0 <= i <= n; loop invariant k >= 0; loop invariant k <= (n * c1) + (n * c2); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 != 0)); loop invariant k == (n * c1 * (i % 2 == 0)) + (n * c2 * (i % 2 == 1));\nloop invariant i83: i1;\nloop invariant i84: i2;\nloop invariant i85: i3;\nloop invariant i86: i4;\nloop invariant i87: i5;\nloop invariant i88: i6;\nloop invariant i89: i7;\nloop invariant i90: i8;\nloop invariant i91: i9;\nloop invariant i92: i10;\nloop invariant i93: i11;\nloop invariant i94: i12;\nloop invariant i95: i13;\nloop invariant i96: i14;\nloop invariant i97: i15;\nloop invariant i98: i16;\nloop invariant i99: i17;\nloop invariant i100: i18;\nloop invariant i101: i19;\nloop invariant i102: i20;\nloop invariant i103: i21;\nloop invariant i104: i22;\nloop invariant i105: i23;\nloop invariant i106: i24;\nloop invariant i107: i25;\nloop invariant i108: i26;\nloop invariant i109: i27;\nloop invariant i110: i28;\nloop invariant i111: i29;\nloop invariant i112: i30;\nloop invariant i113: i31;\nloop invariant i114: i32;\nloop invariant i115: i33;\nloop invariant i116: i34;\nloop invariant i117: i35;\nloop invariant i118: i36;\nloop invariant i119: i37;\nloop invariant i120: i38;\nloop invariant i121: i39;\nloop invariant i122: i40;\nloop invariant i123: i41;\nloop invariant i124: i42;\nloop invariant i125: i43;\nloop invariant i126: i44;\nloop invariant i127: i45;\nloop invariant i128: i46;\nloop invariant i129: i47;\nloop invariant i130: i48;\nloop invariant i131: i49;\nloop invariant i132: i50;\nloop invariant i133: i51;\nloop invariant i134: i52;\nloop invariant i135: i53;\nloop invariant i136: i54;\nloop invariant i137: i55;\nloop invariant i138: i56;\nloop invariant i139: i57;\nloop invariant i140: i58;\nloop invariant i141: i59;\nloop invariant i142: i60;\nloop invariant i143: i61;\nloop invariant i144: i62;\nloop invariant i145: i63;\nloop invariant i146: i64;\nloop invariant i147: i65;\nloop invariant i148: i66;\nloop invariant i149: i67;\nloop invariant i150: i68;\nloop invariant i151: i69;\nloop invariant i152: i70;\nloop invariant i153: i71;\nloop invariant i154: i72;\nloop invariant i155: i73;\nloop invariant i156: i74;\nloop invariant i157: i75;\nloop invariant i158: i76;\nloop invariant i159: i77;\nloop invariant i160: i78;\nloop invariant i161: i79;\nloop invariant i162: i80;\nloop invariant i163: i81;\nloop invariant i164: i82;\nloop invariant i165: i83;\nloop invariant i166: i84;\nloop invariant i167: i85;\nloop invariant i168: i86;\nloop invariant i169: i87;\nloop invariant i170: i88;\nloop invariant i171: i89;\nloop invariant i172: i90;\nloop invariant i173: i91;\nloop invariant i174: i92;\nloop invariant i175: i93;\nloop invariant i176: i94;\nloop invariant i177: i95;\nloop invariant i178: i96;\nloop invariant i179: i97;\nloop invariant i180: i98;\nloop invariant i181: i99;\nloop invariant i182: i100;\nloop invariant i183: i101;\nloop invariant i184: i102;\nloop invariant i185: i103;\nloop invariant i186: i104;\nloop invariant i187: i105;\nloop invariant i188: i106;\nloop invariant i189: i107;\nloop invariant i190: i108;\nloop invariant i191: i109;\nloop invariant i192: i110;\nloop invariant i193: i111;\nloop invariant i194: i112;\nloop invariant i195: i113;\nloop invariant i196: i114;\nloop invariant i197: i115;\nloop invariant i198: i116;\nloop invariant i199: i117;\nloop invariant i200: i118;\nloop invariant i201: i119;\nloop invariant i202: i120;\nloop invariant i203: i121;\nloop invariant i204: i122;\nloop invariant i205: i123;\nloop invariant i206: i124;\nloop invariant i207: i125;\nloop invariant i208: i126;\nloop invariant i209: i127;\nloop invariant i210: i128;\nloop invariant i211: i129;\nloop invariant i212: i130;\nloop invariant i213: i131;\nloop invariant i214: i132;\nloop invariant i215: i133;\nloop invariant i216: i134;\nloop invariant i217: i135;\nloop invariant i218: i136;\nloop invariant i219: i137;\nloop invariant i220: i138;\nloop invariant i221: i139;\nloop invariant i222: i140;\nloop invariant i223: i141;\nloop invariant i224: i142;\nloop invariant i225: i143;\nloop invariant i226: i144;\nloop invariant i227: i145;\nloop invariant i228: i146;\nloop invariant i229: i147;\nloop invariant i230: i148;\nloop invariant i231: i149;\nloop invariant i232: i150;\nloop invariant i233: i151;\nloop invariant i234: i152;\nloop invariant i235: i153;\nloop invariant i236: i154;\nloop invariant i237: i155;\nloop invariant i238: i156;\nloop invariant i239: i157;\nloop invariant i240: i158;\nloop invariant i241: k >= 0;\nloop invariant i242: k >= ((i - 1) * c1 + (n - i) * c2);\nloop invariant i243: k <= (i * c1 + (n - i) * c2);\nloop invariant i244: n >= 1;\nloop invariant i245: n < 10;\nloop invariant i246: k >= i;\nloop invariant i247: k <= i * max(c1, c2);\nloop invariant i248: k <= n * max(c1, c2);\nloop invariant i249: k == i * c1 + (n - i) * c2;\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 213,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= k <= (i * c1) + (i * c2);\nloop invariant i3: k <= i * (c1 + c2);\n\nloop invariant i5: c1 >= c2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i24: n >= 0;\nloop invariant i25: n <= 10;\nloop invariant i26: c1 >= 0;\nloop invariant i27: c2 >= 0;\nloop invariant i28: c1 <= 4000;\nloop invariant i29: c2 <= 2000;\n\n\n\n\nloop invariant i34: 0 <= k <= n * c1 + n * c2;\n\n\n\n\nloop invariant i39: i == n ==> k >= n * c2;\nloop invariant i40: i == n ==> k <= n * c1 + n * c2;\n\n\nloop invariant i43: 0 <= k <= n * c1;\nloop invariant i44: c2 * i <= k <= c1 * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: 0 <= k <= n * (c1 + c2);\n\n\nloop invariant i75: k <= c1 * i;\nloop invariant i76: k >= c2 * i;\nloop invariant i77: k <= c1 * n + c2 * (n - 1) * (n - i) / 2;\n\nloop invariant i79: i <= n;\nloop invariant i80: k <= c1 * n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i241: k >= 0;\n\nloop invariant i243: k <= (i * c1 + (n - i) * c2);\nloop invariant i244: n >= 1;\nloop invariant i245: n < 10;\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c"
        ],
        "skipped": [],
        "total": 11,
        "success_count": 3,
        "failure_count": 8,
        "success_rate": 0.2727272727272727
    }
}