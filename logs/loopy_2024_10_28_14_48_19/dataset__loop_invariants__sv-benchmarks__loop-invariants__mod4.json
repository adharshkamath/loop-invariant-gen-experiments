{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 4 * (k + 1);\n*/\n```",
            "```\n/*@\nloop invariant x % 4 == 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 * (1 + y);\nloop invariant y >= 0;\nloop invariant x % 4 == 0;\nloop invariant unknown_int() ==> x == 0;\nloop invariant !(unknown_int()) ==> x > 0;\nloop invariant !(unknown_int()) ==> y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0;\nloop invariant x >= 4 * unknown_int();\nloop invariant x <= 4 * unknown_int() + 4;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0; loop invariant unknown_int ==> x % 4 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant 4 * (x / 4) == x;\nloop invariant x % 4 == 0;\nloop invariant (x % 4) == 0 ==> (x == 0);\nloop invariant (x % 4) == 1 ==> (x == 1);\nloop invariant (x % 4) == 2 ==> (x == 2);\nloop invariant (x % 4) == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant (x % 4 == 0);\nloop invariant n >= 0;\nloop invariant n <= x / 4;\nloop invariant unknown_int() ==> n > 0;\nloop invariant unknown_int() ==> (x % 4 == 0);\nloop invariant unknown_int() ==> (0 <= n <= x / 4);\nloop invariant unknown_int() ==> (x >= 0);\nloop invariant unknown_int() ==> (x <= 4 * n);\nloop invariant unknown_int() ==> (n >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 * unknown_int();\nloop invariant (x % 4) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4 * unknown_int();\nloop invariant !(x % 4);\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 * (2**31 - 1);\nloop invariant x % 4 == 0 ==> 0 <= unknown_int() <= 1;\nloop invariant x % 4 != 0 ==> 0 <= unknown_int() <= 1 ==> x % 4 == unknown_int();\nloop invariant x % 4 == 0 ==> unknown_int() == 0;\nloop invariant x % 4 != 0 ==> unknown_int() == 1;\nloop invariant x % 4 == 0 ==> x == 0;\nloop invariant x % 4 != 0 ==> x == 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 2^32;\nloop invariant x % 4 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= unknown_int() <= 2147483647;\nloop invariant true;\nloop invariant x >= 0;\nloop invariant x <= 2147483647;\nloop invariant x % 4 == 0;\nloop invariant 0 <= unknown_int() <= 2147483647 ==> unknown_int();\nloop invariant true ==> unknown_int();\nloop invariant x >= 0 ==> x;\nloop invariant x <= 2147483647 ==> x;\nloop invariant x % 4 == 0 ==> x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant unknown_int() == true;\nloop invariant x is non-deterministic at the beginning of the loop;\nloop invariant 4 <= x <= 4 * (number of iterations);\nloop invariant unknown_int() == true;\nloop invariant x is non-deterministic at the beginning of the loop;\nloop invariant x is non-deterministic at the end of the loop;\nloop invariant x is non-deterministic at the end of the loop;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant x % 4 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 <= 3;\nloop invariant x % 4 >= 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (k + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable k. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x % 4 == 0;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x % 4 == 0 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (1 + y);\nloop invariant y >= 0;\nloop invariant x % 4 == 0;\nloop invariant unknown_int() ==> x == 0;\nloop invariant !(unknown_int()) ==> x > 0;\nloop invariant !(unknown_int()) ==> y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0;\nloop invariant x >= 4 * unknown_int();\nloop invariant x <= 4 * unknown_int() + 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0; loop invariant unknown_int ==> x % 4 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0; loop invariant unknown_int ==> x % 4 == 0 is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: x >= 0; loop invariant unknown_int ==> x % 4 == 0;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant 4 * (x / 4) == x;\nloop invariant x % 4 == 0;\nloop invariant (x % 4) == 0 ==> (x == 0);\nloop invariant (x % 4) == 1 ==> (x == 1);\nloop invariant (x % 4) == 2 ==> (x == 2);\nloop invariant (x % 4) == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant 4 * (x / 4) == x is partially proven to be inductive.\nloop invariant x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 4) == 0 ==> (x == 0) is established but not preserved.\nloop invariant (x % 4) == 1 ==> (x == 1) is partially proven to be inductive.\nloop invariant (x % 4) == 2 ==> (x == 2) is partially proven to be inductive.\nloop invariant (x % 4) == 3 ==> (x == 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4) is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\n\n\n\n\n\n\nloop invariant i8: x % 4 == 0 ==> x == 4 * (x / 4);\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant (x % 4 == 0);\nloop invariant n >= 0;\nloop invariant n <= x / 4;\nloop invariant unknown_int() ==> n > 0;\nloop invariant unknown_int() ==> (x % 4 == 0);\nloop invariant unknown_int() ==> (0 <= n <= x / 4);\nloop invariant unknown_int() ==> (x >= 0);\nloop invariant unknown_int() ==> (x <= 4 * n);\nloop invariant unknown_int() ==> (n >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * unknown_int();\nloop invariant (x % 4) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4 * unknown_int();\nloop invariant !(x % 4);\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\nloop invariant i3: x >= 0;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (2**31 - 1);\nloop invariant x % 4 == 0 ==> 0 <= unknown_int() <= 1;\nloop invariant x % 4 != 0 ==> 0 <= unknown_int() <= 1 ==> x % 4 == unknown_int();\nloop invariant x % 4 == 0 ==> unknown_int() == 0;\nloop invariant x % 4 != 0 ==> unknown_int() == 1;\nloop invariant x % 4 == 0 ==> x == 0;\nloop invariant x % 4 != 0 ==> x == 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 2^32;\nloop invariant x % 4 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= unknown_int() <= 2147483647;\nloop invariant true;\nloop invariant x >= 0;\nloop invariant x <= 2147483647;\nloop invariant x % 4 == 0;\nloop invariant 0 <= unknown_int() <= 2147483647 ==> unknown_int();\nloop invariant true ==> unknown_int();\nloop invariant x >= 0 ==> x;\nloop invariant x <= 2147483647 ==> x;\nloop invariant x % 4 == 0 ==> x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant unknown_int() == true;\nloop invariant x is non-deterministic at the beginning of the loop;\nloop invariant 4 <= x <= 4 * (number of iterations);\nloop invariant unknown_int() == true;\nloop invariant x is non-deterministic at the beginning of the loop;\nloop invariant x is non-deterministic at the end of the loop;\nloop invariant x is non-deterministic at the end of the loop;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant x % 4 == 0;\nloop invariant unknown_int() == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 <= 3;\nloop invariant x % 4 >= 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\nloop invariant x % 4 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x % 4 == 0 is established but not preserved.\nloop invariant x % 4 <= 3 is partially proven to be inductive.\nloop invariant x % 4 >= 0 is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x % 4 <= 3;\nloop invariant i4: x % 4 >= 0;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 4 * (k + 1);\nloop invariant i2: x % 4 == 0;\nloop invariant i3: x >= 0;\nloop invariant i4: 0 <= x <= 4 * (1 + y);\nloop invariant i5: y >= 0;\nloop invariant i6: unknown_int() ==> x == 0;\nloop invariant i7: !(unknown_int()) ==> x > 0;\nloop invariant i8: !(unknown_int()) ==> y > 0;\nloop invariant i9: 0 <= x;\nloop invariant i10: x >= 4 * unknown_int();\nloop invariant i11: x <= 4 * unknown_int() + 4;\nloop invariant i12: x >= 0; loop invariant unknown_int ==> x % 4 == 0;\nloop invariant i13: 0 <= x <= UINT_MAX;\nloop invariant i14: 4 * (x / 4) == x;\nloop invariant i15: (x % 4) == 0 ==> (x == 0);\nloop invariant i16: (x % 4) == 1 ==> (x == 1);\nloop invariant i17: (x % 4) == 2 ==> (x == 2);\nloop invariant i18: (x % 4) == 3 ==> (x == 3);\nloop invariant i19: x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant i20: 0 <= x <= 4 * n;\nloop invariant i21: (x % 4 == 0);\nloop invariant i22: n >= 0;\nloop invariant i23: n <= x / 4;\nloop invariant i24: unknown_int() ==> n > 0;\nloop invariant i25: unknown_int() ==> (x % 4 == 0);\nloop invariant i26: unknown_int() ==> (0 <= n <= x / 4);\nloop invariant i27: unknown_int() ==> (x >= 0);\nloop invariant i28: unknown_int() ==> (x <= 4 * n);\nloop invariant i29: unknown_int() ==> (n >= 0);\nloop invariant i30: 0 <= x <= 4 * unknown_int();\nloop invariant i31: (x % 4) == 0;\nloop invariant i32: 1 <= x <= 4 * unknown_int();\nloop invariant i33: !(x % 4);\nloop invariant i34: 0 <= x <= 4 * (2**31 - 1);\nloop invariant i35: x % 4 == 0 ==> 0 <= unknown_int() <= 1;\nloop invariant i36: x % 4 != 0 ==> 0 <= unknown_int() <= 1 ==> x % 4 == unknown_int();\nloop invariant i37: x % 4 == 0 ==> unknown_int() == 0;\nloop invariant i38: x % 4 != 0 ==> unknown_int() == 1;\nloop invariant i39: x % 4 == 0 ==> x == 0;\nloop invariant i40: x % 4 != 0 ==> x == 4;\nloop invariant i41: 0 <= x < 2^32;\nloop invariant i42: 0 <= unknown_int() <= 2147483647;\nloop invariant i43: true;\nloop invariant i44: x <= 2147483647;\nloop invariant i45: 0 <= unknown_int() <= 2147483647 ==> unknown_int();\nloop invariant i46: true ==> unknown_int();\nloop invariant i47: x >= 0 ==> x;\nloop invariant i48: x <= 2147483647 ==> x;\nloop invariant i49: x % 4 == 0 ==> x;\nloop invariant i50: 0 <= x <= 4;\nloop invariant i51: unknown_int() == true;\nloop invariant i52: x is non-deterministic at the beginning of the loop;\nloop invariant i53: 4 <= x <= 4 * (number of iterations);\nloop invariant i54: x is non-deterministic at the end of the loop;\nloop invariant i55: 0 <= x <= 2^32 - 1;\nloop invariant i56: unknown_int() == 0;\nloop invariant i57: x % 4 <= 3;\nloop invariant i58: x % 4 >= 0;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 45,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\n\n\nloop invariant i9: 0 <= x;\n\n\nloop invariant i12: x >= 0; loop invariant unknown_int ==> x % 4 == 0;\nloop invariant i13: 0 <= x <= UINT_MAX;\nloop invariant i14: 4 * (x / 4) == x;\n\nloop invariant i16: (x % 4) == 1 ==> (x == 1);\nloop invariant i17: (x % 4) == 2 ==> (x == 2);\nloop invariant i18: (x % 4) == 3 ==> (x == 3);\nloop invariant i19: x % 4 == 0 ==> x == 4 * (x / 4);\n\nloop invariant i21: (x % 4 == 0);\n\n\n\n\n\n\n\n\n\nloop invariant i31: (x % 4) == 0;\n\nloop invariant i33: !(x % 4);\n\n\n\n\n\n\nloop invariant i40: x % 4 != 0 ==> x == 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i57: x % 4 <= 3;\nloop invariant i58: x % 4 >= 0;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c"
        ],
        "skipped": [],
        "total": 17,
        "success_count": 5,
        "failure_count": 12,
        "success_rate": 0.29411764705882354
    }
}