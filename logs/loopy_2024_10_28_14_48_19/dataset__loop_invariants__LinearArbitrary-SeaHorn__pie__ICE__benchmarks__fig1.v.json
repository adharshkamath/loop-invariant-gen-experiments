{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y; loop invariant x + y >= 0; loop invariant x >= -51; loop invariant x <= -49; loop invariant y <= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 != v2; loop invariant v2 != v3; loop invariant v3 != v1; loop invariant v1 != v2 + v3; loop invariant v2 != v1 + v3; loop invariant v3 != v1 + v2; loop invariant v1 + v2 + v3 == 0; loop invariant v1 + v2 + v3 == 1; loop invariant v1 + v2 + v3 == 2; loop invariant v1 + v2 + v3 == 3; loop invariant v1 + v2 + v3 == 4; loop invariant v1 + v2 + v3 == 5; loop invariant v1 + v2 + v3 == 6; loop invariant v1 + v2 + v3 == 7; loop invariant v1 + v2 + v3 == 8; loop invariant v1 + v2 + v3 == 9; loop invariant v1 + v2 + v3 == 10; loop invariant v1 + v2 + v3 == 11; loop invariant v1 + v2 + v3 == 12; loop invariant v1 + v2 + v3 == 13; loop invariant v1 + v2 + v3 == 14; loop invariant v1 + v2 + v3 == 15; loop invariant v1 + v2 + v3 == 16; loop invariant v1 + v2 + v3 == 17; loop invariant v1 + v2 + v3 == 18; loop invariant v1 + v2 + v3 == 19; loop invariant v1 + v2 + v3 == 20; loop invariant v1 + v2 + v3 == 21; loop invariant v1 + v2 + v3 == 22; loop invariant v1 + v2 + v3 == 23; loop invariant v1 + v2 + v3 == 24; loop invariant v1 + v2 + v3 == 25; loop invariant v1 + v2 + v3 == 26; loop invariant v1 + v2 + v3 == 27; loop invariant v1 + v2 + v3 == 28; loop invariant v1 + v2 + v3 == 29; loop invariant v1 + v2 + v3 == 30; loop invariant v1 + v2 + v3 == 31; loop invariant v1 + v2 + v3 == 32; loop invariant v1 + v2 + v3 == 33; loop invariant v1 + v2 + v3 == 34; loop invariant v1 + v2 + v3 == 35; loop invariant v1 + v2 + v3 == 36; loop invariant v1 + v2 + v3 == 37; loop invariant v1 + v2 + v3 == 38; loop invariant v1 + v2 + v3 == 39; loop invariant v1 + v2 + v3 == 40; loop invariant v1 + v2 + v3 == 41; loop invariant v1 + v2 + v3 == 42; loop invariant v1 + v2 + v3 == 43; loop invariant v1 + v2 + v3 == 44; loop invariant v1 + v2 + v3 == 45; loop invariant v1 + v2 + v3 == 46; loop invariant v1 + v2 + v3 == 47; loop invariant v1 + v2 + v3 == 48; loop invariant v1 + v2 + v3 == 49; loop invariant v1 + v2 + v3 == 50; loop invariant v1 + v2 + v3 == 51; loop invariant v1 + v2 + v3 == 52; loop invariant v1 + v2 + v3 == 53; loop invariant v1 + v2 + v3 == 54; loop invariant v1 + v2 + v3 == 55; loop invariant v1 + v2 + v3 == 56;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant -50 <= x <= 0;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x == (-50 + y);\nloop invariant x == (v1 + v2 + v3);\nloop invariant x == (v1 + v2 + v3 - 50);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant y > 0;\nloop invariant x <= v3;\nloop invariant x >= v3;\nloop invariant x >= v2;\nloop invariant x <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant x <= -50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 <= x <= -50 + y;\nloop invariant v1 is non-deterministic;\nloop invariant v2 is non-deterministic;\nloop invariant v3 is non-deterministic;\nloop invariant x < 0 ==> x == -50 + y;\nloop invariant y > 0 ==> y == x + 50;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant x == -50 - y * y / 2;\nloop invariant x <= 0;\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50 - y;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant y > 0 ==> x >= -50 - y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x >= (y + (-50));\nloop invariant y > 0 ==> v1 = unknown_int();\nloop invariant y > 0 ==> v2 = unknown_int();\nloop invariant y > 0 ==> v3 = unknown_int();\nloop invariant y > 0 ==> v1 >= 0;\nloop invariant y > 0 ==> v2 >= 0;\nloop invariant y > 0 ==> v3 >= 0;\nloop invariant y > 0 ==> v1 <= 2147483647;\nloop invariant y > 0 ==> v2 <= 2147483647;\nloop invariant y > 0 ==> v3 <= 2147483647;\nloop invariant x <= 2147483647;\nloop invariant y <= 2147483647;\nloop invariant x >= -2147483647;\nloop invariant y >= -2147483647;\n*/\n```",
            "```\n/*@\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= (y * (y - 1) / 2);\nloop invariant x <= (y * (y - 1) / 2) + 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 50; loop invariant x == -50 + y * y / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x + y >= 0; loop invariant x >= -51; loop invariant x <= -49; loop invariant y <= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 != v2; loop invariant v2 != v3; loop invariant v3 != v1; loop invariant v1 != v2 + v3; loop invariant v2 != v1 + v3; loop invariant v3 != v1 + v2; loop invariant v1 + v2 + v3 == 0; loop invariant v1 + v2 + v3 == 1; loop invariant v1 + v2 + v3 == 2; loop invariant v1 + v2 + v3 == 3; loop invariant v1 + v2 + v3 == 4; loop invariant v1 + v2 + v3 == 5; loop invariant v1 + v2 + v3 == 6; loop invariant v1 + v2 + v3 == 7; loop invariant v1 + v2 + v3 == 8; loop invariant v1 + v2 + v3 == 9; loop invariant v1 + v2 + v3 == 10; loop invariant v1 + v2 + v3 == 11; loop invariant v1 + v2 + v3 == 12; loop invariant v1 + v2 + v3 == 13; loop invariant v1 + v2 + v3 == 14; loop invariant v1 + v2 + v3 == 15; loop invariant v1 + v2 + v3 == 16; loop invariant v1 + v2 + v3 == 17; loop invariant v1 + v2 + v3 == 18; loop invariant v1 + v2 + v3 == 19; loop invariant v1 + v2 + v3 == 20; loop invariant v1 + v2 + v3 == 21; loop invariant v1 + v2 + v3 == 22; loop invariant v1 + v2 + v3 == 23; loop invariant v1 + v2 + v3 == 24; loop invariant v1 + v2 + v3 == 25; loop invariant v1 + v2 + v3 == 26; loop invariant v1 + v2 + v3 == 27; loop invariant v1 + v2 + v3 == 28; loop invariant v1 + v2 + v3 == 29; loop invariant v1 + v2 + v3 == 30; loop invariant v1 + v2 + v3 == 31; loop invariant v1 + v2 + v3 == 32; loop invariant v1 + v2 + v3 == 33; loop invariant v1 + v2 + v3 == 34; loop invariant v1 + v2 + v3 == 35; loop invariant v1 + v2 + v3 == 36; loop invariant v1 + v2 + v3 == 37; loop invariant v1 + v2 + v3 == 38; loop invariant v1 + v2 + v3 == 39; loop invariant v1 + v2 + v3 == 40; loop invariant v1 + v2 + v3 == 41; loop invariant v1 + v2 + v3 == 42; loop invariant v1 + v2 + v3 == 43; loop invariant v1 + v2 + v3 == 44; loop invariant v1 + v2 + v3 == 45; loop invariant v1 + v2 + v3 == 46; loop invariant v1 + v2 + v3 == 47; loop invariant v1 + v2 + v3 == 48; loop invariant v1 + v2 + v3 == 49; loop invariant v1 + v2 + v3 == 50; loop invariant v1 + v2 + v3 == 51; loop invariant v1 + v2 + v3 == 52; loop invariant v1 + v2 + v3 == 53; loop invariant v1 + v2 + v3 == 54; loop invariant v1 + v2 + v3 == 55; loop invariant v1 + v2 + v3 == 56;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y; loop invariant x + y >= 0; loop invariant x >= -51; loop invariant x <= -49; loop invariant y <= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 != v2; loop invariant v2 != v3; loop invariant v3 != v1; loop invariant v1 != v2 + v3; loop invariant v2 != v1 + v3; loop invariant v3 != v1 + v2; loop invariant v1 + v2 + v3 == 0; loop invariant v1 + v2 + v3 == 1; loop invariant v1 + v2 + v3 == 2; loop invariant v1 + v2 + v3 == 3; loop invariant v1 + v2 + v3 == 4; loop invariant v1 + v2 + v3 == 5; loop invariant v1 + v2 + v3 == 6; loop invariant v1 + v2 + v3 == 7; loop invariant v1 + v2 + v3 == 8; loop invariant v1 + v2 + v3 == 9; loop invariant v1 + v2 + v3 == 10; loop invariant v1 + v2 + v3 == 11; loop invariant v1 + v2 + v3 == 12; loop invariant v1 + v2 + v3 == 13; loop invariant v1 + v2 + v3 == 14; loop invariant v1 + v2 + v3 == 15; loop invariant v1 + v2 + v3 == 16; loop invariant v1 + v2 + v3 == 17; loop invariant v1 + v2 + v3 == 18; loop invariant v1 + v2 + v3 == 19; loop invariant v1 + v2 + v3 == 20; loop invariant v1 + v2 + v3 == 21; loop invariant v1 + v2 + v3 == 22; loop invariant v1 + v2 + v3 == 23; loop invariant v1 + v2 + v3 == 24; loop invariant v1 + v2 + v3 == 25; loop invariant v1 + v2 + v3 == 26; loop invariant v1 + v2 + v3 == 27; loop invariant v1 + v2 + v3 == 28; loop invariant v1 + v2 + v3 == 29; loop invariant v1 + v2 + v3 == 30; loop invariant v1 + v2 + v3 == 31; loop invariant v1 + v2 + v3 == 32; loop invariant v1 + v2 + v3 == 33; loop invariant v1 + v2 + v3 == 34; loop invariant v1 + v2 + v3 == 35; loop invariant v1 + v2 + v3 == 36; loop invariant v1 + v2 + v3 == 37; loop invariant v1 + v2 + v3 == 38; loop invariant v1 + v2 + v3 == 39; loop invariant v1 + v2 + v3 == 40; loop invariant v1 + v2 + v3 == 41; loop invariant v1 + v2 + v3 == 42; loop invariant v1 + v2 + v3 == 43; loop invariant v1 + v2 + v3 == 44; loop invariant v1 + v2 + v3 == 45; loop invariant v1 + v2 + v3 == 46; loop invariant v1 + v2 + v3 == 47; loop invariant v1 + v2 + v3 == 48; loop invariant v1 + v2 + v3 == 49; loop invariant v1 + v2 + v3 == 50; loop invariant v1 + v2 + v3 == 51; loop invariant v1 + v2 + v3 == 52; loop invariant v1 + v2 + v3 == 53; loop invariant v1 + v2 + v3 == 54; loop invariant v1 + v2 + v3 == 55; loop invariant v1 + v2 + v3 == 56 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant -50 <= x <= 0;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x == (-50 + y);\nloop invariant x == (v1 + v2 + v3);\nloop invariant x == (v1 + v2 + v3 - 50);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v1 <= 1 is preserved but not established.\nloop invariant 0 <= v2 <= 1 is preserved but not established.\nloop invariant 0 <= v3 <= 1 is preserved but not established.\nloop invariant -50 <= x <= 0 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x == (-50 + y) is partially proven to be inductive.\nloop invariant x == (v1 + v2 + v3) is partially proven to be inductive.\nloop invariant x == (v1 + v2 + v3 - 50) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= -50 is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x <= v3;\nloop invariant x >= v3;\nloop invariant x >= v2;\nloop invariant x <= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y > 0 is preserved but not established.\nloop invariant x <= v3 is neither established nor preserved.\nloop invariant x >= v3 is neither established nor preserved.\nloop invariant x >= v2 is neither established nor preserved.\nloop invariant x <= 0 is established but not preserved.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant x <= -50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 50 is preserved but not established.\nloop invariant x >= (y - 1) * y / 2 is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nloop invariant x <= -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 <= x <= -50 + y;\nloop invariant v1 is non-deterministic;\nloop invariant v2 is non-deterministic;\nloop invariant v3 is non-deterministic;\nloop invariant x < 0 ==> x == -50 + y;\nloop invariant y > 0 ==> y == x + 50;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token 'is'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant x == -50 - y * y / 2;\nloop invariant x <= 0;\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant x == -50 - y * y / 2 is partially proven to be inductive.\nloop invariant x <= 0 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50 - y;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant y > 0 ==> x >= -50 - y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 - y is partially proven to be inductive.\nloop invariant v1 == v1 is partially proven to be inductive.\nloop invariant v2 == v2 is partially proven to be inductive.\nloop invariant v3 == v3 is partially proven to be inductive.\nloop invariant y > 0 ==> x >= -50 - y is partially proven to be inductive.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\nloop invariant i3: v1 == v1;\nloop invariant i4: v2 == v2;\nloop invariant i5: v3 == v3;\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y <= x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= 0 is preserved but not established.\nloop invariant y <= x is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x >= (y + (-50));\nloop invariant y > 0 ==> v1 = unknown_int();\nloop invariant y > 0 ==> v2 = unknown_int();\nloop invariant y > 0 ==> v3 = unknown_int();\nloop invariant y > 0 ==> v1 >= 0;\nloop invariant y > 0 ==> v2 >= 0;\nloop invariant y > 0 ==> v3 >= 0;\nloop invariant y > 0 ==> v1 <= 2147483647;\nloop invariant y > 0 ==> v2 <= 2147483647;\nloop invariant y > 0 ==> v3 <= 2147483647;\nloop invariant x <= 2147483647;\nloop invariant y <= 2147483647;\nloop invariant x >= -2147483647;\nloop invariant y >= -2147483647;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\nloop invariant i9: y > 0 ==> v1 <= 2147483647;\nloop invariant i10: y > 0 ==> v2 <= 2147483647;\nloop invariant i11: y > 0 ==> v3 <= 2147483647;\nloop invariant i12: x <= 2147483647;\nloop invariant i13: y <= 2147483647;\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= (y * (y - 1) / 2);\nloop invariant x <= (y * (y - 1) / 2) + 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\nloop invariant x >= -50;\nloop invariant x <= 1000000;\nloop invariant y >= 1;\nloop invariant y <= 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant y <= 1000000 is preserved but not established.\nloop invariant x >= (y * (y - 1) / 2) is preserved but not established.\nloop invariant x <= (y * (y - 1) / 2) + 1000000 is partially proven to be inductive.\nloop invariant x <= 1000000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\nloop invariant i5: x <= (y * (y - 1) / 2) + 1000000;\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 50; loop invariant x == -50 + y * y / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= y <= 50; loop invariant x == -50 + y * y / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 40: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\nloop invariant i1: 0 <= y; loop invariant x + y >= 0; loop invariant x >= -51; loop invariant x <= -49; loop invariant y <= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 != v2; loop invariant v2 != v3; loop invariant v3 != v1; loop invariant v1 != v2 + v3; loop invariant v2 != v1 + v3; loop invariant v3 != v1 + v2; loop invariant v1 + v2 + v3 == 0; loop invariant v1 + v2 + v3 == 1; loop invariant v1 + v2 + v3 == 2; loop invariant v1 + v2 + v3 == 3; loop invariant v1 + v2 + v3 == 4; loop invariant v1 + v2 + v3 == 5; loop invariant v1 + v2 + v3 == 6; loop invariant v1 + v2 + v3 == 7; loop invariant v1 + v2 + v3 == 8; loop invariant v1 + v2 + v3 == 9; loop invariant v1 + v2 + v3 == 10; loop invariant v1 + v2 + v3 == 11; loop invariant v1 + v2 + v3 == 12; loop invariant v1 + v2 + v3 == 13; loop invariant v1 + v2 + v3 == 14; loop invariant v1 + v2 + v3 == 15; loop invariant v1 + v2 + v3 == 16; loop invariant v1 + v2 + v3 == 17; loop invariant v1 + v2 + v3 == 18; loop invariant v1 + v2 + v3 == 19; loop invariant v1 + v2 + v3 == 20; loop invariant v1 + v2 + v3 == 21; loop invariant v1 + v2 + v3 == 22; loop invariant v1 + v2 + v3 == 23; loop invariant v1 + v2 + v3 == 24; loop invariant v1 + v2 + v3 == 25; loop invariant v1 + v2 + v3 == 26; loop invariant v1 + v2 + v3 == 27; loop invariant v1 + v2 + v3 == 28; loop invariant v1 + v2 + v3 == 29; loop invariant v1 + v2 + v3 == 30; loop invariant v1 + v2 + v3 == 31; loop invariant v1 + v2 + v3 == 32; loop invariant v1 + v2 + v3 == 33; loop invariant v1 + v2 + v3 == 34; loop invariant v1 + v2 + v3 == 35; loop invariant v1 + v2 + v3 == 36; loop invariant v1 + v2 + v3 == 37; loop invariant v1 + v2 + v3 == 38; loop invariant v1 + v2 + v3 == 39; loop invariant v1 + v2 + v3 == 40; loop invariant v1 + v2 + v3 == 41; loop invariant v1 + v2 + v3 == 42; loop invariant v1 + v2 + v3 == 43; loop invariant v1 + v2 + v3 == 44; loop invariant v1 + v2 + v3 == 45; loop invariant v1 + v2 + v3 == 46; loop invariant v1 + v2 + v3 == 47; loop invariant v1 + v2 + v3 == 48; loop invariant v1 + v2 + v3 == 49; loop invariant v1 + v2 + v3 == 50; loop invariant v1 + v2 + v3 == 51; loop invariant v1 + v2 + v3 == 52; loop invariant v1 + v2 + v3 == 53; loop invariant v1 + v2 + v3 == 54; loop invariant v1 + v2 + v3 == 55; loop invariant v1 + v2 + v3 == 56;\nloop invariant i2: 0 <= v1 <= 1;\nloop invariant i3: 0 <= v2 <= 1;\nloop invariant i4: 0 <= v3 <= 1;\nloop invariant i5: -50 <= x <= 0;\nloop invariant i6: 0 <= y <= 100000;\nloop invariant i7: x >= (1 + (y - 1) * y / 2);\nloop invariant i8: x == (-50 + y);\nloop invariant i9: x == (v1 + v2 + v3);\nloop invariant i10: x == (v1 + v2 + v3 - 50);\nloop invariant i11: 0 <= y <= -50;\nloop invariant i12: x >= y;\nloop invariant i13: y > 0;\nloop invariant i14: x <= v3;\nloop invariant i15: x >= v3;\nloop invariant i16: x >= v2;\nloop invariant i17: x <= 0;\nloop invariant i18: 0 <= y <= 50;\nloop invariant i19: x >= (y - 1) * y / 2;\nloop invariant i20: x >= -50;\nloop invariant i21: y >= 1;\nloop invariant i22: y <= 50;\nloop invariant i23: x <= -50;\nloop invariant i24: 0 <= y;\nloop invariant i25: -50 <= x <= -50 + y;\nloop invariant i26: v1 is non-deterministic;\nloop invariant i27: v2 is non-deterministic;\nloop invariant i28: v3 is non-deterministic;\nloop invariant i29: x < 0 ==> x == -50 + y;\nloop invariant i30: y > 0 ==> y == x + 50;\nloop invariant i31: v1 >= 0;\nloop invariant i32: v2 >= 0;\nloop invariant i33: v3 >= 0;\nloop invariant i34: v1 <= 1;\nloop invariant i35: v2 <= 1;\nloop invariant i36: v3 <= 1;\nloop invariant i37: 0 <= x <= -50;\nloop invariant i38: x == -50 - y * y / 2;\nloop invariant i39: 0 <= x <= 100000;\nloop invariant i40: y >= 0;\nloop invariant i41: x >= -50 - y;\nloop invariant i42: v1 == v1;\nloop invariant i43: v2 == v2;\nloop invariant i44: v3 == v3;\nloop invariant i45: y > 0 ==> x >= -50 - y;\nloop invariant i46: x >= 0;\nloop invariant i47: y <= x;\nloop invariant i48: x >= (y + (-50));\nloop invariant i49: y > 0 ==> v1 = unknown_int();\nloop invariant i50: y > 0 ==> v2 = unknown_int();\nloop invariant i51: y > 0 ==> v3 = unknown_int();\nloop invariant i52: y > 0 ==> v1 >= 0;\nloop invariant i53: y > 0 ==> v2 >= 0;\nloop invariant i54: y > 0 ==> v3 >= 0;\nloop invariant i55: y > 0 ==> v1 <= 2147483647;\nloop invariant i56: y > 0 ==> v2 <= 2147483647;\nloop invariant i57: y > 0 ==> v3 <= 2147483647;\nloop invariant i58: x <= 2147483647;\nloop invariant i59: y <= 2147483647;\nloop invariant i60: x >= -2147483647;\nloop invariant i61: y >= -2147483647;\nloop invariant i62: y <= 1000000;\nloop invariant i63: x >= (y * (y - 1) / 2);\nloop invariant i64: x <= (y * (y - 1) / 2) + 1000000;\nloop invariant i65: x <= 1000000;\nloop invariant i66: 1 <= y <= 50; loop invariant x == -50 + y * y / 2;\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 24,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i42: v1 == v1;\nloop invariant i43: v2 == v2;\nloop invariant i44: v3 == v3;\n\n\n\n\n\n\n\n\n\n\nloop invariant i55: y > 0 ==> v1 <= 2147483647;\nloop invariant i56: y > 0 ==> v2 <= 2147483647;\nloop invariant i57: y > 0 ==> v3 <= 2147483647;\nloop invariant i58: x <= 2147483647;\nloop invariant i59: y <= 2147483647;\n\n\n\n\nloop invariant i64: x <= (y * (y - 1) / 2) + 1000000;\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c"
        ],
        "skipped": [],
        "total": 8,
        "success_count": 2,
        "failure_count": 6,
        "success_rate": 0.25
    }
}