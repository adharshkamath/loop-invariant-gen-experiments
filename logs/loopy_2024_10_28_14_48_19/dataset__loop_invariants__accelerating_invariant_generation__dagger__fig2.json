{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant 0 <= z <= 20;\nloop invariant 0 <= w <= 20;\nloop invariant x + y + z + w >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= y;\nloop invariant 3*x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 20 <= x <= 50;\nloop invariant -50 <= y <= 1000;\nloop invariant 0 <= z <= 50;\nloop invariant 0 <= w <= 500;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant y >= x;\nloop invariant y >= z;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x == y ==> x == z;\nloop invariant x == y ==> x == w;\nloop invariant x == z ==> x == w;\nloop invariant x == y ==> y == z;\nloop invariant x == y ==> y == w;\nloop invariant x == z ==> y == z;\nloop invariant x == z ==> y == w;\nloop invariant x == w ==> y == w;\nloop invariant x == y ==> z == w;\nloop invariant x == z ==> z == w;\nloop invariant x == w ==> z == w;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant -100000 <= x - y <= 100000;\nloop invariant -100000 <= x - z <= 100000;\nloop invariant -100000 <= x - w <= 100000;\nloop invariant -100000 <= y - z <= 100000;\nloop invariant -100000 <= y - w <= 100000;\nloop invariant -100000 <= z - w <= 100000;\nloop invariant 3*x >= y;\nloop invariant x >= z;\nloop invariant w > y;\nloop invariant x < 4 ==> x == 0;\nloop invariant x == 4 ==> y == 100000;\nloop invariant y == 100000 ==> z == 100000;\nloop invariant z == 100000 ==> w == 100000;\nloop invariant w == 100000 ==> x == -x;\nloop invariant x == -x ==> y == -y;\nloop invariant y == -y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x >= z;\nloop invariant y >= w;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x >= 4 ==> z >= y;\nloop invariant x >= 4 ==> w >= y;\nloop invariant x >= 4 ==> x >= 4;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant x >= 4 ==> z >= 0;\nloop invariant x >= 4 ==> w >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant 3*x >= y;\nloop invariant z >= w;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1 + 3 * unknown_int();\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant x <= w;\nloop invariant y <= 1 + (unknown_int() * 2);\nloop invariant z <= 1 + (unknown_int() * 10);\nloop invariant w <= 1 + (unknown_int() * 10);\nloop invariant y <= w;\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant y <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant z <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant w <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant 3*x >= y ==> 3*(-x) >= -y;\nloop invariant 3*x >= y ==> x >= 0;\nloop invariant 3*x >= y ==> y >= 0;\nloop invariant 3*x >= y ==> z >= 0;\nloop invariant 3*x >= y ==> w >= 0;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x <= z;\nloop invariant 3*x >= y ==> w <= y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant z <= w;\nloop invariant 2*y <= x;\nloop invariant x <= z+2*w;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2*x;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x <= 4 ==> x + y >= 0;\nloop invariant x <= 4 ==> x + y <= 8;\nloop invariant x <= 4 ==> y - x >= 0;\nloop invariant x <= 4 ==> y - x <= 4;\nloop invariant x <= 4 ==> x + z >= 0;\nloop invariant x <= 4 ==> x + z <= 4;\nloop invariant x <= 4 ==> x + w >= 0;\nloop invariant x <= 4 ==> x + w <= 4;\nloop invariant x > 4 ==> x + y >= -2;\nloop invariant x > 4 ==> x + y <= 6;\nloop invariant x > 4 ==> y - x >= -2;\nloop invariant x > 4 ==> y - x <= 2;\nloop invariant x > 4 ==> x + z >= 10;\nloop invariant x > 4 ==> x + z <= 14;\nloop invariant x > 4 ==> x + w >= 10;\nloop invariant x > 4 ==> x + w <= 14;\nloop invariant x > 4 ==> x + z >= 0;\nloop invariant x > 4 ==> x + z <= 10;\nloop invariant x > 4 ==> x + w >= 0;\nloop invariant x > 4 ==> x + w <= 10;\nloop invariant x < 0 ==> x + y >= -2;\nloop invariant x < 0 ==> x + y <= 2;\nloop invariant x < 0 ==> y - x >= 2;\nloop invariant x < 0 ==> y - x <= 4;\nloop invariant x < 0 ==> x + z >= -10;\nloop invariant x < 0 ==> x + z <= 0;\nloop invariant x < 0 ==> x + w >= -10;\nloop invariant x < 0 ==> x + w <= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4 ==> (x + y >= 0 ==> y - x >= 0);\nloop invariant x <= 4 ==> (x + y <= 8 ==> y - x <= 4);\nloop invariant x <= 4 ==> (x + z >= 0 ==> x + z <= 4);\nloop invariant x <= 4 ==> (x + w >= 0 ==> x + w <= 4);\nloop invariant x <= 4 ==> (x + z >= 0 ==> x + w >= 0);\nloop invariant x <= 4 ==> (x + z <= 4 ==> x + w <= 4);\nloop invariant x > 4 ==> (x + y >= -2 ==> y - x >= -2);\nloop invariant x > 4 ==> (x + y <= 6 ==> y - x <= 2);\nloop invariant x > 4 ==> (x + z >= 10 ==> x + z <= 14);\nloop invariant x > 4 ==> (x + w >= 10 ==> x + w <= 14);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 8;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x == z ==> w <= y;\nloop invariant x != z ==> w >= y;\nloop invariant x == 0 ==> y == 0;\nloop invariant x != 0 ==> y > 0;\nloop invariant z == w ==> x >= 4;\nloop invariant z != w ==> x < 4;\nloop invariant y == 8 ==> x >= 4;\nloop invariant y != 8 ==> x < 4;\nloop invariant w == 10 ==> x >= 4;\nloop invariant w != 10 ==> x < 4;\nloop invariant x >= z ==> y >= w;\nloop invariant x < z ==> y <= w;\nloop invariant x >= 4 ==> y >= 3*x;\nloop invariant x < 4 ==> y <= 3*x;\nloop invariant x >= 4 ==> z >= 10;\nloop invariant x < 4 ==> z <= 10;\nloop invariant x >= 4 ==> w >= 10;\nloop invariant x < 4 ==> w <= 10;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\nloop invariant x < 4 ==> z <= x;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x < 4 ==> w <= x;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\nloop invariant x < 4 ==> z <= x;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x < 4 ==> w <= x;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\nloop invariant x < 4 ==> z <= x;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x < 4 ==> w <= x;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\nloop invariant x < 4 ==> z <= x;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x < 4 ==> w <= x;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant y <= w;\nloop invariant z <= w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant 0 <= z <= 20;\nloop invariant 0 <= w <= 20;\nloop invariant x + y + z + w >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 20 is preserved but not established.\nloop invariant 0 <= y <= 20 is partially proven to be inductive.\nloop invariant 0 <= z <= 20 is partially proven to be inductive.\nloop invariant 0 <= w <= 20 is partially proven to be inductive.\nloop invariant x + y + z + w >= 0 is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= y;\nloop invariant 3*x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is established but not preserved.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant w == 0 is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant y >= z is partially proven to be inductive.\nloop invariant x >= y is established but not preserved.\nloop invariant 3*x >= y is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 20 <= x <= 50;\nloop invariant -50 <= y <= 1000;\nloop invariant 0 <= z <= 50;\nloop invariant 0 <= w <= 500;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant y >= x;\nloop invariant y >= z;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x == y ==> x == z;\nloop invariant x == y ==> x == w;\nloop invariant x == z ==> x == w;\nloop invariant x == y ==> y == z;\nloop invariant x == y ==> y == w;\nloop invariant x == z ==> y == z;\nloop invariant x == z ==> y == w;\nloop invariant x == w ==> y == w;\nloop invariant x == y ==> z == w;\nloop invariant x == z ==> z == w;\nloop invariant x == w ==> z == w;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 20 <= x <= 50 is preserved but not established.\nloop invariant -50 <= y <= 1000 is partially proven to be inductive.\nloop invariant 0 <= z <= 50 is partially proven to be inductive.\nloop invariant 0 <= w <= 500 is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant x >= w is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant y >= z is partially proven to be inductive.\nloop invariant y >= w is partially proven to be inductive.\nloop invariant z >= w is partially proven to be inductive.\nloop invariant x == y ==> x == z is partially proven to be inductive.\nloop invariant x == y ==> x == w is partially proven to be inductive.\nloop invariant x == z ==> x == w is partially proven to be inductive.\nloop invariant x == y ==> y == z is partially proven to be inductive.\nloop invariant x == y ==> y == w is partially proven to be inductive.\nloop invariant x == z ==> y == z is partially proven to be inductive.\nloop invariant x == z ==> y == w is partially proven to be inductive.\nloop invariant x == w ==> y == w is partially proven to be inductive.\nloop invariant x == y ==> z == w is partially proven to be inductive.\nloop invariant x == z ==> z == w is partially proven to be inductive.\nloop invariant x == w ==> z == w is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\nloop invariant i7: y >= x;\n\n\nloop invariant i10: z >= w;\nloop invariant i11: x == y ==> x == z;\nloop invariant i12: x == y ==> x == w;\n\nloop invariant i14: x == y ==> y == z;\nloop invariant i15: x == y ==> y == w;\n\n\n\nloop invariant i19: x == y ==> z == w;\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant -100000 <= x - y <= 100000;\nloop invariant -100000 <= x - z <= 100000;\nloop invariant -100000 <= x - w <= 100000;\nloop invariant -100000 <= y - z <= 100000;\nloop invariant -100000 <= y - w <= 100000;\nloop invariant -100000 <= z - w <= 100000;\nloop invariant 3*x >= y;\nloop invariant x >= z;\nloop invariant w > y;\nloop invariant x < 4 ==> x == 0;\nloop invariant x == 4 ==> y == 100000;\nloop invariant y == 100000 ==> z == 100000;\nloop invariant z == 100000 ==> w == 100000;\nloop invariant w == 100000 ==> x == -x;\nloop invariant x == -x ==> y == -y;\nloop invariant y == -y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\nloop invariant z == z ==> w == w;\nloop invariant w == w ==> x == x;\nloop invariant x == x ==> y == y;\nloop invariant y == y ==> z == z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= z <= 100000 is partially proven to be inductive.\nloop invariant 0 <= w <= 100000 is partially proven to be inductive.\nloop invariant -100000 <= x - y <= 100000 is partially proven to be inductive.\nloop invariant -100000 <= x - z <= 100000 is partially proven to be inductive.\nloop invariant -100000 <= x - w <= 100000 is partially proven to be inductive.\nloop invariant -100000 <= y - z <= 100000 is partially proven to be inductive.\nloop invariant -100000 <= y - w <= 100000 is partially proven to be inductive.\nloop invariant -100000 <= z - w <= 100000 is partially proven to be inductive.\nloop invariant 3*x >= y is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant w > y is preserved but not established.\nloop invariant x < 4 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 4 ==> y == 100000 is partially proven to be inductive.\nloop invariant y == 100000 ==> z == 100000 is partially proven to be inductive.\nloop invariant z == 100000 ==> w == 100000 is partially proven to be inductive.\nloop invariant w == 100000 ==> x == -x is partially proven to be inductive.\nloop invariant x == -x ==> y == -y is partially proven to be inductive.\nloop invariant y == -y ==> z == z is partially proven to be inductive.\nloop invariant z == z ==> w == w is partially proven to be inductive.\nloop invariant w == w ==> x == x is partially proven to be inductive.\nloop invariant x == x ==> y == y is partially proven to be inductive.\nloop invariant y == y ==> z == z is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: -100000 <= z - w <= 100000;\n\n\n\n\n\n\n\n\n\nloop invariant i20: y == -y ==> z == z;\nloop invariant i21: z == z ==> w == w;\nloop invariant i22: w == w ==> x == x;\nloop invariant i23: x == x ==> y == y;\nloop invariant i24: y == y ==> z == z;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x >= z;\nloop invariant y >= w;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x >= 4 ==> z >= y;\nloop invariant x >= 4 ==> w >= y;\nloop invariant x >= 4 ==> x >= 4;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant x >= 4 ==> z >= 0;\nloop invariant x >= 4 ==> w >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> z >= 0;\nloop invariant x < 4 ==> w >= 0;\nloop invariant x < 4 ==> x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant 0 <= w is partially proven to be inductive.\nloop invariant x >= z is established but not preserved.\nloop invariant y >= w is partially proven to be inductive.\nloop invariant x >= 4 ==> y >= z is established but not preserved.\nloop invariant x >= 4 ==> w >= x is established but not preserved.\nloop invariant x >= 4 ==> z >= y is established but not preserved.\nloop invariant x >= 4 ==> w >= y is partially proven to be inductive.\nloop invariant x >= 4 ==> x >= 4 is partially proven to be inductive.\nloop invariant x >= 4 ==> y >= 0 is partially proven to be inductive.\nloop invariant x >= 4 ==> z >= 0 is partially proven to be inductive.\nloop invariant x >= 4 ==> w >= 0 is partially proven to be inductive.\nloop invariant x < 4 ==> y >= 0 is partially proven to be inductive.\nloop invariant x < 4 ==> z >= 0 is partially proven to be inductive.\nloop invariant x < 4 ==> w >= 0 is partially proven to be inductive.\nloop invariant x < 4 ==> x >= 0 is partially proven to be inductive.\nAssertion 3 * x >= y: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= w;\n\n\n\n\n\n\nloop invariant i11: x >= 4 ==> x >= 4;\n\nloop invariant i13: x >= 4 ==> z >= 0;\nloop invariant i14: x >= 4 ==> w >= 0;\n\nloop invariant i16: x < 4 ==> z >= 0;\nloop invariant i17: x < 4 ==> w >= 0;\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant 3*x >= y;\nloop invariant z >= w;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is established but not preserved.\nloop invariant 0 <= z <= 100000 is established but not preserved.\nloop invariant 0 <= w <= 100000 is partially proven to be inductive.\nloop invariant x >= y is established but not preserved.\nloop invariant x >= z is established but not preserved.\nloop invariant 3*x >= y is partially proven to be inductive.\nloop invariant z >= w is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\nloop invariant i8: z >= w;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1 + 3 * unknown_int();\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant x <= w;\nloop invariant y <= 1 + (unknown_int() * 2);\nloop invariant z <= 1 + (unknown_int() * 10);\nloop invariant w <= 1 + (unknown_int() * 10);\nloop invariant y <= w;\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant y <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant z <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant w <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\nloop invariant z <= 1 + (unknown_int() * 3);\nloop invariant z <= 1 + (unknown_int() * unknown_int());\nloop invariant w <= 1 + (unknown_int() * 3);\nloop invariant w <= 1 + (unknown_int() * unknown_int());\nloop invariant x <= 1 + (unknown_int() * 3);\nloop invariant x <= 1 + (unknown_int() * unknown_int());\nloop invariant y <= 1 + (unknown_int() * 3);\nloop invariant y <= 1 + (unknown_int() * unknown_int());\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: z >= 0;\nloop invariant i4: w >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= z;\nloop invariant x >= w;\nloop invariant x >= y;\nloop invariant y <= x;\nloop invariant z <= x;\nloop invariant w <= x;\nloop invariant z <= w;\nloop invariant y <= w;\nloop invariant z <= y;\nloop invariant w <= y;\nloop invariant z >= x;\nloop invariant w >= x;\nloop invariant y >= x;\nloop invariant z >= w;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant z >= y;\nloop invariant w >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 100000 is preserved but not established.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= z <= 100000 is partially proven to be inductive.\nloop invariant 0 <= w <= 100000 is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant x >= w is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y <= x is partially proven to be inductive.\nloop invariant z <= x is partially proven to be inductive.\nloop invariant w <= x is partially proven to be inductive.\nloop invariant z <= w is partially proven to be inductive.\nloop invariant y <= w is partially proven to be inductive.\nloop invariant z <= y is partially proven to be inductive.\nloop invariant w <= y is partially proven to be inductive.\nloop invariant z >= x is partially proven to be inductive.\nloop invariant w >= x is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant z >= w is partially proven to be inductive.\nloop invariant w >= y is partially proven to be inductive.\nloop invariant z >= y is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant x <= 100000 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant z <= 100000 is partially proven to be inductive.\nloop invariant w <= 100000 is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: z <= w;\n\n\n\n\n\nloop invariant i17: y >= x;\nloop invariant i18: z >= w;\n\n\nloop invariant i21: x >= 0;\nloop invariant i22: y >= 0;\nloop invariant i23: z >= 0;\nloop invariant i24: w >= 0;\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant 3*x >= y ==> 3*(-x) >= -y;\nloop invariant 3*x >= y ==> x >= 0;\nloop invariant 3*x >= y ==> y >= 0;\nloop invariant 3*x >= y ==> z >= 0;\nloop invariant 3*x >= y ==> w >= 0;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x <= z;\nloop invariant 3*x >= y ==> w <= y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\nloop invariant 3*x >= y ==> x >= z;\nloop invariant 3*x >= y ==> w > y;\nloop invariant 3*x >= y ==> x >= -x;\nloop invariant 3*x >= y ==> y >= -y;\nloop invariant 3*x >= y ==> z >= -z;\nloop invariant 3*x >= y ==> w >= -w;\nloop invariant 3*x >= y ==> x <= -x;\nloop invariant 3*x >= y ==> y <= -y;\nloop invariant 3*x >= y ==> z <= -z;\nloop invariant 3*x >= y ==> w <= -w;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant 3*x >= y ==> 3*(-x) >= -y is partially proven to be inductive.\nloop invariant 3*x >= y ==> x >= 0 is partially proven to be inductive.\nloop invariant 3*x >= y ==> y >= 0 is partially proven to be inductive.\nloop invariant 3*x >= y ==> z >= 0 is partially proven to be inductive.\nloop invariant 3*x >= y ==> w >= 0 is partially proven to be inductive.\nloop invariant 3*x >= y ==> x >= z is partially proven to be inductive.\nloop invariant 3*x >= y ==> w > y is preserved but not established.\nloop invariant 3*x >= y ==> x <= z is partially proven to be inductive.\nloop invariant 3*x >= y ==> w <= y is partially proven to be inductive.\nloop invariant 3*x >= y ==> x >= -x is partially proven to be inductive.\nloop invariant 3*x >= y ==> y >= -y is partially proven to be inductive.\nloop invariant 3*x >= y ==> z >= -z is partially proven to be inductive.\nloop invariant 3*x >= y ==> w >= -w is partially proven to be inductive.\nloop invariant 3*x >= y ==> x <= -x is partially proven to be inductive.\nloop invariant 3*x >= y ==> y <= -y is partially proven to be inductive.\nloop invariant 3*x >= y ==> z <= -z is partially proven to be inductive.\nloop invariant 3*x >= y ==> w <= -w is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant z <= w;\nloop invariant 2*y <= x;\nloop invariant x <= z+2*w;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\nloop invariant w <= 50000;\nloop invariant 2*w <= x;\nloop invariant x <= 100000;\nloop invariant y <= 50000;\nloop invariant z <= 50000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant z <= w is partially proven to be inductive.\nloop invariant 2*y <= x is established but not preserved.\nloop invariant x <= z+2*w is established but not preserved.\nloop invariant x <= 100000 is partially proven to be inductive.\nloop invariant y <= 50000 is partially proven to be inductive.\nloop invariant z <= 50000 is established but not preserved.\nloop invariant w <= 50000 is established but not preserved.\nloop invariant 2*w <= x is established but not preserved.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: z >= 0;\nloop invariant i4: w >= 0;\nloop invariant i5: z <= w;\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2*x;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x <= 4 ==> x + y >= 0;\nloop invariant x <= 4 ==> x + y <= 8;\nloop invariant x <= 4 ==> y - x >= 0;\nloop invariant x <= 4 ==> y - x <= 4;\nloop invariant x <= 4 ==> x + z >= 0;\nloop invariant x <= 4 ==> x + z <= 4;\nloop invariant x <= 4 ==> x + w >= 0;\nloop invariant x <= 4 ==> x + w <= 4;\nloop invariant x > 4 ==> x + y >= -2;\nloop invariant x > 4 ==> x + y <= 6;\nloop invariant x > 4 ==> y - x >= -2;\nloop invariant x > 4 ==> y - x <= 2;\nloop invariant x > 4 ==> x + z >= 10;\nloop invariant x > 4 ==> x + z <= 14;\nloop invariant x > 4 ==> x + w >= 10;\nloop invariant x > 4 ==> x + w <= 14;\nloop invariant x > 4 ==> x + z >= 0;\nloop invariant x > 4 ==> x + z <= 10;\nloop invariant x > 4 ==> x + w >= 0;\nloop invariant x > 4 ==> x + w <= 10;\nloop invariant x < 0 ==> x + y >= -2;\nloop invariant x < 0 ==> x + y <= 2;\nloop invariant x < 0 ==> y - x >= 2;\nloop invariant x < 0 ==> y - x <= 4;\nloop invariant x < 0 ==> x + z >= -10;\nloop invariant x < 0 ==> x + z <= 0;\nloop invariant x < 0 ==> x + w >= -10;\nloop invariant x < 0 ==> x + w <= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4 ==> (x + y >= 0 ==> y - x >= 0);\nloop invariant x <= 4 ==> (x + y <= 8 ==> y - x <= 4);\nloop invariant x <= 4 ==> (x + z >= 0 ==> x + z <= 4);\nloop invariant x <= 4 ==> (x + w >= 0 ==> x + w <= 4);\nloop invariant x <= 4 ==> (x + z >= 0 ==> x + w >= 0);\nloop invariant x <= 4 ==> (x + z <= 4 ==> x + w <= 4);\nloop invariant x > 4 ==> (x + y >= -2 ==> y - x >= -2);\nloop invariant x > 4 ==> (x + y <= 6 ==> y - x <= 2);\nloop invariant x > 4 ==> (x + z >= 10 ==> x + z <= 14);\nloop invariant x > 4 ==> (x + w >= 10 ==> x + w <= 14);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is established but not preserved.\nloop invariant 0 <= y <= 2*x is partially proven to be inductive.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant x <= 4 ==> x + y >= 0 is partially proven to be inductive.\nloop invariant x <= 4 ==> x + y <= 8 is established but not preserved.\nloop invariant x <= 4 ==> y - x >= 0 is partially proven to be inductive.\nloop invariant x <= 4 ==> y - x <= 4 is partially proven to be inductive.\nloop invariant x <= 4 ==> x + z >= 0 is partially proven to be inductive.\nloop invariant x <= 4 ==> x + z <= 4 is established but not preserved.\nloop invariant x <= 4 ==> x + w >= 0 is partially proven to be inductive.\nloop invariant x <= 4 ==> x + w <= 4 is established but not preserved.\nloop invariant x > 4 ==> x + y >= -2 is partially proven to be inductive.\nloop invariant x > 4 ==> x + y <= 6 is partially proven to be inductive.\nloop invariant x > 4 ==> y - x >= -2 is partially proven to be inductive.\nloop invariant x > 4 ==> y - x <= 2 is partially proven to be inductive.\nloop invariant x > 4 ==> x + z >= 10 is partially proven to be inductive.\nloop invariant x > 4 ==> x + z <= 14 is partially proven to be inductive.\nloop invariant x > 4 ==> x + w >= 10 is partially proven to be inductive.\nloop invariant x > 4 ==> x + w <= 14 is partially proven to be inductive.\nloop invariant x > 4 ==> x + z >= 0 is partially proven to be inductive.\nloop invariant x > 4 ==> x + z <= 10 is partially proven to be inductive.\nloop invariant x > 4 ==> x + w >= 0 is partially proven to be inductive.\nloop invariant x > 4 ==> x + w <= 10 is partially proven to be inductive.\nloop invariant x < 0 ==> x + y >= -2 is partially proven to be inductive.\nloop invariant x < 0 ==> x + y <= 2 is partially proven to be inductive.\nloop invariant x < 0 ==> y - x >= 2 is partially proven to be inductive.\nloop invariant x < 0 ==> y - x <= 4 is partially proven to be inductive.\nloop invariant x < 0 ==> x + z >= -10 is partially proven to be inductive.\nloop invariant x < 0 ==> x + z <= 0 is partially proven to be inductive.\nloop invariant x < 0 ==> x + w >= -10 is partially proven to be inductive.\nloop invariant x < 0 ==> x + w <= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant x <= 4 ==> (x + y >= 0 ==> y - x >= 0) is partially proven to be inductive.\nloop invariant x <= 4 ==> (x + y <= 8 ==> y - x <= 4) is partially proven to be inductive.\nloop invariant x <= 4 ==> (x + z >= 0 ==> x + z <= 4) is partially proven to be inductive.\nloop invariant x <= 4 ==> (x + w >= 0 ==> x + w <= 4) is partially proven to be inductive.\nloop invariant x <= 4 ==> (x + z >= 0 ==> x + w >= 0) is partially proven to be inductive.\nloop invariant x <= 4 ==> (x + z <= 4 ==> x + w <= 4) is partially proven to be inductive.\nloop invariant x > 4 ==> (x + y >= -2 ==> y - x >= -2) is partially proven to be inductive.\nloop invariant x > 4 ==> (x + y <= 6 ==> y - x <= 2) is partially proven to be inductive.\nloop invariant x > 4 ==> (x + z >= 10 ==> x + z <= 14) is partially proven to be inductive.\nloop invariant x > 4 ==> (x + w >= 10 ==> x + w <= 14) is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: x > 4 ==> x + z >= 0;\n\nloop invariant i23: x > 4 ==> x + w >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: z >= 0;\nloop invariant i36: w >= 0;\n\n\n\n\n\n\n\nloop invariant i44: x > 4 ==> (x + y <= 6 ==> y - x <= 2);\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 8;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x == z ==> w <= y;\nloop invariant x != z ==> w >= y;\nloop invariant x == 0 ==> y == 0;\nloop invariant x != 0 ==> y > 0;\nloop invariant z == w ==> x >= 4;\nloop invariant z != w ==> x < 4;\nloop invariant y == 8 ==> x >= 4;\nloop invariant y != 8 ==> x < 4;\nloop invariant w == 10 ==> x >= 4;\nloop invariant w != 10 ==> x < 4;\nloop invariant x >= z ==> y >= w;\nloop invariant x < z ==> y <= w;\nloop invariant x >= 4 ==> y >= 3*x;\nloop invariant x < 4 ==> y <= 3*x;\nloop invariant x >= 4 ==> z >= 10;\nloop invariant x < 4 ==> z <= 10;\nloop invariant x >= 4 ==> w >= 10;\nloop invariant x < 4 ==> w <= 10;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\nloop invariant x < 4 ==> z <= x;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x < 4 ==> w <= x;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\nloop invariant x < 4 ==> z <= x;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x < 4 ==> w <= x;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\nloop invariant x < 4 ==> z <= x;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x < 4 ==> w <= x;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\nloop invariant x < 4 ==> z <= x;\nloop invariant x >= 4 ==> w >= x;\nloop invariant x < 4 ==> w <= x;\nloop invariant x >= 4 ==> y >= z;\nloop invariant x < 4 ==> y <= z;\nloop invariant x >= 4 ==> w >= z;\nloop invariant x < 4 ==> w <= z;\nloop invariant x >= 4 ==> y >= w;\nloop invariant x < 4 ==> y <= w;\nloop invariant x >= 4 ==> z >= w;\nloop invariant x < 4 ==> z <= w;\nloop invariant x >= 4 ==> y >= x;\nloop invariant x < 4 ==> y <= x;\nloop invariant x >= 4 ==> z >= x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 0 <= y <= 8 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant x == z ==> w <= y is partially proven to be inductive.\nloop invariant x != z ==> w >= y is partially proven to be inductive.\nloop invariant x == 0 ==> y == 0 is partially proven to be inductive.\nloop invariant x != 0 ==> y > 0 is partially proven to be inductive.\nloop invariant z == w ==> x >= 4 is preserved but not established.\nloop invariant z != w ==> x < 4 is partially proven to be inductive.\nloop invariant y == 8 ==> x >= 4 is partially proven to be inductive.\nloop invariant y != 8 ==> x < 4 is partially proven to be inductive.\nloop invariant w == 10 ==> x >= 4 is partially proven to be inductive.\nloop invariant w != 10 ==> x < 4 is partially proven to be inductive.\nloop invariant x >= z ==> y >= w is partially proven to be inductive.\nloop invariant x < z ==> y <= w is partially proven to be inductive.\nloop invariant x >= 4 ==> y >= 3*x is partially proven to be inductive.\nloop invariant x < 4 ==> y <= 3*x is partially proven to be inductive.\nloop invariant x >= 4 ==> z >= 10 is partially proven to be inductive.\nloop invariant x < 4 ==> z <= 10 is partially proven to be inductive.\nloop invariant x >= 4 ==> w >= 10 is partially proven to be inductive.\nloop invariant x < 4 ==> w <= 10 is partially proven to be inductive.\nloop invariant x >= 4 ==> y >= z is partially proven to be inductive.\nloop invariant x < 4 ==> y <= z is partially proven to be inductive.\nloop invariant x >= 4 ==> w >= z is partially proven to be inductive.\nloop invariant x < 4 ==> w <= z is partially proven to be inductive.\nloop invariant x >= 4 ==> y >= w is partially proven to be inductive.\nloop invariant x < 4 ==> y <= w is partially proven to be inductive.\nloop invariant x >= 4 ==> z >= w is partially proven to be inductive.\nloop invariant x < 4 ==> z <= w is partially proven to be inductive.\nloop invariant x >= 4 ==> y >= x is partially proven to be inductive.\nloop invariant x < 4 ==> y <= x is partially proven to be inductive.\nloop invariant x >= 4 ==> z >= x is partially proven to be inductive.\nloop invariant x < 4 ==> z <= x is partially proven to be inductive.\nloop invariant x >= 4 ==> w >= x is partially proven to be inductive.\nloop invariant x < 4 ==> w <= x is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: z != w ==> x < 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: x >= 4 ==> w >= z;\nloop invariant i26: x < 4 ==> w <= z;\n\n\nloop invariant i29: x >= 4 ==> z >= w;\nloop invariant i30: x < 4 ==> z <= w;\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant x <= w;\nloop invariant y <= z;\nloop invariant y <= w;\nloop invariant z <= w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant z >= -z;\nloop invariant w >= -w;\nloop invariant x >= -x;\nloop invariant y >= -y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is established but not preserved.\nloop invariant 0 <= y <= 100000 is established but not preserved.\nloop invariant 0 <= z <= 100000 is established but not preserved.\nloop invariant 0 <= w <= 100000 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant x <= 100000 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant z <= 100000 is partially proven to be inductive.\nloop invariant w <= 100000 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x <= z is established but not preserved.\nloop invariant x <= w is partially proven to be inductive.\nloop invariant y <= z is established but not preserved.\nloop invariant y <= w is partially proven to be inductive.\nloop invariant z <= w is partially proven to be inductive.\nloop invariant x >= -x is partially proven to be inductive.\nloop invariant y >= -y is partially proven to be inductive.\nloop invariant z >= -z is partially proven to be inductive.\nloop invariant w >= -w is partially proven to be inductive.\nAssertion 3 * x >= y: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\nloop invariant i7: z >= 0;\nloop invariant i8: w >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i18: z <= w;\n\n\nloop invariant i21: z >= -z;\nloop invariant i22: w >= -w;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 88: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\nloop invariant i1: 1 <= x <= 20;\nloop invariant i2: 0 <= y <= 20;\nloop invariant i3: 0 <= z <= 20;\nloop invariant i4: 0 <= w <= 20;\nloop invariant i5: x + y + z + w >= 0;\nloop invariant i6: 0 <= x <= 4;\nloop invariant i7: 0 <= y <= 2;\nloop invariant i8: z == 0;\nloop invariant i9: w == 0;\nloop invariant i10: x >= z;\nloop invariant i11: y >= z;\nloop invariant i12: x >= y;\nloop invariant i13: 3*x >= y;\nloop invariant i14: 20 <= x <= 50;\nloop invariant i15: -50 <= y <= 1000;\nloop invariant i16: 0 <= z <= 50;\nloop invariant i17: 0 <= w <= 500;\nloop invariant i18: x >= w;\nloop invariant i19: y >= x;\nloop invariant i20: y >= w;\nloop invariant i21: z >= w;\nloop invariant i22: x == y ==> x == z;\nloop invariant i23: x == y ==> x == w;\nloop invariant i24: x == z ==> x == w;\nloop invariant i25: x == y ==> y == z;\nloop invariant i26: x == y ==> y == w;\nloop invariant i27: x == z ==> y == z;\nloop invariant i28: x == z ==> y == w;\nloop invariant i29: x == w ==> y == w;\nloop invariant i30: x == y ==> z == w;\nloop invariant i31: x == z ==> z == w;\nloop invariant i32: x == w ==> z == w;\nloop invariant i33: 0 <= y <= 100000;\nloop invariant i34: 0 <= z <= 100000;\nloop invariant i35: 0 <= w <= 100000;\nloop invariant i36: -100000 <= x - y <= 100000;\nloop invariant i37: -100000 <= x - z <= 100000;\nloop invariant i38: -100000 <= x - w <= 100000;\nloop invariant i39: -100000 <= y - z <= 100000;\nloop invariant i40: -100000 <= y - w <= 100000;\nloop invariant i41: -100000 <= z - w <= 100000;\nloop invariant i42: w > y;\nloop invariant i43: x < 4 ==> x == 0;\nloop invariant i44: x == 4 ==> y == 100000;\nloop invariant i45: y == 100000 ==> z == 100000;\nloop invariant i46: z == 100000 ==> w == 100000;\nloop invariant i47: w == 100000 ==> x == -x;\nloop invariant i48: x == -x ==> y == -y;\nloop invariant i49: y == -y ==> z == z;\nloop invariant i50: z == z ==> w == w;\nloop invariant i51: w == w ==> x == x;\nloop invariant i52: x == x ==> y == y;\nloop invariant i53: y == y ==> z == z;\nloop invariant i54: 0 <= x;\nloop invariant i55: 0 <= y;\nloop invariant i56: 0 <= z;\nloop invariant i57: 0 <= w;\nloop invariant i58: x >= 4 ==> y >= z;\nloop invariant i59: x >= 4 ==> w >= x;\nloop invariant i60: x >= 4 ==> z >= y;\nloop invariant i61: x >= 4 ==> w >= y;\nloop invariant i62: x >= 4 ==> x >= 4;\nloop invariant i63: x >= 4 ==> y >= 0;\nloop invariant i64: x >= 4 ==> z >= 0;\nloop invariant i65: x >= 4 ==> w >= 0;\nloop invariant i66: x < 4 ==> y >= 0;\nloop invariant i67: x < 4 ==> z >= 0;\nloop invariant i68: x < 4 ==> w >= 0;\nloop invariant i69: x < 4 ==> x >= 0;\nloop invariant i70: x >= (1 + (y - 1) * y / 2);\nloop invariant i71: 0 <= x <= 100000;\nloop invariant i72: 0 <= x <= 1 + 3 * unknown_int();\nloop invariant i73: y >= 0;\nloop invariant i74: z >= 0;\nloop invariant i75: w >= 0;\nloop invariant i76: z <= y;\nloop invariant i77: w <= y;\nloop invariant i78: x >= 0;\nloop invariant i79: x <= y;\nloop invariant i80: x <= z;\nloop invariant i81: x <= w;\nloop invariant i82: y <= 1 + (unknown_int() * 2);\nloop invariant i83: z <= 1 + (unknown_int() * 10);\nloop invariant i84: w <= 1 + (unknown_int() * 10);\nloop invariant i85: y <= w;\nloop invariant i86: x <= 1 + (unknown_int() * 3);\nloop invariant i87: x <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant i88: y <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant i89: z <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant i90: w <= 1 + (3 * unknown_int() * unknown_int());\nloop invariant i91: x <= 1 + (unknown_int() * unknown_int());\nloop invariant i92: y <= 1 + (unknown_int() * 3);\nloop invariant i93: y <= 1 + (unknown_int() * unknown_int());\nloop invariant i94: z <= 1 + (unknown_int() * 3);\nloop invariant i95: z <= 1 + (unknown_int() * unknown_int());\nloop invariant i96: w <= 1 + (unknown_int() * 3);\nloop invariant i97: w <= 1 + (unknown_int() * unknown_int());\nloop invariant i98: 1 <= x <= 100000;\nloop invariant i99: y <= x;\nloop invariant i100: z <= x;\nloop invariant i101: w <= x;\nloop invariant i102: z <= w;\nloop invariant i103: z >= x;\nloop invariant i104: w >= x;\nloop invariant i105: w >= y;\nloop invariant i106: z >= y;\nloop invariant i107: x <= 100000;\nloop invariant i108: y <= 100000;\nloop invariant i109: z <= 100000;\nloop invariant i110: w <= 100000;\nloop invariant i111: 0 <= x <= 1;\nloop invariant i112: 0 <= z <= 10;\nloop invariant i113: 0 <= w <= 10;\nloop invariant i114: 3*x >= y ==> 3*(-x) >= -y;\nloop invariant i115: 3*x >= y ==> x >= 0;\nloop invariant i116: 3*x >= y ==> y >= 0;\nloop invariant i117: 3*x >= y ==> z >= 0;\nloop invariant i118: 3*x >= y ==> w >= 0;\nloop invariant i119: 3*x >= y ==> x >= z;\nloop invariant i120: 3*x >= y ==> w > y;\nloop invariant i121: 3*x >= y ==> x <= z;\nloop invariant i122: 3*x >= y ==> w <= y;\nloop invariant i123: 3*x >= y ==> x >= -x;\nloop invariant i124: 3*x >= y ==> y >= -y;\nloop invariant i125: 3*x >= y ==> z >= -z;\nloop invariant i126: 3*x >= y ==> w >= -w;\nloop invariant i127: 3*x >= y ==> x <= -x;\nloop invariant i128: 3*x >= y ==> y <= -y;\nloop invariant i129: 3*x >= y ==> z <= -z;\nloop invariant i130: 3*x >= y ==> w <= -w;\nloop invariant i131: 2*y <= x;\nloop invariant i132: x <= z+2*w;\nloop invariant i133: y <= 50000;\nloop invariant i134: z <= 50000;\nloop invariant i135: w <= 50000;\nloop invariant i136: 2*w <= x;\nloop invariant i137: 0 <= y <= 2*x;\nloop invariant i138: x <= 4 ==> x + y >= 0;\nloop invariant i139: x <= 4 ==> x + y <= 8;\nloop invariant i140: x <= 4 ==> y - x >= 0;\nloop invariant i141: x <= 4 ==> y - x <= 4;\nloop invariant i142: x <= 4 ==> x + z >= 0;\nloop invariant i143: x <= 4 ==> x + z <= 4;\nloop invariant i144: x <= 4 ==> x + w >= 0;\nloop invariant i145: x <= 4 ==> x + w <= 4;\nloop invariant i146: x > 4 ==> x + y >= -2;\nloop invariant i147: x > 4 ==> x + y <= 6;\nloop invariant i148: x > 4 ==> y - x >= -2;\nloop invariant i149: x > 4 ==> y - x <= 2;\nloop invariant i150: x > 4 ==> x + z >= 10;\nloop invariant i151: x > 4 ==> x + z <= 14;\nloop invariant i152: x > 4 ==> x + w >= 10;\nloop invariant i153: x > 4 ==> x + w <= 14;\nloop invariant i154: x > 4 ==> x + z >= 0;\nloop invariant i155: x > 4 ==> x + z <= 10;\nloop invariant i156: x > 4 ==> x + w >= 0;\nloop invariant i157: x > 4 ==> x + w <= 10;\nloop invariant i158: x < 0 ==> x + y >= -2;\nloop invariant i159: x < 0 ==> x + y <= 2;\nloop invariant i160: x < 0 ==> y - x >= 2;\nloop invariant i161: x < 0 ==> y - x <= 4;\nloop invariant i162: x < 0 ==> x + z >= -10;\nloop invariant i163: x < 0 ==> x + z <= 0;\nloop invariant i164: x < 0 ==> x + w >= -10;\nloop invariant i165: x < 0 ==> x + w <= 0;\nloop invariant i166: x <= 4 ==> (x + y >= 0 ==> y - x >= 0);\nloop invariant i167: x <= 4 ==> (x + y <= 8 ==> y - x <= 4);\nloop invariant i168: x <= 4 ==> (x + z >= 0 ==> x + z <= 4);\nloop invariant i169: x <= 4 ==> (x + w >= 0 ==> x + w <= 4);\nloop invariant i170: x <= 4 ==> (x + z >= 0 ==> x + w >= 0);\nloop invariant i171: x <= 4 ==> (x + z <= 4 ==> x + w <= 4);\nloop invariant i172: x > 4 ==> (x + y >= -2 ==> y - x >= -2);\nloop invariant i173: x > 4 ==> (x + y <= 6 ==> y - x <= 2);\nloop invariant i174: x > 4 ==> (x + z >= 10 ==> x + z <= 14);\nloop invariant i175: x > 4 ==> (x + w >= 10 ==> x + w <= 14);\nloop invariant i176: 0 <= y <= 8;\nloop invariant i177: x == z ==> w <= y;\nloop invariant i178: x != z ==> w >= y;\nloop invariant i179: x == 0 ==> y == 0;\nloop invariant i180: x != 0 ==> y > 0;\nloop invariant i181: z == w ==> x >= 4;\nloop invariant i182: z != w ==> x < 4;\nloop invariant i183: y == 8 ==> x >= 4;\nloop invariant i184: y != 8 ==> x < 4;\nloop invariant i185: w == 10 ==> x >= 4;\nloop invariant i186: w != 10 ==> x < 4;\nloop invariant i187: x >= z ==> y >= w;\nloop invariant i188: x < z ==> y <= w;\nloop invariant i189: x >= 4 ==> y >= 3*x;\nloop invariant i190: x < 4 ==> y <= 3*x;\nloop invariant i191: x >= 4 ==> z >= 10;\nloop invariant i192: x < 4 ==> z <= 10;\nloop invariant i193: x >= 4 ==> w >= 10;\nloop invariant i194: x < 4 ==> w <= 10;\nloop invariant i195: x < 4 ==> y <= z;\nloop invariant i196: x >= 4 ==> w >= z;\nloop invariant i197: x < 4 ==> w <= z;\nloop invariant i198: x >= 4 ==> y >= w;\nloop invariant i199: x < 4 ==> y <= w;\nloop invariant i200: x >= 4 ==> z >= w;\nloop invariant i201: x < 4 ==> z <= w;\nloop invariant i202: x >= 4 ==> y >= x;\nloop invariant i203: x < 4 ==> y <= x;\nloop invariant i204: x >= 4 ==> z >= x;\nloop invariant i205: x < 4 ==> z <= x;\nloop invariant i206: x < 4 ==> w <= x;\nloop invariant i207: y <= z;\nloop invariant i208: x >= -x;\nloop invariant i209: y >= -y;\nloop invariant i210: z >= -z;\nloop invariant i211: w >= -w;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 77,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\nloop invariant i5: x + y + z + w >= 0;\n\n\n\n\n\n\n\nloop invariant i13: 3*x >= y;\n\n\n\n\n\nloop invariant i19: y >= x;\n\nloop invariant i21: z >= w;\nloop invariant i22: x == y ==> x == z;\nloop invariant i23: x == y ==> x == w;\nloop invariant i24: x == z ==> x == w;\nloop invariant i25: x == y ==> y == z;\nloop invariant i26: x == y ==> y == w;\n\n\n\nloop invariant i30: x == y ==> z == w;\nloop invariant i31: x == z ==> z == w;\nloop invariant i32: x == w ==> z == w;\n\n\n\n\n\n\n\n\nloop invariant i41: -100000 <= z - w <= 100000;\n\n\n\n\nloop invariant i46: z == 100000 ==> w == 100000;\n\nloop invariant i48: x == -x ==> y == -y;\nloop invariant i49: y == -y ==> z == z;\nloop invariant i50: z == z ==> w == w;\nloop invariant i51: w == w ==> x == x;\nloop invariant i52: x == x ==> y == y;\nloop invariant i53: y == y ==> z == z;\nloop invariant i54: 0 <= x;\nloop invariant i55: 0 <= y;\nloop invariant i56: 0 <= z;\nloop invariant i57: 0 <= w;\n\n\n\n\nloop invariant i62: x >= 4 ==> x >= 4;\nloop invariant i63: x >= 4 ==> y >= 0;\nloop invariant i64: x >= 4 ==> z >= 0;\nloop invariant i65: x >= 4 ==> w >= 0;\nloop invariant i66: x < 4 ==> y >= 0;\nloop invariant i67: x < 4 ==> z >= 0;\nloop invariant i68: x < 4 ==> w >= 0;\nloop invariant i69: x < 4 ==> x >= 0;\n\n\n\nloop invariant i73: y >= 0;\nloop invariant i74: z >= 0;\nloop invariant i75: w >= 0;\n\n\nloop invariant i78: x >= 0;\nloop invariant i79: x <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i102: z <= w;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i115: 3*x >= y ==> x >= 0;\nloop invariant i116: 3*x >= y ==> y >= 0;\nloop invariant i117: 3*x >= y ==> z >= 0;\nloop invariant i118: 3*x >= y ==> w >= 0;\n\n\n\n\nloop invariant i123: 3*x >= y ==> x >= -x;\nloop invariant i124: 3*x >= y ==> y >= -y;\nloop invariant i125: 3*x >= y ==> z >= -z;\nloop invariant i126: 3*x >= y ==> w >= -w;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i138: x <= 4 ==> x + y >= 0;\n\nloop invariant i140: x <= 4 ==> y - x >= 0;\n\nloop invariant i142: x <= 4 ==> x + z >= 0;\n\nloop invariant i144: x <= 4 ==> x + w >= 0;\n\nloop invariant i146: x > 4 ==> x + y >= -2;\n\nloop invariant i148: x > 4 ==> y - x >= -2;\n\n\n\n\n\nloop invariant i154: x > 4 ==> x + z >= 0;\n\nloop invariant i156: x > 4 ==> x + w >= 0;\n\nloop invariant i158: x < 0 ==> x + y >= -2;\nloop invariant i159: x < 0 ==> x + y <= 2;\nloop invariant i160: x < 0 ==> y - x >= 2;\nloop invariant i161: x < 0 ==> y - x <= 4;\nloop invariant i162: x < 0 ==> x + z >= -10;\nloop invariant i163: x < 0 ==> x + z <= 0;\nloop invariant i164: x < 0 ==> x + w >= -10;\nloop invariant i165: x < 0 ==> x + w <= 0;\nloop invariant i166: x <= 4 ==> (x + y >= 0 ==> y - x >= 0);\nloop invariant i167: x <= 4 ==> (x + y <= 8 ==> y - x <= 4);\n\n\nloop invariant i170: x <= 4 ==> (x + z >= 0 ==> x + w >= 0);\nloop invariant i171: x <= 4 ==> (x + z <= 4 ==> x + w <= 4);\nloop invariant i172: x > 4 ==> (x + y >= -2 ==> y - x >= -2);\nloop invariant i173: x > 4 ==> (x + y <= 6 ==> y - x <= 2);\n\n\n\nloop invariant i177: x == z ==> w <= y;\n\nloop invariant i179: x == 0 ==> y == 0;\nloop invariant i180: x != 0 ==> y > 0;\n\nloop invariant i182: z != w ==> x < 4;\n\n\nloop invariant i185: w == 10 ==> x >= 4;\n\nloop invariant i187: x >= z ==> y >= w;\n\n\nloop invariant i190: x < 4 ==> y <= 3*x;\n\nloop invariant i192: x < 4 ==> z <= 10;\n\nloop invariant i194: x < 4 ==> w <= 10;\n\nloop invariant i196: x >= 4 ==> w >= z;\nloop invariant i197: x < 4 ==> w <= z;\n\n\nloop invariant i200: x >= 4 ==> z >= w;\nloop invariant i201: x < 4 ==> z <= w;\nloop invariant i202: x >= 4 ==> y >= x;\n\n\nloop invariant i205: x < 4 ==> z <= x;\nloop invariant i206: x < 4 ==> w <= x;\n\nloop invariant i208: x >= -x;\nloop invariant i209: y >= -y;\nloop invariant i210: z >= -z;\nloop invariant i211: w >= -w;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c"
        ],
        "skipped": [],
        "total": 4,
        "success_count": 2,
        "failure_count": 2,
        "success_rate": 0.5
    }
}