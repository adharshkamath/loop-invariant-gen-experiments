{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant x % 2 == y % 2 ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant y % 2 == 0;\nloop invariant x == 2 * (y / 2) + (y % 2);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant y % 2 == 0 ==> x == 2 * (y / 2);\nloop invariant y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x <= y;\nloop invariant y % 2 == 1 ==> x <= y;\nloop invariant y % 2 == 0 ==> x >= y - 1;\nloop invariant y % 2 == 1 ==> x >= y - 1;\nloop invariant y % 2 == 0 ==> x <= y + 1;\nloop invariant y % 2 == 1 ==> x <= y + 1;\nloop invariant y % 2 == 0 ==> x >= y - 2;\nloop invariant y % 2 == 1 ==> x >= y - 2;\nloop invariant y % 2 == 0 ==> x <= y + 2;\nloop invariant y % 2 == 1 ==> x <= y + 2;\nloop invariant y % 2 == 0 ==> x >= y - 3;\nloop invariant y % 2 == 1 ==> x >= y - 3;\nloop invariant y % 2 == 0 ==> x <= y + 3;\nloop invariant y % 2 == 1 ==> x <= y + 3;\nloop invariant y % 2 == 0 ==> x >= y - 4;\nloop invariant y % 2 == 1 ==> x >= y - 4;\nloop invariant y % 2 == 0 ==> x <= y + 4;\nloop invariant y % 2 == 1 ==> x <= y + 4;\nloop invariant y % 2 == 0 ==> x >= y - 5;\nloop invariant y % 2 == 1 ==> x >= y - 5;\nloop invariant y % 2 == 0 ==> x <= y + 5;\nloop invariant y % 2 == 1 ==> x <= y + 5;\nloop invariant y % 2 == 0 ==> x >= y - 6;\nloop invariant y % 2 == 1 ==> x >= y - 6;\nloop invariant y % 2 == 0 ==> x <= y + 6;\nloop invariant y % 2 == 1 ==> x <= y + 6;\nloop invariant y % 2 == 0 ==> x >= y - 7;\nloop invariant y % 2 == 1 ==> x >= y - 7;\nloop invariant y % 2 == 0 ==> x <= y + 7;\nloop invariant y % 2 == 1 ==> x <= y + 7;\nloop invariant y % 2 == 0 ==> x >= y - 8;\nloop invariant y % 2 == 1 ==> x >= y - 8;\nloop invariant y % 2 == 0 ==> x <= y + 8;\nloop invariant y % 2 == 1 ==> x <= y + 8;\nloop invariant y % 2 == 0 ==> x >= y - 9;\nloop invariant y % 2 == 1 ==> x >= y - 9;\nloop invariant y % 2 == 0 ==> x <= y + 9;\nloop invariant y % 2 == 1 ==> x <= y + 9;\nloop invariant y % 2 == 0 ==> x >= y - 10;\nloop invariant y % 2 == 1 ==> x >= y - 10;\nloop invariant y % 2 == 0 ==> x <= y + 10;\nloop invariant y % 2 == 1 ==> x <= y + 10;\nloop invariant y % 2 == 0 ==> x >= y - 11;\nloop invariant y % 2 == 1 ==> x >= y - 11;\nloop invariant y % 2 == 0 ==> x <= y + 11;\nloop invariant y % 2 == 1 ==> x <= y + 11;\nloop invariant y % 2 == 0 ==> x >= y - 12;\nloop invariant y % 2 == 1 ==> x >= y - 12;\nloop invariant y % 2 == 0 ==> x <= y + 12;\nloop invariant y % 2 == 1 ==> x <= y + 12;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == ((x + y) % 2);\nloop invariant (x % 2) == ((y + 1) % 2);\nloop invariant (x % 2) == ((x + y + 1) % 2);\nloop invariant (x % 2) == ((y + 2) % 2);\nloop invariant (x % 2) == ((x + y + 2) % 2);\nloop invariant (x % 2) == ((y + 3) % 2);\nloop invariant (x % 2) == ((x + y + 3) % 2);\nloop invariant (x % 2) == ((y + 4) % 2);\nloop invariant (x % 2) == ((x + y + 4) % 2);\nloop invariant (x % 2) == ((y + 5) % 2);\nloop invariant (x % 2) == ((x + y + 5) % 2);\nloop invariant (x % 2) == ((y + 6) % 2);\nloop invariant (x % 2) == ((x + y + 6) % 2);\nloop invariant (x % 2) == ((y + 7) % 2);\nloop invariant (x % 2) == ((x + y + 7) % 2);\nloop invariant (x % 2) == ((y + 8) % 2);\nloop invariant (x % 2) == ((x + y + 8) % 2);\nloop invariant (x % 2) == ((y + 9) % 2);\nloop invariant (x % 2) == ((x + y + 9) % 2);\nloop invariant (x % 2) == ((y + 10) % 2);\nloop invariant (x % 2) == ((x + y + 10) % 2);\nloop invariant (x % 2) == ((y + 11) % 2);\nloop invariant (x % 2) == ((x + y + 11) % 2);\nloop invariant (x % 2) == ((y + 12) % 2);\nloop invariant (x % 2) == ((x + y + 12) % 2);\nloop invariant (x % 2) == ((y + 13) % 2);\nloop invariant (x % 2) == ((x + y + 13) % 2);\nloop invariant (x % 2) == ((y + 14) % 2);\nloop invariant (x % 2) == ((x + y + 14) % 2);\nloop invariant (x % 2) == ((y + 15) % 2);\nloop invariant (x % 2) == ((x + y + 15) % 2);\nloop invariant (x % 2) == ((y + 16) % 2);\nloop invariant (x % 2) == ((x + y + 16) % 2);\nloop invariant (x % 2) == ((y + 17) % 2);\nloop invariant (x % 2) == ((x + y + 17) % 2);\nloop invariant (x % 2) == ((y + 18) % 2);\nloop invariant (x % 2) == ((x + y + 18) % 2);\nloop invariant (x % 2) == ((y + 19) % 2);\nloop invariant (x % 2) == ((x + y + 19) % 2);\nloop invariant (x % 2) == ((y + 20) % 2);\nloop invariant (x % 2) == ((x + y + 20) % 2);\nloop invariant (x % 2) == ((y + 21) % 2);\nloop invariant (x % 2) == ((x + y + 21) % 2);\nloop invariant (x % 2) == ((y + 22) % 2);\nloop invariant (x % 2) == ((x + y + 22) % 2);\nloop invariant (x % 2) == ((y + 23) % 2);\nloop invariant (x % 2) == ((x + y + 23) % 2);\n*/\n```",
            "```\n/*@\nloop invariant x <= 99;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= 99;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 98;\nloop invariant x % 2 == y % 2 ==> x + y <= 99;\nloop invariant x % 2 != y % 2 ==> x + y <= 98;\nloop invariant y % 2 == 0 ==> x + 2 * y <= 98;\nloop invariant y % 2 != 0 ==> x + (2 * y + 1) <= 97;\nloop invariant y % 2 == 0 ==> x + 2 * y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) ==> (y % 2);\nloop invariant (x % 2) ==> (y % 2);\nloop invariant !(x % 2) ==> !(y % 2);\nloop invariant !(x % 2) ==> !(y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y;\nloop invariant (x + 2 * y) % 2 == 0;\nloop invariant (x + 2 * y) % 2 + 1 == y % 2;\nloop invariant (x + 2 * y) % 2 + y == 2 * x;\nloop invariant x % 2 + 1 == (x + y) % 2;\nloop invariant x % 2 + (x + y) % 2 == (x + y) % 2;\nloop invariant (x + y) % 2 == y % 2;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 1;\nloop invariant (x + y) % 2 == y % 2;\nloop invariant (x + y) % 2 == 2;\nloop invariant (x + y) % 2 == 3;\nloop invariant (x + y) % 2 == 4;\nloop invariant (x + y) % 2 == 5;\nloop invariant (x + y) % 2 == 6;\nloop invariant (x + y) % 2 == 7;\nloop invariant (x + y) % 2 == 8;\nloop invariant (x + y) % 2 == 9;\nloop invariant (x + y) % 2 == 10;\nloop invariant (x + y) % 2 == 11;\nloop invariant (x + y) % 2 == 12;\nloop invariant (x + y) % 2 == 13;\nloop invariant (x + y) % 2 == 14;\nloop invariant (x + y) % 2 == 15;\nloop invariant (x + y) % 2 == 16;\nloop invariant (x + y) % 2 == 17;\nloop invariant (x + y) % 2 == 18;\nloop invariant (x + y) % 2 == 19;\nloop invariant (x + y) % 2 == 20;\nloop invariant (x + y) % 2 == 21;\nloop invariant (x + y) % 2 == 22;\nloop invariant (x + y) % 2 == 23;\nloop invariant (x + y) % 2 == 24;\nloop invariant (x + y) % 2 == 25;\nloop invariant (x + y) % 2 == 26;\nloop invariant (x + y) % 2 == 27;\nloop invariant (x + y) % 2 == 28;\nloop invariant (x + y) % 2 == 29;\nloop invariant (x + y) % 2 == 30;\nloop invariant (x + y) % 2 == 31;\nloop invariant (x + y) % 2 == 32;\nloop invariant (x + y) % 2 == 33;\nloop invariant (x + y) % 2 == 34;\nloop invariant (x + y) % 2 == 35;\nloop invariant (x + y) % 2 == 36;\nloop invariant (x + y) % 2 == 37;\nloop invariant (x + y) % 2 == 38;\nloop invariant (x + y) % 2 == 39;\nloop invariant (x + y) % 2 == 40;\nloop invariant (x + y) % 2 == 41;\nloop invariant (x + y) % 2 == 42;\nloop invariant (x + y) % 2 == 43;\nloop invariant (x + y) % 2 == 44;\nloop invariant (x + y) % 2 == 45;\nloop invariant (x + y) % 2 == 46;\nloop invariant (x + y) % 2 == 47;\nloop invariant (x + y) % 2 == 48;\nloop invariant (x + y) % 2 == 49;\nloop invariant (x + y) % 2 == 50;\nloop invariant (x + y) % 2 == 51;\nloop invariant (x + y) % 2 == 52;\nloop invariant (x + y) % 2 == 53;\nloop invariant (x + y) % 2 == 54;\nloop invariant (x + y) % 2 == 55;\nloop invariant (x + y) % 2 == 56;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0 ==> x == y;\nloop invariant x % 2 == 1 ==> x == y + 1;\nloop invariant x == (y / 2) * 2 ==> y % 2 == 0;\nloop invariant x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\nloop invariant 0 <= x < 100;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2);\nloop invariant x + y % 2 == 0 ==> y % 2 == 0;\nloop invariant x + y % 2 != 0 ==> y % 2 != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2);\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0;\nloop invariant y % 2 == (x % 2) ==> y % 2 == 0;\nloop invariant y % 2 != (x % 2) ==> (x % 2) == 1;\nloop invariant y % 2 != (x % 2) ==> y % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant x % 2 == y % 2 ==> x == y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y == 0 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> x == y is established but not preserved.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant y % 2 == 0;\nloop invariant x == 2 * (y / 2) + (y % 2);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant y % 2 == 0 ==> x == 2 * (y / 2);\nloop invariant y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x <= y;\nloop invariant y % 2 == 1 ==> x <= y;\nloop invariant y % 2 == 0 ==> x >= y - 1;\nloop invariant y % 2 == 1 ==> x >= y - 1;\nloop invariant y % 2 == 0 ==> x <= y + 1;\nloop invariant y % 2 == 1 ==> x <= y + 1;\nloop invariant y % 2 == 0 ==> x >= y - 2;\nloop invariant y % 2 == 1 ==> x >= y - 2;\nloop invariant y % 2 == 0 ==> x <= y + 2;\nloop invariant y % 2 == 1 ==> x <= y + 2;\nloop invariant y % 2 == 0 ==> x >= y - 3;\nloop invariant y % 2 == 1 ==> x >= y - 3;\nloop invariant y % 2 == 0 ==> x <= y + 3;\nloop invariant y % 2 == 1 ==> x <= y + 3;\nloop invariant y % 2 == 0 ==> x >= y - 4;\nloop invariant y % 2 == 1 ==> x >= y - 4;\nloop invariant y % 2 == 0 ==> x <= y + 4;\nloop invariant y % 2 == 1 ==> x <= y + 4;\nloop invariant y % 2 == 0 ==> x >= y - 5;\nloop invariant y % 2 == 1 ==> x >= y - 5;\nloop invariant y % 2 == 0 ==> x <= y + 5;\nloop invariant y % 2 == 1 ==> x <= y + 5;\nloop invariant y % 2 == 0 ==> x >= y - 6;\nloop invariant y % 2 == 1 ==> x >= y - 6;\nloop invariant y % 2 == 0 ==> x <= y + 6;\nloop invariant y % 2 == 1 ==> x <= y + 6;\nloop invariant y % 2 == 0 ==> x >= y - 7;\nloop invariant y % 2 == 1 ==> x >= y - 7;\nloop invariant y % 2 == 0 ==> x <= y + 7;\nloop invariant y % 2 == 1 ==> x <= y + 7;\nloop invariant y % 2 == 0 ==> x >= y - 8;\nloop invariant y % 2 == 1 ==> x >= y - 8;\nloop invariant y % 2 == 0 ==> x <= y + 8;\nloop invariant y % 2 == 1 ==> x <= y + 8;\nloop invariant y % 2 == 0 ==> x >= y - 9;\nloop invariant y % 2 == 1 ==> x >= y - 9;\nloop invariant y % 2 == 0 ==> x <= y + 9;\nloop invariant y % 2 == 1 ==> x <= y + 9;\nloop invariant y % 2 == 0 ==> x >= y - 10;\nloop invariant y % 2 == 1 ==> x >= y - 10;\nloop invariant y % 2 == 0 ==> x <= y + 10;\nloop invariant y % 2 == 1 ==> x <= y + 10;\nloop invariant y % 2 == 0 ==> x >= y - 11;\nloop invariant y % 2 == 1 ==> x >= y - 11;\nloop invariant y % 2 == 0 ==> x <= y + 11;\nloop invariant y % 2 == 1 ==> x <= y + 11;\nloop invariant y % 2 == 0 ==> x >= y - 12;\nloop invariant y % 2 == 1 ==> x >= y - 12;\nloop invariant y % 2 == 0 ==> x <= y + 12;\nloop invariant y % 2 == 1 ==> x <= y + 12;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y % 2 == 0 is preserved but not established.\nloop invariant x == 2 * (y / 2) + (y % 2) is neither established nor preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x == 2 * (y / 2) is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 1 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 3 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 3 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 3 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 3 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 5 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 5 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 5 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 5 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 6 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 6 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 7 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 7 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 7 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 7 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 9 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 9 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 9 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 9 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 10 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 10 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 11 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 11 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 11 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 11 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 12 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 12 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 12 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 12 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n\nloop invariant i7: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 is established but not preserved.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\nloop invariant i5: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i6: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i7: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant i8: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 27,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == ((x + y) % 2);\nloop invariant (x % 2) == ((y + 1) % 2);\nloop invariant (x % 2) == ((x + y + 1) % 2);\nloop invariant (x % 2) == ((y + 2) % 2);\nloop invariant (x % 2) == ((x + y + 2) % 2);\nloop invariant (x % 2) == ((y + 3) % 2);\nloop invariant (x % 2) == ((x + y + 3) % 2);\nloop invariant (x % 2) == ((y + 4) % 2);\nloop invariant (x % 2) == ((x + y + 4) % 2);\nloop invariant (x % 2) == ((y + 5) % 2);\nloop invariant (x % 2) == ((x + y + 5) % 2);\nloop invariant (x % 2) == ((y + 6) % 2);\nloop invariant (x % 2) == ((x + y + 6) % 2);\nloop invariant (x % 2) == ((y + 7) % 2);\nloop invariant (x % 2) == ((x + y + 7) % 2);\nloop invariant (x % 2) == ((y + 8) % 2);\nloop invariant (x % 2) == ((x + y + 8) % 2);\nloop invariant (x % 2) == ((y + 9) % 2);\nloop invariant (x % 2) == ((x + y + 9) % 2);\nloop invariant (x % 2) == ((y + 10) % 2);\nloop invariant (x % 2) == ((x + y + 10) % 2);\nloop invariant (x % 2) == ((y + 11) % 2);\nloop invariant (x % 2) == ((x + y + 11) % 2);\nloop invariant (x % 2) == ((y + 12) % 2);\nloop invariant (x % 2) == ((x + y + 12) % 2);\nloop invariant (x % 2) == ((y + 13) % 2);\nloop invariant (x % 2) == ((x + y + 13) % 2);\nloop invariant (x % 2) == ((y + 14) % 2);\nloop invariant (x % 2) == ((x + y + 14) % 2);\nloop invariant (x % 2) == ((y + 15) % 2);\nloop invariant (x % 2) == ((x + y + 15) % 2);\nloop invariant (x % 2) == ((y + 16) % 2);\nloop invariant (x % 2) == ((x + y + 16) % 2);\nloop invariant (x % 2) == ((y + 17) % 2);\nloop invariant (x % 2) == ((x + y + 17) % 2);\nloop invariant (x % 2) == ((y + 18) % 2);\nloop invariant (x % 2) == ((x + y + 18) % 2);\nloop invariant (x % 2) == ((y + 19) % 2);\nloop invariant (x % 2) == ((x + y + 19) % 2);\nloop invariant (x % 2) == ((y + 20) % 2);\nloop invariant (x % 2) == ((x + y + 20) % 2);\nloop invariant (x % 2) == ((y + 21) % 2);\nloop invariant (x % 2) == ((x + y + 21) % 2);\nloop invariant (x % 2) == ((y + 22) % 2);\nloop invariant (x % 2) == ((x + y + 22) % 2);\nloop invariant (x % 2) == ((y + 23) % 2);\nloop invariant (x % 2) == ((x + y + 23) % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is preserved but not established.\nloop invariant (x % 2) == ((x + y) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 1) % 2) is preserved but not established.\nloop invariant (x % 2) == ((x + y + 1) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 2) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 2) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 3) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 3) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 4) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 4) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 5) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 5) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 6) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 6) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 7) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 7) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 8) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 8) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 9) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 9) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 10) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 10) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 11) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 11) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 12) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 12) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 13) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 13) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 14) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 14) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 15) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 15) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 16) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 16) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 17) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 17) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 18) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 18) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 19) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 19) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 20) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 20) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 21) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 21) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 22) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 22) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 23) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 23) % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= 99;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= 99;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 99 is established but not preserved.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= y;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 98;\nloop invariant x % 2 == y % 2 ==> x + y <= 99;\nloop invariant x % 2 != y % 2 ==> x + y <= 98;\nloop invariant y % 2 == 0 ==> x + 2 * y <= 98;\nloop invariant y % 2 != 0 ==> x + (2 * y + 1) <= 97;\nloop invariant y % 2 == 0 ==> x + 2 * y == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 98 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> x + y <= 99 is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> x + y <= 98 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x + 2 * y <= 98 is preserved but not established.\nloop invariant y % 2 != 0 ==> x + (2 * y + 1) <= 97 is neither established nor preserved.\nloop invariant y % 2 == 0 ==> x + 2 * y == 0 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 2) ==> (y % 2);\nloop invariant (x % 2) ==> (y % 2);\nloop invariant !(x % 2) ==> !(y % 2);\nloop invariant !(x % 2) ==> !(y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant (x % 2) ==> (y % 2) is partially proven to be inductive.\nloop invariant !(x % 2) ==> !(y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: (x % 2) ==> (y % 2);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 62,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y;\nloop invariant (x + 2 * y) % 2 == 0;\nloop invariant (x + 2 * y) % 2 + 1 == y % 2;\nloop invariant (x + 2 * y) % 2 + y == 2 * x;\nloop invariant x % 2 + 1 == (x + y) % 2;\nloop invariant x % 2 + (x + y) % 2 == (x + y) % 2;\nloop invariant (x + y) % 2 == y % 2;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x + y) % 2 == 1;\nloop invariant (x + y) % 2 == y % 2;\nloop invariant (x + y) % 2 == 2;\nloop invariant (x + y) % 2 == 3;\nloop invariant (x + y) % 2 == 4;\nloop invariant (x + y) % 2 == 5;\nloop invariant (x + y) % 2 == 6;\nloop invariant (x + y) % 2 == 7;\nloop invariant (x + y) % 2 == 8;\nloop invariant (x + y) % 2 == 9;\nloop invariant (x + y) % 2 == 10;\nloop invariant (x + y) % 2 == 11;\nloop invariant (x + y) % 2 == 12;\nloop invariant (x + y) % 2 == 13;\nloop invariant (x + y) % 2 == 14;\nloop invariant (x + y) % 2 == 15;\nloop invariant (x + y) % 2 == 16;\nloop invariant (x + y) % 2 == 17;\nloop invariant (x + y) % 2 == 18;\nloop invariant (x + y) % 2 == 19;\nloop invariant (x + y) % 2 == 20;\nloop invariant (x + y) % 2 == 21;\nloop invariant (x + y) % 2 == 22;\nloop invariant (x + y) % 2 == 23;\nloop invariant (x + y) % 2 == 24;\nloop invariant (x + y) % 2 == 25;\nloop invariant (x + y) % 2 == 26;\nloop invariant (x + y) % 2 == 27;\nloop invariant (x + y) % 2 == 28;\nloop invariant (x + y) % 2 == 29;\nloop invariant (x + y) % 2 == 30;\nloop invariant (x + y) % 2 == 31;\nloop invariant (x + y) % 2 == 32;\nloop invariant (x + y) % 2 == 33;\nloop invariant (x + y) % 2 == 34;\nloop invariant (x + y) % 2 == 35;\nloop invariant (x + y) % 2 == 36;\nloop invariant (x + y) % 2 == 37;\nloop invariant (x + y) % 2 == 38;\nloop invariant (x + y) % 2 == 39;\nloop invariant (x + y) % 2 == 40;\nloop invariant (x + y) % 2 == 41;\nloop invariant (x + y) % 2 == 42;\nloop invariant (x + y) % 2 == 43;\nloop invariant (x + y) % 2 == 44;\nloop invariant (x + y) % 2 == 45;\nloop invariant (x + y) % 2 == 46;\nloop invariant (x + y) % 2 == 47;\nloop invariant (x + y) % 2 == 48;\nloop invariant (x + y) % 2 == 49;\nloop invariant (x + y) % 2 == 50;\nloop invariant (x + y) % 2 == 51;\nloop invariant (x + y) % 2 == 52;\nloop invariant (x + y) % 2 == 53;\nloop invariant (x + y) % 2 == 54;\nloop invariant (x + y) % 2 == 55;\nloop invariant (x + y) % 2 == 56;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 + 1 == y % 2 is preserved but not established.\nloop invariant (x + 2 * y) % 2 + y == 2 * x is preserved but not established.\nloop invariant x % 2 + 1 == (x + y) % 2 is partially proven to be inductive.\nloop invariant x % 2 + (x + y) % 2 == (x + y) % 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == y % 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 1 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 3 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 4 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 5 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 6 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 7 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 8 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 9 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 10 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 11 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 12 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 13 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 14 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 15 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 16 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 17 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 18 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 19 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 20 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 21 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 22 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 23 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 24 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 25 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 26 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 27 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 28 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 29 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 30 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 31 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 32 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 33 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 34 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 35 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 36 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 37 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 38 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 39 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 40 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 41 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 42 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 43 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 44 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 45 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 46 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 47 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 48 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 49 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 50 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 51 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 52 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 53 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 54 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 55 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 56 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y < 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0 ==> x == y;\nloop invariant x % 2 == 1 ==> x == y + 1;\nloop invariant x == (y / 2) * 2 ==> y % 2 == 0;\nloop invariant x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\nloop invariant 0 <= x < 100;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y < 2 is preserved but not established.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 2 == 0 ==> x == y is established but not preserved.\nloop invariant x % 2 == 1 ==> x == y + 1 is partially proven to be inductive.\nloop invariant x == (y / 2) * 2 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant 0 <= x < 100 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\n\n\nloop invariant i9: y % 2 == 0 ==> x % 2 == 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant y % 2 == x % 2;\nloop invariant x == (y * (y + 1)) / 2;\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is neither established nor preserved.\nloop invariant x == (y * (y + 1)) / 2 is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 98 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\nloop invariant i4: y >= 0;\n\nloop invariant i6: x >= 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2);\nloop invariant x + y % 2 == 0 ==> y % 2 == 0;\nloop invariant x + y % 2 != 0 ==> y % 2 != 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) is neither established nor preserved.\nloop invariant x + y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x + y % 2 != 0 ==> y % 2 != 0 is established but not preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: x + y % 2 == 0 ==> y % 2 == 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == (x % 2);\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == (x % 2) is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: y >= 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0;\nloop invariant y % 2 == (x % 2) ==> y % 2 == 0;\nloop invariant y % 2 != (x % 2) ==> (x % 2) == 1;\nloop invariant y % 2 != (x % 2) ==> y % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 != (x % 2) ==> (x % 2) == 1 is preserved but not established.\nloop invariant y % 2 != (x % 2) ==> y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n\nloop invariant i6: y % 2 != (x % 2) ==> y % 2 == 1;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2)) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y == 0 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> x == y is partially proven to be inductive.\nloop invariant y % 2 == 0 is partially proven to be inductive.\nloop invariant x == 2 * (y / 2) + (y % 2) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x == 2 * (y / 2) is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 1 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 3 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 3 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 3 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 3 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 5 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 5 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 5 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 5 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 6 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 6 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 7 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 7 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 7 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 7 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 9 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 9 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 9 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 9 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 10 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 10 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 11 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 11 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 11 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 11 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x >= y - 12 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x >= y - 12 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x <= y + 12 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x <= y + 12 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 1) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 1) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 2) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 2) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 3) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 3) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 4) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 4) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 5) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 5) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 6) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 6) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 7) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 7) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 8) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 8) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 9) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 9) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 10) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 10) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 11) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 11) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 12) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 12) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 13) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 13) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 14) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 14) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 15) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 15) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 16) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 16) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 17) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 17) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 18) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 18) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 19) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 19) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 20) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 20) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 21) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 21) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 22) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 22) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((y + 23) % 2) is partially proven to be inductive.\nloop invariant (x % 2) == ((x + y + 23) % 2) is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= y <= 98 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> x + y <= 99 is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> x + y <= 98 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x + 2 * y <= 98 is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> x + (2 * y + 1) <= 97 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x + 2 * y == 0 is partially proven to be inductive.\nloop invariant (x % 2) ==> (y % 2) is partially proven to be inductive.\nloop invariant !(x % 2) ==> !(y % 2) is partially proven to be inductive.\nloop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 + 1 == y % 2 is partially proven to be inductive.\nloop invariant (x + 2 * y) % 2 + y == 2 * x is partially proven to be inductive.\nloop invariant x % 2 + 1 == (x + y) % 2 is partially proven to be inductive.\nloop invariant x % 2 + (x + y) % 2 == (x + y) % 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == y % 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 1 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 2 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 3 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 4 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 5 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 6 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 7 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 8 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 9 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 10 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 11 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 12 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 13 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 14 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 15 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 16 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 17 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 18 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 19 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 20 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 21 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 22 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 23 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 24 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 25 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 26 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 27 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 28 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 29 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 30 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 31 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 32 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 33 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 34 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 35 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 36 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 37 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 38 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 39 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 40 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 41 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 42 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 43 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 44 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 45 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 46 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 47 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 48 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 49 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 50 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 51 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 52 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 53 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 54 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 55 is partially proven to be inductive.\nloop invariant (x + y) % 2 == 56 is partially proven to be inductive.\nloop invariant 0 <= y < 2 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x == y is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x == y + 1 is partially proven to be inductive.\nloop invariant x == (y / 2) * 2 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant 0 <= x < 100 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is partially proven to be inductive.\nloop invariant x == (y * (y + 1)) / 2 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant x <= 98 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) is partially proven to be inductive.\nloop invariant x + y % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x + y % 2 != 0 ==> y % 2 != 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> (x % 2) == 0 is partially proven to be inductive.\nloop invariant y % 2 == (x % 2) ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 != (x % 2) ==> (x % 2) == 1 is partially proven to be inductive.\nloop invariant y % 2 != (x % 2) ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2)) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: y == 0;\nloop invariant i3: x % 2 == y % 2 ==> x == y;\nloop invariant i4: y % 2 == 0;\nloop invariant i5: x == 2 * (y / 2) + (y % 2);\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 99;\nloop invariant i8: y % 2 == 0 ==> x == 2 * (y / 2);\nloop invariant i9: y % 2 == 1 ==> x == 2 * ((y - 1) / 2) + 1;\nloop invariant i10: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i11: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i12: y % 2 == 0 ==> x <= y;\nloop invariant i13: y % 2 == 1 ==> x <= y;\nloop invariant i14: y % 2 == 0 ==> x >= y - 1;\nloop invariant i15: y % 2 == 1 ==> x >= y - 1;\nloop invariant i16: y % 2 == 0 ==> x <= y + 1;\nloop invariant i17: y % 2 == 1 ==> x <= y + 1;\nloop invariant i18: y % 2 == 0 ==> x >= y - 2;\nloop invariant i19: y % 2 == 1 ==> x >= y - 2;\nloop invariant i20: y % 2 == 0 ==> x <= y + 2;\nloop invariant i21: y % 2 == 1 ==> x <= y + 2;\nloop invariant i22: y % 2 == 0 ==> x >= y - 3;\nloop invariant i23: y % 2 == 1 ==> x >= y - 3;\nloop invariant i24: y % 2 == 0 ==> x <= y + 3;\nloop invariant i25: y % 2 == 1 ==> x <= y + 3;\nloop invariant i26: y % 2 == 0 ==> x >= y - 4;\nloop invariant i27: y % 2 == 1 ==> x >= y - 4;\nloop invariant i28: y % 2 == 0 ==> x <= y + 4;\nloop invariant i29: y % 2 == 1 ==> x <= y + 4;\nloop invariant i30: y % 2 == 0 ==> x >= y - 5;\nloop invariant i31: y % 2 == 1 ==> x >= y - 5;\nloop invariant i32: y % 2 == 0 ==> x <= y + 5;\nloop invariant i33: y % 2 == 1 ==> x <= y + 5;\nloop invariant i34: y % 2 == 0 ==> x >= y - 6;\nloop invariant i35: y % 2 == 1 ==> x >= y - 6;\nloop invariant i36: y % 2 == 0 ==> x <= y + 6;\nloop invariant i37: y % 2 == 1 ==> x <= y + 6;\nloop invariant i38: y % 2 == 0 ==> x >= y - 7;\nloop invariant i39: y % 2 == 1 ==> x >= y - 7;\nloop invariant i40: y % 2 == 0 ==> x <= y + 7;\nloop invariant i41: y % 2 == 1 ==> x <= y + 7;\nloop invariant i42: y % 2 == 0 ==> x >= y - 8;\nloop invariant i43: y % 2 == 1 ==> x >= y - 8;\nloop invariant i44: y % 2 == 0 ==> x <= y + 8;\nloop invariant i45: y % 2 == 1 ==> x <= y + 8;\nloop invariant i46: y % 2 == 0 ==> x >= y - 9;\nloop invariant i47: y % 2 == 1 ==> x >= y - 9;\nloop invariant i48: y % 2 == 0 ==> x <= y + 9;\nloop invariant i49: y % 2 == 1 ==> x <= y + 9;\nloop invariant i50: y % 2 == 0 ==> x >= y - 10;\nloop invariant i51: y % 2 == 1 ==> x >= y - 10;\nloop invariant i52: y % 2 == 0 ==> x <= y + 10;\nloop invariant i53: y % 2 == 1 ==> x <= y + 10;\nloop invariant i54: y % 2 == 0 ==> x >= y - 11;\nloop invariant i55: y % 2 == 1 ==> x >= y - 11;\nloop invariant i56: y % 2 == 0 ==> x <= y + 11;\nloop invariant i57: y % 2 == 1 ==> x <= y + 11;\nloop invariant i58: y % 2 == 0 ==> x >= y - 12;\nloop invariant i59: y % 2 == 1 ==> x >= y - 12;\nloop invariant i60: y % 2 == 0 ==> x <= y + 12;\nloop invariant i61: y % 2 == 1 ==> x <= y + 12;\nloop invariant i62: 0 <= y <= 99;\nloop invariant i63: x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant i64: x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant i65: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i66: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i67: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant i68: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\nloop invariant i69: y >= 0;\nloop invariant i70: (x % 2) == (y % 2);\nloop invariant i71: (x % 2) == ((x + y) % 2);\nloop invariant i72: (x % 2) == ((y + 1) % 2);\nloop invariant i73: (x % 2) == ((x + y + 1) % 2);\nloop invariant i74: (x % 2) == ((y + 2) % 2);\nloop invariant i75: (x % 2) == ((x + y + 2) % 2);\nloop invariant i76: (x % 2) == ((y + 3) % 2);\nloop invariant i77: (x % 2) == ((x + y + 3) % 2);\nloop invariant i78: (x % 2) == ((y + 4) % 2);\nloop invariant i79: (x % 2) == ((x + y + 4) % 2);\nloop invariant i80: (x % 2) == ((y + 5) % 2);\nloop invariant i81: (x % 2) == ((x + y + 5) % 2);\nloop invariant i82: (x % 2) == ((y + 6) % 2);\nloop invariant i83: (x % 2) == ((x + y + 6) % 2);\nloop invariant i84: (x % 2) == ((y + 7) % 2);\nloop invariant i85: (x % 2) == ((x + y + 7) % 2);\nloop invariant i86: (x % 2) == ((y + 8) % 2);\nloop invariant i87: (x % 2) == ((x + y + 8) % 2);\nloop invariant i88: (x % 2) == ((y + 9) % 2);\nloop invariant i89: (x % 2) == ((x + y + 9) % 2);\nloop invariant i90: (x % 2) == ((y + 10) % 2);\nloop invariant i91: (x % 2) == ((x + y + 10) % 2);\nloop invariant i92: (x % 2) == ((y + 11) % 2);\nloop invariant i93: (x % 2) == ((x + y + 11) % 2);\nloop invariant i94: (x % 2) == ((y + 12) % 2);\nloop invariant i95: (x % 2) == ((x + y + 12) % 2);\nloop invariant i96: (x % 2) == ((y + 13) % 2);\nloop invariant i97: (x % 2) == ((x + y + 13) % 2);\nloop invariant i98: (x % 2) == ((y + 14) % 2);\nloop invariant i99: (x % 2) == ((x + y + 14) % 2);\nloop invariant i100: (x % 2) == ((y + 15) % 2);\nloop invariant i101: (x % 2) == ((x + y + 15) % 2);\nloop invariant i102: (x % 2) == ((y + 16) % 2);\nloop invariant i103: (x % 2) == ((x + y + 16) % 2);\nloop invariant i104: (x % 2) == ((y + 17) % 2);\nloop invariant i105: (x % 2) == ((x + y + 17) % 2);\nloop invariant i106: (x % 2) == ((y + 18) % 2);\nloop invariant i107: (x % 2) == ((x + y + 18) % 2);\nloop invariant i108: (x % 2) == ((y + 19) % 2);\nloop invariant i109: (x % 2) == ((x + y + 19) % 2);\nloop invariant i110: (x % 2) == ((y + 20) % 2);\nloop invariant i111: (x % 2) == ((x + y + 20) % 2);\nloop invariant i112: (x % 2) == ((y + 21) % 2);\nloop invariant i113: (x % 2) == ((x + y + 21) % 2);\nloop invariant i114: (x % 2) == ((y + 22) % 2);\nloop invariant i115: (x % 2) == ((x + y + 22) % 2);\nloop invariant i116: (x % 2) == ((y + 23) % 2);\nloop invariant i117: (x % 2) == ((x + y + 23) % 2);\nloop invariant i118: 0 <= x;\nloop invariant i119: 0 <= y;\nloop invariant i120: 0 <= y <= 98;\nloop invariant i121: x % 2 == y % 2 ==> x + y <= 99;\nloop invariant i122: x % 2 != y % 2 ==> x + y <= 98;\nloop invariant i123: y % 2 == 0 ==> x + 2 * y <= 98;\nloop invariant i124: y % 2 != 0 ==> x + (2 * y + 1) <= 97;\nloop invariant i125: y % 2 == 0 ==> x + 2 * y == 0;\nloop invariant i126: (x % 2) ==> (y % 2);\nloop invariant i127: !(x % 2) ==> !(y % 2);\nloop invariant i128: 0 <= x <= 2;\nloop invariant i129: (x + 2 * y) % 2 == 0;\nloop invariant i130: (x + 2 * y) % 2 + 1 == y % 2;\nloop invariant i131: (x + 2 * y) % 2 + y == 2 * x;\nloop invariant i132: x % 2 + 1 == (x + y) % 2;\nloop invariant i133: x % 2 + (x + y) % 2 == (x + y) % 2;\nloop invariant i134: (x + y) % 2 == y % 2;\nloop invariant i135: (x + y) % 2 == 0;\nloop invariant i136: (x + y) % 2 == 1;\nloop invariant i137: (x + y) % 2 == 2;\nloop invariant i138: (x + y) % 2 == 3;\nloop invariant i139: (x + y) % 2 == 4;\nloop invariant i140: (x + y) % 2 == 5;\nloop invariant i141: (x + y) % 2 == 6;\nloop invariant i142: (x + y) % 2 == 7;\nloop invariant i143: (x + y) % 2 == 8;\nloop invariant i144: (x + y) % 2 == 9;\nloop invariant i145: (x + y) % 2 == 10;\nloop invariant i146: (x + y) % 2 == 11;\nloop invariant i147: (x + y) % 2 == 12;\nloop invariant i148: (x + y) % 2 == 13;\nloop invariant i149: (x + y) % 2 == 14;\nloop invariant i150: (x + y) % 2 == 15;\nloop invariant i151: (x + y) % 2 == 16;\nloop invariant i152: (x + y) % 2 == 17;\nloop invariant i153: (x + y) % 2 == 18;\nloop invariant i154: (x + y) % 2 == 19;\nloop invariant i155: (x + y) % 2 == 20;\nloop invariant i156: (x + y) % 2 == 21;\nloop invariant i157: (x + y) % 2 == 22;\nloop invariant i158: (x + y) % 2 == 23;\nloop invariant i159: (x + y) % 2 == 24;\nloop invariant i160: (x + y) % 2 == 25;\nloop invariant i161: (x + y) % 2 == 26;\nloop invariant i162: (x + y) % 2 == 27;\nloop invariant i163: (x + y) % 2 == 28;\nloop invariant i164: (x + y) % 2 == 29;\nloop invariant i165: (x + y) % 2 == 30;\nloop invariant i166: (x + y) % 2 == 31;\nloop invariant i167: (x + y) % 2 == 32;\nloop invariant i168: (x + y) % 2 == 33;\nloop invariant i169: (x + y) % 2 == 34;\nloop invariant i170: (x + y) % 2 == 35;\nloop invariant i171: (x + y) % 2 == 36;\nloop invariant i172: (x + y) % 2 == 37;\nloop invariant i173: (x + y) % 2 == 38;\nloop invariant i174: (x + y) % 2 == 39;\nloop invariant i175: (x + y) % 2 == 40;\nloop invariant i176: (x + y) % 2 == 41;\nloop invariant i177: (x + y) % 2 == 42;\nloop invariant i178: (x + y) % 2 == 43;\nloop invariant i179: (x + y) % 2 == 44;\nloop invariant i180: (x + y) % 2 == 45;\nloop invariant i181: (x + y) % 2 == 46;\nloop invariant i182: (x + y) % 2 == 47;\nloop invariant i183: (x + y) % 2 == 48;\nloop invariant i184: (x + y) % 2 == 49;\nloop invariant i185: (x + y) % 2 == 50;\nloop invariant i186: (x + y) % 2 == 51;\nloop invariant i187: (x + y) % 2 == 52;\nloop invariant i188: (x + y) % 2 == 53;\nloop invariant i189: (x + y) % 2 == 54;\nloop invariant i190: (x + y) % 2 == 55;\nloop invariant i191: (x + y) % 2 == 56;\nloop invariant i192: 0 <= y < 2;\nloop invariant i193: x % 2 == y % 2;\nloop invariant i194: x % 2 == 0 ==> x == y;\nloop invariant i195: x % 2 == 1 ==> x == y + 1;\nloop invariant i196: x == (y / 2) * 2 ==> y % 2 == 0;\nloop invariant i197: x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\nloop invariant i198: 0 <= x < 100;\nloop invariant i199: y % 2 == x % 2;\nloop invariant i200: x == (y * (y + 1)) / 2;\nloop invariant i201: y <= 99;\nloop invariant i202: x <= 98;\nloop invariant i203: 0 <= y <= 100;\nloop invariant i204: y % 2 == (x % 2);\nloop invariant i205: x + y % 2 == 0 ==> y % 2 == 0;\nloop invariant i206: x + y % 2 != 0 ==> y % 2 != 0;\nloop invariant i207: y % 2 == (x % 2) ==> (x % 2) == 0;\nloop invariant i208: y % 2 == (x % 2) ==> y % 2 == 0;\nloop invariant i209: y % 2 != (x % 2) ==> (x % 2) == 1;\nloop invariant i210: y % 2 != (x % 2) ==> y % 2 == 1;\nloop invariant i211: ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 110,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 0;\n\n\n\nloop invariant i10: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i65: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i66: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i67: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x % 2 == 0;\nloop invariant i68: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x % 2 == 1;\nloop invariant i69: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i118: 0 <= x;\nloop invariant i119: 0 <= y;\n\n\n\n\n\n\nloop invariant i126: (x % 2) ==> (y % 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i197: x == (y - 1) / 2 * 2 + 1 ==> y % 2 == 1;\n\n\n\n\n\n\n\nloop invariant i205: x + y % 2 == 0 ==> y % 2 == 0;\n\n\n\n\nloop invariant i210: y % 2 != (x % 2) ==> y % 2 == 1;\nloop invariant i211: ((x % 2) == (y % 2)) ==> ((x % 2) == (y % 2));\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c",
            "../dataset/loop_invariants/code2inv/122.c",
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe1.c"
        ],
        "skipped": [],
        "total": 31,
        "success_count": 7,
        "failure_count": 24,
        "success_rate": 0.22580645161290322
    }
}