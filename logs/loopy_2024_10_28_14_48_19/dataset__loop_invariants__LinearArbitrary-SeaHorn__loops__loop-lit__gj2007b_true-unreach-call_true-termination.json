{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m < n);\nloop invariant (x < n) ==> (m >= 0);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x < n;\nloop invariant 0 <= m <= n - 1;\nloop invariant (m >= 0 && x <= m && n > 0) ==> (m == x - 1);\nloop invariant (m < n && x <= m && n > 0) ==> (m == x);\nloop invariant (m < n && x <= m && n <= 0) ==> (m == n - 1);\nloop invariant (m >= 0 && x > m && n > 0) ==> (m == x - 1);\nloop invariant (m >= 0 && x > m && n <= 0) ==> (m == n - 1);\nloop invariant (m < n && x > m && n <= 0) ==> (m == n);\nloop invariant (m >= 0 && x == m && n > 0) ==> (m == n - 1);\nloop invariant (m >= 0 && x == m && n <= 0) ==> (m == n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (m <= x ==> (m >= 0 || n <= 0));\nloop invariant (m >= x ==> (m < n || n <= 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant 0 <= m <= n;\nloop invariant unknown_int() == 1 ==> m == x;\nloop invariant unknown_int() == 0 ==> m <= x;\nloop invariant unknown_int() == 0 ==> m < x;\nloop invariant x == n ==> m <= x;\nloop invariant x == n ==> m < x;\nloop invariant x == n ==> m == x;\nloop invariant x == n ==> m >= 0;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant x == n ==> m >= 0;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m <= x;\nloop invariant m <= n - 1;\nloop invariant m >= 0 ==> (m < n);\nloop invariant m >= 0 ==> (m <= n - 1);\nloop invariant m < n ==> (m >= 0);\nloop invariant m < n ==> (m <= n - 1);\nloop invariant m <= n - 1 ==> (m >= 0);\nloop invariant m <= n - 1 ==> (m < n);\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n));\nloop invariant m < n ==> (m >= 0 ==> (m <= n - 1));\nloop invariant m <= n - 1 ==> (m >= 0 ==> (m < n));\nloop invariant m >= 0 ==> (m < n ==> (m <= n - 1));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m >= 0 ==> (m <= n - 1 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (x == m || unknown_int() == 0);\nloop invariant (x == n || unknown_int() == 1);\nloop invariant (m == n || unknown_int() == 0);\nloop invariant (m == x || unknown_int() == 1);\nloop invariant (x == n || unknown_int() == 0);\nloop invariant (x == m || unknown_int() == 1);\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (x == m || unknown_int() == 0);\nloop invariant (x == n || unknown_int() == 1);\nloop invariant (m == n || unknown_int() == 0);\nloop invariant (m == x || unknown_int() == 1);\nloop invariant (x == n || unknown_int() == 0);\nloop invariant (x == m || unknown_int() == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant (n <= 0) ==> (m >= n);\nloop invariant (n > 0) ==> (m < n);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m == x ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n ==> m == x);\nloop invariant (x < n ==> m <= x);\nloop invariant (x < n ==> m >= 0);\nloop invariant (x < n ==> m < n);\nloop invariant (x < n ==> m == x - 1 ==> m >= 0);\nloop invariant (x < n ==> m == x - 1 ==> m < n);\nloop invariant (x < n ==> m == x - 1 ==> m == x - 1 ==> m >= 0);\nloop invariant (x < n ==> m == x - 1 ==> m == x - 1 ==> m < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant (if unknown_int() then m = x else m = m ==> m = m);\nloop invariant (if unknown_int() then x = x + 1 else x = x ==> x = x);\nloop invariant (if unknown_int() then m >= 0 ==> m >= 0);\nloop invariant (if unknown_int() then m < n ==> m < n);\nloop invariant (if unknown_int() then x < n ==> x < n);\nloop invariant (if unknown_int() then m >= 0 || n <= 0 ==> m >= 0 || n <= 0);\nloop invariant (if unknown_int() then m < n || n <= 0 ==> m < n || n <= 0);\nloop invariant (if unknown_int() then m >= 0 && m < n ==> m >= 0 && m < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= n;\nloop invariant m < n || n <= 0;\nloop invariant m >= 0 || n <= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 0 || x <= 0;\nloop invariant m >= 0 || x <= n;\nloop invariant m >= 0 || x <= 0 || x >= n;\nloop invariant m >= 0 || n <= 0 || x <= n;\nloop invariant m >= 0 || (n <= 0 || x <= n);\nloop invariant m >= 0 || (x <= n || n <= 0);\nloop invariant m >= 0 || (x <= 0 || x >= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= 0 || x <= n);\nloop invariant m >= 0 || (x <= n || x >= 0);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m < n);\nloop invariant (x < n) ==> (m >= 0);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x < n) ==> (m < n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant (x >= m) ==> (m >= 0) is partially proven to be inductive.\nloop invariant (x < n) ==> (m < n) is partially proven to be inductive.\nloop invariant (x >= m) ==> (m < n) is preserved but not established.\nloop invariant (x < n) ==> (m >= 0) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\nloop invariant i4: (x < n) ==> (m < n);\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x < n;\nloop invariant 0 <= m <= n - 1;\nloop invariant (m >= 0 && x <= m && n > 0) ==> (m == x - 1);\nloop invariant (m < n && x <= m && n > 0) ==> (m == x);\nloop invariant (m < n && x <= m && n <= 0) ==> (m == n - 1);\nloop invariant (m >= 0 && x > m && n > 0) ==> (m == x - 1);\nloop invariant (m >= 0 && x > m && n <= 0) ==> (m == n - 1);\nloop invariant (m < n && x > m && n <= 0) ==> (m == n);\nloop invariant (m >= 0 && x == m && n > 0) ==> (m == n - 1);\nloop invariant (m >= 0 && x == m && n <= 0) ==> (m == n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x < n is preserved but not established.\nloop invariant 0 <= m <= n - 1 is partially proven to be inductive.\nloop invariant (m >= 0 && x <= m && n > 0) ==> (m == x - 1) is partially proven to be inductive.\nloop invariant (m < n && x <= m && n > 0) ==> (m == x) is partially proven to be inductive.\nloop invariant (m < n && x <= m && n <= 0) ==> (m == n - 1) is partially proven to be inductive.\nloop invariant (m >= 0 && x > m && n > 0) ==> (m == x - 1) is partially proven to be inductive.\nloop invariant (m >= 0 && x > m && n <= 0) ==> (m == n - 1) is partially proven to be inductive.\nloop invariant (m < n && x > m && n <= 0) ==> (m == n) is partially proven to be inductive.\nloop invariant (m >= 0 && x == m && n > 0) ==> (m == n - 1) is partially proven to be inductive.\nloop invariant (m >= 0 && x == m && n <= 0) ==> (m == n) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\nloop invariant i4: (m < n && x <= m && n > 0) ==> (m == x);\nloop invariant i5: (m < n && x <= m && n <= 0) ==> (m == n - 1);\n\nloop invariant i7: (m >= 0 && x > m && n <= 0) ==> (m == n - 1);\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (m <= x ==> (m >= 0 || n <= 0));\nloop invariant (m >= x ==> (m < n || n <= 0));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant (m <= x ==> (m >= 0 || n <= 0)) is partially proven to be inductive.\nloop invariant (m >= x ==> (m < n || n <= 0)) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\nloop invariant i4: (m >= x ==> (m < n || n <= 0));\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant 0 <= m <= n;\nloop invariant unknown_int() == 1 ==> m == x;\nloop invariant unknown_int() == 0 ==> m <= x;\nloop invariant unknown_int() == 0 ==> m < x;\nloop invariant x == n ==> m <= x;\nloop invariant x == n ==> m < x;\nloop invariant x == n ==> m == x;\nloop invariant x == n ==> m >= 0;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant x == n ==> m >= 0;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant x == n ==> m <= n;\nloop invariant x == n ==> m < n;\nloop invariant x == n ==> n <= 0;\nloop invariant unknown_int() == 1 ==> n <= 0;\nloop invariant unknown_int() == 0 ==> n <= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\nloop invariant unknown_int() == 0 ==> m >= 0;\nloop invariant unknown_int() == 1 ==> m >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m <= x;\n\n\n\n\nloop invariant i7: x == n ==> m <= x;\n\n\n\n\n\n\n\n\n\nloop invariant i17: x == n ==> m <= n;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m <= x;\nloop invariant m <= n - 1;\nloop invariant m >= 0 ==> (m < n);\nloop invariant m >= 0 ==> (m <= n - 1);\nloop invariant m < n ==> (m >= 0);\nloop invariant m < n ==> (m <= n - 1);\nloop invariant m <= n - 1 ==> (m >= 0);\nloop invariant m <= n - 1 ==> (m < n);\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n));\nloop invariant m < n ==> (m >= 0 ==> (m <= n - 1));\nloop invariant m <= n - 1 ==> (m >= 0 ==> (m < n));\nloop invariant m >= 0 ==> (m < n ==> (m <= n - 1));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m >= 0 ==> (m <= n - 1 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant m < n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n - 1 is partially proven to be inductive.\nloop invariant m >= 0 ==> (m < n) is partially proven to be inductive.\nloop invariant m >= 0 ==> (m <= n - 1) is partially proven to be inductive.\nloop invariant m < n ==> (m >= 0) is partially proven to be inductive.\nloop invariant m < n ==> (m <= n - 1) is partially proven to be inductive.\nloop invariant m <= n - 1 ==> (m >= 0) is partially proven to be inductive.\nloop invariant m <= n - 1 ==> (m < n) is partially proven to be inductive.\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n)) is partially proven to be inductive.\nloop invariant m < n ==> (m >= 0 ==> (m <= n - 1)) is partially proven to be inductive.\nloop invariant m <= n - 1 ==> (m >= 0 ==> (m < n)) is partially proven to be inductive.\nloop invariant m >= 0 ==> (m < n ==> (m <= n - 1)) is partially proven to be inductive.\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0)) is partially proven to be inductive.\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0)) is partially proven to be inductive.\nloop invariant m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0))) is partially proven to be inductive.\nloop invariant m < n ==> (m >= 0 ==> (m <= n - 1 ==> (m < n))) is partially proven to be inductive.\nloop invariant m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1))) is partially proven to be inductive.\nloop invariant m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n))) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\n\nloop invariant i4: m <= x;\n\n\n\nloop invariant i8: m < n ==> (m >= 0);\nloop invariant i9: m < n ==> (m <= n - 1);\nloop invariant i10: m <= n - 1 ==> (m >= 0);\nloop invariant i11: m <= n - 1 ==> (m < n);\nloop invariant i12: m >= 0 ==> (m <= n - 1 ==> (m < n));\nloop invariant i13: m < n ==> (m >= 0 ==> (m <= n - 1));\nloop invariant i14: m <= n - 1 ==> (m >= 0 ==> (m < n));\nloop invariant i15: m >= 0 ==> (m < n ==> (m <= n - 1));\nloop invariant i16: m < n ==> (m <= n - 1 ==> (m >= 0));\nloop invariant i17: m <= n - 1 ==> (m < n ==> (m >= 0));\nloop invariant i18: m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant i19: m < n ==> (m >= 0 ==> (m <= n - 1 ==> (m < n)));\nloop invariant i20: m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant i21: m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (x == m || unknown_int() == 0);\nloop invariant (x == n || unknown_int() == 1);\nloop invariant (m == n || unknown_int() == 0);\nloop invariant (m == x || unknown_int() == 1);\nloop invariant (x == n || unknown_int() == 0);\nloop invariant (x == m || unknown_int() == 1);\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (x == m || unknown_int() == 0);\nloop invariant (x == n || unknown_int() == 1);\nloop invariant (m == n || unknown_int() == 0);\nloop invariant (m == x || unknown_int() == 1);\nloop invariant (x == n || unknown_int() == 0);\nloop invariant (x == m || unknown_int() == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant (n <= 0) ==> (m >= n);\nloop invariant (n > 0) ==> (m < n);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\nloop invariant (n > 0) ==> (m >= 0);\nloop invariant (n <= 0) ==> (m <= n);\nloop invariant (n > 0) ==> (m >= m);\nloop invariant (n <= 0) ==> (m >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant (n <= 0) ==> (m >= n) is partially proven to be inductive.\nloop invariant (n > 0) ==> (m < n) is partially proven to be inductive.\nloop invariant (n <= 0) ==> (m >= 0) is partially proven to be inductive.\nloop invariant (n > 0) ==> (m >= 0) is partially proven to be inductive.\nloop invariant (n <= 0) ==> (m <= n) is partially proven to be inductive.\nloop invariant (n > 0) ==> (m >= m) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: (n <= 0) ==> (m >= n);\nloop invariant i4: (n > 0) ==> (m < n);\nloop invariant i5: (n <= 0) ==> (m >= 0);\nloop invariant i6: (n > 0) ==> (m >= 0);\n\nloop invariant i8: (n > 0) ==> (m >= m);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m <= x;\n\n\nloop invariant i5: m >= 0;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant m == x ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\nloop invariant m < n ==> (m >= 0 && m <= n-1);\nloop invariant m <= n ==> (m >= 0 && m <= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m == x ==> (m >= 0 && m <= n) is partially proven to be inductive.\nloop invariant m < n ==> (m >= 0 && m <= n-1) is partially proven to be inductive.\nloop invariant m <= n ==> (m >= 0 && m <= n) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: m >= 0;\n\n\nloop invariant i5: m <= x;\n\nloop invariant i7: m < n ==> (m >= 0 && m <= n-1);\nloop invariant i8: m <= n ==> (m >= 0 && m <= n);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n ==> m == x);\nloop invariant (x < n ==> m <= x);\nloop invariant (x < n ==> m >= 0);\nloop invariant (x < n ==> m < n);\nloop invariant (x < n ==> m == x - 1 ==> m >= 0);\nloop invariant (x < n ==> m == x - 1 ==> m < n);\nloop invariant (x < n ==> m == x - 1 ==> m == x - 1 ==> m >= 0);\nloop invariant (x < n ==> m == x - 1 ==> m == x - 1 ==> m < n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x == n ==> m == x) is established but not preserved.\nloop invariant (x < n ==> m <= x) is partially proven to be inductive.\nloop invariant (x < n ==> m >= 0) is partially proven to be inductive.\nloop invariant (x < n ==> m < n) is partially proven to be inductive.\nloop invariant (x < n ==> m == x - 1 ==> m >= 0) is partially proven to be inductive.\nloop invariant (x < n ==> m == x - 1 ==> m < n) is partially proven to be inductive.\nloop invariant (x < n ==> m == x - 1 ==> m == x - 1 ==> m >= 0) is partially proven to be inductive.\nloop invariant (x < n ==> m == x - 1 ==> m == x - 1 ==> m < n) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\nloop invariant i3: (x < n ==> m <= x);\nloop invariant i4: (x < n ==> m >= 0);\nloop invariant i5: (x < n ==> m < n);\nloop invariant i6: (x < n ==> m == x - 1 ==> m >= 0);\nloop invariant i7: (x < n ==> m == x - 1 ==> m < n);\nloop invariant i8: (x < n ==> m == x - 1 ==> m == x - 1 ==> m >= 0);\nloop invariant i9: (x < n ==> m == x - 1 ==> m == x - 1 ==> m < n);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant m >= 0 ==> n > 0 ==> m < n is partially proven to be inductive.\nloop invariant m >= 0 ==> n <= 0 ==> m >= n is partially proven to be inductive.\nloop invariant m >= 0 ==> n <= 0 ==> m <= n is partially proven to be inductive.\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 is partially proven to be inductive.\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 is partially proven to be inductive.\nloop invariant m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n is partially proven to be inductive.\nloop invariant m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\nloop invariant i4: x >= 0;\n\n\nloop invariant i7: m >= 0 ==> n > 0 ==> m < n;\nloop invariant i8: m >= 0 ==> n <= 0 ==> m >= n;\n\nloop invariant i10: m >= 0 ==> n <= 0 ==> m >= 0;\nloop invariant i11: m >= 0 ==> n <= 0 ==> m <= 0;\nloop invariant i12: m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant i13: m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant (if unknown_int() then m = x else m = m ==> m = m);\nloop invariant (if unknown_int() then x = x + 1 else x = x ==> x = x);\nloop invariant (if unknown_int() then m >= 0 ==> m >= 0);\nloop invariant (if unknown_int() then m < n ==> m < n);\nloop invariant (if unknown_int() then x < n ==> x < n);\nloop invariant (if unknown_int() then m >= 0 || n <= 0 ==> m >= 0 || n <= 0);\nloop invariant (if unknown_int() then m < n || n <= 0 ==> m < n || n <= 0);\nloop invariant (if unknown_int() then m >= 0 && m < n ==> m >= 0 && m < n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token 'unknown_int'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= n;\nloop invariant m < n || n <= 0;\nloop invariant m >= 0 || n <= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 0 || x <= 0;\nloop invariant m >= 0 || x <= n;\nloop invariant m >= 0 || x <= 0 || x >= n;\nloop invariant m >= 0 || n <= 0 || x <= n;\nloop invariant m >= 0 || (n <= 0 || x <= n);\nloop invariant m >= 0 || (x <= n || n <= 0);\nloop invariant m >= 0 || (x <= 0 || x >= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= 0 || x <= n);\nloop invariant m >= 0 || (x <= n || x >= 0);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\nloop invariant m >= 0 || (x <= n || x >= n);\nloop invariant m >= 0 || (x <= n || x <= n);\nloop invariant m >= 0 || (x <= n || x <= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= n is partially proven to be inductive.\nloop invariant m < n || n <= 0 is partially proven to be inductive.\nloop invariant m >= 0 || n <= 0 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant m >= 0 || x <= 0 is partially proven to be inductive.\nloop invariant m >= 0 || x <= n is partially proven to be inductive.\nloop invariant m >= 0 || x <= 0 || x >= n is partially proven to be inductive.\nloop invariant m >= 0 || n <= 0 || x <= n is partially proven to be inductive.\nloop invariant m >= 0 || (n <= 0 || x <= n) is partially proven to be inductive.\nloop invariant m >= 0 || (x <= n || n <= 0) is partially proven to be inductive.\nloop invariant m >= 0 || (x <= 0 || x >= n) is partially proven to be inductive.\nloop invariant m >= 0 || (x <= n || x <= 0) is partially proven to be inductive.\nloop invariant m >= 0 || (x <= n || x <= n) is partially proven to be inductive.\nloop invariant m >= 0 || (x <= 0 || x <= n) is partially proven to be inductive.\nloop invariant m >= 0 || (x <= n || x >= 0) is partially proven to be inductive.\nloop invariant m >= 0 || (x <= n || x >= n) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\nloop invariant i3: m < n || n <= 0;\nloop invariant i4: m >= 0 || n <= 0;\nloop invariant i5: m <= x;\n\nloop invariant i7: m >= 0 || x <= 0;\nloop invariant i8: m >= 0 || x <= n;\nloop invariant i9: m >= 0 || x <= 0 || x >= n;\nloop invariant i10: m >= 0 || n <= 0 || x <= n;\nloop invariant i11: m >= 0 || (n <= 0 || x <= n);\nloop invariant i12: m >= 0 || (x <= n || n <= 0);\nloop invariant i13: m >= 0 || (x <= 0 || x >= n);\nloop invariant i14: m >= 0 || (x <= n || x <= 0);\nloop invariant i15: m >= 0 || (x <= n || x <= n);\nloop invariant i16: m >= 0 || (x <= 0 || x <= n);\nloop invariant i17: m >= 0 || (x <= n || x >= 0);\nloop invariant i18: m >= 0 || (x <= n || x >= n);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 34: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: (x >= m) ==> (m >= 0);\nloop invariant i4: (x < n) ==> (m < n);\nloop invariant i5: (x >= m) ==> (m < n);\nloop invariant i6: (x < n) ==> (m >= 0);\nloop invariant i7: 1 <= x < n;\nloop invariant i8: 0 <= m <= n - 1;\nloop invariant i9: (m >= 0 && x <= m && n > 0) ==> (m == x - 1);\nloop invariant i10: (m < n && x <= m && n > 0) ==> (m == x);\nloop invariant i11: (m < n && x <= m && n <= 0) ==> (m == n - 1);\nloop invariant i12: (m >= 0 && x > m && n > 0) ==> (m == x - 1);\nloop invariant i13: (m >= 0 && x > m && n <= 0) ==> (m == n - 1);\nloop invariant i14: (m < n && x > m && n <= 0) ==> (m == n);\nloop invariant i15: (m >= 0 && x == m && n > 0) ==> (m == n - 1);\nloop invariant i16: (m >= 0 && x == m && n <= 0) ==> (m == n);\nloop invariant i17: 1 <= x <= n;\nloop invariant i18: (m <= x ==> (m >= 0 || n <= 0));\nloop invariant i19: (m >= x ==> (m < n || n <= 0));\nloop invariant i20: m <= x;\nloop invariant i21: unknown_int() == 1 ==> m == x;\nloop invariant i22: unknown_int() == 0 ==> m <= x;\nloop invariant i23: unknown_int() == 0 ==> m < x;\nloop invariant i24: x == n ==> m <= x;\nloop invariant i25: x == n ==> m < x;\nloop invariant i26: x == n ==> m == x;\nloop invariant i27: x == n ==> m >= 0;\nloop invariant i28: x == n ==> m < n;\nloop invariant i29: x == n ==> n <= 0;\nloop invariant i30: unknown_int() == 1 ==> n <= 0;\nloop invariant i31: unknown_int() == 0 ==> n <= 0;\nloop invariant i32: unknown_int() == 1 ==> m >= 0;\nloop invariant i33: unknown_int() == 0 ==> m >= 0;\nloop invariant i34: x == n ==> m <= n;\nloop invariant i35: m >= 0;\nloop invariant i36: m < n;\nloop invariant i37: m <= n - 1;\nloop invariant i38: m >= 0 ==> (m < n);\nloop invariant i39: m >= 0 ==> (m <= n - 1);\nloop invariant i40: m < n ==> (m >= 0);\nloop invariant i41: m < n ==> (m <= n - 1);\nloop invariant i42: m <= n - 1 ==> (m >= 0);\nloop invariant i43: m <= n - 1 ==> (m < n);\nloop invariant i44: m >= 0 ==> (m <= n - 1 ==> (m < n));\nloop invariant i45: m < n ==> (m >= 0 ==> (m <= n - 1));\nloop invariant i46: m <= n - 1 ==> (m >= 0 ==> (m < n));\nloop invariant i47: m >= 0 ==> (m < n ==> (m <= n - 1));\nloop invariant i48: m < n ==> (m <= n - 1 ==> (m >= 0));\nloop invariant i49: m <= n - 1 ==> (m < n ==> (m >= 0));\nloop invariant i50: m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant i51: m < n ==> (m >= 0 ==> (m <= n - 1 ==> (m < n)));\nloop invariant i52: m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant i53: m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\nloop invariant i54: m <= x <= n;\nloop invariant i55: (x == m || unknown_int() == 0);\nloop invariant i56: (x == n || unknown_int() == 1);\nloop invariant i57: (m == n || unknown_int() == 0);\nloop invariant i58: (m == x || unknown_int() == 1);\nloop invariant i59: (x == n || unknown_int() == 0);\nloop invariant i60: (x == m || unknown_int() == 1);\nloop invariant i61: (n <= 0) ==> (m >= n);\nloop invariant i62: (n > 0) ==> (m < n);\nloop invariant i63: (n <= 0) ==> (m >= 0);\nloop invariant i64: (n > 0) ==> (m >= 0);\nloop invariant i65: (n <= 0) ==> (m <= n);\nloop invariant i66: (n > 0) ==> (m >= m);\nloop invariant i67: y >= 0;\nloop invariant i68: m <= n;\nloop invariant i69: x <= n;\nloop invariant i70: 0 <= m <= x;\nloop invariant i71: x >= 0;\nloop invariant i72: m == x ==> (m >= 0 && m <= n);\nloop invariant i73: m < n ==> (m >= 0 && m <= n-1);\nloop invariant i74: m <= n ==> (m >= 0 && m <= n);\nloop invariant i75: (x == n ==> m == x);\nloop invariant i76: (x < n ==> m <= x);\nloop invariant i77: (x < n ==> m >= 0);\nloop invariant i78: (x < n ==> m < n);\nloop invariant i79: (x < n ==> m == x - 1 ==> m >= 0);\nloop invariant i80: (x < n ==> m == x - 1 ==> m < n);\nloop invariant i81: (x < n ==> m == x - 1 ==> m == x - 1 ==> m >= 0);\nloop invariant i82: (x < n ==> m == x - 1 ==> m == x - 1 ==> m < n);\nloop invariant i83: m >= 0 ==> n > 0 ==> m < n;\nloop invariant i84: m >= 0 ==> n <= 0 ==> m >= n;\nloop invariant i85: m >= 0 ==> n <= 0 ==> m <= n;\nloop invariant i86: m >= 0 ==> n <= 0 ==> m >= 0;\nloop invariant i87: m >= 0 ==> n <= 0 ==> m <= 0;\nloop invariant i88: m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant i89: m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\nloop invariant i90: (if unknown_int() then m = x else m = m ==> m = m);\nloop invariant i91: (if unknown_int() then x = x + 1 else x = x ==> x = x);\nloop invariant i92: (if unknown_int() then m >= 0 ==> m >= 0);\nloop invariant i93: (if unknown_int() then m < n ==> m < n);\nloop invariant i94: (if unknown_int() then x < n ==> x < n);\nloop invariant i95: (if unknown_int() then m >= 0 || n <= 0 ==> m >= 0 || n <= 0);\nloop invariant i96: (if unknown_int() then m < n || n <= 0 ==> m < n || n <= 0);\nloop invariant i97: (if unknown_int() then m >= 0 && m < n ==> m >= 0 && m < n);\nloop invariant i98: 0 <= n;\nloop invariant i99: m < n || n <= 0;\nloop invariant i100: m >= 0 || n <= 0;\nloop invariant i101: m >= 0 || x <= 0;\nloop invariant i102: m >= 0 || x <= n;\nloop invariant i103: m >= 0 || x <= 0 || x >= n;\nloop invariant i104: m >= 0 || n <= 0 || x <= n;\nloop invariant i105: m >= 0 || (n <= 0 || x <= n);\nloop invariant i106: m >= 0 || (x <= n || n <= 0);\nloop invariant i107: m >= 0 || (x <= 0 || x >= n);\nloop invariant i108: m >= 0 || (x <= n || x <= 0);\nloop invariant i109: m >= 0 || (x <= n || x <= n);\nloop invariant i110: m >= 0 || (x <= 0 || x <= n);\nloop invariant i111: m >= 0 || (x <= n || x >= 0);\nloop invariant i112: m >= 0 || (x <= n || x >= n);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 37,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\nloop invariant i3: (x >= m) ==> (m >= 0);\nloop invariant i4: (x < n) ==> (m < n);\n\nloop invariant i6: (x < n) ==> (m >= 0);\n\n\n\nloop invariant i10: (m < n && x <= m && n > 0) ==> (m == x);\nloop invariant i11: (m < n && x <= m && n <= 0) ==> (m == n - 1);\n\nloop invariant i13: (m >= 0 && x > m && n <= 0) ==> (m == n - 1);\nloop invariant i14: (m < n && x > m && n <= 0) ==> (m == n);\n\n\n\nloop invariant i18: (m <= x ==> (m >= 0 || n <= 0));\nloop invariant i19: (m >= x ==> (m < n || n <= 0));\nloop invariant i20: m <= x;\n\n\n\nloop invariant i24: x == n ==> m <= x;\n\n\nloop invariant i27: x == n ==> m >= 0;\n\n\n\n\n\n\nloop invariant i34: x == n ==> m <= n;\nloop invariant i35: m >= 0;\n\n\n\n\nloop invariant i40: m < n ==> (m >= 0);\nloop invariant i41: m < n ==> (m <= n - 1);\nloop invariant i42: m <= n - 1 ==> (m >= 0);\nloop invariant i43: m <= n - 1 ==> (m < n);\nloop invariant i44: m >= 0 ==> (m <= n - 1 ==> (m < n));\nloop invariant i45: m < n ==> (m >= 0 ==> (m <= n - 1));\nloop invariant i46: m <= n - 1 ==> (m >= 0 ==> (m < n));\nloop invariant i47: m >= 0 ==> (m < n ==> (m <= n - 1));\nloop invariant i48: m < n ==> (m <= n - 1 ==> (m >= 0));\nloop invariant i49: m <= n - 1 ==> (m < n ==> (m >= 0));\nloop invariant i50: m >= 0 ==> (m <= n - 1 ==> (m < n ==> (m >= 0)));\nloop invariant i51: m < n ==> (m >= 0 ==> (m <= n - 1 ==> (m < n)));\nloop invariant i52: m <= n - 1 ==> (m < n ==> (m >= 0 ==> (m <= n - 1)));\nloop invariant i53: m < n ==> (m <= n - 1 ==> (m >= 0 ==> (m < n)));\n\n\n\n\n\n\n\nloop invariant i61: (n <= 0) ==> (m >= n);\nloop invariant i62: (n > 0) ==> (m < n);\nloop invariant i63: (n <= 0) ==> (m >= 0);\nloop invariant i64: (n > 0) ==> (m >= 0);\n\nloop invariant i66: (n > 0) ==> (m >= m);\n\n\n\nloop invariant i70: 0 <= m <= x;\nloop invariant i71: x >= 0;\n\nloop invariant i73: m < n ==> (m >= 0 && m <= n-1);\nloop invariant i74: m <= n ==> (m >= 0 && m <= n);\n\nloop invariant i76: (x < n ==> m <= x);\nloop invariant i77: (x < n ==> m >= 0);\nloop invariant i78: (x < n ==> m < n);\nloop invariant i79: (x < n ==> m == x - 1 ==> m >= 0);\nloop invariant i80: (x < n ==> m == x - 1 ==> m < n);\nloop invariant i81: (x < n ==> m == x - 1 ==> m == x - 1 ==> m >= 0);\nloop invariant i82: (x < n ==> m == x - 1 ==> m == x - 1 ==> m < n);\nloop invariant i83: m >= 0 ==> n > 0 ==> m < n;\nloop invariant i84: m >= 0 ==> n <= 0 ==> m >= n;\n\nloop invariant i86: m >= 0 ==> n <= 0 ==> m >= 0;\nloop invariant i87: m >= 0 ==> n <= 0 ==> m <= 0;\nloop invariant i88: m >= 0 ==> n <= 0 ==> m >= 0 ==> n > 0 ==> m < n;\nloop invariant i89: m >= 0 ==> n <= 0 ==> m <= 0 ==> n > 0 ==> m < n;\n\n\n\n\n\n\n\n\n\nloop invariant i99: m < n || n <= 0;\nloop invariant i100: m >= 0 || n <= 0;\nloop invariant i101: m >= 0 || x <= 0;\nloop invariant i102: m >= 0 || x <= n;\nloop invariant i103: m >= 0 || x <= 0 || x >= n;\nloop invariant i104: m >= 0 || n <= 0 || x <= n;\nloop invariant i105: m >= 0 || (n <= 0 || x <= n);\nloop invariant i106: m >= 0 || (x <= n || n <= 0);\nloop invariant i107: m >= 0 || (x <= 0 || x >= n);\nloop invariant i108: m >= 0 || (x <= n || x <= 0);\nloop invariant i109: m >= 0 || (x <= n || x <= n);\nloop invariant i110: m >= 0 || (x <= 0 || x <= n);\nloop invariant i111: m >= 0 || (x <= n || x >= 0);\nloop invariant i112: m >= 0 || (x <= n || x >= n);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c"
        ],
        "skipped": [],
        "total": 9,
        "success_count": 3,
        "failure_count": 6,
        "success_rate": 0.3333333333333333
    }
}