{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == (2*i - 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn >= 0;\nloop invariant sn <= n * 2;\nloop invariant sn <= n * (2);\nloop invariant n >= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn >= 0;\nloop invariant sn <= n * 2;\nloop invariant sn <= n * (2);\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant sn == 2*i - 2;\nloop invariant sn == 0 ==> i == 1;\nloop invariant n == -1000 ==> i == 1;\nloop invariant sn == 2*n ==> i == n;\nloop invariant sn == 0 ==> i == 1 && n == -1000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2 * n;\nloop invariant 1 <= i <= n + 1;\nloop invariant n == unknown_int() && n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= (n * 2 || n == 0);\nloop invariant i >= 1 || i <= n;\nloop invariant sn >= (2 * (i - 1) || n == 0);\nloop invariant sn <= (2 * i || n == 0);\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant sn == i*(2)|| sn == 0;\nloop invariant sn == n*(2)|| sn == 0;\nloop invariant sn == i*(2)|| sn == 0;\nloop invariant sn == n*(2)|| sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * 2;\nloop invariant i >= 1 || sn == 0;\nloop invariant i <= n || sn == 0;\nloop invariant sn >= 0 || sn == n * 2;\nloop invariant sn <= n * 2 || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i * 2;\nloop invariant i >= 1 ==> sn == 0;\nloop invariant i <= n ==> sn == 0;\nloop invariant sn >= 0 ==> sn == n * 2;\nloop invariant sn <= n * 2 ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn == (2 * i);\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant sn >= (2 * (i - 1));\nloop invariant sn <= (2 * i);\nloop invariant sn >= (2 * (i - 1) + 2);\nloop invariant sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= 2 * i - 2;\nloop invariant sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i >= 1 && i <= n;\nloop invariant sn >= 0 && sn <= 2 * n - 2;\nloop invariant sn == 0 ==> sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> i == n + 1;\nloop invariant sn == (n - i + 1) * (2) ==> i == 1;\nloop invariant sn == 0 ==> i == n + 1 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> i == 1 || sn == 0;\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant i == 1;\nloop invariant sn == (2 * (i - 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * i;\nloop invariant sn >= 2 * (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2*n;\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sn == (2*i);\nloop invariant i <= n ==> sn <= 2*n;\nloop invariant sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n; loop invariant sn == i * (2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == (2*i - 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= 2*n is partially proven to be inductive.\nloop invariant sn == (2*i - 2) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn == (2*i - 2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn >= 0;\nloop invariant sn <= n * 2;\nloop invariant sn <= n * (2);\nloop invariant n >= 0;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn >= 0;\nloop invariant sn <= n * 2;\nloop invariant sn <= n * (2);\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant n >= -1000 is partially proven to be inductive.\nloop invariant n < 1000 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n * 2 is established but not preserved.\nloop invariant sn <= n * (2) is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: n >= -1000;\nloop invariant i3: n < 1000;\nloop invariant i4: sn >= 0;\n\n\n\nloop invariant i8: i >= 1;\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant sn == 2*i - 2;\nloop invariant sn == 0 ==> i == 1;\nloop invariant n == -1000 ==> i == 1;\nloop invariant sn == 2*n ==> i == n;\nloop invariant sn == 0 ==> i == 1 && n == -1000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i - 2 is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant n == -1000 ==> i == 1 is partially proven to be inductive.\nloop invariant sn == 2*n ==> i == n is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 && n == -1000 is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: sn == 2*i - 2;\nloop invariant i7: sn == 0 ==> i == 1;\nloop invariant i8: n == -1000 ==> i == 1;\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2 * n;\nloop invariant 1 <= i <= n + 1;\nloop invariant n == unknown_int() && n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant unknown_int() == n;\nloop invariant n < 1000 && n >= -1000;\nloop invariant i == 1 || (i > 1 && i <= n);\nloop invariant sn == (i - 1) * (2);\nloop invariant sn <= 2 * n;\nloop invariant sn >= 0;\nloop invariant i <= n + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\nloop invariant i5: sn == (i - 1) * (2);\n\nloop invariant i7: sn >= 0;\n\nloop invariant i9: i >= 1;\n\nloop invariant i11: n < 1000 && n >= -1000;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= (n * 2 || n == 0);\nloop invariant i >= 1 || i <= n;\nloop invariant sn >= (2 * (i - 1) || n == 0);\nloop invariant sn <= (2 * i || n == 0);\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\nloop invariant sn == (2 * n || n == 0);\nloop invariant sn == (i * 2 || n == 0);\nloop invariant sn == (n * 2 || i > n);\nloop invariant sn == 0 || n == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: comparison of incompatible types: int and 𝔹. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant sn == i*(2)|| sn == 0;\nloop invariant sn == n*(2)|| sn == 0;\nloop invariant sn == i*(2)|| sn == 0;\nloop invariant sn == n*(2)|| sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == 2*i is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2*n is partially proven to be inductive.\nloop invariant sn == i*(2)|| sn == 0 is partially proven to be inductive.\nloop invariant sn == n*(2)|| sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * 2;\nloop invariant i >= 1 || sn == 0;\nloop invariant i <= n || sn == 0;\nloop invariant sn >= 0 || sn == n * 2;\nloop invariant sn <= n * 2 || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i * 2;\nloop invariant i >= 1 ==> sn == 0;\nloop invariant i <= n ==> sn == 0;\nloop invariant sn >= 0 ==> sn == n * 2;\nloop invariant sn <= n * 2 ==> sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i * 2 is preserved but not established.\nloop invariant i >= 1 || sn == 0 is partially proven to be inductive.\nloop invariant i <= n || sn == 0 is partially proven to be inductive.\nloop invariant sn >= 0 || sn == n * 2 is partially proven to be inductive.\nloop invariant sn <= n * 2 || sn == 0 is partially proven to be inductive.\nloop invariant i >= 1 ==> sn == 0 is partially proven to be inductive.\nloop invariant i <= n ==> sn == 0 is partially proven to be inductive.\nloop invariant sn >= 0 ==> sn == n * 2 is partially proven to be inductive.\nloop invariant sn <= n * 2 ==> sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant n >= -1000;\nloop invariant n < 1000;\nloop invariant sn == (2 * i);\nloop invariant sn >= 0;\nloop invariant sn <= 2 * n;\nloop invariant sn >= (2 * (i - 1));\nloop invariant sn <= (2 * i);\nloop invariant sn >= (2 * (i - 1) + 2);\nloop invariant sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant n >= -1000 is partially proven to be inductive.\nloop invariant n < 1000 is partially proven to be inductive.\nloop invariant sn == (2 * i) is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2 * n is partially proven to be inductive.\nloop invariant sn >= (2 * (i - 1)) is partially proven to be inductive.\nloop invariant sn <= (2 * i) is partially proven to be inductive.\nloop invariant sn >= (2 * (i - 1) + 2) is partially proven to be inductive.\nloop invariant sn <= (2 * i + 2) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn == (2 * i) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= 2 is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= 2 * i is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1)) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2) is partially proven to be inductive.\nloop invariant sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: n >= -1000;\nloop invariant i4: n < 1000;\n\nloop invariant i6: sn >= 0;\n\nloop invariant i8: sn >= (2 * (i - 1));\nloop invariant i9: sn <= (2 * i);\n\nloop invariant i11: sn <= (2 * i + 2);\nloop invariant i12: sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant i13: sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant i14: sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant i15: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant i16: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant i17: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant i18: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= 2 * i - 2;\nloop invariant sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i >= 1 && i <= n;\nloop invariant sn >= 0 && sn <= 2 * n - 2;\nloop invariant sn == 0 ==> sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> i == n + 1;\nloop invariant sn == (n - i + 1) * (2) ==> i == 1;\nloop invariant sn == 0 ==> i == n + 1 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> i == 1 || sn == 0;\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= 2 * i - 2 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) || sn == 0 is partially proven to be inductive.\nloop invariant i >= 1 && i <= n is partially proven to be inductive.\nloop invariant sn >= 0 && sn <= 2 * n - 2 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == (n - i + 1) * (2) is preserved but not established.\nloop invariant sn == (n - i + 1) * (2) ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> i == 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> i == n + 1 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> i == 1 || sn == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: 0 <= sn <= 2 * i - 2;\n\n\n\n\n\nloop invariant i8: sn == 0 ==> sn == 0;\nloop invariant i9: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\n\n\n\n\nloop invariant i14: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i15: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i16: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i17: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i18: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i19: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i20: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i21: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i22: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i23: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i24: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i25: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = 2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i == 1;\nloop invariant sn == (2 * (i - 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 1 is established but not preserved.\nloop invariant sn == (2 * (i - 1)) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: sn == (2 * (i - 1));\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\nloop invariant sn >= i * 2 || sn == 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * 2;\nloop invariant sn >= i * (-2);\nloop invariant sn <= i * 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn == i * 2 is preserved but not established.\nloop invariant sn >= i * (-2) is partially proven to be inductive.\nloop invariant sn <= i * 2 is partially proven to be inductive.\nloop invariant sn >= i * 2 || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= i * (-2);\nloop invariant i4: sn <= i * 2;\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2 * i;\nloop invariant sn >= 2 * (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2 * i is partially proven to be inductive.\nloop invariant sn >= 2 * (i - 1) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= 2 * i;\nloop invariant i4: sn >= 2 * (i - 1);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*n;\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= 2*n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sn == (2*i);\nloop invariant i <= n ==> sn <= 2*n;\nloop invariant sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= 2*n is preserved but not established.\nloop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 2*n is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == (2*i) is preserved but not established.\nloop invariant i <= n ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> i <= n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> i >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i is partially proven to be inductive.\nloop invariant sn == 2*i ==> i == i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> i <= n ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> i >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i == i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n is partially proven to be inductive.\nloop invariant sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: i >= 0;\n\n\n\n\n\n\nloop invariant i12: sn == 2*i ==> sn >= 0;\nloop invariant i13: sn == 2*i ==> i >= 0;\nloop invariant i14: sn == 2*i ==> sn == 2*i;\nloop invariant i15: sn == 2*i ==> i == i;\n\nloop invariant i17: sn == 2*i ==> i <= n ==> sn <= 2*n;\n\n\n\nloop invariant i21: sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i22: sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i23: sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i24: sn == 2*i ==> sn == 2*i ==> i == i;\n\nloop invariant i26: sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n\n\n\nloop invariant i30: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i31: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i32: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i33: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\n\nloop invariant i35: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n\n\n\nloop invariant i39: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i40: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i41: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i42: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\n\nloop invariant i44: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant sn == i * (2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n; loop invariant sn == i * (2) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 33: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: 0 <= sn <= 2*n;\nloop invariant i3: sn == (2*i - 2);\nloop invariant i4: n >= -1000;\nloop invariant i5: n < 1000;\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= n * 2;\nloop invariant i8: sn <= n * (2);\nloop invariant i9: n >= 0;\nloop invariant i10: i >= 1;\nloop invariant i11: i <= n;\nloop invariant i12: 0 <= n <= 1000;\nloop invariant i13: sn <= 2*n;\nloop invariant i14: sn == 2*i - 2;\nloop invariant i15: sn == 0 ==> i == 1;\nloop invariant i16: n == -1000 ==> i == 1;\nloop invariant i17: sn == 2*n ==> i == n;\nloop invariant i18: sn == 0 ==> i == 1 && n == -1000;\nloop invariant i19: 0 <= sn <= 2 * n;\nloop invariant i20: 1 <= i <= n + 1;\nloop invariant i21: n == unknown_int() && n < 1000 && n >= -1000;\nloop invariant i22: i == 1 || (i > 1 && i <= n);\nloop invariant i23: sn == (i - 1) * (2);\nloop invariant i24: sn <= 2 * n;\nloop invariant i25: i <= n + 1;\nloop invariant i26: unknown_int() == n;\nloop invariant i27: n < 1000 && n >= -1000;\nloop invariant i28: 1 <= sn <= (n * 2 || n == 0);\nloop invariant i29: i >= 1 || i <= n;\nloop invariant i30: sn >= (2 * (i - 1) || n == 0);\nloop invariant i31: sn <= (2 * i || n == 0);\nloop invariant i32: sn == (2 * n || n == 0);\nloop invariant i33: sn == (i * 2 || n == 0);\nloop invariant i34: sn == (n * 2 || i > n);\nloop invariant i35: sn == 0 || n == 0;\nloop invariant i36: 0 <= i <= n;\nloop invariant i37: sn == 2*i;\nloop invariant i38: sn == i*(2)|| sn == 0;\nloop invariant i39: sn == n*(2)|| sn == 0;\nloop invariant i40: sn == i * 2;\nloop invariant i41: i >= 1 || sn == 0;\nloop invariant i42: i <= n || sn == 0;\nloop invariant i43: sn >= 0 || sn == n * 2;\nloop invariant i44: sn <= n * 2 || sn == 0;\nloop invariant i45: i >= 1 ==> sn == 0;\nloop invariant i46: i <= n ==> sn == 0;\nloop invariant i47: sn >= 0 ==> sn == n * 2;\nloop invariant i48: sn <= n * 2 ==> sn == 0;\nloop invariant i49: sn == (2 * i);\nloop invariant i50: sn >= (2 * (i - 1));\nloop invariant i51: sn <= (2 * i);\nloop invariant i52: sn >= (2 * (i - 1) + 2);\nloop invariant i53: sn <= (2 * i + 2);\nloop invariant i54: sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant i55: sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant i56: sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant i57: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant i58: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant i59: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant i60: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant i61: 0 <= sn <= 2 * i - 2;\nloop invariant i62: sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i63: i >= 1 && i <= n;\nloop invariant i64: sn >= 0 && sn <= 2 * n - 2;\nloop invariant i65: sn == 0 ==> sn == (n - i + 1) * (2);\nloop invariant i66: sn == (n - i + 1) * (2) ==> sn == 0;\nloop invariant i67: sn == 0 ==> sn == 0;\nloop invariant i68: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\nloop invariant i69: sn == 0 ==> i == n + 1;\nloop invariant i70: sn == (n - i + 1) * (2) ==> i == 1;\nloop invariant i71: sn == 0 ==> i == n + 1 || sn == (n - i + 1) * (2);\nloop invariant i72: sn == (n - i + 1) * (2) ==> i == 1 || sn == 0;\nloop invariant i73: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i74: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i75: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i76: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i77: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i78: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i79: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i80: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i81: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i82: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i83: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i84: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i85: sn = 2 * i;\nloop invariant i86: i == 1;\nloop invariant i87: sn == (2 * (i - 1));\nloop invariant i88: 0 <= i <= n + 1;\nloop invariant i89: sn >= i * (-2);\nloop invariant i90: sn <= i * 2;\nloop invariant i91: sn >= i * 2 || sn == 0;\nloop invariant i92: sn <= 2 * i;\nloop invariant i93: sn >= 2 * (i - 1);\nloop invariant i94: i >= 0;\nloop invariant i95: sn == (2*i);\nloop invariant i96: i <= n ==> sn <= 2*n;\nloop invariant i97: sn >= 0 ==> sn <= 2*n;\nloop invariant i98: sn == 2*i ==> sn <= 2*n;\nloop invariant i99: sn == 2*i ==> i <= n;\nloop invariant i100: sn == 2*i ==> sn >= 0;\nloop invariant i101: sn == 2*i ==> i >= 0;\nloop invariant i102: sn == 2*i ==> sn == 2*i;\nloop invariant i103: sn == 2*i ==> i == i;\nloop invariant i104: sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i105: sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i106: sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i107: sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i108: sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i109: sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i110: sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i111: sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i112: sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i113: sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i114: sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i115: sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i116: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i117: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i118: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i119: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i120: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i121: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i122: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i123: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i124: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i125: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i126: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i127: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i128: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i129: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i130: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i131: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i132: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i133: 0 <= i <= n; loop invariant sn == i * (2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  /*@\n\n\nloop invariant i3: sn == (2*i - 2);\nloop invariant i4: n >= -1000;\nloop invariant i5: n < 1000;\nloop invariant i6: sn >= 0;\n\n\n\nloop invariant i10: i >= 1;\n\n\n\nloop invariant i14: sn == 2*i - 2;\nloop invariant i15: sn == 0 ==> i == 1;\nloop invariant i16: n == -1000 ==> i == 1;\n\n\n\n\n\n\nloop invariant i23: sn == (i - 1) * (2);\n\n\n\nloop invariant i27: n < 1000 && n >= -1000;\n\nloop invariant i29: i >= 1 || i <= n;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i41: i >= 1 || sn == 0;\n\nloop invariant i43: sn >= 0 || sn == n * 2;\nloop invariant i44: sn <= n * 2 || sn == 0;\n\n\n\n\n\nloop invariant i50: sn >= (2 * (i - 1));\nloop invariant i51: sn <= (2 * i);\n\nloop invariant i53: sn <= (2 * i + 2);\nloop invariant i54: sn == (2 * (i - 1) + 2) ==> sn == (2 * i);\nloop invariant i55: sn == (2 * (i - 1) + 2) ==> sn >= 2;\nloop invariant i56: sn == (2 * (i - 1) + 2) ==> sn <= 2 * i;\nloop invariant i57: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1));\nloop invariant i58: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i);\nloop invariant i59: sn == (2 * (i - 1) + 2) ==> sn >= (2 * (i - 1) + 2);\nloop invariant i60: sn == (2 * (i - 1) + 2) ==> sn <= (2 * i + 2);\nloop invariant i61: 0 <= sn <= 2 * i - 2;\n\n\n\n\n\nloop invariant i67: sn == 0 ==> sn == 0;\nloop invariant i68: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2);\n\n\n\n\nloop invariant i73: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i74: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i75: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i76: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i77: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i78: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i79: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0;\nloop invariant i80: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i81: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2);\nloop invariant i82: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i83: sn == 0 ==> sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\nloop invariant i84: sn == (n - i + 1) * (2) ==> sn == (n - i + 1) * (2) || sn == 0 || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2) || sn == (n - i + 1) * (2);\n\n\nloop invariant i87: sn == (2 * (i - 1));\n\nloop invariant i89: sn >= i * (-2);\nloop invariant i90: sn <= i * 2;\n\nloop invariant i92: sn <= 2 * i;\nloop invariant i93: sn >= 2 * (i - 1);\nloop invariant i94: i >= 0;\n\nloop invariant i96: i <= n ==> sn <= 2*n;\n\nloop invariant i98: sn == 2*i ==> sn <= 2*n;\nloop invariant i99: sn == 2*i ==> i <= n;\nloop invariant i100: sn == 2*i ==> sn >= 0;\nloop invariant i101: sn == 2*i ==> i >= 0;\nloop invariant i102: sn == 2*i ==> sn == 2*i;\nloop invariant i103: sn == 2*i ==> i == i;\nloop invariant i104: sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i105: sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i106: sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i107: sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i108: sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i109: sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i110: sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i111: sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i112: sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i113: sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i114: sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i115: sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i116: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i117: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i118: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i119: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i120: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i121: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i122: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i123: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\nloop invariant i124: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0 ==> sn <= 2*n;\nloop invariant i125: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn <= 2*n;\nloop invariant i126: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n;\nloop invariant i127: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0;\nloop invariant i128: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i >= 0;\nloop invariant i129: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i;\nloop invariant i130: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i == i;\nloop invariant i131: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn >= 0 ==> sn <= 2*n;\nloop invariant i132: sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> sn == 2*i ==> i <= n ==> sn <= 2*n;\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c",
            "../dataset/loop_invariants/code2inv/122.c",
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/odd.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/even.c",
            "../dataset/loop_invariants/code2inv/24.c",
            "../dataset/loop_invariants/code2inv/130.c"
        ],
        "skipped": [],
        "total": 30,
        "success_count": 7,
        "failure_count": 23,
        "success_rate": 0.23333333333333334
    }
}