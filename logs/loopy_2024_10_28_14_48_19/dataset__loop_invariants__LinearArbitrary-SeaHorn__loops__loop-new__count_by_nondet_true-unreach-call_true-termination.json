{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant k <= i / j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / (i + j);\nloop invariant i <= k * j;\nloop invariant j <= i / k;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + k * j < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant j >= 1;\nloop invariant i + k * j < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant unknown_int() >= 1;\nloop invariant unknown_int() < 1000000;\nloop invariant i >= k * unknown_int();\nloop invariant i < (k + 1) * unknown_int();\nloop invariant k >= 0;\nloop invariant k < 1000000;\nloop invariant unknown_int() != 0 ==> k < 1000000;\nloop invariant unknown_int() != 0 ==> i < 1000000;\nloop invariant unknown_int() != 0 ==> i >= 0;\nloop invariant unknown_int() != 0 ==> k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i >= k * (LARGE_INT - 1);\nloop invariant i <= k * LARGE_INT;\nloop invariant i + j == i + unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= j;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j = i' + j';\nloop invariant k + 1 = k' + 1;\nloop invariant (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant (i + j) >= i;\nloop invariant (i + j) >= j;\nloop invariant (i + j) <= (LARGE_INT + LARGE_INT);\nloop invariant (k + 1) >= k;\nloop invariant (k + 1) <= LARGE_INT;\nloop invariant (i + j) >= (i + j);\nloop invariant (i + j) <= (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k == i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k == i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant unknown_int() ==> j == unknown_int();\nloop invariant i == k * j;\nloop invariant j == unknown_int();\nloop invariant (i == k * j) ==> (i == k * j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i + k * j <= LARGE_INT;\nloop invariant i == (k * j + i);\nloop invariant j == (unknown_int());\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant j == unknown_int();\nloop invariant unknown_int() < LARGE_INT ==> i <= LARGE_INT;\nloop invariant unknown_int() < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i == k * j;\nloop invariant unknown_int() < LARGE_INT ==> i <= k * (LARGE_INT - 1);\nloop invariant unknown_int() >= 1 ==> k <= LARGE_INT;\nloop invariant unknown_int() >= 1 ==> i <= LARGE_INT - 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= i + j <= 2 * LARGE_INT;\nloop invariant k <= i / j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / (i + j);\nloop invariant i <= k * j;\nloop invariant j <= i / k;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\nloop invariant j <= i / (k + 1);\nloop invariant k <= i / j;\nloop invariant i <= k * j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is established but not preserved.\nloop invariant 0 <= k <= 1000000 is established but not preserved.\nAssertion k <= 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + k * j < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j < LARGE_INT;\nloop invariant j >= 1;\nloop invariant i + k * j < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i + k * j < LARGE_INT ==> j < LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i < LARGE_INT ==> i >= 0;\nloop invariant k < LARGE_INT ==> k >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is established but not preserved.\nloop invariant 0 <= k <= LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> k < LARGE_INT is established but not preserved.\nloop invariant i < LARGE_INT ==> i <= LARGE_INT is partially proven to be inductive.\nloop invariant k < LARGE_INT ==> k <= LARGE_INT is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i >= 0 is partially proven to be inductive.\nloop invariant k < LARGE_INT ==> k >= 0 is partially proven to be inductive.\nloop invariant i < LARGE_INT ==> i < LARGE_INT is partially proven to be inductive.\nloop invariant k < LARGE_INT ==> k < LARGE_INT is partially proven to be inductive.\nAssertion k <= 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\nloop invariant i4: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i5: k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i6: i < LARGE_INT ==> i >= 0;\nloop invariant i7: k < LARGE_INT ==> k >= 0;\nloop invariant i8: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i9: k < LARGE_INT ==> k < LARGE_INT;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1000000;\nloop invariant 0 <= k <= 1000000;\nloop invariant unknown_int() >= 1;\nloop invariant unknown_int() < 1000000;\nloop invariant i >= k * unknown_int();\nloop invariant i < (k + 1) * unknown_int();\nloop invariant k >= 0;\nloop invariant k < 1000000;\nloop invariant unknown_int() != 0 ==> k < 1000000;\nloop invariant unknown_int() != 0 ==> i < 1000000;\nloop invariant unknown_int() != 0 ==> i >= 0;\nloop invariant unknown_int() != 0 ==> k >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: k >= 0;\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i >= k * (LARGE_INT - 1);\nloop invariant i <= k * LARGE_INT;\nloop invariant i + j == i + unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\nloop invariant i4: i <= k * LARGE_INT;\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= j;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j = i' + j';\nloop invariant k + 1 = k' + 1;\nloop invariant (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: 1 <= j && j < LARGE_INT;\n\n\nloop invariant i6: (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant i7: (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant i8: (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant i9: (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant i10: (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant i11: (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant i12: (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i13: (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i14: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant i15: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i16: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i17: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i18: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant i19: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i20: (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i21: (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i22: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i23: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i24: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i25: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i26: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i27: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i28: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i29: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i30: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i31: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i32: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant (i + j) >= i;\nloop invariant (i + j) >= j;\nloop invariant (i + j) <= (LARGE_INT + LARGE_INT);\nloop invariant (k + 1) >= k;\nloop invariant (k + 1) <= LARGE_INT;\nloop invariant (i + j) >= (i + j);\nloop invariant (i + j) <= (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\nloop invariant (i + j) == (i + j);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable j. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: (k + 1) >= k;\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant k == i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k == i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT;\nloop invariant (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= k <= LARGE_INT is partially proven to be inductive.\nloop invariant k == i / LARGE_INT is established but not preserved.\nloop invariant (i % LARGE_INT) == 0 ==> k == i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1 is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1 is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1 is partially proven to be inductive.\nloop invariant (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) is partially proven to be inductive.\nAssertion k <= 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\nloop invariant i6: (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\n\n\nloop invariant i9: (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant i10: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant unknown_int() ==> j == unknown_int();\nloop invariant i == k * j;\nloop invariant j == unknown_int();\nloop invariant (i == k * j) ==> (i == k * j);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i + k * j <= LARGE_INT;\nloop invariant i == (k * j + i);\nloop invariant j == (unknown_int());\nloop invariant i < LARGE_INT;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + j < LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: i >= 0;\nloop invariant i14: k >= 0;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant j == unknown_int();\nloop invariant unknown_int() < LARGE_INT ==> i <= LARGE_INT;\nloop invariant unknown_int() < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i == k * j;\nloop invariant unknown_int() < LARGE_INT ==> i <= k * (LARGE_INT - 1);\nloop invariant unknown_int() >= 1 ==> k <= LARGE_INT;\nloop invariant unknown_int() >= 1 ==> i <= LARGE_INT - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 42: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: 1 <= j <= LARGE_INT;\nloop invariant i4: 0 <= i + j <= 2 * LARGE_INT;\nloop invariant i5: k <= i / j;\nloop invariant i6: j <= i / (k + 1);\nloop invariant i7: k <= i / (i + j);\nloop invariant i8: i <= k * j;\nloop invariant i9: j <= i / k;\nloop invariant i10: 0 <= k <= 1000000;\nloop invariant i11: i + k * j < LARGE_INT;\nloop invariant i12: i <= LARGE_INT;\nloop invariant i13: k <= LARGE_INT;\nloop invariant i14: j < LARGE_INT;\nloop invariant i15: j >= 1;\nloop invariant i16: i + k * j < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i17: i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i18: i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i19: i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i20: i < LARGE_INT ==> k < LARGE_INT;\nloop invariant i21: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i22: k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i23: i < LARGE_INT ==> i >= 0;\nloop invariant i24: k < LARGE_INT ==> k >= 0;\nloop invariant i25: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i26: k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i27: 0 <= i <= 1000000;\nloop invariant i28: unknown_int() >= 1;\nloop invariant i29: unknown_int() < 1000000;\nloop invariant i30: i >= k * unknown_int();\nloop invariant i31: i < (k + 1) * unknown_int();\nloop invariant i32: k >= 0;\nloop invariant i33: k < 1000000;\nloop invariant i34: unknown_int() != 0 ==> k < 1000000;\nloop invariant i35: unknown_int() != 0 ==> i < 1000000;\nloop invariant i36: unknown_int() != 0 ==> i >= 0;\nloop invariant i37: unknown_int() != 0 ==> k >= 0;\nloop invariant i38: i >= k * (LARGE_INT - 1);\nloop invariant i39: i <= k * LARGE_INT;\nloop invariant i40: i + j == i + unknown_int();\nloop invariant i41: i1;\nloop invariant i42: i2;\nloop invariant i43: i3;\nloop invariant i44: i4;\nloop invariant i45: i5;\nloop invariant i46: i6;\nloop invariant i47: i7;\nloop invariant i48: i8;\nloop invariant i49: i <= j;\nloop invariant i50: i < LARGE_INT;\nloop invariant i51: 1 <= j && j < LARGE_INT;\nloop invariant i52: i + j = i' + j';\nloop invariant i53: k + 1 = k' + 1;\nloop invariant i54: (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant i55: (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant i56: (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant i57: (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant i58: (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant i59: (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant i60: (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i61: (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i62: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant i63: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i64: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i65: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i66: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant i67: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i68: (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i69: (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i70: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i71: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i72: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i73: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i74: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i75: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i76: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i77: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i78: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i79: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i80: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i81: 0 <= j <= LARGE_INT;\nloop invariant i82: (i + j) >= i;\nloop invariant i83: (i + j) >= j;\nloop invariant i84: (i + j) <= (LARGE_INT + LARGE_INT);\nloop invariant i85: (k + 1) >= k;\nloop invariant i86: (k + 1) <= LARGE_INT;\nloop invariant i87: (i + j) >= (i + j);\nloop invariant i88: (i + j) <= (i + j);\nloop invariant i89: (i + j) == (i + j);\nloop invariant i90: k == i / LARGE_INT;\nloop invariant i91: (i % LARGE_INT) == 0 ==> k == i / LARGE_INT;\nloop invariant i92: (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT;\nloop invariant i93: (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\nloop invariant i94: (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT;\nloop invariant i95: (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1;\nloop invariant i96: (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant i97: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant i98: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant i99: (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant i100: (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant i101: unknown_int() ==> j == unknown_int();\nloop invariant i102: i == k * j;\nloop invariant i103: j == unknown_int();\nloop invariant i104: (i == k * j) ==> (i == k * j);\nloop invariant i105: 0 <= i + k * j <= LARGE_INT;\nloop invariant i106: i == (k * j + i);\nloop invariant i107: j == (unknown_int());\nloop invariant i108: i + j < LARGE_INT;\nloop invariant i109: i + j >= 0;\nloop invariant i110: i >= 0;\nloop invariant i111: unknown_int() < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i112: unknown_int() < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i113: unknown_int() < LARGE_INT ==> i <= k * (LARGE_INT - 1);\nloop invariant i114: unknown_int() >= 1 ==> k <= LARGE_INT;\nloop invariant i115: unknown_int() >= 1 ==> i <= LARGE_INT - 1;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: 1 <= j <= LARGE_INT;\nloop invariant i4: 0 <= i + j <= 2 * LARGE_INT;\nloop invariant i5: k <= i / j;\nloop invariant i6: j <= i / (k + 1);\nloop invariant i7: k <= i / (i + j);\nloop invariant i8: i <= k * j;\nloop invariant i9: j <= i / k;\nloop invariant i10: 0 <= k <= 1000000;\nloop invariant i11: i + k * j < LARGE_INT;\nloop invariant i12: i <= LARGE_INT;\nloop invariant i13: k <= LARGE_INT;\nloop invariant i14: j < LARGE_INT;\nloop invariant i15: j >= 1;\nloop invariant i16: i + k * j < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i17: i + k * j < LARGE_INT ==> j < LARGE_INT;\nloop invariant i18: i + k * j < LARGE_INT ==> k * j < LARGE_INT;\nloop invariant i19: i + k * j < LARGE_INT ==> k < LARGE_INT;\nloop invariant i20: i < LARGE_INT ==> k < LARGE_INT;\nloop invariant i21: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i22: k < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i23: i < LARGE_INT ==> i >= 0;\nloop invariant i24: k < LARGE_INT ==> k >= 0;\nloop invariant i25: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i26: k < LARGE_INT ==> k < LARGE_INT;\nloop invariant i27: 0 <= i <= 1000000;\n\n\n\n\nloop invariant i32: k >= 0;\nloop invariant i33: k < 1000000;\n\n\n\n\nloop invariant i38: i >= k * (LARGE_INT - 1);\nloop invariant i39: i <= k * LARGE_INT;\n\nloop invariant i41: i1;\nloop invariant i42: i2;\nloop invariant i43: i3;\nloop invariant i44: i4;\nloop invariant i45: i5;\nloop invariant i46: i6;\nloop invariant i47: i7;\nloop invariant i48: i8;\nloop invariant i49: i <= j;\nloop invariant i50: i < LARGE_INT;\nloop invariant i51: 1 <= j && j < LARGE_INT;\n\n\nloop invariant i54: (i' < LARGE_INT ==> i' + j' < LARGE_INT);\nloop invariant i55: (i' >= LARGE_INT ==> i' + j' >= LARGE_INT);\nloop invariant i56: (i' < LARGE_INT ==> i + j < LARGE_INT);\nloop invariant i57: (i' >= LARGE_INT ==> i + j >= LARGE_INT);\nloop invariant i58: (i' < LARGE_INT ==> i' + j' = i + j);\nloop invariant i59: (i' >= LARGE_INT ==> i' + j' = i + j);\nloop invariant i60: (i' < LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i61: (i' >= LARGE_INT ==> k' + 1 = k + 1);\nloop invariant i62: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j));\nloop invariant i63: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i64: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i65: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1));\nloop invariant i66: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> i' + j' = i + j));\nloop invariant i67: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> i' + j' = i + j));\nloop invariant i68: (i' < LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i69: (i' >= LARGE_INT ==> (k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i70: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i71: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i72: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i73: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i74: (i' < LARGE_INT ==> (i + j < LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i75: (i' >= LARGE_INT ==> (i + j >= LARGE_INT ==> k' + 1 = k + 1 ==> k' + 1 = k + 1 ==> k' + 1 = k + 1));\nloop invariant i76: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i77: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i78: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i79: (i' >= LARGE_INT ==> (i' + j' >= LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i80: (i' < LARGE_INT ==> (i' + j' < LARGE_INT ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j ==> i' + j' = i + j));\nloop invariant i81: 0 <= j <= LARGE_INT;\nloop invariant i82: (i + j) >= i;\nloop invariant i83: (i + j) >= j;\nloop invariant i84: (i + j) <= (LARGE_INT + LARGE_INT);\nloop invariant i85: (k + 1) >= k;\nloop invariant i86: (k + 1) <= LARGE_INT;\nloop invariant i87: (i + j) >= (i + j);\nloop invariant i88: (i + j) <= (i + j);\nloop invariant i89: (i + j) == (i + j);\nloop invariant i90: k == i / LARGE_INT;\nloop invariant i91: (i % LARGE_INT) == 0 ==> k == i / LARGE_INT;\nloop invariant i92: (i % LARGE_INT) == 0 ==> k <= i / LARGE_INT;\nloop invariant i93: (i % LARGE_INT) == 0 ==> k >= i / LARGE_INT;\nloop invariant i94: (i % LARGE_INT) != 0 ==> k <= i / LARGE_INT;\nloop invariant i95: (i % LARGE_INT) != 0 ==> k < (i / LARGE_INT) + 1;\nloop invariant i96: (i % LARGE_INT) != 0 ==> k >= i / LARGE_INT;\nloop invariant i97: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT);\nloop invariant i98: (i % LARGE_INT) != 0 ==> k >= (i / LARGE_INT) + 1;\nloop invariant i99: (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT) + 1;\nloop invariant i100: (i % LARGE_INT) != 0 ==> k <= (i / LARGE_INT);\nloop invariant i101: unknown_int() ==> j == unknown_int();\nloop invariant i102: i == k * j;\nloop invariant i103: j == unknown_int();\nloop invariant i104: (i == k * j) ==> (i == k * j);\nloop invariant i105: 0 <= i + k * j <= LARGE_INT;\nloop invariant i106: i == (k * j + i);\nloop invariant i107: j == (unknown_int());\nloop invariant i108: i + j < LARGE_INT;\nloop invariant i109: i + j >= 0;\nloop invariant i110: i >= 0;\nloop invariant i111: unknown_int() < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i112: unknown_int() < LARGE_INT ==> k <= LARGE_INT;\nloop invariant i113: unknown_int() < LARGE_INT ==> i <= k * (LARGE_INT - 1);\nloop invariant i114: unknown_int() >= 1 ==> k <= LARGE_INT;\nloop invariant i115: unknown_int() >= 1 ==> i <= LARGE_INT - 1;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c",
            "../dataset/loop_invariants/code2inv/122.c",
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 25,
        "success_count": 6,
        "failure_count": 19,
        "success_rate": 0.24
    }
}