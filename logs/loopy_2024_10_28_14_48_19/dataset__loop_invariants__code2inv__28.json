{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/28.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 1 + (x - 1) * x / 2;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x >= x - 1;\nloop invariant x >= x;\nloop invariant x >= x + 1;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\n*/\n```",
            "```\n/*@\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant x = n - y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= x; loop invariant n <= 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x = n - (n - x);\nloop invariant x = n - (n - x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant true ==> (x != 0) ==> (n < 0);\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant true ==> (x != 0) ==> (n < 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x <= 0;\nloop invariant x >= 0;\nloop invariant x != n;\nloop invariant x == n;\nloop invariant x != 0;\nloop invariant x == 0;\nloop invariant x > n;\nloop invariant x < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x >= 0);\nloop invariant (x == n) ==> (x <= n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant x == n - (x - 1);\nloop invariant x > 0 ==> (x <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant n <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x - n == -n;\nloop invariant n - x == x;\nloop invariant n - x == -n;\nloop invariant x == n;\nloop invariant n == x;\nloop invariant n == 0;\nloop invariant x == 0;\nloop invariant 0 == x;\nloop invariant 0 == n;\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant n <= x;\nloop invariant x <= n;\nloop invariant n - x == x - n;\nloop invariant x - n == n - x;\nloop invariant n >= x;\nloop invariant x <= n;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant x <= (n - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant n <= 0 ==> n == 0; loop invariant n >= 0 ==> n <= x; loop invariant n >= 0 ==> n <= x - 1; loop invariant n >= 0 ==> x <= n; loop invariant n >= 0 ==> x - 1 <= n; loop invariant n >= 0 ==> x - 1 <= n - 1; loop invariant n >= 0 ==> n <= x - 1; loop invariant n >= 0 ==> n <= x - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 1 + (x - 1) * x / 2;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x >= x - 1;\nloop invariant x >= x;\nloop invariant x >= x + 1;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\nloop invariant x >= x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 1 + (x - 1) * x / 2 is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= x - 1 is partially proven to be inductive.\nloop invariant x >= x is partially proven to be inductive.\nloop invariant x >= x + 1 is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\nloop invariant i5: x >= x - 1;\nloop invariant i6: x >= x;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant x = n - y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= x; loop invariant n <= 0 ==> x == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n <= x; loop invariant n <= 0 ==> x == 0 is neither established nor preserved.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x = n - (n - x);\nloop invariant x = n - (n - x);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant true ==> (x != 0) ==> (n < 0);\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant true ==> (x != 0) ==> (n < 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable true. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x <= 0;\nloop invariant x >= 0;\nloop invariant x != n;\nloop invariant x == n;\nloop invariant x != 0;\nloop invariant x == 0;\nloop invariant x > n;\nloop invariant x < n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant x >= n is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x <= 0 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x != n is preserved but not established.\nloop invariant x == n is partially proven to be inductive.\nloop invariant x != 0 is partially proven to be inductive.\nloop invariant x == 0 is partially proven to be inductive.\nloop invariant x > n is partially proven to be inductive.\nloop invariant x < n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\nloop invariant x >= n;\nloop invariant x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= n is established but not preserved.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x >= 0);\nloop invariant (x == n) ==> (x <= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x == n) ==> (x >= 0) is partially proven to be inductive.\nloop invariant (x == n) ==> (x <= n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: (x == n) ==> (x <= n);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant x == n - (x - 1);\nloop invariant x > 0 ==> (x <= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is neither established nor preserved.\nloop invariant x == n - (x - 1) is neither established nor preserved.\nloop invariant x > 0 ==> (x <= n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x > 0 ==> (x <= n);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant n <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x - n == -n;\nloop invariant n - x == x;\nloop invariant n - x == -n;\nloop invariant x == n;\nloop invariant n == x;\nloop invariant n == 0;\nloop invariant x == 0;\nloop invariant 0 == x;\nloop invariant 0 == n;\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant n <= x;\nloop invariant x <= n;\nloop invariant n - x == x - n;\nloop invariant x - n == n - x;\nloop invariant n >= x;\nloop invariant x <= n;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\nloop invariant n - x == -n - x;\nloop invariant x - n == n - x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant n <= x is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x - n == -n is preserved but not established.\nloop invariant n - x == x is partially proven to be inductive.\nloop invariant n - x == -n is partially proven to be inductive.\nloop invariant x == n is partially proven to be inductive.\nloop invariant n == x is partially proven to be inductive.\nloop invariant n == 0 is partially proven to be inductive.\nloop invariant x == 0 is partially proven to be inductive.\nloop invariant 0 == x is partially proven to be inductive.\nloop invariant 0 == n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n - x == x - n is partially proven to be inductive.\nloop invariant x - n == n - x is partially proven to be inductive.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant n - x == -n - x is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\nloop invariant i4: x <= n;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: n >= x;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant x <= (n - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant x <= (n - 1) is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant n <= 0 ==> n == 0; loop invariant n >= 0 ==> n <= x; loop invariant n >= 0 ==> n <= x - 1; loop invariant n >= 0 ==> x <= n; loop invariant n >= 0 ==> x - 1 <= n; loop invariant n >= 0 ==> x - 1 <= n - 1; loop invariant n >= 0 ==> n <= x - 1; loop invariant n >= 0 ==> n <= x - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n; loop invariant n >= 0; loop invariant n <= 0 ==> n == 0; loop invariant n >= 0 ==> n <= x; loop invariant n >= 0 ==> n <= x - 1; loop invariant n >= 0 ==> x <= n; loop invariant n >= 0 ==> x - 1 <= n; loop invariant n >= 0 ==> x - 1 <= n - 1; loop invariant n >= 0 ==> n <= x - 1; loop invariant n >= 0 ==> n <= x - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x >= 1 + (x - 1) * x / 2;\nloop invariant i3: x <= n;\nloop invariant i4: x >= 0;\nloop invariant i5: x >= x - 1;\nloop invariant i6: x >= x;\nloop invariant i7: x >= x + 1;\nloop invariant i8: n >= 0;\nloop invariant i9: x = n - y;\nloop invariant i10: 1 <= n <= x; loop invariant n <= 0 ==> x == 0;\nloop invariant i11: x = n - (n - x);\nloop invariant i12: true ==> (x != 0) ==> (n < 0);\nloop invariant i13: 0 <= n;\nloop invariant i14: x >= n;\nloop invariant i15: x <= 0;\nloop invariant i16: x != n;\nloop invariant i17: x == n;\nloop invariant i18: x != 0;\nloop invariant i19: x == 0;\nloop invariant i20: x > n;\nloop invariant i21: x < n;\nloop invariant i22: (x == n) ==> (x >= 0);\nloop invariant i23: (x == n) ==> (x <= n);\nloop invariant i24: 1 <= x <= n;\nloop invariant i25: x == n - (x - 1);\nloop invariant i26: x > 0 ==> (x <= n);\nloop invariant i27: n <= x;\nloop invariant i28: x - n == -n;\nloop invariant i29: n - x == x;\nloop invariant i30: n - x == -n;\nloop invariant i31: n == x;\nloop invariant i32: n == 0;\nloop invariant i33: 0 == x;\nloop invariant i34: 0 == n;\nloop invariant i35: n - x == x - n;\nloop invariant i36: x - n == n - x;\nloop invariant i37: n >= x;\nloop invariant i38: n - x == -n - x;\nloop invariant i39: x <= (n - 1);\nloop invariant i40: 0 <= x <= n; loop invariant n >= 0; loop invariant n <= 0 ==> n == 0; loop invariant n >= 0 ==> n <= x; loop invariant n >= 0 ==> n <= x - 1; loop invariant n >= 0 ==> x <= n; loop invariant n >= 0 ==> x - 1 <= n; loop invariant n >= 0 ==> x - 1 <= n - 1; loop invariant n >= 0 ==> n <= x - 1; loop invariant n >= 0 ==> n <= x - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1; loop invariant n >= 0 ==> n <= x - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 25,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\nloop invariant i5: x >= x - 1;\nloop invariant i6: x >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i23: (x == n) ==> (x <= n);\n\n\nloop invariant i26: x > 0 ==> (x <= n);\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: n >= x;\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c"
        ],
        "skipped": [],
        "total": 18,
        "success_count": 5,
        "failure_count": 13,
        "success_rate": 0.2777777777777778
    }
}