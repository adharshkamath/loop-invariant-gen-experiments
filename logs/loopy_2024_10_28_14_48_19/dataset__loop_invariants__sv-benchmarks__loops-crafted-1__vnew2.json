{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i%3 == 0 && i%(SIZE+2) == 0;\nloop invariant j%3 == 0 && j%(SIZE+2) == 0;\nloop invariant k%3 == 0 && k%(SIZE+2) == 0;\nloop invariant i == j && j == k;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i%(SIZE+2) == J%(SIZE+2);\nloop invariant k%(SIZE+2) == J%(SIZE+2);\nloop invariant (n > 0) ==> (n <= SIZE);\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant j % (SIZE + 2) == 0;\nloop invariant k % (SIZE + 2) == 0;\nloop invariant i == j + 3 * (i / 3);\nloop invariant j == i + 3 * (j / 3);\nloop invariant k == i + 3 * (k / 3);\nloop invariant i >= j;\nloop invariant j >= k;\nloop invariant i >= k;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant SIZE >= 0;\nloop invariant unknown_uint() >= 0;\nloop invariant SIZE >= unknown_uint();\nloop invariant SIZE >= 0;\nloop invariant unknown_uint() >= 0;\nloop invariant SIZE >= 0;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant SIZE >= i;\nloop invariant SIZE >= j;\nloop invariant SIZE >= k;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i == j;\nloop invariant i == k;\nloop invariant n > 0 ==> (i == j && j == k && (i%(SIZE+2)) == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant (i % (SIZE + 2)) <= (SIZE + 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 1 <= j <= n;\nloop invariant 1 <= k <= n;\nloop invariant i >= j;\nloop invariant j >= k;\nloop invariant i >= k;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant k == i;\nloop invariant i == i % (SIZE + 2);\nloop invariant j == j % (SIZE + 2);\nloop invariant k == k % (SIZE + 2);\nloop invariant i == (i + 3 * (n / 3));\nloop invariant j == (j + 3 * (n / 3));\nloop invariant k == (k + 3 * (n / 3));\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2);\nloop invariant j == (j + 3 * (n / 3)) % (SIZE + 2);\nloop invariant k == (k + 3 * (n / 3)) % (SIZE + 2);\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2);\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i;\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i;\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2);\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) && i >= j && j >= k && k >= i;\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= j <= k;\nloop invariant ((j - i) % 3 == 0);\nloop invariant (i % 3 == 0);\nloop invariant (j % 3 == 0);\nloop invariant (k % 3 == 0);\nloop invariant (i + j + k) % 3 == 0;\nloop invariant (i == j) && (j == k);\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant j <= n;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant n <= SIZE;\nloop invariant n <= SIZE+2;\nloop invariant (SIZE+2) % 3 == 0;\nloop invariant (n % 3 == 0) ==> ((i % 3 == 0) && (j % 3 == 0) && (k % 3 == 0) && (i == j) && (j == k) && (i <= n) && (j <= n) && (k <= n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j == k;\nloop invariant i >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i <= j;\nloop invariant j <= k;\nloop invariant k <= (SIZE+2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant (i + j + k) % 3 == 0;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\n*/\n```",
            "```\n/*@\nloop invariant i + 3j <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= i;\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == 0;\nloop invariant j == k;\nloop invariant j == (i - 3) / 3 * 3;\nloop invariant n >= 0;\nloop invariant SIZE >= 20000001;\nloop invariant n <= SIZE;\nloop invariant i - j <= 3;\nloop invariant i - k <= 3;\nloop invariant j == k;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant j % (SIZE + 2) == 0;\nloop invariant k % (SIZE + 2) == 0;\nloop invariant i == j && j == k && (i%(SIZE+2));\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i < n;\nloop invariant j < n;\nloop invariant k < n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i == k;\nloop invariant i == (3 * n);\nloop invariant (i - 3 * n) % 3 == 0;\nloop invariant (i - 3 * n) / 3 == n;\nloop invariant (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n;\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 == n;\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 >= 0;\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 >= 0;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3 ==> (i - 3 * n) / 3 == n;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n);\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j <= k <= n;\nloop invariant n <= SIZE;\nloop invariant i%3 == 0;\nloop invariant j%3 == 0;\nloop invariant k%3 == 0;\nloop invariant (n > 0) ==> (i == j && j == k && i == (n*3));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n * 3;\nloop invariant 0 <= j <= n * 3;\nloop invariant 0 <= k <= n * 3;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0 ==> n > 0;\nloop invariant i % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i%3 == 0 && i%(SIZE+2) == 0;\nloop invariant j%3 == 0 && j%(SIZE+2) == 0;\nloop invariant k%3 == 0 && k%(SIZE+2) == 0;\nloop invariant i == j && j == k;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\nloop invariant (i%(SIZE+2)) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i%3 == 0 && i%(SIZE+2) == 0 is established but not preserved.\nloop invariant j%3 == 0 && j%(SIZE+2) == 0 is partially proven to be inductive.\nloop invariant k%3 == 0 && k%(SIZE+2) == 0 is partially proven to be inductive.\nloop invariant i == j && j == k is partially proven to be inductive.\nloop invariant (i%(SIZE+2)) == 0 is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: i == j && j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i%(SIZE+2) == J%(SIZE+2);\nloop invariant k%(SIZE+2) == J%(SIZE+2);\nloop invariant (n > 0) ==> (n <= SIZE);\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i <= j;\nloop invariant i <= k;\nloop invariant j <= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unbound logic variable J. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i == j;\nloop invariant i5: j == k;\n\n\nloop invariant i8: (n > 0) ==> (n <= SIZE);\nloop invariant i9: i <= k;\nloop invariant i10: j <= k;\nloop invariant i11: i <= j;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant j % (SIZE + 2) == 0;\nloop invariant k % (SIZE + 2) == 0;\nloop invariant i == j + 3 * (i / 3);\nloop invariant j == i + 3 * (j / 3);\nloop invariant k == i + 3 * (k / 3);\nloop invariant i >= j;\nloop invariant j >= k;\nloop invariant i >= k;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant SIZE >= 0;\nloop invariant unknown_uint() >= 0;\nloop invariant SIZE >= unknown_uint();\nloop invariant SIZE >= 0;\nloop invariant unknown_uint() >= 0;\nloop invariant SIZE >= 0;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant SIZE >= i;\nloop invariant SIZE >= j;\nloop invariant SIZE >= k;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\nloop invariant SIZE <= j + 3;\nloop invariant SIZE <= k + 3;\nloop invariant SIZE >= n;\nloop invariant SIZE >= n + 3;\nloop invariant SIZE >= i + 3;\nloop invariant SIZE >= j + 3;\nloop invariant SIZE >= k + 3;\nloop invariant SIZE <= n;\nloop invariant SIZE <= n + 3;\nloop invariant SIZE <= i + 3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 39: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i == j;\nloop invariant i5: j == k;\n\n\n\n\n\n\nloop invariant i12: i >= j;\nloop invariant i13: j >= k;\nloop invariant i14: i >= k;\n\n\n\nloop invariant i18: i >= 0;\nloop invariant i19: j >= 0;\nloop invariant i20: k >= 0;\nloop invariant i21: n >= 0;\nloop invariant i22: SIZE >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i39: SIZE >= n;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i == j;\nloop invariant i == k;\nloop invariant n > 0 ==> (i == j && j == k && (i%(SIZE+2)) == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant i == j is partially proven to be inductive.\nloop invariant i == k is partially proven to be inductive.\nloop invariant n > 0 ==> (i == j && j == k && (i%(SIZE+2)) == 0) is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i == j;\nloop invariant i3: i == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant (i % (SIZE + 2)) <= (SIZE + 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant (i % (SIZE + 2)) <= (SIZE + 2) is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j % 3 == 0;\nloop invariant i4: k % 3 == 0;\nloop invariant i5: i == j;\nloop invariant i6: j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 1 <= j <= n;\nloop invariant 1 <= k <= n;\nloop invariant i >= j;\nloop invariant j >= k;\nloop invariant i >= k;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant k == i;\nloop invariant i == i % (SIZE + 2);\nloop invariant j == j % (SIZE + 2);\nloop invariant k == k % (SIZE + 2);\nloop invariant i == (i + 3 * (n / 3));\nloop invariant j == (j + 3 * (n / 3));\nloop invariant k == (k + 3 * (n / 3));\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2);\nloop invariant j == (j + 3 * (n / 3)) % (SIZE + 2);\nloop invariant k == (k + 3 * (n / 3)) % (SIZE + 2);\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2);\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i;\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i;\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2);\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) && i >= j && j >= k && k >= i;\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 1 <= j <= n is partially proven to be inductive.\nloop invariant 1 <= k <= n is partially proven to be inductive.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant j >= k is partially proven to be inductive.\nloop invariant i >= k is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant k == i is partially proven to be inductive.\nloop invariant i == i % (SIZE + 2) is partially proven to be inductive.\nloop invariant j == j % (SIZE + 2) is partially proven to be inductive.\nloop invariant k == k % (SIZE + 2) is partially proven to be inductive.\nloop invariant i == (i + 3 * (n / 3)) is partially proven to be inductive.\nloop invariant j == (j + 3 * (n / 3)) is partially proven to be inductive.\nloop invariant k == (k + 3 * (n / 3)) is partially proven to be inductive.\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) is partially proven to be inductive.\nloop invariant j == (j + 3 * (n / 3)) % (SIZE + 2) is partially proven to be inductive.\nloop invariant k == (k + 3 * (n / 3)) % (SIZE + 2) is partially proven to be inductive.\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) is partially proven to be inductive.\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i is partially proven to be inductive.\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i is partially proven to be inductive.\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) is partially proven to be inductive.\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) && i >= j && j >= k && k >= i is partially proven to be inductive.\nloop invariant i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i >= j;\nloop invariant i5: j >= k;\nloop invariant i6: i >= k;\nloop invariant i7: i == j;\nloop invariant i8: j == k;\nloop invariant i9: k == i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= j <= k;\nloop invariant ((j - i) % 3 == 0);\nloop invariant (i % 3 == 0);\nloop invariant (j % 3 == 0);\nloop invariant (k % 3 == 0);\nloop invariant (i + j + k) % 3 == 0;\nloop invariant (i == j) && (j == k);\nloop invariant i <= n;\nloop invariant k <= n;\nloop invariant j <= n;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant n <= SIZE;\nloop invariant n <= SIZE+2;\nloop invariant (SIZE+2) % 3 == 0;\nloop invariant (n % 3 == 0) ==> ((i % 3 == 0) && (j % 3 == 0) && (k % 3 == 0) && (i == j) && (j == k) && (i <= n) && (j <= n) && (k <= n));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= j <= k is preserved but not established.\nloop invariant ((j - i) % 3 == 0) is partially proven to be inductive.\nloop invariant (i % 3 == 0) is partially proven to be inductive.\nloop invariant (j % 3 == 0) is partially proven to be inductive.\nloop invariant (k % 3 == 0) is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 is partially proven to be inductive.\nloop invariant (i == j) && (j == k) is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant j <= n is partially proven to be inductive.\nloop invariant i <= SIZE is partially proven to be inductive.\nloop invariant j <= SIZE is partially proven to be inductive.\nloop invariant k <= SIZE is partially proven to be inductive.\nloop invariant n <= SIZE is partially proven to be inductive.\nloop invariant n <= SIZE+2 is partially proven to be inductive.\nloop invariant (SIZE+2) % 3 == 0 is partially proven to be inductive.\nloop invariant (n % 3 == 0) ==> ((i % 3 == 0) && (j % 3 == 0) && (k % 3 == 0) && (i == j) && (j == k) && (i <= n) && (j <= n) && (k <= n)) is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: ((j - i) % 3 == 0);\nloop invariant i3: (i % 3 == 0);\nloop invariant i4: (j % 3 == 0);\nloop invariant i5: (k % 3 == 0);\nloop invariant i6: (i + j + k) % 3 == 0;\nloop invariant i7: (i == j) && (j == k);\n\n\n\n\n\n\nloop invariant i14: n <= SIZE;\nloop invariant i15: n <= SIZE+2;\n\nloop invariant i17: (n % 3 == 0) ==> ((i % 3 == 0) && (j % 3 == 0) && (k % 3 == 0) && (i == j) && (j == k) && (i <= n) && (j <= n) && (k <= n));\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j == k;\nloop invariant i >= j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= j <= n is established but not preserved.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant i >= j is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i <= j;\nloop invariant j <= k;\nloop invariant k <= (SIZE+2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= j <= n is established but not preserved.\nloop invariant 0 <= k <= n is established but not preserved.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j <= k is partially proven to be inductive.\nloop invariant k <= (SIZE+2) is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant (i + j + k) % 3 == 0;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nloop invariant (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i == j;\nloop invariant i5: j == k;\nloop invariant i6: (i + j + k) % 3 == 0;\nloop invariant i7: (i + j + k) % 3 == 0 ==> i == j && j == k;\nloop invariant i8: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k;\nloop invariant i9: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i10: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i11: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i12: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i13: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i14: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i15: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i16: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i + 3j <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token 'j'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant 0 <= k <= i;\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == 0;\nloop invariant j == k;\nloop invariant j == (i - 3) / 3 * 3;\nloop invariant n >= 0;\nloop invariant SIZE >= 20000001;\nloop invariant n <= SIZE;\nloop invariant i - j <= 3;\nloop invariant i - k <= 3;\nloop invariant j == k;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant j % (SIZE + 2) == 0;\nloop invariant k % (SIZE + 2) == 0;\nloop invariant i == j && j == k && (i%(SIZE+2));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= i is partially proven to be inductive.\nloop invariant 0 <= k <= i is partially proven to be inductive.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant j == (i - 3) / 3 * 3 is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant SIZE >= 20000001 is partially proven to be inductive.\nloop invariant n <= SIZE is partially proven to be inductive.\nloop invariant i - j <= 3 is partially proven to be inductive.\nloop invariant i - k <= 3 is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 is partially proven to be inductive.\nloop invariant j % (SIZE + 2) == 0 is partially proven to be inductive.\nloop invariant k % (SIZE + 2) == 0 is partially proven to be inductive.\nloop invariant i == j && j == k && (i%(SIZE+2)) is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= j <= i;\nloop invariant i2: 0 <= k <= i;\n\nloop invariant i4: i % 3 == 0;\nloop invariant i5: j == k;\n\nloop invariant i7: n >= 0;\nloop invariant i8: SIZE >= 20000001;\nloop invariant i9: n <= SIZE;\nloop invariant i10: i - j <= 3;\nloop invariant i11: i - k <= 3;\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i < n;\nloop invariant j < n;\nloop invariant k < n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i == k;\nloop invariant i == (3 * n);\nloop invariant (i - 3 * n) % 3 == 0;\nloop invariant (i - 3 * n) / 3 == n;\nloop invariant (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n;\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 == n;\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 >= 0;\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 >= 0;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3 ==> (i - 3 * n) / 3 == n;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n);\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i < n is preserved but not established.\nloop invariant j < n is partially proven to be inductive.\nloop invariant k < n is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant i == k is partially proven to be inductive.\nloop invariant i == (3 * n) is preserved but not established.\nloop invariant (i - 3 * n) % 3 == 0 is partially proven to be inductive.\nloop invariant (i - 3 * n) / 3 == n is partially proven to be inductive.\nloop invariant (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 == n is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 >= 0 is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3 is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 >= 0 is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3 is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3 ==> (i - 3 * n) / 3 == n is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j is partially proven to be inductive.\nloop invariant i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\n\n\n\nloop invariant i7: i % 3 == 0;\nloop invariant i8: j % 3 == 0;\nloop invariant i9: k % 3 == 0;\nloop invariant i10: i == j;\nloop invariant i11: j == k;\nloop invariant i12: i == k;\n\nloop invariant i14: (i - 3 * n) % 3 == 0;\n\n\n\n\nloop invariant i19: i % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\n\nloop invariant i21: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\n\nloop invariant i23: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i24: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i25: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\nloop invariant i26: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n);\nloop invariant i27: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n;\nloop invariant i28: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i29: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i30: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j <= k <= n;\nloop invariant n <= SIZE;\nloop invariant i%3 == 0;\nloop invariant j%3 == 0;\nloop invariant k%3 == 0;\nloop invariant (n > 0) ==> (i == j && j == k && i == (n*3));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= j <= k <= n is partially proven to be inductive.\nloop invariant n <= SIZE is partially proven to be inductive.\nloop invariant i%3 == 0 is partially proven to be inductive.\nloop invariant j%3 == 0 is partially proven to be inductive.\nloop invariant k%3 == 0 is partially proven to be inductive.\nloop invariant (n > 0) ==> (i == j && j == k && i == (n*3)) is preserved but not established.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: n <= SIZE;\nloop invariant i3: i%3 == 0;\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n * 3;\nloop invariant 0 <= j <= n * 3;\nloop invariant 0 <= k <= n * 3;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0 ==> n > 0;\nloop invariant i % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n * 3 is partially proven to be inductive.\nloop invariant 0 <= j <= n * 3 is partially proven to be inductive.\nloop invariant 0 <= k <= n * 3 is partially proven to be inductive.\nloop invariant i == j && j == k is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 ==> n > 0 is preserved but not established.\nloop invariant i % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0 is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0 is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n * 3;\nloop invariant i2: 0 <= j <= n * 3;\nloop invariant i3: 0 <= k <= n * 3;\nloop invariant i4: i == j && j == k;\n\nloop invariant i6: i % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i7: i % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 50: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: 0 <= k <= n;\nloop invariant i4: i%3 == 0 && i%(SIZE+2) == 0;\nloop invariant i5: j%3 == 0 && j%(SIZE+2) == 0;\nloop invariant i6: k%3 == 0 && k%(SIZE+2) == 0;\nloop invariant i7: i == j && j == k;\nloop invariant i8: (i%(SIZE+2)) == 0;\nloop invariant i9: i == j;\nloop invariant i10: j == k;\nloop invariant i11: i%(SIZE+2) == J%(SIZE+2);\nloop invariant i12: k%(SIZE+2) == J%(SIZE+2);\nloop invariant i13: (n > 0) ==> (n <= SIZE);\nloop invariant i14: i <= k;\nloop invariant i15: j <= k;\nloop invariant i16: i <= j;\nloop invariant i17: i % (SIZE + 2) == 0;\nloop invariant i18: j % (SIZE + 2) == 0;\nloop invariant i19: k % (SIZE + 2) == 0;\nloop invariant i20: i == j + 3 * (i / 3);\nloop invariant i21: j == i + 3 * (j / 3);\nloop invariant i22: k == i + 3 * (k / 3);\nloop invariant i23: i >= j;\nloop invariant i24: j >= k;\nloop invariant i25: i >= k;\nloop invariant i26: i <= n;\nloop invariant i27: j <= n;\nloop invariant i28: k <= n;\nloop invariant i29: i >= 0;\nloop invariant i30: j >= 0;\nloop invariant i31: k >= 0;\nloop invariant i32: n >= 0;\nloop invariant i33: SIZE >= 0;\nloop invariant i34: unknown_uint() >= 0;\nloop invariant i35: SIZE >= unknown_uint();\nloop invariant i36: i <= SIZE;\nloop invariant i37: j <= SIZE;\nloop invariant i38: k <= SIZE;\nloop invariant i39: SIZE >= i;\nloop invariant i40: SIZE >= j;\nloop invariant i41: SIZE >= k;\nloop invariant i42: SIZE >= i + 3;\nloop invariant i43: SIZE >= j + 3;\nloop invariant i44: SIZE >= k + 3;\nloop invariant i45: SIZE <= n;\nloop invariant i46: SIZE <= n + 3;\nloop invariant i47: SIZE <= i + 3;\nloop invariant i48: SIZE <= j + 3;\nloop invariant i49: SIZE <= k + 3;\nloop invariant i50: SIZE >= n;\nloop invariant i51: SIZE >= n + 3;\nloop invariant i52: i == k;\nloop invariant i53: n > 0 ==> (i == j && j == k && (i%(SIZE+2)) == 0);\nloop invariant i54: i % 3 == 0;\nloop invariant i55: j % 3 == 0;\nloop invariant i56: k % 3 == 0;\nloop invariant i57: (i % (SIZE + 2)) <= (SIZE + 2);\nloop invariant i58: 1 <= i <= n;\nloop invariant i59: 1 <= j <= n;\nloop invariant i60: 1 <= k <= n;\nloop invariant i61: k == i;\nloop invariant i62: i == i % (SIZE + 2);\nloop invariant i63: j == j % (SIZE + 2);\nloop invariant i64: k == k % (SIZE + 2);\nloop invariant i65: i == (i + 3 * (n / 3));\nloop invariant i66: j == (j + 3 * (n / 3));\nloop invariant i67: k == (k + 3 * (n / 3));\nloop invariant i68: i == (i + 3 * (n / 3)) % (SIZE + 2);\nloop invariant i69: j == (j + 3 * (n / 3)) % (SIZE + 2);\nloop invariant i70: k == (k + 3 * (n / 3)) % (SIZE + 2);\nloop invariant i71: i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2);\nloop invariant i72: i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i;\nloop invariant i73: i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i;\nloop invariant i74: i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2);\nloop invariant i75: i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) && i >= j && j >= k && k >= i;\nloop invariant i76: i == (i + 3 * (n / 3)) % (SIZE + 2) && j == (j + 3 * (n / 3)) % (SIZE + 2) && k == (k + 3 * (n / 3)) % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i && i == i % (SIZE + 2) && j == j % (SIZE + 2) && k == k % (SIZE + 2) && i >= j && j >= k && k >= i && i == j && j == k && k == i;\nloop invariant i77: 1 <= i <= j <= k;\nloop invariant i78: ((j - i) % 3 == 0);\nloop invariant i79: (i % 3 == 0);\nloop invariant i80: (j % 3 == 0);\nloop invariant i81: (k % 3 == 0);\nloop invariant i82: (i + j + k) % 3 == 0;\nloop invariant i83: (i == j) && (j == k);\nloop invariant i84: n <= SIZE;\nloop invariant i85: n <= SIZE+2;\nloop invariant i86: (SIZE+2) % 3 == 0;\nloop invariant i87: (n % 3 == 0) ==> ((i % 3 == 0) && (j % 3 == 0) && (k % 3 == 0) && (i == j) && (j == k) && (i <= n) && (j <= n) && (k <= n));\nloop invariant i88: k <= (SIZE+2);\nloop invariant i89: (i + j + k) % 3 == 0 ==> i == j && j == k;\nloop invariant i90: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k;\nloop invariant i91: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i92: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i93: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i94: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i95: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i96: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i97: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i98: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i99: i + 3j <= n;\nloop invariant i100: 0 <= j <= i;\nloop invariant i101: 0 <= k <= i;\nloop invariant i102: j == (i - 3) / 3 * 3;\nloop invariant i103: SIZE >= 20000001;\nloop invariant i104: i - j <= 3;\nloop invariant i105: i - k <= 3;\nloop invariant i106: i == j && j == k && (i%(SIZE+2));\nloop invariant i107: i < n;\nloop invariant i108: j < n;\nloop invariant i109: k < n;\nloop invariant i110: i == (3 * n);\nloop invariant i111: (i - 3 * n) % 3 == 0;\nloop invariant i112: (i - 3 * n) / 3 == n;\nloop invariant i113: (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n;\nloop invariant i114: i % 3 == 0 ==> (i - 3 * n) / 3 == n;\nloop invariant i115: i % 3 == 0 ==> (i - 3 * n) / 3 >= 0;\nloop invariant i116: i % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\nloop invariant i117: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 >= 0;\nloop invariant i118: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\nloop invariant i119: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3 ==> (i - 3 * n) / 3 == n;\nloop invariant i120: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i121: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i122: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\nloop invariant i123: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n);\nloop invariant i124: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n;\nloop invariant i125: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i126: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i127: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\nloop invariant i128: 0 <= i <= j <= k <= n;\nloop invariant i129: i%3 == 0;\nloop invariant i130: j%3 == 0;\nloop invariant i131: k%3 == 0;\nloop invariant i132: (n > 0) ==> (i == j && j == k && i == (n*3));\nloop invariant i133: 0 <= i <= n * 3;\nloop invariant i134: 0 <= j <= n * 3;\nloop invariant i135: 0 <= k <= n * 3;\nloop invariant i136: i % (SIZE + 2) == 0 ==> n > 0;\nloop invariant i137: i % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i138: i % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 48,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: i == j && j == k;\n\nloop invariant i9: i == j;\nloop invariant i10: j == k;\n\n\nloop invariant i13: (n > 0) ==> (n <= SIZE);\nloop invariant i14: i <= k;\nloop invariant i15: j <= k;\nloop invariant i16: i <= j;\n\n\n\n\n\n\nloop invariant i23: i >= j;\nloop invariant i24: j >= k;\nloop invariant i25: i >= k;\n\n\n\nloop invariant i29: i >= 0;\nloop invariant i30: j >= 0;\nloop invariant i31: k >= 0;\nloop invariant i32: n >= 0;\nloop invariant i33: SIZE >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i50: SIZE >= n;\n\nloop invariant i52: i == k;\n\nloop invariant i54: i % 3 == 0;\nloop invariant i55: j % 3 == 0;\nloop invariant i56: k % 3 == 0;\nloop invariant i57: (i % (SIZE + 2)) <= (SIZE + 2);\n\n\n\nloop invariant i61: k == i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i78: ((j - i) % 3 == 0);\nloop invariant i79: (i % 3 == 0);\nloop invariant i80: (j % 3 == 0);\nloop invariant i81: (k % 3 == 0);\nloop invariant i82: (i + j + k) % 3 == 0;\nloop invariant i83: (i == j) && (j == k);\nloop invariant i84: n <= SIZE;\nloop invariant i85: n <= SIZE+2;\n\nloop invariant i87: (n % 3 == 0) ==> ((i % 3 == 0) && (j % 3 == 0) && (k % 3 == 0) && (i == j) && (j == k) && (i <= n) && (j <= n) && (k <= n));\nloop invariant i88: k <= (SIZE+2);\nloop invariant i89: (i + j + k) % 3 == 0 ==> i == j && j == k;\nloop invariant i90: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k;\nloop invariant i91: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i92: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i93: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i94: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i95: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i96: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i97: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\nloop invariant i98: (i + j + k) % 3 == 0 ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k ==> i == j && j == k;\n\nloop invariant i100: 0 <= j <= i;\nloop invariant i101: 0 <= k <= i;\n\nloop invariant i103: SIZE >= 20000001;\nloop invariant i104: i - j <= 3;\nloop invariant i105: i - k <= 3;\n\n\n\n\n\nloop invariant i111: (i - 3 * n) % 3 == 0;\n\n\n\n\nloop invariant i116: i % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\n\nloop invariant i118: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 <= i / 3;\n\nloop invariant i120: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i121: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i122: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\nloop invariant i123: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n);\nloop invariant i124: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n;\nloop invariant i125: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n);\nloop invariant i126: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j;\nloop invariant i127: i % 3 == 0 ==> (i - 3 * n) % 3 == 0 ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k ==> i == (3 * n) ==> (i - 3 * n) / 3 == n ==> i == (3 * n) ==> i == j ==> i == k;\n\nloop invariant i129: i%3 == 0;\nloop invariant i130: j%3 == 0;\nloop invariant i131: k%3 == 0;\n\nloop invariant i133: 0 <= i <= n * 3;\nloop invariant i134: 0 <= j <= n * 3;\nloop invariant i135: 0 <= k <= n * 3;\n\nloop invariant i137: i % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i138: i % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c"
        ],
        "skipped": [],
        "total": 3,
        "success_count": 1,
        "failure_count": 2,
        "success_rate": 0.3333333333333333
    }
}