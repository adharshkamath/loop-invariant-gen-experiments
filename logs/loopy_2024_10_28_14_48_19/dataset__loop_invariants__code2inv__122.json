{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/122.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn <= size;\nloop invariant i <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i);\nloop invariant sn == size - (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant i > 0;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i <= size;\nloop invariant sn + 1 <= size;\nloop invariant sn + i <= size + 1;\nloop invariant sn + i + 1 <= size + 2;\nloop invariant sn + i + 2 <= size + 3;\nloop invariant sn + i + 3 <= size + 4;\nloop invariant sn + i + 4 <= size + 5;\nloop invariant sn + i + 5 <= size + 6;\nloop invariant sn + i + 6 <= size + 7;\nloop invariant sn + i + 7 <= size + 8;\nloop invariant sn + i + 8 <= size + 9;\nloop invariant sn + i + 9 <= size + 10;\nloop invariant sn + i + 10 <= size + 11;\nloop invariant sn + i + 11 <= size + 12;\nloop invariant sn + i + 12 <= size + 13;\nloop invariant sn + i + 13 <= size + 14;\nloop invariant sn + i + 14 <= size + 15;\nloop invariant sn + i + 15 <= size + 16;\nloop invariant sn + i + 16 <= size + 17;\nloop invariant sn + i + 17 <= size + 18;\nloop invariant sn + i + 18 <= size + 19;\nloop invariant sn + i + 19 <= size + 20;\nloop invariant sn + i + 20 <= size + 21;\nloop invariant sn + i + 21 <= size + 22;\nloop invariant sn + i + 22 <= size + 23;\nloop invariant sn + i + 23 <= size + 24;\nloop invariant sn + i + 24 <= size + 25;\nloop invariant sn + i + 25 <= size + 26;\nloop invariant sn + i + 26 <= size + 27;\nloop invariant sn + i + 27 <= size + 28;\nloop invariant sn + i + 28 <= size + 29;\nloop invariant sn + i + 29 <= size + 30;\nloop invariant sn + i + 30 <= size + 31;\nloop invariant sn + i + 31 <= size + 32;\nloop invariant sn + i + 32 <= size + 33;\nloop invariant sn + i + 33 <= size + 34;\nloop invariant sn + i + 34 <= size + 35;\nloop invariant sn + i + 35 <= size + 36;\nloop invariant sn + i + 36 <= size + 37;\nloop invariant sn + i + 37 <= size + 38;\nloop invariant sn + i + 38 <= size + 39;\nloop invariant sn + i + 39 <= size + 40;\nloop invariant sn + i + 40 <= size + 41;\nloop invariant sn + i + 41 <= size + 42;\nloop invariant sn + i + 42 <= size + 43;\nloop invariant sn + i + 43 <= size + 44;\nloop invariant sn + i + 44 <= size + 45;\nloop invariant sn + i + 45 <= size + 46;\nloop invariant sn + i + 46 <= size + 47;\nloop invariant sn + i + 47 <= size + 48;\nloop invariant sn + i + 48 <= size + 49;\nloop invariant sn + i + 49 <= size + 50;\nloop invariant sn + i + 50 <= size + 51;\nloop invariant sn + i + 51 <= size + 52;\nloop invariant sn + i + 52 <= size + 53;\nloop invariant sn + i + 53 <= size + 54;\nloop invariant sn + i + 54 <= size + 55;\nloop invariant sn + i + 55 <= size + 56;\nloop invariant sn + i + 56 <= size + 57;\nloop invariant sn + i + 57 <= size + 58;\nloop invariant sn + i + 58 <= size + 59;\nloop invariant sn + i + 59 <= size + 60;\nloop invariant sn + i + 60 <= size + 61;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn + 1 == i;\nloop invariant sn < i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= (size - 1) * (size / 2);\nloop invariant (sn == size) ==> (i == size + 1);\nloop invariant (sn == size - 1) ==> (i == size);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i1 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true);\nloop invariant i2 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true);\nloop invariant i3 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true);\nloop invariant i4 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true);\nloop invariant i5 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true);\nloop invariant i6 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true);\nloop invariant i7 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true);\nloop invariant i8 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true);\nloop invariant i9 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true);\nloop invariant i10 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true);\nloop invariant i11 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn == i - 1;\nloop invariant if (size == 0) then sn == size else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant i <= sn + 1;\nloop invariant sn <= i - 1;\nloop invariant (i == size + 1) ==> (sn == size);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn < size ==> sn == i - 1;\nloop invariant sn == size ==> sn == size;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == size;\nloop invariant i == size + 1;\nloop invariant sn == i - 1;\nloop invariant sn == (i - 1);\nloop invariant sn == (i - 1) * (i - 2) / 2;\nloop invariant sn == (i - 1) * (i - 2) / 2 + (i - 1);\nloop invariant sn == (i * (i - 1) / 2);\nloop invariant sn == (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == (i * (i - 1) / 2) + (i * (i - 1) / 2);\nloop invariant sn == i * (i - 1);\nloop invariant sn == i * (i - 1) / 2;\nloop invariant sn == i * (i - 1) / 2 + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i;\nloop invariant sn <= (size + i - 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn <= size;\nloop invariant i <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i);\nloop invariant sn == size - (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == size - (size - i) is preserved but not established.\nloop invariant sn == size - (i - 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\n\nloop invariant i6: sn == i - 1;\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant i > 0;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is established but not preserved.\nloop invariant i > 0 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i > 0;\nloop invariant i4: sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 62,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i <= size;\nloop invariant sn + 1 <= size;\nloop invariant sn + i <= size + 1;\nloop invariant sn + i + 1 <= size + 2;\nloop invariant sn + i + 2 <= size + 3;\nloop invariant sn + i + 3 <= size + 4;\nloop invariant sn + i + 4 <= size + 5;\nloop invariant sn + i + 5 <= size + 6;\nloop invariant sn + i + 6 <= size + 7;\nloop invariant sn + i + 7 <= size + 8;\nloop invariant sn + i + 8 <= size + 9;\nloop invariant sn + i + 9 <= size + 10;\nloop invariant sn + i + 10 <= size + 11;\nloop invariant sn + i + 11 <= size + 12;\nloop invariant sn + i + 12 <= size + 13;\nloop invariant sn + i + 13 <= size + 14;\nloop invariant sn + i + 14 <= size + 15;\nloop invariant sn + i + 15 <= size + 16;\nloop invariant sn + i + 16 <= size + 17;\nloop invariant sn + i + 17 <= size + 18;\nloop invariant sn + i + 18 <= size + 19;\nloop invariant sn + i + 19 <= size + 20;\nloop invariant sn + i + 20 <= size + 21;\nloop invariant sn + i + 21 <= size + 22;\nloop invariant sn + i + 22 <= size + 23;\nloop invariant sn + i + 23 <= size + 24;\nloop invariant sn + i + 24 <= size + 25;\nloop invariant sn + i + 25 <= size + 26;\nloop invariant sn + i + 26 <= size + 27;\nloop invariant sn + i + 27 <= size + 28;\nloop invariant sn + i + 28 <= size + 29;\nloop invariant sn + i + 29 <= size + 30;\nloop invariant sn + i + 30 <= size + 31;\nloop invariant sn + i + 31 <= size + 32;\nloop invariant sn + i + 32 <= size + 33;\nloop invariant sn + i + 33 <= size + 34;\nloop invariant sn + i + 34 <= size + 35;\nloop invariant sn + i + 35 <= size + 36;\nloop invariant sn + i + 36 <= size + 37;\nloop invariant sn + i + 37 <= size + 38;\nloop invariant sn + i + 38 <= size + 39;\nloop invariant sn + i + 39 <= size + 40;\nloop invariant sn + i + 40 <= size + 41;\nloop invariant sn + i + 41 <= size + 42;\nloop invariant sn + i + 42 <= size + 43;\nloop invariant sn + i + 43 <= size + 44;\nloop invariant sn + i + 44 <= size + 45;\nloop invariant sn + i + 45 <= size + 46;\nloop invariant sn + i + 46 <= size + 47;\nloop invariant sn + i + 47 <= size + 48;\nloop invariant sn + i + 48 <= size + 49;\nloop invariant sn + i + 49 <= size + 50;\nloop invariant sn + i + 50 <= size + 51;\nloop invariant sn + i + 51 <= size + 52;\nloop invariant sn + i + 52 <= size + 53;\nloop invariant sn + i + 53 <= size + 54;\nloop invariant sn + i + 54 <= size + 55;\nloop invariant sn + i + 55 <= size + 56;\nloop invariant sn + i + 56 <= size + 57;\nloop invariant sn + i + 57 <= size + 58;\nloop invariant sn + i + 58 <= size + 59;\nloop invariant sn + i + 59 <= size + 60;\nloop invariant sn + i + 60 <= size + 61;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i <= size is partially proven to be inductive.\nloop invariant sn + 1 <= size is established but not preserved.\nloop invariant sn + i <= size + 1 is established but not preserved.\nloop invariant sn + i + 1 <= size + 2 is partially proven to be inductive.\nloop invariant sn + i + 2 <= size + 3 is partially proven to be inductive.\nloop invariant sn + i + 3 <= size + 4 is partially proven to be inductive.\nloop invariant sn + i + 4 <= size + 5 is partially proven to be inductive.\nloop invariant sn + i + 5 <= size + 6 is partially proven to be inductive.\nloop invariant sn + i + 6 <= size + 7 is partially proven to be inductive.\nloop invariant sn + i + 7 <= size + 8 is partially proven to be inductive.\nloop invariant sn + i + 8 <= size + 9 is partially proven to be inductive.\nloop invariant sn + i + 9 <= size + 10 is partially proven to be inductive.\nloop invariant sn + i + 10 <= size + 11 is partially proven to be inductive.\nloop invariant sn + i + 11 <= size + 12 is partially proven to be inductive.\nloop invariant sn + i + 12 <= size + 13 is partially proven to be inductive.\nloop invariant sn + i + 13 <= size + 14 is partially proven to be inductive.\nloop invariant sn + i + 14 <= size + 15 is partially proven to be inductive.\nloop invariant sn + i + 15 <= size + 16 is partially proven to be inductive.\nloop invariant sn + i + 16 <= size + 17 is partially proven to be inductive.\nloop invariant sn + i + 17 <= size + 18 is partially proven to be inductive.\nloop invariant sn + i + 18 <= size + 19 is partially proven to be inductive.\nloop invariant sn + i + 19 <= size + 20 is partially proven to be inductive.\nloop invariant sn + i + 20 <= size + 21 is partially proven to be inductive.\nloop invariant sn + i + 21 <= size + 22 is partially proven to be inductive.\nloop invariant sn + i + 22 <= size + 23 is partially proven to be inductive.\nloop invariant sn + i + 23 <= size + 24 is partially proven to be inductive.\nloop invariant sn + i + 24 <= size + 25 is partially proven to be inductive.\nloop invariant sn + i + 25 <= size + 26 is partially proven to be inductive.\nloop invariant sn + i + 26 <= size + 27 is partially proven to be inductive.\nloop invariant sn + i + 27 <= size + 28 is partially proven to be inductive.\nloop invariant sn + i + 28 <= size + 29 is partially proven to be inductive.\nloop invariant sn + i + 29 <= size + 30 is partially proven to be inductive.\nloop invariant sn + i + 30 <= size + 31 is partially proven to be inductive.\nloop invariant sn + i + 31 <= size + 32 is partially proven to be inductive.\nloop invariant sn + i + 32 <= size + 33 is partially proven to be inductive.\nloop invariant sn + i + 33 <= size + 34 is partially proven to be inductive.\nloop invariant sn + i + 34 <= size + 35 is partially proven to be inductive.\nloop invariant sn + i + 35 <= size + 36 is partially proven to be inductive.\nloop invariant sn + i + 36 <= size + 37 is partially proven to be inductive.\nloop invariant sn + i + 37 <= size + 38 is partially proven to be inductive.\nloop invariant sn + i + 38 <= size + 39 is partially proven to be inductive.\nloop invariant sn + i + 39 <= size + 40 is partially proven to be inductive.\nloop invariant sn + i + 40 <= size + 41 is partially proven to be inductive.\nloop invariant sn + i + 41 <= size + 42 is partially proven to be inductive.\nloop invariant sn + i + 42 <= size + 43 is partially proven to be inductive.\nloop invariant sn + i + 43 <= size + 44 is partially proven to be inductive.\nloop invariant sn + i + 44 <= size + 45 is partially proven to be inductive.\nloop invariant sn + i + 45 <= size + 46 is partially proven to be inductive.\nloop invariant sn + i + 46 <= size + 47 is partially proven to be inductive.\nloop invariant sn + i + 47 <= size + 48 is partially proven to be inductive.\nloop invariant sn + i + 48 <= size + 49 is partially proven to be inductive.\nloop invariant sn + i + 49 <= size + 50 is partially proven to be inductive.\nloop invariant sn + i + 50 <= size + 51 is partially proven to be inductive.\nloop invariant sn + i + 51 <= size + 52 is partially proven to be inductive.\nloop invariant sn + i + 52 <= size + 53 is partially proven to be inductive.\nloop invariant sn + i + 53 <= size + 54 is partially proven to be inductive.\nloop invariant sn + i + 54 <= size + 55 is partially proven to be inductive.\nloop invariant sn + i + 55 <= size + 56 is partially proven to be inductive.\nloop invariant sn + i + 56 <= size + 57 is partially proven to be inductive.\nloop invariant sn + i + 57 <= size + 58 is partially proven to be inductive.\nloop invariant sn + i + 58 <= size + 59 is partially proven to be inductive.\nloop invariant sn + i + 59 <= size + 60 is partially proven to be inductive.\nloop invariant sn + i + 60 <= size + 61 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i >= 1;\nloop invariant i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant sn + 1 == i;\nloop invariant sn < i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn + 1 == i is partially proven to be inductive.\nloop invariant sn < i is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i >= 1;\n\nloop invariant i5: sn >= 0;\n\nloop invariant i7: sn >= i - 1;\nloop invariant i8: sn <= i;\nloop invariant i9: sn + 1 == i;\nloop invariant i10: sn < i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= (size - 1) * (size / 2);\nloop invariant (sn == size) ==> (i == size + 1);\nloop invariant (sn == size - 1) ==> (i == size);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= (size - 1) * (size / 2) is established but not preserved.\nloop invariant (sn == size) ==> (i == size + 1) is partially proven to be inductive.\nloop invariant (sn == size - 1) ==> (i == size) is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= sn + 1;\nloop invariant sn + 1 <= size;\nloop invariant i <= size;\nloop invariant sn >= sn - 1;\nloop invariant sn - 1 >= 0;\nloop invariant i >= 1;\nloop invariant sn <= i;\nloop invariant i <= size;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn <= sn + 1 is partially proven to be inductive.\nloop invariant sn + 1 <= size is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn >= sn - 1 is partially proven to be inductive.\nloop invariant sn - 1 >= 0 is preserved but not established.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\nloop invariant i5: sn <= sn + 1;\n\n\nloop invariant i8: sn >= sn - 1;\n\nloop invariant i10: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant i1 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true);\nloop invariant i2 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true);\nloop invariant i3 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true);\nloop invariant i4 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true);\nloop invariant i5 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true);\nloop invariant i6 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true);\nloop invariant i7 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true);\nloop invariant i8 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true);\nloop invariant i9 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true);\nloop invariant i10 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true);\nloop invariant i11 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is established but not preserved.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\nloop invariant i4: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn == i - 1;\nloop invariant if (size == 0) then sn == size else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\nloop invariant if (size == 0) then sn == 0 else sn > 0;\nloop invariant if (size == 0) then i == size + 1 else i > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant i <= sn + 1;\nloop invariant sn <= i - 1;\nloop invariant (i == size + 1) ==> (sn == size);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant i <= sn + 1 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant (i == size + 1) ==> (sn == size) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i <= sn + 1;\nloop invariant i4: sn <= i - 1;\nloop invariant i5: (i == size + 1) ==> (sn == size);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\nloop invariant sn == (i - 1);\nloop invariant i == sn + 1;\nloop invariant sn == (i - 1);\nloop invariant i == size + 1;\nloop invariant sn == size;\nloop invariant 0 <= sn <= size;\nloop invariant 1 <= i <= size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == size + 1 is preserved but not established.\nloop invariant sn == size is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\nloop invariant i4: sn == (i - 1);\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn < size ==> sn == i - 1;\nloop invariant sn == size ==> sn == size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is established but not preserved.\nloop invariant sn < size ==> sn == i - 1 is partially proven to be inductive.\nloop invariant sn == size ==> sn == size is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn < size ==> sn == i - 1;\nloop invariant i4: sn == size ==> sn == size;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 21,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == size;\nloop invariant i == size + 1;\nloop invariant sn == i - 1;\nloop invariant sn == (i - 1);\nloop invariant sn == (i - 1) * (i - 2) / 2;\nloop invariant sn == (i - 1) * (i - 2) / 2 + (i - 1);\nloop invariant sn == (i * (i - 1) / 2);\nloop invariant sn == (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == (i * (i - 1) / 2) + (i * (i - 1) / 2);\nloop invariant sn == i * (i - 1);\nloop invariant sn == i * (i - 1) / 2;\nloop invariant sn == i * (i - 1) / 2 + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == size is preserved but not established.\nloop invariant i == size + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == (i - 1) * (i - 2) / 2 is partially proven to be inductive.\nloop invariant sn == (i - 1) * (i - 2) / 2 + (i - 1) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2) + (i * (i - 1) / 2) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nloop invariant sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: sn == i - 1;\nloop invariant i6: sn == (i - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= i;\nloop invariant sn <= (size + i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= i is preserved but not established.\nloop invariant sn <= (size + i - 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 106: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= size;\nloop invariant i2: 0 <= sn <= size;\nloop invariant i3: sn <= i;\nloop invariant i4: sn <= size;\nloop invariant i5: i <= size;\nloop invariant i6: sn == i - 1;\nloop invariant i7: sn == size - (size - i);\nloop invariant i8: sn == size - (i - 1);\nloop invariant i9: 0 <= i <= size;\nloop invariant i10: i > 0;\nloop invariant i11: sn >= 0;\nloop invariant i12: sn <= i <= size;\nloop invariant i13: sn + 1 <= size;\nloop invariant i14: sn + i <= size + 1;\nloop invariant i15: sn + i + 1 <= size + 2;\nloop invariant i16: sn + i + 2 <= size + 3;\nloop invariant i17: sn + i + 3 <= size + 4;\nloop invariant i18: sn + i + 4 <= size + 5;\nloop invariant i19: sn + i + 5 <= size + 6;\nloop invariant i20: sn + i + 6 <= size + 7;\nloop invariant i21: sn + i + 7 <= size + 8;\nloop invariant i22: sn + i + 8 <= size + 9;\nloop invariant i23: sn + i + 9 <= size + 10;\nloop invariant i24: sn + i + 10 <= size + 11;\nloop invariant i25: sn + i + 11 <= size + 12;\nloop invariant i26: sn + i + 12 <= size + 13;\nloop invariant i27: sn + i + 13 <= size + 14;\nloop invariant i28: sn + i + 14 <= size + 15;\nloop invariant i29: sn + i + 15 <= size + 16;\nloop invariant i30: sn + i + 16 <= size + 17;\nloop invariant i31: sn + i + 17 <= size + 18;\nloop invariant i32: sn + i + 18 <= size + 19;\nloop invariant i33: sn + i + 19 <= size + 20;\nloop invariant i34: sn + i + 20 <= size + 21;\nloop invariant i35: sn + i + 21 <= size + 22;\nloop invariant i36: sn + i + 22 <= size + 23;\nloop invariant i37: sn + i + 23 <= size + 24;\nloop invariant i38: sn + i + 24 <= size + 25;\nloop invariant i39: sn + i + 25 <= size + 26;\nloop invariant i40: sn + i + 26 <= size + 27;\nloop invariant i41: sn + i + 27 <= size + 28;\nloop invariant i42: sn + i + 28 <= size + 29;\nloop invariant i43: sn + i + 29 <= size + 30;\nloop invariant i44: sn + i + 30 <= size + 31;\nloop invariant i45: sn + i + 31 <= size + 32;\nloop invariant i46: sn + i + 32 <= size + 33;\nloop invariant i47: sn + i + 33 <= size + 34;\nloop invariant i48: sn + i + 34 <= size + 35;\nloop invariant i49: sn + i + 35 <= size + 36;\nloop invariant i50: sn + i + 36 <= size + 37;\nloop invariant i51: sn + i + 37 <= size + 38;\nloop invariant i52: sn + i + 38 <= size + 39;\nloop invariant i53: sn + i + 39 <= size + 40;\nloop invariant i54: sn + i + 40 <= size + 41;\nloop invariant i55: sn + i + 41 <= size + 42;\nloop invariant i56: sn + i + 42 <= size + 43;\nloop invariant i57: sn + i + 43 <= size + 44;\nloop invariant i58: sn + i + 44 <= size + 45;\nloop invariant i59: sn + i + 45 <= size + 46;\nloop invariant i60: sn + i + 46 <= size + 47;\nloop invariant i61: sn + i + 47 <= size + 48;\nloop invariant i62: sn + i + 48 <= size + 49;\nloop invariant i63: sn + i + 49 <= size + 50;\nloop invariant i64: sn + i + 50 <= size + 51;\nloop invariant i65: sn + i + 51 <= size + 52;\nloop invariant i66: sn + i + 52 <= size + 53;\nloop invariant i67: sn + i + 53 <= size + 54;\nloop invariant i68: sn + i + 54 <= size + 55;\nloop invariant i69: sn + i + 55 <= size + 56;\nloop invariant i70: sn + i + 56 <= size + 57;\nloop invariant i71: sn + i + 57 <= size + 58;\nloop invariant i72: sn + i + 58 <= size + 59;\nloop invariant i73: sn + i + 59 <= size + 60;\nloop invariant i74: sn + i + 60 <= size + 61;\nloop invariant i75: 0 <= i <= size + 1;\nloop invariant i76: i >= 1;\nloop invariant i77: i <= size + 1;\nloop invariant i78: sn >= i - 1;\nloop invariant i79: sn + 1 == i;\nloop invariant i80: sn < i;\nloop invariant i81: 0 <= sn <= (size - 1) * (size / 2);\nloop invariant i82: (sn == size) ==> (i == size + 1);\nloop invariant i83: (sn == size - 1) ==> (i == size);\nloop invariant i84: sn <= sn + 1;\nloop invariant i85: sn >= sn - 1;\nloop invariant i86: sn - 1 >= 0;\nloop invariant i87: i1 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true);\nloop invariant i88: i2 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true);\nloop invariant i89: i3 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true);\nloop invariant i90: i4 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true);\nloop invariant i91: i5 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true);\nloop invariant i92: i6 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true);\nloop invariant i93: i7 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true);\nloop invariant i94: i8 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true);\nloop invariant i95: i9 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true);\nloop invariant i96: i10 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true);\nloop invariant i97: i11 = ((i = 1) == true) and ((i <= size) == true) and ((sn = 0) == true) and ((sn != size) == true) and ((sn == 0) == true) and ((i == size) == true) and ((sn == size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true) and ((sn != 0) == true) and ((sn != size) == true);\nloop invariant i98: if (size == 0) then sn == size else sn > 0;\nloop invariant i99: if (size == 0) then i == size + 1 else i > 0;\nloop invariant i100: if (size == 0) then sn == 0 else sn > 0;\nloop invariant i101: i <= sn + 1;\nloop invariant i102: sn <= i - 1;\nloop invariant i103: (i == size + 1) ==> (sn == size);\nloop invariant i104: i == sn + 1;\nloop invariant i105: sn == (i - 1);\nloop invariant i106: i == size + 1;\nloop invariant i107: sn == size;\nloop invariant i108: sn < size ==> sn == i - 1;\nloop invariant i109: sn == size ==> sn == size;\nloop invariant i110: sn == (i - 1) * (i - 2) / 2;\nloop invariant i111: sn == (i - 1) * (i - 2) / 2 + (i - 1);\nloop invariant i112: sn == (i * (i - 1) / 2);\nloop invariant i113: sn == (i * (i - 1) / 2) + (i - 1);\nloop invariant i114: sn == (i * (i - 1) / 2) + (i * (i - 1) / 2);\nloop invariant i115: sn == i * (i - 1);\nloop invariant i116: sn == i * (i - 1) / 2;\nloop invariant i117: sn == i * (i - 1) / 2 + (i - 1);\nloop invariant i118: sn == i * (i - 1) / 2 + (i * (i - 1) / 2);\nloop invariant i119: sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i - 1);\nloop invariant i120: sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant i121: sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant i122: sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant i123: sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant i124: sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant i125: sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant i126: sn == i * (i - 1) / 2 + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i * (i - 1) / 2) + (i - 1);\nloop invariant i127: sn >= i;\nloop invariant i128: sn <= (size + i - 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 85,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\n\nloop invariant i6: sn == i - 1;\n\n\n\nloop invariant i10: i > 0;\nloop invariant i11: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i76: i >= 1;\n\nloop invariant i78: sn >= i - 1;\nloop invariant i79: sn + 1 == i;\nloop invariant i80: sn < i;\n\nloop invariant i82: (sn == size) ==> (i == size + 1);\nloop invariant i83: (sn == size - 1) ==> (i == size);\nloop invariant i84: sn <= sn + 1;\nloop invariant i85: sn >= sn - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i101: i <= sn + 1;\nloop invariant i102: sn <= i - 1;\nloop invariant i103: (i == size + 1) ==> (sn == size);\nloop invariant i104: i == sn + 1;\nloop invariant i105: sn == (i - 1);\n\n\nloop invariant i108: sn < size ==> sn == i - 1;\nloop invariant i109: sn == size ==> sn == size;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c",
            "../dataset/loop_invariants/code2inv/122.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 6,
        "failure_count": 14,
        "success_rate": 0.3
    }
}