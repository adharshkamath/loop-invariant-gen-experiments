{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y <= 50;\nloop invariant 0 <= z <= 400;\nloop invariant x == 100 ==> z == 400 && y == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= z <= 400;\nloop invariant x >= y;\nloop invariant y >= z;\nloop invariant x >= z;\n*/\n```",
            "```\n/*@\nloop invariant y >= (2 * x - 50);\nloop invariant y <= (2 * x - 25);\nloop invariant z >= (5 * x + 4 * x - 25);\nloop invariant z <= (5 * x + 4 * x + 100);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y == x - 50 + 1;\nloop invariant z == 4 * (x - 25) + 1;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x >= 0;\nloop invariant x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant x <= 100;\nloop invariant y >= -49;\nloop invariant y <= 50;\nloop invariant z >= -50;\nloop invariant z <= 400;\nloop invariant (x <= 50 ==> y == x+1);\nloop invariant (x > 50 ==> y == x-1);\nloop invariant (x < 25 ==> z == x+1);\nloop invariant (x >= 25 ==> z == x+5);\nloop invariant (x == 100 ==> y == 2);\nloop invariant (x == 100 ==> z == 400);\n*/\n```",
            "```\n/*@\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( 0 <= z ) && ( z <= 400 ) );\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( ( ( x < 25 ) && ( z == ( x * x / 2 + x ) ) ) || ( ( !( x < 25 ) ) && ( z == ( 12 + ( 5 * ( x - 25 ) ) ) ) ) ) && ( ( ( x <= 50 ) && ( y == ( 1 + x ) ) ) || ( ( !( x <= 50 ) ) && ( y == ( - 1 + x ) ) ) ) );\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 100 ==> y >= -1;\nloop invariant x <= 100 ==> y <= 1;\nloop invariant x <= 25 ==> z >= 1;\nloop invariant x <= 25 ==> z <= 5;\nloop invariant x >= 25 ==> z >= 5;\nloop invariant x >= 25 ==> z <= 405;\nloop invariant x >= 50 ==> y >= 0;\nloop invariant x >= 50 ==> y <= 1;\nloop invariant x >= 50 ==> z >= 5;\nloop invariant x >= 50 ==> z <= 405;\nloop invariant x >= 100 ==> z == 400;\nloop invariant x >= 100 ==> y == 2;\nloop invariant x >= 100 ==> x == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -49 <= y <= 50;\nloop invariant 0 <= z <= 450;\nloop invariant x <= 50 ==> y == x + 1;\nloop invariant x > 50 ==> y == 2 * (50 - x) + 1;\nloop invariant x < 25 ==> z == x + 24;\nloop invariant x >= 25 ==> z == 5 * (x - 25) + 125;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 500;\nloop invariant y <= 2;\nloop invariant z >= x;\nloop invariant z <= (x + 5);\nloop invariant y >= (x - 1);\nloop invariant y <= (x + 1);\nloop invariant (x <= 50 ==> y == (x + 1));\nloop invariant (x > 50 ==> y == (x - 1));\nloop invariant (x < 25 ==> z == (x + 1));\nloop invariant (x >= 25 ==> z == (x + 5));\nloop invariant (x == 0 ==> y == 2);\nloop invariant (x == 0 ==> z == 0);\nloop invariant (x == 100 ==> y == 2);\nloop invariant (x == 100 ==> z == 400);\nloop invariant (x == 100 ==> (y == 2 ==> z == 400));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -100 <= y <= 100;\nloop invariant 0 <= z <= 500;\n*/\n```",
            "```\n/*@\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x == 100;\nloop invariant y == 2;\nloop invariant z == 400;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= z <= 500;\nloop invariant x <= y + 1;\nloop invariant (x < 25) ==> (z = x * 4);\nloop invariant (x >= 25) ==> (z = x * 5);\nloop invariant (x < 50) ==> (y = x);\nloop invariant (x >= 50) ==> (y = x - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant 0 <= z <= 400;\nloop invariant x < 100 ==> (y == 2);\nloop invariant x == 100 ==> (y == 2);\nloop invariant x < 100 ==> (z == 400);\nloop invariant x == 100 ==> (z == 400);\nloop invariant x < 25 ==> (z == 400);\nloop invariant 25 <= x < 50 ==> (z == 400);\nloop invariant 50 <= x < 75 ==> (z == 400);\nloop invariant 75 <= x < 100 ==> (z == 400);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 200;\nloop invariant if x <= 50 then y == 1 else y == -1;\nloop invariant if x < 25 then z == 1 else z == 5;\nloop invariant x == y + z;\nloop invariant x == 100;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y <= 50;\nloop invariant 0 <= z <= 400;\nloop invariant x == 100 ==> z == 400 && y == 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x < 100 is established but not preserved.\nloop invariant 0 <= y <= 50 is established but not preserved.\nloop invariant 0 <= z <= 400 is established but not preserved.\nloop invariant x == 100 ==> z == 400 && y == 2 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= z <= 400;\nloop invariant x >= y;\nloop invariant y >= z;\nloop invariant x >= z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant -1 <= y <= 1 is established but not preserved.\nloop invariant 0 <= z <= 400 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y >= z is established but not preserved.\nloop invariant x >= z is partially proven to be inductive.\nAssertion z == 400: Unproven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: x >= y;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y >= (2 * x - 50);\nloop invariant y <= (2 * x - 25);\nloop invariant z >= (5 * x + 4 * x - 25);\nloop invariant z <= (5 * x + 4 * x + 100);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= (2 * x - 50) is partially proven to be inductive.\nloop invariant y <= (2 * x - 25) is preserved but not established.\nloop invariant z >= (5 * x + 4 * x - 25) is partially proven to be inductive.\nloop invariant z <= (5 * x + 4 * x + 100) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n\nloop invariant i4: z <= (5 * x + 4 * x + 100);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y == x - 50 + 1;\nloop invariant z == 4 * (x - 25) + 1;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x >= 0;\nloop invariant x <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant y == x - 50 + 1 is preserved but not established.\nloop invariant z == 4 * (x - 25) + 1 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 400 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\nloop invariant i6: z >= 0;\n\nloop invariant i8: x >= 0;\nloop invariant i9: x <= 100;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x <= 100;\nloop invariant y >= -49;\nloop invariant y <= 50;\nloop invariant z >= -50;\nloop invariant z <= 400;\nloop invariant (x <= 50 ==> y == x+1);\nloop invariant (x > 50 ==> y == x-1);\nloop invariant (x < 25 ==> z == x+1);\nloop invariant (x >= 25 ==> z == x+5);\nloop invariant (x == 100 ==> y == 2);\nloop invariant (x == 100 ==> z == 400);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 100 is partially proven to be inductive.\nloop invariant y >= -49 is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nloop invariant z >= -50 is partially proven to be inductive.\nloop invariant z <= 400 is partially proven to be inductive.\nloop invariant (x <= 50 ==> y == x+1) is preserved but not established.\nloop invariant (x > 50 ==> y == x-1) is partially proven to be inductive.\nloop invariant (x < 25 ==> z == x+1) is partially proven to be inductive.\nloop invariant (x >= 25 ==> z == x+5) is partially proven to be inductive.\nloop invariant (x == 100 ==> y == 2) is partially proven to be inductive.\nloop invariant (x == 100 ==> z == 400) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: x <= 100;\n\n\nloop invariant i4: z >= -50;\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( 0 <= z ) && ( z <= 400 ) );\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( ( ( x < 25 ) && ( z == ( x * x / 2 + x ) ) ) || ( ( !( x < 25 ) ) && ( z == ( 12 + ( 5 * ( x - 25 ) ) ) ) ) ) && ( ( ( x <= 50 ) && ( y == ( 1 + x ) ) ) || ( ( !( x <= 50 ) ) && ( y == ( - 1 + x ) ) ) ) );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( 0 <= z ) && ( z <= 400 ) ) is partially proven to be inductive.\nloop invariant ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( ( ( x < 25 ) && ( z == ( x * x / 2 + x ) ) ) || ( ( !( x < 25 ) ) && ( z == ( 12 + ( 5 * ( x - 25 ) ) ) ) ) ) && ( ( ( x <= 50 ) && ( y == ( 1 + x ) ) ) || ( ( !( x <= 50 ) ) && ( y == ( - 1 + x ) ) ) ) ) is preserved but not established.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 11: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 100 ==> y >= -1;\nloop invariant x <= 100 ==> y <= 1;\nloop invariant x <= 25 ==> z >= 1;\nloop invariant x <= 25 ==> z <= 5;\nloop invariant x >= 25 ==> z >= 5;\nloop invariant x >= 25 ==> z <= 405;\nloop invariant x >= 50 ==> y >= 0;\nloop invariant x >= 50 ==> y <= 1;\nloop invariant x >= 50 ==> z >= 5;\nloop invariant x >= 50 ==> z <= 405;\nloop invariant x >= 100 ==> z == 400;\nloop invariant x >= 100 ==> y == 2;\nloop invariant x >= 100 ==> x == 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant x <= 100 ==> y >= -1 is partially proven to be inductive.\nloop invariant x <= 100 ==> y <= 1 is partially proven to be inductive.\nloop invariant x <= 25 ==> z >= 1 is preserved but not established.\nloop invariant x <= 25 ==> z <= 5 is partially proven to be inductive.\nloop invariant x >= 25 ==> z >= 5 is partially proven to be inductive.\nloop invariant x >= 25 ==> z <= 405 is partially proven to be inductive.\nloop invariant x >= 50 ==> y >= 0 is partially proven to be inductive.\nloop invariant x >= 50 ==> y <= 1 is partially proven to be inductive.\nloop invariant x >= 50 ==> z >= 5 is partially proven to be inductive.\nloop invariant x >= 50 ==> z <= 405 is partially proven to be inductive.\nloop invariant x >= 100 ==> z == 400 is partially proven to be inductive.\nloop invariant x >= 100 ==> y == 2 is partially proven to be inductive.\nloop invariant x >= 100 ==> x == 100 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: z >= 0;\n\n\n\n\n\n\n\n\nloop invariant i12: x >= 50 ==> z >= 5;\n\n\n\nloop invariant i16: x >= 100 ==> x == 100;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -49 <= y <= 50;\nloop invariant 0 <= z <= 450;\nloop invariant x <= 50 ==> y == x + 1;\nloop invariant x > 50 ==> y == 2 * (50 - x) + 1;\nloop invariant x < 25 ==> z == x + 24;\nloop invariant x >= 25 ==> z == 5 * (x - 25) + 125;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant -49 <= y <= 50 is partially proven to be inductive.\nloop invariant 0 <= z <= 450 is partially proven to be inductive.\nloop invariant x <= 50 ==> y == x + 1 is preserved but not established.\nloop invariant x > 50 ==> y == 2 * (50 - x) + 1 is partially proven to be inductive.\nloop invariant x < 25 ==> z == x + 24 is partially proven to be inductive.\nloop invariant x >= 25 ==> z == 5 * (x - 25) + 125 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 500;\nloop invariant y <= 2;\nloop invariant z >= x;\nloop invariant z <= (x + 5);\nloop invariant y >= (x - 1);\nloop invariant y <= (x + 1);\nloop invariant (x <= 50 ==> y == (x + 1));\nloop invariant (x > 50 ==> y == (x - 1));\nloop invariant (x < 25 ==> z == (x + 1));\nloop invariant (x >= 25 ==> z == (x + 5));\nloop invariant (x == 0 ==> y == 2);\nloop invariant (x == 0 ==> z == 0);\nloop invariant (x == 100 ==> y == 2);\nloop invariant (x == 100 ==> z == 400);\nloop invariant (x == 100 ==> (y == 2 ==> z == 400));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 500 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant z >= x is partially proven to be inductive.\nloop invariant z <= (x + 5) is partially proven to be inductive.\nloop invariant y >= (x - 1) is partially proven to be inductive.\nloop invariant y <= (x + 1) is partially proven to be inductive.\nloop invariant (x <= 50 ==> y == (x + 1)) is preserved but not established.\nloop invariant (x > 50 ==> y == (x - 1)) is partially proven to be inductive.\nloop invariant (x < 25 ==> z == (x + 1)) is partially proven to be inductive.\nloop invariant (x >= 25 ==> z == (x + 5)) is partially proven to be inductive.\nloop invariant (x == 0 ==> y == 2) is partially proven to be inductive.\nloop invariant (x == 0 ==> z == 0) is partially proven to be inductive.\nloop invariant (x == 100 ==> y == 2) is partially proven to be inductive.\nloop invariant (x == 100 ==> z == 400) is partially proven to be inductive.\nloop invariant (x == 100 ==> (y == 2 ==> z == 400)) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: z >= 0;\n\n\nloop invariant i6: z >= x;\n\n\nloop invariant i9: y <= (x + 1);\n\n\n\n\n\nloop invariant i15: (x == 0 ==> z == 0);\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -100 <= y <= 100;\nloop invariant 0 <= z <= 500;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant -100 <= y <= 100 is established but not preserved.\nloop invariant 0 <= z <= 500 is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x == 100;\nloop invariant y == 2;\nloop invariant z == 400;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant z == 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant z >= 0;\nloop invariant z <= 400;\nloop invariant x == 100 ==> y == 2;\nloop invariant x == 100 ==> z == 400;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == 0 is partially proven to be inductive.\nloop invariant y == 0 is partially proven to be inductive.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y >= -50 is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 400 is partially proven to be inductive.\nloop invariant x == 100 is preserved but not established.\nloop invariant y == 2 is partially proven to be inductive.\nloop invariant z == 400 is partially proven to be inductive.\nloop invariant x == 100 ==> y == 2 is partially proven to be inductive.\nloop invariant x == 100 ==> z == 400 is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: x <= 100;\n\n\nloop invariant i8: z >= 0;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -1 <= y <= 1;\nloop invariant 0 <= z <= 500;\nloop invariant x <= y + 1;\nloop invariant (x < 25) ==> (z = x * 4);\nloop invariant (x >= 25) ==> (z = x * 5);\nloop invariant (x < 50) ==> (y = x);\nloop invariant (x >= 50) ==> (y = x - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant 0 <= z <= 400;\nloop invariant x < 100 ==> (y == 2);\nloop invariant x == 100 ==> (y == 2);\nloop invariant x < 100 ==> (z == 400);\nloop invariant x == 100 ==> (z == 400);\nloop invariant x < 25 ==> (z == 400);\nloop invariant 25 <= x < 50 ==> (z == 400);\nloop invariant 50 <= x < 75 ==> (z == 400);\nloop invariant 75 <= x < 100 ==> (z == 400);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant 0 <= z <= 400 is partially proven to be inductive.\nloop invariant x < 100 ==> (y == 2) is preserved but not established.\nloop invariant x == 100 ==> (y == 2) is partially proven to be inductive.\nloop invariant x < 100 ==> (z == 400) is partially proven to be inductive.\nloop invariant x == 100 ==> (z == 400) is partially proven to be inductive.\nloop invariant x < 25 ==> (z == 400) is partially proven to be inductive.\nloop invariant 25 <= x < 50 ==> (z == 400) is partially proven to be inductive.\nloop invariant 50 <= x < 75 ==> (z == 400) is partially proven to be inductive.\nloop invariant 75 <= x < 100 ==> (z == 400) is partially proven to be inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Partially proven\nAssertion x == 100: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 200;\nloop invariant if x <= 50 then y == 1 else y == -1;\nloop invariant if x < 25 then z == 1 else z == 5;\nloop invariant x == y + z;\nloop invariant x == 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'x'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 86: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x < 100;\nloop invariant i2: 0 <= y <= 50;\nloop invariant i3: 0 <= z <= 400;\nloop invariant i4: x == 100 ==> z == 400 && y == 2;\nloop invariant i5: 0 <= x <= 100;\nloop invariant i6: -1 <= y <= 1;\nloop invariant i7: x >= y;\nloop invariant i8: y >= z;\nloop invariant i9: x >= z;\nloop invariant i10: y >= (2 * x - 50);\nloop invariant i11: y <= (2 * x - 25);\nloop invariant i12: z >= (5 * x + 4 * x - 25);\nloop invariant i13: z <= (5 * x + 4 * x + 100);\nloop invariant i14: y == x - 50 + 1;\nloop invariant i15: z == 4 * (x - 25) + 1;\nloop invariant i16: y >= 0;\nloop invariant i17: y <= 2;\nloop invariant i18: z >= 0;\nloop invariant i19: z <= 400;\nloop invariant i20: x >= 0;\nloop invariant i21: x <= 100;\nloop invariant i22: y >= -49;\nloop invariant i23: y <= 50;\nloop invariant i24: z >= -50;\nloop invariant i25: (x <= 50 ==> y == x+1);\nloop invariant i26: (x > 50 ==> y == x-1);\nloop invariant i27: (x < 25 ==> z == x+1);\nloop invariant i28: (x >= 25 ==> z == x+5);\nloop invariant i29: (x == 100 ==> y == 2);\nloop invariant i30: (x == 100 ==> z == 400);\nloop invariant i31: ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( 0 <= z ) && ( z <= 400 ) );\nloop invariant i32: ( ( ( 0 <= x ) && ( x <= 100 ) ) && ( ( y <= 2 ) && ( y >= 0 ) ) ) ==> ( ( ( ( x < 25 ) && ( z == ( x * x / 2 + x ) ) ) || ( ( !( x < 25 ) ) && ( z == ( 12 + ( 5 * ( x - 25 ) ) ) ) ) ) && ( ( ( x <= 50 ) && ( y == ( 1 + x ) ) ) || ( ( !( x <= 50 ) ) && ( y == ( - 1 + x ) ) ) ) );\nloop invariant i33: x <= 100 ==> y >= -1;\nloop invariant i34: x <= 100 ==> y <= 1;\nloop invariant i35: x <= 25 ==> z >= 1;\nloop invariant i36: x <= 25 ==> z <= 5;\nloop invariant i37: x >= 25 ==> z >= 5;\nloop invariant i38: x >= 25 ==> z <= 405;\nloop invariant i39: x >= 50 ==> y >= 0;\nloop invariant i40: x >= 50 ==> y <= 1;\nloop invariant i41: x >= 50 ==> z >= 5;\nloop invariant i42: x >= 50 ==> z <= 405;\nloop invariant i43: x >= 100 ==> z == 400;\nloop invariant i44: x >= 100 ==> y == 2;\nloop invariant i45: x >= 100 ==> x == 100;\nloop invariant i46: -49 <= y <= 50;\nloop invariant i47: 0 <= z <= 450;\nloop invariant i48: x <= 50 ==> y == x + 1;\nloop invariant i49: x > 50 ==> y == 2 * (50 - x) + 1;\nloop invariant i50: x < 25 ==> z == x + 24;\nloop invariant i51: x >= 25 ==> z == 5 * (x - 25) + 125;\nloop invariant i52: z <= 500;\nloop invariant i53: z >= x;\nloop invariant i54: z <= (x + 5);\nloop invariant i55: y >= (x - 1);\nloop invariant i56: y <= (x + 1);\nloop invariant i57: (x <= 50 ==> y == (x + 1));\nloop invariant i58: (x > 50 ==> y == (x - 1));\nloop invariant i59: (x < 25 ==> z == (x + 1));\nloop invariant i60: (x >= 25 ==> z == (x + 5));\nloop invariant i61: (x == 0 ==> y == 2);\nloop invariant i62: (x == 0 ==> z == 0);\nloop invariant i63: (x == 100 ==> (y == 2 ==> z == 400));\nloop invariant i64: -100 <= y <= 100;\nloop invariant i65: 0 <= z <= 500;\nloop invariant i66: x == 0;\nloop invariant i67: y == 0;\nloop invariant i68: z == 0;\nloop invariant i69: y >= -50;\nloop invariant i70: x == 100;\nloop invariant i71: y == 2;\nloop invariant i72: z == 400;\nloop invariant i73: x == 100 ==> y == 2;\nloop invariant i74: x == 100 ==> z == 400;\nloop invariant i75: x <= y + 1;\nloop invariant i76: (x < 25) ==> (z = x * 4);\nloop invariant i77: (x >= 25) ==> (z = x * 5);\nloop invariant i78: (x < 50) ==> (y = x);\nloop invariant i79: (x >= 50) ==> (y = x - 1);\nloop invariant i80: 0 <= y <= 100;\nloop invariant i81: x < 100 ==> (y == 2);\nloop invariant i82: x == 100 ==> (y == 2);\nloop invariant i83: x < 100 ==> (z == 400);\nloop invariant i84: x == 100 ==> (z == 400);\nloop invariant i85: x < 25 ==> (z == 400);\nloop invariant i86: 25 <= x < 50 ==> (z == 400);\nloop invariant i87: 50 <= x < 75 ==> (z == 400);\nloop invariant i88: 75 <= x < 100 ==> (z == 400);\nloop invariant i89: 0 <= y <= 2;\nloop invariant i90: 0 <= z <= 200;\nloop invariant i91: if x <= 50 then y == 1 else y == -1;\nloop invariant i92: if x < 25 then z == 1 else z == 5;\nloop invariant i93: x == y + z;\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 56,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\n\n\n\n\nloop invariant i5: 0 <= x <= 100;\n\nloop invariant i7: x >= y;\n\n\n\n\n\nloop invariant i13: z <= (5 * x + 4 * x + 100);\n\n\n\n\nloop invariant i18: z >= 0;\n\nloop invariant i20: x >= 0;\nloop invariant i21: x <= 100;\n\n\nloop invariant i24: z >= -50;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: x >= 25 ==> z >= 5;\n\n\n\nloop invariant i41: x >= 50 ==> z >= 5;\n\n\n\nloop invariant i45: x >= 100 ==> x == 100;\n\n\n\n\n\n\n\nloop invariant i53: z >= x;\n\n\nloop invariant i56: y <= (x + 1);\n\n\n\n\n\nloop invariant i62: (x == 0 ==> z == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\n\t{;\n//@ assert(y==2);\n}\n\n\t{;\n//@ assert(x==100);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/code2inv/28.c",
            "../dataset/loop_invariants/code2inv/122.c",
            "../dataset/loop_invariants/code2inv/85.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c"
        ],
        "skipped": [],
        "total": 22,
        "success_count": 6,
        "failure_count": 16,
        "success_rate": 0.2727272727272727
    }
}