{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn = i * 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn == (2 * i - 2);\n*/\n```",
            "```\n/*@\nloop invariant i <= 8;\nloop invariant sn >= 8*(2);\nloop invariant sn <= 8*(2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn >= 0;\nloop invariant sn <= 8 * 2;\nloop invariant sn == i * 2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1 && i <= 9;\nloop invariant sn >= 0 && sn <= i * (2 || 0);\nloop invariant sn + i * 2 >= (i - 1) * (i || 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant i*(2) <= sn <= i*(2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn == (2 * i);\nloop invariant (sn >= 0) && (sn <= 16);\nloop invariant (sn == (2 * i)) ==> ((i >= 1) && (i <= 8));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn == i + 2 * i * (i - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant i1; loop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant i1; loop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn >= 2*(i-1);\nloop invariant sn <= 2*i;\nloop invariant sn == 2*i ==> i == 9;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn == (i * (2)) || sn == 0;\nloop invariant i * 2 == sn;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn >= (i * 2);\nloop invariant sn <= (8 * 2);\nloop invariant sn >= (0 + (i - 1) * 2);\nloop invariant sn <= (8 + (i - 1) * 2);\nloop invariant sn >= (i * 2) || sn == 0;\nloop invariant 0 <= i <= 8;\nloop invariant sn >= (i * 2);\nloop invariant sn <= (8 * 2);\nloop invariant sn >= (0 + (i - 1) * 2);\nloop invariant sn <= (8 + (i - 1) * 2);\nloop invariant sn >= (i * 2) || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant i1 <= i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant 0 <= i <= 8;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn >= 0;\nloop invariant sn <= i*2;\nloop invariant sn == 2*i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn = i * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant sn == (2 * i - 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: sn == (2 * i - 2);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i <= 8;\nloop invariant sn >= 8*(2);\nloop invariant sn <= 8*(2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn >= 0;\nloop invariant sn <= 8 * 2;\nloop invariant sn == i * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn >= 0;\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 1 && i <= 9;\nloop invariant sn >= 0 && sn <= i * (2 || 0);\nloop invariant sn + i * 2 >= (i - 1) * (i || 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: i >= 1 && i <= 9;\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 8;\nloop invariant i*(2) <= sn <= i*(2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn == (2 * i);\nloop invariant (sn >= 0) && (sn <= 16);\nloop invariant (sn == (2 * i)) ==> ((i >= 1) && (i <= 8));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn == i + 2 * i * (i - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i1; loop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 157,
                "annotations": "```\n/*@\nloop invariant i1; loop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn >= 2*(i-1);\nloop invariant sn <= 2*i;\nloop invariant sn == 2*i ==> i == 9;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn >= 2*(i-1);\nloop invariant i3: sn <= 2*i;\nloop invariant i4: sn == 2*i ==> i == 9;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn == (i * (2)) || sn == 0;\nloop invariant i * 2 == sn;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\n\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn >= (i * 2);\nloop invariant sn <= (8 * 2);\nloop invariant sn >= (0 + (i - 1) * 2);\nloop invariant sn <= (8 + (i - 1) * 2);\nloop invariant sn >= (i * 2) || sn == 0;\nloop invariant 0 <= i <= 8;\nloop invariant sn >= (i * 2);\nloop invariant sn <= (8 * 2);\nloop invariant sn >= (0 + (i - 1) * 2);\nloop invariant sn <= (8 + (i - 1) * 2);\nloop invariant sn >= (i * 2) || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\n\nloop invariant i4: sn >= (0 + (i - 1) * 2);\nloop invariant i5: sn <= (8 + (i - 1) * 2);\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i1 <= i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant 0 <= i <= 8;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\nloop invariant sn <= 16;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn = 2*i;\nloop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n\nloop invariant i6: i >= 1;\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 8;\nloop invariant sn >= 0;\nloop invariant sn <= i*2;\nloop invariant sn == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i*2;\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 11: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 8;\nloop invariant i2: sn = i * 2;\nloop invariant i3: sn == (2 * i - 2);\nloop invariant i4: i <= 8;\nloop invariant i5: sn >= 8*(2);\nloop invariant i6: sn <= 8*(2);\nloop invariant i7: 1 <= i <= 9;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn <= 8 * 2;\nloop invariant i10: sn == i * 2;\nloop invariant i11: i >= 1 && i <= 9;\nloop invariant i12: sn >= 0 && sn <= i * (2 || 0);\nloop invariant i13: sn + i * 2 >= (i - 1) * (i || 1);\nloop invariant i14: i*(2) <= sn <= i*(2);\nloop invariant i15: 0 <= i <= 8;\nloop invariant i16: sn == (2 * i);\nloop invariant i17: (sn >= 0) && (sn <= 16);\nloop invariant i18: (sn == (2 * i)) ==> ((i >= 1) && (i <= 8));\nloop invariant i19: sn == i + 2 * i * (i - 1) / 2;\nloop invariant i20: i1; loop invariant i2;\nloop invariant i21: i3;\nloop invariant i22: i4;\nloop invariant i23: i5;\nloop invariant i24: i6;\nloop invariant i25: i7;\nloop invariant i26: i8;\nloop invariant i27: i9;\nloop invariant i28: i10;\nloop invariant i29: i11;\nloop invariant i30: i12;\nloop invariant i31: i13;\nloop invariant i32: i14;\nloop invariant i33: i15;\nloop invariant i34: i16;\nloop invariant i35: i17;\nloop invariant i36: i18;\nloop invariant i37: i19;\nloop invariant i38: i20;\nloop invariant i39: i21;\nloop invariant i40: i22;\nloop invariant i41: i23;\nloop invariant i42: i24;\nloop invariant i43: i25;\nloop invariant i44: i26;\nloop invariant i45: i27;\nloop invariant i46: i28;\nloop invariant i47: i29;\nloop invariant i48: i30;\nloop invariant i49: i31;\nloop invariant i50: i32;\nloop invariant i51: i33;\nloop invariant i52: i34;\nloop invariant i53: i35;\nloop invariant i54: i36;\nloop invariant i55: i37;\nloop invariant i56: i38;\nloop invariant i57: i39;\nloop invariant i58: i40;\nloop invariant i59: i41;\nloop invariant i60: i42;\nloop invariant i61: i43;\nloop invariant i62: i44;\nloop invariant i63: i45;\nloop invariant i64: i46;\nloop invariant i65: i47;\nloop invariant i66: i48;\nloop invariant i67: i49;\nloop invariant i68: i50;\nloop invariant i69: i51;\nloop invariant i70: i52;\nloop invariant i71: i53;\nloop invariant i72: i54;\nloop invariant i73: i55;\nloop invariant i74: i56;\nloop invariant i75: i57;\nloop invariant i76: i58;\nloop invariant i77: i59;\nloop invariant i78: i60;\nloop invariant i79: i61;\nloop invariant i80: i62;\nloop invariant i81: i63;\nloop invariant i82: i64;\nloop invariant i83: i65;\nloop invariant i84: i66;\nloop invariant i85: i67;\nloop invariant i86: i68;\nloop invariant i87: i69;\nloop invariant i88: i70;\nloop invariant i89: i71;\nloop invariant i90: i72;\nloop invariant i91: i73;\nloop invariant i92: i74;\nloop invariant i93: i75;\nloop invariant i94: i76;\nloop invariant i95: i77;\nloop invariant i96: i78;\nloop invariant i97: i79;\nloop invariant i98: i80;\nloop invariant i99: i81;\nloop invariant i100: i82;\nloop invariant i101: i83;\nloop invariant i102: i84;\nloop invariant i103: i85;\nloop invariant i104: i86;\nloop invariant i105: i87;\nloop invariant i106: i88;\nloop invariant i107: i89;\nloop invariant i108: i90;\nloop invariant i109: i91;\nloop invariant i110: i92;\nloop invariant i111: i93;\nloop invariant i112: i94;\nloop invariant i113: i95;\nloop invariant i114: i96;\nloop invariant i115: i97;\nloop invariant i116: i98;\nloop invariant i117: i99;\nloop invariant i118: i100;\nloop invariant i119: i101;\nloop invariant i120: i102;\nloop invariant i121: i103;\nloop invariant i122: i104;\nloop invariant i123: i105;\nloop invariant i124: i106;\nloop invariant i125: i107;\nloop invariant i126: i108;\nloop invariant i127: i109;\nloop invariant i128: i110;\nloop invariant i129: i111;\nloop invariant i130: i112;\nloop invariant i131: i113;\nloop invariant i132: i114;\nloop invariant i133: i115;\nloop invariant i134: i116;\nloop invariant i135: i117;\nloop invariant i136: i118;\nloop invariant i137: i119;\nloop invariant i138: i120;\nloop invariant i139: i121;\nloop invariant i140: i122;\nloop invariant i141: i123;\nloop invariant i142: i124;\nloop invariant i143: i125;\nloop invariant i144: i126;\nloop invariant i145: i127;\nloop invariant i146: i128;\nloop invariant i147: i129;\nloop invariant i148: i130;\nloop invariant i149: i131;\nloop invariant i150: i132;\nloop invariant i151: i133;\nloop invariant i152: i134;\nloop invariant i153: i135;\nloop invariant i154: i136;\nloop invariant i155: i137;\nloop invariant i156: i138;\nloop invariant i157: i139;\nloop invariant i158: i140;\nloop invariant i159: i141;\nloop invariant i160: i142;\nloop invariant i161: i143;\nloop invariant i162: i144;\nloop invariant i163: i145;\nloop invariant i164: i146;\nloop invariant i165: i147;\nloop invariant i166: i148;\nloop invariant i167: i149;\nloop invariant i168: i150;\nloop invariant i169: i151;\nloop invariant i170: i152;\nloop invariant i171: i153;\nloop invariant i172: i154;\nloop invariant i173: i155;\nloop invariant i174: i156;\nloop invariant i175: i157;\nloop invariant i176: i158;\nloop invariant i177: sn >= 2*(i-1);\nloop invariant i178: sn <= 2*i;\nloop invariant i179: sn == 2*i ==> i == 9;\nloop invariant i180: sn == (i * (2)) || sn == 0;\nloop invariant i181: i * 2 == sn;\nloop invariant i182: sn >= (i * 2);\nloop invariant i183: sn <= (8 * 2);\nloop invariant i184: sn >= (0 + (i - 1) * 2);\nloop invariant i185: sn <= (8 + (i - 1) * 2);\nloop invariant i186: sn >= (i * 2) || sn == 0;\nloop invariant i187: i1 <= i <= 8;\nloop invariant i188: sn = 2*i;\nloop invariant i189: sn <= 16;\nloop invariant i190: i >= 1;\nloop invariant i191: sn <= i*2;\nloop invariant i192: sn == 2*i;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 176,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n  int  i,  sn=0;\n  /*@\n\n\nloop invariant i3: sn == (2 * i - 2);\n\n\nloop invariant i6: sn <= 8*(2);\nloop invariant i7: 1 <= i <= 9;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn <= 8 * 2;\n\nloop invariant i11: i >= 1 && i <= 9;\n\n\n\n\n\nloop invariant i17: (sn >= 0) && (sn <= 16);\nloop invariant i18: (sn == (2 * i)) ==> ((i >= 1) && (i <= 8));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i177: sn >= 2*(i-1);\nloop invariant i178: sn <= 2*i;\nloop invariant i179: sn == 2*i ==> i == 9;\n\n\n\nloop invariant i183: sn <= (8 * 2);\nloop invariant i184: sn >= (0 + (i - 1) * 2);\nloop invariant i185: sn <= (8 + (i - 1) * 2);\n\n\n\nloop invariant i189: sn <= 16;\nloop invariant i190: i >= 1;\nloop invariant i191: sn <= i*2;\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 64,
        "success_count": 54,
        "failure_count": 10,
        "success_rate": 0.84375
    }
}