{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n while(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant -2 <= y <= 2;\nloop invariant (x < 4 ==> y > 2) ==> y > 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y >= 0;\nloop invariant 0 <= y <= 100000;\nloop invariant x + y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100;\nloop invariant x < 4 ==> y > 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x >= 4 ==> x <= 4;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y >= -2;\nloop invariant y <= 2 ==> x >= 4;\nloop invariant y >= 2 ==> x < 4;\nloop invariant y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y <= 100;\nloop invariant y >= 2 ==> y <= 100;\nloop invariant y >= 2 ==> y >= 0;\nloop invariant y >= 2 ==> y >= -2;\nloop invariant y >= 2 ==> y <= 100;\nloop invariant y >= 2 ==> y >= -2;\nloop invariant y <= 2 ==> y >= -2;\nloop invariant y <= 2 ==> y <= 100;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= -2;\nloop invariant y <= 100 ==> x < 4;\nloop invariant y >= -2 ==> x < 4;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y >= -2;\nloop invariant y <= 100 ==> x >= 4;\nloop invariant y >= -2 ==> x >= 4;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= -2;\nloop invariant y <= 100 ==> x < 4;\nloop invariant y >= -2 ==> x < 4;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y >= -2;\nloop invariant y <= 100 ==> x >= 4;\nloop invariant y >= -2 ==> x >= 4;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= -2;\nloop invariant y <= 100 ==> x < 4;\nloop invariant y >= -2 ==> x < 4;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y >= -2;\nloop invariant y <= 100 ==> x >= 4;\nloop invariant y >= -2 ==> x >= 4;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= -2;\nloop invariant y <= 100 ==> x < 4;\nloop invariant y >= -2 ==> x < 4;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y >= -2;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant unknown1() => unknown2() ==> x >= 4 ==> y <= x * 100;\nloop invariant unknown1() => unknown2() ==> x < 4 ==> y <= x * 100;\nloop invariant unknown1() => unknown3() ==> x >= 4 ==> y <= x * 100 + 1;\nloop invariant unknown1() => unknown3() ==> x < 4 ==> y <= x * 100 - 1;\nloop invariant unknown1() => unknown3() ==> x < 0 ==> y >= -y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant !(unknown1()) ==> x < 4 || y > 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant unknown1() => unknown2() ==> x >= 4 ==> y <= x * 100;\nloop invariant unknown1() => unknown2() ==> x < 4 ==> y <= x * 100;\nloop invariant unknown1() => unknown3() ==> x >= 4 ==> y <= x * 100 + 1;\nloop invariant unknown1() => unknown3() ==> x < 4 ==> y <= x * 100 - 1;\nloop invariant unknown1() => unknown3() ==> x < 0 ==> y >= -y;\nloop invariant !(unknown1()) ==> x < 4 || y > 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant (if unknown1 == 0 then x == 0 and y == 0);\nloop invariant (if unknown1 == 1 and unknown2 == 0 and unknown3 == 0 then x == 0 and y == 0);\nloop invariant (if unknown1 == 1 and unknown2 == 1 then x == 1 and y == 100);\nloop invariant (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x >= 4 then x == 5 and y == 5);\nloop invariant (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x < 4 then x == 0 and y == 0);\nloop invariant (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x < 0 then y == -y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 400;\nloop invariant x == 0 ==> y == 0;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x < 0 ==> y < 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y >= 2;\nloop invariant x < 0 ==> y <= 2;\nloop invariant x >= 4 ==> y >= 100;\nloop invariant x < 4 ==> y < 100;\nloop invariant x >= 4 ==> y >= 200;\nloop invariant x < 4 ==> y < 200;\nloop invariant x == 0 ==> y == 0;\nloop invariant x >= 4 ==> y >= 300;\nloop invariant x < 4 ==> y < 300;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant 0 <= y <= 300;\nloop invariant (x < 4) ==> (y > 2);\nloop invariant (x >= 4) ==> (y > 2);\nloop invariant (x == 3) ==> (y == 299);\nloop invariant (x == 2) ==> (y == 199);\nloop invariant (x == 1) ==> (y == 99);\nloop invariant (x == 0) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant (!unknown1()) ==> (x < 4 && y > 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x < 4 ==> y > 2;\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x < 4 ==> y > 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant y >= 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= unknown1();\nloop invariant 0 <= x <= 4;\nloop invariant -y <= y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y;\nloop invariant y <= 100*x;\nloop invariant x < 4 ==> y <= 2;\nloop invariant x = 0 ==> y = 0;\nloop invariant x = 4 ==> y = 100;\nloop invariant x >= 4 ==> y > 100;\nloop invariant x < 4 ==> x = 3 => y <= 300;\nloop invariant x < 4 ==> x = 2 => y <= 200;\nloop invariant x < 4 ==> x = 1 => y <= 100;\nloop invariant x < 4 ==> x = 0 => y = 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant x <= y;\nloop invariant (x >= 4 ==> y > 2);\nloop invariant (x < 4 ==> y <= 2);\nloop invariant (x < 0 ==> y >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y >= 400;\nloop invariant x < 4 ==> y >= 400;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant -2 <= y <= 2;\nloop invariant (x < 4 ==> y > 2) ==> y > 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y >= 0;\nloop invariant 0 <= y <= 100000;\nloop invariant x + y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\nloop invariant i2: y >= 0;\n\nloop invariant i4: x + y >= 0;\nloop invariant i5: x >= 0;\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100;\nloop invariant x < 4 ==> y > 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x < 4 ==> x >= 0;\nloop invariant x < 4 ==> y >= 0;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x >= 4 ==> x <= 4;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> y >= -2;\nloop invariant y <= 2 ==> x >= 4;\nloop invariant y >= 2 ==> x < 4;\nloop invariant y <= 2 ==> y >= 0;\nloop invariant y <= 2 ==> y <= 100;\nloop invariant y >= 2 ==> y <= 100;\nloop invariant y >= 2 ==> y >= 0;\nloop invariant y >= 2 ==> y >= -2;\nloop invariant y >= 2 ==> y <= 100;\nloop invariant y >= 2 ==> y >= -2;\nloop invariant y <= 2 ==> y >= -2;\nloop invariant y <= 2 ==> y <= 100;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= -2;\nloop invariant y <= 100 ==> x < 4;\nloop invariant y >= -2 ==> x < 4;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y >= -2;\nloop invariant y <= 100 ==> x >= 4;\nloop invariant y >= -2 ==> x >= 4;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= -2;\nloop invariant y <= 100 ==> x < 4;\nloop invariant y >= -2 ==> x < 4;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y >= -2;\nloop invariant y <= 100 ==> x >= 4;\nloop invariant y >= -2 ==> x >= 4;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= -2;\nloop invariant y <= 100 ==> x < 4;\nloop invariant y >= -2 ==> x < 4;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y >= -2;\nloop invariant y <= 100 ==> x >= 4;\nloop invariant y >= -2 ==> x >= 4;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= -2;\nloop invariant y <= 100 ==> x < 4;\nloop invariant y >= -2 ==> x < 4;\nloop invariant x >= 4 ==> y <= 100;\nloop invariant x >= 4 ==> y >= -2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n\n\nloop invariant i7: x < 4 ==> x >= 0;\nloop invariant i8: x < 4 ==> y >= 0;\n\n\nloop invariant i11: x >= 4 ==> y >= 0;\n\nloop invariant i13: x >= 4 ==> y >= -2;\n\n\nloop invariant i16: y <= 2 ==> y >= 0;\nloop invariant i17: y <= 2 ==> y <= 100;\n\nloop invariant i19: y >= 2 ==> y >= 0;\nloop invariant i20: y >= 2 ==> y >= -2;\nloop invariant i21: y <= 2 ==> y >= -2;\nloop invariant i22: x < 4 ==> y >= -2;\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant unknown1() => unknown2() ==> x >= 4 ==> y <= x * 100;\nloop invariant unknown1() => unknown2() ==> x < 4 ==> y <= x * 100;\nloop invariant unknown1() => unknown3() ==> x >= 4 ==> y <= x * 100 + 1;\nloop invariant unknown1() => unknown3() ==> x < 4 ==> y <= x * 100 - 1;\nloop invariant unknown1() => unknown3() ==> x < 0 ==> y >= -y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant !(unknown1()) ==> x < 4 || y > 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant unknown1() => unknown2() ==> x >= 4 ==> y <= x * 100;\nloop invariant unknown1() => unknown2() ==> x < 4 ==> y <= x * 100;\nloop invariant unknown1() => unknown3() ==> x >= 4 ==> y <= x * 100 + 1;\nloop invariant unknown1() => unknown3() ==> x < 4 ==> y <= x * 100 - 1;\nloop invariant unknown1() => unknown3() ==> x < 0 ==> y >= -y;\nloop invariant !(unknown1()) ==> x < 4 || y > 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant (if unknown1 == 0 then x == 0 and y == 0);\nloop invariant (if unknown1 == 1 and unknown2 == 0 and unknown3 == 0 then x == 0 and y == 0);\nloop invariant (if unknown1 == 1 and unknown2 == 1 then x == 1 and y == 100);\nloop invariant (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x >= 4 then x == 5 and y == 5);\nloop invariant (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x < 4 then x == 0 and y == 0);\nloop invariant (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x < 0 then y == -y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 400;\nloop invariant x == 0 ==> y == 0;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x < 0 ==> y < 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x >= 0 ==> y >= 2;\nloop invariant x < 0 ==> y <= 2;\nloop invariant x >= 4 ==> y >= 100;\nloop invariant x < 4 ==> y < 100;\nloop invariant x >= 4 ==> y >= 200;\nloop invariant x < 4 ==> y < 200;\nloop invariant x == 0 ==> y == 0;\nloop invariant x >= 4 ==> y >= 300;\nloop invariant x < 4 ==> y < 300;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\nloop invariant x < 4 ==> y < 400;\nloop invariant x >= 4 ==> y >= 400;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant 0 <= y <= 300;\nloop invariant (x < 4) ==> (y > 2);\nloop invariant (x >= 4) ==> (y > 2);\nloop invariant (x == 3) ==> (y == 299);\nloop invariant (x == 2) ==> (y == 199);\nloop invariant (x == 1) ==> (y == 99);\nloop invariant (x == 0) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant (!unknown1()) ==> (x < 4 && y > 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x < 4 ==> y > 2;\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x < 4 ==> y > 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant y >= 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 3;\nloop invariant y <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x <= y + 3;\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= unknown1();\nloop invariant 0 <= x <= 4;\nloop invariant -y <= y <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y;\nloop invariant y <= 100*x;\nloop invariant x < 4 ==> y <= 2;\nloop invariant x = 0 ==> y = 0;\nloop invariant x = 4 ==> y = 100;\nloop invariant x >= 4 ==> y > 100;\nloop invariant x < 4 ==> x = 3 => y <= 300;\nloop invariant x < 4 ==> x = 2 => y <= 200;\nloop invariant x < 4 ==> x = 1 => y <= 100;\nloop invariant x < 4 ==> x = 0 => y = 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\nloop invariant i2: 0 <= y;\nloop invariant i3: y <= 100*x;\n\n\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant x <= y;\nloop invariant (x >= 4 ==> y > 2);\nloop invariant (x < 4 ==> y <= 2);\nloop invariant (x < 0 ==> y >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y >= 400;\nloop invariant x < 4 ==> y >= 400;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 45: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\nloop invariant i1: 0 <= x <= 4;\nloop invariant i2: -2 <= y <= 2;\nloop invariant i3: (x < 4 ==> y > 2) ==> y > 2;\nloop invariant i4: y >= 0;\nloop invariant i5: 0 <= y <= 100000;\nloop invariant i6: x + y >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: x <= 4;\nloop invariant i9: y <= 100;\nloop invariant i10: x < 4 ==> y > 2;\nloop invariant i11: x >= 4 ==> y <= 2;\nloop invariant i12: x < 4 ==> x >= 0;\nloop invariant i13: x < 4 ==> y >= 0;\nloop invariant i14: x < 4 ==> y <= 100;\nloop invariant i15: x >= 4 ==> x <= 4;\nloop invariant i16: x >= 4 ==> y >= 0;\nloop invariant i17: x >= 4 ==> y <= 100;\nloop invariant i18: x >= 4 ==> y >= -2;\nloop invariant i19: y <= 2 ==> x >= 4;\nloop invariant i20: y >= 2 ==> x < 4;\nloop invariant i21: y <= 2 ==> y >= 0;\nloop invariant i22: y <= 2 ==> y <= 100;\nloop invariant i23: y >= 2 ==> y <= 100;\nloop invariant i24: y >= 2 ==> y >= 0;\nloop invariant i25: y >= 2 ==> y >= -2;\nloop invariant i26: y <= 2 ==> y >= -2;\nloop invariant i27: x < 4 ==> y >= -2;\nloop invariant i28: y <= 100 ==> x < 4;\nloop invariant i29: y >= -2 ==> x < 4;\nloop invariant i30: y <= 100 ==> x >= 4;\nloop invariant i31: y >= -2 ==> x >= 4;\nloop invariant i32: unknown1() => unknown2() ==> x >= 4 ==> y <= x * 100;\nloop invariant i33: unknown1() => unknown2() ==> x < 4 ==> y <= x * 100;\nloop invariant i34: unknown1() => unknown3() ==> x >= 4 ==> y <= x * 100 + 1;\nloop invariant i35: unknown1() => unknown3() ==> x < 4 ==> y <= x * 100 - 1;\nloop invariant i36: unknown1() => unknown3() ==> x < 0 ==> y >= -y;\nloop invariant i37: !(unknown1()) ==> x < 4 || y > 2;\nloop invariant i38: 0 <= y <= 2;\nloop invariant i39: (if unknown1 == 0 then x == 0 and y == 0);\nloop invariant i40: (if unknown1 == 1 and unknown2 == 0 and unknown3 == 0 then x == 0 and y == 0);\nloop invariant i41: (if unknown1 == 1 and unknown2 == 1 then x == 1 and y == 100);\nloop invariant i42: (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x >= 4 then x == 5 and y == 5);\nloop invariant i43: (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x < 4 then x == 0 and y == 0);\nloop invariant i44: (if unknown1 == 1 and unknown2 == 0 and unknown3 == 1 and x < 0 then y == -y);\nloop invariant i45: 0 <= y <= 400;\nloop invariant i46: x == 0 ==> y == 0;\nloop invariant i47: x >= 4 ==> y >= 2;\nloop invariant i48: x < 0 ==> y < 0;\nloop invariant i49: x >= 0 ==> y >= 0;\nloop invariant i50: x >= 0 ==> y >= 2;\nloop invariant i51: x < 0 ==> y <= 2;\nloop invariant i52: x >= 4 ==> y >= 100;\nloop invariant i53: x < 4 ==> y < 100;\nloop invariant i54: x >= 4 ==> y >= 200;\nloop invariant i55: x < 4 ==> y < 200;\nloop invariant i56: x >= 4 ==> y >= 300;\nloop invariant i57: x < 4 ==> y < 300;\nloop invariant i58: x >= 4 ==> y >= 400;\nloop invariant i59: x < 4 ==> y < 400;\nloop invariant i60: 0 <= x <= 3;\nloop invariant i61: 0 <= y <= 300;\nloop invariant i62: (x < 4) ==> (y > 2);\nloop invariant i63: (x >= 4) ==> (y > 2);\nloop invariant i64: (x == 3) ==> (y == 299);\nloop invariant i65: (x == 2) ==> (y == 199);\nloop invariant i66: (x == 1) ==> (y == 99);\nloop invariant i67: (x == 0) ==> (y == 0);\nloop invariant i68: (!unknown1()) ==> (x < 4 && y > 2);\nloop invariant i69: x >= (1 + (y - 1) * y / 2);\nloop invariant i70: x <= y + 3;\nloop invariant i71: y <= 100000;\nloop invariant i72: 0 <= unknown1();\nloop invariant i73: -y <= y <= 100000;\nloop invariant i74: 0 <= y;\nloop invariant i75: y <= 100*x;\nloop invariant i76: x < 4 ==> y <= 2;\nloop invariant i77: x = 0 ==> y = 0;\nloop invariant i78: x = 4 ==> y = 100;\nloop invariant i79: x >= 4 ==> y > 100;\nloop invariant i80: x < 4 ==> x = 3 => y <= 300;\nloop invariant i81: x < 4 ==> x = 2 => y <= 200;\nloop invariant i82: x < 4 ==> x = 1 => y <= 100;\nloop invariant i83: x < 4 ==> x = 0 => y = 0;\nloop invariant i84: x <= y;\nloop invariant i85: (x >= 4 ==> y > 2);\nloop invariant i86: (x < 4 ==> y <= 2);\nloop invariant i87: (x < 0 ==> y >= 0);\nloop invariant i88: y >= 400;\nloop invariant i89: x < 4 ==> y >= 400;\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
        "combined_annotation_num_solver_calls": 50,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n /*@\n\n\nloop invariant i3: (x < 4 ==> y > 2) ==> y > 2;\nloop invariant i4: y >= 0;\n\nloop invariant i6: x + y >= 0;\nloop invariant i7: x >= 0;\n\n\n\n\nloop invariant i12: x < 4 ==> x >= 0;\nloop invariant i13: x < 4 ==> y >= 0;\n\n\nloop invariant i16: x >= 4 ==> y >= 0;\n\nloop invariant i18: x >= 4 ==> y >= -2;\n\n\nloop invariant i21: y <= 2 ==> y >= 0;\nloop invariant i22: y <= 2 ==> y <= 100;\n\nloop invariant i24: y >= 2 ==> y >= 0;\nloop invariant i25: y >= 2 ==> y >= -2;\nloop invariant i26: y <= 2 ==> y >= -2;\nloop invariant i27: x < 4 ==> y >= -2;\nloop invariant i28: y <= 100 ==> x < 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: x == 0 ==> y == 0;\nloop invariant i47: x >= 4 ==> y >= 2;\nloop invariant i48: x < 0 ==> y < 0;\nloop invariant i49: x >= 0 ==> y >= 0;\n\nloop invariant i51: x < 0 ==> y <= 2;\nloop invariant i52: x >= 4 ==> y >= 100;\n\n\n\n\n\n\nloop invariant i59: x < 4 ==> y < 400;\n\n\n\nloop invariant i63: (x >= 4) ==> (y > 2);\n\n\n\nloop invariant i67: (x == 0) ==> (y == 0);\n\n\nloop invariant i70: x <= y + 3;\n\n\n\nloop invariant i74: 0 <= y;\nloop invariant i75: y <= 100*x;\n\n\n\nloop invariant i79: x >= 4 ==> y > 100;\n\n\n\n\nloop invariant i84: x <= y;\nloop invariant i85: (x >= 4 ==> y > 2);\n\nloop invariant i87: (x < 0 ==> y >= 0);\n\n\n*/\nwhile(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 105,
        "success_count": 90,
        "failure_count": 15,
        "success_rate": 0.8571428571428571
    }
}