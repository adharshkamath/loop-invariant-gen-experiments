{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/10.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= y;\nloop invariant (x == 4) ==> (y == 2);\nloop invariant (x != 4) ==> (y != 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 2 * (y - 1);\nloop invariant (y == 0) ==> (x != 4);\nloop invariant (y != 0) ==> (x != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y <= x;\nloop invariant x != 4 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 0 <= y <= 5;\nloop invariant x >= (2 * y);\nloop invariant x >= y;\nloop invariant x <= (2 * y);\nloop invariant x <= (2 * y + 2);\nloop invariant y <= (2 * x);\nloop invariant y <= (2 * x - 2);\nloop invariant x >= (y + 1);\nloop invariant x <= (y + 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x == (2 * y);\nloop invariant x <= 6;\nloop invariant x != 4 ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 2;\nloop invariant (y == 0) ==> (x != 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant (x + 2) == x ==> (x == 0 || x == 1 || x == 2);\nloop invariant (y + 2) == y ==> (y == 0 || y == 1 || y == 2);\nloop invariant (x + 2) != x ==> (y == 0);\nloop invariant x != 0 ==> (y == 0);\nloop invariant (x + 2) == x && (y + 2) == y ==> (x == 0 && y == 0);\nloop invariant (x + 2) != x && (y + 2) != y ==> (x >= 0 && x <= 2 && y >= 0 && y <= 2);\nloop invariant (x + 2) == x && (y + 2) != y ==> (x == 0 || x == 1 || x == 2 && y >= 0 && y <= 2);\nloop invariant (x + 2) != x && (y + 2) == y ==> (y == 0 && x >= 0 && x <= 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant (y != 0) ==> (x != 4);\nloop invariant (y == 0) ==> (x != 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x >= 2 * (x / 2)) && (x <= 2 * ((x / 2) + 1)) && (y >= 2 * (y / 2)) && (y <= 2 * ((y / 2) + 1));\nloop invariant (x + y) % 4 == 0;\nloop invariant (x + y) % 8 == 0;\nloop invariant (x + y) % 16 == 0;\nloop invariant (x + y) % 32 == 0;\nloop invariant (x + y) % 64 == 0;\nloop invariant (x + y) % 128 == 0;\nloop invariant (x + y) % 256 == 0;\nloop invariant (x + y) % 512 == 0;\nloop invariant (x + y) % 1024 == 0;\nloop invariant (x + y) % 2048 == 0;\nloop invariant (x + y) % 4096 == 0;\nloop invariant (x + y) % 8192 == 0;\nloop invariant (x + y) % 16384 == 0;\nloop invariant (x + y) % 32768 == 0;\nloop invariant (x + y) % 65536 == 0;\nloop invariant (x + y) % 131072 == 0;\nloop invariant (x + y) % 262144 == 0;\nloop invariant (x + y) % 524288 == 0;\nloop invariant (x + y) % 1048576 == 0;\nloop invariant (x + y) % 2097152 == 0;\nloop invariant (x + y) % 4194304 == 0;\nloop invariant (x + y) % 8388608 == 0;\nloop invariant (x + y) % 16777216 == 0;\nloop invariant (x + y) % 33554432 == 0;\nloop invariant (x + y) % 67108864 == 0;\nloop invariant (x + y) % 134217728 == 0;\nloop invariant (x + y) % 268435456 == 0;\nloop invariant (x + y) % 536870912 == 0;\nloop invariant (x + y) % 1073741824 == 0;\nloop invariant (x + y) % 2147483648 == 0;\nloop invariant (x + y) % 4294967296 == 0;\nloop invariant (x + y) % 8589934592 == 0;\nloop invariant (x + y) % 17179869184 == 0;\nloop invariant (x + y) % 34359738368 == 0;\nloop invariant (x + y) % 68719476736 == 0;\nloop invariant (x + y) % 137438953472 == 0;\nloop invariant (x + y) % 274877906944 == 0;\nloop invariant (x + y) % 549755813888 == 0;\nloop invariant (x + y) % 1099511627776 == 0;\nloop invariant (x + y) % 2199023255552 == 0;\nloop invariant (x + y) % 4398046511104 == 0;\nloop invariant (x + y) % 8796093022208 == 0;\nloop invariant (x + y) % 17592186044416 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (0 + (y - 1) * y / 2);\nloop invariant (y == 0) ==> (x != 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 2) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < 3;\nloop invariant 0 <= x <= 4;\n*/\n```",
            "```\n/*@\nloop invariant y <= 2;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant x >= 0;\nloop invariant x == y ==> x == 0;\nloop invariant x != y ==> x >= 0;\nloop invariant x != y ==> x <= 2;\nloop invariant x != y ==> x == (y - 2);\nloop invariant x != y ==> x == (y - 1);\nloop invariant x != y ==> x == y;\nloop invariant x != y ==> x == (y + 1);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x >= (y - 2);\nloop invariant x != y ==> x <= (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= y;\nloop invariant (x == 4) ==> (y == 2);\nloop invariant (x != 4) ==> (y != 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 2 * (y - 1);\nloop invariant (y == 0) ==> (x != 4);\nloop invariant (y != 0) ==> (x != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y <= x;\nloop invariant x != 4 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 0 <= y <= 5;\nloop invariant x >= (2 * y);\nloop invariant x >= y;\nloop invariant x <= (2 * y);\nloop invariant x <= (2 * y + 2);\nloop invariant y <= (2 * x);\nloop invariant y <= (2 * x - 2);\nloop invariant x >= (y + 1);\nloop invariant x <= (y + 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x <= (2 * y + 2);\n\n\n\nloop invariant i10: x <= (y + 3);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant x == (2 * y);\nloop invariant x <= 6;\nloop invariant x != 4 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x >= 2;\nloop invariant (y == 0) ==> (x != 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant (x + 2) == x ==> (x == 0 || x == 1 || x == 2);\nloop invariant (y + 2) == y ==> (y == 0 || y == 1 || y == 2);\nloop invariant (x + 2) != x ==> (y == 0);\nloop invariant x != 0 ==> (y == 0);\nloop invariant (x + 2) == x && (y + 2) == y ==> (x == 0 && y == 0);\nloop invariant (x + 2) != x && (y + 2) != y ==> (x >= 0 && x <= 2 && y >= 0 && y <= 2);\nloop invariant (x + 2) == x && (y + 2) != y ==> (x == 0 || x == 1 || x == 2 && y >= 0 && y <= 2);\nloop invariant (x + 2) != x && (y + 2) == y ==> (y == 0 && x >= 0 && x <= 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\nloop invariant i7: (x + 2) == x ==> (x == 0 || x == 1 || x == 2);\nloop invariant i8: (y + 2) == y ==> (y == 0 || y == 1 || y == 2);\n\n\nloop invariant i11: (x + 2) == x && (y + 2) == y ==> (x == 0 && y == 0);\n\nloop invariant i13: (x + 2) == x && (y + 2) != y ==> (x == 0 || x == 1 || x == 2 && y >= 0 && y <= 2);\nloop invariant i14: (x + 2) != x && (y + 2) == y ==> (y == 0 && x >= 0 && x <= 2);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant (y != 0) ==> (x != 4);\nloop invariant (y == 0) ==> (x != 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 44,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant (x + y) % 2 == 0;\nloop invariant (x >= 2 * (x / 2)) && (x <= 2 * ((x / 2) + 1)) && (y >= 2 * (y / 2)) && (y <= 2 * ((y / 2) + 1));\nloop invariant (x + y) % 4 == 0;\nloop invariant (x + y) % 8 == 0;\nloop invariant (x + y) % 16 == 0;\nloop invariant (x + y) % 32 == 0;\nloop invariant (x + y) % 64 == 0;\nloop invariant (x + y) % 128 == 0;\nloop invariant (x + y) % 256 == 0;\nloop invariant (x + y) % 512 == 0;\nloop invariant (x + y) % 1024 == 0;\nloop invariant (x + y) % 2048 == 0;\nloop invariant (x + y) % 4096 == 0;\nloop invariant (x + y) % 8192 == 0;\nloop invariant (x + y) % 16384 == 0;\nloop invariant (x + y) % 32768 == 0;\nloop invariant (x + y) % 65536 == 0;\nloop invariant (x + y) % 131072 == 0;\nloop invariant (x + y) % 262144 == 0;\nloop invariant (x + y) % 524288 == 0;\nloop invariant (x + y) % 1048576 == 0;\nloop invariant (x + y) % 2097152 == 0;\nloop invariant (x + y) % 4194304 == 0;\nloop invariant (x + y) % 8388608 == 0;\nloop invariant (x + y) % 16777216 == 0;\nloop invariant (x + y) % 33554432 == 0;\nloop invariant (x + y) % 67108864 == 0;\nloop invariant (x + y) % 134217728 == 0;\nloop invariant (x + y) % 268435456 == 0;\nloop invariant (x + y) % 536870912 == 0;\nloop invariant (x + y) % 1073741824 == 0;\nloop invariant (x + y) % 2147483648 == 0;\nloop invariant (x + y) % 4294967296 == 0;\nloop invariant (x + y) % 8589934592 == 0;\nloop invariant (x + y) % 17179869184 == 0;\nloop invariant (x + y) % 34359738368 == 0;\nloop invariant (x + y) % 68719476736 == 0;\nloop invariant (x + y) % 137438953472 == 0;\nloop invariant (x + y) % 274877906944 == 0;\nloop invariant (x + y) % 549755813888 == 0;\nloop invariant (x + y) % 1099511627776 == 0;\nloop invariant (x + y) % 2199023255552 == 0;\nloop invariant (x + y) % 4398046511104 == 0;\nloop invariant (x + y) % 8796093022208 == 0;\nloop invariant (x + y) % 17592186044416 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: (x >= 2 * (x / 2)) && (x <= 2 * ((x / 2) + 1)) && (y >= 2 * (y / 2)) && (y <= 2 * ((y / 2) + 1));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (0 + (y - 1) * y / 2);\nloop invariant (y == 0) ==> (x != 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x == 0) ==> (y == 0);\nloop invariant (x == 2) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y < 3;\nloop invariant 0 <= x <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant y <= 2;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant x >= 0;\nloop invariant x == y ==> x == 0;\nloop invariant x != y ==> x >= 0;\nloop invariant x != y ==> x <= 2;\nloop invariant x != y ==> x == (y - 2);\nloop invariant x != y ==> x == (y - 1);\nloop invariant x != y ==> x == y;\nloop invariant x != y ==> x == (y + 1);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x >= (y - 2);\nloop invariant x != y ==> x <= (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\nloop invariant x != y ==> x == (x + 2);\nloop invariant x != y ==> x == (y + 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: y >= 0;\n\nloop invariant i4: x >= 0;\n\nloop invariant i6: x != y ==> x >= 0;\n\n\n\n\n\n\nloop invariant i13: x != y ==> x >= (y - 2);\nloop invariant i14: x != y ==> x <= (y + 2);\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 2 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant (x == 4) ==> (y == 2) is partially proven to be inductive.\nloop invariant (x != 4) ==> (y != 2) is preserved but not established.\nloop invariant x >= 2 * (y - 1) is partially proven to be inductive.\nloop invariant (y == 0) ==> (x != 4) is partially proven to be inductive.\nloop invariant (y != 0) ==> (x != 0) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y <= x is partially proven to be inductive.\nloop invariant x != 4 ==> y == 0 is preserved but not established.\nloop invariant 0 <= x <= 5 is partially proven to be inductive.\nloop invariant 0 <= y <= 5 is partially proven to be inductive.\nloop invariant x >= (2 * y) is partially proven to be inductive.\nloop invariant x <= (2 * y) is preserved but not established.\nloop invariant x <= (2 * y + 2) is partially proven to be inductive.\nloop invariant y <= (2 * x) is partially proven to be inductive.\nloop invariant y <= (2 * x - 2) is partially proven to be inductive.\nloop invariant x >= (y + 1) is partially proven to be inductive.\nloop invariant x <= (y + 3) is partially proven to be inductive.\nloop invariant x == (2 * y) is partially proven to be inductive.\nloop invariant x <= 6 is partially proven to be inductive.\nloop invariant x != 4 ==> y != 0 is partially proven to be inductive.\nloop invariant x >= 2 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= 2 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant (x + 2) == x ==> (x == 0 || x == 1 || x == 2) is partially proven to be inductive.\nloop invariant (y + 2) == y ==> (y == 0 || y == 1 || y == 2) is partially proven to be inductive.\nloop invariant (x + 2) != x ==> (y == 0) is partially proven to be inductive.\nloop invariant x != 0 ==> (y == 0) is partially proven to be inductive.\nloop invariant (x + 2) == x && (y + 2) == y ==> (x == 0 && y == 0) is partially proven to be inductive.\nloop invariant (x + 2) != x && (y + 2) != y ==> (x >= 0 && x <= 2 && y >= 0 && y <= 2) is partially proven to be inductive.\nloop invariant (x + 2) == x && (y + 2) != y ==> (x == 0 || x == 1 || x == 2 && y >= 0 && y <= 2) is partially proven to be inductive.\nloop invariant (x + 2) != x && (y + 2) == y ==> (y == 0 && x >= 0 && x <= 2) is partially proven to be inductive.\nloop invariant (y != 0) ==> (x != 4) is partially proven to be inductive.\nloop invariant (x + y) % 2 == 0 is partially proven to be inductive.\nloop invariant (x >= 2 * (x / 2)) && (x <= 2 * ((x / 2) + 1)) && (y >= 2 * (y / 2)) && (y <= 2 * ((y / 2) + 1)) is partially proven to be inductive.\nloop invariant (x + y) % 4 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 8 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 16 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 32 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 64 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 128 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 256 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 512 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 1024 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 2048 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 4096 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 8192 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 16384 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 32768 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 65536 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 131072 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 262144 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 524288 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 1048576 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 2097152 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 4194304 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 8388608 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 16777216 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 33554432 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 67108864 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 134217728 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 268435456 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 536870912 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 1073741824 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 2147483648 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 4294967296 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 8589934592 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 17179869184 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 34359738368 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 68719476736 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 137438953472 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 274877906944 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 549755813888 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 1099511627776 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 2199023255552 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 4398046511104 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 8796093022208 == 0 is partially proven to be inductive.\nloop invariant (x + y) % 17592186044416 == 0 is partially proven to be inductive.\nloop invariant x >= (0 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 0 <= y <= 4 is partially proven to be inductive.\nloop invariant (x == 0) ==> (y == 0) is partially proven to be inductive.\nloop invariant (x == 2) ==> (y == 0) is partially proven to be inductive.\nloop invariant 0 <= y < 3 is partially proven to be inductive.\nloop invariant x == y ==> x == 0 is partially proven to be inductive.\nloop invariant x != y ==> x >= 0 is partially proven to be inductive.\nloop invariant x != y ==> x <= 2 is partially proven to be inductive.\nloop invariant x != y ==> x == (y - 2) is partially proven to be inductive.\nloop invariant x != y ==> x == (y - 1) is partially proven to be inductive.\nloop invariant x != y ==> x == y is partially proven to be inductive.\nloop invariant x != y ==> x == (y + 1) is partially proven to be inductive.\nloop invariant x != y ==> x == (y + 2) is partially proven to be inductive.\nloop invariant x != y ==> x >= (y - 2) is partially proven to be inductive.\nloop invariant x != y ==> x <= (y + 2) is partially proven to be inductive.\nloop invariant x != y ==> x == (x + 2) is partially proven to be inductive.\nAssertion x != 4: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: x >= (1 + (y - 1) * y / 2);\nloop invariant i4: x >= y;\nloop invariant i5: (x == 4) ==> (y == 2);\nloop invariant i6: (x != 4) ==> (y != 2);\nloop invariant i7: x >= 2 * (y - 1);\nloop invariant i8: (y == 0) ==> (x != 4);\nloop invariant i9: (y != 0) ==> (x != 0);\nloop invariant i10: x >= 0;\nloop invariant i11: x <= 4;\nloop invariant i12: y <= x;\nloop invariant i13: x != 4 ==> y == 0;\nloop invariant i14: 0 <= x <= 5;\nloop invariant i15: 0 <= y <= 5;\nloop invariant i16: x >= (2 * y);\nloop invariant i17: x <= (2 * y);\nloop invariant i18: x <= (2 * y + 2);\nloop invariant i19: y <= (2 * x);\nloop invariant i20: y <= (2 * x - 2);\nloop invariant i21: x >= (y + 1);\nloop invariant i22: x <= (y + 3);\nloop invariant i23: x == (2 * y);\nloop invariant i24: x <= 6;\nloop invariant i25: x != 4 ==> y != 0;\nloop invariant i26: x >= 2;\nloop invariant i27: y >= 0;\nloop invariant i28: x <= 2;\nloop invariant i29: y <= 2;\nloop invariant i30: (x + 2) == x ==> (x == 0 || x == 1 || x == 2);\nloop invariant i31: (y + 2) == y ==> (y == 0 || y == 1 || y == 2);\nloop invariant i32: (x + 2) != x ==> (y == 0);\nloop invariant i33: x != 0 ==> (y == 0);\nloop invariant i34: (x + 2) == x && (y + 2) == y ==> (x == 0 && y == 0);\nloop invariant i35: (x + 2) != x && (y + 2) != y ==> (x >= 0 && x <= 2 && y >= 0 && y <= 2);\nloop invariant i36: (x + 2) == x && (y + 2) != y ==> (x == 0 || x == 1 || x == 2 && y >= 0 && y <= 2);\nloop invariant i37: (x + 2) != x && (y + 2) == y ==> (y == 0 && x >= 0 && x <= 2);\nloop invariant i38: (y != 0) ==> (x != 4);\nloop invariant i39: (x + y) % 2 == 0;\nloop invariant i40: (x >= 2 * (x / 2)) && (x <= 2 * ((x / 2) + 1)) && (y >= 2 * (y / 2)) && (y <= 2 * ((y / 2) + 1));\nloop invariant i41: (x + y) % 4 == 0;\nloop invariant i42: (x + y) % 8 == 0;\nloop invariant i43: (x + y) % 16 == 0;\nloop invariant i44: (x + y) % 32 == 0;\nloop invariant i45: (x + y) % 64 == 0;\nloop invariant i46: (x + y) % 128 == 0;\nloop invariant i47: (x + y) % 256 == 0;\nloop invariant i48: (x + y) % 512 == 0;\nloop invariant i49: (x + y) % 1024 == 0;\nloop invariant i50: (x + y) % 2048 == 0;\nloop invariant i51: (x + y) % 4096 == 0;\nloop invariant i52: (x + y) % 8192 == 0;\nloop invariant i53: (x + y) % 16384 == 0;\nloop invariant i54: (x + y) % 32768 == 0;\nloop invariant i55: (x + y) % 65536 == 0;\nloop invariant i56: (x + y) % 131072 == 0;\nloop invariant i57: (x + y) % 262144 == 0;\nloop invariant i58: (x + y) % 524288 == 0;\nloop invariant i59: (x + y) % 1048576 == 0;\nloop invariant i60: (x + y) % 2097152 == 0;\nloop invariant i61: (x + y) % 4194304 == 0;\nloop invariant i62: (x + y) % 8388608 == 0;\nloop invariant i63: (x + y) % 16777216 == 0;\nloop invariant i64: (x + y) % 33554432 == 0;\nloop invariant i65: (x + y) % 67108864 == 0;\nloop invariant i66: (x + y) % 134217728 == 0;\nloop invariant i67: (x + y) % 268435456 == 0;\nloop invariant i68: (x + y) % 536870912 == 0;\nloop invariant i69: (x + y) % 1073741824 == 0;\nloop invariant i70: (x + y) % 2147483648 == 0;\nloop invariant i71: (x + y) % 4294967296 == 0;\nloop invariant i72: (x + y) % 8589934592 == 0;\nloop invariant i73: (x + y) % 17179869184 == 0;\nloop invariant i74: (x + y) % 34359738368 == 0;\nloop invariant i75: (x + y) % 68719476736 == 0;\nloop invariant i76: (x + y) % 137438953472 == 0;\nloop invariant i77: (x + y) % 274877906944 == 0;\nloop invariant i78: (x + y) % 549755813888 == 0;\nloop invariant i79: (x + y) % 1099511627776 == 0;\nloop invariant i80: (x + y) % 2199023255552 == 0;\nloop invariant i81: (x + y) % 4398046511104 == 0;\nloop invariant i82: (x + y) % 8796093022208 == 0;\nloop invariant i83: (x + y) % 17592186044416 == 0;\nloop invariant i84: x >= (0 + (y - 1) * y / 2);\nloop invariant i85: 0 <= x <= 4;\nloop invariant i86: 0 <= y <= 4;\nloop invariant i87: (x == 0) ==> (y == 0);\nloop invariant i88: (x == 2) ==> (y == 0);\nloop invariant i89: 0 <= y < 3;\nloop invariant i90: x == y ==> x == 0;\nloop invariant i91: x != y ==> x >= 0;\nloop invariant i92: x != y ==> x <= 2;\nloop invariant i93: x != y ==> x == (y - 2);\nloop invariant i94: x != y ==> x == (y - 1);\nloop invariant i95: x != y ==> x == y;\nloop invariant i96: x != y ==> x == (y + 1);\nloop invariant i97: x != y ==> x == (y + 2);\nloop invariant i98: x != y ==> x >= (y - 2);\nloop invariant i99: x != y ==> x <= (y + 2);\nloop invariant i100: x != y ==> x == (x + 2);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 55,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: (y == 0) ==> (x != 4);\n\nloop invariant i10: x >= 0;\n\n\n\n\n\n\n\nloop invariant i18: x <= (2 * y + 2);\n\n\n\nloop invariant i22: x <= (y + 3);\n\n\n\n\nloop invariant i27: y >= 0;\n\n\nloop invariant i30: (x + 2) == x ==> (x == 0 || x == 1 || x == 2);\nloop invariant i31: (y + 2) == y ==> (y == 0 || y == 1 || y == 2);\n\n\nloop invariant i34: (x + 2) == x && (y + 2) == y ==> (x == 0 && y == 0);\n\nloop invariant i36: (x + 2) == x && (y + 2) != y ==> (x == 0 || x == 1 || x == 2 && y >= 0 && y <= 2);\nloop invariant i37: (x + 2) != x && (y + 2) == y ==> (y == 0 && x >= 0 && x <= 2);\n\n\nloop invariant i40: (x >= 2 * (x / 2)) && (x <= 2 * ((x / 2) + 1)) && (y >= 2 * (y / 2)) && (y <= 2 * ((y / 2) + 1));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i91: x != y ==> x >= 0;\n\n\n\n\n\n\nloop invariant i98: x != y ==> x >= (y - 2);\nloop invariant i99: x != y ==> x <= (y + 2);\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/up-nested.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../dataset/loop_invariants/code2inv/1.c",
            "../dataset/loop_invariants/code2inv/10.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum01_true.c"
        ],
        "skipped": [],
        "total": 184,
        "success_count": 153,
        "failure_count": 31,
        "success_rate": 0.8315217391304348
    }
}