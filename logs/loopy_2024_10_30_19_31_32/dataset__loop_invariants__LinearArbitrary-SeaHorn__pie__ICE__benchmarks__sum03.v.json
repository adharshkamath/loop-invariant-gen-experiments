{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant sn == x*a || sn == 0;\nloop invariant n1 == n1;\nloop invariant loop1 == loop1;\nloop invariant x == x;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant loop1 == loop1 || n1 == n1;\nloop invariant loop1 == loop1 && n1 == n1;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3 && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= x*a;\nloop invariant x >= 0;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v1 == v3;\nloop invariant v1 == sn;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant x <= n1;\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant sn >= 0;\nloop invariant sn <= x*a;\nloop invariant sn <= loop1*a;\nloop invariant sn <= n1*a;\nloop invariant sn <= x*a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n1 + 1;\nloop invariant v1 >= 0 && v1 < 100000;\nloop invariant v2 >= 0 && v2 < 100000;\nloop invariant v3 >= 0 && v3 < 100000;\nloop invariant sn == x * a;\nloop invariant sn >= 0 && sn <= (n1 + 1) * a;\nloop invariant sn == (x - 1) * a || sn == 0;\nloop invariant x >= 1;\nloop invariant x <= n1 + 1;\nloop invariant (x >= 1 && x <= n1 + 1) ==> (sn == x * a || sn == 0);\nloop invariant (x >= 1 && x <= n1 + 1) ==> sn >= 0;\nloop invariant (x >= 1 && x <= n1 + 1) ==> sn <= (n1 + 1) * a;\nloop invariant (x >= 1 && x <= n1 + 1) ==> sn == (x - 1) * a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant sn == x * a || sn == 0;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant loop1 == unknown_uint();\nloop invariant n1 == unknown_uint();\nloop invariant x == 0;\nloop invariant sn == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2 * unknown_uint() + 1;\nloop invariant 0 <= sn <= x * a;\nloop invariant sn == x * a || sn == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 < unknown_int();\nloop invariant v2 < unknown_int();\nloop invariant v3 < unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 1 <= sn <= x*a;\nloop invariant (sn==x*a || sn == 0);\nloop invariant 1 <= loop1 <= 4294967295;\nloop invariant 1 <= n1 <= 4294967295;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant 0 <= v1 <= 2147483647;\nloop invariant 0 <= v2 <= 2147483647;\nloop invariant 0 <= v3 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant sn == x * a || sn == 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x == (y + (y - 1) * y / 2);\nloop invariant x == y * (y + 1) / 2;\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x*a || sn == 0;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= v1 <= MAX_INT;\nloop invariant 0 <= v2 <= MAX_INT;\nloop invariant 0 <= v3 <= MAX_INT;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant y == 0;\nloop invariant x == y * (y + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n1*a;\nloop invariant x > 0;\nloop invariant x <= n1;\nloop invariant v1 = v2;\nloop invariant v1 = v3;\nloop invariant v1 == v2 ==> v1 == v3;\nloop invariant v1 == v3 ==> v1 == v2;\nloop invariant sn == x*a ==> sn >= 0;\nloop invariant sn == x*a ==> sn <= n1*a;\nloop invariant x == 0 ==> sn == 0;\nloop invariant x == 0 ==> sn == x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant x > 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant sn == x*a || sn == 0;\nloop invariant n1 == n1;\nloop invariant loop1 == loop1;\nloop invariant x == x;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant loop1 == loop1 || n1 == n1;\nloop invariant loop1 == loop1 && n1 == n1;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3 && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x == x;\nloop invariant i2: sn == sn;\nloop invariant i3: sn == x*a || sn == 0;\nloop invariant i4: n1 == n1;\nloop invariant i5: loop1 == loop1;\nloop invariant i6: v1 == v1;\nloop invariant i7: v2 == v2;\nloop invariant i8: v3 == v3;\nloop invariant i9: loop1 == loop1 || n1 == n1;\nloop invariant i10: loop1 == loop1 && n1 == n1;\nloop invariant i11: x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant i12: v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant i13: loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant i14: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant i15: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant i16: loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3 && sn == sn;\nloop invariant i17: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant i18: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant i19: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant i20: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant i21: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant i22: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i23: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i24: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i25: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i26: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i27: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i28: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= x*a;\nloop invariant x >= 0;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v1 == v3;\nloop invariant v1 == sn;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: v1 >= -2147483648;\nloop invariant i4: v2 >= -2147483648;\nloop invariant i5: v3 >= -2147483648;\nloop invariant i6: v1 <= 2147483647;\nloop invariant i7: v2 <= 2147483647;\nloop invariant i8: v3 <= 2147483647;\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant x <= n1;\nloop invariant v1 <= unknown_int();\nloop invariant v2 <= unknown_int();\nloop invariant v3 <= unknown_int();\nloop invariant sn >= 0;\nloop invariant sn <= x*a;\nloop invariant sn <= loop1*a;\nloop invariant sn <= n1*a;\nloop invariant sn <= x*a || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= x*a;\n\n\nloop invariant i10: sn <= x*a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n1 + 1;\nloop invariant v1 >= 0 && v1 < 100000;\nloop invariant v2 >= 0 && v2 < 100000;\nloop invariant v3 >= 0 && v3 < 100000;\nloop invariant sn == x * a;\nloop invariant sn >= 0 && sn <= (n1 + 1) * a;\nloop invariant sn == (x - 1) * a || sn == 0;\nloop invariant x >= 1;\nloop invariant x <= n1 + 1;\nloop invariant (x >= 1 && x <= n1 + 1) ==> (sn == x * a || sn == 0);\nloop invariant (x >= 1 && x <= n1 + 1) ==> sn >= 0;\nloop invariant (x >= 1 && x <= n1 + 1) ==> sn <= (n1 + 1) * a;\nloop invariant (x >= 1 && x <= n1 + 1) ==> sn == (x - 1) * a || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\nloop invariant i5: sn == x * a;\n\n\n\n\nloop invariant i10: (x >= 1 && x <= n1 + 1) ==> (sn == x * a || sn == 0);\nloop invariant i11: (x >= 1 && x <= n1 + 1) ==> sn >= 0;\nloop invariant i12: (x >= 1 && x <= n1 + 1) ==> sn <= (n1 + 1) * a;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant sn == x * a || sn == 0;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant loop1 == unknown_uint();\nloop invariant n1 == unknown_uint();\nloop invariant x == 0;\nloop invariant sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: sn == x * a || sn == 0;\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2 * unknown_uint() + 1;\nloop invariant 0 <= sn <= x * a;\nloop invariant sn == x * a || sn == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 < unknown_int();\nloop invariant v2 < unknown_int();\nloop invariant v3 < unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: 0 <= sn <= x * a;\nloop invariant i3: sn == x * a || sn == 0;\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 1 <= sn <= x*a;\nloop invariant (sn==x*a || sn == 0);\nloop invariant 1 <= loop1 <= 4294967295;\nloop invariant 1 <= n1 <= 4294967295;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant (sn==x*a || sn == 0) ==> (sn>=0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: (sn==x*a || sn == 0);\n\n\nloop invariant i6: v1 <= 2147483647;\nloop invariant i7: v2 <= 2147483647;\nloop invariant i8: v3 <= 2147483647;\nloop invariant i9: v1 >= -2147483648;\nloop invariant i10: v2 >= -2147483648;\nloop invariant i11: v3 >= -2147483648;\n\n\n\n\n\n\nloop invariant i18: (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant i19: (sn==x*a || sn == 0) ==> (sn>=0);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant 0 <= v1 <= 2147483647;\nloop invariant 0 <= v2 <= 2147483647;\nloop invariant 0 <= v3 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant sn == x * a || sn == 0;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v2 >= -2147483648;\nloop invariant v3 >= -2147483648;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant x <= loop1;\nloop invariant x >= 0;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant sn <= n1 * a;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\nloop invariant i5: n1 >= 0;\nloop invariant i6: sn == x * a || sn == 0;\nloop invariant i7: sn >= 0;\n\n\nloop invariant i10: x >= 0;\nloop invariant i11: sn <= x * a;\nloop invariant i12: v1 <= 2147483647;\nloop invariant i13: v2 <= 2147483647;\nloop invariant i14: v3 <= 2147483647;\nloop invariant i15: v1 >= -2147483648;\nloop invariant i16: v2 >= -2147483648;\nloop invariant i17: v3 >= -2147483648;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x == (y + (y - 1) * y / 2);\nloop invariant x == y * (y + 1) / 2;\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant y == (x - (x - 1) * x / 2) / (x + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a || sn == 0;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= v1 <= MAX_INT;\nloop invariant 0 <= v2 <= MAX_INT;\nloop invariant 0 <= v3 <= MAX_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a || sn == 0;\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant y == 0;\nloop invariant x == y * (y + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n1*a;\nloop invariant x > 0;\nloop invariant x <= n1;\nloop invariant v1 = v2;\nloop invariant v1 = v3;\nloop invariant v1 == v2 ==> v1 == v3;\nloop invariant v1 == v3 ==> v1 == v2;\nloop invariant sn == x*a ==> sn >= 0;\nloop invariant sn == x*a ==> sn <= n1*a;\nloop invariant x == 0 ==> sn == 0;\nloop invariant x == 0 ==> sn == x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != 0;\nloop invariant x > 0 ==> sn != x*a;\nloop invariant x > 0 ==> sn != n1*a;\nloop invariant x > 0 ==> sn != x*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: sn == x*a ==> sn >= 0;\n\nloop invariant i10: x == 0 ==> sn == 0;\nloop invariant i11: x == 0 ==> sn == x*a;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant x > 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\n\nloop invariant i3: sn == x*a || sn == 0;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 62: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x == x;\nloop invariant i2: sn == sn;\nloop invariant i3: sn == x*a || sn == 0;\nloop invariant i4: n1 == n1;\nloop invariant i5: loop1 == loop1;\nloop invariant i6: v1 == v1;\nloop invariant i7: v2 == v2;\nloop invariant i8: v3 == v3;\nloop invariant i9: loop1 == loop1 || n1 == n1;\nloop invariant i10: loop1 == loop1 && n1 == n1;\nloop invariant i11: x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant i12: v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant i13: loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant i14: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant i15: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant i16: loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3 && sn == sn;\nloop invariant i17: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant i18: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant i19: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant i20: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant i21: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant i22: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i23: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i24: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i25: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i26: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i27: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i28: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i29: 1 <= sn <= x*a;\nloop invariant i30: x >= 0;\nloop invariant i31: v1 >= -2147483648;\nloop invariant i32: v2 >= -2147483648;\nloop invariant i33: v3 >= -2147483648;\nloop invariant i34: v1 <= 2147483647;\nloop invariant i35: v2 <= 2147483647;\nloop invariant i36: v3 <= 2147483647;\nloop invariant i37: v1 == v2;\nloop invariant i38: v2 == v3;\nloop invariant i39: v1 == v3;\nloop invariant i40: v1 == sn;\nloop invariant i41: 0 <= x <= loop1;\nloop invariant i42: x <= n1;\nloop invariant i43: v1 <= unknown_int();\nloop invariant i44: v2 <= unknown_int();\nloop invariant i45: v3 <= unknown_int();\nloop invariant i46: sn >= 0;\nloop invariant i47: sn <= x*a;\nloop invariant i48: sn <= loop1*a;\nloop invariant i49: sn <= n1*a;\nloop invariant i50: sn <= x*a || sn == 0;\nloop invariant i51: 1 <= x <= n1 + 1;\nloop invariant i52: v1 >= 0 && v1 < 100000;\nloop invariant i53: v2 >= 0 && v2 < 100000;\nloop invariant i54: v3 >= 0 && v3 < 100000;\nloop invariant i55: sn == x * a;\nloop invariant i56: sn >= 0 && sn <= (n1 + 1) * a;\nloop invariant i57: sn == (x - 1) * a || sn == 0;\nloop invariant i58: x >= 1;\nloop invariant i59: x <= n1 + 1;\nloop invariant i60: (x >= 1 && x <= n1 + 1) ==> (sn == x * a || sn == 0);\nloop invariant i61: (x >= 1 && x <= n1 + 1) ==> sn >= 0;\nloop invariant i62: (x >= 1 && x <= n1 + 1) ==> sn <= (n1 + 1) * a;\nloop invariant i63: (x >= 1 && x <= n1 + 1) ==> sn == (x - 1) * a || sn == 0;\nloop invariant i64: 0 <= x <= n1;\nloop invariant i65: sn == x * a || sn == 0;\nloop invariant i66: v1 == unknown_int();\nloop invariant i67: v2 == unknown_int();\nloop invariant i68: v3 == unknown_int();\nloop invariant i69: loop1 == unknown_uint();\nloop invariant i70: n1 == unknown_uint();\nloop invariant i71: x == 0;\nloop invariant i72: sn == 0;\nloop invariant i73: 1 <= x <= 2 * unknown_uint() + 1;\nloop invariant i74: 0 <= sn <= x * a;\nloop invariant i75: v1 >= 0;\nloop invariant i76: v2 >= 0;\nloop invariant i77: v3 >= 0;\nloop invariant i78: v1 < unknown_int();\nloop invariant i79: v2 < unknown_int();\nloop invariant i80: v3 < unknown_int();\nloop invariant i81: 0 <= x;\nloop invariant i82: (sn==x*a || sn == 0);\nloop invariant i83: 1 <= loop1 <= 4294967295;\nloop invariant i84: 1 <= n1 <= 4294967295;\nloop invariant i85: v1 <= v2;\nloop invariant i86: v2 <= v3;\nloop invariant i87: v1 <= v3;\nloop invariant i88: (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant i89: (sn==x*a || sn == 0) ==> (sn>=0);\nloop invariant i90: 0 <= v1 <= 2147483647;\nloop invariant i91: 0 <= v2 <= 2147483647;\nloop invariant i92: 0 <= v3 <= 2147483647;\nloop invariant i93: n1 >= 0;\nloop invariant i94: sn <= n1 * a;\nloop invariant i95: x <= loop1;\nloop invariant i96: sn <= x * a;\nloop invariant i97: 0 <= x <= 100000;\nloop invariant i98: y >= 0;\nloop invariant i99: x >= y;\nloop invariant i100: x == (y + (y - 1) * y / 2);\nloop invariant i101: x == y * (y + 1) / 2;\nloop invariant i102: y == (x - (x - 1) * x / 2) / (x + 1);\nloop invariant i103: 0 <= sn <= x*a || sn == 0;\nloop invariant i104: 0 <= x <= 1;\nloop invariant i105: 0 <= v1 <= MAX_INT;\nloop invariant i106: 0 <= v2 <= MAX_INT;\nloop invariant i107: 0 <= v3 <= MAX_INT;\nloop invariant i108: 1 <= x <= 100000;\nloop invariant i109: y == 0;\nloop invariant i110: 0 <= sn <= n1*a;\nloop invariant i111: x > 0;\nloop invariant i112: v1 = v2;\nloop invariant i113: v1 = v3;\nloop invariant i114: v1 == v2 ==> v1 == v3;\nloop invariant i115: v1 == v3 ==> v1 == v2;\nloop invariant i116: sn == x*a ==> sn >= 0;\nloop invariant i117: sn == x*a ==> sn <= n1*a;\nloop invariant i118: x == 0 ==> sn == 0;\nloop invariant i119: x == 0 ==> sn == x*a;\nloop invariant i120: x > 0 ==> sn != 0;\nloop invariant i121: x > 0 ==> sn != x*a;\nloop invariant i122: x > 0 ==> sn != n1*a;\nloop invariant i123: 0 <= sn <= x*a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
        "combined_annotation_num_solver_calls": 38,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x == x;\nloop invariant i2: sn == sn;\nloop invariant i3: sn == x*a || sn == 0;\nloop invariant i4: n1 == n1;\nloop invariant i5: loop1 == loop1;\nloop invariant i6: v1 == v1;\nloop invariant i7: v2 == v2;\nloop invariant i8: v3 == v3;\nloop invariant i9: loop1 == loop1 || n1 == n1;\nloop invariant i10: loop1 == loop1 && n1 == n1;\nloop invariant i11: x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant i12: v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant i13: loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3;\nloop invariant i14: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant i15: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1;\nloop invariant i16: loop1 == loop1 && n1 == n1 && x == x && v1 == v1 && v2 == v2 && v3 == v3 && sn == sn;\nloop invariant i17: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn;\nloop invariant i18: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant i19: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn;\nloop invariant i20: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant i21: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn;\nloop invariant i22: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i23: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i24: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i25: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i26: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i27: sn == sn && x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\nloop invariant i28: x == x && v1 == v1 && v2 == v2 && v3 == v3 && loop1 == loop1 && n1 == n1 && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn && sn == sn;\n\nloop invariant i30: x >= 0;\nloop invariant i31: v1 >= -2147483648;\nloop invariant i32: v2 >= -2147483648;\nloop invariant i33: v3 >= -2147483648;\nloop invariant i34: v1 <= 2147483647;\nloop invariant i35: v2 <= 2147483647;\nloop invariant i36: v3 <= 2147483647;\n\n\n\n\n\n\n\n\n\nloop invariant i46: sn >= 0;\nloop invariant i47: sn <= x*a;\n\n\nloop invariant i50: sn <= x*a || sn == 0;\n\n\n\n\nloop invariant i55: sn == x * a;\n\n\n\n\nloop invariant i60: (x >= 1 && x <= n1 + 1) ==> (sn == x * a || sn == 0);\nloop invariant i61: (x >= 1 && x <= n1 + 1) ==> sn >= 0;\nloop invariant i62: (x >= 1 && x <= n1 + 1) ==> sn <= (n1 + 1) * a;\n\n\nloop invariant i65: sn == x * a || sn == 0;\n\n\n\n\n\n\n\n\nloop invariant i74: 0 <= sn <= x * a;\n\n\n\n\n\n\nloop invariant i81: 0 <= x;\nloop invariant i82: (sn==x*a || sn == 0);\n\n\n\n\n\nloop invariant i88: (sn==x*a || sn == 0) ==> (sn<=x*a);\nloop invariant i89: (sn==x*a || sn == 0) ==> (sn>=0);\n\n\n\nloop invariant i93: n1 >= 0;\n\n\nloop invariant i96: sn <= x * a;\n\n\n\n\n\n\nloop invariant i103: 0 <= sn <= x*a || sn == 0;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i116: sn == x*a ==> sn >= 0;\n\nloop invariant i118: x == 0 ==> sn == 0;\nloop invariant i119: x == 0 ==> sn == x*a;\nloop invariant i120: x > 0 ==> sn != 0;\n\n\nloop invariant i123: 0 <= sn <= x*a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 90,
        "success_count": 76,
        "failure_count": 14,
        "success_rate": 0.8444444444444444
    }
}