{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \twhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant (unknown2() ==> a >= 1 && b >= 2);\nloop invariant (!unknown2() ==> a >= 2 && b >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a == 2*unknown1() - b;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 3*n;\nloop invariant b >= 0;\nloop invariant b <= 3*n;\nloop invariant a+b == 3*i;\nloop invariant a >= 2*i;\nloop invariant b >= i;\nloop invariant a <= i+2*n;\nloop invariant b <= i+n;\nloop invariant a+b <= 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant i == 0 ==> a == 0;\nloop invariant i == 0 ==> b == 0;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant i == n ==> a + b == 3*(n-1) + 2;\nloop invariant i == n ==> a + b == 3*(n-1) + 1;\nloop invariant i == n ==> a + b == 3*n - 3;\nloop invariant i == n ==> a + b == 3*n - 2;\nloop invariant i == n ==> a + b == 3*n - 1;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant i == n ==> a == 3*n - 2;\nloop invariant i == n ==> b == 1;\nloop invariant i == n ==> a == 3*n - 1;\nloop invariant i == n ==> b == 2;\nloop invariant i == n ==> a == 3*n;\nloop invariant i == n ==> b == 0;\nloop invariant i == n ==> a == 3*n - 3;\nloop invariant i == n ==> b == 1;\nloop invariant i == n ==> a == 3*n - 4;\nloop invariant i == n ==> b == 2;\nloop invariant i == n ==> a == 3*n - 5;\nloop invariant i == n ==> b == 3;\nloop invariant i == n ==> a == 3*n - 6;\nloop invariant i == n ==> b == 4;\nloop invariant i == n ==> a == 3*n - 7;\nloop invariant i == n ==> b == 5;\nloop invariant i == n ==> a == 3*n - 8;\nloop invariant i == n ==> b == 6;\nloop invariant i == n ==> a == 3*n - 9;\nloop invariant i == n ==> b == 7;\nloop invariant i == n ==> a == 3*n - 10;\nloop invariant i == n ==> b == 8;\nloop invariant i == n ==> a == 3*n - 11;\nloop invariant i == n ==> b == 9;\nloop invariant i == n ==> a == 3*n - 12;\nloop invariant i == n ==> b == 10;\nloop invariant i == n ==> a == 3*n - 13;\nloop invariant i == n ==> b == 11;\nloop invariant i == n ==> a == 3*n - 14;\nloop invariant i == n ==> b == 12;\nloop invariant i == n ==> a == 3*n - 15;\nloop invariant i == n ==> b == 13;\nloop invariant i == n ==> a == 3*n - 16;\nloop invariant i == n ==> b == 14;\nloop invariant i == n ==> a == 3*n - 17;\nloop invariant i == n ==> b == 15;\nloop invariant i == n ==> a == 3*n - 18;\nloop invariant i == n ==> b == 16;\nloop invariant i == n ==> a == 3*n - 19;\nloop invariant i == n ==> b == 17;\nloop invariant i == n ==> a == 3*n - 20;\nloop invariant i == n ==> b == 18;\nloop invariant i == n ==> a == 3*n - 21;\nloop invariant i == n ==> b == 19;\nloop invariant i == n ==> a == 3*n - 22;\nloop invariant i == n ==> b == 20;\nloop invariant i == n ==> a == 3*n - 23;\nloop invariant i == n ==> b == 21;\nloop invariant i == n ==> a == 3*n - 24;\nloop invariant i == n ==> b == 22;\nloop invariant i == n ==> a == 3*n - 25;\nloop invariant i == n ==> b == 23;\nloop invariant i == n ==> a == 3*n - 26;\nloop invariant i == n ==> b == 24;\nloop invariant i == n ==> a == 3*n - 27;\nloop invariant i == n ==> b == 25;\nloop invariant i == n ==> a == 3*n - 28;\nloop invariant i == n ==> b == 26;\nloop invariant i == n ==> a == 3*n - 29;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 3 * i;\nloop invariant a <= 3 * n;\nloop invariant b <= 3 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a+b <= 3*n;\nloop invariant a+b >= 3*i;\nloop invariant a >= b;\nloop invariant a <= 2*b;\nloop invariant b <= 2*a;\nloop invariant a == 2*i + 1 ==> b == 2*i;\nloop invariant a == 2*i ==> b == 2*i + 1;\nloop invariant a == 2*i ==> b >= 2*i;\nloop invariant a >= 2*i ==> b >= 2*i;\nloop invariant a == 2*i ==> b <= 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant (a <= (2*n) && b <= (2*n)) ==> (a+b == 3*i);\nloop invariant (a >= (i) && b >= (i)) ==> (a+b == 3*i);\nloop invariant (a >= (i+1) && b >= (i+1)) ==> (a+b == 3*i+1);\nloop invariant (a >= (i+2) && b >= (i+2)) ==> (a+b == 3*i+2);\nloop invariant (a >= (2*i) && b >= (2*i)) ==> (a+b == 3*i+2);\nloop invariant (a >= (2*i+1) && b >= (2*i+1)) ==> (a+b == 3*i+2);\nloop invariant (a >= (2*i+2) && b >= (2*i+1)) ==> (a+b == 3*i+2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (a + b) == (i * 3);\nloop invariant (a + b) == (i * 3) ==> (a == (i * 3) / 2) && (b == (i * 3) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a <= 2*(n-i) + b;\nloop invariant b <= 2*(n-i) + a;\nloop invariant a+b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a == (i * 2) + (b - i);\nloop invariant b == (i * 2) + a;\nloop invariant a + b == 3 * i;\nloop invariant i + a + b == n * 3;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2 * n;\nloop invariant b <= 2 * n;\nloop invariant a >= b - n;\nloop invariant a <= b + n;\nloop invariant b >= a - n;\nloop invariant b <= a + n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= 2*n;\nloop invariant a + b <= 4*n;\nloop invariant a >= b;\nloop invariant a <= b + 2*n;\nloop invariant b >= a - 2*n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a+b >= 3*i;\nloop invariant a+b <= 3*n;\nloop invariant a >= b;\nloop invariant a <= 2*b;\nloop invariant b <= i;\nloop invariant b <= n;\nloop invariant a <= n;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant (unknown2() ==> a >= 1 && b >= 2);\nloop invariant (!unknown2() ==> a >= 2 && b >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a == 2*unknown1() - b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 3*n;\nloop invariant b >= 0;\nloop invariant b <= 3*n;\nloop invariant a+b == 3*i;\nloop invariant a >= 2*i;\nloop invariant b >= i;\nloop invariant a <= i+2*n;\nloop invariant b <= i+n;\nloop invariant a+b <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: a >= 0;\nloop invariant i4: a <= 3*n;\nloop invariant i5: b >= 0;\nloop invariant i6: b <= 3*n;\nloop invariant i7: a+b == 3*i;\n\nloop invariant i9: b >= i;\nloop invariant i10: a <= i+2*n;\n\nloop invariant i12: a+b <= 3*n;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 34,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant i == 0 ==> a == 0;\nloop invariant i == 0 ==> b == 0;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant i == n ==> a + b == 3*(n-1) + 2;\nloop invariant i == n ==> a + b == 3*(n-1) + 1;\nloop invariant i == n ==> a + b == 3*n - 3;\nloop invariant i == n ==> a + b == 3*n - 2;\nloop invariant i == n ==> a + b == 3*n - 1;\nloop invariant i == n ==> a + b == 3*n;\nloop invariant i == n ==> a == 3*n - 2;\nloop invariant i == n ==> b == 1;\nloop invariant i == n ==> a == 3*n - 1;\nloop invariant i == n ==> b == 2;\nloop invariant i == n ==> a == 3*n;\nloop invariant i == n ==> b == 0;\nloop invariant i == n ==> a == 3*n - 3;\nloop invariant i == n ==> b == 1;\nloop invariant i == n ==> a == 3*n - 4;\nloop invariant i == n ==> b == 2;\nloop invariant i == n ==> a == 3*n - 5;\nloop invariant i == n ==> b == 3;\nloop invariant i == n ==> a == 3*n - 6;\nloop invariant i == n ==> b == 4;\nloop invariant i == n ==> a == 3*n - 7;\nloop invariant i == n ==> b == 5;\nloop invariant i == n ==> a == 3*n - 8;\nloop invariant i == n ==> b == 6;\nloop invariant i == n ==> a == 3*n - 9;\nloop invariant i == n ==> b == 7;\nloop invariant i == n ==> a == 3*n - 10;\nloop invariant i == n ==> b == 8;\nloop invariant i == n ==> a == 3*n - 11;\nloop invariant i == n ==> b == 9;\nloop invariant i == n ==> a == 3*n - 12;\nloop invariant i == n ==> b == 10;\nloop invariant i == n ==> a == 3*n - 13;\nloop invariant i == n ==> b == 11;\nloop invariant i == n ==> a == 3*n - 14;\nloop invariant i == n ==> b == 12;\nloop invariant i == n ==> a == 3*n - 15;\nloop invariant i == n ==> b == 13;\nloop invariant i == n ==> a == 3*n - 16;\nloop invariant i == n ==> b == 14;\nloop invariant i == n ==> a == 3*n - 17;\nloop invariant i == n ==> b == 15;\nloop invariant i == n ==> a == 3*n - 18;\nloop invariant i == n ==> b == 16;\nloop invariant i == n ==> a == 3*n - 19;\nloop invariant i == n ==> b == 17;\nloop invariant i == n ==> a == 3*n - 20;\nloop invariant i == n ==> b == 18;\nloop invariant i == n ==> a == 3*n - 21;\nloop invariant i == n ==> b == 19;\nloop invariant i == n ==> a == 3*n - 22;\nloop invariant i == n ==> b == 20;\nloop invariant i == n ==> a == 3*n - 23;\nloop invariant i == n ==> b == 21;\nloop invariant i == n ==> a == 3*n - 24;\nloop invariant i == n ==> b == 22;\nloop invariant i == n ==> a == 3*n - 25;\nloop invariant i == n ==> b == 23;\nloop invariant i == n ==> a == 3*n - 26;\nloop invariant i == n ==> b == 24;\nloop invariant i == n ==> a == 3*n - 27;\nloop invariant i == n ==> b == 25;\nloop invariant i == n ==> a == 3*n - 28;\nloop invariant i == n ==> b == 26;\nloop invariant i == n ==> a == 3*n - 29;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: i == 0 ==> a == 0;\nloop invariant i6: i == 0 ==> b == 0;\nloop invariant i7: i == n ==> a + b == 3*n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 3 * i;\nloop invariant a <= 3 * n;\nloop invariant b <= 3 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a + b == 3 * i;\nloop invariant i5: a <= 3 * n;\nloop invariant i6: b <= 3 * n;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a+b <= 3*n;\nloop invariant a+b >= 3*i;\nloop invariant a >= b;\nloop invariant a <= 2*b;\nloop invariant b <= 2*a;\nloop invariant a == 2*i + 1 ==> b == 2*i;\nloop invariant a == 2*i ==> b == 2*i + 1;\nloop invariant a == 2*i ==> b >= 2*i;\nloop invariant a >= 2*i ==> b >= 2*i;\nloop invariant a == 2*i ==> b <= 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\nloop invariant a <= 2*i ==> b <= 2*i;\nloop invariant a == 2*i ==> b == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: a+b >= 3*i;\n\nloop invariant i7: a <= 2*b;\nloop invariant i8: b <= 2*a;\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*(i + a + b);\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b >= 3*i;\nloop invariant i5: a + b <= 3*(i + a + b);\nloop invariant i6: a + b == 3*i;\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant (a <= (2*n) && b <= (2*n)) ==> (a+b == 3*i);\nloop invariant (a >= (i) && b >= (i)) ==> (a+b == 3*i);\nloop invariant (a >= (i+1) && b >= (i+1)) ==> (a+b == 3*i+1);\nloop invariant (a >= (i+2) && b >= (i+2)) ==> (a+b == 3*i+2);\nloop invariant (a >= (2*i) && b >= (2*i)) ==> (a+b == 3*i+2);\nloop invariant (a >= (2*i+1) && b >= (2*i+1)) ==> (a+b == 3*i+2);\nloop invariant (a >= (2*i+2) && b >= (2*i+1)) ==> (a+b == 3*i+2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: (a <= (2*n) && b <= (2*n)) ==> (a+b == 3*i);\nloop invariant i6: (a >= (i) && b >= (i)) ==> (a+b == 3*i);\n\n\n\nloop invariant i10: (a >= (2*i+1) && b >= (2*i+1)) ==> (a+b == 3*i+2);\nloop invariant i11: (a >= (2*i+2) && b >= (2*i+1)) ==> (a+b == 3*i+2);\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (a + b) == (i * 3);\nloop invariant (a + b) == (i * 3) ==> (a == (i * 3) / 2) && (b == (i * 3) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: (a + b) == (i * 3);\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a <= 2*(n-i) + b;\nloop invariant b <= 2*(n-i) + a;\nloop invariant a+b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\n\n\nloop invariant i6: a+b == 3*i;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*i;\nloop invariant a + b <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b <= 3*i;\nloop invariant i5: a + b <= 3*n;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a == (i * 2) + (b - i);\nloop invariant b == (i * 2) + a;\nloop invariant a + b == 3 * i;\nloop invariant i + a + b == n * 3;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= 2 * n;\nloop invariant b <= 2 * n;\nloop invariant a >= b - n;\nloop invariant a <= b + n;\nloop invariant b >= a - n;\nloop invariant b <= a + n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3 * i;\n\nloop invariant i6: a >= 0;\nloop invariant i7: b >= 0;\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= 2*n;\nloop invariant a + b <= 4*n;\nloop invariant a >= b;\nloop invariant a <= b + 2*n;\nloop invariant b >= a - 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a+b >= 3*i;\nloop invariant a+b <= 3*n;\nloop invariant a >= b;\nloop invariant a <= 2*b;\nloop invariant b <= i;\nloop invariant b <= n;\nloop invariant a <= n;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\nloop invariant a+b == 3*i ==> i == n;\nloop invariant a+b == 3*i ==> a == b;\nloop invariant a+b == 3*i ==> a == 2*b;\nloop invariant a+b == 3*i ==> b == i;\nloop invariant a+b == 3*i ==> b == n;\nloop invariant a+b == 3*i ==> a == n;\nloop invariant a+b == 3*i ==> a == 3*n;\nloop invariant a+b == 3*i ==> b == 3*n;\nloop invariant a+b == 3*i ==> a+b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: a+b >= 3*i;\n\n\nloop invariant i8: a <= 2*b;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: a + b <= 3*n;\n\nloop invariant i5: a + b == 3*i;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: (unknown2() ==> a >= 1 && b >= 2);\nloop invariant i6: (!unknown2() ==> a >= 2 && b >= 1);\nloop invariant i7: 0 <= a <= 2*n;\nloop invariant i8: 0 <= b <= 2*n;\nloop invariant i9: a == 2*unknown1() - b;\nloop invariant i10: i >= 0;\nloop invariant i11: i <= n;\nloop invariant i12: a >= 0;\nloop invariant i13: a <= 3*n;\nloop invariant i14: b >= 0;\nloop invariant i15: b <= 3*n;\nloop invariant i16: a+b == 3*i;\nloop invariant i17: a >= 2*i;\nloop invariant i18: b >= i;\nloop invariant i19: a <= i+2*n;\nloop invariant i20: b <= i+n;\nloop invariant i21: a+b <= 3*n;\nloop invariant i22: i == 0 ==> a == 0;\nloop invariant i23: i == 0 ==> b == 0;\nloop invariant i24: i == n ==> a + b == 3*n;\nloop invariant i25: i == n ==> a + b == 3*(n-1) + 2;\nloop invariant i26: i == n ==> a + b == 3*(n-1) + 1;\nloop invariant i27: i == n ==> a + b == 3*n - 3;\nloop invariant i28: i == n ==> a + b == 3*n - 2;\nloop invariant i29: i == n ==> a + b == 3*n - 1;\nloop invariant i30: i == n ==> a == 3*n - 2;\nloop invariant i31: i == n ==> b == 1;\nloop invariant i32: i == n ==> a == 3*n - 1;\nloop invariant i33: i == n ==> b == 2;\nloop invariant i34: i == n ==> a == 3*n;\nloop invariant i35: i == n ==> b == 0;\nloop invariant i36: i == n ==> a == 3*n - 3;\nloop invariant i37: i == n ==> a == 3*n - 4;\nloop invariant i38: i == n ==> a == 3*n - 5;\nloop invariant i39: i == n ==> b == 3;\nloop invariant i40: i == n ==> a == 3*n - 6;\nloop invariant i41: i == n ==> b == 4;\nloop invariant i42: i == n ==> a == 3*n - 7;\nloop invariant i43: i == n ==> b == 5;\nloop invariant i44: i == n ==> a == 3*n - 8;\nloop invariant i45: i == n ==> b == 6;\nloop invariant i46: i == n ==> a == 3*n - 9;\nloop invariant i47: i == n ==> b == 7;\nloop invariant i48: i == n ==> a == 3*n - 10;\nloop invariant i49: i == n ==> b == 8;\nloop invariant i50: i == n ==> a == 3*n - 11;\nloop invariant i51: i == n ==> b == 9;\nloop invariant i52: i == n ==> a == 3*n - 12;\nloop invariant i53: i == n ==> b == 10;\nloop invariant i54: i == n ==> a == 3*n - 13;\nloop invariant i55: i == n ==> b == 11;\nloop invariant i56: i == n ==> a == 3*n - 14;\nloop invariant i57: i == n ==> b == 12;\nloop invariant i58: i == n ==> a == 3*n - 15;\nloop invariant i59: i == n ==> b == 13;\nloop invariant i60: i == n ==> a == 3*n - 16;\nloop invariant i61: i == n ==> b == 14;\nloop invariant i62: i == n ==> a == 3*n - 17;\nloop invariant i63: i == n ==> b == 15;\nloop invariant i64: i == n ==> a == 3*n - 18;\nloop invariant i65: i == n ==> b == 16;\nloop invariant i66: i == n ==> a == 3*n - 19;\nloop invariant i67: i == n ==> b == 17;\nloop invariant i68: i == n ==> a == 3*n - 20;\nloop invariant i69: i == n ==> b == 18;\nloop invariant i70: i == n ==> a == 3*n - 21;\nloop invariant i71: i == n ==> b == 19;\nloop invariant i72: i == n ==> a == 3*n - 22;\nloop invariant i73: i == n ==> b == 20;\nloop invariant i74: i == n ==> a == 3*n - 23;\nloop invariant i75: i == n ==> b == 21;\nloop invariant i76: i == n ==> a == 3*n - 24;\nloop invariant i77: i == n ==> b == 22;\nloop invariant i78: i == n ==> a == 3*n - 25;\nloop invariant i79: i == n ==> b == 23;\nloop invariant i80: i == n ==> a == 3*n - 26;\nloop invariant i81: i == n ==> b == 24;\nloop invariant i82: i == n ==> a == 3*n - 27;\nloop invariant i83: i == n ==> b == 25;\nloop invariant i84: i == n ==> a == 3*n - 28;\nloop invariant i85: i == n ==> b == 26;\nloop invariant i86: i == n ==> a == 3*n - 29;\nloop invariant i87: a + b == 3 * i;\nloop invariant i88: a <= 3 * n;\nloop invariant i89: b <= 3 * n;\nloop invariant i90: a+b >= 3*i;\nloop invariant i91: a >= b;\nloop invariant i92: a <= 2*b;\nloop invariant i93: b <= 2*a;\nloop invariant i94: a == 2*i + 1 ==> b == 2*i;\nloop invariant i95: a == 2*i ==> b == 2*i + 1;\nloop invariant i96: a == 2*i ==> b >= 2*i;\nloop invariant i97: a >= 2*i ==> b >= 2*i;\nloop invariant i98: a == 2*i ==> b <= 2*i;\nloop invariant i99: a <= 2*i ==> b <= 2*i;\nloop invariant i100: a == 2*i ==> b == 2*i;\nloop invariant i101: a + b >= 3*i;\nloop invariant i102: a + b <= 3*(i + a + b);\nloop invariant i103: a + b == 3*(i + a + b);\nloop invariant i104: (a <= (2*n) && b <= (2*n)) ==> (a+b == 3*i);\nloop invariant i105: (a >= (i) && b >= (i)) ==> (a+b == 3*i);\nloop invariant i106: (a >= (i+1) && b >= (i+1)) ==> (a+b == 3*i+1);\nloop invariant i107: (a >= (i+2) && b >= (i+2)) ==> (a+b == 3*i+2);\nloop invariant i108: (a >= (2*i) && b >= (2*i)) ==> (a+b == 3*i+2);\nloop invariant i109: (a >= (2*i+1) && b >= (2*i+1)) ==> (a+b == 3*i+2);\nloop invariant i110: (a >= (2*i+2) && b >= (2*i+1)) ==> (a+b == 3*i+2);\nloop invariant i111: (a + b) == (i * 3);\nloop invariant i112: (a + b) == (i * 3) ==> (a == (i * 3) / 2) && (b == (i * 3) / 2);\nloop invariant i113: a <= 2*(n-i) + b;\nloop invariant i114: b <= 2*(n-i) + a;\nloop invariant i115: a + b <= 3*i;\nloop invariant i116: a + b <= 3*n;\nloop invariant i117: a == (i * 2) + (b - i);\nloop invariant i118: b == (i * 2) + a;\nloop invariant i119: i + a + b == n * 3;\nloop invariant i120: a <= 2 * n;\nloop invariant i121: b <= 2 * n;\nloop invariant i122: a >= b - n;\nloop invariant i123: a <= b + n;\nloop invariant i124: b >= a - n;\nloop invariant i125: b <= a + n;\nloop invariant i126: a + b >= 2*n;\nloop invariant i127: a + b <= 4*n;\nloop invariant i128: a <= b + 2*n;\nloop invariant i129: b >= a - 2*n;\nloop invariant i130: b <= i;\nloop invariant i131: b <= n;\nloop invariant i132: a <= n;\nloop invariant i133: a+b == 3*i ==> a+b == 3*n;\nloop invariant i134: a+b == 3*i ==> i == n;\nloop invariant i135: a+b == 3*i ==> a == b;\nloop invariant i136: a+b == 3*i ==> a == 2*b;\nloop invariant i137: a+b == 3*i ==> b == i;\nloop invariant i138: a+b == 3*i ==> b == n;\nloop invariant i139: a+b == 3*i ==> a == n;\nloop invariant i140: a+b == 3*i ==> a == 3*n;\nloop invariant i141: a+b == 3*i ==> b == 3*n;\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 43,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\n\nloop invariant i7: 0 <= a <= 2*n;\nloop invariant i8: 0 <= b <= 2*n;\n\nloop invariant i10: i >= 0;\nloop invariant i11: i <= n;\nloop invariant i12: a >= 0;\nloop invariant i13: a <= 3*n;\nloop invariant i14: b >= 0;\nloop invariant i15: b <= 3*n;\nloop invariant i16: a+b == 3*i;\n\nloop invariant i18: b >= i;\nloop invariant i19: a <= i+2*n;\nloop invariant i20: b <= i+n;\nloop invariant i21: a+b <= 3*n;\nloop invariant i22: i == 0 ==> a == 0;\nloop invariant i23: i == 0 ==> b == 0;\nloop invariant i24: i == n ==> a + b == 3*n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i87: a + b == 3 * i;\nloop invariant i88: a <= 3 * n;\nloop invariant i89: b <= 3 * n;\nloop invariant i90: a+b >= 3*i;\n\nloop invariant i92: a <= 2*b;\nloop invariant i93: b <= 2*a;\nloop invariant i94: a == 2*i + 1 ==> b == 2*i;\n\n\n\nloop invariant i98: a == 2*i ==> b <= 2*i;\nloop invariant i99: a <= 2*i ==> b <= 2*i;\n\nloop invariant i101: a + b >= 3*i;\nloop invariant i102: a + b <= 3*(i + a + b);\n\nloop invariant i104: (a <= (2*n) && b <= (2*n)) ==> (a+b == 3*i);\nloop invariant i105: (a >= (i) && b >= (i)) ==> (a+b == 3*i);\n\n\n\nloop invariant i109: (a >= (2*i+1) && b >= (2*i+1)) ==> (a+b == 3*i+2);\nloop invariant i110: (a >= (2*i+2) && b >= (2*i+1)) ==> (a+b == 3*i+2);\nloop invariant i111: (a + b) == (i * 3);\n\n\n\nloop invariant i115: a + b <= 3*i;\nloop invariant i116: a + b <= 3*n;\n\n\n\nloop invariant i120: a <= 2 * n;\nloop invariant i121: b <= 2 * n;\nloop invariant i122: a >= b - n;\nloop invariant i123: a <= b + n;\nloop invariant i124: b >= a - n;\nloop invariant i125: b <= a + n;\n\nloop invariant i127: a + b <= 4*n;\nloop invariant i128: a <= b + 2*n;\nloop invariant i129: b >= a - 2*n;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n\n  }\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 104,
        "success_count": 89,
        "failure_count": 15,
        "success_rate": 0.8557692307692307
    }
}