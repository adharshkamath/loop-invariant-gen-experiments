{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 10 * y;\nloop invariant x % 10 == 0;\nloop invariant y >= 0;\nloop invariant x >= 10 * y;\nloop invariant x < 10 * (y + 1);\nloop invariant y <= z;\nloop invariant x <= z;\nloop invariant y >= z + 1;\nloop invariant x > z;\nloop invariant x >= z + 1;\nloop invariant x <= z + 1;\nloop invariant x == z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x = (10 * y);\nloop invariant y = (z / 10);\nloop invariant x <= z ==> (y <= z);\nloop invariant y >= z + 1 ==> (x > z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; loop invariant x <= (10 * y); loop invariant x <= z + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant unknown_int();\nloop invariant x >= 10 * y;\nloop invariant y <= 10;\nloop invariant unknown_int() ==> 0 <= y;\nloop invariant unknown_int() ==> x >= 10 * y;\nloop invariant unknown_int() ==> y <= 10;\nloop invariant unknown_int() ==> 0 <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000;\nloop invariant 0 <= y <= 100;\nloop invariant x <= y * 10;\nloop invariant y <= x / 10;\nloop invariant x + y >= 10;\nloop invariant x - y <= 100;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 91;\nloop invariant 0 <= y <= 10;\nloop invariant x <= y * 10;\nloop invariant x >= y * 10 + y - 1;\nloop invariant x <= z ==> y >= z + 1;\nloop invariant z + 1 <= y ==> x <= z;\nloop invariant x >= z ==> y <= z + 1;\nloop invariant y >= z + 1 ==> x <= z;\nloop invariant y <= z + 1 ==> x >= z;\nloop invariant y >= z + 1 ==> x <= z;\nloop invariant y <= z + 1 ==> x >= z;\nloop invariant x <= z ==> y >= z + 1;\nloop invariant y >= z + 1 ==> x <= z;\nloop invariant y <= z + 1 ==> x >= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant y <= 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x <= z;\nloop invariant y >= z + 1;\nloop invariant y > 0;\nloop invariant y <= 1;\nloop invariant y == 1;\nloop invariant x >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10 * y;\nloop invariant x == 10 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; loop invariant x >= y * 10; loop invariant x <= y * 10 + z; loop invariant x <= z; loop invariant y >= z + 1; loop invariant y <= z + 1; loop invariant y * 10 + z >= z + 1; loop invariant y * 10 + z <= z + 1; loop invariant y * 10 + z == z + 1; loop invariant y * 10 + z == z + 1 ==> x <= z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000 * 10;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= (y - 1) * y / 2 * 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 10 * y;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant 10 * y <= x;\nloop invariant x >= 10 * y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10 * y;\nloop invariant x % 10 == 0;\nloop invariant y >= 0;\nloop invariant x >= 10 * y;\nloop invariant x < 10 * (y + 1);\nloop invariant y <= z;\nloop invariant x <= z;\nloop invariant y >= z + 1;\nloop invariant x > z;\nloop invariant x >= z + 1;\nloop invariant x <= z + 1;\nloop invariant x == z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\nloop invariant y >= z + 1;\nloop invariant y <= z + 1;\nloop invariant y == z + 1;\nloop invariant x >= 10 * (z + 1);\nloop invariant x <= 10 * (z + 1);\nloop invariant x == 10 * (z + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= x <= 10 * y;\nloop invariant i2: x % 10 == 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 10 * y;\nloop invariant i5: x < 10 * (y + 1);\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x = (10 * y);\nloop invariant y = (z / 10);\nloop invariant x <= z ==> (y <= z);\nloop invariant y >= z + 1 ==> (x > z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x <= (10 * y); loop invariant x <= z + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= y; loop invariant x <= (10 * y); loop invariant x <= z + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\nloop invariant 0 <= x <= INT_MAX;\nloop invariant y >= 0;\nloop invariant (x + y) % 10 == 0;\nloop invariant y % 10 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= x <= INT_MAX;\nloop invariant i2: y >= 0;\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant unknown_int();\nloop invariant x >= 10 * y;\nloop invariant y <= 10;\nloop invariant unknown_int() ==> 0 <= y;\nloop invariant unknown_int() ==> x >= 10 * y;\nloop invariant unknown_int() ==> y <= 10;\nloop invariant unknown_int() ==> 0 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= y;\n\nloop invariant i3: x >= 10 * y;\n\n\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000;\nloop invariant 0 <= y <= 100;\nloop invariant x <= y * 10;\nloop invariant y <= x / 10;\nloop invariant x + y >= 10;\nloop invariant x - y <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\n\nloop invariant i3: x <= y * 10;\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 91;\nloop invariant 0 <= y <= 10;\nloop invariant x <= y * 10;\nloop invariant x >= y * 10 + y - 1;\nloop invariant x <= z ==> y >= z + 1;\nloop invariant z + 1 <= y ==> x <= z;\nloop invariant x >= z ==> y <= z + 1;\nloop invariant y >= z + 1 ==> x <= z;\nloop invariant y <= z + 1 ==> x >= z;\nloop invariant y >= z + 1 ==> x <= z;\nloop invariant y <= z + 1 ==> x >= z;\nloop invariant x <= z ==> y >= z + 1;\nloop invariant y >= z + 1 ==> x <= z;\nloop invariant y <= z + 1 ==> x >= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\n\nloop invariant i3: x <= y * 10;\n\n\n\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y <= 1;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x <= z;\nloop invariant y >= z + 1;\nloop invariant y > 0;\nloop invariant y <= 1;\nloop invariant y == 1;\nloop invariant x >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= y;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10 * y;\nloop invariant x == 10 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= x <= 10 * y;\nloop invariant i2: x == 10 * y;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant x >= y * 10; loop invariant x <= y * 10 + z; loop invariant x <= z; loop invariant y >= z + 1; loop invariant y <= z + 1; loop invariant y * 10 + z >= z + 1; loop invariant y * 10 + z <= z + 1; loop invariant y * 10 + z == z + 1; loop invariant y * 10 + z == z + 1 ==> x <= z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= y; loop invariant x >= y * 10; loop invariant x <= y * 10 + z; loop invariant x <= z; loop invariant y >= z + 1; loop invariant y <= z + 1; loop invariant y * 10 + z >= z + 1; loop invariant y * 10 + z <= z + 1; loop invariant y * 10 + z == z + 1; loop invariant y * 10 + z == z + 1 ==> x <= z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000 * 10;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= (y - 1) * y / 2 * 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 10 * y;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\nloop invariant x >= 10 * y + 9;\nloop invariant x <= 10 * y + 9;\nloop invariant x >= y + 9;\nloop invariant x <= y + 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: x >= 10 * y;\nloop invariant i3: x <= 10 * y + 9;\n\n\n\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant 10 * y <= x;\nloop invariant x >= 10 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: 10 * y <= x;\nloop invariant i3: x >= 10 * y;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 40: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= x <= 10 * y;\nloop invariant i2: x % 10 == 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 10 * y;\nloop invariant i5: x < 10 * (y + 1);\nloop invariant i6: y <= z;\nloop invariant i7: x <= z;\nloop invariant i8: y >= z + 1;\nloop invariant i9: x > z;\nloop invariant i10: x >= z + 1;\nloop invariant i11: x <= z + 1;\nloop invariant i12: x == z + 1;\nloop invariant i13: y == z + 1;\nloop invariant i14: x >= 10 * (z + 1);\nloop invariant i15: x <= 10 * (z + 1);\nloop invariant i16: x == 10 * (z + 1);\nloop invariant i17: y <= z + 1;\nloop invariant i18: 0 <= x <= 100000;\nloop invariant i19: 0 <= y <= 100000;\nloop invariant i20: x = (10 * y);\nloop invariant i21: y = (z / 10);\nloop invariant i22: x <= z ==> (y <= z);\nloop invariant i23: y >= z + 1 ==> (x > z);\nloop invariant i24: 0 <= y; loop invariant x <= (10 * y); loop invariant x <= z + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y;\nloop invariant i25: 0 <= x <= INT_MAX;\nloop invariant i26: (x + y) % 10 == 0;\nloop invariant i27: y % 10 == 0;\nloop invariant i28: 0 <= y;\nloop invariant i29: unknown_int();\nloop invariant i30: y <= 10;\nloop invariant i31: unknown_int() ==> 0 <= y;\nloop invariant i32: unknown_int() ==> x >= 10 * y;\nloop invariant i33: unknown_int() ==> y <= 10;\nloop invariant i34: unknown_int() ==> 0 <= x;\nloop invariant i35: 0 <= x <= 1000;\nloop invariant i36: 0 <= y <= 100;\nloop invariant i37: x <= y * 10;\nloop invariant i38: y <= x / 10;\nloop invariant i39: x + y >= 10;\nloop invariant i40: x - y <= 100;\nloop invariant i41: x >= (1 + (y - 1) * y / 2);\nloop invariant i42: 0 <= x <= 91;\nloop invariant i43: 0 <= y <= 10;\nloop invariant i44: x >= y * 10 + y - 1;\nloop invariant i45: x <= z ==> y >= z + 1;\nloop invariant i46: z + 1 <= y ==> x <= z;\nloop invariant i47: x >= z ==> y <= z + 1;\nloop invariant i48: y >= z + 1 ==> x <= z;\nloop invariant i49: y <= z + 1 ==> x >= z;\nloop invariant i50: y <= 1;\nloop invariant i51: x == 0;\nloop invariant i52: y == 0;\nloop invariant i53: y > 0;\nloop invariant i54: y == 1;\nloop invariant i55: x >= 10;\nloop invariant i56: x == 10 * y;\nloop invariant i57: 0 <= y; loop invariant x >= y * 10; loop invariant x <= y * 10 + z; loop invariant x <= z; loop invariant y >= z + 1; loop invariant y <= z + 1; loop invariant y * 10 + z >= z + 1; loop invariant y * 10 + z <= z + 1; loop invariant y * 10 + z == z + 1; loop invariant y * 10 + z == z + 1 ==> x <= z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z;\nloop invariant i58: 0 <= x <= 100000 * 10;\nloop invariant i59: y <= 100000;\nloop invariant i60: x >= (y - 1) * y / 2 * 10;\nloop invariant i61: x <= 10 * y + 9;\nloop invariant i62: x >= y + 9;\nloop invariant i63: x <= y + 10;\nloop invariant i64: x >= 10 * y + 9;\nloop invariant i65: 10 * y <= x;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: 0 <= x <= 10 * y;\nloop invariant i2: x % 10 == 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 10 * y;\nloop invariant i5: x < 10 * (y + 1);\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: 0 <= x <= 100000;\nloop invariant i19: 0 <= y <= 100000;\n\n\nloop invariant i22: x <= z ==> (y <= z);\nloop invariant i23: y >= z + 1 ==> (x > z);\nloop invariant i24: 0 <= y; loop invariant x <= (10 * y); loop invariant x <= z + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y; loop invariant y >= z; loop invariant x >= y * (y - 1) / 2 + 10 * y;\nloop invariant i25: 0 <= x <= INT_MAX;\nloop invariant i26: (x + y) % 10 == 0;\nloop invariant i27: y % 10 == 0;\nloop invariant i28: 0 <= y;\n\nloop invariant i30: y <= 10;\n\n\n\n\nloop invariant i35: 0 <= x <= 1000;\nloop invariant i36: 0 <= y <= 100;\nloop invariant i37: x <= y * 10;\nloop invariant i38: y <= x / 10;\n\nloop invariant i40: x - y <= 100;\n\nloop invariant i42: 0 <= x <= 91;\nloop invariant i43: 0 <= y <= 10;\nloop invariant i44: x >= y * 10 + y - 1;\n\nloop invariant i46: z + 1 <= y ==> x <= z;\nloop invariant i47: x >= z ==> y <= z + 1;\nloop invariant i48: y >= z + 1 ==> x <= z;\nloop invariant i49: y <= z + 1 ==> x >= z;\nloop invariant i50: y <= 1;\nloop invariant i51: x == 0;\nloop invariant i52: y == 0;\n\n\n\nloop invariant i56: x == 10 * y;\nloop invariant i57: 0 <= y; loop invariant x >= y * 10; loop invariant x <= y * 10 + z; loop invariant x <= z; loop invariant y >= z + 1; loop invariant y <= z + 1; loop invariant y * 10 + z >= z + 1; loop invariant y * 10 + z <= z + 1; loop invariant y * 10 + z == z + 1; loop invariant y * 10 + z == z + 1 ==> x <= z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z; loop invariant y * 10 + z == z + 1 ==> x <= z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z ==> x == z;\nloop invariant i58: 0 <= x <= 100000 * 10;\nloop invariant i59: y <= 100000;\nloop invariant i60: x >= (y - 1) * y / 2 * 10;\nloop invariant i61: x <= 10 * y + 9;\nloop invariant i62: x >= y + 9;\nloop invariant i63: x <= y + 10;\nloop invariant i64: x >= 10 * y + 9;\nloop invariant i65: 10 * y <= x;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\nreturn 0;\n\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 136,
        "success_count": 108,
        "failure_count": 28,
        "success_rate": 0.7941176470588235
    }
}