{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= sn <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= loop1 <= 2147483647;\nloop invariant 0 <= n1 <= 2147483647;\nloop invariant x <= sn;\nloop invariant sn <= x*a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant x % a == 0;\nloop invariant sn == (x / a) * a;\nloop invariant sn >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant sn % a == 0;\nloop invariant x >= 0;\nloop invariant x <= loop1;\nloop invariant sn == x * a;\n*/\n```",
            "```\n/*@\nloop invariant x <= n1;\nloop invariant loop1 <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x <= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x <= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x;\nloop invariant x <= sn/(a);\nloop invariant sn == x*a || sn == 0 ==> (sn == x*a || sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn <= x * a;\nloop invariant 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn == x * a || sn == 0;\nloop invariant 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn <= x * a;\nloop invariant 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn == x * a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant sn == x * a;\nloop invariant sn == 0;\nloop invariant sn == (x*a);\nloop invariant sn == (x*a) || sn == 0;\nloop invariant sn == (x*a) || sn == 0 ==> sn == x*a;\nloop invariant sn == x*a || sn == 0 ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= a;\nloop invariant sn == ((x - a) * a) + a;\nloop invariant sn == ((a * a) * (x / a)) + a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant sn == x * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= (x * a);\nloop invariant sn == x * a;\nloop invariant x >= 0;\nloop invariant a >= 0;\nloop invariant x <= loop1;\nloop invariant sn <= loop1 * a;\nloop invariant sn >= 0;\nloop invariant x <= n1;\nloop invariant sn <= n1 * a;\nloop invariant sn == 0 || sn == x * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x * a;\nloop invariant x == sn / a;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant n1 >= 0;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= x;\nloop invariant n1 <= x;\nloop invariant a == 1;\nloop invariant unknown_uint() >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n1;\nloop invariant x == sn / a;\nloop invariant 0 <= x <= n1 / a;\nloop invariant (sn == x * a) ==> (sn <= n1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 1;\nloop invariant x + a == sn;\nloop invariant x * a == sn;\nloop invariant x * a <= sn;\nloop invariant x * a >= sn;\nloop invariant x * a >= 0;\nloop invariant x * a <= x * a;\nloop invariant x * a >= x * a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant sn == 0;\nloop invariant sn == x * a;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn == x * a ==> sn == 0 ==> x == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= loop1 <= 2147483647;\nloop invariant 0 <= n1 <= 2147483647;\nloop invariant x <= sn;\nloop invariant sn <= x*a || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2147483647;\nloop invariant i2: 0 <= x <= 2147483647;\n\n\nloop invariant i5: x <= sn;\nloop invariant i6: sn <= x*a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant x % a == 0;\nloop invariant sn == (x / a) * a;\nloop invariant sn >= 0;\nloop invariant sn <= loop1 * a;\nloop invariant sn % a == 0;\nloop invariant x >= 0;\nloop invariant x <= loop1;\nloop invariant sn == x * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: x % a == 0;\nloop invariant i3: sn == (x / a) * a;\nloop invariant i4: sn >= 0;\n\nloop invariant i6: sn % a == 0;\nloop invariant i7: x >= 0;\n\nloop invariant i9: sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x <= n1;\nloop invariant loop1 <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant x <= 1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: sn == x * a;\nloop invariant i4: sn >= 0;\nloop invariant i5: sn <= x * a;\nloop invariant i6: x >= 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x <= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant x <= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x;\nloop invariant x <= sn/(a);\nloop invariant sn == x*a || sn == 0 ==> (sn == x*a || sn == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: 0 <= x;\nloop invariant i3: x <= sn/(a);\nloop invariant i4: sn == x*a || sn == 0 ==> (sn == x*a || sn == 0);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn <= x * a;\nloop invariant 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn == x * a || sn == 0;\nloop invariant 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn <= x * a;\nloop invariant 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn == x * a || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant sn == x * a;\nloop invariant sn == 0;\nloop invariant sn == (x*a);\nloop invariant sn == (x*a) || sn == 0;\nloop invariant sn == (x*a) || sn == 0 ==> sn == x*a;\nloop invariant sn == x*a || sn == 0 ==> sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: sn == x * a;\n\nloop invariant i4: sn == (x*a);\nloop invariant i5: sn == (x*a) || sn == 0;\nloop invariant i6: sn == (x*a) || sn == 0 ==> sn == x*a;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= a;\nloop invariant sn == ((x - a) * a) + a;\nloop invariant sn == ((a * a) * (x / a)) + a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: sn == ((x - a) * a) + a;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= loop1;\nloop invariant sn == x * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= (x * a);\nloop invariant sn == x * a;\nloop invariant x >= 0;\nloop invariant a >= 0;\nloop invariant x <= loop1;\nloop invariant sn <= loop1 * a;\nloop invariant sn >= 0;\nloop invariant x <= n1;\nloop invariant sn <= n1 * a;\nloop invariant sn == 0 || sn == x * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: sn == x * a;\nloop invariant i3: x >= 0;\nloop invariant i4: a >= 0;\n\n\nloop invariant i7: sn >= 0;\n\n\nloop invariant i10: sn == 0 || sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x * a;\nloop invariant x == sn / a;\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant n1 >= 0;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= x;\nloop invariant n1 <= x;\nloop invariant a == 1;\nloop invariant unknown_uint() >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x * a;\nloop invariant i2: x == sn / a;\nloop invariant i3: x >= 0;\nloop invariant i4: sn >= 0;\nloop invariant i5: n1 >= 0;\nloop invariant i6: loop1 >= 0;\n\n\nloop invariant i9: a == 1;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n1;\nloop invariant sn == x * a;\nloop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: sn == x * a;\nloop invariant i3: sn >= 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n1;\nloop invariant x == sn / a;\nloop invariant 0 <= x <= n1 / a;\nloop invariant (sn == x * a) ==> (sn <= n1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: x == sn / a;\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 1;\nloop invariant x + a == sn;\nloop invariant x * a == sn;\nloop invariant x * a <= sn;\nloop invariant x * a >= sn;\nloop invariant x * a >= 0;\nloop invariant x * a <= x * a;\nloop invariant x * a >= x * a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\nloop invariant x * a <= sn + a;\nloop invariant x * a >= sn + a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= x;\n\n\nloop invariant i4: x * a == sn;\nloop invariant i5: x * a <= sn;\nloop invariant i6: x * a >= sn;\nloop invariant i7: x * a >= 0;\nloop invariant i8: x * a <= x * a;\nloop invariant i9: x * a >= x * a;\nloop invariant i10: x * a <= sn + a;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant sn == 0;\nloop invariant sn == x * a;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x == 0 ==> sn == 0;\nloop invariant sn == x * a ==> sn == 0 ==> x == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: sn == x * a;\nloop invariant i4: sn == 0 ==> x == 0;\nloop invariant i5: x == 0 ==> sn == 0;\nloop invariant i6: sn == x * a ==> sn == 0 ==> x == 0 ==> sn == 0;\nloop invariant i7: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i8: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i9: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i10: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i11: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i12: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i13: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i14: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i15: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i16: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i17: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i18: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i19: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i20: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i21: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 44: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2147483647;\nloop invariant i2: 0 <= x <= 2147483647;\nloop invariant i3: 0 <= loop1 <= 2147483647;\nloop invariant i4: 0 <= n1 <= 2147483647;\nloop invariant i5: x <= sn;\nloop invariant i6: sn <= x*a || sn == 0;\nloop invariant i7: 0 <= x <= loop1;\nloop invariant i8: x % a == 0;\nloop invariant i9: sn == (x / a) * a;\nloop invariant i10: sn >= 0;\nloop invariant i11: sn <= loop1 * a;\nloop invariant i12: sn % a == 0;\nloop invariant i13: x >= 0;\nloop invariant i14: x <= loop1;\nloop invariant i15: sn == x * a;\nloop invariant i16: x <= n1;\nloop invariant i17: loop1 <= 1;\nloop invariant i18: sn <= x * a;\nloop invariant i19: x <= 1;\nloop invariant i20: 0 <= x <= 100000;\nloop invariant i21: y >= 0;\nloop invariant i22: x >= y;\nloop invariant i23: x <= (1 + (y - 1) * y / 2);\nloop invariant i24: 0 <= sn <= x*a;\nloop invariant i25: 0 <= x;\nloop invariant i26: x <= sn/(a);\nloop invariant i27: sn == x*a || sn == 0 ==> (sn == x*a || sn == 0);\nloop invariant i28: 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn <= x * a;\nloop invariant i29: 1 <= x <= 1 + unknown_uint() * unknown_uint() ==> sn == x * a || sn == 0;\nloop invariant i30: sn == 0;\nloop invariant i31: sn == (x*a);\nloop invariant i32: sn == (x*a) || sn == 0;\nloop invariant i33: sn == (x*a) || sn == 0 ==> sn == x*a;\nloop invariant i34: sn == x*a || sn == 0 ==> sn == 0;\nloop invariant i35: x >= a;\nloop invariant i36: sn == ((x - a) * a) + a;\nloop invariant i37: sn == ((a * a) * (x / a)) + a;\nloop invariant i38: 1 <= sn <= (x * a);\nloop invariant i39: a >= 0;\nloop invariant i40: sn <= n1 * a;\nloop invariant i41: sn == 0 || sn == x * a;\nloop invariant i42: 0 <= sn <= x * a;\nloop invariant i43: x == sn / a;\nloop invariant i44: n1 >= 0;\nloop invariant i45: loop1 >= 0;\nloop invariant i46: loop1 <= x;\nloop invariant i47: n1 <= x;\nloop invariant i48: a == 1;\nloop invariant i49: unknown_uint() >= 0;\nloop invariant i50: 1 <= x <= n1;\nloop invariant i51: 0 <= sn <= n1;\nloop invariant i52: 0 <= x <= n1 / a;\nloop invariant i53: (sn == x * a) ==> (sn <= n1);\nloop invariant i54: x + a == sn;\nloop invariant i55: x * a == sn;\nloop invariant i56: x * a <= sn;\nloop invariant i57: x * a >= sn;\nloop invariant i58: x * a >= 0;\nloop invariant i59: x * a <= x * a;\nloop invariant i60: x * a >= x * a;\nloop invariant i61: x * a <= sn + a;\nloop invariant i62: x * a >= sn + a;\nloop invariant i63: 0 <= x <= 1;\nloop invariant i64: sn == 0 ==> x == 0;\nloop invariant i65: x == 0 ==> sn == 0;\nloop invariant i66: sn == x * a ==> sn == 0 ==> x == 0 ==> sn == 0;\nloop invariant i67: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i68: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i69: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i70: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i71: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i72: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i73: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i74: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i75: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i76: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i77: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i78: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i79: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i80: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i81: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2147483647;\nloop invariant i2: 0 <= x <= 2147483647;\n\n\nloop invariant i5: x <= sn;\nloop invariant i6: sn <= x*a || sn == 0;\n\nloop invariant i8: x % a == 0;\nloop invariant i9: sn == (x / a) * a;\nloop invariant i10: sn >= 0;\n\nloop invariant i12: sn % a == 0;\nloop invariant i13: x >= 0;\n\nloop invariant i15: sn == x * a;\n\n\nloop invariant i18: sn <= x * a;\n\n\n\n\n\nloop invariant i24: 0 <= sn <= x*a;\nloop invariant i25: 0 <= x;\nloop invariant i26: x <= sn/(a);\nloop invariant i27: sn == x*a || sn == 0 ==> (sn == x*a || sn == 0);\n\n\n\nloop invariant i31: sn == (x*a);\nloop invariant i32: sn == (x*a) || sn == 0;\nloop invariant i33: sn == (x*a) || sn == 0 ==> sn == x*a;\n\n\nloop invariant i36: sn == ((x - a) * a) + a;\n\n\nloop invariant i39: a >= 0;\n\nloop invariant i41: sn == 0 || sn == x * a;\nloop invariant i42: 0 <= sn <= x * a;\nloop invariant i43: x == sn / a;\nloop invariant i44: n1 >= 0;\nloop invariant i45: loop1 >= 0;\n\n\nloop invariant i48: a == 1;\n\n\n\n\n\n\nloop invariant i55: x * a == sn;\nloop invariant i56: x * a <= sn;\nloop invariant i57: x * a >= sn;\nloop invariant i58: x * a >= 0;\nloop invariant i59: x * a <= x * a;\nloop invariant i60: x * a >= x * a;\nloop invariant i61: x * a <= sn + a;\n\n\nloop invariant i64: sn == 0 ==> x == 0;\nloop invariant i65: x == 0 ==> sn == 0;\nloop invariant i66: sn == x * a ==> sn == 0 ==> x == 0 ==> sn == 0;\nloop invariant i67: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i68: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i69: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i70: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i71: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i72: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i73: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i74: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i75: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i76: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i77: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i78: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i79: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i80: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i81: sn == x * a ==> x == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 89,
        "success_count": 75,
        "failure_count": 14,
        "success_rate": 0.8426966292134831
    }
}