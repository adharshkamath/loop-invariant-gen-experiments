{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  while ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= i * n;\nloop invariant 0 <= i <= k;\nloop invariant j == i * n;\n*/\n```",
            "```\n/*@\nloop invariant i == k+1;\nloop invariant j == k*(n+1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i*n;\nloop invariant i == 0 ==> j == 0;\nloop invariant i == k ==> j == i*n;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j + n * i <= j + n * k;\nloop invariant i <= k + 1;\nloop invariant j + n * i <= j + n * k + n;\nloop invariant i <= k + 2;\nloop invariant j + n * i <= j + n * k + 2 * n;\nloop invariant i <= k + 3;\nloop invariant j + n * i <= j + n * k + 3 * n;\nloop invariant i <= k + 4;\nloop invariant j + n * i <= j + n * k + 4 * n;\nloop invariant i <= k + 5;\nloop invariant j + n * i <= j + n * k + 5 * n;\nloop invariant i <= k + 6;\nloop invariant j + n * i <= j + n * k + 6 * n;\nloop invariant i <= k + 7;\nloop invariant j + n * i <= j + n * k + 7 * n;\nloop invariant i <= k + 8;\nloop invariant j + n * i <= j + n * k + 8 * n;\nloop invariant i <= k + 9;\nloop invariant j + n * i <= j + n * k + 9 * n;\nloop invariant i <= k + 10;\nloop invariant j + n * i <= j + n * k + 10 * n;\nloop invariant i <= k + 11;\nloop invariant j + n * i <= j + n * k + 11 * n;\nloop invariant i <= k + 12;\nloop invariant j + n * i <= j + n * k + 12 * n;\nloop invariant i <= k + 13;\nloop invariant j + n * i <= j + n * k + 13 * n;\nloop invariant i <= k + 14;\nloop invariant j + n * i <= j + n * k + 14 * n;\nloop invariant i <= k + 15;\nloop invariant j + n * i <= j + n * k + 15 * n;\nloop invariant i <= k + 16;\nloop invariant j + n * i <= j + n * k + 16 * n;\nloop invariant i <= k + 17;\nloop invariant j + n * i <= j + n * k + 17 * n;\nloop invariant i <= k + 18;\nloop invariant j + n * i <= j + n * k + 18 * n;\nloop invariant i <= k + 19;\nloop invariant j + n * i <= j + n * k + 19 * n;\nloop invariant i <= k + 20;\nloop invariant j + n * i <= j + n * k + 20 * n;\nloop invariant i <= k + 21;\nloop invariant j + n * i <= j + n * k + 21 * n;\nloop invariant i <= k + 22;\nloop invariant j + n * i <= j + n * k + 22 * n;\nloop invariant i <= k + 23;\nloop invariant j + n * i <= j + n * k + 23 * n;\nloop invariant i <= k + 24;\nloop invariant j + n * i <= j + n * k + 24 * n;\nloop invariant i <= k + 25;\nloop invariant j + n * i <= j + n * k + 25 * n;\nloop invariant i <= k + 26;\nloop invariant j + n * i <= j + n * k + 26 * n;\nloop invariant i <= k + 27;\nloop invariant j + n * i <= j + n * k + 27 * n;\nloop invariant i <= k + 28;\nloop invariant j + n * i <= j + n * k + 28 * n;\nloop invariant i <= k + 29;\nloop invariant j + n * i <= j + n * k + 29 * n;\nloop invariant i <= k + 30;\nloop invariant j + n * i <= j + n * k + 30 * n;\nloop invariant i <= k + 31;\nloop invariant j + n * i <= j + n * k + 31 * n;\nloop invariant i <= k + 32;\nloop invariant j + n * i <= j + n * k + 32 * n;\nloop invariant i <= k + 33;\nloop invariant j + n * i <= j + n * k + 33 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i * n;\nloop invariant 0 <= i <= k;\nloop invariant j >= n * (i - 1);\nloop invariant j <= n * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i * n;\nloop invariant if (flag == 1) then j = i else j = i * n;\nloop invariant if (flag == 1) then i = k + 1 else i <= k;\nloop invariant if (flag == 1) then j = i else j <= i * n;\nloop invariant if (flag == 1) then i = k + 1 else j <= i * n;\nloop invariant if (flag == 1) then j = i else i <= k;\nloop invariant if (flag == 1) then j = i else j <= i * n;\nloop invariant if (flag == 1) then i = k + 1 else j <= i * n;\nloop invariant if (flag == 1) then j = i else i <= k;\nloop invariant if (flag == 1) then j = i else j <= i * n;\nloop invariant if (flag == 1) then i = k + 1 else j <= i * n;\nloop invariant if (flag == 1) then j = i else i <= k;\nloop invariant if (flag == 1) then j = i else j <= i * n;\nloop invariant if (flag == 1) then i = k + 1 else j <= i * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k * n;\nloop invariant (if flag == 1 then j == i else 0 <= j <= 2 * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= (k+1)*n;\nloop invariant i <= k;\nloop invariant j <= (k+1)*n;\nloop invariant j >= (i-1)*n;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant flag == 1 ==> i == k;\nloop invariant flag == 0 ==> i <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i*n;\nloop invariant i == j / n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 1 <= j <= k*n;\nloop invariant j == i * n;\nloop invariant if (flag == 1) then j == i;\nloop invariant if (flag == 0) then j == i * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j >= 0;\nloop invariant j <= k*n;\nloop invariant j >= n;\nloop invariant j == i*n;\nloop invariant flag == 1 ==> j == i;\nloop invariant flag == 0 ==> j == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= k*n + n;\nloop invariant 0 <= i <= k;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant i <= k ==> 0 <= j <= i * n;\nloop invariant i <= k ==> j == i * n;\nloop invariant i <= k ==> flag == 1 ==> j == i;\nloop invariant i <= k ==> flag == 0 ==> j == i * 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i * n;\nloop invariant 0 <= i <= k;\nloop invariant j == i * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\nloop invariant i3: j == i * n;\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i == k+1;\nloop invariant j == k*(n+1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i*n;\nloop invariant i == 0 ==> j == 0;\nloop invariant i == k ==> j == i*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 68,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j + n * i <= j + n * k;\nloop invariant i <= k + 1;\nloop invariant j + n * i <= j + n * k + n;\nloop invariant i <= k + 2;\nloop invariant j + n * i <= j + n * k + 2 * n;\nloop invariant i <= k + 3;\nloop invariant j + n * i <= j + n * k + 3 * n;\nloop invariant i <= k + 4;\nloop invariant j + n * i <= j + n * k + 4 * n;\nloop invariant i <= k + 5;\nloop invariant j + n * i <= j + n * k + 5 * n;\nloop invariant i <= k + 6;\nloop invariant j + n * i <= j + n * k + 6 * n;\nloop invariant i <= k + 7;\nloop invariant j + n * i <= j + n * k + 7 * n;\nloop invariant i <= k + 8;\nloop invariant j + n * i <= j + n * k + 8 * n;\nloop invariant i <= k + 9;\nloop invariant j + n * i <= j + n * k + 9 * n;\nloop invariant i <= k + 10;\nloop invariant j + n * i <= j + n * k + 10 * n;\nloop invariant i <= k + 11;\nloop invariant j + n * i <= j + n * k + 11 * n;\nloop invariant i <= k + 12;\nloop invariant j + n * i <= j + n * k + 12 * n;\nloop invariant i <= k + 13;\nloop invariant j + n * i <= j + n * k + 13 * n;\nloop invariant i <= k + 14;\nloop invariant j + n * i <= j + n * k + 14 * n;\nloop invariant i <= k + 15;\nloop invariant j + n * i <= j + n * k + 15 * n;\nloop invariant i <= k + 16;\nloop invariant j + n * i <= j + n * k + 16 * n;\nloop invariant i <= k + 17;\nloop invariant j + n * i <= j + n * k + 17 * n;\nloop invariant i <= k + 18;\nloop invariant j + n * i <= j + n * k + 18 * n;\nloop invariant i <= k + 19;\nloop invariant j + n * i <= j + n * k + 19 * n;\nloop invariant i <= k + 20;\nloop invariant j + n * i <= j + n * k + 20 * n;\nloop invariant i <= k + 21;\nloop invariant j + n * i <= j + n * k + 21 * n;\nloop invariant i <= k + 22;\nloop invariant j + n * i <= j + n * k + 22 * n;\nloop invariant i <= k + 23;\nloop invariant j + n * i <= j + n * k + 23 * n;\nloop invariant i <= k + 24;\nloop invariant j + n * i <= j + n * k + 24 * n;\nloop invariant i <= k + 25;\nloop invariant j + n * i <= j + n * k + 25 * n;\nloop invariant i <= k + 26;\nloop invariant j + n * i <= j + n * k + 26 * n;\nloop invariant i <= k + 27;\nloop invariant j + n * i <= j + n * k + 27 * n;\nloop invariant i <= k + 28;\nloop invariant j + n * i <= j + n * k + 28 * n;\nloop invariant i <= k + 29;\nloop invariant j + n * i <= j + n * k + 29 * n;\nloop invariant i <= k + 30;\nloop invariant j + n * i <= j + n * k + 30 * n;\nloop invariant i <= k + 31;\nloop invariant j + n * i <= j + n * k + 31 * n;\nloop invariant i <= k + 32;\nloop invariant j + n * i <= j + n * k + 32 * n;\nloop invariant i <= k + 33;\nloop invariant j + n * i <= j + n * k + 33 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i * n;\nloop invariant 0 <= i <= k;\nloop invariant j >= n * (i - 1);\nloop invariant j <= n * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= j <= i * n;\n\nloop invariant i3: j >= n * (i - 1);\nloop invariant i4: j <= n * i;\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i * n;\nloop invariant if (flag == 1) then j = i else j = i * n;\nloop invariant if (flag == 1) then i = k + 1 else i <= k;\nloop invariant if (flag == 1) then j = i else j <= i * n;\nloop invariant if (flag == 1) then i = k + 1 else j <= i * n;\nloop invariant if (flag == 1) then j = i else i <= k;\nloop invariant if (flag == 1) then j = i else j <= i * n;\nloop invariant if (flag == 1) then i = k + 1 else j <= i * n;\nloop invariant if (flag == 1) then j = i else i <= k;\nloop invariant if (flag == 1) then j = i else j <= i * n;\nloop invariant if (flag == 1) then i = k + 1 else j <= i * n;\nloop invariant if (flag == 1) then j = i else i <= k;\nloop invariant if (flag == 1) then j = i else j <= i * n;\nloop invariant if (flag == 1) then i = k + 1 else j <= i * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k * n;\nloop invariant (if flag == 1 then j == i else 0 <= j <= 2 * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= (k+1)*n;\nloop invariant i <= k;\nloop invariant j <= (k+1)*n;\nloop invariant j >= (i-1)*n;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant flag == 1 ==> i == k;\nloop invariant flag == 0 ==> i <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n\nloop invariant i5: j >= (i-1)*n;\nloop invariant i6: j >= 0;\nloop invariant i7: i >= 0;\nloop invariant i8: n >= 0;\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i*n;\nloop invariant i == j / n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 1 <= j <= k*n;\nloop invariant j == i * n;\nloop invariant if (flag == 1) then j == i;\nloop invariant if (flag == 0) then j == i * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\nloop invariant i3: j == i * n;\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j >= 0;\nloop invariant j <= k*n;\nloop invariant j >= n;\nloop invariant j == i*n;\nloop invariant flag == 1 ==> j == i;\nloop invariant flag == 0 ==> j == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\n\n\nloop invariant i5: j == i*n;\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= k*n + n;\nloop invariant 0 <= i <= k;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k*n + n;\nloop invariant j == i * n;\nloop invariant i <= k ==> j == k * n;\nloop invariant i > k ==> j == k * n + n;\nloop invariant 0 <= i <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\nloop invariant i3: j == i * n;\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant i <= k ==> 0 <= j <= i * n;\nloop invariant i <= k ==> j == i * n;\nloop invariant i <= k ==> flag == 1 ==> j == i;\nloop invariant i <= k ==> flag == 0 ==> j == i * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\n\n\nloop invariant i3: i <= k ==> j == i * n;\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 103: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= j <= i * n;\nloop invariant i2: 0 <= i <= k;\nloop invariant i3: j == i * n;\nloop invariant i4: i == k+1;\nloop invariant i5: j == k*(n+1);\nloop invariant i6: 0 <= j <= i*n;\nloop invariant i7: i == 0 ==> j == 0;\nloop invariant i8: i == k ==> j == i*n;\nloop invariant i9: j + n * i <= j + n * k;\nloop invariant i10: i <= k + 1;\nloop invariant i11: j + n * i <= j + n * k + n;\nloop invariant i12: i <= k + 2;\nloop invariant i13: j + n * i <= j + n * k + 2 * n;\nloop invariant i14: i <= k + 3;\nloop invariant i15: j + n * i <= j + n * k + 3 * n;\nloop invariant i16: i <= k + 4;\nloop invariant i17: j + n * i <= j + n * k + 4 * n;\nloop invariant i18: i <= k + 5;\nloop invariant i19: j + n * i <= j + n * k + 5 * n;\nloop invariant i20: i <= k + 6;\nloop invariant i21: j + n * i <= j + n * k + 6 * n;\nloop invariant i22: i <= k + 7;\nloop invariant i23: j + n * i <= j + n * k + 7 * n;\nloop invariant i24: i <= k + 8;\nloop invariant i25: j + n * i <= j + n * k + 8 * n;\nloop invariant i26: i <= k + 9;\nloop invariant i27: j + n * i <= j + n * k + 9 * n;\nloop invariant i28: i <= k + 10;\nloop invariant i29: j + n * i <= j + n * k + 10 * n;\nloop invariant i30: i <= k + 11;\nloop invariant i31: j + n * i <= j + n * k + 11 * n;\nloop invariant i32: i <= k + 12;\nloop invariant i33: j + n * i <= j + n * k + 12 * n;\nloop invariant i34: i <= k + 13;\nloop invariant i35: j + n * i <= j + n * k + 13 * n;\nloop invariant i36: i <= k + 14;\nloop invariant i37: j + n * i <= j + n * k + 14 * n;\nloop invariant i38: i <= k + 15;\nloop invariant i39: j + n * i <= j + n * k + 15 * n;\nloop invariant i40: i <= k + 16;\nloop invariant i41: j + n * i <= j + n * k + 16 * n;\nloop invariant i42: i <= k + 17;\nloop invariant i43: j + n * i <= j + n * k + 17 * n;\nloop invariant i44: i <= k + 18;\nloop invariant i45: j + n * i <= j + n * k + 18 * n;\nloop invariant i46: i <= k + 19;\nloop invariant i47: j + n * i <= j + n * k + 19 * n;\nloop invariant i48: i <= k + 20;\nloop invariant i49: j + n * i <= j + n * k + 20 * n;\nloop invariant i50: i <= k + 21;\nloop invariant i51: j + n * i <= j + n * k + 21 * n;\nloop invariant i52: i <= k + 22;\nloop invariant i53: j + n * i <= j + n * k + 22 * n;\nloop invariant i54: i <= k + 23;\nloop invariant i55: j + n * i <= j + n * k + 23 * n;\nloop invariant i56: i <= k + 24;\nloop invariant i57: j + n * i <= j + n * k + 24 * n;\nloop invariant i58: i <= k + 25;\nloop invariant i59: j + n * i <= j + n * k + 25 * n;\nloop invariant i60: i <= k + 26;\nloop invariant i61: j + n * i <= j + n * k + 26 * n;\nloop invariant i62: i <= k + 27;\nloop invariant i63: j + n * i <= j + n * k + 27 * n;\nloop invariant i64: i <= k + 28;\nloop invariant i65: j + n * i <= j + n * k + 28 * n;\nloop invariant i66: i <= k + 29;\nloop invariant i67: j + n * i <= j + n * k + 29 * n;\nloop invariant i68: i <= k + 30;\nloop invariant i69: j + n * i <= j + n * k + 30 * n;\nloop invariant i70: i <= k + 31;\nloop invariant i71: j + n * i <= j + n * k + 31 * n;\nloop invariant i72: i <= k + 32;\nloop invariant i73: j + n * i <= j + n * k + 32 * n;\nloop invariant i74: i <= k + 33;\nloop invariant i75: j + n * i <= j + n * k + 33 * n;\nloop invariant i76: j >= n * (i - 1);\nloop invariant i77: j <= n * i;\nloop invariant i78: if (flag == 1) then j = i else j = i * n;\nloop invariant i79: if (flag == 1) then i = k + 1 else i <= k;\nloop invariant i80: if (flag == 1) then j = i else j <= i * n;\nloop invariant i81: if (flag == 1) then i = k + 1 else j <= i * n;\nloop invariant i82: if (flag == 1) then j = i else i <= k;\nloop invariant i83: 0 <= j <= k * n;\nloop invariant i84: (if flag == 1 then j == i else 0 <= j <= 2 * i);\nloop invariant i85: 0 <= j <= (k+1)*n;\nloop invariant i86: i <= k;\nloop invariant i87: j <= (k+1)*n;\nloop invariant i88: j >= (i-1)*n;\nloop invariant i89: j >= 0;\nloop invariant i90: i >= 0;\nloop invariant i91: n >= 0;\nloop invariant i92: flag == 1 ==> i == k;\nloop invariant i93: flag == 0 ==> i <= k;\nloop invariant i94: i == j / n;\nloop invariant i95: 1 <= j <= k*n;\nloop invariant i96: if (flag == 1) then j == i;\nloop invariant i97: if (flag == 0) then j == i * n;\nloop invariant i98: j <= k*n;\nloop invariant i99: j >= n;\nloop invariant i100: j == i*n;\nloop invariant i101: flag == 1 ==> j == i;\nloop invariant i102: flag == 0 ==> j == i;\nloop invariant i103: 0 <= j <= k*n + n;\nloop invariant i104: i <= k ==> j == k * n;\nloop invariant i105: i > k ==> j == k * n + n;\nloop invariant i106: i <= k ==> 0 <= j <= i * n;\nloop invariant i107: i <= k ==> j == i * n;\nloop invariant i108: i <= k ==> flag == 1 ==> j == i;\nloop invariant i109: i <= k ==> flag == 0 ==> j == i * 2;\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
        "combined_annotation_num_solver_calls": 79,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= j <= i * n;\n\nloop invariant i3: j == i * n;\n\n\nloop invariant i6: 0 <= j <= i*n;\nloop invariant i7: i == 0 ==> j == 0;\nloop invariant i8: i == k ==> j == i*n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i76: j >= n * (i - 1);\nloop invariant i77: j <= n * i;\n\n\n\n\n\n\n\n\n\n\nloop invariant i88: j >= (i-1)*n;\nloop invariant i89: j >= 0;\nloop invariant i90: i >= 0;\nloop invariant i91: n >= 0;\n\n\n\n\n\n\n\n\nloop invariant i100: j == i*n;\n\n\n\n\n\nloop invariant i106: i <= k ==> 0 <= j <= i * n;\nloop invariant i107: i <= k ==> j == i * n;\n\n\n*/\nwhile ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c"
        ],
        "skipped": [],
        "total": 123,
        "success_count": 101,
        "failure_count": 22,
        "success_rate": 0.8211382113821138
    }
}