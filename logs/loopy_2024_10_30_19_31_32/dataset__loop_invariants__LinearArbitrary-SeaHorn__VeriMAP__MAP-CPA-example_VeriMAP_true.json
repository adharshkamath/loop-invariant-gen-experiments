{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  while (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\nloop invariant i == a;\nloop invariant i == 20 ==> a == 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a ==> i == a;\nloop invariant i < 20 ==> i < a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i <= 20 ==> a <= 20;\nloop invariant 0 <= a ==> i <= a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant a == i;\nloop invariant a == 20;\nloop invariant i == 20;\nloop invariant a == 20;\nloop invariant i == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant i == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant a >= 0;\nloop invariant a <= 20;\nloop invariant a = i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\nloop invariant (if (i < 20) then (i == a) else (a == 20));\nloop invariant (if (i < 20) then (a == 20) else (a <= i));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i == a ==> i != 20;\nloop invariant i == a ==> i >= 0;\nloop invariant i == a ==> a >= 0;\nloop invariant i == a ==> i <= 20;\nloop invariant i == a ==> a <= 20;\nloop invariant i != a ==> i != 20;\nloop invariant i != a ==> i >= 0;\nloop invariant i != a ==> a >= 0;\nloop invariant i != a ==> i <= 20;\nloop invariant i != a ==> a <= 20;\nloop invariant i == 20 ==> i == a;\nloop invariant i == 20 ==> a == 20;\nloop invariant i == 20 ==> i >= 0;\nloop invariant i == 20 ==> a >= 0;\nloop invariant i == 20 ==> i <= 20;\nloop invariant i == 20 ==> a <= 20;\nloop invariant i != 20 ==> i != a;\nloop invariant i != 20 ==> i >= 0;\nloop invariant i != 20 ==> a >= 0;\nloop invariant i != 20 ==> i <= 20;\nloop invariant i != 20 ==> a <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= i;\nloop invariant i <= a + 1;\nloop invariant a <= 20;\nloop invariant i == 20 ==> a == 20;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 21;\nloop invariant 0 <= a <= 20;\nloop invariant (i == a) ==> (a == 0);\nloop invariant (i == a) ==> (i == 0);\nloop invariant (i == a) ==> (i == 1);\nloop invariant (i == a) ==> (i == 2);\nloop invariant (i == a) ==> (i == 3);\nloop invariant (i == a) ==> (i == 4);\nloop invariant (i == a) ==> (i == 5);\nloop invariant (i == a) ==> (i == 6);\nloop invariant (i == a) ==> (i == 7);\nloop invariant (i == a) ==> (i == 8);\nloop invariant (i == a) ==> (i == 9);\nloop invariant (i == a) ==> (i == 10);\nloop invariant (i == a) ==> (i == 11);\nloop invariant (i == a) ==> (i == 12);\nloop invariant (i == a) ==> (i == 13);\nloop invariant (i == a) ==> (i == 14);\nloop invariant (i == a) ==> (i == 15);\nloop invariant (i == a) ==> (i == 16);\nloop invariant (i == a) ==> (i == 17);\nloop invariant (i == a) ==> (i == 18);\nloop invariant (i == a) ==> (i == 19);\nloop invariant (i == a) ==> (i == 20);\nloop invariant (i == a) ==> (i == 21);\nloop invariant (i == a) ==> (a == 1);\nloop invariant (i == a) ==> (a == 2);\nloop invariant (i == a) ==> (a == 3);\nloop invariant (i == a) ==> (a == 4);\nloop invariant (i == a) ==> (a == 5);\nloop invariant (i == a) ==> (a == 6);\nloop invariant (i == a) ==> (a == 7);\nloop invariant (i == a) ==> (a == 8);\nloop invariant (i == a) ==> (a == 9);\nloop invariant (i == a) ==> (a == 10);\nloop invariant (i == a) ==> (a == 11);\nloop invariant (i == a) ==> (a == 12);\nloop invariant (i == a) ==> (a == 13);\nloop invariant (i == a) ==> (a == 14);\nloop invariant (i == a) ==> (a == 15);\nloop invariant (i == a) ==> (a == 16);\nloop invariant (i == a) ==> (a == 17);\nloop invariant (i == a) ==> (a == 18);\nloop invariant (i == a) ==> (a == 19);\nloop invariant (i == a) ==> (a == 20);\nloop invariant (i == a) ==> (a == 21);\nloop invariant (i == a) ==> (i == 2);\nloop invariant (i == a) ==> (i == 3);\nloop invariant (i == a) ==> (i == 4);\nloop invariant (i == a) ==> (i == 5);\nloop invariant (i == a) ==> (i == 6);\nloop invariant (i == a) ==> (i == 7);\nloop invariant (i == a) ==> (i == 8);\nloop invariant (i == a) ==> (i == 9);\nloop invariant (i == a) ==> (i == 10);\nloop invariant (i == a) ==> (i == 11);\nloop invariant (i == a) ==> (i == 12);\nloop invariant (i == a) ==> (i == 13);\nloop invariant (i == a) ==> (i == 14);\nloop invariant (i == a) ==> (i == 15);\nloop invariant (i == a) ==> (i == 16);\nloop invariant (i == a) ==> (i == 17);\nloop invariant (i == a) ==> (i == 18);\nloop invariant (i == a) ==> (i == 19);\nloop invariant (i == a) ==> (i == 20);\nloop invariant (i == a) ==> (a == 2);\nloop invariant (i == a) ==> (a == 3);\nloop invariant (i == a) ==> (a == 4);\nloop invariant (i == a) ==> (a == 5);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a <= i;\nloop invariant i <= a;\nloop invariant a <= 20;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant a = i;\nloop invariant a = 20 ==> i = 20;\nloop invariant i = 20 ==> a = 20;\nloop invariant ! (a = 20) ==> ! (i = 20);\nloop invariant a = 20 ==> i = 20 && a = 20;\n*/\n```",
            "```\n/*@\nloop invariant i <= 20;\nloop invariant a >= 0;\nloop invariant a <= i;\nloop invariant a >= i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i == 20 ==> a == 20;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\nloop invariant i == a;\nloop invariant i == 20 ==> a == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\n\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i <= a;\nloop invariant i4: i == a;\nloop invariant i5: i == 20 ==> a == 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a ==> i == a;\nloop invariant i < 20 ==> i < a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i <= a ==> i == a;\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i <= a;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i <= 20 ==> a <= 20;\nloop invariant 0 <= a ==> i <= a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i == a;\nloop invariant i4: i <= 20 ==> a <= 20;\nloop invariant i5: 0 <= a ==> i <= a;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i == a;\nloop invariant i4: i >= 0;\nloop invariant i5: a >= 0;\nloop invariant i6: i <= 20;\nloop invariant i7: a <= 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant a == i;\nloop invariant a == 20;\nloop invariant i == 20;\nloop invariant a == 20;\nloop invariant i == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant i == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\nloop invariant a == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: i <= 20;\nloop invariant i2: a <= 20;\nloop invariant i3: i >= 0;\nloop invariant i4: a >= 0;\nloop invariant i5: a == i;\n\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant a >= 0;\nloop invariant a <= 20;\nloop invariant a = i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: a >= 0;\nloop invariant i3: a <= 20;\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i <= a;\nloop invariant (if (i < 20) then (i == a) else (a == 20));\nloop invariant (if (i < 20) then (a == 20) else (a <= i));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\nloop invariant (if (i < 20) then (a == i) else (a == 20));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\n\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i <= a;\n\n\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant i == a ==> i != 20;\nloop invariant i == a ==> i >= 0;\nloop invariant i == a ==> a >= 0;\nloop invariant i == a ==> i <= 20;\nloop invariant i == a ==> a <= 20;\nloop invariant i != a ==> i != 20;\nloop invariant i != a ==> i >= 0;\nloop invariant i != a ==> a >= 0;\nloop invariant i != a ==> i <= 20;\nloop invariant i != a ==> a <= 20;\nloop invariant i == 20 ==> i == a;\nloop invariant i == 20 ==> a == 20;\nloop invariant i == 20 ==> i >= 0;\nloop invariant i == 20 ==> a >= 0;\nloop invariant i == 20 ==> i <= 20;\nloop invariant i == 20 ==> a <= 20;\nloop invariant i != 20 ==> i != a;\nloop invariant i != 20 ==> i >= 0;\nloop invariant i != 20 ==> a >= 0;\nloop invariant i != 20 ==> i <= 20;\nloop invariant i != 20 ==> a <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i == a;\nloop invariant i4: i >= 0;\nloop invariant i5: a >= 0;\nloop invariant i6: i <= 20;\nloop invariant i7: a <= 20;\n\nloop invariant i9: i == a ==> i >= 0;\nloop invariant i10: i == a ==> a >= 0;\nloop invariant i11: i == a ==> i <= 20;\nloop invariant i12: i == a ==> a <= 20;\nloop invariant i13: i != a ==> i != 20;\nloop invariant i14: i != a ==> i >= 0;\nloop invariant i15: i != a ==> a >= 0;\nloop invariant i16: i != a ==> i <= 20;\nloop invariant i17: i != a ==> a <= 20;\nloop invariant i18: i == 20 ==> i == a;\nloop invariant i19: i == 20 ==> a == 20;\nloop invariant i20: i == 20 ==> i >= 0;\nloop invariant i21: i == 20 ==> a >= 0;\nloop invariant i22: i == 20 ==> i <= 20;\nloop invariant i23: i == 20 ==> a <= 20;\n\nloop invariant i25: i != 20 ==> i >= 0;\nloop invariant i26: i != 20 ==> a >= 0;\nloop invariant i27: i != 20 ==> i <= 20;\nloop invariant i28: i != 20 ==> a <= 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= i;\nloop invariant i <= a + 1;\nloop invariant a <= 20;\nloop invariant i == 20 ==> a == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= i;\nloop invariant i3: i <= a + 1;\nloop invariant i4: a <= 20;\nloop invariant i5: i == 20 ==> a == 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 46,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 21;\nloop invariant 0 <= a <= 20;\nloop invariant (i == a) ==> (a == 0);\nloop invariant (i == a) ==> (i == 0);\nloop invariant (i == a) ==> (i == 1);\nloop invariant (i == a) ==> (i == 2);\nloop invariant (i == a) ==> (i == 3);\nloop invariant (i == a) ==> (i == 4);\nloop invariant (i == a) ==> (i == 5);\nloop invariant (i == a) ==> (i == 6);\nloop invariant (i == a) ==> (i == 7);\nloop invariant (i == a) ==> (i == 8);\nloop invariant (i == a) ==> (i == 9);\nloop invariant (i == a) ==> (i == 10);\nloop invariant (i == a) ==> (i == 11);\nloop invariant (i == a) ==> (i == 12);\nloop invariant (i == a) ==> (i == 13);\nloop invariant (i == a) ==> (i == 14);\nloop invariant (i == a) ==> (i == 15);\nloop invariant (i == a) ==> (i == 16);\nloop invariant (i == a) ==> (i == 17);\nloop invariant (i == a) ==> (i == 18);\nloop invariant (i == a) ==> (i == 19);\nloop invariant (i == a) ==> (i == 20);\nloop invariant (i == a) ==> (i == 21);\nloop invariant (i == a) ==> (a == 1);\nloop invariant (i == a) ==> (a == 2);\nloop invariant (i == a) ==> (a == 3);\nloop invariant (i == a) ==> (a == 4);\nloop invariant (i == a) ==> (a == 5);\nloop invariant (i == a) ==> (a == 6);\nloop invariant (i == a) ==> (a == 7);\nloop invariant (i == a) ==> (a == 8);\nloop invariant (i == a) ==> (a == 9);\nloop invariant (i == a) ==> (a == 10);\nloop invariant (i == a) ==> (a == 11);\nloop invariant (i == a) ==> (a == 12);\nloop invariant (i == a) ==> (a == 13);\nloop invariant (i == a) ==> (a == 14);\nloop invariant (i == a) ==> (a == 15);\nloop invariant (i == a) ==> (a == 16);\nloop invariant (i == a) ==> (a == 17);\nloop invariant (i == a) ==> (a == 18);\nloop invariant (i == a) ==> (a == 19);\nloop invariant (i == a) ==> (a == 20);\nloop invariant (i == a) ==> (a == 21);\nloop invariant (i == a) ==> (i == 2);\nloop invariant (i == a) ==> (i == 3);\nloop invariant (i == a) ==> (i == 4);\nloop invariant (i == a) ==> (i == 5);\nloop invariant (i == a) ==> (i == 6);\nloop invariant (i == a) ==> (i == 7);\nloop invariant (i == a) ==> (i == 8);\nloop invariant (i == a) ==> (i == 9);\nloop invariant (i == a) ==> (i == 10);\nloop invariant (i == a) ==> (i == 11);\nloop invariant (i == a) ==> (i == 12);\nloop invariant (i == a) ==> (i == 13);\nloop invariant (i == a) ==> (i == 14);\nloop invariant (i == a) ==> (i == 15);\nloop invariant (i == a) ==> (i == 16);\nloop invariant (i == a) ==> (i == 17);\nloop invariant (i == a) ==> (i == 18);\nloop invariant (i == a) ==> (i == 19);\nloop invariant (i == a) ==> (i == 20);\nloop invariant (i == a) ==> (a == 2);\nloop invariant (i == a) ==> (a == 3);\nloop invariant (i == a) ==> (a == 4);\nloop invariant (i == a) ==> (a == 5);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\n\nloop invariant i2: 0 <= a <= 20;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i >= 0;\nloop invariant a >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a <= i;\nloop invariant i <= a;\nloop invariant a <= 20;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\nloop invariant a >= 0;\nloop invariant i >= 0;\nloop invariant i <= 20;\nloop invariant a <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\n\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i == a;\nloop invariant i4: i >= 0;\nloop invariant i5: a >= 0;\nloop invariant i6: i <= 20;\nloop invariant i7: a <= 20;\nloop invariant i8: a <= i;\nloop invariant i9: i <= a;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant a = i;\nloop invariant a = 20 ==> i = 20;\nloop invariant i = 20 ==> a = 20;\nloop invariant ! (a = 20) ==> ! (i = 20);\nloop invariant a = 20 ==> i = 20 && a = 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\n\nloop invariant i2: 0 <= a <= 20;\n\n\n\n\n\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= 20;\nloop invariant a >= 0;\nloop invariant a <= i;\nloop invariant a >= i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: i <= 20;\nloop invariant i2: a >= 0;\nloop invariant i3: a <= i;\nloop invariant i4: a >= i - 1;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 20;\nloop invariant 0 <= a <= 20;\nloop invariant i == a;\nloop invariant i == 20 ==> a == 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i == a;\nloop invariant i4: i == 20 ==> a == 20;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 29: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\nloop invariant i1: 1 <= i <= 20;\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i <= a;\nloop invariant i4: i == a;\nloop invariant i5: i == 20 ==> a == 20;\nloop invariant i6: 0 <= i <= 20;\nloop invariant i7: i <= a ==> i == a;\nloop invariant i8: i < 20 ==> i < a;\nloop invariant i9: i <= 20 ==> a <= 20;\nloop invariant i10: 0 <= a ==> i <= a;\nloop invariant i11: i >= 0;\nloop invariant i12: a >= 0;\nloop invariant i13: i <= 20;\nloop invariant i14: a <= 20;\nloop invariant i15: a == i;\nloop invariant i16: a == 20;\nloop invariant i17: i == 20;\nloop invariant i18: a = i;\nloop invariant i19: (if (i < 20) then (i == a) else (a == 20));\nloop invariant i20: (if (i < 20) then (a == 20) else (a <= i));\nloop invariant i21: (if (i < 20) then (a == i) else (a == 20));\nloop invariant i22: i == a ==> i != 20;\nloop invariant i23: i == a ==> i >= 0;\nloop invariant i24: i == a ==> a >= 0;\nloop invariant i25: i == a ==> i <= 20;\nloop invariant i26: i == a ==> a <= 20;\nloop invariant i27: i != a ==> i != 20;\nloop invariant i28: i != a ==> i >= 0;\nloop invariant i29: i != a ==> a >= 0;\nloop invariant i30: i != a ==> i <= 20;\nloop invariant i31: i != a ==> a <= 20;\nloop invariant i32: i == 20 ==> i == a;\nloop invariant i33: i == 20 ==> i >= 0;\nloop invariant i34: i == 20 ==> a >= 0;\nloop invariant i35: i == 20 ==> i <= 20;\nloop invariant i36: i == 20 ==> a <= 20;\nloop invariant i37: i != 20 ==> i != a;\nloop invariant i38: i != 20 ==> i >= 0;\nloop invariant i39: i != 20 ==> a >= 0;\nloop invariant i40: i != 20 ==> i <= 20;\nloop invariant i41: i != 20 ==> a <= 20;\nloop invariant i42: 0 <= a <= i;\nloop invariant i43: i <= a + 1;\nloop invariant i44: 1 <= i <= 21;\nloop invariant i45: (i == a) ==> (a == 0);\nloop invariant i46: (i == a) ==> (i == 0);\nloop invariant i47: (i == a) ==> (i == 1);\nloop invariant i48: (i == a) ==> (i == 2);\nloop invariant i49: (i == a) ==> (i == 3);\nloop invariant i50: (i == a) ==> (i == 4);\nloop invariant i51: (i == a) ==> (i == 5);\nloop invariant i52: (i == a) ==> (i == 6);\nloop invariant i53: (i == a) ==> (i == 7);\nloop invariant i54: (i == a) ==> (i == 8);\nloop invariant i55: (i == a) ==> (i == 9);\nloop invariant i56: (i == a) ==> (i == 10);\nloop invariant i57: (i == a) ==> (i == 11);\nloop invariant i58: (i == a) ==> (i == 12);\nloop invariant i59: (i == a) ==> (i == 13);\nloop invariant i60: (i == a) ==> (i == 14);\nloop invariant i61: (i == a) ==> (i == 15);\nloop invariant i62: (i == a) ==> (i == 16);\nloop invariant i63: (i == a) ==> (i == 17);\nloop invariant i64: (i == a) ==> (i == 18);\nloop invariant i65: (i == a) ==> (i == 19);\nloop invariant i66: (i == a) ==> (i == 20);\nloop invariant i67: (i == a) ==> (i == 21);\nloop invariant i68: (i == a) ==> (a == 1);\nloop invariant i69: (i == a) ==> (a == 2);\nloop invariant i70: (i == a) ==> (a == 3);\nloop invariant i71: (i == a) ==> (a == 4);\nloop invariant i72: (i == a) ==> (a == 5);\nloop invariant i73: (i == a) ==> (a == 6);\nloop invariant i74: (i == a) ==> (a == 7);\nloop invariant i75: (i == a) ==> (a == 8);\nloop invariant i76: (i == a) ==> (a == 9);\nloop invariant i77: (i == a) ==> (a == 10);\nloop invariant i78: (i == a) ==> (a == 11);\nloop invariant i79: (i == a) ==> (a == 12);\nloop invariant i80: (i == a) ==> (a == 13);\nloop invariant i81: (i == a) ==> (a == 14);\nloop invariant i82: (i == a) ==> (a == 15);\nloop invariant i83: (i == a) ==> (a == 16);\nloop invariant i84: (i == a) ==> (a == 17);\nloop invariant i85: (i == a) ==> (a == 18);\nloop invariant i86: (i == a) ==> (a == 19);\nloop invariant i87: (i == a) ==> (a == 20);\nloop invariant i88: (i == a) ==> (a == 21);\nloop invariant i89: a <= i;\nloop invariant i90: a = 20 ==> i = 20;\nloop invariant i91: i = 20 ==> a = 20;\nloop invariant i92: ! (a = 20) ==> ! (i = 20);\nloop invariant i93: a = 20 ==> i = 20 && a = 20;\nloop invariant i94: a >= i - 1;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
        "combined_annotation_num_solver_calls": 60,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  /*@\n\nloop invariant i2: 0 <= a <= 20;\nloop invariant i3: i <= a;\nloop invariant i4: i == a;\nloop invariant i5: i == 20 ==> a == 20;\nloop invariant i6: 0 <= i <= 20;\nloop invariant i7: i <= a ==> i == a;\n\nloop invariant i9: i <= 20 ==> a <= 20;\nloop invariant i10: 0 <= a ==> i <= a;\nloop invariant i11: i >= 0;\nloop invariant i12: a >= 0;\nloop invariant i13: i <= 20;\nloop invariant i14: a <= 20;\nloop invariant i15: a == i;\n\n\n\n\n\n\n\nloop invariant i23: i == a ==> i >= 0;\nloop invariant i24: i == a ==> a >= 0;\nloop invariant i25: i == a ==> i <= 20;\nloop invariant i26: i == a ==> a <= 20;\nloop invariant i27: i != a ==> i != 20;\nloop invariant i28: i != a ==> i >= 0;\nloop invariant i29: i != a ==> a >= 0;\nloop invariant i30: i != a ==> i <= 20;\nloop invariant i31: i != a ==> a <= 20;\nloop invariant i32: i == 20 ==> i == a;\nloop invariant i33: i == 20 ==> i >= 0;\nloop invariant i34: i == 20 ==> a >= 0;\nloop invariant i35: i == 20 ==> i <= 20;\nloop invariant i36: i == 20 ==> a <= 20;\n\nloop invariant i38: i != 20 ==> i >= 0;\nloop invariant i39: i != 20 ==> a >= 0;\nloop invariant i40: i != 20 ==> i <= 20;\nloop invariant i41: i != 20 ==> a <= 20;\nloop invariant i42: 0 <= a <= i;\nloop invariant i43: i <= a + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i89: a <= i;\n\n\n\n\nloop invariant i94: a >= i - 1;\n*/\nwhile (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  return (-1);\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 1,
        "success_count": 1,
        "failure_count": 0,
        "success_rate": 1.0
    }
}