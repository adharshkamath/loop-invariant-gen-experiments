{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf <= buflim;\nloop invariant buf <= in;\nloop invariant buf <= inlen;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen; loop invariant 0 <= buf <= buflim; loop invariant buflim <= bufferlen - 1; loop invariant 0 <= buflim <= bufferlen - 2; loop invariant buflim == bufferlen - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= inlen <= unknown_int();\nloop invariant 0 <= bufferlen <= unknown_int();\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= buf < bufferlen;\nloop invariant 1 <= in <= inlen;\nloop invariant buf <= buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant unknown_int() ==> in < inlen;\nloop invariant unknown_int() ==> buf < bufferlen;\nloop invariant unknown_int() ==> buf <= buflim;\nloop invariant unknown_int() ==> buf == in || buf < in;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 1 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf + 2 <= bufferlen;\nloop invariant in + 2 <= inlen;\nloop invariant buflim < bufferlen;\nloop invariant in < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant in < inlen;\nloop invariant (unknown_int()) ==> (buf == buflim);\nloop invariant (unknown_int()) ==> (buf < bufferlen);\nloop invariant (unknown_int()) ==> (0 <= buf);\nloop invariant (unknown_int()) ==> (0 <= in);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (unknown_int());\nloop invariant (unknown_int()) ==> (buf < bufferlen);\nloop invariant (unknown_int()) ==> (0 <= buf);\nloop invariant (unknown_int()) ==> (0 <= in);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= bufferlen;\nloop invariant in < inlen;\nloop invariant buf < bufferlen;\nloop invariant buflim = bufferlen - 2;\nloop invariant buf <= buflim ==> unknown_int();\nloop invariant buf == buflim ==> (unknown_int() ==> buf == buflim);\nloop invariant buf < buflim ==> unknown_int() ==> buf < buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= buf <= buflim + 1;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= in <= buflim;\nloop invariant 0 <= in <= buf;\nloop invariant 0 <= buf <= in;\nloop invariant buf <= in + 1;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant buflim < inlen;\nloop invariant buf <= buflim + 1;\nloop invariant buf <= buflim + 2;\nloop invariant buf <= bufferlen - 1;\nloop invariant buf <= bufferlen;\nloop invariant bufferlen <= buflim + 1;\nloop invariant buflim <= bufferlen - 2;\nloop invariant buflim <= bufferlen - 1;\nloop invariant buflim <= bufferlen;\nloop invariant buf < bufferlen - 1;\nloop invariant in < inlen - 1;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 3;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 4;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 5;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 6;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 7;\nloop invariant buflim < bufferlen - 7;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 8;\nloop invariant buflim < bufferlen - 8;\nloop invariant buflim < bufferlen - 7;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 9;\nloop invariant buflim < bufferlen - 9;\nloop invariant buflim < bufferlen - 8;\nloop invariant buflim < bufferlen - 7;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 10;\nloop invariant buflim < bufferlen - 10;\nloop invariant buflim < bufferlen - 9;\nloop invariant buflim < bufferlen - 8;\nloop invariant buflim < bufferlen - 7;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 11;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf <= buflim ==> in < inlen;\nloop invariant buf <= buflim ==> (buf + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 1) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 2) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 3) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 4) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 5) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 6) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 7) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 8) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 9) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 10) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 11) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 12) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 13) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 14) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 15) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 16) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 17) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 18) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 19) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 20) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 21) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 22) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 23) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 24) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 25) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 26) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 27) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 28) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 29) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 30) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 31) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 32) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 33) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 34) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 35) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 36) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 37) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 38) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 39) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 40) + 1) <= inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> in < buflen;\nloop invariant unknown_int() ==> buf <= buflim;\nloop invariant unknown_int() ==> in < inlen;\nloop invariant unknown_int() ==> in < buflen;\nloop invariant unknown_int() ==> buf < bufferlen;\nloop invariant unknown_int() ==> buf < buflen;\nloop invariant unknown_int() ==> buf <= buflim;\nloop invariant unknown_int() ==> buf < bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant unknown_int() ==> in < inlen;\nloop invariant unknown_int() ==> buf < bufferlen;\nloop invariant unknown_int() ==> buflim < bufferlen;\nloop invariant unknown_int() ==> buf <= buflim;\nloop invariant unknown_int() ==> buf <= buflim + 1;\nloop invariant unknown_int() ==> buf <= buflim + 2;\nloop invariant unknown_int() ==> buf <= buflim + 3;\nloop invariant unknown_int() ==> buf <= buflim + 4;\nloop invariant unknown_int() ==> buf <= buflim + 5;\nloop invariant unknown_int() ==> buf <= buflim + 6;\nloop invariant unknown_int() ==> buf <= buflim + 7;\nloop invariant unknown_int() ==> buf <= buflim + 8;\nloop invariant unknown_int() ==> buf <= buflim + 9;\nloop invariant unknown_int() ==> buf <= buflim + 10;\nloop invariant unknown_int() ==> buf <= buflim + 11;\nloop invariant unknown_int() ==> buf <= buflim + 12;\nloop invariant unknown_int() ==> buf <= buflim + 13;\nloop invariant unknown_int() ==> buf <= buflim + 14;\nloop invariant unknown_int() ==> buf <= buflim + 15;\nloop invariant unknown_int() ==> buf <= buflim + 16;\nloop invariant unknown_int() ==> buf <= buflim + 17;\nloop invariant unknown_int() ==> buf <= buflim + 18;\nloop invariant unknown_int() ==> buf <= buflim + 19;\nloop invariant unknown_int() ==> buf <= buflim + 20;\nloop invariant unknown_int() ==> buf <= buflim + 21;\nloop invariant unknown_int() ==> buf <= buflim + 22;\nloop invariant unknown_int() ==> buf <= buflim + 23;\nloop invariant unknown_int() ==> buf <= buflim + 24;\nloop invariant unknown_int() ==> buf <= buflim + 25;\nloop invariant unknown_int() ==> buf <= buflim + 26;\nloop invariant unknown_int() ==> buf <= buflim + 27;\nloop invariant unknown_int() ==> buf <= buflim + 28;\nloop invariant unknown_int() ==> buf <= buflim + 29;\nloop invariant unknown_int() ==> buf <= buflim + 30;\nloop invariant unknown_int() ==> buf <= buflim + 31;\nloop invariant unknown_int() ==> buf <= buflim + 32;\nloop invariant unknown_int() ==> buf <= buflim + 33;\nloop invariant unknown_int() ==> buf <= buflim + 34;\nloop invariant unknown_int() ==> buf <= buflim + 35;\nloop invariant unknown_int() ==> buf <= buflim + 36;\nloop invariant unknown_int() ==> buf <= buflim + 37;\nloop invariant unknown_int() ==> buf <= buflim + 38;\nloop invariant unknown_int() ==> buf <= buflim + 39;\nloop invariant unknown_int() ==> buf <= buflim + 40;\nloop invariant unknown_int() ==> buf <= buflim + 41;\nloop invariant unknown_int() ==> buf <= buflim + 42;\nloop invariant unknown_int() ==> buf <= buflim + 43;\nloop invariant unknown_int() ==> buf <= buflim + 44;\nloop invariant unknown_int() ==> buf <= buflim + 45;\nloop invariant unknown_int() ==> buf <= buflim + 46;\nloop invariant unknown_int() ==> buf <= buflim + 47;\nloop invariant unknown_int() ==> buf <= buflim + 48;\nloop invariant unknown_int() ==> buf <= buflim + 49;\nloop invariant unknown_int() ==> buf <= buflim + 50;\nloop invariant unknown_int() ==> buf <= buflim + 51;\nloop invariant unknown_int() ==> buf <= buflim + 52;\nloop invariant unknown_int() ==> buf <= buflim + 53;\nloop invariant unknown_int() ==> buf <= buflim + 54;\nloop invariant unknown_int() ==> buf <= buflim + 55;\nloop invariant unknown_int() ==> buf <= buflim + 56;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 2;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant in < buf;\nloop invariant buf < buflim ==> in == buf;\nloop invariant buf < buflim ==> buf == buflim;\nloop invariant buf == buflim ==> in == buflim;\nloop invariant buflim == 0 ==> in == 0;\nloop invariant buflim == 0 ==> buf == 0;\nloop invariant buflim == 0 ==> buf == in;\nloop invariant buflim == 1 ==> in == 1;\nloop invariant buflim == 1 ==> buf == 1;\nloop invariant buflim == 1 ==> buf == in;\nloop invariant buflim > 1 ==> in <= buflim;\nloop invariant buflim > 1 ==> buf < buflim;\nloop invariant buflim > 1 ==> buf <= buflim;\nloop invariant buflim > 1 ==> in < buflim;\nloop invariant buflim > 1 ==> in <= buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in;\nloop invariant in <= inlen;\nloop invariant buf <= buflim;\nloop invariant buflim <= bufferlen;\nloop invariant buflim <= buf;\nloop invariant in < inlen;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf <= buflim;\nloop invariant buf <= in;\nloop invariant buf <= inlen;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\nloop invariant buflim <= in;\nloop invariant buflim <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant buf <= in;\nloop invariant buf <= buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: 0 <= buf <= buflim;\nloop invariant i4: buf <= buflim;\nloop invariant i5: buf <= in;\nloop invariant i6: buf <= inlen;\nloop invariant i7: buflim <= inlen;\nloop invariant i8: buf <= bufferlen;\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen; loop invariant 0 <= buf <= buflim; loop invariant buflim <= bufferlen - 1; loop invariant 0 <= buflim <= bufferlen - 2; loop invariant buflim == bufferlen - 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= in <= inlen; loop invariant 0 <= buf <= buflim; loop invariant buflim <= bufferlen - 1; loop invariant 0 <= buflim <= bufferlen - 2; loop invariant buflim == bufferlen - 2;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= inlen <= unknown_int();\nloop invariant 0 <= bufferlen <= unknown_int();\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\n\n\nloop invariant i3: 0 <= buf <= bufferlen;\nloop invariant i4: 0 <= in <= inlen;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= buf < bufferlen;\nloop invariant 1 <= in <= inlen;\nloop invariant buf <= buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\n\n\nloop invariant i3: buf <= buflim;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant unknown_int() ==> in < inlen;\nloop invariant unknown_int() ==> buf < bufferlen;\nloop invariant unknown_int() ==> buf <= buflim;\nloop invariant unknown_int() ==> buf == in || buf < in;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\n\nloop invariant i2: 0 <= in <= inlen - 1;\n\n\n\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 1 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf + 2 <= bufferlen;\nloop invariant in + 2 <= inlen;\nloop invariant buflim < bufferlen;\nloop invariant in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim;\n\nloop invariant i3: 0 <= buflim <= bufferlen - 2;\nloop invariant i4: buf + 2 <= bufferlen;\n\nloop invariant i6: buflim < bufferlen;\nloop invariant i7: in < inlen;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant in < inlen;\nloop invariant (unknown_int()) ==> (buf == buflim);\nloop invariant (unknown_int()) ==> (buf < bufferlen);\nloop invariant (unknown_int()) ==> (0 <= buf);\nloop invariant (unknown_int()) ==> (0 <= in);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (unknown_int());\nloop invariant (unknown_int()) ==> (buf < bufferlen);\nloop invariant (unknown_int()) ==> (0 <= buf);\nloop invariant (unknown_int()) ==> (0 <= in);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\nloop invariant (unknown_int()) ==> (in < inlen);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= buflim;\n\nloop invariant i3: 0 <= in <= inlen;\nloop invariant i4: in < inlen;\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= bufferlen;\nloop invariant in < inlen;\nloop invariant buf < bufferlen;\nloop invariant buflim = bufferlen - 2;\nloop invariant buf <= buflim ==> unknown_int();\nloop invariant buf == buflim ==> (unknown_int() ==> buf == buflim);\nloop invariant buf < buflim ==> unknown_int() ==> buf < buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= in <= inlen;\nloop invariant i2: 0 <= buf <= bufferlen;\nloop invariant i3: in < inlen;\n\n\n\n\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= buf <= buflim + 1;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= in <= buflim;\nloop invariant 0 <= in <= buf;\nloop invariant 0 <= buf <= in;\nloop invariant buf <= in + 1;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\nloop invariant in <= buflim + 1;\nloop invariant buf <= buflim;\nloop invariant buf <= buflim + 1;\nloop invariant in <= buf;\nloop invariant in <= buf + 1;\nloop invariant in <= buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= buf <= buflim + 1;\nloop invariant i3: 0 <= in <= inlen;\nloop invariant i4: 0 <= in <= buflim;\nloop invariant i5: 0 <= in <= buf;\nloop invariant i6: 0 <= buf <= in;\nloop invariant i7: buf <= in + 1;\nloop invariant i8: buf <= buflim + 1;\nloop invariant i9: in <= buflim;\nloop invariant i10: in <= buflim + 1;\nloop invariant i11: buf <= buflim;\nloop invariant i12: in <= buf;\nloop invariant i13: in <= buf + 1;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant buflim < inlen;\nloop invariant buf <= buflim + 1;\nloop invariant buf <= buflim + 2;\nloop invariant buf <= bufferlen - 1;\nloop invariant buf <= bufferlen;\nloop invariant bufferlen <= buflim + 1;\nloop invariant buflim <= bufferlen - 2;\nloop invariant buflim <= bufferlen - 1;\nloop invariant buflim <= bufferlen;\nloop invariant buf < bufferlen - 1;\nloop invariant in < inlen - 1;\nloop invariant in < inlen;\nloop invariant buf < bufferlen - 2;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 3;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 4;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 5;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 6;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 7;\nloop invariant buflim < bufferlen - 7;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 8;\nloop invariant buflim < bufferlen - 8;\nloop invariant buflim < bufferlen - 7;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 9;\nloop invariant buflim < bufferlen - 9;\nloop invariant buflim < bufferlen - 8;\nloop invariant buflim < bufferlen - 7;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 10;\nloop invariant buflim < bufferlen - 10;\nloop invariant buflim < bufferlen - 9;\nloop invariant buflim < bufferlen - 8;\nloop invariant buflim < bufferlen - 7;\nloop invariant buflim < bufferlen - 6;\nloop invariant buflim < bufferlen - 5;\nloop invariant buflim < bufferlen - 4;\nloop invariant buflim < bufferlen - 3;\nloop invariant buflim < bufferlen - 2;\nloop invariant buflim < bufferlen - 1;\nloop invariant buflim < bufferlen;\nloop invariant buf < bufferlen - 11;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= in <= inlen;\nloop invariant i2: 0 <= buflim <= bufferlen - 2;\nloop invariant i3: 0 <= buf <= buflim;\nloop invariant i4: buf < bufferlen;\nloop invariant i5: buflim < inlen;\nloop invariant i6: buf <= buflim + 1;\nloop invariant i7: buf <= buflim + 2;\nloop invariant i8: buf <= bufferlen - 1;\nloop invariant i9: buf <= bufferlen;\n\nloop invariant i11: buflim <= bufferlen - 2;\nloop invariant i12: buflim <= bufferlen - 1;\nloop invariant i13: buflim <= bufferlen;\nloop invariant i14: buf < bufferlen - 1;\n\nloop invariant i16: in < inlen;\n\n\nloop invariant i19: buflim < bufferlen - 1;\nloop invariant i20: buflim < bufferlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf <= buflim ==> in < inlen;\nloop invariant buf <= buflim ==> (buf + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 1) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 2) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 3) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 4) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 5) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 6) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 7) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 8) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 9) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 10) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 11) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 12) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 13) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 14) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 15) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 16) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 17) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 18) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 19) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 20) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 21) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 22) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 23) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 24) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 25) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 26) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 27) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 28) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 29) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 30) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 31) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 32) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 33) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 34) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 35) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 36) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 37) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 38) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 39) + 1) <= inlen;\nloop invariant buf <= buflim ==> ((buf + 40) + 1) <= inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\n\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf <= buflim;\n\nloop invariant i5: buf <= buflim ==> in < inlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> in < buflen;\nloop invariant unknown_int() ==> buf <= buflim;\nloop invariant unknown_int() ==> in < inlen;\nloop invariant unknown_int() ==> in < buflen;\nloop invariant unknown_int() ==> buf < bufferlen;\nloop invariant unknown_int() ==> buf < buflen;\nloop invariant unknown_int() ==> buf <= buflim;\nloop invariant unknown_int() ==> buf < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\n\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: buf < buflim ==> in < inlen;\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 61,
                "annotations": "```\n/*@\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant unknown_int() ==> in < inlen;\nloop invariant unknown_int() ==> buf < bufferlen;\nloop invariant unknown_int() ==> buflim < bufferlen;\nloop invariant unknown_int() ==> buf <= buflim;\nloop invariant unknown_int() ==> buf <= buflim + 1;\nloop invariant unknown_int() ==> buf <= buflim + 2;\nloop invariant unknown_int() ==> buf <= buflim + 3;\nloop invariant unknown_int() ==> buf <= buflim + 4;\nloop invariant unknown_int() ==> buf <= buflim + 5;\nloop invariant unknown_int() ==> buf <= buflim + 6;\nloop invariant unknown_int() ==> buf <= buflim + 7;\nloop invariant unknown_int() ==> buf <= buflim + 8;\nloop invariant unknown_int() ==> buf <= buflim + 9;\nloop invariant unknown_int() ==> buf <= buflim + 10;\nloop invariant unknown_int() ==> buf <= buflim + 11;\nloop invariant unknown_int() ==> buf <= buflim + 12;\nloop invariant unknown_int() ==> buf <= buflim + 13;\nloop invariant unknown_int() ==> buf <= buflim + 14;\nloop invariant unknown_int() ==> buf <= buflim + 15;\nloop invariant unknown_int() ==> buf <= buflim + 16;\nloop invariant unknown_int() ==> buf <= buflim + 17;\nloop invariant unknown_int() ==> buf <= buflim + 18;\nloop invariant unknown_int() ==> buf <= buflim + 19;\nloop invariant unknown_int() ==> buf <= buflim + 20;\nloop invariant unknown_int() ==> buf <= buflim + 21;\nloop invariant unknown_int() ==> buf <= buflim + 22;\nloop invariant unknown_int() ==> buf <= buflim + 23;\nloop invariant unknown_int() ==> buf <= buflim + 24;\nloop invariant unknown_int() ==> buf <= buflim + 25;\nloop invariant unknown_int() ==> buf <= buflim + 26;\nloop invariant unknown_int() ==> buf <= buflim + 27;\nloop invariant unknown_int() ==> buf <= buflim + 28;\nloop invariant unknown_int() ==> buf <= buflim + 29;\nloop invariant unknown_int() ==> buf <= buflim + 30;\nloop invariant unknown_int() ==> buf <= buflim + 31;\nloop invariant unknown_int() ==> buf <= buflim + 32;\nloop invariant unknown_int() ==> buf <= buflim + 33;\nloop invariant unknown_int() ==> buf <= buflim + 34;\nloop invariant unknown_int() ==> buf <= buflim + 35;\nloop invariant unknown_int() ==> buf <= buflim + 36;\nloop invariant unknown_int() ==> buf <= buflim + 37;\nloop invariant unknown_int() ==> buf <= buflim + 38;\nloop invariant unknown_int() ==> buf <= buflim + 39;\nloop invariant unknown_int() ==> buf <= buflim + 40;\nloop invariant unknown_int() ==> buf <= buflim + 41;\nloop invariant unknown_int() ==> buf <= buflim + 42;\nloop invariant unknown_int() ==> buf <= buflim + 43;\nloop invariant unknown_int() ==> buf <= buflim + 44;\nloop invariant unknown_int() ==> buf <= buflim + 45;\nloop invariant unknown_int() ==> buf <= buflim + 46;\nloop invariant unknown_int() ==> buf <= buflim + 47;\nloop invariant unknown_int() ==> buf <= buflim + 48;\nloop invariant unknown_int() ==> buf <= buflim + 49;\nloop invariant unknown_int() ==> buf <= buflim + 50;\nloop invariant unknown_int() ==> buf <= buflim + 51;\nloop invariant unknown_int() ==> buf <= buflim + 52;\nloop invariant unknown_int() ==> buf <= buflim + 53;\nloop invariant unknown_int() ==> buf <= buflim + 54;\nloop invariant unknown_int() ==> buf <= buflim + 55;\nloop invariant unknown_int() ==> buf <= buflim + 56;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= in;\nloop invariant i2: in < inlen;\nloop invariant i3: 0 <= buf;\nloop invariant i4: buf < bufferlen;\nloop invariant i5: 0 <= buflim;\nloop invariant i6: buflim < bufferlen;\nloop invariant i7: buf <= buflim;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 2;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant in < buf;\nloop invariant buf < buflim ==> in == buf;\nloop invariant buf < buflim ==> buf == buflim;\nloop invariant buf == buflim ==> in == buflim;\nloop invariant buflim == 0 ==> in == 0;\nloop invariant buflim == 0 ==> buf == 0;\nloop invariant buflim == 0 ==> buf == in;\nloop invariant buflim == 1 ==> in == 1;\nloop invariant buflim == 1 ==> buf == 1;\nloop invariant buflim == 1 ==> buf == in;\nloop invariant buflim > 1 ==> in <= buflim;\nloop invariant buflim > 1 ==> buf < buflim;\nloop invariant buflim > 1 ==> buf <= buflim;\nloop invariant buflim > 1 ==> in < buflim;\nloop invariant buflim > 1 ==> in <= buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\n\nloop invariant i2: 0 <= in <= inlen - 1;\n\nloop invariant i4: buf < buflim ==> in == buf;\n\nloop invariant i6: buf == buflim ==> in == buflim;\nloop invariant i7: buflim == 0 ==> in == 0;\nloop invariant i8: buflim == 0 ==> buf == 0;\nloop invariant i9: buflim == 0 ==> buf == in;\n\n\nloop invariant i12: buflim == 1 ==> buf == in;\nloop invariant i13: buflim > 1 ==> in <= buflim;\n\nloop invariant i15: buflim > 1 ==> buf <= buflim;\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= in;\nloop invariant in <= inlen;\nloop invariant buf <= buflim;\nloop invariant buflim <= bufferlen;\nloop invariant buflim <= buf;\nloop invariant in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= in;\nloop invariant i2: in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: buflim <= bufferlen;\n\nloop invariant i6: in < inlen;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: 0 <= buf <= buflim;\nloop invariant i4: buf <= buflim;\nloop invariant i5: buf <= in;\nloop invariant i6: buf <= inlen;\nloop invariant i7: buflim <= inlen;\nloop invariant i8: buf <= bufferlen;\nloop invariant i9: buflim <= in;\nloop invariant i10: 0 <= in <= inlen; loop invariant 0 <= buf <= buflim; loop invariant buflim <= bufferlen - 1; loop invariant 0 <= buflim <= bufferlen - 2; loop invariant buflim == bufferlen - 2;\nloop invariant i11: 0 <= inlen <= unknown_int();\nloop invariant i12: 0 <= bufferlen <= unknown_int();\nloop invariant i13: 1 <= buf < bufferlen;\nloop invariant i14: 1 <= in <= inlen;\nloop invariant i15: 0 <= buf <= bufferlen - 1;\nloop invariant i16: 0 <= in <= inlen - 1;\nloop invariant i17: unknown_int() ==> in < inlen;\nloop invariant i18: unknown_int() ==> buf < bufferlen;\nloop invariant i19: unknown_int() ==> buf <= buflim;\nloop invariant i20: unknown_int() ==> buf == in || buf < in;\nloop invariant i21: 0 <= buflim <= bufferlen - 2;\nloop invariant i22: buf + 2 <= bufferlen;\nloop invariant i23: in + 2 <= inlen;\nloop invariant i24: buflim < bufferlen;\nloop invariant i25: in < inlen;\nloop invariant i26: buf < bufferlen;\nloop invariant i27: (unknown_int()) ==> (buf == buflim);\nloop invariant i28: (unknown_int()) ==> (buf < bufferlen);\nloop invariant i29: (unknown_int()) ==> (0 <= buf);\nloop invariant i30: (unknown_int()) ==> (0 <= in);\nloop invariant i31: (unknown_int()) ==> (in < inlen);\nloop invariant i32: (unknown_int()) ==> (unknown_int());\nloop invariant i33: buflim = bufferlen - 2;\nloop invariant i34: buf <= buflim ==> unknown_int();\nloop invariant i35: buf == buflim ==> (unknown_int() ==> buf == buflim);\nloop invariant i36: buf < buflim ==> unknown_int() ==> buf < buflim;\nloop invariant i37: 0 <= buf <= buflim + 1;\nloop invariant i38: 0 <= in <= buflim;\nloop invariant i39: 0 <= in <= buf;\nloop invariant i40: 0 <= buf <= in;\nloop invariant i41: buf <= in + 1;\nloop invariant i42: buf <= buflim + 1;\nloop invariant i43: in <= buflim;\nloop invariant i44: in <= buflim + 1;\nloop invariant i45: in <= buf;\nloop invariant i46: in <= buf + 1;\nloop invariant i47: buflim < inlen;\nloop invariant i48: buf <= buflim + 2;\nloop invariant i49: buf <= bufferlen - 1;\nloop invariant i50: bufferlen <= buflim + 1;\nloop invariant i51: buflim <= bufferlen - 2;\nloop invariant i52: buflim <= bufferlen - 1;\nloop invariant i53: buflim <= bufferlen;\nloop invariant i54: buf < bufferlen - 1;\nloop invariant i55: in < inlen - 1;\nloop invariant i56: buf < bufferlen - 2;\nloop invariant i57: buflim < bufferlen - 2;\nloop invariant i58: buflim < bufferlen - 1;\nloop invariant i59: buf < bufferlen - 3;\nloop invariant i60: buflim < bufferlen - 3;\nloop invariant i61: buf < bufferlen - 4;\nloop invariant i62: buflim < bufferlen - 4;\nloop invariant i63: buf < bufferlen - 5;\nloop invariant i64: buflim < bufferlen - 5;\nloop invariant i65: buf < bufferlen - 6;\nloop invariant i66: buflim < bufferlen - 6;\nloop invariant i67: buf < bufferlen - 7;\nloop invariant i68: buflim < bufferlen - 7;\nloop invariant i69: buf < bufferlen - 8;\nloop invariant i70: buflim < bufferlen - 8;\nloop invariant i71: buf < bufferlen - 9;\nloop invariant i72: buflim < bufferlen - 9;\nloop invariant i73: buf < bufferlen - 10;\nloop invariant i74: buflim < bufferlen - 10;\nloop invariant i75: buf < bufferlen - 11;\nloop invariant i76: 0 <= buf < bufferlen;\nloop invariant i77: 0 <= in < inlen;\nloop invariant i78: buf < buflim ==> buf < inlen;\nloop invariant i79: buf <= buflim ==> in < inlen;\nloop invariant i80: buf <= buflim ==> (buf + 1) <= inlen;\nloop invariant i81: buf <= buflim ==> ((buf + 1) + 1) <= inlen;\nloop invariant i82: buf <= buflim ==> ((buf + 2) + 1) <= inlen;\nloop invariant i83: buf <= buflim ==> ((buf + 3) + 1) <= inlen;\nloop invariant i84: buf <= buflim ==> ((buf + 4) + 1) <= inlen;\nloop invariant i85: buf <= buflim ==> ((buf + 5) + 1) <= inlen;\nloop invariant i86: buf <= buflim ==> ((buf + 6) + 1) <= inlen;\nloop invariant i87: buf <= buflim ==> ((buf + 7) + 1) <= inlen;\nloop invariant i88: buf <= buflim ==> ((buf + 8) + 1) <= inlen;\nloop invariant i89: buf <= buflim ==> ((buf + 9) + 1) <= inlen;\nloop invariant i90: buf <= buflim ==> ((buf + 10) + 1) <= inlen;\nloop invariant i91: buf <= buflim ==> ((buf + 11) + 1) <= inlen;\nloop invariant i92: buf <= buflim ==> ((buf + 12) + 1) <= inlen;\nloop invariant i93: buf <= buflim ==> ((buf + 13) + 1) <= inlen;\nloop invariant i94: buf <= buflim ==> ((buf + 14) + 1) <= inlen;\nloop invariant i95: buf <= buflim ==> ((buf + 15) + 1) <= inlen;\nloop invariant i96: buf <= buflim ==> ((buf + 16) + 1) <= inlen;\nloop invariant i97: buf <= buflim ==> ((buf + 17) + 1) <= inlen;\nloop invariant i98: buf <= buflim ==> ((buf + 18) + 1) <= inlen;\nloop invariant i99: buf <= buflim ==> ((buf + 19) + 1) <= inlen;\nloop invariant i100: buf <= buflim ==> ((buf + 20) + 1) <= inlen;\nloop invariant i101: buf <= buflim ==> ((buf + 21) + 1) <= inlen;\nloop invariant i102: buf <= buflim ==> ((buf + 22) + 1) <= inlen;\nloop invariant i103: buf <= buflim ==> ((buf + 23) + 1) <= inlen;\nloop invariant i104: buf <= buflim ==> ((buf + 24) + 1) <= inlen;\nloop invariant i105: buf <= buflim ==> ((buf + 25) + 1) <= inlen;\nloop invariant i106: buf <= buflim ==> ((buf + 26) + 1) <= inlen;\nloop invariant i107: buf <= buflim ==> ((buf + 27) + 1) <= inlen;\nloop invariant i108: buf <= buflim ==> ((buf + 28) + 1) <= inlen;\nloop invariant i109: buf <= buflim ==> ((buf + 29) + 1) <= inlen;\nloop invariant i110: buf <= buflim ==> ((buf + 30) + 1) <= inlen;\nloop invariant i111: buf <= buflim ==> ((buf + 31) + 1) <= inlen;\nloop invariant i112: buf <= buflim ==> ((buf + 32) + 1) <= inlen;\nloop invariant i113: buf <= buflim ==> ((buf + 33) + 1) <= inlen;\nloop invariant i114: buf <= buflim ==> ((buf + 34) + 1) <= inlen;\nloop invariant i115: buf <= buflim ==> ((buf + 35) + 1) <= inlen;\nloop invariant i116: buf <= buflim ==> ((buf + 36) + 1) <= inlen;\nloop invariant i117: buf <= buflim ==> ((buf + 37) + 1) <= inlen;\nloop invariant i118: buf <= buflim ==> ((buf + 38) + 1) <= inlen;\nloop invariant i119: buf <= buflim ==> ((buf + 39) + 1) <= inlen;\nloop invariant i120: buf <= buflim ==> ((buf + 40) + 1) <= inlen;\nloop invariant i121: buf < buflim ==> in < inlen;\nloop invariant i122: buf < buflim ==> in < buflen;\nloop invariant i123: unknown_int() ==> in < buflen;\nloop invariant i124: unknown_int() ==> buf < buflen;\nloop invariant i125: 0 <= in;\nloop invariant i126: 0 <= buf;\nloop invariant i127: 0 <= buflim;\nloop invariant i128: unknown_int() ==> buflim < bufferlen;\nloop invariant i129: unknown_int() ==> buf <= buflim + 1;\nloop invariant i130: unknown_int() ==> buf <= buflim + 2;\nloop invariant i131: unknown_int() ==> buf <= buflim + 3;\nloop invariant i132: unknown_int() ==> buf <= buflim + 4;\nloop invariant i133: unknown_int() ==> buf <= buflim + 5;\nloop invariant i134: unknown_int() ==> buf <= buflim + 6;\nloop invariant i135: unknown_int() ==> buf <= buflim + 7;\nloop invariant i136: unknown_int() ==> buf <= buflim + 8;\nloop invariant i137: unknown_int() ==> buf <= buflim + 9;\nloop invariant i138: unknown_int() ==> buf <= buflim + 10;\nloop invariant i139: unknown_int() ==> buf <= buflim + 11;\nloop invariant i140: unknown_int() ==> buf <= buflim + 12;\nloop invariant i141: unknown_int() ==> buf <= buflim + 13;\nloop invariant i142: unknown_int() ==> buf <= buflim + 14;\nloop invariant i143: unknown_int() ==> buf <= buflim + 15;\nloop invariant i144: unknown_int() ==> buf <= buflim + 16;\nloop invariant i145: unknown_int() ==> buf <= buflim + 17;\nloop invariant i146: unknown_int() ==> buf <= buflim + 18;\nloop invariant i147: unknown_int() ==> buf <= buflim + 19;\nloop invariant i148: unknown_int() ==> buf <= buflim + 20;\nloop invariant i149: unknown_int() ==> buf <= buflim + 21;\nloop invariant i150: unknown_int() ==> buf <= buflim + 22;\nloop invariant i151: unknown_int() ==> buf <= buflim + 23;\nloop invariant i152: unknown_int() ==> buf <= buflim + 24;\nloop invariant i153: unknown_int() ==> buf <= buflim + 25;\nloop invariant i154: unknown_int() ==> buf <= buflim + 26;\nloop invariant i155: unknown_int() ==> buf <= buflim + 27;\nloop invariant i156: unknown_int() ==> buf <= buflim + 28;\nloop invariant i157: unknown_int() ==> buf <= buflim + 29;\nloop invariant i158: unknown_int() ==> buf <= buflim + 30;\nloop invariant i159: unknown_int() ==> buf <= buflim + 31;\nloop invariant i160: unknown_int() ==> buf <= buflim + 32;\nloop invariant i161: unknown_int() ==> buf <= buflim + 33;\nloop invariant i162: unknown_int() ==> buf <= buflim + 34;\nloop invariant i163: unknown_int() ==> buf <= buflim + 35;\nloop invariant i164: unknown_int() ==> buf <= buflim + 36;\nloop invariant i165: unknown_int() ==> buf <= buflim + 37;\nloop invariant i166: unknown_int() ==> buf <= buflim + 38;\nloop invariant i167: unknown_int() ==> buf <= buflim + 39;\nloop invariant i168: unknown_int() ==> buf <= buflim + 40;\nloop invariant i169: unknown_int() ==> buf <= buflim + 41;\nloop invariant i170: unknown_int() ==> buf <= buflim + 42;\nloop invariant i171: unknown_int() ==> buf <= buflim + 43;\nloop invariant i172: unknown_int() ==> buf <= buflim + 44;\nloop invariant i173: unknown_int() ==> buf <= buflim + 45;\nloop invariant i174: unknown_int() ==> buf <= buflim + 46;\nloop invariant i175: unknown_int() ==> buf <= buflim + 47;\nloop invariant i176: unknown_int() ==> buf <= buflim + 48;\nloop invariant i177: unknown_int() ==> buf <= buflim + 49;\nloop invariant i178: unknown_int() ==> buf <= buflim + 50;\nloop invariant i179: unknown_int() ==> buf <= buflim + 51;\nloop invariant i180: unknown_int() ==> buf <= buflim + 52;\nloop invariant i181: unknown_int() ==> buf <= buflim + 53;\nloop invariant i182: unknown_int() ==> buf <= buflim + 54;\nloop invariant i183: unknown_int() ==> buf <= buflim + 55;\nloop invariant i184: unknown_int() ==> buf <= buflim + 56;\nloop invariant i185: 0 <= buf <= bufferlen - 2;\nloop invariant i186: in < buf;\nloop invariant i187: buf < buflim ==> in == buf;\nloop invariant i188: buf < buflim ==> buf == buflim;\nloop invariant i189: buf == buflim ==> in == buflim;\nloop invariant i190: buflim == 0 ==> in == 0;\nloop invariant i191: buflim == 0 ==> buf == 0;\nloop invariant i192: buflim == 0 ==> buf == in;\nloop invariant i193: buflim == 1 ==> in == 1;\nloop invariant i194: buflim == 1 ==> buf == 1;\nloop invariant i195: buflim == 1 ==> buf == in;\nloop invariant i196: buflim > 1 ==> in <= buflim;\nloop invariant i197: buflim > 1 ==> buf < buflim;\nloop invariant i198: buflim > 1 ==> buf <= buflim;\nloop invariant i199: buflim > 1 ==> in < buflim;\nloop invariant i200: in <= inlen;\nloop invariant i201: buflim <= buf;\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 96,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: 0 <= buf <= buflim;\nloop invariant i4: buf <= buflim;\nloop invariant i5: buf <= in;\nloop invariant i6: buf <= inlen;\nloop invariant i7: buflim <= inlen;\nloop invariant i8: buf <= bufferlen;\n\nloop invariant i10: 0 <= in <= inlen; loop invariant 0 <= buf <= buflim; loop invariant buflim <= bufferlen - 1; loop invariant 0 <= buflim <= bufferlen - 2; loop invariant buflim == bufferlen - 2;\n\n\n\n\nloop invariant i15: 0 <= buf <= bufferlen - 1;\nloop invariant i16: 0 <= in <= inlen - 1;\n\n\n\n\nloop invariant i21: 0 <= buflim <= bufferlen - 2;\nloop invariant i22: buf + 2 <= bufferlen;\n\nloop invariant i24: buflim < bufferlen;\nloop invariant i25: in < inlen;\nloop invariant i26: buf < bufferlen;\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: 0 <= buf <= buflim + 1;\nloop invariant i38: 0 <= in <= buflim;\nloop invariant i39: 0 <= in <= buf;\nloop invariant i40: 0 <= buf <= in;\nloop invariant i41: buf <= in + 1;\nloop invariant i42: buf <= buflim + 1;\nloop invariant i43: in <= buflim;\nloop invariant i44: in <= buflim + 1;\nloop invariant i45: in <= buf;\nloop invariant i46: in <= buf + 1;\nloop invariant i47: buflim < inlen;\nloop invariant i48: buf <= buflim + 2;\nloop invariant i49: buf <= bufferlen - 1;\n\nloop invariant i51: buflim <= bufferlen - 2;\nloop invariant i52: buflim <= bufferlen - 1;\nloop invariant i53: buflim <= bufferlen;\nloop invariant i54: buf < bufferlen - 1;\n\n\n\nloop invariant i58: buflim < bufferlen - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i76: 0 <= buf < bufferlen;\nloop invariant i77: 0 <= in < inlen;\nloop invariant i78: buf < buflim ==> buf < inlen;\nloop invariant i79: buf <= buflim ==> in < inlen;\nloop invariant i80: buf <= buflim ==> (buf + 1) <= inlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i121: buf < buflim ==> in < inlen;\n\n\n\nloop invariant i125: 0 <= in;\nloop invariant i126: 0 <= buf;\nloop invariant i127: 0 <= buflim;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i185: 0 <= buf <= bufferlen - 2;\n\nloop invariant i187: buf < buflim ==> in == buf;\n\nloop invariant i189: buf == buflim ==> in == buflim;\nloop invariant i190: buflim == 0 ==> in == 0;\nloop invariant i191: buflim == 0 ==> buf == 0;\nloop invariant i192: buflim == 0 ==> buf == in;\n\n\nloop invariant i195: buflim == 1 ==> buf == in;\nloop invariant i196: buflim > 1 ==> in <= buflim;\n\nloop invariant i198: buflim > 1 ==> buf <= buflim;\n\nloop invariant i200: in <= inlen;\n\n*/\nwhile (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c"
        ],
        "skipped": [],
        "total": 44,
        "success_count": 37,
        "failure_count": 7,
        "success_rate": 0.8409090909090909
    }
}