{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  while (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant y = 1;\nloop invariant x = 0;\nloop invariant N >= 0;\nloop invariant N < 2 * N + 3;\nloop invariant N < 3 * N + 5;\nloop invariant N < 2 * N + 7;\nloop invariant N < 4 * N + 9;\nloop invariant N < 2 * N + 11;\nloop invariant N < 2 * N + 13;\nloop invariant N < 2 * N + 15;\nloop invariant N < 2 * N + 17;\nloop invariant N < 2 * N + 19;\nloop invariant N < 2 * N + 21;\nloop invariant N < 2 * N + 23;\nloop invariant N < 2 * N + 25;\nloop invariant N < 2 * N + 27;\nloop invariant N < 2 * N + 29;\nloop invariant N < 2 * N + 31;\nloop invariant N < 2 * N + 33;\nloop invariant N < 2 * N + 35;\nloop invariant N < 2 * N + 37;\nloop invariant N < 2 * N + 39;\nloop invariant N < 2 * N + 41;\nloop invariant N < 2 * N + 43;\nloop invariant N < 2 * N + 45;\nloop invariant N < 2 * N + 47;\nloop invariant N < 2 * N + 49;\nloop invariant N < 2 * N + 51;\nloop invariant N < 2 * N + 53;\nloop invariant N < 2 * N + 55;\nloop invariant N < 2 * N + 57;\nloop invariant N < 2 * N + 59;\nloop invariant N < 2 * N + 61;\nloop invariant N < 2 * N + 63;\nloop invariant N < 2 * N + 65;\nloop invariant N < 2 * N + 67;\nloop invariant N < 2 * N + 69;\nloop invariant N < 2 * N + 71;\nloop invariant N < 2 * N + 73;\nloop invariant N < 2 * N + 75;\nloop invariant N < 2 * N + 77;\nloop invariant N < 2 * N + 79;\nloop invariant N < 2 * N + 81;\nloop invariant N < 2 * N + 83;\nloop invariant N < 2 * N + 85;\nloop invariant N < 2 * N + 87;\nloop invariant N < 2 * N + 89;\nloop invariant N < 2 * N + 91;\nloop invariant N < 2 * N + 93;\nloop invariant N < 2 * N + 95;\nloop invariant N < 2 * N + 97;\nloop invariant N < 2 * N + 99;\nloop invariant N < 2 * N + 101;\nloop invariant N < 2 * N + 103;\nloop invariant N < 2 * N + 105;\nloop invariant N < 2 * N + 107;\nloop invariant N < 2 * N + 109;\nloop invariant N < 2 * N + 111;\nloop invariant N < 2 * N + 113;\nloop invariant N < 2 * N + 115;\nloop invariant N < 2 * N + 117;\nloop invariant N < 2 * N + 119;\nloop invariant N < 2 * N + 121;\nloop invariant N < 2 * N + 123;\nloop invariant N < 2 * N + 125;\nloop invariant N < 2 * N + 127;\nloop invariant N < 2 * N + 129;\nloop invariant N < 2 * N + 131;\nloop invariant N < 2 * N + 133;\nloop invariant N < 2 * N + 135;\nloop invariant N < 2 * N + 137;\nloop invariant N < 2 * N + 139;\nloop invariant N < 2 * N + 141;\nloop invariant N < 2 * N + 143;\nloop invariant N < 2 * N + 145;\nloop invariant N < 2 * N + 147;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N+1;\nloop invariant -N <= y <= N+2;\nloop invariant (x == N+1) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant y < 0 ==> x >= N + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 2 * N + 3;\nloop invariant 0 <= y <= N + 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant \\at(x, Pre) <= x;\nloop invariant \\at(y, Pre) <= y;\nloop invariant \\at(x, Pre) >= x;\nloop invariant \\at(y, Pre) >= y;\nloop invariant x == \\at(x, Pre) + 1;\nloop invariant y == \\at(y, Pre) + 1;\nloop invariant x == \\at(x, Pre) - 1;\nloop invariant y == \\at(y, Pre) - 1;\nloop invariant x == \\at(x, Pre) + 2;\nloop invariant y == \\at(y, Pre) - 2;\nloop invariant x == \\at(x, Pre) - 2;\nloop invariant y == \\at(y, Pre) + 2;\nloop invariant x == \\at(x, Pre) + 3;\nloop invariant y == \\at(y, Pre) - 3;\nloop invariant x == \\at(x, Pre) - 3;\nloop invariant y == \\at(y, Pre) + 3;\nloop invariant x == \\at(x, Pre) + 4;\nloop invariant y == \\at(y, Pre) - 4;\nloop invariant x == \\at(x, Pre) - 4;\nloop invariant y == \\at(y, Pre) + 4;\nloop invariant x == \\at(x, Pre) + 5;\nloop invariant y == \\at(y, Pre) - 5;\nloop invariant x == \\at(x, Pre) - 5;\nloop invariant y == \\at(y, Pre) + 5;\nloop invariant x == \\at(x, Pre) + 6;\nloop invariant y == \\at(y, Pre) - 6;\nloop invariant x == \\at(x, Pre) - 6;\nloop invariant y == \\at(y, Pre) + 6;\nloop invariant x == \\at(x, Pre) + 7;\nloop invariant y == \\at(y, Pre) - 7;\nloop invariant x == \\at(x, Pre) - 7;\nloop invariant y == \\at(y, Pre) + 7;\nloop invariant x == \\at(x, Pre) + 8;\nloop invariant y == \\at(y, Pre) - 8;\nloop invariant x == \\at(x, Pre) - 8;\nloop invariant y == \\at(y, Pre) + 8;\nloop invariant x == \\at(x, Pre) + 9;\nloop invariant y == \\at(y, Pre) - 9;\nloop invariant x == \\at(x, Pre) - 9;\nloop invariant y == \\at(y, Pre) + 9;\nloop invariant x == \\at(x, Pre) + 10;\nloop invariant y == \\at(y, Pre) - 10;\nloop invariant x == \\at(x, Pre) - 10;\nloop invariant y == \\at(y, Pre) + 10;\nloop invariant x == \\at(x, Pre) + 11;\nloop invariant y == \\at(y, Pre) - 11;\nloop invariant x == \\at(x, Pre) - 11;\nloop invariant y == \\at(y, Pre) + 11;\nloop invariant x == \\at(x, Pre) + 12;\nloop invariant y == \\at(y, Pre) - 12;\nloop invariant x == \\at(x, Pre) - 12;\nloop invariant y == \\at(y, Pre) + 12;\nloop invariant x == \\at(x, Pre) + 13;\nloop invariant y == \\at(y, Pre) - 13;\nloop invariant x == \\at(x, Pre) - 13;\nloop invariant y == \\at(y, Pre) + 13;\nloop invariant x == \\at(x, Pre) + 14;\nloop invariant y == \\at(y, Pre) - 14;\nloop invariant x == \\at(x, Pre) - 14;\nloop invariant y == \\at(y, Pre) + 14;\nloop invariant x == \\at(x, Pre) + 15;\nloop invariant y == \\at(y, Pre) - 15;\nloop invariant x == \\at(x, Pre) - 15;\nloop invariant y == \\at(y, Pre) + 15;\nloop invariant x == \\at(x, Pre) + 16;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1;\nloop invariant x <= y;\nloop invariant y + 2 * x >= N + 1;\nloop invariant (y == -1) ==> (x >= 2 * N + 3);\nloop invariant (y < 0) ==> (x > N);\nloop invariant (y >= 0) ==> (x <= N);\nloop invariant (y == 0) ==> (x == N);\nloop invariant (y == 1) ==> (x == N + 1);\nloop invariant (y == 2) ==> (x == N + 2);\nloop invariant (y == 3) ==> (x == N + 3);\nloop invariant (y == 4) ==> (x == N + 4);\nloop invariant (y == 5) ==> (x == N + 5);\nloop invariant (y == 6) ==> (x == N + 6);\nloop invariant (y == 7) ==> (x == N + 7);\nloop invariant (y == 8) ==> (x == N + 8);\nloop invariant (y == 9) ==> (x == N + 9);\nloop invariant (y == 10) ==> (x == N + 10);\nloop invariant (y == 11) ==> (x == N + 11);\nloop invariant (y == 12) ==> (x == N + 12);\nloop invariant (y == 13) ==> (x == N + 13);\nloop invariant (y == 14) ==> (x == N + 14);\nloop invariant (y == 15) ==> (x == N + 15);\nloop invariant (y == 16) ==> (x == N + 16);\nloop invariant (y == 17) ==> (x == N + 17);\nloop invariant (y == 18) ==> (x == N + 18);\nloop invariant (y == 19) ==> (x == N + 19);\nloop invariant (y == 20) ==> (x == N + 20);\nloop invariant (y == 21) ==> (x == N + 21);\nloop invariant (y == 22) ==> (x == N + 22);\nloop invariant (y == 23) ==> (x == N + 23);\nloop invariant (y == 24) ==> (x == N + 24);\nloop invariant (y == 25) ==> (x == N + 25);\nloop invariant (y == 26) ==> (x == N + 26);\nloop invariant (y == 27) ==> (x == N + 27);\nloop invariant (y == 28) ==> (x == N + 28);\nloop invariant (y == 29) ==> (x == N + 29);\nloop invariant (y == 30) ==> (x == N + 30);\nloop invariant (y == 31) ==> (x == N + 31);\nloop invariant (y == 32) ==> (x == N + 32);\nloop invariant (y == 33) ==> (x == N + 33);\nloop invariant (y == 34) ==> (x == N + 34);\nloop invariant (y == 35) ==> (x == N + 35);\nloop invariant (y == 36) ==> (x == N + 36);\nloop invariant (y == 37) ==> (x == N + 37);\nloop invariant (y == 38) ==> (x == N + 38);\nloop invariant (y == 39) ==> (x == N + 39);\nloop invariant (y == 40) ==> (x == N + 40);\nloop invariant (y == 41) ==> (x == N + 41);\nloop invariant (y == 42) ==> (x == N + 42);\nloop invariant (y == 43) ==> (x == N + 43);\nloop invariant (y == 44) ==> (x == N + 44);\nloop invariant (y == 45) ==> (x == N + 45);\nloop invariant (y == 46) ==> (x == N + 46);\nloop invariant (y == 47) ==> (x == N + 47);\nloop invariant (y == 48) ==> (x == N + 48);\n*/\n```",
            "```\n/*@\nloop invariant x <= N ==> y >= 1;\nloop invariant x >= N+1 ==> y <= -1;\nloop invariant x <= N ==> y <= x - N;\nloop invariant x >= N+1 ==> y >= x - N - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant y = N - x;\nloop invariant (0 <= y <= N);\nloop invariant (0 <= x <= 2 * N + 3);\nloop invariant (x == 0 ==> y == N);\nloop invariant (x == 2 * N + 3 ==> y == -1);\nloop invariant (x == N + 1 ==> y == -2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N + 2;\nloop invariant 0 <= y <= -1;\nloop invariant x >= N + 1;\nloop invariant x <= 2 * N + 3;\nloop invariant y <= -1;\nloop invariant y >= -1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant y <= -1;\nloop invariant x >= N + 1;\nloop invariant y => x >= N + 1;\nloop invariant y < 0 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant ( x >= 0 );\nloop invariant ( y >= 0 );\nloop invariant ( x <= N + 1 );\nloop invariant ( y <= N + 1 );\nloop invariant ( y <= x );\nloop invariant ( x <= 2 * N + 3 );\nloop invariant ( (y == -1 ==> x >= 2 * N + 3) );\nloop invariant ( (x >= N ==> y >= -1) );\nloop invariant ( (y >= N ==> x <= N + 1) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant 0 <= y <= 1;\nloop invariant x >= N + 1;\nloop invariant x <= N + 1;\nloop invariant y == -1;\nloop invariant x >= 2 * N + 3;\nloop invariant x >= 2 * N + 3;\nloop invariant y == -1;\nloop invariant x >= 2 * N + 3;\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant 0 <= y <= 1;\nloop invariant x >= N + 1;\nloop invariant x <= N + 1;\nloop invariant y == -1;\nloop invariant x >= 2 * N + 3;\nloop invariant x >= 2 * N + 3;\nloop invariant y == -1;\nloop invariant x >= 2 * N + 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N + 3;\nloop invariant -1 <= y <= x;\nloop invariant -1 <= y <= N;\nloop invariant -1 <= y <= x - 1;\nloop invariant -1 <= y <= N + 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y = 1;\nloop invariant x = 0;\nloop invariant N >= 0;\nloop invariant N < 2 * N + 3;\nloop invariant N < 3 * N + 5;\nloop invariant N < 2 * N + 7;\nloop invariant N < 4 * N + 9;\nloop invariant N < 2 * N + 11;\nloop invariant N < 2 * N + 13;\nloop invariant N < 2 * N + 15;\nloop invariant N < 2 * N + 17;\nloop invariant N < 2 * N + 19;\nloop invariant N < 2 * N + 21;\nloop invariant N < 2 * N + 23;\nloop invariant N < 2 * N + 25;\nloop invariant N < 2 * N + 27;\nloop invariant N < 2 * N + 29;\nloop invariant N < 2 * N + 31;\nloop invariant N < 2 * N + 33;\nloop invariant N < 2 * N + 35;\nloop invariant N < 2 * N + 37;\nloop invariant N < 2 * N + 39;\nloop invariant N < 2 * N + 41;\nloop invariant N < 2 * N + 43;\nloop invariant N < 2 * N + 45;\nloop invariant N < 2 * N + 47;\nloop invariant N < 2 * N + 49;\nloop invariant N < 2 * N + 51;\nloop invariant N < 2 * N + 53;\nloop invariant N < 2 * N + 55;\nloop invariant N < 2 * N + 57;\nloop invariant N < 2 * N + 59;\nloop invariant N < 2 * N + 61;\nloop invariant N < 2 * N + 63;\nloop invariant N < 2 * N + 65;\nloop invariant N < 2 * N + 67;\nloop invariant N < 2 * N + 69;\nloop invariant N < 2 * N + 71;\nloop invariant N < 2 * N + 73;\nloop invariant N < 2 * N + 75;\nloop invariant N < 2 * N + 77;\nloop invariant N < 2 * N + 79;\nloop invariant N < 2 * N + 81;\nloop invariant N < 2 * N + 83;\nloop invariant N < 2 * N + 85;\nloop invariant N < 2 * N + 87;\nloop invariant N < 2 * N + 89;\nloop invariant N < 2 * N + 91;\nloop invariant N < 2 * N + 93;\nloop invariant N < 2 * N + 95;\nloop invariant N < 2 * N + 97;\nloop invariant N < 2 * N + 99;\nloop invariant N < 2 * N + 101;\nloop invariant N < 2 * N + 103;\nloop invariant N < 2 * N + 105;\nloop invariant N < 2 * N + 107;\nloop invariant N < 2 * N + 109;\nloop invariant N < 2 * N + 111;\nloop invariant N < 2 * N + 113;\nloop invariant N < 2 * N + 115;\nloop invariant N < 2 * N + 117;\nloop invariant N < 2 * N + 119;\nloop invariant N < 2 * N + 121;\nloop invariant N < 2 * N + 123;\nloop invariant N < 2 * N + 125;\nloop invariant N < 2 * N + 127;\nloop invariant N < 2 * N + 129;\nloop invariant N < 2 * N + 131;\nloop invariant N < 2 * N + 133;\nloop invariant N < 2 * N + 135;\nloop invariant N < 2 * N + 137;\nloop invariant N < 2 * N + 139;\nloop invariant N < 2 * N + 141;\nloop invariant N < 2 * N + 143;\nloop invariant N < 2 * N + 145;\nloop invariant N < 2 * N + 147;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\nloop invariant i3: N >= 0;\nloop invariant i4: N < 2 * N + 3;\nloop invariant i5: N < 3 * N + 5;\nloop invariant i6: N < 2 * N + 7;\nloop invariant i7: N < 4 * N + 9;\nloop invariant i8: N < 2 * N + 11;\nloop invariant i9: N < 2 * N + 13;\nloop invariant i10: N < 2 * N + 15;\nloop invariant i11: N < 2 * N + 17;\nloop invariant i12: N < 2 * N + 19;\nloop invariant i13: N < 2 * N + 21;\nloop invariant i14: N < 2 * N + 23;\nloop invariant i15: N < 2 * N + 25;\nloop invariant i16: N < 2 * N + 27;\nloop invariant i17: N < 2 * N + 29;\nloop invariant i18: N < 2 * N + 31;\nloop invariant i19: N < 2 * N + 33;\nloop invariant i20: N < 2 * N + 35;\nloop invariant i21: N < 2 * N + 37;\nloop invariant i22: N < 2 * N + 39;\nloop invariant i23: N < 2 * N + 41;\nloop invariant i24: N < 2 * N + 43;\nloop invariant i25: N < 2 * N + 45;\nloop invariant i26: N < 2 * N + 47;\nloop invariant i27: N < 2 * N + 49;\nloop invariant i28: N < 2 * N + 51;\nloop invariant i29: N < 2 * N + 53;\nloop invariant i30: N < 2 * N + 55;\nloop invariant i31: N < 2 * N + 57;\nloop invariant i32: N < 2 * N + 59;\nloop invariant i33: N < 2 * N + 61;\nloop invariant i34: N < 2 * N + 63;\nloop invariant i35: N < 2 * N + 65;\nloop invariant i36: N < 2 * N + 67;\nloop invariant i37: N < 2 * N + 69;\nloop invariant i38: N < 2 * N + 71;\nloop invariant i39: N < 2 * N + 73;\nloop invariant i40: N < 2 * N + 75;\nloop invariant i41: N < 2 * N + 77;\nloop invariant i42: N < 2 * N + 79;\nloop invariant i43: N < 2 * N + 81;\nloop invariant i44: N < 2 * N + 83;\nloop invariant i45: N < 2 * N + 85;\nloop invariant i46: N < 2 * N + 87;\nloop invariant i47: N < 2 * N + 89;\nloop invariant i48: N < 2 * N + 91;\nloop invariant i49: N < 2 * N + 93;\nloop invariant i50: N < 2 * N + 95;\nloop invariant i51: N < 2 * N + 97;\nloop invariant i52: N < 2 * N + 99;\nloop invariant i53: N < 2 * N + 101;\nloop invariant i54: N < 2 * N + 103;\nloop invariant i55: N < 2 * N + 105;\nloop invariant i56: N < 2 * N + 107;\nloop invariant i57: N < 2 * N + 109;\nloop invariant i58: N < 2 * N + 111;\nloop invariant i59: N < 2 * N + 113;\nloop invariant i60: N < 2 * N + 115;\nloop invariant i61: N < 2 * N + 117;\nloop invariant i62: N < 2 * N + 119;\nloop invariant i63: N < 2 * N + 121;\nloop invariant i64: N < 2 * N + 123;\nloop invariant i65: N < 2 * N + 125;\nloop invariant i66: N < 2 * N + 127;\nloop invariant i67: N < 2 * N + 129;\nloop invariant i68: N < 2 * N + 131;\nloop invariant i69: N < 2 * N + 133;\nloop invariant i70: N < 2 * N + 135;\nloop invariant i71: N < 2 * N + 137;\nloop invariant i72: N < 2 * N + 139;\nloop invariant i73: N < 2 * N + 141;\nloop invariant i74: N < 2 * N + 143;\nloop invariant i75: N < 2 * N + 145;\nloop invariant i76: N < 2 * N + 147;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N+1;\nloop invariant -N <= y <= N+2;\nloop invariant (x == N+1) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant y < 0 ==> x >= N + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\nloop invariant i1: 0 <= y;\n\nloop invariant i3: y < 0 ==> x >= N + 1;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 68,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 2 * N + 3;\nloop invariant 0 <= y <= N + 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant \\at(x, Pre) <= x;\nloop invariant \\at(y, Pre) <= y;\nloop invariant \\at(x, Pre) >= x;\nloop invariant \\at(y, Pre) >= y;\nloop invariant x == \\at(x, Pre) + 1;\nloop invariant y == \\at(y, Pre) + 1;\nloop invariant x == \\at(x, Pre) - 1;\nloop invariant y == \\at(y, Pre) - 1;\nloop invariant x == \\at(x, Pre) + 2;\nloop invariant y == \\at(y, Pre) - 2;\nloop invariant x == \\at(x, Pre) - 2;\nloop invariant y == \\at(y, Pre) + 2;\nloop invariant x == \\at(x, Pre) + 3;\nloop invariant y == \\at(y, Pre) - 3;\nloop invariant x == \\at(x, Pre) - 3;\nloop invariant y == \\at(y, Pre) + 3;\nloop invariant x == \\at(x, Pre) + 4;\nloop invariant y == \\at(y, Pre) - 4;\nloop invariant x == \\at(x, Pre) - 4;\nloop invariant y == \\at(y, Pre) + 4;\nloop invariant x == \\at(x, Pre) + 5;\nloop invariant y == \\at(y, Pre) - 5;\nloop invariant x == \\at(x, Pre) - 5;\nloop invariant y == \\at(y, Pre) + 5;\nloop invariant x == \\at(x, Pre) + 6;\nloop invariant y == \\at(y, Pre) - 6;\nloop invariant x == \\at(x, Pre) - 6;\nloop invariant y == \\at(y, Pre) + 6;\nloop invariant x == \\at(x, Pre) + 7;\nloop invariant y == \\at(y, Pre) - 7;\nloop invariant x == \\at(x, Pre) - 7;\nloop invariant y == \\at(y, Pre) + 7;\nloop invariant x == \\at(x, Pre) + 8;\nloop invariant y == \\at(y, Pre) - 8;\nloop invariant x == \\at(x, Pre) - 8;\nloop invariant y == \\at(y, Pre) + 8;\nloop invariant x == \\at(x, Pre) + 9;\nloop invariant y == \\at(y, Pre) - 9;\nloop invariant x == \\at(x, Pre) - 9;\nloop invariant y == \\at(y, Pre) + 9;\nloop invariant x == \\at(x, Pre) + 10;\nloop invariant y == \\at(y, Pre) - 10;\nloop invariant x == \\at(x, Pre) - 10;\nloop invariant y == \\at(y, Pre) + 10;\nloop invariant x == \\at(x, Pre) + 11;\nloop invariant y == \\at(y, Pre) - 11;\nloop invariant x == \\at(x, Pre) - 11;\nloop invariant y == \\at(y, Pre) + 11;\nloop invariant x == \\at(x, Pre) + 12;\nloop invariant y == \\at(y, Pre) - 12;\nloop invariant x == \\at(x, Pre) - 12;\nloop invariant y == \\at(y, Pre) + 12;\nloop invariant x == \\at(x, Pre) + 13;\nloop invariant y == \\at(y, Pre) - 13;\nloop invariant x == \\at(x, Pre) - 13;\nloop invariant y == \\at(y, Pre) + 13;\nloop invariant x == \\at(x, Pre) + 14;\nloop invariant y == \\at(y, Pre) - 14;\nloop invariant x == \\at(x, Pre) - 14;\nloop invariant y == \\at(y, Pre) + 14;\nloop invariant x == \\at(x, Pre) + 15;\nloop invariant y == \\at(y, Pre) - 15;\nloop invariant x == \\at(x, Pre) - 15;\nloop invariant y == \\at(y, Pre) + 15;\nloop invariant x == \\at(x, Pre) + 16;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1;\nloop invariant x <= y;\nloop invariant y + 2 * x >= N + 1;\nloop invariant (y == -1) ==> (x >= 2 * N + 3);\nloop invariant (y < 0) ==> (x > N);\nloop invariant (y >= 0) ==> (x <= N);\nloop invariant (y == 0) ==> (x == N);\nloop invariant (y == 1) ==> (x == N + 1);\nloop invariant (y == 2) ==> (x == N + 2);\nloop invariant (y == 3) ==> (x == N + 3);\nloop invariant (y == 4) ==> (x == N + 4);\nloop invariant (y == 5) ==> (x == N + 5);\nloop invariant (y == 6) ==> (x == N + 6);\nloop invariant (y == 7) ==> (x == N + 7);\nloop invariant (y == 8) ==> (x == N + 8);\nloop invariant (y == 9) ==> (x == N + 9);\nloop invariant (y == 10) ==> (x == N + 10);\nloop invariant (y == 11) ==> (x == N + 11);\nloop invariant (y == 12) ==> (x == N + 12);\nloop invariant (y == 13) ==> (x == N + 13);\nloop invariant (y == 14) ==> (x == N + 14);\nloop invariant (y == 15) ==> (x == N + 15);\nloop invariant (y == 16) ==> (x == N + 16);\nloop invariant (y == 17) ==> (x == N + 17);\nloop invariant (y == 18) ==> (x == N + 18);\nloop invariant (y == 19) ==> (x == N + 19);\nloop invariant (y == 20) ==> (x == N + 20);\nloop invariant (y == 21) ==> (x == N + 21);\nloop invariant (y == 22) ==> (x == N + 22);\nloop invariant (y == 23) ==> (x == N + 23);\nloop invariant (y == 24) ==> (x == N + 24);\nloop invariant (y == 25) ==> (x == N + 25);\nloop invariant (y == 26) ==> (x == N + 26);\nloop invariant (y == 27) ==> (x == N + 27);\nloop invariant (y == 28) ==> (x == N + 28);\nloop invariant (y == 29) ==> (x == N + 29);\nloop invariant (y == 30) ==> (x == N + 30);\nloop invariant (y == 31) ==> (x == N + 31);\nloop invariant (y == 32) ==> (x == N + 32);\nloop invariant (y == 33) ==> (x == N + 33);\nloop invariant (y == 34) ==> (x == N + 34);\nloop invariant (y == 35) ==> (x == N + 35);\nloop invariant (y == 36) ==> (x == N + 36);\nloop invariant (y == 37) ==> (x == N + 37);\nloop invariant (y == 38) ==> (x == N + 38);\nloop invariant (y == 39) ==> (x == N + 39);\nloop invariant (y == 40) ==> (x == N + 40);\nloop invariant (y == 41) ==> (x == N + 41);\nloop invariant (y == 42) ==> (x == N + 42);\nloop invariant (y == 43) ==> (x == N + 43);\nloop invariant (y == 44) ==> (x == N + 44);\nloop invariant (y == 45) ==> (x == N + 45);\nloop invariant (y == 46) ==> (x == N + 46);\nloop invariant (y == 47) ==> (x == N + 47);\nloop invariant (y == 48) ==> (x == N + 48);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\nloop invariant i4: (y == -1) ==> (x >= 2 * N + 3);\nloop invariant i5: (y < 0) ==> (x > N);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= N ==> y >= 1;\nloop invariant x >= N+1 ==> y <= -1;\nloop invariant x <= N ==> y <= x - N;\nloop invariant x >= N+1 ==> y >= x - N - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y = N - x;\nloop invariant (0 <= y <= N);\nloop invariant (0 <= x <= 2 * N + 3);\nloop invariant (x == 0 ==> y == N);\nloop invariant (x == 2 * N + 3 ==> y == -1);\nloop invariant (x == N + 1 ==> y == -2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N + 2;\nloop invariant 0 <= y <= -1;\nloop invariant x >= N + 1;\nloop invariant x <= 2 * N + 3;\nloop invariant y <= -1;\nloop invariant y >= -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n\nloop invariant i6: y >= -1;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant y <= -1;\nloop invariant x >= N + 1;\nloop invariant y => x >= N + 1;\nloop invariant y < 0 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( x >= 0 );\nloop invariant ( y >= 0 );\nloop invariant ( x <= N + 1 );\nloop invariant ( y <= N + 1 );\nloop invariant ( y <= x );\nloop invariant ( x <= 2 * N + 3 );\nloop invariant ( (y == -1 ==> x >= 2 * N + 3) );\nloop invariant ( (x >= N ==> y >= -1) );\nloop invariant ( (y >= N ==> x <= N + 1) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\nloop invariant i1: ( x >= 0 );\nloop invariant i2: ( y >= 0 );\n\nloop invariant i4: ( y <= N + 1 );\nloop invariant i5: ( y <= x );\n\nloop invariant i7: ( (y == -1 ==> x >= 2 * N + 3) );\nloop invariant i8: ( (x >= N ==> y >= -1) );\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant 0 <= y <= 1;\nloop invariant x >= N + 1;\nloop invariant x <= N + 1;\nloop invariant y == -1;\nloop invariant x >= 2 * N + 3;\nloop invariant x >= 2 * N + 3;\nloop invariant y == -1;\nloop invariant x >= 2 * N + 3;\nloop invariant 0 <= x <= 2 * N + 2;\nloop invariant 0 <= y <= 1;\nloop invariant x >= N + 1;\nloop invariant x <= N + 1;\nloop invariant y == -1;\nloop invariant x >= 2 * N + 3;\nloop invariant x >= 2 * N + 3;\nloop invariant y == -1;\nloop invariant x >= 2 * N + 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N + 3;\nloop invariant -1 <= y <= x;\nloop invariant -1 <= y <= N;\nloop invariant -1 <= y <= x - 1;\nloop invariant -1 <= y <= N + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\nloop invariant i2: -1 <= y <= x;\n\n\nloop invariant i5: -1 <= y <= N + 1;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\nloop invariant i1: y = 1;\nloop invariant i2: x = 0;\nloop invariant i3: N >= 0;\nloop invariant i4: N < 2 * N + 3;\nloop invariant i5: N < 3 * N + 5;\nloop invariant i6: N < 2 * N + 7;\nloop invariant i7: N < 4 * N + 9;\nloop invariant i8: N < 2 * N + 11;\nloop invariant i9: N < 2 * N + 13;\nloop invariant i10: N < 2 * N + 15;\nloop invariant i11: N < 2 * N + 17;\nloop invariant i12: N < 2 * N + 19;\nloop invariant i13: N < 2 * N + 21;\nloop invariant i14: N < 2 * N + 23;\nloop invariant i15: N < 2 * N + 25;\nloop invariant i16: N < 2 * N + 27;\nloop invariant i17: N < 2 * N + 29;\nloop invariant i18: N < 2 * N + 31;\nloop invariant i19: N < 2 * N + 33;\nloop invariant i20: N < 2 * N + 35;\nloop invariant i21: N < 2 * N + 37;\nloop invariant i22: N < 2 * N + 39;\nloop invariant i23: N < 2 * N + 41;\nloop invariant i24: N < 2 * N + 43;\nloop invariant i25: N < 2 * N + 45;\nloop invariant i26: N < 2 * N + 47;\nloop invariant i27: N < 2 * N + 49;\nloop invariant i28: N < 2 * N + 51;\nloop invariant i29: N < 2 * N + 53;\nloop invariant i30: N < 2 * N + 55;\nloop invariant i31: N < 2 * N + 57;\nloop invariant i32: N < 2 * N + 59;\nloop invariant i33: N < 2 * N + 61;\nloop invariant i34: N < 2 * N + 63;\nloop invariant i35: N < 2 * N + 65;\nloop invariant i36: N < 2 * N + 67;\nloop invariant i37: N < 2 * N + 69;\nloop invariant i38: N < 2 * N + 71;\nloop invariant i39: N < 2 * N + 73;\nloop invariant i40: N < 2 * N + 75;\nloop invariant i41: N < 2 * N + 77;\nloop invariant i42: N < 2 * N + 79;\nloop invariant i43: N < 2 * N + 81;\nloop invariant i44: N < 2 * N + 83;\nloop invariant i45: N < 2 * N + 85;\nloop invariant i46: N < 2 * N + 87;\nloop invariant i47: N < 2 * N + 89;\nloop invariant i48: N < 2 * N + 91;\nloop invariant i49: N < 2 * N + 93;\nloop invariant i50: N < 2 * N + 95;\nloop invariant i51: N < 2 * N + 97;\nloop invariant i52: N < 2 * N + 99;\nloop invariant i53: N < 2 * N + 101;\nloop invariant i54: N < 2 * N + 103;\nloop invariant i55: N < 2 * N + 105;\nloop invariant i56: N < 2 * N + 107;\nloop invariant i57: N < 2 * N + 109;\nloop invariant i58: N < 2 * N + 111;\nloop invariant i59: N < 2 * N + 113;\nloop invariant i60: N < 2 * N + 115;\nloop invariant i61: N < 2 * N + 117;\nloop invariant i62: N < 2 * N + 119;\nloop invariant i63: N < 2 * N + 121;\nloop invariant i64: N < 2 * N + 123;\nloop invariant i65: N < 2 * N + 125;\nloop invariant i66: N < 2 * N + 127;\nloop invariant i67: N < 2 * N + 129;\nloop invariant i68: N < 2 * N + 131;\nloop invariant i69: N < 2 * N + 133;\nloop invariant i70: N < 2 * N + 135;\nloop invariant i71: N < 2 * N + 137;\nloop invariant i72: N < 2 * N + 139;\nloop invariant i73: N < 2 * N + 141;\nloop invariant i74: N < 2 * N + 143;\nloop invariant i75: N < 2 * N + 145;\nloop invariant i76: N < 2 * N + 147;\nloop invariant i77: 1 <= x <= N+1;\nloop invariant i78: -N <= y <= N+2;\nloop invariant i79: (x == N+1) ==> (y == 0);\nloop invariant i80: 0 <= y;\nloop invariant i81: 0 <= x <= 2 * N + 2;\nloop invariant i82: y < 0 ==> x >= N + 1;\nloop invariant i83: 0 <= y <= 100000;\nloop invariant i84: x >= (1 + (y - 1) * y / 2);\nloop invariant i85: 0 <= x <= 2 * N + 3;\nloop invariant i86: 0 <= y <= N + 1;\nloop invariant i87: x >= 0;\nloop invariant i88: y >= 0;\nloop invariant i89: \\at(x, Pre) <= x;\nloop invariant i90: \\at(y, Pre) <= y;\nloop invariant i91: \\at(x, Pre) >= x;\nloop invariant i92: \\at(y, Pre) >= y;\nloop invariant i93: x == \\at(x, Pre) + 1;\nloop invariant i94: y == \\at(y, Pre) + 1;\nloop invariant i95: x == \\at(x, Pre) - 1;\nloop invariant i96: y == \\at(y, Pre) - 1;\nloop invariant i97: x == \\at(x, Pre) + 2;\nloop invariant i98: y == \\at(y, Pre) - 2;\nloop invariant i99: x == \\at(x, Pre) - 2;\nloop invariant i100: y == \\at(y, Pre) + 2;\nloop invariant i101: x == \\at(x, Pre) + 3;\nloop invariant i102: y == \\at(y, Pre) - 3;\nloop invariant i103: x == \\at(x, Pre) - 3;\nloop invariant i104: y == \\at(y, Pre) + 3;\nloop invariant i105: x == \\at(x, Pre) + 4;\nloop invariant i106: y == \\at(y, Pre) - 4;\nloop invariant i107: x == \\at(x, Pre) - 4;\nloop invariant i108: y == \\at(y, Pre) + 4;\nloop invariant i109: x == \\at(x, Pre) + 5;\nloop invariant i110: y == \\at(y, Pre) - 5;\nloop invariant i111: x == \\at(x, Pre) - 5;\nloop invariant i112: y == \\at(y, Pre) + 5;\nloop invariant i113: x == \\at(x, Pre) + 6;\nloop invariant i114: y == \\at(y, Pre) - 6;\nloop invariant i115: x == \\at(x, Pre) - 6;\nloop invariant i116: y == \\at(y, Pre) + 6;\nloop invariant i117: x == \\at(x, Pre) + 7;\nloop invariant i118: y == \\at(y, Pre) - 7;\nloop invariant i119: x == \\at(x, Pre) - 7;\nloop invariant i120: y == \\at(y, Pre) + 7;\nloop invariant i121: x == \\at(x, Pre) + 8;\nloop invariant i122: y == \\at(y, Pre) - 8;\nloop invariant i123: x == \\at(x, Pre) - 8;\nloop invariant i124: y == \\at(y, Pre) + 8;\nloop invariant i125: x == \\at(x, Pre) + 9;\nloop invariant i126: y == \\at(y, Pre) - 9;\nloop invariant i127: x == \\at(x, Pre) - 9;\nloop invariant i128: y == \\at(y, Pre) + 9;\nloop invariant i129: x == \\at(x, Pre) + 10;\nloop invariant i130: y == \\at(y, Pre) - 10;\nloop invariant i131: x == \\at(x, Pre) - 10;\nloop invariant i132: y == \\at(y, Pre) + 10;\nloop invariant i133: x == \\at(x, Pre) + 11;\nloop invariant i134: y == \\at(y, Pre) - 11;\nloop invariant i135: x == \\at(x, Pre) - 11;\nloop invariant i136: y == \\at(y, Pre) + 11;\nloop invariant i137: x == \\at(x, Pre) + 12;\nloop invariant i138: y == \\at(y, Pre) - 12;\nloop invariant i139: x == \\at(x, Pre) - 12;\nloop invariant i140: y == \\at(y, Pre) + 12;\nloop invariant i141: x == \\at(x, Pre) + 13;\nloop invariant i142: y == \\at(y, Pre) - 13;\nloop invariant i143: x == \\at(x, Pre) - 13;\nloop invariant i144: y == \\at(y, Pre) + 13;\nloop invariant i145: x == \\at(x, Pre) + 14;\nloop invariant i146: y == \\at(y, Pre) - 14;\nloop invariant i147: x == \\at(x, Pre) - 14;\nloop invariant i148: y == \\at(y, Pre) + 14;\nloop invariant i149: x == \\at(x, Pre) + 15;\nloop invariant i150: y == \\at(y, Pre) - 15;\nloop invariant i151: x == \\at(x, Pre) - 15;\nloop invariant i152: y == \\at(y, Pre) + 15;\nloop invariant i153: x == \\at(x, Pre) + 16;\nloop invariant i154: 0 <= y <= 1;\nloop invariant i155: x <= y;\nloop invariant i156: y + 2 * x >= N + 1;\nloop invariant i157: (y == -1) ==> (x >= 2 * N + 3);\nloop invariant i158: (y < 0) ==> (x > N);\nloop invariant i159: (y >= 0) ==> (x <= N);\nloop invariant i160: (y == 0) ==> (x == N);\nloop invariant i161: (y == 1) ==> (x == N + 1);\nloop invariant i162: (y == 2) ==> (x == N + 2);\nloop invariant i163: (y == 3) ==> (x == N + 3);\nloop invariant i164: (y == 4) ==> (x == N + 4);\nloop invariant i165: (y == 5) ==> (x == N + 5);\nloop invariant i166: (y == 6) ==> (x == N + 6);\nloop invariant i167: (y == 7) ==> (x == N + 7);\nloop invariant i168: (y == 8) ==> (x == N + 8);\nloop invariant i169: (y == 9) ==> (x == N + 9);\nloop invariant i170: (y == 10) ==> (x == N + 10);\nloop invariant i171: (y == 11) ==> (x == N + 11);\nloop invariant i172: (y == 12) ==> (x == N + 12);\nloop invariant i173: (y == 13) ==> (x == N + 13);\nloop invariant i174: (y == 14) ==> (x == N + 14);\nloop invariant i175: (y == 15) ==> (x == N + 15);\nloop invariant i176: (y == 16) ==> (x == N + 16);\nloop invariant i177: (y == 17) ==> (x == N + 17);\nloop invariant i178: (y == 18) ==> (x == N + 18);\nloop invariant i179: (y == 19) ==> (x == N + 19);\nloop invariant i180: (y == 20) ==> (x == N + 20);\nloop invariant i181: (y == 21) ==> (x == N + 21);\nloop invariant i182: (y == 22) ==> (x == N + 22);\nloop invariant i183: (y == 23) ==> (x == N + 23);\nloop invariant i184: (y == 24) ==> (x == N + 24);\nloop invariant i185: (y == 25) ==> (x == N + 25);\nloop invariant i186: (y == 26) ==> (x == N + 26);\nloop invariant i187: (y == 27) ==> (x == N + 27);\nloop invariant i188: (y == 28) ==> (x == N + 28);\nloop invariant i189: (y == 29) ==> (x == N + 29);\nloop invariant i190: (y == 30) ==> (x == N + 30);\nloop invariant i191: (y == 31) ==> (x == N + 31);\nloop invariant i192: (y == 32) ==> (x == N + 32);\nloop invariant i193: (y == 33) ==> (x == N + 33);\nloop invariant i194: (y == 34) ==> (x == N + 34);\nloop invariant i195: (y == 35) ==> (x == N + 35);\nloop invariant i196: (y == 36) ==> (x == N + 36);\nloop invariant i197: (y == 37) ==> (x == N + 37);\nloop invariant i198: (y == 38) ==> (x == N + 38);\nloop invariant i199: (y == 39) ==> (x == N + 39);\nloop invariant i200: (y == 40) ==> (x == N + 40);\nloop invariant i201: (y == 41) ==> (x == N + 41);\nloop invariant i202: (y == 42) ==> (x == N + 42);\nloop invariant i203: (y == 43) ==> (x == N + 43);\nloop invariant i204: (y == 44) ==> (x == N + 44);\nloop invariant i205: (y == 45) ==> (x == N + 45);\nloop invariant i206: (y == 46) ==> (x == N + 46);\nloop invariant i207: (y == 47) ==> (x == N + 47);\nloop invariant i208: (y == 48) ==> (x == N + 48);\nloop invariant i209: x <= N ==> y >= 1;\nloop invariant i210: x >= N+1 ==> y <= -1;\nloop invariant i211: x <= N ==> y <= x - N;\nloop invariant i212: x >= N+1 ==> y >= x - N - 1;\nloop invariant i213: y = N - x;\nloop invariant i214: (0 <= y <= N);\nloop invariant i215: (0 <= x <= 2 * N + 3);\nloop invariant i216: (x == 0 ==> y == N);\nloop invariant i217: (x == 2 * N + 3 ==> y == -1);\nloop invariant i218: (x == N + 1 ==> y == -2);\nloop invariant i219: 0 <= x <= N + 2;\nloop invariant i220: 0 <= y <= -1;\nloop invariant i221: x >= N + 1;\nloop invariant i222: x <= 2 * N + 3;\nloop invariant i223: y <= -1;\nloop invariant i224: y >= -1;\nloop invariant i225: y => x >= N + 1;\nloop invariant i226: y < 0 => x >= N + 1;\nloop invariant i227: y < 0 => x >= N + 1 => x >= N + 1;\nloop invariant i228: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i229: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i230: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i231: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i232: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i233: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i234: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i235: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i236: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i237: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i238: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i239: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i240: y < 0 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1 => x >= N + 1;\nloop invariant i241: ( x >= 0 );\nloop invariant i242: ( y >= 0 );\nloop invariant i243: ( x <= N + 1 );\nloop invariant i244: ( y <= N + 1 );\nloop invariant i245: ( y <= x );\nloop invariant i246: ( x <= 2 * N + 3 );\nloop invariant i247: ( (y == -1 ==> x >= 2 * N + 3) );\nloop invariant i248: ( (x >= N ==> y >= -1) );\nloop invariant i249: ( (y >= N ==> x <= N + 1) );\nloop invariant i250: x <= N + 1;\nloop invariant i251: y == -1;\nloop invariant i252: x >= 2 * N + 3;\nloop invariant i253: 0 <= x <= N + 3;\nloop invariant i254: -1 <= y <= x;\nloop invariant i255: -1 <= y <= N;\nloop invariant i256: -1 <= y <= x - 1;\nloop invariant i257: -1 <= y <= N + 1;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 111,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\n\n\nloop invariant i3: N >= 0;\nloop invariant i4: N < 2 * N + 3;\nloop invariant i5: N < 3 * N + 5;\nloop invariant i6: N < 2 * N + 7;\nloop invariant i7: N < 4 * N + 9;\nloop invariant i8: N < 2 * N + 11;\nloop invariant i9: N < 2 * N + 13;\nloop invariant i10: N < 2 * N + 15;\nloop invariant i11: N < 2 * N + 17;\nloop invariant i12: N < 2 * N + 19;\nloop invariant i13: N < 2 * N + 21;\nloop invariant i14: N < 2 * N + 23;\nloop invariant i15: N < 2 * N + 25;\nloop invariant i16: N < 2 * N + 27;\nloop invariant i17: N < 2 * N + 29;\nloop invariant i18: N < 2 * N + 31;\nloop invariant i19: N < 2 * N + 33;\nloop invariant i20: N < 2 * N + 35;\nloop invariant i21: N < 2 * N + 37;\nloop invariant i22: N < 2 * N + 39;\nloop invariant i23: N < 2 * N + 41;\nloop invariant i24: N < 2 * N + 43;\nloop invariant i25: N < 2 * N + 45;\nloop invariant i26: N < 2 * N + 47;\nloop invariant i27: N < 2 * N + 49;\nloop invariant i28: N < 2 * N + 51;\nloop invariant i29: N < 2 * N + 53;\nloop invariant i30: N < 2 * N + 55;\nloop invariant i31: N < 2 * N + 57;\nloop invariant i32: N < 2 * N + 59;\nloop invariant i33: N < 2 * N + 61;\nloop invariant i34: N < 2 * N + 63;\nloop invariant i35: N < 2 * N + 65;\nloop invariant i36: N < 2 * N + 67;\nloop invariant i37: N < 2 * N + 69;\nloop invariant i38: N < 2 * N + 71;\nloop invariant i39: N < 2 * N + 73;\nloop invariant i40: N < 2 * N + 75;\nloop invariant i41: N < 2 * N + 77;\nloop invariant i42: N < 2 * N + 79;\nloop invariant i43: N < 2 * N + 81;\nloop invariant i44: N < 2 * N + 83;\nloop invariant i45: N < 2 * N + 85;\nloop invariant i46: N < 2 * N + 87;\nloop invariant i47: N < 2 * N + 89;\nloop invariant i48: N < 2 * N + 91;\nloop invariant i49: N < 2 * N + 93;\nloop invariant i50: N < 2 * N + 95;\nloop invariant i51: N < 2 * N + 97;\nloop invariant i52: N < 2 * N + 99;\nloop invariant i53: N < 2 * N + 101;\nloop invariant i54: N < 2 * N + 103;\nloop invariant i55: N < 2 * N + 105;\nloop invariant i56: N < 2 * N + 107;\nloop invariant i57: N < 2 * N + 109;\nloop invariant i58: N < 2 * N + 111;\nloop invariant i59: N < 2 * N + 113;\nloop invariant i60: N < 2 * N + 115;\nloop invariant i61: N < 2 * N + 117;\nloop invariant i62: N < 2 * N + 119;\nloop invariant i63: N < 2 * N + 121;\nloop invariant i64: N < 2 * N + 123;\nloop invariant i65: N < 2 * N + 125;\nloop invariant i66: N < 2 * N + 127;\nloop invariant i67: N < 2 * N + 129;\nloop invariant i68: N < 2 * N + 131;\nloop invariant i69: N < 2 * N + 133;\nloop invariant i70: N < 2 * N + 135;\nloop invariant i71: N < 2 * N + 137;\nloop invariant i72: N < 2 * N + 139;\nloop invariant i73: N < 2 * N + 141;\nloop invariant i74: N < 2 * N + 143;\nloop invariant i75: N < 2 * N + 145;\nloop invariant i76: N < 2 * N + 147;\n\nloop invariant i78: -N <= y <= N+2;\n\nloop invariant i80: 0 <= y;\n\nloop invariant i82: y < 0 ==> x >= N + 1;\n\n\n\nloop invariant i86: 0 <= y <= N + 1;\nloop invariant i87: x >= 0;\nloop invariant i88: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i157: (y == -1) ==> (x >= 2 * N + 3);\nloop invariant i158: (y < 0) ==> (x > N);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i224: y >= -1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i241: ( x >= 0 );\nloop invariant i242: ( y >= 0 );\n\nloop invariant i244: ( y <= N + 1 );\nloop invariant i245: ( y <= x );\n\nloop invariant i247: ( (y == -1 ==> x >= 2 * N + 3) );\nloop invariant i248: ( (x >= N ==> y >= -1) );\n\n\n\n\n\nloop invariant i254: -1 <= y <= x;\n\n\nloop invariant i257: -1 <= y <= N + 1;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 134,
        "success_count": 106,
        "failure_count": 28,
        "success_rate": 0.7910447761194029
    }
}