{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen;\nloop invariant nchar <= out;\nloop invariant out <= outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen; loop invariant 0 <= nchar <= outfilelen; loop invariant out <= nchar; loop invariant 0 <= outfilelen <= 10^9; loop invariant 0 <= nchar <= 10^9; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= out <= outfilelen;\nloop invariant nchar >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= out <= nchar;\nloop invariant out + 1 <= outfilelen;\nloop invariant nchar + 1 <= outfilelen;\nloop invariant out <= nchar;\nloop invariant nchar + out <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant (nchar >= outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant (out + nchar >= outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant (out >= outfilelen) ==> (out == outfilelen);\nloop invariant (nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant (out >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant (nchar >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant (nchar + out >= outfilelen) ==> (out == outfilelen);\nloop invariant (nchar + out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant (nchar + out == outfilelen) ==> (out == outfilelen);\nloop invariant (nchar + out == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (nchar + out == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (nchar + out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\n*/\n```",
            "```\n/*@\nloop invariant 0 < nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= out <= outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant nchar <= out;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out <= nchar;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 0 <= y <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar == out;\nloop invariant nchar <= y;\nloop invariant nchar >= y;\nloop invariant (nchar >= outfilelen) == (out == outfilelen);\nloop invariant (nchar >= outfilelen) == (y == outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant out + 1 <= outfilelen;\nloop invariant nchar + 1 <= outfilelen;\nloop invariant 0 <= out;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen - 1;\nloop invariant out <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar < outfilelen ==> out < outfilelen;\nloop invariant nchar < outfilelen ==> out <= outfilelen;\nloop invariant nchar >= outfilelen ==> out == outfilelen;\nloop invariant nchar >= outfilelen ==> out == outfilelen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar - out <= outfilelen;\nloop invariant out <= outfilelen - nchar;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar <= outfilelen - out;\nloop invariant (nchar == 0) ==> (out == 0);\nloop invariant (nchar > 0) ==> (out > 0);\nloop invariant (out < outfilelen) ==> (nchar < outfilelen);\nloop invariant (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out < outfilelen) ==> (nchar <= outfilelen - out);\nloop invariant (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out < outfilelen) ==> (nchar <= outfilelen - out);\nloop invariant (out == outfilelen) ==> (nchar == outfilelen);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= nchar;\nloop invariant nchar <= out;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= outfilelen <= 100000;loop invariant 0 <= nchar <= outfilelen;loop invariant outfilelen > 0 ==> nchar < outfilelen;loop invariant outfilelen <= 0 ==> nchar <= outfilelen;loop invariant outfilelen > 0 ==> out <= outfilelen;loop invariant outfilelen <= 0 ==> out <= outfilelen;loop invariant outfilelen > 0 ==> out >= 1;loop invariant outfilelen <= 0 ==> out >= 1;loop invariant outfilelen > 0 ==> out < outfilelen;loop invariant outfilelen <= 0 ==> out < outfilelen;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen;\nloop invariant nchar <= out;\nloop invariant out <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out < outfilelen;\nloop invariant i3: nchar <= out;\nloop invariant i4: out <= outfilelen;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen; loop invariant 0 <= nchar <= outfilelen; loop invariant out <= nchar; loop invariant 0 <= outfilelen <= 10^9; loop invariant 0 <= nchar <= 10^9; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= out <= outfilelen;\nloop invariant nchar >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\nloop invariant i2: nchar >= 0;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= out <= nchar;\nloop invariant out + 1 <= outfilelen;\nloop invariant nchar + 1 <= outfilelen;\nloop invariant out <= nchar;\nloop invariant nchar + out <= outfilelen;\nloop invariant out + nchar <= outfilelen;\nloop invariant (nchar >= outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant (out + nchar >= outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant (out >= outfilelen) ==> (out == outfilelen);\nloop invariant (nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant (out >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant (nchar >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant (nchar + out >= outfilelen) ==> (out == outfilelen);\nloop invariant (nchar + out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant (nchar + out == outfilelen) ==> (out == outfilelen);\nloop invariant (nchar + out == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (nchar + out == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (nchar + out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant (out + nchar == outfilelen) ==> (nchar == outfilelen);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: nchar >= 0;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: 0 <= out <= nchar;\nloop invariant i5: out + 1 <= outfilelen;\nloop invariant i6: nchar + 1 <= outfilelen;\nloop invariant i7: out <= nchar;\nloop invariant i8: nchar + out <= outfilelen;\nloop invariant i9: out + nchar <= outfilelen;\nloop invariant i10: (nchar >= outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i11: (out + nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i12: (out + nchar >= outfilelen) ==> (out == outfilelen);\nloop invariant i13: (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant i14: (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant i15: (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i16: (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant i17: (out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i18: (out >= outfilelen) ==> (out == outfilelen);\nloop invariant i19: (nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i20: (out >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i21: (nchar >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i22: (nchar + out >= outfilelen) ==> (out == outfilelen);\nloop invariant i23: (nchar + out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i24: (nchar + out == outfilelen) ==> (out == outfilelen);\nloop invariant i25: (nchar + out == outfilelen) ==> (nchar == outfilelen);\nloop invariant i26: (out == outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i27: (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i28: (nchar == outfilelen) ==> (nchar + out == outfilelen);\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 < nchar <= outfilelen;\nloop invariant 0 <= out < outfilelen;\nloop invariant 0 <= out <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\nloop invariant i2: 0 <= out < outfilelen;\nloop invariant i3: 0 <= out <= outfilelen;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant nchar <= out;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out <= outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out;\nloop invariant i2: 0 <= nchar;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: nchar <= out;\nloop invariant i5: out <= outfilelen;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant out <= nchar;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: out <= nchar;\nloop invariant i4: nchar >= 0;\nloop invariant i5: out >= 0;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant 0 <= y <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar == out;\nloop invariant nchar <= y;\nloop invariant nchar >= y;\nloop invariant (nchar >= outfilelen) == (out == outfilelen);\nloop invariant (nchar >= outfilelen) == (y == outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant (nchar < outfilelen) == (out < outfilelen);\nloop invariant (nchar < outfilelen) == (y < outfilelen);\nloop invariant (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant (nchar >= outfilelen) == (y >= outfilelen);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n\n\nloop invariant i4: nchar >= 0;\nloop invariant i5: nchar <= outfilelen;\nloop invariant i6: 0 <= out <= outfilelen;\nloop invariant i7: nchar == out;\n\n\nloop invariant i10: (nchar >= outfilelen) == (out == outfilelen);\n\nloop invariant i12: (nchar < outfilelen) == (out < outfilelen);\n\nloop invariant i14: (nchar >= outfilelen) == (out >= outfilelen);\n\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant out >= 0;\nloop invariant nchar >= 0;\nloop invariant out < outfilelen;\nloop invariant nchar < outfilelen;\nloop invariant out + 1 <= outfilelen;\nloop invariant nchar + 1 <= outfilelen;\nloop invariant 0 <= out;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen - 1;\nloop invariant out <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\nloop invariant nchar + 1 <= outfilelen - 1;\nloop invariant out + 1 <= outfilelen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: out <= outfilelen;\nloop invariant i5: out >= 0;\nloop invariant i6: nchar >= 0;\nloop invariant i7: out < outfilelen;\nloop invariant i8: nchar < outfilelen;\nloop invariant i9: out + 1 <= outfilelen;\nloop invariant i10: nchar + 1 <= outfilelen;\nloop invariant i11: 0 <= out;\nloop invariant i12: 0 <= nchar;\nloop invariant i13: nchar <= outfilelen - 1;\nloop invariant i14: out <= outfilelen - 1;\n\n\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out;\nloop invariant 0 <= nchar;\nloop invariant nchar <= outfilelen;\nloop invariant out <= outfilelen;\nloop invariant nchar < outfilelen ==> out < outfilelen;\nloop invariant nchar < outfilelen ==> out <= outfilelen;\nloop invariant nchar >= outfilelen ==> out == outfilelen;\nloop invariant nchar >= outfilelen ==> out == outfilelen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out;\nloop invariant i2: 0 <= nchar;\nloop invariant i3: nchar <= outfilelen;\nloop invariant i4: out <= outfilelen;\nloop invariant i5: nchar < outfilelen ==> out < outfilelen;\nloop invariant i6: nchar < outfilelen ==> out <= outfilelen;\nloop invariant i7: nchar >= outfilelen ==> out == outfilelen;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= out <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant nchar - out <= outfilelen;\nloop invariant out <= outfilelen - nchar;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= out <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: nchar - out <= outfilelen;\nloop invariant i4: out <= outfilelen - nchar;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar <= outfilelen - out;\nloop invariant (nchar == 0) ==> (out == 0);\nloop invariant (nchar > 0) ==> (out > 0);\nloop invariant (out < outfilelen) ==> (nchar < outfilelen);\nloop invariant (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out < outfilelen) ==> (nchar <= outfilelen - out);\nloop invariant (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant (out < outfilelen) ==> (nchar <= outfilelen - out);\nloop invariant (out == outfilelen) ==> (nchar == outfilelen);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out <= outfilelen;\nloop invariant i3: nchar <= outfilelen - out;\nloop invariant i4: (nchar == 0) ==> (out == 0);\nloop invariant i5: (nchar > 0) ==> (out > 0);\nloop invariant i6: (out < outfilelen) ==> (nchar < outfilelen);\nloop invariant i7: (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant i8: (out < outfilelen) ==> (nchar <= outfilelen - out);\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= outfilelen;\nloop invariant 0 <= nchar <= outfilelen;\nloop invariant 0 <= out <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= 0;\nloop invariant out <= outfilelen;\nloop invariant nchar <= outfilelen;\nloop invariant nchar >= 0;\nloop invariant out >= nchar;\nloop invariant nchar <= out;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= outfilelen;\nloop invariant i2: 0 <= nchar <= outfilelen;\nloop invariant i3: 0 <= out <= outfilelen;\nloop invariant i4: nchar >= 0;\nloop invariant i5: out >= 0;\nloop invariant i6: out <= outfilelen;\nloop invariant i7: nchar <= outfilelen;\nloop invariant i8: out >= nchar;\nloop invariant i9: nchar <= out;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= outfilelen <= 100000;loop invariant 0 <= nchar <= outfilelen;loop invariant outfilelen > 0 ==> nchar < outfilelen;loop invariant outfilelen <= 0 ==> nchar <= outfilelen;loop invariant outfilelen > 0 ==> out <= outfilelen;loop invariant outfilelen <= 0 ==> out <= outfilelen;loop invariant outfilelen > 0 ==> out >= 1;loop invariant outfilelen <= 0 ==> out >= 1;loop invariant outfilelen > 0 ==> out < outfilelen;loop invariant outfilelen <= 0 ==> out < outfilelen;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\n\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out < outfilelen;\nloop invariant i3: nchar <= out;\nloop invariant i4: out <= outfilelen;\nloop invariant i5: 0 <= out <= outfilelen; loop invariant 0 <= nchar <= outfilelen; loop invariant out <= nchar; loop invariant 0 <= outfilelen <= 10^9; loop invariant 0 <= nchar <= 10^9; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen; loop invariant nchar <= outfilelen; loop invariant out <= outfilelen;\nloop invariant i6: 1 <= out <= outfilelen;\nloop invariant i7: nchar >= 0;\nloop invariant i8: 0 <= out <= outfilelen;\nloop invariant i9: nchar <= outfilelen;\nloop invariant i10: 0 <= out <= nchar;\nloop invariant i11: out + 1 <= outfilelen;\nloop invariant i12: nchar + 1 <= outfilelen;\nloop invariant i13: out <= nchar;\nloop invariant i14: nchar + out <= outfilelen;\nloop invariant i15: out + nchar <= outfilelen;\nloop invariant i16: (nchar >= outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i17: (out + nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i18: (out + nchar >= outfilelen) ==> (out == outfilelen);\nloop invariant i19: (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant i20: (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant i21: (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i22: (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant i23: (out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i24: (out >= outfilelen) ==> (out == outfilelen);\nloop invariant i25: (nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i26: (out >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i27: (nchar >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i28: (nchar + out >= outfilelen) ==> (out == outfilelen);\nloop invariant i29: (nchar + out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i30: (nchar + out == outfilelen) ==> (out == outfilelen);\nloop invariant i31: (nchar + out == outfilelen) ==> (nchar == outfilelen);\nloop invariant i32: (out == outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i33: (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i34: (nchar == outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i35: 0 < nchar <= outfilelen;\nloop invariant i36: 0 <= out;\nloop invariant i37: 0 <= nchar;\nloop invariant i38: out >= 0;\nloop invariant i39: x >= 0;\nloop invariant i40: y >= 0;\nloop invariant i41: 0 <= y <= outfilelen;\nloop invariant i42: nchar == out;\nloop invariant i43: nchar <= y;\nloop invariant i44: nchar >= y;\nloop invariant i45: (nchar >= outfilelen) == (out == outfilelen);\nloop invariant i46: (nchar >= outfilelen) == (y == outfilelen);\nloop invariant i47: (nchar < outfilelen) == (out < outfilelen);\nloop invariant i48: (nchar < outfilelen) == (y < outfilelen);\nloop invariant i49: (nchar >= outfilelen) == (out >= outfilelen);\nloop invariant i50: (nchar >= outfilelen) == (y >= outfilelen);\nloop invariant i51: out < outfilelen;\nloop invariant i52: nchar < outfilelen;\nloop invariant i53: nchar <= outfilelen - 1;\nloop invariant i54: out <= outfilelen - 1;\nloop invariant i55: out + 1 <= outfilelen - 1;\nloop invariant i56: nchar + 1 <= outfilelen - 1;\nloop invariant i57: nchar < outfilelen ==> out < outfilelen;\nloop invariant i58: nchar < outfilelen ==> out <= outfilelen;\nloop invariant i59: nchar >= outfilelen ==> out == outfilelen;\nloop invariant i60: nchar - out <= outfilelen;\nloop invariant i61: out <= outfilelen - nchar;\nloop invariant i62: nchar <= outfilelen - out;\nloop invariant i63: (nchar == 0) ==> (out == 0);\nloop invariant i64: (nchar > 0) ==> (out > 0);\nloop invariant i65: (out < outfilelen) ==> (nchar < outfilelen);\nloop invariant i66: (out < outfilelen) ==> (nchar <= outfilelen - out);\nloop invariant i67: i1;\nloop invariant i68: i2;\nloop invariant i69: i3;\nloop invariant i70: i4;\nloop invariant i71: i5;\nloop invariant i72: i6;\nloop invariant i73: i7;\nloop invariant i74: i8;\nloop invariant i75: i9;\nloop invariant i76: i10;\nloop invariant i77: i11;\nloop invariant i78: i12;\nloop invariant i79: i13;\nloop invariant i80: i14;\nloop invariant i81: i15;\nloop invariant i82: i16;\nloop invariant i83: i17;\nloop invariant i84: i18;\nloop invariant i85: i19;\nloop invariant i86: i20;\nloop invariant i87: i21;\nloop invariant i88: i22;\nloop invariant i89: i23;\nloop invariant i90: i24;\nloop invariant i91: i25;\nloop invariant i92: i26;\nloop invariant i93: i27;\nloop invariant i94: i28;\nloop invariant i95: i29;\nloop invariant i96: i30;\nloop invariant i97: i31;\nloop invariant i98: i32;\nloop invariant i99: i33;\nloop invariant i100: i34;\nloop invariant i101: i35;\nloop invariant i102: i36;\nloop invariant i103: i37;\nloop invariant i104: i38;\nloop invariant i105: i39;\nloop invariant i106: i40;\nloop invariant i107: i41;\nloop invariant i108: i42;\nloop invariant i109: i43;\nloop invariant i110: i44;\nloop invariant i111: i45;\nloop invariant i112: i46;\nloop invariant i113: i47;\nloop invariant i114: i48;\nloop invariant i115: i49;\nloop invariant i116: i50;\nloop invariant i117: i51;\nloop invariant i118: i52;\nloop invariant i119: i53;\nloop invariant i120: i54;\nloop invariant i121: i55;\nloop invariant i122: i56;\nloop invariant i123: i57;\nloop invariant i124: i58;\nloop invariant i125: i59;\nloop invariant i126: i60;\nloop invariant i127: i61;\nloop invariant i128: i62;\nloop invariant i129: i63;\nloop invariant i130: i64;\nloop invariant i131: i65;\nloop invariant i132: i66;\nloop invariant i133: i67;\nloop invariant i134: i68;\nloop invariant i135: i69;\nloop invariant i136: i70;\nloop invariant i137: i71;\nloop invariant i138: i72;\nloop invariant i139: i73;\nloop invariant i140: i74;\nloop invariant i141: i75;\nloop invariant i142: i76;\nloop invariant i143: i77;\nloop invariant i144: i78;\nloop invariant i145: i79;\nloop invariant i146: i80;\nloop invariant i147: i81;\nloop invariant i148: i82;\nloop invariant i149: i83;\nloop invariant i150: i84;\nloop invariant i151: i85;\nloop invariant i152: i86;\nloop invariant i153: i87;\nloop invariant i154: i88;\nloop invariant i155: i89;\nloop invariant i156: i90;\nloop invariant i157: i91;\nloop invariant i158: i92;\nloop invariant i159: i93;\nloop invariant i160: i94;\nloop invariant i161: i95;\nloop invariant i162: i96;\nloop invariant i163: i97;\nloop invariant i164: i98;\nloop invariant i165: i99;\nloop invariant i166: i100;\nloop invariant i167: i101;\nloop invariant i168: i102;\nloop invariant i169: i103;\nloop invariant i170: i104;\nloop invariant i171: i105;\nloop invariant i172: i106;\nloop invariant i173: i107;\nloop invariant i174: i108;\nloop invariant i175: i109;\nloop invariant i176: i110;\nloop invariant i177: i111;\nloop invariant i178: i112;\nloop invariant i179: i113;\nloop invariant i180: i114;\nloop invariant i181: i115;\nloop invariant i182: i116;\nloop invariant i183: i117;\nloop invariant i184: i118;\nloop invariant i185: i119;\nloop invariant i186: i120;\nloop invariant i187: i121;\nloop invariant i188: i122;\nloop invariant i189: i123;\nloop invariant i190: i124;\nloop invariant i191: i125;\nloop invariant i192: i126;\nloop invariant i193: i127;\nloop invariant i194: i128;\nloop invariant i195: i129;\nloop invariant i196: i130;\nloop invariant i197: i131;\nloop invariant i198: i132;\nloop invariant i199: i133;\nloop invariant i200: i134;\nloop invariant i201: i135;\nloop invariant i202: i136;\nloop invariant i203: i137;\nloop invariant i204: i138;\nloop invariant i205: i139;\nloop invariant i206: i140;\nloop invariant i207: i141;\nloop invariant i208: i142;\nloop invariant i209: i143;\nloop invariant i210: i144;\nloop invariant i211: i145;\nloop invariant i212: i146;\nloop invariant i213: i147;\nloop invariant i214: i148;\nloop invariant i215: i149;\nloop invariant i216: i150;\nloop invariant i217: i151;\nloop invariant i218: i152;\nloop invariant i219: i153;\nloop invariant i220: i154;\nloop invariant i221: i155;\nloop invariant i222: i156;\nloop invariant i223: i157;\nloop invariant i224: i158;\nloop invariant i225: 0 <= outfilelen;\nloop invariant i226: out >= nchar;\nloop invariant i227: 0 <= outfilelen <= 100000;loop invariant 0 <= nchar <= outfilelen;loop invariant outfilelen > 0 ==> nchar < outfilelen;loop invariant outfilelen <= 0 ==> nchar <= outfilelen;loop invariant outfilelen > 0 ==> out <= outfilelen;loop invariant outfilelen <= 0 ==> out <= outfilelen;loop invariant outfilelen > 0 ==> out >= 1;loop invariant outfilelen <= 0 ==> out >= 1;loop invariant outfilelen > 0 ==> out < outfilelen;loop invariant outfilelen <= 0 ==> out < outfilelen;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;loop invariant outfilelen <= 0 ==> nchar >= 0;loop invariant outfilelen > 0 ==> nchar >= 1;loop invariant outfilelen <= 0 ==> nchar >= 1;loop invariant outfilelen > 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen <= 0 ==> nchar <= outfilelen - 1;loop invariant outfilelen > 0 ==> nchar >= 0;\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "combined_annotation_num_solver_calls": 172,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  /*@\nloop invariant i1: 0 <= nchar <= outfilelen;\nloop invariant i2: 0 <= out < outfilelen;\nloop invariant i3: nchar <= out;\nloop invariant i4: out <= outfilelen;\n\n\nloop invariant i7: nchar >= 0;\nloop invariant i8: 0 <= out <= outfilelen;\nloop invariant i9: nchar <= outfilelen;\nloop invariant i10: 0 <= out <= nchar;\nloop invariant i11: out + 1 <= outfilelen;\nloop invariant i12: nchar + 1 <= outfilelen;\nloop invariant i13: out <= nchar;\nloop invariant i14: nchar + out <= outfilelen;\nloop invariant i15: out + nchar <= outfilelen;\nloop invariant i16: (nchar >= outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i17: (out + nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i18: (out + nchar >= outfilelen) ==> (out == outfilelen);\nloop invariant i19: (out + nchar == outfilelen) ==> (out == outfilelen);\nloop invariant i20: (out + nchar == outfilelen) ==> (nchar == outfilelen);\nloop invariant i21: (nchar == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i22: (out == outfilelen) ==> (nchar == outfilelen);\nloop invariant i23: (out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i24: (out >= outfilelen) ==> (out == outfilelen);\nloop invariant i25: (nchar >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i26: (out >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i27: (nchar >= outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i28: (nchar + out >= outfilelen) ==> (out == outfilelen);\nloop invariant i29: (nchar + out >= outfilelen) ==> (nchar == outfilelen);\nloop invariant i30: (nchar + out == outfilelen) ==> (out == outfilelen);\nloop invariant i31: (nchar + out == outfilelen) ==> (nchar == outfilelen);\nloop invariant i32: (out == outfilelen) ==> (nchar + out == outfilelen);\nloop invariant i33: (out == outfilelen) ==> (out + nchar == outfilelen);\nloop invariant i34: (nchar == outfilelen) ==> (nchar + out == outfilelen);\n\nloop invariant i36: 0 <= out;\nloop invariant i37: 0 <= nchar;\nloop invariant i38: out >= 0;\n\n\n\nloop invariant i42: nchar == out;\n\n\nloop invariant i45: (nchar >= outfilelen) == (out == outfilelen);\n\nloop invariant i47: (nchar < outfilelen) == (out < outfilelen);\n\nloop invariant i49: (nchar >= outfilelen) == (out >= outfilelen);\n\nloop invariant i51: out < outfilelen;\nloop invariant i52: nchar < outfilelen;\nloop invariant i53: nchar <= outfilelen - 1;\nloop invariant i54: out <= outfilelen - 1;\n\n\nloop invariant i57: nchar < outfilelen ==> out < outfilelen;\nloop invariant i58: nchar < outfilelen ==> out <= outfilelen;\nloop invariant i59: nchar >= outfilelen ==> out == outfilelen;\nloop invariant i60: nchar - out <= outfilelen;\nloop invariant i61: out <= outfilelen - nchar;\nloop invariant i62: nchar <= outfilelen - out;\nloop invariant i63: (nchar == 0) ==> (out == 0);\nloop invariant i64: (nchar > 0) ==> (out > 0);\nloop invariant i65: (out < outfilelen) ==> (nchar < outfilelen);\nloop invariant i66: (out < outfilelen) ==> (nchar <= outfilelen - out);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i225: 0 <= outfilelen;\nloop invariant i226: out >= nchar;\n\n*/\nwhile(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\n\t{;\n//@ assert(out<outfilelen);\n}\n\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n\n      {;\n//@ assert(out<outfilelen);\n}\n\n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n\n  {;\n//@ assert(out<outfilelen);\n}\n\n  out++;\n RETURN:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 168,
        "success_count": 138,
        "failure_count": 30,
        "success_rate": 0.8214285714285714
    }
}