{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x < 100;\nloop invariant y <= 100;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x + y >= 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 150;\nloop invariant x + y == 100 ==> x <= 50;\nloop invariant x + y == 100 ==> y >= 50;\nloop invariant x == 100 ==> y == 50;\nloop invariant x == 50 ==> y == 50;\n*/\n```",
            "```\n/*@\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant x >= 0;\nloop invariant y >= 100 ==> x <= 100;\nloop invariant x >= 50 ==> y >= 50;\nloop invariant x < 50 ==> y == 50;\nloop invariant x >= 50 ==> y >= 50;\nloop invariant x >= 50 ==> y == x;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant y >= (x - 50) * 2 + 50;\nloop invariant (x < 50) ==> (x == x + 1);\nloop invariant (x >= 50) ==> (x == x + 1 && y == y + 1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x < 100;\nloop invariant x >= 50 ==> y == 100;\nloop invariant x >= 50 ==> y >= 51;\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x < 100;\nloop invariant x >= 50 ==> y == 100;\nloop invariant x >= 50 ==> y >= 51;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant y == 50 + x;\nloop invariant (x < 50 ==> x >= 0);\nloop invariant (x >= 50 ==> x >= 50);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 150;\nloop invariant y == x + 50;\nloop invariant x >= 0 ==> x < 50 ==> x + 1 < 50;\nloop invariant x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100;\nloop invariant x >= 50 ==> y + 1 >= 50 ==> y + 1 < 150;\nloop invariant y == x + 50 ==> y >= x + 50 ==> y + 1 >= x + 51;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51;\nloop invariant y == x + 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51;\nloop invariant x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50;\nloop invariant x >= 0 ==> x < 50 ==> x + 1 < 50 ==> x < 50 ==> x + 1 < 50;\nloop invariant x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100 ==> x < 100 ==> x + 1 < 100;\nloop invariant x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50 ==> y == x + 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x <= y;\nloop invariant x >= 50 ==> y == x;\nloop invariant x < 50 ==> y == 50;\nloop invariant x == y ==> x == 50 && y == 50;\nloop invariant x == 100 ==> y == 100;\nloop invariant x >= y ==> x == 100;\nloop invariant x == 100 ==> y == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x >= 50 ==> y == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x + y == 100;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x + y <= 100;\nloop invariant y >= 50;\nloop invariant x >= 0;\nloop invariant y <= 50 ==> x <= y;\nloop invariant x <= y ==> x <= 50;\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x + y <= 100;\nloop invariant y >= 50;\nloop invariant x >= 0;\nloop invariant y <= 50 ==> x <= y;\nloop invariant x <= y ==> x <= 50;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x < 100;\nloop invariant y <= 100;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\n\n\nloop invariant i5: x <= y;\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x + y >= 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x <= y;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 50;\nloop invariant i6: x + y >= 50;\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 150;\nloop invariant x + y == 100 ==> x <= 50;\nloop invariant x + y == 100 ==> y >= 50;\nloop invariant x == 100 ==> y == 50;\nloop invariant x == 50 ==> y == 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant x >= 0;\nloop invariant y >= 100 ==> x <= 100;\nloop invariant x >= 50 ==> y >= 50;\nloop invariant x < 50 ==> y == 50;\nloop invariant x >= 50 ==> y >= 50;\nloop invariant x >= 50 ==> y == x;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\nloop invariant x < 50 ==> y == 50;\nloop invariant x < 50 ==> y >= 50;\nloop invariant x < 50 ==> y <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: x <= 100;\nloop invariant i2: y >= 50;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 100 ==> x <= 100;\nloop invariant i5: x >= 50 ==> y >= 50;\nloop invariant i6: x < 50 ==> y == 50;\nloop invariant i7: x >= 50 ==> y == x;\nloop invariant i8: x < 50 ==> y >= 50;\nloop invariant i9: x < 50 ==> y <= 100;\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant y >= (x - 50) * 2 + 50;\nloop invariant (x < 50) ==> (x == x + 1);\nloop invariant (x >= 50) ==> (x == x + 1 && y == y + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x < 100;\nloop invariant x >= 50 ==> y == 100;\nloop invariant x >= 50 ==> y >= 51;\nloop invariant x >= 0;\nloop invariant y >= 50;\nloop invariant x < 100;\nloop invariant x >= 50 ==> y == 100;\nloop invariant x >= 50 ==> y >= 51;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\n\n\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant y == 50 + x;\nloop invariant (x < 50 ==> x >= 0);\nloop invariant (x >= 50 ==> x >= 50);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: (x < 50 ==> x >= 0);\nloop invariant i5: (x >= 50 ==> x >= 50);\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 150;\nloop invariant y == x + 50;\nloop invariant x >= 0 ==> x < 50 ==> x + 1 < 50;\nloop invariant x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100;\nloop invariant x >= 50 ==> y + 1 >= 50 ==> y + 1 < 150;\nloop invariant y == x + 50 ==> y >= x + 50 ==> y + 1 >= x + 51;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51;\nloop invariant y == x + 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51;\nloop invariant x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50;\nloop invariant x >= 0 ==> x < 50 ==> x + 1 < 50 ==> x < 50 ==> x + 1 < 50;\nloop invariant x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100 ==> x < 100 ==> x + 1 < 100;\nloop invariant x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50;\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50 ==> y == x + 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\nloop invariant i7: y == x + 50 ==> y >= x + 50 ==> y + 1 >= x + 51;\nloop invariant i8: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51;\nloop invariant i9: y == x + 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51;\nloop invariant i10: x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50;\n\nloop invariant i12: x >= 0 ==> x < 50 ==> x + 1 < 50 ==> x < 50 ==> x + 1 < 50;\nloop invariant i13: x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100 ==> x < 100 ==> x + 1 < 100;\n\nloop invariant i15: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51;\nloop invariant i16: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50;\nloop invariant i17: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50;\nloop invariant i18: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50;\nloop invariant i19: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50 ==> y == x + 50;\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x <= y;\nloop invariant x >= 50 ==> y == x;\nloop invariant x < 50 ==> y == 50;\nloop invariant x == y ==> x == 50 && y == 50;\nloop invariant x == 100 ==> y == 100;\nloop invariant x >= y ==> x == 100;\nloop invariant x == 100 ==> y == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 0 <= y <= 100;\nloop invariant i3: x <= y;\nloop invariant i4: x >= 50 ==> y == x;\nloop invariant i5: x < 50 ==> y == 50;\n\nloop invariant i7: x == 100 ==> y == 100;\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant x >= 50 ==> y == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x >= 0;\nloop invariant i4: x <= 100;\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x + y == 100;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant x == y;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: x <= 100;\nloop invariant i7: y >= 50;\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x + y <= 100;\nloop invariant y >= 50;\nloop invariant x >= 0;\nloop invariant y <= 50 ==> x <= y;\nloop invariant x <= y ==> x <= 50;\nloop invariant 0 <= x <= 100;\nloop invariant 50 <= y <= 100;\nloop invariant x + y <= 100;\nloop invariant y >= 50;\nloop invariant x >= 0;\nloop invariant y <= 50 ==> x <= y;\nloop invariant x <= y ==> x <= 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: y >= 50;\nloop invariant i5: x >= 0;\nloop invariant i6: y <= 50 ==> x <= y;\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y >= 50;\nloop invariant y <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 100;\nloop invariant i3: y >= 50;\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 50 is partially proven to be inductive.\nloop invariant x < 100 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 50 <= y <= 100 is partially proven to be inductive.\nloop invariant x + y >= 50 is partially proven to be inductive.\nloop invariant 50 <= y <= 150 is partially proven to be inductive.\nloop invariant x + y == 100 ==> x <= 50 is partially proven to be inductive.\nloop invariant x + y == 100 ==> y >= 50 is partially proven to be inductive.\nloop invariant x == 100 ==> y == 50 is partially proven to be inductive.\nloop invariant x == 50 ==> y == 50 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y >= 100 ==> x <= 100 is partially proven to be inductive.\nloop invariant x >= 50 ==> y >= 50 is partially proven to be inductive.\nloop invariant x < 50 ==> y == 50 is partially proven to be inductive.\nloop invariant x >= 50 ==> y == x is partially proven to be inductive.\nloop invariant x < 50 ==> y >= 50 is partially proven to be inductive.\nloop invariant x < 50 ==> y <= 100 is partially proven to be inductive.\nloop invariant y >= (x - 50) * 2 + 50 is partially proven to be inductive.\nloop invariant (x < 50) ==> (x == x + 1) is preserved but not established.\nloop invariant (x >= 50) ==> (x == x + 1 && y == y + 1) is partially proven to be inductive.\nloop invariant x >= 50 ==> y == 100 is partially proven to be inductive.\nloop invariant x >= 50 ==> y >= 51 is partially proven to be inductive.\nloop invariant y == 50 + x is partially proven to be inductive.\nloop invariant (x < 50 ==> x >= 0) is partially proven to be inductive.\nloop invariant (x >= 50 ==> x >= 50) is partially proven to be inductive.\nloop invariant y == x + 50 is partially proven to be inductive.\nloop invariant x >= 0 ==> x < 50 ==> x + 1 < 50 is partially proven to be inductive.\nloop invariant x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100 is partially proven to be inductive.\nloop invariant x >= 50 ==> y + 1 >= 50 ==> y + 1 < 150 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y >= x + 50 ==> y + 1 >= x + 51 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 is partially proven to be inductive.\nloop invariant x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 is partially proven to be inductive.\nloop invariant x >= 0 ==> x < 50 ==> x + 1 < 50 ==> x < 50 ==> x + 1 < 50 is partially proven to be inductive.\nloop invariant x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100 ==> x < 100 ==> x + 1 < 100 is partially proven to be inductive.\nloop invariant x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50 is partially proven to be inductive.\nloop invariant y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50 ==> y == x + 50 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant x == y ==> x == 50 && y == 50 is partially proven to be inductive.\nloop invariant x == 100 ==> y == 100 is partially proven to be inductive.\nloop invariant x >= y ==> x == 100 is partially proven to be inductive.\nloop invariant x + y == 100 is partially proven to be inductive.\nloop invariant x == y is partially proven to be inductive.\nloop invariant x + y <= 100 is partially proven to be inductive.\nloop invariant y <= 50 ==> x <= y is partially proven to be inductive.\nloop invariant x <= y ==> x <= 50 is partially proven to be inductive.\nAssertion y == 100: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: x < 100;\nloop invariant i4: y <= 100;\nloop invariant i5: x <= y;\nloop invariant i6: 0 <= x <= 100;\nloop invariant i7: 50 <= y <= 100;\nloop invariant i8: x + y >= 50;\nloop invariant i9: 50 <= y <= 150;\nloop invariant i10: x + y == 100 ==> x <= 50;\nloop invariant i11: x + y == 100 ==> y >= 50;\nloop invariant i12: x == 100 ==> y == 50;\nloop invariant i13: x == 50 ==> y == 50;\nloop invariant i14: x <= 100;\nloop invariant i15: y >= 100 ==> x <= 100;\nloop invariant i16: x >= 50 ==> y >= 50;\nloop invariant i17: x < 50 ==> y == 50;\nloop invariant i18: x >= 50 ==> y == x;\nloop invariant i19: x < 50 ==> y >= 50;\nloop invariant i20: x < 50 ==> y <= 100;\nloop invariant i21: y >= (x - 50) * 2 + 50;\nloop invariant i22: (x < 50) ==> (x == x + 1);\nloop invariant i23: (x >= 50) ==> (x == x + 1 && y == y + 1);\nloop invariant i24: x >= 50 ==> y == 100;\nloop invariant i25: x >= 50 ==> y >= 51;\nloop invariant i26: y == 50 + x;\nloop invariant i27: (x < 50 ==> x >= 0);\nloop invariant i28: (x >= 50 ==> x >= 50);\nloop invariant i29: y == x + 50;\nloop invariant i30: x >= 0 ==> x < 50 ==> x + 1 < 50;\nloop invariant i31: x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100;\nloop invariant i32: x >= 50 ==> y + 1 >= 50 ==> y + 1 < 150;\nloop invariant i33: y == x + 50 ==> y >= x + 50 ==> y + 1 >= x + 51;\nloop invariant i34: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51;\nloop invariant i35: y == x + 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51;\nloop invariant i36: x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50;\nloop invariant i37: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50;\nloop invariant i38: x >= 0 ==> x < 50 ==> x + 1 < 50 ==> x < 50 ==> x + 1 < 50;\nloop invariant i39: x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100 ==> x < 100 ==> x + 1 < 100;\nloop invariant i40: x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100;\nloop invariant i41: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51;\nloop invariant i42: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50;\nloop invariant i43: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50;\nloop invariant i44: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50;\nloop invariant i45: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50 ==> y == x + 50;\nloop invariant i46: 0 <= y <= 100;\nloop invariant i47: x == y ==> x == 50 && y == 50;\nloop invariant i48: x == 100 ==> y == 100;\nloop invariant i49: x >= y ==> x == 100;\nloop invariant i50: x + y == 100;\nloop invariant i51: x == y;\nloop invariant i52: x + y <= 100;\nloop invariant i53: y <= 50 ==> x <= y;\nloop invariant i54: x <= y ==> x <= 50;\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\n\nloop invariant i4: y <= 100;\nloop invariant i5: x <= y;\nloop invariant i6: 0 <= x <= 100;\nloop invariant i7: 50 <= y <= 100;\nloop invariant i8: x + y >= 50;\nloop invariant i9: 50 <= y <= 150;\nloop invariant i10: x + y == 100 ==> x <= 50;\nloop invariant i11: x + y == 100 ==> y >= 50;\n\nloop invariant i13: x == 50 ==> y == 50;\nloop invariant i14: x <= 100;\nloop invariant i15: y >= 100 ==> x <= 100;\nloop invariant i16: x >= 50 ==> y >= 50;\nloop invariant i17: x < 50 ==> y == 50;\nloop invariant i18: x >= 50 ==> y == x;\nloop invariant i19: x < 50 ==> y >= 50;\nloop invariant i20: x < 50 ==> y <= 100;\n\n\n\n\n\n\nloop invariant i27: (x < 50 ==> x >= 0);\nloop invariant i28: (x >= 50 ==> x >= 50);\n\n\n\nloop invariant i32: x >= 50 ==> y + 1 >= 50 ==> y + 1 < 150;\nloop invariant i33: y == x + 50 ==> y >= x + 50 ==> y + 1 >= x + 51;\nloop invariant i34: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51;\nloop invariant i35: y == x + 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51;\nloop invariant i36: x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50;\n\nloop invariant i38: x >= 0 ==> x < 50 ==> x + 1 < 50 ==> x < 50 ==> x + 1 < 50;\nloop invariant i39: x >= 50 ==> x + 1 >= 50 ==> x + 1 < 100 ==> x < 100 ==> x + 1 < 100;\nloop invariant i40: x >= 50 ==> y + 1 >= x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100;\nloop invariant i41: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51;\nloop invariant i42: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50;\nloop invariant i43: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50;\nloop invariant i44: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50;\nloop invariant i45: y == x + 50 ==> y + 1 == x + 51 ==> y + 1 <= x + 51 ==> y + 1 == x + 51 ==> y == x + 50 ==> x >= 50 ==> x + 1 < 100 ==> y + 1 <= x + 51 ==> y == x + 50 ==> x >= 50 ==> y == x + 50 ==> y == x + 50;\nloop invariant i46: 0 <= y <= 100;\n\nloop invariant i48: x == 100 ==> y == 100;\n\n\n\n\nloop invariant i53: y <= 50 ==> x <= y;\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 50,
        "success_count": 42,
        "failure_count": 8,
        "success_rate": 0.84
    }
}