{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= m <= x <= N;\nloop invariant 0 <= v1 <= v2 <= v3 <= unknown_int();\nloop invariant x < N ==> 0 <= m < x;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant (0 <= x) && (x <= N);\nloop invariant (0 <= m) && (m <= N);\nloop invariant (0 <= input) && (input <= 1);\nloop invariant (0 <= v1) && (v1 <= 1);\nloop invariant (0 <= v2) && (v2 <= 1);\nloop invariant (0 <= v3) && (v3 <= 1);\n*/\n```",
            "```\n/*@\nloop invariant ((0 <= x) && (x <= N));\nloop invariant ((m == -1) || ((0 <= m) && (m < N)));\nloop invariant unknown_int();\nloop invariant v1;\nloop invariant v2;\nloop invariant v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N > 0 ==> 0 <= m < N;\nloop invariant input ==> (N > 0 ==> m = x) ==> input ==> (N > 0 ==> m = x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant 0 <= input <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant 0 <= input;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant x == N ==> m == N;\nloop invariant x != N ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\n*/\n```",
            "```\n/*@\nloop invariant ( m >= x ) && ( m <= n-1 );\nloop invariant ( x >= 0 ) && ( x <= n );\nloop invariant ( m >= 0 ) && ( m <= n-1 );\nloop invariant ( x >= 0 );\nloop invariant ( m >= 0 ) && ( m <= n-1 );\nloop invariant ( x >= 0 ) && ( x <= n );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant (x >= m) ==> (m <= N);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x >= m) ==> (m < N);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= m;\nloop invariant m >= 0;\nloop invariant m < N;\nloop invariant if(input ==> m == x);\nloop invariant if(!input ==> m == m);\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 100000;\nloop invariant v2 <= 100000;\nloop invariant v3 <= 100000;\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant x == 0;\nloop invariant 0 <= m <= x;\nloop invariant m == (x - 1) ==> (0 <= m);\nloop invariant m >= (x - 1) ==> (0 <= m);\nloop invariant m == (x - 1) ==> (m <= (x - 1));\nloop invariant m >= (x - 1) ==> (m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= input <= 2;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\nloop invariant (x == N) ==> (m == N);\nloop invariant (x < N) ==> (m <= x);\nloop invariant (x < N) ==> (input <= 2);\nloop invariant (x < N) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (m >= 0);\nloop invariant (x < N) ==> (m < N);\nloop invariant (x < N) ==> (m == x) ==> (input == 1);\nloop invariant (x < N) ==> (m == x) ==> (v1 == unknown_int());\nloop invariant (x < N) ==> (m == x) ==> (v2 == unknown_int());\nloop invariant (x < N) ==> (m == x) ==> (v3 == unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (input <= 2);\nloop invariant (x < N) ==> (m != x) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (input >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m < N);\nloop invariant (x < N) ==> (m != x) ==> (m <= x);\nloop invariant (x < N) ==> (m != x) ==> (input == 0);\nloop invariant (x < N) ==> (m != x) ==> (v1 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v2 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v3 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (input <= 2);\nloop invariant (x < N) ==> (m != x) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (input >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m < N);\nloop invariant (x < N) ==> (m != x) ==> (m <= x);\nloop invariant (x < N) ==> (m != x) ==> (input == 1);\nloop invariant (x < N) ==> (m != x) ==> (v1 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v2 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v3 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (input <= 2);\nloop invariant (x < N) ==> (m != x) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (input >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m < N);\nloop invariant (x < N) ==> (m != x) ==> (m <= x);\nloop invariant (x < N) ==> (m != x) ==> (input == 0);\nloop invariant (x < N) ==> (m != x) ==> (v1 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v2 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v3 >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N >= 0;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant (m < N ==> 0 <= m < N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (if x < N ==> (m == 0));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= x <= N;\nloop invariant 0 <= v1 <= v2 <= v3 <= unknown_int();\nloop invariant x < N ==> 0 <= m < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant (0 <= x) && (x <= N);\nloop invariant (0 <= m) && (m <= N);\nloop invariant (0 <= input) && (input <= 1);\nloop invariant (0 <= v1) && (v1 <= 1);\nloop invariant (0 <= v2) && (v2 <= 1);\nloop invariant (0 <= v3) && (v3 <= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ((0 <= x) && (x <= N));\nloop invariant ((m == -1) || ((0 <= m) && (m < N)));\nloop invariant unknown_int();\nloop invariant v1;\nloop invariant v2;\nloop invariant v3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N > 0 ==> 0 <= m < N;\nloop invariant input ==> (N > 0 ==> m = x) ==> input ==> (N > 0 ==> m = x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant 0 <= input <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant 0 <= input;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant x == N ==> m == N;\nloop invariant x != N ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n\n\n\n\n\nloop invariant i10: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i11: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i12: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i13: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i14: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i15: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i16: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i17: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i18: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant ( m >= x ) && ( m <= n-1 );\nloop invariant ( x >= 0 ) && ( x <= n );\nloop invariant ( m >= 0 ) && ( m <= n-1 );\nloop invariant ( x >= 0 );\nloop invariant ( m >= 0 ) && ( m <= n-1 );\nloop invariant ( x >= 0 ) && ( x <= n );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\nloop invariant i4: ( x >= 0 );\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant (x >= m) ==> (m <= N);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x >= m) ==> (m < N);\nloop invariant (x >= m) ==> (m >= 0);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\nloop invariant (x >= m) ==> (x <= N);\nloop invariant (x >= m) ==> (x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x >= m;\nloop invariant m >= 0;\nloop invariant m < N;\nloop invariant if(input ==> m == x);\nloop invariant if(!input ==> m == m);\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 100000;\nloop invariant v2 <= 100000;\nloop invariant v3 <= 100000;\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> m < N);\nloop invariant if(N > 0 ==> 0 <= m);\nloop invariant if(N > 0 ==> m >= 0);\nloop invariant if(N > 0 ==> 0 <= x);\nloop invariant if(N > 0 ==> x <= N);\nloop invariant if(N > 0 ==> x >= m);\nloop invariant if(N > 0 ==> m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: x >= m;\nloop invariant i3: m >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x == 0;\nloop invariant 0 <= m <= x;\nloop invariant m == (x - 1) ==> (0 <= m);\nloop invariant m >= (x - 1) ==> (0 <= m);\nloop invariant m == (x - 1) ==> (m <= (x - 1));\nloop invariant m >= (x - 1) ==> (m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant m == (x - 1) ==> (m < N);\nloop invariant m >= (x - 1) ==> (m < N);\nloop invariant m == (x - 1) ==> (m == (x - 1));\nloop invariant m >= (x - 1) ==> (m == (x - 1));\nloop invariant m == (x - 1) ==> (0 <= m <= (x - 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: m == (x - 1) ==> (0 <= m);\nloop invariant i4: m >= (x - 1) ==> (0 <= m);\nloop invariant i5: m == (x - 1) ==> (m <= (x - 1));\n\nloop invariant i7: m == (x - 1) ==> (m < N);\n\nloop invariant i9: m == (x - 1) ==> (m == (x - 1));\n\nloop invariant i11: m == (x - 1) ==> (0 <= m <= (x - 1));\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant 0 <= input <= 2;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\nloop invariant (x == N) ==> (m == N);\nloop invariant (x < N) ==> (m <= x);\nloop invariant (x < N) ==> (input <= 2);\nloop invariant (x < N) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (m >= 0);\nloop invariant (x < N) ==> (m < N);\nloop invariant (x < N) ==> (m == x) ==> (input == 1);\nloop invariant (x < N) ==> (m == x) ==> (v1 == unknown_int());\nloop invariant (x < N) ==> (m == x) ==> (v2 == unknown_int());\nloop invariant (x < N) ==> (m == x) ==> (v3 == unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (input <= 2);\nloop invariant (x < N) ==> (m != x) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (input >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m < N);\nloop invariant (x < N) ==> (m != x) ==> (m <= x);\nloop invariant (x < N) ==> (m != x) ==> (input == 0);\nloop invariant (x < N) ==> (m != x) ==> (v1 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v2 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v3 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (input <= 2);\nloop invariant (x < N) ==> (m != x) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (input >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m < N);\nloop invariant (x < N) ==> (m != x) ==> (m <= x);\nloop invariant (x < N) ==> (m != x) ==> (input == 1);\nloop invariant (x < N) ==> (m != x) ==> (v1 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v2 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v3 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (input <= 2);\nloop invariant (x < N) ==> (m != x) ==> (v1 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v2 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (v3 <= unknown_int());\nloop invariant (x < N) ==> (m != x) ==> (input >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant (x < N) ==> (m != x) ==> (m < N);\nloop invariant (x < N) ==> (m != x) ==> (m <= x);\nloop invariant (x < N) ==> (m != x) ==> (input == 0);\nloop invariant (x < N) ==> (m != x) ==> (v1 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v2 >= 0);\nloop invariant (x < N) ==> (m != x) ==> (v3 >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\nloop invariant i8: (x < N) ==> (m <= x);\n\n\n\n\nloop invariant i13: (x < N) ==> (m >= 0);\nloop invariant i14: (x < N) ==> (m < N);\n\n\n\n\n\n\n\n\n\nloop invariant i24: (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant i25: (x < N) ==> (m != x) ==> (m < N);\nloop invariant i26: (x < N) ==> (m != x) ==> (m <= x);\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N >= 0;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant (m < N ==> 0 <= m < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: m >= 0;\nloop invariant i5: (m < N ==> 0 <= m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (if x < N ==> (m == 0));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\nloop invariant (if x == N ==> (m >= 0 && m < N));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\nloop invariant i1: 0 <= m <= x <= N;\nloop invariant i2: 0 <= v1 <= v2 <= v3 <= unknown_int();\nloop invariant i3: x < N ==> 0 <= m < x;\nloop invariant i4: (0 <= x) && (x <= N);\nloop invariant i5: (0 <= m) && (m <= N);\nloop invariant i6: (0 <= input) && (input <= 1);\nloop invariant i7: (0 <= v1) && (v1 <= 1);\nloop invariant i8: (0 <= v2) && (v2 <= 1);\nloop invariant i9: (0 <= v3) && (v3 <= 1);\nloop invariant i10: ((0 <= x) && (x <= N));\nloop invariant i11: ((m == -1) || ((0 <= m) && (m < N)));\nloop invariant i12: unknown_int();\nloop invariant i13: v1;\nloop invariant i14: v2;\nloop invariant i15: v3;\nloop invariant i16: 0 <= x <= N;\nloop invariant i17: N > 0 ==> 0 <= m < N;\nloop invariant i18: input ==> (N > 0 ==> m = x) ==> input ==> (N > 0 ==> m = x);\nloop invariant i19: 0 <= m <= x;\nloop invariant i20: 0 <= input <= 2;\nloop invariant i21: 0 <= m <= N;\nloop invariant i22: 0 <= v1;\nloop invariant i23: 0 <= v2;\nloop invariant i24: 0 <= v3;\nloop invariant i25: 0 <= input;\nloop invariant i26: x == N ==> m == N;\nloop invariant i27: x != N ==> (0 <= m) && (m < N);\nloop invariant i28: (x == N) || (x != N) ==> (0 <= m) && (m < N);\nloop invariant i29: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i30: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i31: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i32: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i33: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i34: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i35: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i36: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i37: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i38: ( m >= x ) && ( m <= n-1 );\nloop invariant i39: ( x >= 0 ) && ( x <= n );\nloop invariant i40: ( m >= 0 ) && ( m <= n-1 );\nloop invariant i41: ( x >= 0 );\nloop invariant i42: 0 <= input <= 1;\nloop invariant i43: 0 <= v1 <= 1;\nloop invariant i44: 0 <= v2 <= 1;\nloop invariant i45: 0 <= v3 <= 1;\nloop invariant i46: (x >= m) ==> (m <= N);\nloop invariant i47: (x >= m) ==> (m >= 0);\nloop invariant i48: (x >= m) ==> (m < N);\nloop invariant i49: (x >= m) ==> (x >= 0);\nloop invariant i50: (x >= m) ==> (x <= N);\nloop invariant i51: x >= m;\nloop invariant i52: m >= 0;\nloop invariant i53: m < N;\nloop invariant i54: if(input ==> m == x);\nloop invariant i55: if(!input ==> m == m);\nloop invariant i56: v1 >= 0;\nloop invariant i57: v2 >= 0;\nloop invariant i58: v3 >= 0;\nloop invariant i59: v1 <= 100000;\nloop invariant i60: v2 <= 100000;\nloop invariant i61: v3 <= 100000;\nloop invariant i62: if(N > 0 ==> m < N);\nloop invariant i63: if(N > 0 ==> 0 <= m);\nloop invariant i64: if(N > 0 ==> m >= 0);\nloop invariant i65: if(N > 0 ==> 0 <= x);\nloop invariant i66: if(N > 0 ==> x <= N);\nloop invariant i67: if(N > 0 ==> x >= m);\nloop invariant i68: x == 0;\nloop invariant i69: m == (x - 1) ==> (0 <= m);\nloop invariant i70: m >= (x - 1) ==> (0 <= m);\nloop invariant i71: m == (x - 1) ==> (m <= (x - 1));\nloop invariant i72: m >= (x - 1) ==> (m <= (x - 1));\nloop invariant i73: m == (x - 1) ==> (m < N);\nloop invariant i74: m >= (x - 1) ==> (m < N);\nloop invariant i75: m == (x - 1) ==> (m == (x - 1));\nloop invariant i76: m >= (x - 1) ==> (m == (x - 1));\nloop invariant i77: m == (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant i78: m >= (x - 1) ==> (0 <= m <= (x - 1));\nloop invariant i79: 0 <= v1 <= unknown_int();\nloop invariant i80: 0 <= v2 <= unknown_int();\nloop invariant i81: 0 <= v3 <= unknown_int();\nloop invariant i82: (x == N) ==> (m == N);\nloop invariant i83: (x < N) ==> (m <= x);\nloop invariant i84: (x < N) ==> (input <= 2);\nloop invariant i85: (x < N) ==> (v1 <= unknown_int());\nloop invariant i86: (x < N) ==> (v2 <= unknown_int());\nloop invariant i87: (x < N) ==> (v3 <= unknown_int());\nloop invariant i88: (x < N) ==> (m >= 0);\nloop invariant i89: (x < N) ==> (m < N);\nloop invariant i90: (x < N) ==> (m == x) ==> (input == 1);\nloop invariant i91: (x < N) ==> (m == x) ==> (v1 == unknown_int());\nloop invariant i92: (x < N) ==> (m == x) ==> (v2 == unknown_int());\nloop invariant i93: (x < N) ==> (m == x) ==> (v3 == unknown_int());\nloop invariant i94: (x < N) ==> (m != x) ==> (input <= 2);\nloop invariant i95: (x < N) ==> (m != x) ==> (v1 <= unknown_int());\nloop invariant i96: (x < N) ==> (m != x) ==> (v2 <= unknown_int());\nloop invariant i97: (x < N) ==> (m != x) ==> (v3 <= unknown_int());\nloop invariant i98: (x < N) ==> (m != x) ==> (input >= 0);\nloop invariant i99: (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant i100: (x < N) ==> (m != x) ==> (m < N);\nloop invariant i101: (x < N) ==> (m != x) ==> (m <= x);\nloop invariant i102: (x < N) ==> (m != x) ==> (input == 0);\nloop invariant i103: (x < N) ==> (m != x) ==> (v1 >= 0);\nloop invariant i104: (x < N) ==> (m != x) ==> (v2 >= 0);\nloop invariant i105: (x < N) ==> (m != x) ==> (v3 >= 0);\nloop invariant i106: (x < N) ==> (m != x) ==> (input == 1);\nloop invariant i107: N >= 0;\nloop invariant i108: m <= x;\nloop invariant i109: (m < N ==> 0 <= m < N);\nloop invariant i110: (if x < N ==> (m == 0));\nloop invariant i111: (if x == N ==> (m >= 0 && m < N));\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "combined_annotation_num_solver_calls": 39,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: N > 0 ==> 0 <= m < N;\n\nloop invariant i19: 0 <= m <= x;\n\n\n\n\n\n\n\n\n\nloop invariant i29: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i30: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i31: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i32: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i33: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i34: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i35: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i36: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\nloop invariant i37: (x == N) || (x != N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N) ==> (0 <= m) && (m < N);\n\n\n\nloop invariant i41: ( x >= 0 );\n\n\n\n\n\nloop invariant i47: (x >= m) ==> (m >= 0);\n\nloop invariant i49: (x >= m) ==> (x >= 0);\n\nloop invariant i51: x >= m;\nloop invariant i52: m >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i69: m == (x - 1) ==> (0 <= m);\nloop invariant i70: m >= (x - 1) ==> (0 <= m);\nloop invariant i71: m == (x - 1) ==> (m <= (x - 1));\n\nloop invariant i73: m == (x - 1) ==> (m < N);\n\nloop invariant i75: m == (x - 1) ==> (m == (x - 1));\n\nloop invariant i77: m == (x - 1) ==> (0 <= m <= (x - 1));\n\n\n\n\n\nloop invariant i83: (x < N) ==> (m <= x);\n\n\n\n\nloop invariant i88: (x < N) ==> (m >= 0);\nloop invariant i89: (x < N) ==> (m < N);\n\n\n\n\n\n\n\n\n\nloop invariant i99: (x < N) ==> (m != x) ==> (m >= 0);\nloop invariant i100: (x < N) ==> (m != x) ==> (m < N);\nloop invariant i101: (x < N) ==> (m != x) ==> (m <= x);\n\n\n\n\n\n\nloop invariant i108: m <= x;\nloop invariant i109: (m < N ==> 0 <= m < N);\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c"
        ],
        "skipped": [],
        "total": 72,
        "success_count": 61,
        "failure_count": 11,
        "success_rate": 0.8472222222222222
    }
}