{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= new;\nloop invariant 0 <= old;\nloop invariant new <= 2147483647;\nloop invariant old <= 2147483645;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant old <= new;\nloop invariant old == (new - 1) || (lock == 0);\nloop invariant old >= 0;\nloop invariant new >= old;\nloop invariant new <= old + 1;\nloop invariant lock ==> !(new != old);\nloop invariant !(lock ==> new != old) ==> new == old;\nloop invariant !(lock ==> new != old) ==> old == new - 1;\nloop invariant !(lock ==> new != old) ==> lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= new <= 4294967295;\nloop invariant old == new;\nloop invariant lock == 0;\nloop invariant old <= new;\nloop invariant lock ==> old == new;\nloop invariant lock ==> lock == 0;\nloop invariant lock ==> old == new && lock == 0;\nloop invariant lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= UINT_MAX - 1;\nloop invariant old == new;\nloop invariant lock == 1 ==> old == new;\nloop invariant old <= new;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old; loop invariant new >= old; loop invariant lock == 0 ==> old == new; loop invariant lock == 1 ==> old == new - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= new <= old+1;\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant lock ==> (old < new);\nloop invariant 1 ==> !(lock == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 1 <= new <= 2^32 - 1;\nloop invariant old >= 0;\nloop invariant new >= old;\nloop invariant lock ==> !(lock == 0);\nloop invariant !(lock == 0) ==> lock <= 1;\nloop invariant (lock ==> !(lock == 0)) && (!(lock == 0) ==> lock <= 1);\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= new <= INT_MAX;\nloop invariant lock <= 1;\nloop invariant old <= new <= INT_MAX;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= lock <= 1;\nloop invariant 0 <= lock <= 1;\nloop invariant 1 <= new <= lock <= 1;\nloop invariant new == old + 1;\nloop invariant old == unknown_uint();\nloop invariant lock == 0 ==> old != unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 2;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> old == new;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant new >= old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> old != new;\nloop invariant new == old ==> lock == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= old <= INT_MAX;\nloop invariant 0 <= new <= INT_MAX;\nloop invariant lock ==> old == new;\nloop invariant lock ==> new == old+1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= old + 1;\nloop invariant 0 <= lock <= 1;\nloop invariant new >= old;\nloop invariant !(lock == 0 ==> unknown() && lock == 1 ==> !unknown());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant old >= 0;\nloop invariant new >= old;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= new;\nloop invariant 0 <= old;\nloop invariant new <= 2147483647;\nloop invariant old <= 2147483645;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\nloop invariant lock == 0;\nloop invariant new == old + 1;\nloop invariant lock == 1;\nloop invariant new == old + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: new <= 2147483647;\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant old <= new;\nloop invariant old == (new - 1) || (lock == 0);\nloop invariant old >= 0;\nloop invariant new >= old;\nloop invariant new <= old + 1;\nloop invariant lock ==> !(new != old);\nloop invariant !(lock ==> new != old) ==> new == old;\nloop invariant !(lock ==> new != old) ==> old == new - 1;\nloop invariant !(lock ==> new != old) ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= lock <= 1;\nloop invariant i2: old <= new;\n\n\nloop invariant i5: new >= old;\n\nloop invariant i7: lock ==> !(new != old);\nloop invariant i8: !(lock ==> new != old) ==> new == old;\n\nloop invariant i10: !(lock ==> new != old) ==> lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= new <= 4294967295;\nloop invariant old == new;\nloop invariant lock == 0;\nloop invariant old <= new;\nloop invariant lock ==> old == new;\nloop invariant lock ==> lock == 0;\nloop invariant lock ==> old == new && lock == 0;\nloop invariant lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: 0 <= lock <= 1;\n\n\n\nloop invariant i6: old <= new;\nloop invariant i7: lock ==> old == new;\n\n\n\nloop invariant i11: lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant i12: lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= UINT_MAX - 1;\nloop invariant old == new;\nloop invariant lock == 1 ==> old == new;\nloop invariant old <= new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 1 ==> old == new;\nloop invariant i4: old <= new;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= old; loop invariant new >= old; loop invariant lock == 0 ==> old == new; loop invariant lock == 1 ==> old == new - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= new <= old+1;\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant lock ==> (old < new);\nloop invariant 1 ==> !(lock == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: 0 <= lock <= 1;\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 1 <= new <= 2^32 - 1;\nloop invariant old >= 0;\nloop invariant new >= old;\nloop invariant lock ==> !(lock == 0);\nloop invariant !(lock == 0) ==> lock <= 1;\nloop invariant (lock ==> !(lock == 0)) && (!(lock == 0) ==> lock <= 1);\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= lock <= 1;\n\n\nloop invariant i4: new >= old;\nloop invariant i5: lock ==> !(lock == 0);\nloop invariant i6: !(lock == 0) ==> lock <= 1;\nloop invariant i7: (lock ==> !(lock == 0)) && (!(lock == 0) ==> lock <= 1);\nloop invariant i8: lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= new <= INT_MAX;\nloop invariant lock <= 1;\nloop invariant old <= new <= INT_MAX;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant new == old + (lock * (2 * unknown()));\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: lock <= 1;\nloop invariant i3: old <= new <= INT_MAX;\n\nloop invariant i5: lock == 0 ==> lock == 0;\nloop invariant i6: lock == 1 ==> lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= lock <= 1;\nloop invariant 0 <= lock <= 1;\nloop invariant 1 <= new <= lock <= 1;\nloop invariant new == old + 1;\nloop invariant old == unknown_uint();\nloop invariant lock == 0 ==> old != unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: 0 <= lock <= 1;\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 2;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> old == new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: old <= new;\nloop invariant i4: lock == 1 ==> new == old;\n\n\nloop invariant i7: lock == 0 ==> new != old;\nloop invariant i8: lock == 1 ==> old == new;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant new >= old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> old != new;\nloop invariant new == old ==> lock == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: new >= old;\nloop invariant i3: lock == 1 ==> old == new;\nloop invariant i4: lock == 0 ==> old != new;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant 0 <= old <= INT_MAX;\nloop invariant 0 <= new <= INT_MAX;\nloop invariant lock ==> old == new;\nloop invariant lock ==> new == old+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= lock <= 1;\n\n\nloop invariant i4: lock ==> old == new;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= old + 1;\nloop invariant 0 <= lock <= 1;\nloop invariant new >= old;\nloop invariant !(lock == 0 ==> unknown() && lock == 1 ==> !unknown());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: 0 <= lock <= 1;\nloop invariant i3: new >= old;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant old >= 0;\nloop invariant new >= old;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new != old;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\nloop invariant i4: new >= old;\nloop invariant i5: old <= new;\nloop invariant i6: lock == 1 ==> new == old;\nloop invariant i7: lock == 0 ==> new != old;\nloop invariant i8: lock == 1 ==> old == new;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 66: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= new;\nloop invariant i2: 0 <= old;\nloop invariant i3: new <= 2147483647;\nloop invariant i4: old <= 2147483645;\nloop invariant i5: new == old + 1;\nloop invariant i6: lock == 1;\nloop invariant i7: new == old + 2;\nloop invariant i8: lock == 0;\nloop invariant i9: 0 <= lock <= 1;\nloop invariant i10: old <= new;\nloop invariant i11: old == (new - 1) || (lock == 0);\nloop invariant i12: old >= 0;\nloop invariant i13: new >= old;\nloop invariant i14: new <= old + 1;\nloop invariant i15: lock ==> !(new != old);\nloop invariant i16: !(lock ==> new != old) ==> new == old;\nloop invariant i17: !(lock ==> new != old) ==> old == new - 1;\nloop invariant i18: !(lock ==> new != old) ==> lock == 1;\nloop invariant i19: 0 <= old <= 4294967295;\nloop invariant i20: 0 <= new <= 4294967295;\nloop invariant i21: old == new;\nloop invariant i22: lock ==> old == new;\nloop invariant i23: lock ==> lock == 0;\nloop invariant i24: lock ==> old == new && lock == 0;\nloop invariant i25: lock ==> old == new && lock == 0 && old <= new;\nloop invariant i26: lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant i27: lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant i28: 1 <= old <= UINT_MAX - 1;\nloop invariant i29: lock == 1 ==> old == new;\nloop invariant i30: 1 <= old; loop invariant new >= old; loop invariant lock == 0 ==> old == new; loop invariant lock == 1 ==> old == new - 1;\nloop invariant i31: 1 <= new <= old+1;\nloop invariant i32: 0 <= old <= UINT_MAX;\nloop invariant i33: 0 <= new <= UINT_MAX;\nloop invariant i34: lock ==> (old < new);\nloop invariant i35: 1 ==> !(lock == 0);\nloop invariant i36: 1 <= new <= 2^32 - 1;\nloop invariant i37: lock ==> !(lock == 0);\nloop invariant i38: !(lock == 0) ==> lock <= 1;\nloop invariant i39: (lock ==> !(lock == 0)) && (!(lock == 0) ==> lock <= 1);\nloop invariant i40: lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\nloop invariant i41: 0 <= new <= INT_MAX;\nloop invariant i42: lock <= 1;\nloop invariant i43: old <= new <= INT_MAX;\nloop invariant i44: new == old + (lock * (2 * unknown()));\nloop invariant i45: lock == 0 ==> lock == 0;\nloop invariant i46: lock == 1 ==> lock == 1;\nloop invariant i47: 1 <= old <= lock <= 1;\nloop invariant i48: 1 <= new <= lock <= 1;\nloop invariant i49: old == unknown_uint();\nloop invariant i50: lock == 0 ==> old != unknown_uint();\nloop invariant i51: 1 <= old <= 4294967295;\nloop invariant i52: lock == 1 ==> new == old;\nloop invariant i53: lock == 0 ==> new == old + 2;\nloop invariant i54: lock == 1 ==> new != old;\nloop invariant i55: lock == 0 ==> new != old;\nloop invariant i56: lock == 0 ==> old == new;\nloop invariant i57: lock == 0 ==> old != new;\nloop invariant i58: new == old ==> lock == 0;\nloop invariant i59: 0 <= old <= INT_MAX;\nloop invariant i60: lock ==> new == old+1;\nloop invariant i61: 1 <= old <= old + 1;\nloop invariant i62: !(lock == 0 ==> unknown() && lock == 1 ==> !unknown());\nloop invariant i63: lock == 1 ==> lock == 0;\nloop invariant i64: lock == 0 ==> lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 29,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: new <= 2147483647;\n\n\n\n\n\nloop invariant i9: 0 <= lock <= 1;\nloop invariant i10: old <= new;\n\n\nloop invariant i13: new >= old;\n\nloop invariant i15: lock ==> !(new != old);\nloop invariant i16: !(lock ==> new != old) ==> new == old;\n\nloop invariant i18: !(lock ==> new != old) ==> lock == 1;\n\n\n\nloop invariant i22: lock ==> old == new;\n\n\n\nloop invariant i26: lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\nloop invariant i27: lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new && lock ==> old == new && lock == 0 && old <= new;\n\nloop invariant i29: lock == 1 ==> old == new;\n\n\n\n\n\n\n\nloop invariant i37: lock ==> !(lock == 0);\nloop invariant i38: !(lock == 0) ==> lock <= 1;\nloop invariant i39: (lock ==> !(lock == 0)) && (!(lock == 0) ==> lock <= 1);\nloop invariant i40: lock ==> !(lock == 0) && !(lock == 0) ==> lock <= 1;\n\nloop invariant i42: lock <= 1;\nloop invariant i43: old <= new <= INT_MAX;\n\nloop invariant i45: lock == 0 ==> lock == 0;\nloop invariant i46: lock == 1 ==> lock == 1;\n\n\n\n\n\nloop invariant i52: lock == 1 ==> new == old;\n\n\nloop invariant i55: lock == 0 ==> new != old;\n\nloop invariant i57: lock == 0 ==> old != new;\n\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 14,
        "success_count": 14,
        "failure_count": 0,
        "success_rate": 1.0
    }
}