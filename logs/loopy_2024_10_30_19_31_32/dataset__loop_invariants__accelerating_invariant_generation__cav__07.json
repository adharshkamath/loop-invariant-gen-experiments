{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  while(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i == n;\nloop invariant j >= i;\nloop invariant j <= i + 1;\nloop invariant j >= i + 1 ==> i == n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i == n ==> j == n + 1;\nloop invariant i == n ==> j >= i + 1;\nloop invariant j >= i;\nloop invariant j <= i + 1;\nloop invariant j >= i + 1 ==> i == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant j >= i-1;\n*/\n```",
            "```\n/*@\nloop invariant n >= i;\nloop invariant 0 <= i <= n;\nloop invariant j >= i;\nloop invariant j <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i <= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i >= j;\nloop invariant i == j ==> i >= j;\nloop invariant i >= j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i < n ==> j < n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j < n;\nloop invariant i < j ==> i + 1 == j;\nloop invariant i == j ==> i == n;\nloop invariant i + 1 == j ==> i < n;\nloop invariant i + 1 == j ==> j < n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i >= j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant i = j + 1;\nloop invariant n >= 0;\nloop invariant \\false ==> i <= n;\nloop invariant \\false ==> j <= i;\nloop invariant \\false ==> i >= j;\nloop invariant \\false ==> i == j + 1;\nloop invariant \\false ==> i <= n + 1;\nloop invariant \\false ==> j <= n + 1;\nloop invariant \\false ==> j >= 0;\nloop invariant \\false ==> i >= 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant i = j + 1;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant j >= i;\nloop invariant j <= n;\nloop invariant i + j >= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i + j < n ==> j >= n + 1;\nloop invariant i + j >= n ==> j < n + 1;\nloop invariant i + j < n ==> i < n;\nloop invariant i + j >= n ==> i >= n;\nloop invariant i + j < n ==> j < n;\nloop invariant i + j >= n ==> j >= n;\nloop invariant i + j < n ==> i + j < n;\nloop invariant i + j >= n ==> i + j >= n;\nloop invariant i + j < n ==> i + j < n + 1;\nloop invariant i + j >= n ==> i + j >= n + 1;\nloop invariant i + j < n ==> i + j < n + 2;\nloop invariant i + j >= n ==> i + j >= n + 2;\nloop invariant i + j < n ==> i + j < n + 3;\nloop invariant i + j >= n ==> i + j >= n + 3;\nloop invariant i + j < n ==> i + j < n + 4;\nloop invariant i + j >= n ==> i + j >= n + 4;\nloop invariant i + j < n ==> i + j < n + 5;\nloop invariant i + j >= n ==> i + j >= n + 5;\nloop invariant i + j < n ==> i + j < n + 6;\nloop invariant i + j >= n ==> i + j >= n + 6;\nloop invariant i + j < n ==> i + j < n + 7;\nloop invariant i + j >= n ==> i + j >= n + 7;\nloop invariant i + j < n ==> i + j < n + 8;\nloop invariant i + j >= n ==> i + j >= n + 8;\nloop invariant i + j < n ==> i + j < n + 9;\nloop invariant i + j >= n ==> i + j >= n + 9;\nloop invariant i + j < n ==> i + j < n + 10;\nloop invariant i + j >= n ==> i + j >= n + 10;\nloop invariant i + j < n ==> i + j < n + 11;\nloop invariant i + j >= n ==> i + j >= n + 11;\nloop invariant i + j < n ==> i + j < n + 12;\nloop invariant i + j >= n ==> i + j >= n + 12;\nloop invariant i + j < n ==> i + j < n + 13;\nloop invariant i + j >= n ==> i + j >= n + 13;\nloop invariant i + j < n ==> i + j < n + 14;\nloop invariant i + j >= n ==> i + j >= n + 14;\nloop invariant i + j < n ==> i + j < n + 15;\nloop invariant i + j >= n ==> i + j >= n + 15;\nloop invariant i + j < n ==> i + j < n + 16;\nloop invariant i + j >= n ==> i + j >= n + 16;\nloop invariant i + j < n ==> i + j < n + 17;\nloop invariant i + j >= n ==> i + j >= n + 17;\nloop invariant i + j < n ==> i + j < n + 18;\nloop invariant i + j >= n ==> i + j >= n + 18;\nloop invariant i + j < n ==> i + j < n + 19;\nloop invariant i + j >= n ==> i + j >= n + 19;\nloop invariant i + j < n ==> i + j < n + 20;\nloop invariant i + j >= n ==> i + j >= n + 20;\nloop invariant i + j < n ==> i + j < n + 21;\nloop invariant i + j >= n ==> i + j >= n + 21;\nloop invariant i + j < n ==> i + j < n + 22;\nloop invariant i + j >= n ==> i + j >= n + 22;\nloop invariant i + j < n ==> i + j < n + 23;\nloop invariant i + j >= n ==> i + j >= n + 23;\nloop invariant i + j < n ==> i + j < n + 24;\nloop invariant i + j >= n ==> i + j >= n + 24;\nloop invariant i + j < n ==> i + j < n + 25;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i <= n;\nloop invariant j <= i;\nloop invariant i + 1 <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i == n;\nloop invariant j >= i;\nloop invariant j <= i + 1;\nloop invariant j >= i + 1 ==> i == n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i == n ==> j == n + 1;\nloop invariant i == n ==> j >= i + 1;\nloop invariant j >= i;\nloop invariant j <= i + 1;\nloop invariant j >= i + 1 ==> i == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\n\nloop invariant i4: j >= i;\nloop invariant i5: j <= i + 1;\nloop invariant i6: j >= i + 1 ==> i == n;\n\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant j >= i-1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: j >= i-1;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant n >= i;\nloop invariant 0 <= i <= n;\nloop invariant j >= i;\nloop invariant j <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: n >= i;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: j >= i;\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i <= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: i == j;\n\n\nloop invariant i6: i >= j;\nloop invariant i7: i <= n;\nloop invariant i8: j <= n;\nloop invariant i9: i <= j;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: i <= n;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i == j;\nloop invariant i >= j;\nloop invariant i == j ==> i >= j;\nloop invariant i >= j ==> i == j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i == j ==> i >= j;\nloop invariant i == j ==> i == j;\nloop invariant i >= j ==> i >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: i <= n;\nloop invariant i4: j <= n;\nloop invariant i5: i == j;\nloop invariant i6: i >= j;\nloop invariant i7: i == j ==> i >= j;\nloop invariant i8: i >= j ==> i == j;\nloop invariant i9: i == j ==> i == j;\nloop invariant i10: i >= j ==> i >= j;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i >= j;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i < n ==> j < n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j < n;\nloop invariant i < j ==> i + 1 == j;\nloop invariant i == j ==> i == n;\nloop invariant i + 1 == j ==> i < n;\nloop invariant i + 1 == j ==> j < n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\nloop invariant i + 1 == j ==> j == n;\nloop invariant i == n ==> j == n;\nloop invariant i == j ==> j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: i >= j;\nloop invariant i4: i <= n;\nloop invariant i5: j <= n;\nloop invariant i6: i < n ==> j < n;\n\n\nloop invariant i9: i < j ==> i + 1 == j;\n\nloop invariant i11: i + 1 == j ==> i < n;\nloop invariant i12: i + 1 == j ==> j < n;\n\nloop invariant i14: i + 1 == j ==> j == n;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: j == i;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i >= j;\nloop invariant i == n;\nloop invariant j == n;\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: i >= j;\n\n\nloop invariant i6: n >= 0;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant i = j + 1;\nloop invariant n >= 0;\nloop invariant \\false ==> i <= n;\nloop invariant \\false ==> j <= i;\nloop invariant \\false ==> i >= j;\nloop invariant \\false ==> i == j + 1;\nloop invariant \\false ==> i <= n + 1;\nloop invariant \\false ==> j <= n + 1;\nloop invariant \\false ==> j >= 0;\nloop invariant \\false ==> i >= 0;\nloop invariant 0 <= i <= n + 1;\nloop invariant i = j + 1;\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n + 1;\n\nloop invariant i3: n >= 0;\nloop invariant i4: \\false ==> i <= n;\nloop invariant i5: \\false ==> j <= i;\nloop invariant i6: \\false ==> i >= j;\nloop invariant i7: \\false ==> i == j + 1;\nloop invariant i8: \\false ==> i <= n + 1;\nloop invariant i9: \\false ==> j <= n + 1;\nloop invariant i10: \\false ==> j >= 0;\nloop invariant i11: \\false ==> i >= 0;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant j >= i;\nloop invariant j <= n;\nloop invariant i + j >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= n;\nloop invariant i3: j >= i;\n\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 24,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i + j < n ==> j >= n + 1;\nloop invariant i + j >= n ==> j < n + 1;\nloop invariant i + j < n ==> i < n;\nloop invariant i + j >= n ==> i >= n;\nloop invariant i + j < n ==> j < n;\nloop invariant i + j >= n ==> j >= n;\nloop invariant i + j < n ==> i + j < n;\nloop invariant i + j >= n ==> i + j >= n;\nloop invariant i + j < n ==> i + j < n + 1;\nloop invariant i + j >= n ==> i + j >= n + 1;\nloop invariant i + j < n ==> i + j < n + 2;\nloop invariant i + j >= n ==> i + j >= n + 2;\nloop invariant i + j < n ==> i + j < n + 3;\nloop invariant i + j >= n ==> i + j >= n + 3;\nloop invariant i + j < n ==> i + j < n + 4;\nloop invariant i + j >= n ==> i + j >= n + 4;\nloop invariant i + j < n ==> i + j < n + 5;\nloop invariant i + j >= n ==> i + j >= n + 5;\nloop invariant i + j < n ==> i + j < n + 6;\nloop invariant i + j >= n ==> i + j >= n + 6;\nloop invariant i + j < n ==> i + j < n + 7;\nloop invariant i + j >= n ==> i + j >= n + 7;\nloop invariant i + j < n ==> i + j < n + 8;\nloop invariant i + j >= n ==> i + j >= n + 8;\nloop invariant i + j < n ==> i + j < n + 9;\nloop invariant i + j >= n ==> i + j >= n + 9;\nloop invariant i + j < n ==> i + j < n + 10;\nloop invariant i + j >= n ==> i + j >= n + 10;\nloop invariant i + j < n ==> i + j < n + 11;\nloop invariant i + j >= n ==> i + j >= n + 11;\nloop invariant i + j < n ==> i + j < n + 12;\nloop invariant i + j >= n ==> i + j >= n + 12;\nloop invariant i + j < n ==> i + j < n + 13;\nloop invariant i + j >= n ==> i + j >= n + 13;\nloop invariant i + j < n ==> i + j < n + 14;\nloop invariant i + j >= n ==> i + j >= n + 14;\nloop invariant i + j < n ==> i + j < n + 15;\nloop invariant i + j >= n ==> i + j >= n + 15;\nloop invariant i + j < n ==> i + j < n + 16;\nloop invariant i + j >= n ==> i + j >= n + 16;\nloop invariant i + j < n ==> i + j < n + 17;\nloop invariant i + j >= n ==> i + j >= n + 17;\nloop invariant i + j < n ==> i + j < n + 18;\nloop invariant i + j >= n ==> i + j >= n + 18;\nloop invariant i + j < n ==> i + j < n + 19;\nloop invariant i + j >= n ==> i + j >= n + 19;\nloop invariant i + j < n ==> i + j < n + 20;\nloop invariant i + j >= n ==> i + j >= n + 20;\nloop invariant i + j < n ==> i + j < n + 21;\nloop invariant i + j >= n ==> i + j >= n + 21;\nloop invariant i + j < n ==> i + j < n + 22;\nloop invariant i + j >= n ==> i + j >= n + 22;\nloop invariant i + j < n ==> i + j < n + 23;\nloop invariant i + j >= n ==> i + j >= n + 23;\nloop invariant i + j < n ==> i + j < n + 24;\nloop invariant i + j >= n ==> i + j >= n + 24;\nloop invariant i + j < n ==> i + j < n + 25;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= i;\n\nloop invariant i4: i + j >= n ==> j < n + 1;\nloop invariant i5: i + j < n ==> i < n;\n\nloop invariant i7: i + j < n ==> j < n;\n\nloop invariant i9: i + j < n ==> i + j < n;\nloop invariant i10: i + j >= n ==> i + j >= n;\nloop invariant i11: i + j < n ==> i + j < n + 1;\n\nloop invariant i13: i + j < n ==> i + j < n + 2;\n\nloop invariant i15: i + j < n ==> i + j < n + 3;\n\nloop invariant i17: i + j < n ==> i + j < n + 4;\n\nloop invariant i19: i + j < n ==> i + j < n + 5;\n\nloop invariant i21: i + j < n ==> i + j < n + 6;\n\nloop invariant i23: i + j < n ==> i + j < n + 7;\n\nloop invariant i25: i + j < n ==> i + j < n + 8;\n\nloop invariant i27: i + j < n ==> i + j < n + 9;\n\nloop invariant i29: i + j < n ==> i + j < n + 10;\n\nloop invariant i31: i + j < n ==> i + j < n + 11;\n\nloop invariant i33: i + j < n ==> i + j < n + 12;\n\nloop invariant i35: i + j < n ==> i + j < n + 13;\n\nloop invariant i37: i + j < n ==> i + j < n + 14;\n\nloop invariant i39: i + j < n ==> i + j < n + 15;\n\nloop invariant i41: i + j < n ==> i + j < n + 16;\n\nloop invariant i43: i + j < n ==> i + j < n + 17;\n\nloop invariant i45: i + j < n ==> i + j < n + 18;\n\nloop invariant i47: i + j < n ==> i + j < n + 19;\n\nloop invariant i49: i + j < n ==> i + j < n + 20;\n\nloop invariant i51: i + j < n ==> i + j < n + 21;\n\nloop invariant i53: i + j < n ==> i + j < n + 22;\n\nloop invariant i55: i + j < n ==> i + j < n + 23;\n\nloop invariant i57: i + j < n ==> i + j < n + 24;\n\nloop invariant i59: i + j < n ==> i + j < n + 25;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant i <= j;\nloop invariant j <= n;\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: i <= j;\n\nloop invariant i5: n >= 0;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i;\nloop invariant i <= n;\nloop invariant j <= i;\nloop invariant i + 1 <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: i <= n;\nloop invariant i4: j <= i;\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 59: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: i == n;\nloop invariant i4: j >= i;\nloop invariant i5: j <= i + 1;\nloop invariant i6: j >= i + 1 ==> i == n;\nloop invariant i7: i == n ==> j == n + 1;\nloop invariant i8: i == n ==> j >= i + 1;\nloop invariant i9: 0 <= j <= i;\nloop invariant i10: j >= i-1;\nloop invariant i11: n >= i;\nloop invariant i12: j <= n;\nloop invariant i13: i == j;\nloop invariant i14: j == n;\nloop invariant i15: i >= j;\nloop invariant i16: i <= n;\nloop invariant i17: i <= j;\nloop invariant i18: i >= 0;\nloop invariant i19: j >= 0;\nloop invariant i20: i == j ==> i >= j;\nloop invariant i21: i >= j ==> i == j;\nloop invariant i22: i == j ==> i == j;\nloop invariant i23: i >= j ==> i >= j;\nloop invariant i24: i < n ==> j < n;\nloop invariant i25: i == n ==> j == n;\nloop invariant i26: i == j ==> j < n;\nloop invariant i27: i < j ==> i + 1 == j;\nloop invariant i28: i == j ==> i == n;\nloop invariant i29: i + 1 == j ==> i < n;\nloop invariant i30: i + 1 == j ==> j < n;\nloop invariant i31: i == j ==> j == n;\nloop invariant i32: i + 1 == j ==> j == n;\nloop invariant i33: j == i;\nloop invariant i34: n >= 0;\nloop invariant i35: 0 <= i <= n + 1;\nloop invariant i36: i = j + 1;\nloop invariant i37: \\false ==> i <= n;\nloop invariant i38: \\false ==> j <= i;\nloop invariant i39: \\false ==> i >= j;\nloop invariant i40: \\false ==> i == j + 1;\nloop invariant i41: \\false ==> i <= n + 1;\nloop invariant i42: \\false ==> j <= n + 1;\nloop invariant i43: \\false ==> j >= 0;\nloop invariant i44: \\false ==> i >= 0;\nloop invariant i45: 0 <= i;\nloop invariant i46: i + j >= n;\nloop invariant i47: i + j < n ==> j >= n + 1;\nloop invariant i48: i + j >= n ==> j < n + 1;\nloop invariant i49: i + j < n ==> i < n;\nloop invariant i50: i + j >= n ==> i >= n;\nloop invariant i51: i + j < n ==> j < n;\nloop invariant i52: i + j >= n ==> j >= n;\nloop invariant i53: i + j < n ==> i + j < n;\nloop invariant i54: i + j >= n ==> i + j >= n;\nloop invariant i55: i + j < n ==> i + j < n + 1;\nloop invariant i56: i + j >= n ==> i + j >= n + 1;\nloop invariant i57: i + j < n ==> i + j < n + 2;\nloop invariant i58: i + j >= n ==> i + j >= n + 2;\nloop invariant i59: i + j < n ==> i + j < n + 3;\nloop invariant i60: i + j >= n ==> i + j >= n + 3;\nloop invariant i61: i + j < n ==> i + j < n + 4;\nloop invariant i62: i + j >= n ==> i + j >= n + 4;\nloop invariant i63: i + j < n ==> i + j < n + 5;\nloop invariant i64: i + j >= n ==> i + j >= n + 5;\nloop invariant i65: i + j < n ==> i + j < n + 6;\nloop invariant i66: i + j >= n ==> i + j >= n + 6;\nloop invariant i67: i + j < n ==> i + j < n + 7;\nloop invariant i68: i + j >= n ==> i + j >= n + 7;\nloop invariant i69: i + j < n ==> i + j < n + 8;\nloop invariant i70: i + j >= n ==> i + j >= n + 8;\nloop invariant i71: i + j < n ==> i + j < n + 9;\nloop invariant i72: i + j >= n ==> i + j >= n + 9;\nloop invariant i73: i + j < n ==> i + j < n + 10;\nloop invariant i74: i + j >= n ==> i + j >= n + 10;\nloop invariant i75: i + j < n ==> i + j < n + 11;\nloop invariant i76: i + j >= n ==> i + j >= n + 11;\nloop invariant i77: i + j < n ==> i + j < n + 12;\nloop invariant i78: i + j >= n ==> i + j >= n + 12;\nloop invariant i79: i + j < n ==> i + j < n + 13;\nloop invariant i80: i + j >= n ==> i + j >= n + 13;\nloop invariant i81: i + j < n ==> i + j < n + 14;\nloop invariant i82: i + j >= n ==> i + j >= n + 14;\nloop invariant i83: i + j < n ==> i + j < n + 15;\nloop invariant i84: i + j >= n ==> i + j >= n + 15;\nloop invariant i85: i + j < n ==> i + j < n + 16;\nloop invariant i86: i + j >= n ==> i + j >= n + 16;\nloop invariant i87: i + j < n ==> i + j < n + 17;\nloop invariant i88: i + j >= n ==> i + j >= n + 17;\nloop invariant i89: i + j < n ==> i + j < n + 18;\nloop invariant i90: i + j >= n ==> i + j >= n + 18;\nloop invariant i91: i + j < n ==> i + j < n + 19;\nloop invariant i92: i + j >= n ==> i + j >= n + 19;\nloop invariant i93: i + j < n ==> i + j < n + 20;\nloop invariant i94: i + j >= n ==> i + j >= n + 20;\nloop invariant i95: i + j < n ==> i + j < n + 21;\nloop invariant i96: i + j >= n ==> i + j >= n + 21;\nloop invariant i97: i + j < n ==> i + j < n + 22;\nloop invariant i98: i + j >= n ==> i + j >= n + 22;\nloop invariant i99: i + j < n ==> i + j < n + 23;\nloop invariant i100: i + j >= n ==> i + j >= n + 23;\nloop invariant i101: i + j < n ==> i + j < n + 24;\nloop invariant i102: i + j >= n ==> i + j >= n + 24;\nloop invariant i103: i + j < n ==> i + j < n + 25;\nloop invariant i104: j <= i;\nloop invariant i105: i + 1 <= n;\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
        "combined_annotation_num_solver_calls": 29,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) \n\nreturn;\n\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\n\nloop invariant i4: j >= i;\nloop invariant i5: j <= i + 1;\nloop invariant i6: j >= i + 1 ==> i == n;\n\n\nloop invariant i9: 0 <= j <= i;\nloop invariant i10: j >= i-1;\nloop invariant i11: n >= i;\nloop invariant i12: j <= n;\nloop invariant i13: i == j;\n\nloop invariant i15: i >= j;\nloop invariant i16: i <= n;\nloop invariant i17: i <= j;\nloop invariant i18: i >= 0;\nloop invariant i19: j >= 0;\nloop invariant i20: i == j ==> i >= j;\nloop invariant i21: i >= j ==> i == j;\nloop invariant i22: i == j ==> i == j;\nloop invariant i23: i >= j ==> i >= j;\nloop invariant i24: i < n ==> j < n;\nloop invariant i25: i == n ==> j == n;\n\nloop invariant i27: i < j ==> i + 1 == j;\n\nloop invariant i29: i + 1 == j ==> i < n;\nloop invariant i30: i + 1 == j ==> j < n;\n\nloop invariant i32: i + 1 == j ==> j == n;\nloop invariant i33: j == i;\nloop invariant i34: n >= 0;\nloop invariant i35: 0 <= i <= n + 1;\n\nloop invariant i37: \\false ==> i <= n;\nloop invariant i38: \\false ==> j <= i;\nloop invariant i39: \\false ==> i >= j;\nloop invariant i40: \\false ==> i == j + 1;\nloop invariant i41: \\false ==> i <= n + 1;\nloop invariant i42: \\false ==> j <= n + 1;\nloop invariant i43: \\false ==> j >= 0;\nloop invariant i44: \\false ==> i >= 0;\nloop invariant i45: 0 <= i;\n\n\nloop invariant i48: i + j >= n ==> j < n + 1;\nloop invariant i49: i + j < n ==> i < n;\n\nloop invariant i51: i + j < n ==> j < n;\n\nloop invariant i53: i + j < n ==> i + j < n;\nloop invariant i54: i + j >= n ==> i + j >= n;\nloop invariant i55: i + j < n ==> i + j < n + 1;\n\nloop invariant i57: i + j < n ==> i + j < n + 2;\n\nloop invariant i59: i + j < n ==> i + j < n + 3;\n\nloop invariant i61: i + j < n ==> i + j < n + 4;\n\nloop invariant i63: i + j < n ==> i + j < n + 5;\n\nloop invariant i65: i + j < n ==> i + j < n + 6;\n\nloop invariant i67: i + j < n ==> i + j < n + 7;\n\nloop invariant i69: i + j < n ==> i + j < n + 8;\n\nloop invariant i71: i + j < n ==> i + j < n + 9;\n\nloop invariant i73: i + j < n ==> i + j < n + 10;\n\nloop invariant i75: i + j < n ==> i + j < n + 11;\n\nloop invariant i77: i + j < n ==> i + j < n + 12;\n\nloop invariant i79: i + j < n ==> i + j < n + 13;\n\nloop invariant i81: i + j < n ==> i + j < n + 14;\n\nloop invariant i83: i + j < n ==> i + j < n + 15;\n\nloop invariant i85: i + j < n ==> i + j < n + 16;\n\nloop invariant i87: i + j < n ==> i + j < n + 17;\n\nloop invariant i89: i + j < n ==> i + j < n + 18;\n\nloop invariant i91: i + j < n ==> i + j < n + 19;\n\nloop invariant i93: i + j < n ==> i + j < n + 20;\n\nloop invariant i95: i + j < n ==> i + j < n + 21;\n\nloop invariant i97: i + j < n ==> i + j < n + 22;\n\nloop invariant i99: i + j < n ==> i + j < n + 23;\n\nloop invariant i101: i + j < n ==> i + j < n + 24;\n\nloop invariant i103: i + j < n ==> i + j < n + 25;\nloop invariant i104: j <= i;\n\n*/\nwhile(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c"
        ],
        "skipped": [],
        "total": 128,
        "success_count": 104,
        "failure_count": 24,
        "success_rate": 0.8125
    }
}