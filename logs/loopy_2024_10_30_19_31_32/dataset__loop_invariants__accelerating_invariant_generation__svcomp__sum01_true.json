{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum01_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant 0 <= sn <= n * a;\nloop invariant i == n + 1 ==> sn == n * a;\nloop invariant i == 1 ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == a*i;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn == 0 || sn == n*a;\nloop invariant sn == n*a || sn == 0;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\nloop invariant sn == n*a || sn == 0;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sn >= i*a;\nloop invariant sn <= (n-i+1)*a;\nloop invariant sn >= 0 || sn <= n*a;\nloop invariant sn >= 0 && sn <= n*a;\nloop invariant sn >= i*a && sn <= (n-i+1)*a;\nloop invariant sn >= 0 && sn <= n*a && sn >= i*a && sn <= (n-i+1)*a;\nloop invariant sn >= 0 && sn <= n*a && sn >= i*a && sn <= (n-i+1)*a && sn == i*a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == a * (i - 1);\nloop invariant sn == i * (n - (i - 1));\nloop invariant sn == (n * (n + 1)) / 2;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a;\nloop invariant sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant loop invariant 0 <= i <= n;\nloop invariant sn == (a * (i - 1));\nloop invariant i <= n ==> sn == (a * i);\nloop invariant sn == (a * (i - 1));\nloop invariant i <= n ==> sn == (a * i);\nloop invariant sn == (a * (i - 1));\nloop invariant i <= n ==> sn == (a * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == (a * i) ==> (a * i) <= n * a;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == (a * i) ==> (a * i) <= n * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == a * i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant -n * a <= sn <= n * a;\nloop invariant sn == (i - 1) * a;\nloop invariant 1 <= i <= n;\nloop invariant -n * a <= sn <= n * a;\nloop invariant sn == (i - 1) * a;\nloop invariant 1 <= i <= n;\nloop invariant -n * a <= sn <= n * a;\nloop invariant sn == (n - 1) * a;\nloop invariant 1 <= i <= n;\nloop invariant -n * a <= sn <= n * a;\nloop invariant sn == (i - 1) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = a*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= unknown_int();\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant a >= 2;\nloop invariant sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant i * a >= sn;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant sn == (n-i+1)*a;\nloop invariant sn == 0 ==> i == n+1;\nloop invariant sn >= 0 ==> i <= n+1;\nloop invariant sn <= n*a ==> i >= 1;\nloop invariant sn == (n-i+1)*a ==> sn == n*a ==> i == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == (i - 1) * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn <= a * (i - 1);\nloop invariant sn >= a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant 0 <= sn <= n * a;\nloop invariant i == n + 1 ==> sn == n * a;\nloop invariant i == 1 ==> sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == a*i;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn == 0 || sn == n*a;\nloop invariant sn == n*a || sn == 0;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\nloop invariant sn == 0 || sn == a*i;\nloop invariant sn == a*i || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: i >= 1;\nloop invariant i4: sn >= 0;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\nloop invariant sn == n*a || sn == 0;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sn >= i*a;\nloop invariant sn <= (n-i+1)*a;\nloop invariant sn >= 0 || sn <= n*a;\nloop invariant sn >= 0 && sn <= n*a;\nloop invariant sn >= i*a && sn <= (n-i+1)*a;\nloop invariant sn >= 0 && sn <= n*a && sn >= i*a && sn <= (n-i+1)*a;\nloop invariant sn >= 0 && sn <= n*a && sn >= i*a && sn <= (n-i+1)*a && sn == i*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n\nloop invariant i5: sn >= 0;\n\nloop invariant i7: i >= 0;\n\n\n\nloop invariant i11: sn >= 0 || sn <= n*a;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == a * (i - 1);\nloop invariant sn == i * (n - (i - 1));\nloop invariant sn == (n * (n + 1)) / 2;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a;\nloop invariant sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn == a * (i - 1);\n\n\nloop invariant i5: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant loop invariant 0 <= i <= n;\nloop invariant sn == (a * (i - 1));\nloop invariant i <= n ==> sn == (a * i);\nloop invariant sn == (a * (i - 1));\nloop invariant i <= n ==> sn == (a * i);\nloop invariant sn == (a * (i - 1));\nloop invariant i <= n ==> sn == (a * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn == (a * (i - 1));\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == (a * i) ==> (a * i) <= n * a;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == (a * i) ==> (a * i) <= n * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == a * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant -n * a <= sn <= n * a;\nloop invariant sn == (i - 1) * a;\nloop invariant 1 <= i <= n;\nloop invariant -n * a <= sn <= n * a;\nloop invariant sn == (i - 1) * a;\nloop invariant 1 <= i <= n;\nloop invariant -n * a <= sn <= n * a;\nloop invariant sn == (n - 1) * a;\nloop invariant 1 <= i <= n;\nloop invariant -n * a <= sn <= n * a;\nloop invariant sn == (i - 1) * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: sn == (i - 1) * a;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = a*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= unknown_int();\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant a >= 2;\nloop invariant sn == i * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\nloop invariant i4: a >= 2;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant i * a >= sn;\nloop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\nloop invariant i4: i * a >= sn;\nloop invariant i5: sn >= 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant sn == (n-i+1)*a;\nloop invariant sn == 0 ==> i == n+1;\nloop invariant sn >= 0 ==> i <= n+1;\nloop invariant sn <= n*a ==> i >= 1;\nloop invariant sn == (n-i+1)*a ==> sn == n*a ==> i == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n\nloop invariant i7: sn <= n*a ==> i >= 1;\nloop invariant i8: sn == (n-i+1)*a ==> sn == n*a ==> i == 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == (i - 1) * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: sn == (i - 1) * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn <= a * (i - 1);\nloop invariant sn >= a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= a * n;\nloop invariant sn == a * (i - 1);\nloop invariant sn >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\nloop invariant i2: sn == a * (i - 1);\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn <= a * (i - 1);\nloop invariant i6: sn >= a * (i - 1);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 45: unexpected token 'invariant'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: 1 <= i <= n + 1;\nloop invariant i2: 0 <= sn <= n * a;\nloop invariant i3: i == n + 1 ==> sn == n * a;\nloop invariant i4: i == 1 ==> sn == 0;\nloop invariant i5: 0 <= i <= n;\nloop invariant i6: sn == a*i;\nloop invariant i7: i >= 1;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn == 0 || sn == n*a;\nloop invariant i10: sn == n*a || sn == 0;\nloop invariant i11: sn == a*i || sn == 0;\nloop invariant i12: sn == 0 || sn == a*i;\nloop invariant i13: 0 <= sn <= n*a;\nloop invariant i14: sn == i*a;\nloop invariant i15: sn <= n*a;\nloop invariant i16: i >= 0;\nloop invariant i17: i <= n;\nloop invariant i18: sn >= i*a;\nloop invariant i19: sn <= (n-i+1)*a;\nloop invariant i20: sn >= 0 || sn <= n*a;\nloop invariant i21: sn >= 0 && sn <= n*a;\nloop invariant i22: sn >= i*a && sn <= (n-i+1)*a;\nloop invariant i23: sn >= 0 && sn <= n*a && sn >= i*a && sn <= (n-i+1)*a;\nloop invariant i24: sn >= 0 && sn <= n*a && sn >= i*a && sn <= (n-i+1)*a && sn == i*a;\nloop invariant i25: 1 <= i <= n;\nloop invariant i26: sn == a * (i - 1);\nloop invariant i27: sn == i * (n - (i - 1));\nloop invariant i28: sn == (n * (n + 1)) / 2;\nloop invariant i29: sn <= n * a;\nloop invariant i30: sn == n * a;\nloop invariant i31: sn == 0;\nloop invariant i32: loop invariant 0 <= i <= n;\nloop invariant i33: sn == (a * (i - 1));\nloop invariant i34: i <= n ==> sn == (a * i);\nloop invariant i35: sn == (a * i) ==> (a * i) <= n * a;\nloop invariant i36: sn == i * a;\nloop invariant i37: sn == a * i;\nloop invariant i38: -n * a <= sn <= n * a;\nloop invariant i39: sn == (i - 1) * a;\nloop invariant i40: sn == (n - 1) * a;\nloop invariant i41: sn = a*i;\nloop invariant i42: 0 <= n <= unknown_int();\nloop invariant i43: a >= 2;\nloop invariant i44: 0 <= n;\nloop invariant i45: i * a >= sn;\nloop invariant i46: 1 <= i <= n+1;\nloop invariant i47: sn == (n-i+1)*a;\nloop invariant i48: sn == 0 ==> i == n+1;\nloop invariant i49: sn >= 0 ==> i <= n+1;\nloop invariant i50: sn <= n*a ==> i >= 1;\nloop invariant i51: sn == (n-i+1)*a ==> sn == n*a ==> i == 1;\nloop invariant i52: sn <= a * n;\nloop invariant i53: sn <= a * (i - 1);\nloop invariant i54: sn >= a * (i - 1);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 20,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: i == n + 1 ==> sn == n * a;\nloop invariant i4: i == 1 ==> sn == 0;\n\n\nloop invariant i7: i >= 1;\nloop invariant i8: sn >= 0;\n\n\n\n\n\n\n\nloop invariant i16: i >= 0;\n\n\n\nloop invariant i20: sn >= 0 || sn <= n*a;\n\n\n\n\n\nloop invariant i26: sn == a * (i - 1);\n\n\n\n\n\n\nloop invariant i33: sn == (a * (i - 1));\n\nloop invariant i35: sn == (a * i) ==> (a * i) <= n * a;\n\n\n\nloop invariant i39: sn == (i - 1) * a;\n\n\n\nloop invariant i43: a >= 2;\n\nloop invariant i45: i * a >= sn;\n\n\n\n\nloop invariant i50: sn <= n*a ==> i >= 1;\nloop invariant i51: sn == (n-i+1)*a ==> sn == n*a ==> i == 1;\n\nloop invariant i53: sn <= a * (i - 1);\nloop invariant i54: sn >= a * (i - 1);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/up-nested.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum01_true.c"
        ],
        "skipped": [],
        "total": 176,
        "success_count": 145,
        "failure_count": 31,
        "success_rate": 0.8238636363636364
    }
}