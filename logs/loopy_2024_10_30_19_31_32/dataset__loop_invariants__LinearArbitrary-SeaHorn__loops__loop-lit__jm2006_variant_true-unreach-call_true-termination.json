{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant z <= j;\nloop invariant x == i;\nloop invariant y == j - z * 2;\nloop invariant i == j - z;\nloop invariant i == j - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0 && i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant x >= 0 && x <= i;\nloop invariant y >= 0 && y <= j;\nloop invariant z >= 0;\nloop invariant i == j ==> y == -z;\nloop invariant i >= 0 && i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant x >= 0 && x <= i;\nloop invariant y >= 0 && y <= j;\nloop invariant z >= 0;\nloop invariant i == j ==> y == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z == i;\nloop invariant y == j + 2 * z;\nloop invariant x == 0;\nloop invariant if (i == j) then y == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= j;\nloop invariant z >= 0;\nloop invariant x == i - z - y;\nloop invariant y == i - z - x;\nloop invariant (i == j ==> y == -z);\nloop invariant !(i == j ==> y != -z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant x == i - z;\nloop invariant i == j ==> y == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z >= 0;\nloop invariant i >= j ==> y == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= i - z;\nloop invariant y >= j - 2 * z;\nloop invariant z >= 0;\nloop invariant z <= i;\nloop invariant y + z * 2 == j;\nloop invariant y == j - z * 2;\nloop invariant x == i - z;\nloop invariant x >= y;\nloop invariant z == i - x;\nloop invariant y == j - (i - x) * 2;\nloop invariant y == j - i + x * 2;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0 && i <= 1000000;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant i == j ==> y == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant z >= 0;\nloop invariant z <= i;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= i - j;\nloop invariant y <= j - 2 * z;\nloop invariant (i == j) ==> (y == -z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= -2 * x + x - 1;\nloop invariant 0 <= z <= i - j;\nloop invariant x = 0 ==> (i - j) == y;\nloop invariant x = 0 ==> (i - j) == -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y - z = 2 * x;\nloop invariant z <= x;\nloop invariant y >= j - 2 * (i - x);\nloop invariant x <= i;\nloop invariant y >= i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z == 1000000 - j;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant (j == i ==> y == -z);\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y <= j;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant i >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 1000000;\nloop invariant i5: j >= 0;\n\n\n\nloop invariant i9: z >= 0;\n\n\n\nloop invariant i13: x >= 0;\nloop invariant i14: y <= j;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant z <= j;\nloop invariant x == i;\nloop invariant y == j - z * 2;\nloop invariant i == j - z;\nloop invariant i == j - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: z >= 0;\n\n\nloop invariant i6: y == j - z * 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0 && i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant x >= 0 && x <= i;\nloop invariant y >= 0 && y <= j;\nloop invariant z >= 0;\nloop invariant i == j ==> y == -z;\nloop invariant i >= 0 && i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant x >= 0 && x <= i;\nloop invariant y >= 0 && y <= j;\nloop invariant z >= 0;\nloop invariant i == j ==> y == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: i >= 0 && i <= LARGE_INT;\nloop invariant i2: j >= 0;\nloop invariant i3: x >= 0 && x <= i;\n\nloop invariant i5: z >= 0;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant j >= 0;\nloop invariant z == i;\nloop invariant y == j + 2 * z;\nloop invariant x == 0;\nloop invariant if (i == j) then y == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: j >= 0;\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= j;\nloop invariant z >= 0;\nloop invariant x == i - z - y;\nloop invariant y == i - z - x;\nloop invariant (i == j ==> y == -z);\nloop invariant !(i == j ==> y != -z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= LARGE_INT;\n\nloop invariant i3: z >= 0;\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant x == i - z;\nloop invariant i == j ==> y == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: x == i - z;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant z >= 0;\nloop invariant i >= j ==> y == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n\n\nloop invariant i7: z >= 0;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= i - z;\nloop invariant y >= j - 2 * z;\nloop invariant z >= 0;\nloop invariant z <= i;\nloop invariant y + z * 2 == j;\nloop invariant y == j - z * 2;\nloop invariant x == i - z;\nloop invariant x >= y;\nloop invariant z == i - x;\nloop invariant y == j - (i - x) * 2;\nloop invariant y == j - i + x * 2;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\nloop invariant y == i + x - j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: x <= i;\nloop invariant i4: y <= j;\nloop invariant i5: x >= i - z;\nloop invariant i6: y >= j - 2 * z;\nloop invariant i7: z >= 0;\nloop invariant i8: z <= i;\nloop invariant i9: y + z * 2 == j;\nloop invariant i10: y == j - z * 2;\nloop invariant i11: x == i - z;\n\nloop invariant i13: z == i - x;\nloop invariant i14: y == j - (i - x) * 2;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0 && i <= 1000000;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant i == j ==> y == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\nloop invariant i3: i >= 0 && i <= 1000000;\nloop invariant i4: j >= 0;\nloop invariant i5: x >= 0;\n\nloop invariant i7: z >= 0;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant z >= 0;\nloop invariant z <= i;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant z <= i;\nloop invariant z <= j;\nloop invariant i - z <= j;\nloop invariant i - x <= j;\nloop invariant i - z <= y;\nloop invariant i - x <= y;\nloop invariant z <= y;\nloop invariant x == i - z;\nloop invariant y == j - 2 * z;\nloop invariant i - x == j - 2 * z;\nloop invariant i - z == j - 2 * z;\nloop invariant x == y;\nloop invariant z >= j;\nloop invariant j <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: z >= 0;\nloop invariant i4: z <= i;\n\n\n\n\n\nloop invariant i10: x >= 0;\n\nloop invariant i12: x == i - z;\nloop invariant i13: y == j - 2 * z;\n\n\n\n\n\nloop invariant i19: i <= LARGE_INT;\nloop invariant i20: i >= 0;\nloop invariant i21: j >= 0;\nloop invariant i22: x <= i;\nloop invariant i23: y <= j;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= i - j;\nloop invariant y <= j - 2 * z;\nloop invariant (i == j) ==> (y == -z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\nloop invariant i4: y <= j - 2 * z;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= -2 * x + x - 1;\nloop invariant 0 <= z <= i - j;\nloop invariant x = 0 ==> (i - j) == y;\nloop invariant x = 0 ==> (i - j) == -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= LARGE_INT;\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y - z = 2 * x;\nloop invariant z <= x;\nloop invariant y >= j - 2 * (i - x);\nloop invariant x <= i;\nloop invariant y >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\n\nloop invariant i5: y >= j - 2 * (i - x);\nloop invariant i6: x <= i;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 74: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 1000000;\nloop invariant i5: j >= 0;\nloop invariant i6: x == i;\nloop invariant i7: y == j;\nloop invariant i8: z == 1000000 - j;\nloop invariant i9: z >= 0;\nloop invariant i10: z <= 1000000;\nloop invariant i11: (j == i ==> y == -z);\nloop invariant i12: x >= y;\nloop invariant i13: x >= 0;\nloop invariant i14: y <= j;\nloop invariant i15: y >= 0;\nloop invariant i16: i >= j;\nloop invariant i17: 0 <= y <= j;\nloop invariant i18: z <= j;\nloop invariant i19: y == j - z * 2;\nloop invariant i20: i == j - z;\nloop invariant i21: i == j - z * 2 + z;\nloop invariant i22: i == j - z * 2 + z * 2;\nloop invariant i23: i == j - z * 2 + z * 2 - z;\nloop invariant i24: i == j - z * 2 + z * 2 - z * 2;\nloop invariant i25: i == j - z * 2 + z * 2 - z * 2 + z;\nloop invariant i26: i == j - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i27: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i28: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i29: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i30: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i31: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i32: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i33: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i34: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i35: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i36: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i37: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i38: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i39: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i40: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2;\nloop invariant i41: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z;\nloop invariant i42: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2;\nloop invariant i43: i == j - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z * 2 + z * 2 - z;\nloop invariant i44: i >= 0 && i <= LARGE_INT;\nloop invariant i45: x >= 0 && x <= i;\nloop invariant i46: y >= 0 && y <= j;\nloop invariant i47: i == j ==> y == -z;\nloop invariant i48: 0 <= i;\nloop invariant i49: i <= LARGE_INT;\nloop invariant i50: z == i;\nloop invariant i51: y == j + 2 * z;\nloop invariant i52: x == 0;\nloop invariant i53: if (i == j) then y == -z;\nloop invariant i54: 0 <= x <= LARGE_INT;\nloop invariant i55: x == i - z - y;\nloop invariant i56: y == i - z - x;\nloop invariant i57: (i == j ==> y == -z);\nloop invariant i58: !(i == j ==> y != -z);\nloop invariant i59: x == i - z;\nloop invariant i60: i >= j ==> y == -z;\nloop invariant i61: 0 <= x;\nloop invariant i62: 0 <= y;\nloop invariant i63: x <= i;\nloop invariant i64: x >= i - z;\nloop invariant i65: y >= j - 2 * z;\nloop invariant i66: z <= i;\nloop invariant i67: y + z * 2 == j;\nloop invariant i68: z == i - x;\nloop invariant i69: y == j - (i - x) * 2;\nloop invariant i70: y == j - i + x * 2;\nloop invariant i71: y == i + x - j;\nloop invariant i72: i >= 0 && i <= 1000000;\nloop invariant i73: 0 <= x <= i;\nloop invariant i74: i - z <= j;\nloop invariant i75: i - x <= j;\nloop invariant i76: i - z <= y;\nloop invariant i77: i - x <= y;\nloop invariant i78: z <= y;\nloop invariant i79: y == j - 2 * z;\nloop invariant i80: i - x == j - 2 * z;\nloop invariant i81: i - z == j - 2 * z;\nloop invariant i82: x == y;\nloop invariant i83: z >= j;\nloop invariant i84: j <= LARGE_INT;\nloop invariant i85: x >= i - j;\nloop invariant i86: y <= j - 2 * z;\nloop invariant i87: (i == j) ==> (y == -z);\nloop invariant i88: 0 <= y <= -2 * x + x - 1;\nloop invariant i89: 0 <= z <= i - j;\nloop invariant i90: x = 0 ==> (i - j) == y;\nloop invariant i91: x = 0 ==> (i - j) == -z;\nloop invariant i92: y - z = 2 * x;\nloop invariant i93: z <= x;\nloop invariant i94: y >= j - 2 * (i - x);\nloop invariant i95: y >= i;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 35,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 1000000;\nloop invariant i5: j >= 0;\n\n\n\nloop invariant i9: z >= 0;\nloop invariant i10: z <= 1000000;\n\n\nloop invariant i13: x >= 0;\nloop invariant i14: y <= j;\n\n\n\n\nloop invariant i19: y == j - z * 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: i >= 0 && i <= LARGE_INT;\nloop invariant i45: x >= 0 && x <= i;\n\n\nloop invariant i48: 0 <= i;\nloop invariant i49: i <= LARGE_INT;\n\n\n\n\nloop invariant i54: 0 <= x <= LARGE_INT;\n\n\n\n\nloop invariant i59: x == i - z;\n\nloop invariant i61: 0 <= x;\n\nloop invariant i63: x <= i;\nloop invariant i64: x >= i - z;\nloop invariant i65: y >= j - 2 * z;\nloop invariant i66: z <= i;\nloop invariant i67: y + z * 2 == j;\nloop invariant i68: z == i - x;\nloop invariant i69: y == j - (i - x) * 2;\n\n\nloop invariant i72: i >= 0 && i <= 1000000;\nloop invariant i73: 0 <= x <= i;\n\n\n\n\n\nloop invariant i79: y == j - 2 * z;\n\n\n\n\n\n\nloop invariant i86: y <= j - 2 * z;\n\n\n\n\n\n\n\nloop invariant i94: y >= j - 2 * (i - x);\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 54,
        "success_count": 45,
        "failure_count": 9,
        "success_rate": 0.8333333333333334
    }
}