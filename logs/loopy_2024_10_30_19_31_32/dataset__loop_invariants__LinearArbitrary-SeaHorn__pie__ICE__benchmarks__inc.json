{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  while(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\nloop invariant x <= 100;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x + 1 > 100 ==> x >= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= unknown_int();\nloop invariant x < 100 ==> x + 1 < 100;\nloop invariant m >= unknown_int() ==> m >= unknown_int();\nloop invariant m >= unknown_int() ==> x < 100;\nloop invariant x >= 0;\nloop invariant x + 1 >= 0;\nloop invariant x + 1 < 100 ==> x < 100;\nloop invariant x + 1 < 100 ==> x >= 0;\nloop invariant x + 1 < 100 ==> x < 100;\nloop invariant x + 1 < 100 ==> x + 1 >= 0;\nloop invariant x + 1 < 100 ==> x + 1 < 100;\nloop invariant x + 1 < 100 ==> x + 1 < 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant unknown_int() <= 100;\nloop invariant unknown_int() >= -1;\nloop invariant 0 <= x + 1 <= 101;\nloop invariant (x + 1) >= 0;\nloop invariant (x + 1) <= 101;\nloop invariant (x + 1) == (x + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant unknown_int() == m ==> x + 1 == x ==> false ==> x + 1 == x + 1;\nloop invariant unknown_int() != m ==> x + 1 == x ==> true ==> x + 1 == x + 1;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> false ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (x + 1) >= m;\nloop invariant x < 100 ==> (x + 1) <= m;\nloop invariant x < 100 ==> m <= (x + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= 0;\nloop invariant m < 1000;\nloop invariant x * m <= 10000;\nloop invariant x * m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= -1;\nloop invariant x <= m + 1;\nloop invariant m >= 0;\nloop invariant m < 100;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= x;\nloop invariant m <= 100;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m > 0;\nloop invariant x + m < 100 ==> m >= 0;\nloop invariant x + m >= 100 ==> m < 0;\nloop invariant m < 0 ==> x + m < 100;\nloop invariant m >= 0 ==> x + m >= 100;\nloop invariant x + m > 0 ==> m >= 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m <= 0 ==> m < 0;\nloop invariant x + m > 0 ==> m >= 0;\nloop invariant x + m > 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant x == 0 ==> m == 0;\nloop invariant x > 0 ==> m < 0 || m > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m = unknown_int();\nloop invariant x = 0;\nloop invariant x < 100 ==> m = unknown_int();\nloop invariant x >= 100 ==> m = unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x ==> x == 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= m <= 100;\nloop invariant x - 1 < m < x + 1;\nloop invariant x == m;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 100;\n\n\nloop invariant i5: x >= 0;\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x >= 1;\nloop invariant x <= 100;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\nloop invariant x == 1 ==> m >= 0;\nloop invariant x == 1 ==> m <= 2147483647;\nloop invariant x == 1 ==> m == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x <= 100;\n\nloop invariant i5: x == 1 ==> m <= 2147483647;\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x + 1 > 100 ==> x >= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: x + 1 > 100 ==> x >= 100;\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= unknown_int();\nloop invariant x < 100 ==> x + 1 < 100;\nloop invariant m >= unknown_int() ==> m >= unknown_int();\nloop invariant m >= unknown_int() ==> x < 100;\nloop invariant x >= 0;\nloop invariant x + 1 >= 0;\nloop invariant x + 1 < 100 ==> x < 100;\nloop invariant x + 1 < 100 ==> x >= 0;\nloop invariant x + 1 < 100 ==> x < 100;\nloop invariant x + 1 < 100 ==> x + 1 >= 0;\nloop invariant x + 1 < 100 ==> x + 1 < 100;\nloop invariant x + 1 < 100 ==> x + 1 < 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\nloop invariant i6: x >= 0;\nloop invariant i7: x + 1 >= 0;\nloop invariant i8: x + 1 < 100 ==> x < 100;\nloop invariant i9: x + 1 < 100 ==> x >= 0;\nloop invariant i10: x + 1 < 100 ==> x + 1 >= 0;\nloop invariant i11: x + 1 < 100 ==> x + 1 < 100;\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant unknown_int() <= 100;\nloop invariant unknown_int() >= -1;\nloop invariant 0 <= x + 1 <= 101;\nloop invariant (x + 1) >= 0;\nloop invariant (x + 1) <= 101;\nloop invariant (x + 1) == (x + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: 0 <= x + 1 <= 101;\nloop invariant i5: (x + 1) >= 0;\nloop invariant i6: (x + 1) <= 101;\nloop invariant i7: (x + 1) == (x + 1);\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant unknown_int() == m ==> x + 1 == x ==> false ==> x + 1 == x + 1;\nloop invariant unknown_int() != m ==> x + 1 == x ==> true ==> x + 1 == x + 1;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> false ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant (x + 1) >= m;\nloop invariant x < 100 ==> (x + 1) <= m;\nloop invariant x < 100 ==> m <= (x + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= 0;\nloop invariant m < 1000;\nloop invariant x * m <= 10000;\nloop invariant x * m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= -1;\nloop invariant x <= m + 1;\nloop invariant m >= 0;\nloop invariant m < 100;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= x;\nloop invariant m <= 100;\nloop invariant x <= 100;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\nloop invariant m <= 99;\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n\nloop invariant i7: x >= 0;\n\n\n\nloop invariant i11: x <= 100;\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m > 0;\nloop invariant x + m < 100 ==> m >= 0;\nloop invariant x + m >= 100 ==> m < 0;\nloop invariant m < 0 ==> x + m < 100;\nloop invariant m >= 0 ==> x + m >= 100;\nloop invariant x + m > 0 ==> m >= 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m <= 0 ==> m < 0;\nloop invariant x + m > 0 ==> m >= 0;\nloop invariant x + m > 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\nloop invariant x + m >= 0 ==> m >= 0;\nloop invariant x + m >= 0 ==> m > 0;\nloop invariant x + m < 0 ==> m < 0;\nloop invariant x + m <= 0 ==> m <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\nloop invariant i5: m < 0 ==> x + m < 100;\n\n\nloop invariant i8: x + m < 0 ==> m < 0;\n\nloop invariant i10: x + m <= 0 ==> m <= 0;\n\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant x == 0 ==> m == 0;\nloop invariant x > 0 ==> m < 0 || m > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\n\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m = unknown_int();\nloop invariant x = 0;\nloop invariant x < 100 ==> m = unknown_int();\nloop invariant x >= 100 ==> m = unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant x ==> x == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\nloop invariant x == (1 + (m - 1) * m / 2);\nloop invariant x + 1 >= x;\nloop invariant x + 1 <= 100;\nloop invariant m >= 0;\nloop invariant m <= INT_MAX;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: m <= INT_MAX;\n\nloop invariant i5: x + 1 >= x;\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= m <= 100;\nloop invariant x - 1 < m < x + 1;\nloop invariant x == m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\n\n\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 25: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 100;\nloop invariant i3: m >= 0;\nloop invariant i4: m <= 100;\nloop invariant i5: x >= 0;\nloop invariant i6: 0 <= x <= 100;\nloop invariant i7: x >= 1;\nloop invariant i8: x == 1 ==> m >= 0;\nloop invariant i9: x == 1 ==> m <= 2147483647;\nloop invariant i10: x == 1 ==> m == 0;\nloop invariant i11: x + 1 > 100 ==> x >= 100;\nloop invariant i12: m >= unknown_int();\nloop invariant i13: x < 100 ==> x + 1 < 100;\nloop invariant i14: m >= unknown_int() ==> m >= unknown_int();\nloop invariant i15: m >= unknown_int() ==> x < 100;\nloop invariant i16: x + 1 >= 0;\nloop invariant i17: x + 1 < 100 ==> x < 100;\nloop invariant i18: x + 1 < 100 ==> x >= 0;\nloop invariant i19: x + 1 < 100 ==> x + 1 >= 0;\nloop invariant i20: x + 1 < 100 ==> x + 1 < 100;\nloop invariant i21: unknown_int() <= 100;\nloop invariant i22: unknown_int() >= -1;\nloop invariant i23: 0 <= x + 1 <= 101;\nloop invariant i24: (x + 1) >= 0;\nloop invariant i25: (x + 1) <= 101;\nloop invariant i26: (x + 1) == (x + 1);\nloop invariant i27: unknown_int() == m ==> x + 1 == x ==> false ==> x + 1 == x + 1;\nloop invariant i28: unknown_int() != m ==> x + 1 == x ==> true ==> x + 1 == x + 1;\nloop invariant i29: unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> false ==> x == x;\nloop invariant i30: unknown_int() != m ==> x + 1 == x + 1 ==> x == x ==> true ==> x == x;\nloop invariant i31: (x + 1) >= m;\nloop invariant i32: x < 100 ==> (x + 1) <= m;\nloop invariant i33: x < 100 ==> m <= (x + 1);\nloop invariant i34: m < 1000;\nloop invariant i35: x * m <= 10000;\nloop invariant i36: x * m >= 0;\nloop invariant i37: m >= -1;\nloop invariant i38: x <= m + 1;\nloop invariant i39: m < 100;\nloop invariant i40: m <= 99;\nloop invariant i41: x <= 99;\nloop invariant i42: m >= x;\nloop invariant i43: m > 0;\nloop invariant i44: x + m < 100 ==> m >= 0;\nloop invariant i45: x + m >= 100 ==> m < 0;\nloop invariant i46: m < 0 ==> x + m < 100;\nloop invariant i47: m >= 0 ==> x + m >= 100;\nloop invariant i48: x + m > 0 ==> m >= 0;\nloop invariant i49: x + m < 0 ==> m < 0;\nloop invariant i50: x + m >= 0 ==> m >= 0;\nloop invariant i51: x + m <= 0 ==> m <= 0;\nloop invariant i52: x + m <= 0 ==> m < 0;\nloop invariant i53: x + m > 0 ==> m > 0;\nloop invariant i54: x + m >= 0 ==> m > 0;\nloop invariant i55: 0 <= x < 100;\nloop invariant i56: x == 0 ==> m == 0;\nloop invariant i57: x > 0 ==> m < 0 || m > 0;\nloop invariant i58: m = unknown_int();\nloop invariant i59: x = 0;\nloop invariant i60: x < 100 ==> m = unknown_int();\nloop invariant i61: x >= 100 ==> m = unknown_int();\nloop invariant i62: x ==> x == 100;\nloop invariant i63: m <= INT_MAX;\nloop invariant i64: x == (1 + (m - 1) * m / 2);\nloop invariant i65: x + 1 >= x;\nloop invariant i66: x + 1 <= 100;\nloop invariant i67: 1 <= x <= 100;\nloop invariant i68: 0 <= m <= 100;\nloop invariant i69: x - 1 < m < x + 1;\nloop invariant i70: x == m;\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
        "combined_annotation_num_solver_calls": 25,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 100;\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: 0 <= x <= 100;\n\n\nloop invariant i9: x == 1 ==> m <= 2147483647;\n\nloop invariant i11: x + 1 > 100 ==> x >= 100;\n\n\n\n\nloop invariant i16: x + 1 >= 0;\nloop invariant i17: x + 1 < 100 ==> x < 100;\nloop invariant i18: x + 1 < 100 ==> x >= 0;\nloop invariant i19: x + 1 < 100 ==> x + 1 >= 0;\nloop invariant i20: x + 1 < 100 ==> x + 1 < 100;\n\n\nloop invariant i23: 0 <= x + 1 <= 101;\nloop invariant i24: (x + 1) >= 0;\nloop invariant i25: (x + 1) <= 101;\nloop invariant i26: (x + 1) == (x + 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: m < 0 ==> x + m < 100;\n\n\nloop invariant i49: x + m < 0 ==> m < 0;\n\nloop invariant i51: x + m <= 0 ==> m <= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i63: m <= INT_MAX;\n\nloop invariant i65: x + 1 >= x;\n\n\n\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 84,
        "success_count": 72,
        "failure_count": 12,
        "success_rate": 0.8571428571428571
    }
}