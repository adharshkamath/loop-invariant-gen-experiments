{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  while (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant count >= 0;\nloop invariant i >= 0;\nloop invariant i < 100;\nloop invariant count == i + unknown_uint();\nloop invariant i < 100 ==> count >= 100 + unknown_uint();\nloop invariant i == 100 ==> count >= 110 + unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (i + unknown_uint());\n*/\n```",
            "```\n/*@\nloop invariant count == (count + i);\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\n*/\n```",
            "```\n/*@\nloop invariant ( i >= 0 ==> i <= 100 );\nloop invariant ( count >= 0 ==> count <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( count >= 0 ==> i >= 0 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( count >= 0 ==> i >= 0 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\n*/\n```",
            "```\n/*@\nloop invariant 1 <= count <= 100000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= i;\nloop invariant count <= i + 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count == (i + unknown_uint());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == count' + 1;\nloop invariant i == i' + 1;\nloop invariant count' == count + 1;\nloop invariant i' == i - 1;\nloop invariant count >= (100 - i) + 1;\nloop invariant count' >= 0;\nloop invariant i' >= 0;\nloop invariant i' <= 99;\nloop invariant count' <= count + 99;\nloop invariant count' <= count + 1;\nloop invariant count' <= count;\nloop invariant count' >= count;\nloop invariant count' >= 1;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count < 100;\nloop invariant count == count';\nloop invariant i == i';\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 99;\nloop invariant 1 <= count <= count + 99;\n*/\n```",
            "```\n/*@\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count == (1 + i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count = i + 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= count <= 100;\nloop invariant i == count;\nloop invariant i == (i - 1) + 1;\nloop invariant count == (count - 1) + 1;\nloop invariant count == i;\nloop invariant 100 >= i;\nloop invariant 100 >= count;\nloop invariant i >= 0;\nloop invariant count >= 0;\nloop invariant i >= 1;\nloop invariant count >= 1;\nloop invariant i <= 99;\nloop invariant count <= 99;\nloop invariant i == 100;\nloop invariant count == 100;\nloop invariant i == 100 + 1;\nloop invariant count == 100 + 1;\nloop invariant i == 100 + 2;\nloop invariant count == 100 + 2;\nloop invariant i == 100 + 3;\nloop invariant count == 100 + 3;\nloop invariant i == 100 + 4;\nloop invariant count == 100 + 4;\nloop invariant i == 100 + 5;\nloop invariant count == 100 + 5;\nloop invariant i == 100 + 6;\nloop invariant count == 100 + 6;\nloop invariant i == 100 + 7;\nloop invariant count == 100 + 7;\nloop invariant i == 100 + 8;\nloop invariant count == 100 + 8;\nloop invariant i == 100 + 9;\nloop invariant count == 100 + 9;\nloop invariant i == 100 + 10;\nloop invariant count == 100 + 10;\nloop invariant i == 100 + 11;\nloop invariant count == 100 + 11;\nloop invariant i == 100 + 12;\nloop invariant count == 100 + 12;\nloop invariant i == 100 + 13;\nloop invariant count == 100 + 13;\nloop invariant i == 100 + 14;\nloop invariant count == 100 + 14;\nloop invariant i == 100 + 15;\nloop invariant count == 100 + 15;\nloop invariant i == 100 + 16;\nloop invariant count == 100 + 16;\nloop invariant i == 100 + 17;\nloop invariant count == 100 + 17;\nloop invariant i == 100 + 18;\nloop invariant count == 100 + 18;\nloop invariant i == 100 + 19;\nloop invariant count == 100 + 19;\nloop invariant i == 100 + 20;\nloop invariant count == 100 + 20;\nloop invariant i == 100 + 21;\nloop invariant count == 100 + 21;\nloop invariant i == 100 + 22;\nloop invariant count == 100 + 22;\nloop invariant i == 100 + 23;\nloop invariant count == 100 + 23;\nloop invariant i == 100 + 24;\nloop invariant count == 100 + 24;\nloop invariant i == 100 + 25;\nloop invariant count == 100 + 25;\nloop invariant i == 100 + 26;\nloop invariant count == 100 + 26;\nloop invariant i == 100 + 27;\nloop invariant count == 100 + 27;\nloop invariant i == 100 + 28;\nloop invariant count == 100 + 28;\nloop invariant i == 100 + 29;\nloop invariant count == 100 + 29;\nloop invariant i == 100 + 30;\nloop invariant count == 100 + 30;\nloop invariant i == 100 + 31;\nloop invariant count == 100 + 31;\nloop invariant i == 100 + 32;\nloop invariant count == 100 + 32;\nloop invariant i == 100 + 33;\nloop invariant count == 100 + 33;\nloop invariant i == 100 + 34;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i <= 100;\nloop invariant count < 0 ==> i <= 100;\nloop invariant count >= 0 ==> i <= 100;\nloop invariant count < 0 ==> count >= 0;\nloop invariant count >= 0 ==> count >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant count >= 0;\nloop invariant i >= 0;\nloop invariant i < 100;\nloop invariant count == i + unknown_uint();\nloop invariant i < 100 ==> count >= 100 + unknown_uint();\nloop invariant i == 100 ==> count >= 110 + unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: count >= 0;\nloop invariant i2: i >= 0;\n\n\n\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == (i + unknown_uint());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant count == (count + i);\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\n\nloop invariant i2: 0 <= i <= 100;\nloop invariant i3: count >= 0;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( i >= 0 ==> i <= 100 );\nloop invariant ( count >= 0 ==> count <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( count >= 0 ==> i >= 0 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( count >= 0 ==> i >= 0 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i > 100 ==> count >= 0 );\nloop invariant ( count >= 0 ==> i <= 100 );\nloop invariant ( i >= 0 ==> count >= 0 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: ( i >= 0 ==> i <= 100 );\n\n\nloop invariant i4: ( count >= 0 ==> i <= 100 );\n\nloop invariant i6: ( i > 100 ==> count >= 0 );\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= count <= 100000;\nloop invariant i >= 0;\nloop invariant i <= 100;\nloop invariant count >= i;\nloop invariant count <= i + 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: i <= 100;\nloop invariant i4: count >= i;\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count == (i + unknown_uint());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count == count' + 1;\nloop invariant i == i' + 1;\nloop invariant count' == count + 1;\nloop invariant i' == i - 1;\nloop invariant count >= (100 - i) + 1;\nloop invariant count' >= 0;\nloop invariant i' >= 0;\nloop invariant i' <= 99;\nloop invariant count' <= count + 99;\nloop invariant count' <= count + 1;\nloop invariant count' <= count;\nloop invariant count' >= count;\nloop invariant count' >= 1;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\nloop invariant count' >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\nloop invariant i4: i == i' + 1;\nloop invariant i5: count' == count + 1;\nloop invariant i6: i' == i - 1;\nloop invariant i7: count >= (100 - i) + 1;\nloop invariant i8: count' >= 0;\nloop invariant i9: i' >= 0;\nloop invariant i10: i' <= 99;\nloop invariant i11: count' <= count + 99;\nloop invariant i12: count' <= count + 1;\nloop invariant i13: count' <= count;\nloop invariant i14: count' >= count;\nloop invariant i15: count' >= 1;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count < 100;\nloop invariant count == count';\nloop invariant i == i';\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\nloop invariant i3: count < 100;\n\nloop invariant i5: i == i';\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 99;\nloop invariant 1 <= count <= count + 99;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\n\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i <= 100;\nloop invariant count >= 0;\nloop invariant count == (1 + i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: i <= 100;\nloop invariant i2: count >= 0;\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\nloop invariant count = i + 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 38,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= count <= 100;\nloop invariant i == count;\nloop invariant i == (i - 1) + 1;\nloop invariant count == (count - 1) + 1;\nloop invariant count == i;\nloop invariant 100 >= i;\nloop invariant 100 >= count;\nloop invariant i >= 0;\nloop invariant count >= 0;\nloop invariant i >= 1;\nloop invariant count >= 1;\nloop invariant i <= 99;\nloop invariant count <= 99;\nloop invariant i == 100;\nloop invariant count == 100;\nloop invariant i == 100 + 1;\nloop invariant count == 100 + 1;\nloop invariant i == 100 + 2;\nloop invariant count == 100 + 2;\nloop invariant i == 100 + 3;\nloop invariant count == 100 + 3;\nloop invariant i == 100 + 4;\nloop invariant count == 100 + 4;\nloop invariant i == 100 + 5;\nloop invariant count == 100 + 5;\nloop invariant i == 100 + 6;\nloop invariant count == 100 + 6;\nloop invariant i == 100 + 7;\nloop invariant count == 100 + 7;\nloop invariant i == 100 + 8;\nloop invariant count == 100 + 8;\nloop invariant i == 100 + 9;\nloop invariant count == 100 + 9;\nloop invariant i == 100 + 10;\nloop invariant count == 100 + 10;\nloop invariant i == 100 + 11;\nloop invariant count == 100 + 11;\nloop invariant i == 100 + 12;\nloop invariant count == 100 + 12;\nloop invariant i == 100 + 13;\nloop invariant count == 100 + 13;\nloop invariant i == 100 + 14;\nloop invariant count == 100 + 14;\nloop invariant i == 100 + 15;\nloop invariant count == 100 + 15;\nloop invariant i == 100 + 16;\nloop invariant count == 100 + 16;\nloop invariant i == 100 + 17;\nloop invariant count == 100 + 17;\nloop invariant i == 100 + 18;\nloop invariant count == 100 + 18;\nloop invariant i == 100 + 19;\nloop invariant count == 100 + 19;\nloop invariant i == 100 + 20;\nloop invariant count == 100 + 20;\nloop invariant i == 100 + 21;\nloop invariant count == 100 + 21;\nloop invariant i == 100 + 22;\nloop invariant count == 100 + 22;\nloop invariant i == 100 + 23;\nloop invariant count == 100 + 23;\nloop invariant i == 100 + 24;\nloop invariant count == 100 + 24;\nloop invariant i == 100 + 25;\nloop invariant count == 100 + 25;\nloop invariant i == 100 + 26;\nloop invariant count == 100 + 26;\nloop invariant i == 100 + 27;\nloop invariant count == 100 + 27;\nloop invariant i == 100 + 28;\nloop invariant count == 100 + 28;\nloop invariant i == 100 + 29;\nloop invariant count == 100 + 29;\nloop invariant i == 100 + 30;\nloop invariant count == 100 + 30;\nloop invariant i == 100 + 31;\nloop invariant count == 100 + 31;\nloop invariant i == 100 + 32;\nloop invariant count == 100 + 32;\nloop invariant i == 100 + 33;\nloop invariant count == 100 + 33;\nloop invariant i == 100 + 34;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\n\n\nloop invariant i4: i == (i - 1) + 1;\nloop invariant i5: count == (count - 1) + 1;\n\nloop invariant i7: 100 >= i;\n\nloop invariant i9: i >= 0;\nloop invariant i10: count >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i <= 100;\nloop invariant count < 0 ==> i <= 100;\nloop invariant count >= 0 ==> i <= 100;\nloop invariant count < 0 ==> count >= 0;\nloop invariant count >= 0 ==> count >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: i <= 100;\nloop invariant i2: count < 0 ==> i <= 100;\nloop invariant i3: count >= 0 ==> i <= 100;\nloop invariant i4: count < 0 ==> count >= 0;\nloop invariant i5: count >= 0 ==> count >= 0;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant count >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: count >= 0;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: count >= 0;\nloop invariant i2: i >= 0;\nloop invariant i3: i < 100;\nloop invariant i4: count == i + unknown_uint();\nloop invariant i5: i < 100 ==> count >= 100 + unknown_uint();\nloop invariant i6: i == 100 ==> count >= 110 + unknown_uint();\nloop invariant i7: 0 <= i <= 100;\nloop invariant i8: count == (i + unknown_uint());\nloop invariant i9: count == (count + i);\nloop invariant i10: ( i >= 0 ==> i <= 100 );\nloop invariant i11: ( count >= 0 ==> count <= 100 );\nloop invariant i12: ( i >= 0 ==> count >= 0 );\nloop invariant i13: ( count >= 0 ==> i <= 100 );\nloop invariant i14: ( count >= 0 ==> i >= 0 );\nloop invariant i15: ( i > 100 ==> count >= 0 );\nloop invariant i16: 1 <= count <= 100000;\nloop invariant i17: i <= 100;\nloop invariant i18: count >= i;\nloop invariant i19: count <= i + 100;\nloop invariant i20: count == count' + 1;\nloop invariant i21: i == i' + 1;\nloop invariant i22: count' == count + 1;\nloop invariant i23: i' == i - 1;\nloop invariant i24: count >= (100 - i) + 1;\nloop invariant i25: count' >= 0;\nloop invariant i26: i' >= 0;\nloop invariant i27: i' <= 99;\nloop invariant i28: count' <= count + 99;\nloop invariant i29: count' <= count + 1;\nloop invariant i30: count' <= count;\nloop invariant i31: count' >= count;\nloop invariant i32: count' >= 1;\nloop invariant i33: count < 100;\nloop invariant i34: count == count';\nloop invariant i35: i == i';\nloop invariant i36: 0 <= i <= 99;\nloop invariant i37: 1 <= count <= count + 99;\nloop invariant i38: count == (1 + i);\nloop invariant i39: count = i + 100;\nloop invariant i40: 0 <= count <= 100;\nloop invariant i41: i == count;\nloop invariant i42: i == (i - 1) + 1;\nloop invariant i43: count == (count - 1) + 1;\nloop invariant i44: count == i;\nloop invariant i45: 100 >= i;\nloop invariant i46: 100 >= count;\nloop invariant i47: i >= 1;\nloop invariant i48: count >= 1;\nloop invariant i49: i <= 99;\nloop invariant i50: count <= 99;\nloop invariant i51: i == 100;\nloop invariant i52: count == 100;\nloop invariant i53: i == 100 + 1;\nloop invariant i54: count == 100 + 1;\nloop invariant i55: i == 100 + 2;\nloop invariant i56: count == 100 + 2;\nloop invariant i57: i == 100 + 3;\nloop invariant i58: count == 100 + 3;\nloop invariant i59: i == 100 + 4;\nloop invariant i60: count == 100 + 4;\nloop invariant i61: i == 100 + 5;\nloop invariant i62: count == 100 + 5;\nloop invariant i63: i == 100 + 6;\nloop invariant i64: count == 100 + 6;\nloop invariant i65: i == 100 + 7;\nloop invariant i66: count == 100 + 7;\nloop invariant i67: i == 100 + 8;\nloop invariant i68: count == 100 + 8;\nloop invariant i69: i == 100 + 9;\nloop invariant i70: count == 100 + 9;\nloop invariant i71: i == 100 + 10;\nloop invariant i72: count == 100 + 10;\nloop invariant i73: i == 100 + 11;\nloop invariant i74: count == 100 + 11;\nloop invariant i75: i == 100 + 12;\nloop invariant i76: count == 100 + 12;\nloop invariant i77: i == 100 + 13;\nloop invariant i78: count == 100 + 13;\nloop invariant i79: i == 100 + 14;\nloop invariant i80: count == 100 + 14;\nloop invariant i81: i == 100 + 15;\nloop invariant i82: count == 100 + 15;\nloop invariant i83: i == 100 + 16;\nloop invariant i84: count == 100 + 16;\nloop invariant i85: i == 100 + 17;\nloop invariant i86: count == 100 + 17;\nloop invariant i87: i == 100 + 18;\nloop invariant i88: count == 100 + 18;\nloop invariant i89: i == 100 + 19;\nloop invariant i90: count == 100 + 19;\nloop invariant i91: i == 100 + 20;\nloop invariant i92: count == 100 + 20;\nloop invariant i93: i == 100 + 21;\nloop invariant i94: count == 100 + 21;\nloop invariant i95: i == 100 + 22;\nloop invariant i96: count == 100 + 22;\nloop invariant i97: i == 100 + 23;\nloop invariant i98: count == 100 + 23;\nloop invariant i99: i == 100 + 24;\nloop invariant i100: count == 100 + 24;\nloop invariant i101: i == 100 + 25;\nloop invariant i102: count == 100 + 25;\nloop invariant i103: i == 100 + 26;\nloop invariant i104: count == 100 + 26;\nloop invariant i105: i == 100 + 27;\nloop invariant i106: count == 100 + 27;\nloop invariant i107: i == 100 + 28;\nloop invariant i108: count == 100 + 28;\nloop invariant i109: i == 100 + 29;\nloop invariant i110: count == 100 + 29;\nloop invariant i111: i == 100 + 30;\nloop invariant i112: count == 100 + 30;\nloop invariant i113: i == 100 + 31;\nloop invariant i114: count == 100 + 31;\nloop invariant i115: i == 100 + 32;\nloop invariant i116: count == 100 + 32;\nloop invariant i117: i == 100 + 33;\nloop invariant i118: count == 100 + 33;\nloop invariant i119: i == 100 + 34;\nloop invariant i120: count < 0 ==> i <= 100;\nloop invariant i121: count >= 0 ==> i <= 100;\nloop invariant i122: count < 0 ==> count >= 0;\nloop invariant i123: count >= 0 ==> count >= 0;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  /*@\nloop invariant i1: count >= 0;\nloop invariant i2: i >= 0;\nloop invariant i3: i < 100;\n\n\n\nloop invariant i7: 0 <= i <= 100;\n\nloop invariant i9: count == (count + i);\nloop invariant i10: ( i >= 0 ==> i <= 100 );\nloop invariant i11: ( count >= 0 ==> count <= 100 );\nloop invariant i12: ( i >= 0 ==> count >= 0 );\nloop invariant i13: ( count >= 0 ==> i <= 100 );\nloop invariant i14: ( count >= 0 ==> i >= 0 );\nloop invariant i15: ( i > 100 ==> count >= 0 );\nloop invariant i16: 1 <= count <= 100000;\nloop invariant i17: i <= 100;\nloop invariant i18: count >= i;\nloop invariant i19: count <= i + 100;\n\nloop invariant i21: i == i' + 1;\nloop invariant i22: count' == count + 1;\nloop invariant i23: i' == i - 1;\nloop invariant i24: count >= (100 - i) + 1;\nloop invariant i25: count' >= 0;\nloop invariant i26: i' >= 0;\nloop invariant i27: i' <= 99;\nloop invariant i28: count' <= count + 99;\nloop invariant i29: count' <= count + 1;\nloop invariant i30: count' <= count;\nloop invariant i31: count' >= count;\nloop invariant i32: count' >= 1;\nloop invariant i33: count < 100;\nloop invariant i34: count == count';\nloop invariant i35: i == i';\nloop invariant i36: 0 <= i <= 99;\nloop invariant i37: 1 <= count <= count + 99;\nloop invariant i38: count == (1 + i);\nloop invariant i39: count = i + 100;\nloop invariant i40: 0 <= count <= 100;\nloop invariant i41: i == count;\nloop invariant i42: i == (i - 1) + 1;\nloop invariant i43: count == (count - 1) + 1;\nloop invariant i44: count == i;\nloop invariant i45: 100 >= i;\nloop invariant i46: 100 >= count;\nloop invariant i47: i >= 1;\nloop invariant i48: count >= 1;\nloop invariant i49: i <= 99;\nloop invariant i50: count <= 99;\nloop invariant i51: i == 100;\nloop invariant i52: count == 100;\nloop invariant i53: i == 100 + 1;\nloop invariant i54: count == 100 + 1;\nloop invariant i55: i == 100 + 2;\nloop invariant i56: count == 100 + 2;\nloop invariant i57: i == 100 + 3;\nloop invariant i58: count == 100 + 3;\nloop invariant i59: i == 100 + 4;\nloop invariant i60: count == 100 + 4;\nloop invariant i61: i == 100 + 5;\nloop invariant i62: count == 100 + 5;\nloop invariant i63: i == 100 + 6;\nloop invariant i64: count == 100 + 6;\nloop invariant i65: i == 100 + 7;\nloop invariant i66: count == 100 + 7;\nloop invariant i67: i == 100 + 8;\nloop invariant i68: count == 100 + 8;\nloop invariant i69: i == 100 + 9;\nloop invariant i70: count == 100 + 9;\nloop invariant i71: i == 100 + 10;\nloop invariant i72: count == 100 + 10;\nloop invariant i73: i == 100 + 11;\nloop invariant i74: count == 100 + 11;\nloop invariant i75: i == 100 + 12;\nloop invariant i76: count == 100 + 12;\nloop invariant i77: i == 100 + 13;\nloop invariant i78: count == 100 + 13;\nloop invariant i79: i == 100 + 14;\nloop invariant i80: count == 100 + 14;\nloop invariant i81: i == 100 + 15;\nloop invariant i82: count == 100 + 15;\nloop invariant i83: i == 100 + 16;\nloop invariant i84: count == 100 + 16;\nloop invariant i85: i == 100 + 17;\nloop invariant i86: count == 100 + 17;\nloop invariant i87: i == 100 + 18;\nloop invariant i88: count == 100 + 18;\nloop invariant i89: i == 100 + 19;\nloop invariant i90: count == 100 + 19;\nloop invariant i91: i == 100 + 20;\nloop invariant i92: count == 100 + 20;\nloop invariant i93: i == 100 + 21;\nloop invariant i94: count == 100 + 21;\nloop invariant i95: i == 100 + 22;\nloop invariant i96: count == 100 + 22;\nloop invariant i97: i == 100 + 23;\nloop invariant i98: count == 100 + 23;\nloop invariant i99: i == 100 + 24;\nloop invariant i100: count == 100 + 24;\nloop invariant i101: i == 100 + 25;\nloop invariant i102: count == 100 + 25;\nloop invariant i103: i == 100 + 26;\nloop invariant i104: count == 100 + 26;\nloop invariant i105: i == 100 + 27;\nloop invariant i106: count == 100 + 27;\nloop invariant i107: i == 100 + 28;\nloop invariant i108: count == 100 + 28;\nloop invariant i109: i == 100 + 29;\nloop invariant i110: count == 100 + 29;\nloop invariant i111: i == 100 + 30;\nloop invariant i112: count == 100 + 30;\nloop invariant i113: i == 100 + 31;\nloop invariant i114: count == 100 + 31;\nloop invariant i115: i == 100 + 32;\nloop invariant i116: count == 100 + 32;\nloop invariant i117: i == 100 + 33;\nloop invariant i118: count == 100 + 33;\nloop invariant i119: i == 100 + 34;\nloop invariant i120: count < 0 ==> i <= 100;\nloop invariant i121: count >= 0 ==> i <= 100;\nloop invariant i122: count < 0 ==> count >= 0;\nloop invariant i123: count >= 0 ==> count >= 0;\n*/\nwhile (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 7,
        "success_count": 7,
        "failure_count": 0,
        "success_rate": 1.0
    }
}