{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (i > 0) ==> (m > 0) ==> (i <= 2*n);\nloop invariant (i > 0) ==> (m <= 0) ==> (i <= 3*n);\nloop invariant (i > 0) ==> (m > 0) ==> (i >= 2);\nloop invariant (i > 0) ==> (m <= 0) ==> (i >= 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n * 2;\nloop invariant i <= n * 3;\nloop invariant i > 0 ==> m <= 0;\nloop invariant i > 0 ==> m >= 0;\nloop invariant i > 0 ==> i == 2*i || i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 2*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 3;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i ==> i <= n * 3;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant m > 0 ==> i == 2^k;\nloop invariant m <= 0 ==> i == 3^k;\nloop invariant k >= 0;\nloop invariant k <= log(n);\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i = 2^k * i' ==> i' >= 1;\nloop invariant i = 3^k * i' ==> i' >= 1;\nloop invariant i = 2^k * i' ==> i <= n;\nloop invariant i = 3^k * i' ==> i <= n;\nloop invariant i = 2^k * i' ==> i' <= i;\nloop invariant i = 3^k * i' ==> i' <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant (m > 0) ==> (i = 2^k) for some integer k;\nloop invariant (m <= 0) ==> (i = 3^k) for some integer k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant for all i, i >= m;\nloop invariant for all i, i >= 0;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < n;\nloop invariant (m > 0 ==> i * 2^j <= n, j >= 1);\nloop invariant (m <= 0 ==> i * 3^j <= n, j >= 1);\nloop invariant 0 <= i < n;\nloop invariant (m > 0 ==> i * 2^j <= n, j >= 1);\nloop invariant (m <= 0 ==> i * 3^j <= n, j >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n; loop invariant (i == 2^k) || (i == 3^k) for some k; loop invariant (i == 2^k) ==> (m > 0); loop invariant (i == 3^k) ==> (m <= 0); loop invariant (i == 2^k) ==> (k >= 1); loop invariant (i == 3^k) ==> (k >= 1); loop invariant (i == 2^k) ==> (i <= n); loop invariant (i == 3^k) ==> (i <= n); loop invariant (i == 2^k) ==> (i > 0); loop invariant (i == 3^k) ==> (i > 0); loop invariant (i == 2^k) ==> (i == 2^(k-1) + 2^(k-2) + ... + 2^0); loop invariant (i == 3^k) ==> (i == 3^(k-1) + 3^(k-2) + ... + 3^0); loop invariant (i == 2^k) ==> (i == (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3);\n*/\n```",
            "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant (i == 2 * j) ==> (j < n && m > 0);\nloop invariant (i == 3 * j) ==> (j < n && m <= 0);\nloop invariant (i == 2 * j) ==> (j < n && m > 0) ==> (j == 1);\nloop invariant (i == 3 * j) ==> (j < n && m <= 0) ==> (j == 1);\nloop invariant (i == 2 * j) ==> (j < n && m > 0) ==> (j == 1) ==> (i == 2);\nloop invariant (i == 3 * j) ==> (j < n && m <= 0) ==> (j == 1) ==> (i == 3);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant i >= m;\nloop invariant i <= n + m;\nloop invariant i >= 1;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= m;\nloop invariant 0 < i <= n;\nloop invariant i == 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m > 0 ==> i <= 3^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m <= 0 ==> i <= 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m > 0 ==> i == 3^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m <= 0 ==> i == 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m > 0 ==> k <= log_3(i/i_0);\nloop invariant m <= 0 ==> k <= log_2(i/i_0);\nloop invariant m > 0 ==> i_0 <= i <= 3^k * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i < n;\nloop invariant i == 1 ==> m <= 0;\nloop invariant i > 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i == 1 ==> m <= 0;\nloop invariant i > 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i == 1 ==> i >= 1;\nloop invariant i == 1 ==> i < n;\nloop invariant i == 1 ==> i == 1;\nloop invariant i == 1 ==> m <= 0;\nloop invariant i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i >= 1;\nloop invariant i > 1 ==> i < n;\nloop invariant i > 1 ==> i == 1 ==> m <= 0;\nloop invariant i > 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i > 0;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (i > 0) ==> (m > 0) ==> (i <= 2*n);\nloop invariant (i > 0) ==> (m <= 0) ==> (i <= 3*n);\nloop invariant (i > 0) ==> (m > 0) ==> (i >= 2);\nloop invariant (i > 0) ==> (m <= 0) ==> (i >= 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n * 2;\nloop invariant i <= n * 3;\nloop invariant i > 0 ==> m <= 0;\nloop invariant i > 0 ==> m >= 0;\nloop invariant i > 0 ==> i == 2*i || i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 2*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 3;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i ==> i <= n * 3;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 <= i;\n\n\n\n\n\nloop invariant i7: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0;\nloop invariant i8: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0;\nloop invariant i9: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 2*i;\nloop invariant i10: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i;\nloop invariant i11: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 2;\nloop invariant i12: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 3;\nloop invariant i13: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2;\nloop invariant i14: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3;\nloop invariant i15: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i;\nloop invariant i16: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i;\nloop invariant i17: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i ==> i <= n * 2;\nloop invariant i18: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i ==> i <= n * 3;\nloop invariant i19: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i20: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i21: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i22: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\nloop invariant i23: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i24: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i25: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i26: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant m > 0 ==> i == 2^k;\nloop invariant m <= 0 ==> i == 3^k;\nloop invariant k >= 0;\nloop invariant k <= log(n);\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\nloop invariant i >= 2^k;\nloop invariant i >= 3^k;\nloop invariant i == 2^k;\nloop invariant i == 3^k;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i <= 2^k;\nloop invariant i <= 3^k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: i >= 1;\n\nloop invariant i10: i >= 0;\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i = 2^k * i' ==> i' >= 1;\nloop invariant i = 3^k * i' ==> i' >= 1;\nloop invariant i = 2^k * i' ==> i <= n;\nloop invariant i = 3^k * i' ==> i <= n;\nloop invariant i = 2^k * i' ==> i' <= i;\nloop invariant i = 3^k * i' ==> i' <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: 1 <= i <= n;\n\n\n\nloop invariant i5: i = 3^k * i' ==> i <= n;\nloop invariant i6: i = 2^k * i' ==> i' <= i;\nloop invariant i7: i = 3^k * i' ==> i' <= i;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant (m > 0) ==> (i = 2^k) for some integer k;\nloop invariant (m <= 0) ==> (i = 3^k) for some integer k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i > 0 ==> (m > 0) ==> i_0 >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant for all i, i >= m;\nloop invariant for all i, i >= 0;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\nloop invariant for all i, i >= n * 2;\nloop invariant for all i, i <= n * 3;\nloop invariant for all i, i >= n / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i < n;\nloop invariant (m > 0 ==> i * 2^j <= n, j >= 1);\nloop invariant (m <= 0 ==> i * 3^j <= n, j >= 1);\nloop invariant 0 <= i < n;\nloop invariant (m > 0 ==> i * 2^j <= n, j >= 1);\nloop invariant (m <= 0 ==> i * 3^j <= n, j >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant (i == 2^k) || (i == 3^k) for some k; loop invariant (i == 2^k) ==> (m > 0); loop invariant (i == 3^k) ==> (m <= 0); loop invariant (i == 2^k) ==> (k >= 1); loop invariant (i == 3^k) ==> (k >= 1); loop invariant (i == 2^k) ==> (i <= n); loop invariant (i == 3^k) ==> (i <= n); loop invariant (i == 2^k) ==> (i > 0); loop invariant (i == 3^k) ==> (i > 0); loop invariant (i == 2^k) ==> (i == 2^(k-1) + 2^(k-2) + ... + 2^0); loop invariant (i == 3^k) ==> (i == 3^(k-1) + 3^(k-2) + ... + 3^0); loop invariant (i == 2^k) ==> (i == (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant (i == 2 * j) ==> (j < n && m > 0);\nloop invariant (i == 3 * j) ==> (j < n && m <= 0);\nloop invariant (i == 2 * j) ==> (j < n && m > 0) ==> (j == 1);\nloop invariant (i == 3 * j) ==> (j < n && m <= 0) ==> (j == 1);\nloop invariant (i == 2 * j) ==> (j < n && m > 0) ==> (j == 1) ==> (i == 2);\nloop invariant (i == 3 * j) ==> (j < n && m <= 0) ==> (j == 1) ==> (i == 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant n > 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant i >= m;\nloop invariant i <= n + m;\nloop invariant i >= 1;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\nloop invariant i <= 3*n;\nloop invariant i >= 2*m;\nloop invariant i <= 2*n;\nloop invariant i >= 3*m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i >= 0;\n\n\n\n\n\n\nloop invariant i8: i >= 1;\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= m;\nloop invariant 0 < i <= n;\nloop invariant i == 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m > 0 ==> i <= 3^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m <= 0 ==> i <= 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m > 0 ==> i == 3^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m <= 0 ==> i == 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant m > 0 ==> k <= log_3(i/i_0);\nloop invariant m <= 0 ==> k <= log_2(i/i_0);\nloop invariant m > 0 ==> i_0 <= i <= 3^k * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant m <= 0 ==> i_0 <= i <= 2^k * i_0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i < n;\nloop invariant i == 1 ==> m <= 0;\nloop invariant i > 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i == 1 ==> m <= 0;\nloop invariant i > 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i == 1 ==> i >= 1;\nloop invariant i == 1 ==> i < n;\nloop invariant i == 1 ==> i == 1;\nloop invariant i == 1 ==> m <= 0;\nloop invariant i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i >= 1;\nloop invariant i > 1 ==> i < n;\nloop invariant i > 1 ==> i == 1 ==> m <= 0;\nloop invariant i > 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: i >= 1;\n\n\n\nloop invariant i5: i == 1 ==> i >= 1;\n\nloop invariant i7: i == 1 ==> i == 1;\n\nloop invariant i9: i > 1 ==> i >= 1;\n\nloop invariant i11: i > 1 ==> i == 1 ==> m <= 0;\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 60: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i > 0;\nloop invariant i3: (i > 0) ==> (m > 0) ==> (i <= 2*n);\nloop invariant i4: (i > 0) ==> (m <= 0) ==> (i <= 3*n);\nloop invariant i5: (i > 0) ==> (m > 0) ==> (i >= 2);\nloop invariant i6: (i > 0) ==> (m <= 0) ==> (i >= 3);\nloop invariant i7: 0 <= i;\nloop invariant i8: i <= n * 2;\nloop invariant i9: i <= n * 3;\nloop invariant i10: i > 0 ==> m <= 0;\nloop invariant i11: i > 0 ==> m >= 0;\nloop invariant i12: i > 0 ==> i == 2*i || i == 3*i;\nloop invariant i13: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0;\nloop invariant i14: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0;\nloop invariant i15: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 2*i;\nloop invariant i16: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i;\nloop invariant i17: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 2;\nloop invariant i18: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 3;\nloop invariant i19: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2;\nloop invariant i20: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3;\nloop invariant i21: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i;\nloop invariant i22: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i;\nloop invariant i23: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i ==> i <= n * 2;\nloop invariant i24: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i ==> i <= n * 3;\nloop invariant i25: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i26: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i27: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i28: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\nloop invariant i29: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i30: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i31: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i32: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\nloop invariant i33: 1 <= i <= n;\nloop invariant i34: m > 0 ==> i == 2^k;\nloop invariant i35: m <= 0 ==> i == 3^k;\nloop invariant i36: k >= 0;\nloop invariant i37: k <= log(n);\nloop invariant i38: i == 2^k;\nloop invariant i39: i == 3^k;\nloop invariant i40: i >= 1;\nloop invariant i41: i <= n;\nloop invariant i42: i >= 0;\nloop invariant i43: i <= 2^k;\nloop invariant i44: i <= 3^k;\nloop invariant i45: i >= 2^k;\nloop invariant i46: i >= 3^k;\nloop invariant i47: i = 2^k * i' ==> i' >= 1;\nloop invariant i48: i = 3^k * i' ==> i' >= 1;\nloop invariant i49: i = 2^k * i' ==> i <= n;\nloop invariant i50: i = 3^k * i' ==> i <= n;\nloop invariant i51: i = 2^k * i' ==> i' <= i;\nloop invariant i52: i = 3^k * i' ==> i' <= i;\nloop invariant i53: 0 < i <= n;\nloop invariant i54: (m > 0) ==> (i = 2^k) for some integer k;\nloop invariant i55: (m <= 0) ==> (i = 3^k) for some integer k;\nloop invariant i56: i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i57: i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i58: i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i59: i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i60: i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i61: i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i62: i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i63: i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i64: i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i65: i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i66: for all i, i >= m;\nloop invariant i67: for all i, i >= 0;\nloop invariant i68: for all i, i <= n * 3;\nloop invariant i69: for all i, i >= n / 2;\nloop invariant i70: for all i, i >= n * 2;\nloop invariant i71: 0 <= i < n;\nloop invariant i72: (m > 0 ==> i * 2^j <= n, j >= 1);\nloop invariant i73: (m <= 0 ==> i * 3^j <= n, j >= 1);\nloop invariant i74: 0 <= i <= n; loop invariant (i == 2^k) || (i == 3^k) for some k; loop invariant (i == 2^k) ==> (m > 0); loop invariant (i == 3^k) ==> (m <= 0); loop invariant (i == 2^k) ==> (k >= 1); loop invariant (i == 3^k) ==> (k >= 1); loop invariant (i == 2^k) ==> (i <= n); loop invariant (i == 3^k) ==> (i <= n); loop invariant (i == 2^k) ==> (i > 0); loop invariant (i == 3^k) ==> (i > 0); loop invariant (i == 2^k) ==> (i == 2^(k-1) + 2^(k-2) + ... + 2^0); loop invariant (i == 3^k) ==> (i == 3^(k-1) + 3^(k-2) + ... + 3^0); loop invariant (i == 2^k) ==> (i == (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3);\nloop invariant i75: (i == 2 * j) ==> (j < n && m > 0);\nloop invariant i76: (i == 3 * j) ==> (j < n && m <= 0);\nloop invariant i77: (i == 2 * j) ==> (j < n && m > 0) ==> (j == 1);\nloop invariant i78: (i == 3 * j) ==> (j < n && m <= 0) ==> (j == 1);\nloop invariant i79: (i == 2 * j) ==> (j < n && m > 0) ==> (j == 1) ==> (i == 2);\nloop invariant i80: (i == 3 * j) ==> (j < n && m <= 0) ==> (j == 1) ==> (i == 3);\nloop invariant i81: i < n;\nloop invariant i82: n > 0;\nloop invariant i83: m >= 0;\nloop invariant i84: m <= n;\nloop invariant i85: i >= m;\nloop invariant i86: i <= n + m;\nloop invariant i87: i <= 2*n;\nloop invariant i88: i >= 3*m;\nloop invariant i89: i <= 3*n;\nloop invariant i90: i >= 2*m;\nloop invariant i91: 0 <= n;\nloop invariant i92: 0 <= m;\nloop invariant i93: i == 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i94: m > 0 ==> i <= 3^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i95: m <= 0 ==> i <= 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i96: m > 0 ==> i == 3^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i97: m <= 0 ==> i == 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i98: m > 0 ==> k <= log_3(i/i_0);\nloop invariant i99: m <= 0 ==> k <= log_2(i/i_0);\nloop invariant i100: m > 0 ==> i_0 <= i <= 3^k * i_0;\nloop invariant i101: m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant i102: m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant i103: i == 1 ==> m <= 0;\nloop invariant i104: i > 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i105: i == 1 ==> i >= 1;\nloop invariant i106: i == 1 ==> i < n;\nloop invariant i107: i == 1 ==> i == 1;\nloop invariant i108: i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i109: i > 1 ==> i >= 1;\nloop invariant i110: i > 1 ==> i < n;\nloop invariant i111: i > 1 ==> i == 1 ==> m <= 0;\nloop invariant i112: i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i > 0;\nloop invariant i3: (i > 0) ==> (m > 0) ==> (i <= 2*n);\nloop invariant i4: (i > 0) ==> (m <= 0) ==> (i <= 3*n);\nloop invariant i5: (i > 0) ==> (m > 0) ==> (i >= 2);\nloop invariant i6: (i > 0) ==> (m <= 0) ==> (i >= 3);\nloop invariant i7: 0 <= i;\nloop invariant i8: i <= n * 2;\nloop invariant i9: i <= n * 3;\nloop invariant i10: i > 0 ==> m <= 0;\nloop invariant i11: i > 0 ==> m >= 0;\nloop invariant i12: i > 0 ==> i == 2*i || i == 3*i;\nloop invariant i13: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0;\nloop invariant i14: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0;\nloop invariant i15: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 2*i;\nloop invariant i16: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i;\nloop invariant i17: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 2;\nloop invariant i18: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i == 3*i ==> i <= n * 3;\nloop invariant i19: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2;\nloop invariant i20: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3;\nloop invariant i21: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i;\nloop invariant i22: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i;\nloop invariant i23: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 2*i ==> i <= n * 2;\nloop invariant i24: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 3 ==> i == 3*i ==> i <= n * 3;\nloop invariant i25: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i26: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i27: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i28: i > 0 ==> i == 2*i || i == 3*i ==> m <= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\nloop invariant i29: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i;\nloop invariant i30: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i;\nloop invariant i31: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 2*i ==> i <= n * 2;\nloop invariant i32: i > 0 ==> i == 2*i || i == 3*i ==> m >= 0 ==> i <= n * 2 ==> i == 3*i ==> i <= n * 3;\nloop invariant i33: 1 <= i <= n;\nloop invariant i34: m > 0 ==> i == 2^k;\nloop invariant i35: m <= 0 ==> i == 3^k;\nloop invariant i36: k >= 0;\nloop invariant i37: k <= log(n);\nloop invariant i38: i == 2^k;\nloop invariant i39: i == 3^k;\nloop invariant i40: i >= 1;\nloop invariant i41: i <= n;\nloop invariant i42: i >= 0;\nloop invariant i43: i <= 2^k;\nloop invariant i44: i <= 3^k;\nloop invariant i45: i >= 2^k;\nloop invariant i46: i >= 3^k;\n\n\n\nloop invariant i50: i = 3^k * i' ==> i <= n;\nloop invariant i51: i = 2^k * i' ==> i' <= i;\nloop invariant i52: i = 3^k * i' ==> i' <= i;\nloop invariant i53: 0 < i <= n;\nloop invariant i54: (m > 0) ==> (i = 2^k) for some integer k;\nloop invariant i55: (m <= 0) ==> (i = 3^k) for some integer k;\nloop invariant i56: i > 0 ==> (m <= 0) ==> i = 3^k * i_0;\nloop invariant i57: i > 0 ==> (m > 0) ==> i = 2^k * i_0;\nloop invariant i58: i > 0 ==> (m <= 0) ==> k >= 0;\nloop invariant i59: i > 0 ==> (m > 0) ==> k >= 0;\nloop invariant i60: i > 0 ==> (m <= 0) ==> i_0 >= 1;\nloop invariant i61: i > 0 ==> (m > 0) ==> i_0 >= 1;\nloop invariant i62: i > 0 ==> (m <= 0) ==> k <= log2(n/i_0);\nloop invariant i63: i > 0 ==> (m > 0) ==> k <= log3(n/i_0);\nloop invariant i64: i > 0 ==> (m <= 0) ==> i <= n;\nloop invariant i65: i > 0 ==> (m > 0) ==> i <= n;\nloop invariant i66: for all i, i >= m;\nloop invariant i67: for all i, i >= 0;\nloop invariant i68: for all i, i <= n * 3;\nloop invariant i69: for all i, i >= n / 2;\nloop invariant i70: for all i, i >= n * 2;\nloop invariant i71: 0 <= i < n;\nloop invariant i72: (m > 0 ==> i * 2^j <= n, j >= 1);\nloop invariant i73: (m <= 0 ==> i * 3^j <= n, j >= 1);\nloop invariant i74: 0 <= i <= n; loop invariant (i == 2^k) || (i == 3^k) for some k; loop invariant (i == 2^k) ==> (m > 0); loop invariant (i == 3^k) ==> (m <= 0); loop invariant (i == 2^k) ==> (k >= 1); loop invariant (i == 3^k) ==> (k >= 1); loop invariant (i == 2^k) ==> (i <= n); loop invariant (i == 3^k) ==> (i <= n); loop invariant (i == 2^k) ==> (i > 0); loop invariant (i == 3^k) ==> (i > 0); loop invariant (i == 2^k) ==> (i == 2^(k-1) + 2^(k-2) + ... + 2^0); loop invariant (i == 3^k) ==> (i == 3^(k-1) + 3^(k-2) + ... + 3^0); loop invariant (i == 2^k) ==> (i == (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3); loop invariant (i == 2^k) ==> (i == (i/2)*2 + (i/2)*2 + (i/2)*2 + ... + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2 + (i/2)*2); loop invariant (i == 3^k) ==> (i == (i/3)*3 + (i/3)*3 + (i/3)*3 + ... + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3 + (i/3)*3);\nloop invariant i75: (i == 2 * j) ==> (j < n && m > 0);\nloop invariant i76: (i == 3 * j) ==> (j < n && m <= 0);\nloop invariant i77: (i == 2 * j) ==> (j < n && m > 0) ==> (j == 1);\nloop invariant i78: (i == 3 * j) ==> (j < n && m <= 0) ==> (j == 1);\nloop invariant i79: (i == 2 * j) ==> (j < n && m > 0) ==> (j == 1) ==> (i == 2);\nloop invariant i80: (i == 3 * j) ==> (j < n && m <= 0) ==> (j == 1) ==> (i == 3);\nloop invariant i81: i < n;\nloop invariant i82: n > 0;\nloop invariant i83: m >= 0;\nloop invariant i84: m <= n;\nloop invariant i85: i >= m;\nloop invariant i86: i <= n + m;\nloop invariant i87: i <= 2*n;\nloop invariant i88: i >= 3*m;\nloop invariant i89: i <= 3*n;\nloop invariant i90: i >= 2*m;\nloop invariant i91: 0 <= n;\nloop invariant i92: 0 <= m;\nloop invariant i93: i == 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i94: m > 0 ==> i <= 3^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i95: m <= 0 ==> i <= 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i96: m > 0 ==> i == 3^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i97: m <= 0 ==> i == 2^k * i_0, where k is an integer and i_0 is the initial value of i (i = 1);\nloop invariant i98: m > 0 ==> k <= log_3(i/i_0);\nloop invariant i99: m <= 0 ==> k <= log_2(i/i_0);\nloop invariant i100: m > 0 ==> i_0 <= i <= 3^k * i_0;\nloop invariant i101: m <= 0 ==> i_0 <= i <= 2^k * i_0;\nloop invariant i102: m > 0 ==> i_0 <= i <= 2 * 3^(k-1) * i_0;\nloop invariant i103: i == 1 ==> m <= 0;\nloop invariant i104: i > 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i105: i == 1 ==> i >= 1;\nloop invariant i106: i == 1 ==> i < n;\nloop invariant i107: i == 1 ==> i == 1;\nloop invariant i108: i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\nloop invariant i109: i > 1 ==> i >= 1;\nloop invariant i110: i > 1 ==> i < n;\nloop invariant i111: i > 1 ==> i == 1 ==> m <= 0;\nloop invariant i112: i > 1 ==> i == 1 ==> (m > 0 ==> i == 2 * i_0) && (m <= 0 ==> i == 3 * i_0);\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 37,
        "success_count": 32,
        "failure_count": 5,
        "success_rate": 0.8648648648648649
    }
}