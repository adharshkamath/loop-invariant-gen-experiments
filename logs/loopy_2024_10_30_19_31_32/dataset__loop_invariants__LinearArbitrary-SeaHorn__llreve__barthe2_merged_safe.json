{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\twhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i1 <= n ==> x1 = (i1 * (i1 + 1)) / 2;\nloop invariant i2 <= n ==> x2 = (i2 * (i2 + 1)) / 2;\nloop invariant i1 + i2 <= n ==> x1 + x2 = (i1 * (i1 + 1) + i2 * (i2 + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 + i1 <= x2;\nloop invariant x1 + i1 == x1 + i1;\nloop invariant x2 == x2 + i2;\n*/\n```",
            "```\n/*@\nloop invariant x1 == i1 * (i1 + 1) / 2;\nloop invariant x2 == i2 * (i2 + 1) / 2;\nloop invariant i1 <= n;\nloop invariant i2 <= n;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 + i2 >= 0;\nloop invariant i1 + i2 <= 2 * n;\nloop invariant i1 + i2 >= 1;\nloop invariant i1 + i2 <= 2 * n + 1;\nloop invariant i1 + i2 >= 2;\nloop invariant i1 + i2 <= 2 * n + 2;\nloop invariant i1 + i2 >= 3;\nloop invariant i1 + i2 <= 2 * n + 3;\nloop invariant i1 + i2 >= 4;\nloop invariant i1 + i2 <= 2 * n + 4;\nloop invariant i1 + i2 >= 5;\nloop invariant i1 + i2 <= 2 * n + 5;\nloop invariant i1 + i2 >= 6;\nloop invariant i1 + i2 <= 2 * n + 6;\nloop invariant i1 + i2 >= 7;\nloop invariant i1 + i2 <= 2 * n + 7;\nloop invariant i1 + i2 >= 8;\nloop invariant i1 + i2 <= 2 * n + 8;\nloop invariant i1 + i2 >= 9;\nloop invariant i1 + i2 <= 2 * n + 9;\nloop invariant i1 + i2 >= 10;\nloop invariant i1 + i2 <= 2 * n + 10;\nloop invariant i1 + i2 >= 11;\nloop invariant i1 + i2 <= 2 * n + 11;\nloop invariant i1 + i2 >= 12;\nloop invariant i1 + i2 <= 2 * n + 12;\nloop invariant i1 + i2 >= 13;\nloop invariant i1 + i2 <= 2 * n + 13;\nloop invariant i1 + i2 >= 14;\nloop invariant i1 + i2 <= 2 * n + 14;\nloop invariant i1 + i2 >= 15;\nloop invariant i1 + i2 <= 2 * n + 15;\nloop invariant i1 + i2 >= 16;\nloop invariant i1 + i2 <= 2 * n + 16;\nloop invariant i1 + i2 >= 17;\nloop invariant i1 + i2 <= 2 * n + 17;\nloop invariant i1 + i2 >= 18;\nloop invariant i1 + i2 <= 2 * n + 18;\nloop invariant i1 + i2 >= 19;\nloop invariant i1 + i2 <= 2 * n + 19;\nloop invariant i1 + i2 >= 20;\nloop invariant i1 + i2 <= 2 * n + 20;\nloop invariant i1 + i2 >= 21;\nloop invariant i1 + i2 <= 2 * n + 21;\nloop invariant i1 + i2 >= 22;\nloop invariant i1 + i2 <= 2 * n + 22;\nloop invariant i1 + i2 >= 23;\nloop invariant i1 + i2 <= 2 * n + 23;\nloop invariant i1 + i2 >= 24;\nloop invariant i1 + i2 <= 2 * n + 24;\nloop invariant i1 + i2 >= 25;\nloop invariant i1 + i2 <= 2 * n + 25;\nloop invariant i1 + i2 >= 26;\nloop invariant i1 + i2 <= 2 * n + 26;\nloop invariant i1 + i2 >= 27;\nloop invariant i1 + i2 <= 2 * n + 27;\nloop invariant i1 + i2 >= 28;\nloop invariant i1 + i2 <= 2 * n + 28;\nloop invariant i1 + i2 >= 29;\nloop invariant i1 + i2 <= 2 * n + 29;\nloop invariant i1 + i2 >= 30;\nloop invariant i1 + i2 <= 2 * n + 30;\nloop invariant i1 + i2 >= 31;\nloop invariant i1 + i2 <= 2 * n + 31;\nloop invariant i1 + i2 >= 32;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 == (i1 * (i1 - 1) / 2);\nloop invariant x2 == (i2 * (i2 - 1) / 2);\nloop invariant x1 <= x2;\n*/\n```",
            "```\n/*@\nloop invariant x1 == 0;\nloop invariant x2 == 0;\nloop invariant i1 == 0;\nloop invariant i2 == 1;\nloop invariant i1 <= n;\nloop invariant i2 <= n;\nloop invariant x1 == (i1 * (i1 + 1) / 2);\nloop invariant x2 == (i2 * (i2 + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 <= n;\nloop invariant i2 <= n;\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant i1 >= n || i2 >= n;\nloop invariant x1 <= x2 + i1;\nloop invariant x2 <= x1 + i2;\nloop invariant x1 == (i1 * (i1 + 1)) / 2;\nloop invariant x2 == (i2 * (i2 + 1)) / 2;\nloop invariant x1 + i1 == x2;\nloop invariant x2 + i2 == x1 + i1;\nloop invariant x1 >= 0 && x1 <= n * (n + 1) / 2;\nloop invariant x2 >= 0 && x2 <= n * (n + 1) / 2;\nloop invariant x1 + i1 >= 0 && x1 + i1 <= n * (n + 1) / 2;\nloop invariant x2 + i2 >= 0 && x2 + i2 <= n * (n + 1) / 2;\nloop invariant x1 + i1 == x2 + i2;\nloop invariant x1 == x2 + i2;\nloop invariant x2 == x1 + i1;\nloop invariant x1 == x2 + i2 ==> x2 <= x1;\nloop invariant x2 == x1 + i1 ==> x1 <= x2;\nloop invariant (i1 <= n ==> x1 == (i1 * (i1 + 1)) / 2);\nloop invariant (i2 <= n ==> x2 == (i2 * (i2 + 1)) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n + 1;\nloop invariant 0 <= i2 <= n + 1;\nloop invariant x1 == ((i1 * (i1 - 1)) / 2);\nloop invariant x2 == ((i2 * (i2 - 1)) / 2);\nloop invariant x2 <= x1 + i1;\nloop invariant x1 <= x2 + i2;\nloop invariant ((i1 <= n) ==> (x1 <= x2));\nloop invariant ((i2 <= n) ==> (x2 <= x1));\nloop invariant ((i1 > n) ==> (x1 >= x2));\nloop invariant ((i2 > n) ==> (x2 >= x1));\nloop invariant (i1 <= n) ==> (i2 <= n);\nloop invariant (i2 <= n) ==> (i1 <= n);\nloop invariant (i1 > n) ==> ((i2 > n) && (x2 == x1 + i1));\nloop invariant (i2 > n) ==> ((i1 > n) && (x1 == x2 + i2));\nloop invariant ((i1 == n) && (i2 == n)) ==> (x1 == x2);\nloop invariant ((i1 == n) && (i2 == n)) ==> (x2 == x1);\nloop invariant ((i1 == n) && (i2 == n)) ==> (x2 == x1 + i1);\nloop invariant ((i1 == n) && (i2 == n)) ==> (x1 == x2 + i2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n + 1;\nloop invariant 0 <= i2 <= n + 1;\nloop invariant x1 == sum(i1);\nloop invariant x2 == sum(i2);\nloop invariant x2 == x1 + i1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n && i1 <= i2;\nloop invariant x1 >= i1 * (i1 - 1) / 2 && x2 >= i2 * (i2 - 1) / 2;\nloop invariant x1 + x2 >= i1 * (i1 - 1) / 2 + i2 * (i2 - 1) / 2;\nloop invariant x1 <= x2 + i1 * (i1 - 1) / 2;\nloop invariant x2 <= x1 + i2 * (i2 - 1) / 2;\nloop invariant x1 + x2 >= i1 * (i1 - 1) / 2 + i2 * (i2 - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant i1 >= i2 ==> (x2==x1+i1);\nloop invariant i1 < i2 ==> (x2==x1+i2);\nloop invariant i1 == i2 ==> (x2==x1+i2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 == (i1 * (i1 + 1)) / 2;\nloop invariant x2 == (i2 * (i2 + 1)) / 2;\nloop invariant x1 <= x2;\nloop invariant x2 <= x1 + i1;\nloop invariant x2 == x1 + i1 ==> i2 >= i1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant x2 == x1 + i1;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant x2 == x1 + i1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= x1 <= i1 * (i1 + 1) / 2;\nloop invariant 0 <= x2 <= i2 * (i2 + 1) / 2;\nloop invariant x2 == x1 + i1;\nloop invariant i1 <= n ==> x1 == n * (n + 1) / 2;\nloop invariant i2 <= n ==> x2 == n * (n + 1) / 2;\nloop invariant i1 > n ==> x1 == i1 * (i1 + 1) / 2;\nloop invariant i2 > n ==> x2 == i2 * (i2 + 1) / 2;\nloop invariant i1 >= 0 && i2 >= 0;\nloop invariant i1 <= n && i2 <= n;\nloop invariant x1 >= 0 && x2 >= 0;\nloop invariant x1 <= i1 * (i1 + 1) / 2 && x2 <= i2 * (i2 + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n;\nloop invariant x1 == (x1 + i1) + i1;\nloop invariant x2 == (x2 + i2) + i2;\nloop invariant x1 <= x2;\nloop invariant x1 + x2 == (x1 + i1) + (x2 + i2);\n*/\n```",
            "```\n/*@\nloop invariant i2 <= i1;\nloop invariant i2 <= n;\nloop invariant i1 <= n;\nloop invariant x2 <= x1 + i1;\nloop invariant x2 <= x1 + n;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 1;\nloop invariant i1 >= i2;\nloop invariant x1 >= i1 * (i1 - 1) / 2;\nloop invariant x2 >= i2 * (i2 - 1) / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1 <= n ==> x1 = (i1 * (i1 + 1)) / 2;\nloop invariant i2 <= n ==> x2 = (i2 * (i2 + 1)) / 2;\nloop invariant i1 + i2 <= n ==> x1 + x2 = (i1 * (i1 + 1) + i2 * (i2 + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 + i1 <= x2;\nloop invariant x1 + i1 == x1 + i1;\nloop invariant x2 == x2 + i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: x1 + i1 <= x2;\nloop invariant i4: x1 + i1 == x1 + i1;\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 35,
                "annotations": "```\n/*@\nloop invariant x1 == i1 * (i1 + 1) / 2;\nloop invariant x2 == i2 * (i2 + 1) / 2;\nloop invariant i1 <= n;\nloop invariant i2 <= n;\nloop invariant i1 >= 0;\nloop invariant i2 >= 0;\nloop invariant i1 + i2 >= 0;\nloop invariant i1 + i2 <= 2 * n;\nloop invariant i1 + i2 >= 1;\nloop invariant i1 + i2 <= 2 * n + 1;\nloop invariant i1 + i2 >= 2;\nloop invariant i1 + i2 <= 2 * n + 2;\nloop invariant i1 + i2 >= 3;\nloop invariant i1 + i2 <= 2 * n + 3;\nloop invariant i1 + i2 >= 4;\nloop invariant i1 + i2 <= 2 * n + 4;\nloop invariant i1 + i2 >= 5;\nloop invariant i1 + i2 <= 2 * n + 5;\nloop invariant i1 + i2 >= 6;\nloop invariant i1 + i2 <= 2 * n + 6;\nloop invariant i1 + i2 >= 7;\nloop invariant i1 + i2 <= 2 * n + 7;\nloop invariant i1 + i2 >= 8;\nloop invariant i1 + i2 <= 2 * n + 8;\nloop invariant i1 + i2 >= 9;\nloop invariant i1 + i2 <= 2 * n + 9;\nloop invariant i1 + i2 >= 10;\nloop invariant i1 + i2 <= 2 * n + 10;\nloop invariant i1 + i2 >= 11;\nloop invariant i1 + i2 <= 2 * n + 11;\nloop invariant i1 + i2 >= 12;\nloop invariant i1 + i2 <= 2 * n + 12;\nloop invariant i1 + i2 >= 13;\nloop invariant i1 + i2 <= 2 * n + 13;\nloop invariant i1 + i2 >= 14;\nloop invariant i1 + i2 <= 2 * n + 14;\nloop invariant i1 + i2 >= 15;\nloop invariant i1 + i2 <= 2 * n + 15;\nloop invariant i1 + i2 >= 16;\nloop invariant i1 + i2 <= 2 * n + 16;\nloop invariant i1 + i2 >= 17;\nloop invariant i1 + i2 <= 2 * n + 17;\nloop invariant i1 + i2 >= 18;\nloop invariant i1 + i2 <= 2 * n + 18;\nloop invariant i1 + i2 >= 19;\nloop invariant i1 + i2 <= 2 * n + 19;\nloop invariant i1 + i2 >= 20;\nloop invariant i1 + i2 <= 2 * n + 20;\nloop invariant i1 + i2 >= 21;\nloop invariant i1 + i2 <= 2 * n + 21;\nloop invariant i1 + i2 >= 22;\nloop invariant i1 + i2 <= 2 * n + 22;\nloop invariant i1 + i2 >= 23;\nloop invariant i1 + i2 <= 2 * n + 23;\nloop invariant i1 + i2 >= 24;\nloop invariant i1 + i2 <= 2 * n + 24;\nloop invariant i1 + i2 >= 25;\nloop invariant i1 + i2 <= 2 * n + 25;\nloop invariant i1 + i2 >= 26;\nloop invariant i1 + i2 <= 2 * n + 26;\nloop invariant i1 + i2 >= 27;\nloop invariant i1 + i2 <= 2 * n + 27;\nloop invariant i1 + i2 >= 28;\nloop invariant i1 + i2 <= 2 * n + 28;\nloop invariant i1 + i2 >= 29;\nloop invariant i1 + i2 <= 2 * n + 29;\nloop invariant i1 + i2 >= 30;\nloop invariant i1 + i2 <= 2 * n + 30;\nloop invariant i1 + i2 >= 31;\nloop invariant i1 + i2 <= 2 * n + 31;\nloop invariant i1 + i2 >= 32;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\nloop invariant i5: i1 >= 0;\nloop invariant i6: i2 >= 0;\nloop invariant i7: i1 + i2 >= 0;\n\nloop invariant i9: i1 + i2 >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 == (i1 * (i1 - 1) / 2);\nloop invariant x2 == (i2 * (i2 - 1) / 2);\nloop invariant x1 <= x2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: x1 == (i1 * (i1 - 1) / 2);\nloop invariant i4: x2 == (i2 * (i2 - 1) / 2);\nloop invariant i5: x1 <= x2;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x1 == 0;\nloop invariant x2 == 0;\nloop invariant i1 == 0;\nloop invariant i2 == 1;\nloop invariant i1 <= n;\nloop invariant i2 <= n;\nloop invariant x1 == (i1 * (i1 + 1) / 2);\nloop invariant x2 == (i2 * (i2 + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 <= n;\nloop invariant i2 <= n;\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\nloop invariant i1 == n + 1;\nloop invariant i2 == n + 1;\nloop invariant x1 == (n * (n + 1) / 2);\nloop invariant x2 == (n * (n + 1) / 2);\nloop invariant x2 == (x1 + i1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\n\n\n\n\nloop invariant i9: x2 == (x1 + i1);\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant i1 >= n || i2 >= n;\nloop invariant x1 <= x2 + i1;\nloop invariant x2 <= x1 + i2;\nloop invariant x1 == (i1 * (i1 + 1)) / 2;\nloop invariant x2 == (i2 * (i2 + 1)) / 2;\nloop invariant x1 + i1 == x2;\nloop invariant x2 + i2 == x1 + i1;\nloop invariant x1 >= 0 && x1 <= n * (n + 1) / 2;\nloop invariant x2 >= 0 && x2 <= n * (n + 1) / 2;\nloop invariant x1 + i1 >= 0 && x1 + i1 <= n * (n + 1) / 2;\nloop invariant x2 + i2 >= 0 && x2 + i2 <= n * (n + 1) / 2;\nloop invariant x1 + i1 == x2 + i2;\nloop invariant x1 == x2 + i2;\nloop invariant x2 == x1 + i1;\nloop invariant x1 == x2 + i2 ==> x2 <= x1;\nloop invariant x2 == x1 + i1 ==> x1 <= x2;\nloop invariant (i1 <= n ==> x1 == (i1 * (i1 + 1)) / 2);\nloop invariant (i2 <= n ==> x2 == (i2 * (i2 + 1)) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\nloop invariant i4: x1 <= x2 + i1;\nloop invariant i5: x2 <= x1 + i2;\n\n\nloop invariant i8: x1 + i1 == x2;\n\n\n\n\n\n\n\nloop invariant i16: x2 == x1 + i1;\nloop invariant i17: x1 == x2 + i2 ==> x2 <= x1;\nloop invariant i18: x2 == x1 + i1 ==> x1 <= x2;\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n + 1;\nloop invariant 0 <= i2 <= n + 1;\nloop invariant x1 == ((i1 * (i1 - 1)) / 2);\nloop invariant x2 == ((i2 * (i2 - 1)) / 2);\nloop invariant x2 <= x1 + i1;\nloop invariant x1 <= x2 + i2;\nloop invariant ((i1 <= n) ==> (x1 <= x2));\nloop invariant ((i2 <= n) ==> (x2 <= x1));\nloop invariant ((i1 > n) ==> (x1 >= x2));\nloop invariant ((i2 > n) ==> (x2 >= x1));\nloop invariant (i1 <= n) ==> (i2 <= n);\nloop invariant (i2 <= n) ==> (i1 <= n);\nloop invariant (i1 > n) ==> ((i2 > n) && (x2 == x1 + i1));\nloop invariant (i2 > n) ==> ((i1 > n) && (x1 == x2 + i2));\nloop invariant ((i1 == n) && (i2 == n)) ==> (x1 == x2);\nloop invariant ((i1 == n) && (i2 == n)) ==> (x2 == x1);\nloop invariant ((i1 == n) && (i2 == n)) ==> (x2 == x1 + i1);\nloop invariant ((i1 == n) && (i2 == n)) ==> (x1 == x2 + i2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: x1 == ((i1 * (i1 - 1)) / 2);\nloop invariant i4: x2 == ((i2 * (i2 - 1)) / 2);\nloop invariant i5: x2 <= x1 + i1;\nloop invariant i6: x1 <= x2 + i2;\nloop invariant i7: ((i1 <= n) ==> (x1 <= x2));\n\nloop invariant i9: ((i1 > n) ==> (x1 >= x2));\nloop invariant i10: ((i2 > n) ==> (x2 >= x1));\n\nloop invariant i12: (i2 <= n) ==> (i1 <= n);\nloop invariant i13: (i1 > n) ==> ((i2 > n) && (x2 == x1 + i1));\n\nloop invariant i15: ((i1 == n) && (i2 == n)) ==> (x1 == x2);\nloop invariant i16: ((i1 == n) && (i2 == n)) ==> (x2 == x1);\nloop invariant i17: ((i1 == n) && (i2 == n)) ==> (x2 == x1 + i1);\nloop invariant i18: ((i1 == n) && (i2 == n)) ==> (x1 == x2 + i2);\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n + 1;\nloop invariant 0 <= i2 <= n + 1;\nloop invariant x1 == sum(i1);\nloop invariant x2 == sum(i2);\nloop invariant x2 == x1 + i1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\nloop invariant i5: x2 == x1 + i1;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n && i1 <= i2;\nloop invariant x1 >= i1 * (i1 - 1) / 2 && x2 >= i2 * (i2 - 1) / 2;\nloop invariant x1 + x2 >= i1 * (i1 - 1) / 2 + i2 * (i2 - 1) / 2;\nloop invariant x1 <= x2 + i1 * (i1 - 1) / 2;\nloop invariant x2 <= x1 + i2 * (i2 - 1) / 2;\nloop invariant x1 + x2 >= i1 * (i1 - 1) / 2 + i2 * (i2 - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\nloop invariant i2: x1 >= i1 * (i1 - 1) / 2 && x2 >= i2 * (i2 - 1) / 2;\nloop invariant i3: x1 + x2 >= i1 * (i1 - 1) / 2 + i2 * (i2 - 1) / 2;\n\nloop invariant i5: x2 <= x1 + i2 * (i2 - 1) / 2;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant i1 >= i2 ==> (x2==x1+i1);\nloop invariant i1 < i2 ==> (x2==x1+i2);\nloop invariant i1 == i2 ==> (x2==x1+i2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\nloop invariant i5: i1 >= i2 ==> (x2==x1+i1);\n\nloop invariant i7: i1 == i2 ==> (x2==x1+i2);\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant x1 == (i1 * (i1 + 1)) / 2;\nloop invariant x2 == (i2 * (i2 + 1)) / 2;\nloop invariant x1 <= x2;\nloop invariant x2 <= x1 + i1;\nloop invariant x2 == x1 + i1 ==> i2 >= i1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\nloop invariant i5: x1 <= x2;\nloop invariant i6: x2 <= x1 + i1;\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant x2 == x1 + i1;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n + 1;\nloop invariant 0 <= x1 <= i1;\nloop invariant 0 <= x2 <= i2;\nloop invariant x2 == x1 + i1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\nloop invariant i5: x2 == x1 + i1;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 0 <= i2 <= n;\nloop invariant 0 <= x1 <= i1 * (i1 + 1) / 2;\nloop invariant 0 <= x2 <= i2 * (i2 + 1) / 2;\nloop invariant x2 == x1 + i1;\nloop invariant i1 <= n ==> x1 == n * (n + 1) / 2;\nloop invariant i2 <= n ==> x2 == n * (n + 1) / 2;\nloop invariant i1 > n ==> x1 == i1 * (i1 + 1) / 2;\nloop invariant i2 > n ==> x2 == i2 * (i2 + 1) / 2;\nloop invariant i1 >= 0 && i2 >= 0;\nloop invariant i1 <= n && i2 <= n;\nloop invariant x1 >= 0 && x2 >= 0;\nloop invariant x1 <= i1 * (i1 + 1) / 2 && x2 <= i2 * (i2 + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\nloop invariant i3: 0 <= x1 <= i1 * (i1 + 1) / 2;\nloop invariant i4: 0 <= x2 <= i2 * (i2 + 1) / 2;\nloop invariant i5: x2 == x1 + i1;\n\n\nloop invariant i8: i1 > n ==> x1 == i1 * (i1 + 1) / 2;\n\nloop invariant i10: i1 >= 0 && i2 >= 0;\n\nloop invariant i12: x1 >= 0 && x2 >= 0;\nloop invariant i13: x1 <= i1 * (i1 + 1) / 2 && x2 <= i2 * (i2 + 1) / 2;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i1 <= n;\nloop invariant 1 <= i2 <= n;\nloop invariant x1 == (x1 + i1) + i1;\nloop invariant x2 == (x2 + i2) + i2;\nloop invariant x1 <= x2;\nloop invariant x1 + x2 == (x1 + i1) + (x2 + i2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\n\n\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i2 <= i1;\nloop invariant i2 <= n;\nloop invariant i1 <= n;\nloop invariant x2 <= x1 + i1;\nloop invariant x2 <= x1 + n;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant i1 >= 0;\nloop invariant i2 >= 1;\nloop invariant i1 >= i2;\nloop invariant x1 >= i1 * (i1 - 1) / 2;\nloop invariant x2 >= i2 * (i2 - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\nloop invariant i4: x2 <= x1 + i1;\n\nloop invariant i6: x1 >= 0;\nloop invariant i7: x2 >= 0;\nloop invariant i8: i1 >= 0;\nloop invariant i9: i2 >= 1;\n\nloop invariant i11: x1 >= i1 * (i1 - 1) / 2;\nloop invariant i12: x2 >= i2 * (i2 - 1) / 2;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\nloop invariant i1: i1 <= n ==> x1 = (i1 * (i1 + 1)) / 2;\nloop invariant i2: i2 <= n ==> x2 = (i2 * (i2 + 1)) / 2;\nloop invariant i3: i1 + i2 <= n ==> x1 + x2 = (i1 * (i1 + 1) + i2 * (i2 + 1)) / 2;\nloop invariant i4: 0 <= i1 <= n;\nloop invariant i5: 0 <= i2 <= n;\nloop invariant i6: x1 + i1 <= x2;\nloop invariant i7: x1 + i1 == x1 + i1;\nloop invariant i8: x2 == x2 + i2;\nloop invariant i9: x1 == i1 * (i1 + 1) / 2;\nloop invariant i10: x2 == i2 * (i2 + 1) / 2;\nloop invariant i11: i1 <= n;\nloop invariant i12: i2 <= n;\nloop invariant i13: i1 >= 0;\nloop invariant i14: i2 >= 0;\nloop invariant i15: i1 + i2 >= 0;\nloop invariant i16: i1 + i2 <= 2 * n;\nloop invariant i17: i1 + i2 >= 1;\nloop invariant i18: i1 + i2 <= 2 * n + 1;\nloop invariant i19: i1 + i2 >= 2;\nloop invariant i20: i1 + i2 <= 2 * n + 2;\nloop invariant i21: i1 + i2 >= 3;\nloop invariant i22: i1 + i2 <= 2 * n + 3;\nloop invariant i23: i1 + i2 >= 4;\nloop invariant i24: i1 + i2 <= 2 * n + 4;\nloop invariant i25: i1 + i2 >= 5;\nloop invariant i26: i1 + i2 <= 2 * n + 5;\nloop invariant i27: i1 + i2 >= 6;\nloop invariant i28: i1 + i2 <= 2 * n + 6;\nloop invariant i29: i1 + i2 >= 7;\nloop invariant i30: i1 + i2 <= 2 * n + 7;\nloop invariant i31: i1 + i2 >= 8;\nloop invariant i32: i1 + i2 <= 2 * n + 8;\nloop invariant i33: i1 + i2 >= 9;\nloop invariant i34: i1 + i2 <= 2 * n + 9;\nloop invariant i35: i1 + i2 >= 10;\nloop invariant i36: i1 + i2 <= 2 * n + 10;\nloop invariant i37: i1 + i2 >= 11;\nloop invariant i38: i1 + i2 <= 2 * n + 11;\nloop invariant i39: i1 + i2 >= 12;\nloop invariant i40: i1 + i2 <= 2 * n + 12;\nloop invariant i41: i1 + i2 >= 13;\nloop invariant i42: i1 + i2 <= 2 * n + 13;\nloop invariant i43: i1 + i2 >= 14;\nloop invariant i44: i1 + i2 <= 2 * n + 14;\nloop invariant i45: i1 + i2 >= 15;\nloop invariant i46: i1 + i2 <= 2 * n + 15;\nloop invariant i47: i1 + i2 >= 16;\nloop invariant i48: i1 + i2 <= 2 * n + 16;\nloop invariant i49: i1 + i2 >= 17;\nloop invariant i50: i1 + i2 <= 2 * n + 17;\nloop invariant i51: i1 + i2 >= 18;\nloop invariant i52: i1 + i2 <= 2 * n + 18;\nloop invariant i53: i1 + i2 >= 19;\nloop invariant i54: i1 + i2 <= 2 * n + 19;\nloop invariant i55: i1 + i2 >= 20;\nloop invariant i56: i1 + i2 <= 2 * n + 20;\nloop invariant i57: i1 + i2 >= 21;\nloop invariant i58: i1 + i2 <= 2 * n + 21;\nloop invariant i59: i1 + i2 >= 22;\nloop invariant i60: i1 + i2 <= 2 * n + 22;\nloop invariant i61: i1 + i2 >= 23;\nloop invariant i62: i1 + i2 <= 2 * n + 23;\nloop invariant i63: i1 + i2 >= 24;\nloop invariant i64: i1 + i2 <= 2 * n + 24;\nloop invariant i65: i1 + i2 >= 25;\nloop invariant i66: i1 + i2 <= 2 * n + 25;\nloop invariant i67: i1 + i2 >= 26;\nloop invariant i68: i1 + i2 <= 2 * n + 26;\nloop invariant i69: i1 + i2 >= 27;\nloop invariant i70: i1 + i2 <= 2 * n + 27;\nloop invariant i71: i1 + i2 >= 28;\nloop invariant i72: i1 + i2 <= 2 * n + 28;\nloop invariant i73: i1 + i2 >= 29;\nloop invariant i74: i1 + i2 <= 2 * n + 29;\nloop invariant i75: i1 + i2 >= 30;\nloop invariant i76: i1 + i2 <= 2 * n + 30;\nloop invariant i77: i1 + i2 >= 31;\nloop invariant i78: i1 + i2 <= 2 * n + 31;\nloop invariant i79: i1 + i2 >= 32;\nloop invariant i80: x1 == (i1 * (i1 - 1) / 2);\nloop invariant i81: x2 == (i2 * (i2 - 1) / 2);\nloop invariant i82: x1 <= x2;\nloop invariant i83: x1 == 0;\nloop invariant i84: x2 == 0;\nloop invariant i85: i1 == 0;\nloop invariant i86: i2 == 1;\nloop invariant i87: x1 == (i1 * (i1 + 1) / 2);\nloop invariant i88: x2 == (i2 * (i2 + 1) / 2);\nloop invariant i89: x2 == (x1 + i1);\nloop invariant i90: i1 == n + 1;\nloop invariant i91: i2 == n + 1;\nloop invariant i92: x1 == (n * (n + 1) / 2);\nloop invariant i93: x2 == (n * (n + 1) / 2);\nloop invariant i94: i1 >= n || i2 >= n;\nloop invariant i95: x1 <= x2 + i1;\nloop invariant i96: x2 <= x1 + i2;\nloop invariant i97: x1 == (i1 * (i1 + 1)) / 2;\nloop invariant i98: x2 == (i2 * (i2 + 1)) / 2;\nloop invariant i99: x1 + i1 == x2;\nloop invariant i100: x2 + i2 == x1 + i1;\nloop invariant i101: x1 >= 0 && x1 <= n * (n + 1) / 2;\nloop invariant i102: x2 >= 0 && x2 <= n * (n + 1) / 2;\nloop invariant i103: x1 + i1 >= 0 && x1 + i1 <= n * (n + 1) / 2;\nloop invariant i104: x2 + i2 >= 0 && x2 + i2 <= n * (n + 1) / 2;\nloop invariant i105: x1 + i1 == x2 + i2;\nloop invariant i106: x1 == x2 + i2;\nloop invariant i107: x2 == x1 + i1;\nloop invariant i108: x1 == x2 + i2 ==> x2 <= x1;\nloop invariant i109: x2 == x1 + i1 ==> x1 <= x2;\nloop invariant i110: (i1 <= n ==> x1 == (i1 * (i1 + 1)) / 2);\nloop invariant i111: (i2 <= n ==> x2 == (i2 * (i2 + 1)) / 2);\nloop invariant i112: 0 <= i1 <= n + 1;\nloop invariant i113: 0 <= i2 <= n + 1;\nloop invariant i114: x1 == ((i1 * (i1 - 1)) / 2);\nloop invariant i115: x2 == ((i2 * (i2 - 1)) / 2);\nloop invariant i116: x2 <= x1 + i1;\nloop invariant i117: x1 <= x2 + i2;\nloop invariant i118: ((i1 <= n) ==> (x1 <= x2));\nloop invariant i119: ((i2 <= n) ==> (x2 <= x1));\nloop invariant i120: ((i1 > n) ==> (x1 >= x2));\nloop invariant i121: ((i2 > n) ==> (x2 >= x1));\nloop invariant i122: (i1 <= n) ==> (i2 <= n);\nloop invariant i123: (i2 <= n) ==> (i1 <= n);\nloop invariant i124: (i1 > n) ==> ((i2 > n) && (x2 == x1 + i1));\nloop invariant i125: (i2 > n) ==> ((i1 > n) && (x1 == x2 + i2));\nloop invariant i126: ((i1 == n) && (i2 == n)) ==> (x1 == x2);\nloop invariant i127: ((i1 == n) && (i2 == n)) ==> (x2 == x1);\nloop invariant i128: ((i1 == n) && (i2 == n)) ==> (x2 == x1 + i1);\nloop invariant i129: ((i1 == n) && (i2 == n)) ==> (x1 == x2 + i2);\nloop invariant i130: x1 == sum(i1);\nloop invariant i131: x2 == sum(i2);\nloop invariant i132: 0 <= i1 <= n && i1 <= i2;\nloop invariant i133: x1 >= i1 * (i1 - 1) / 2 && x2 >= i2 * (i2 - 1) / 2;\nloop invariant i134: x1 + x2 >= i1 * (i1 - 1) / 2 + i2 * (i2 - 1) / 2;\nloop invariant i135: x1 <= x2 + i1 * (i1 - 1) / 2;\nloop invariant i136: x2 <= x1 + i2 * (i2 - 1) / 2;\nloop invariant i137: 1 <= i2 <= n;\nloop invariant i138: x1 >= 0;\nloop invariant i139: x2 >= 0;\nloop invariant i140: i1 >= i2 ==> (x2==x1+i1);\nloop invariant i141: i1 < i2 ==> (x2==x1+i2);\nloop invariant i142: i1 == i2 ==> (x2==x1+i2);\nloop invariant i143: x2 == x1 + i1 ==> i2 >= i1;\nloop invariant i144: 1 <= i2 <= n + 1;\nloop invariant i145: 0 <= x1 <= i1;\nloop invariant i146: 0 <= x2 <= i2;\nloop invariant i147: 0 <= x1 <= i1 * (i1 + 1) / 2;\nloop invariant i148: 0 <= x2 <= i2 * (i2 + 1) / 2;\nloop invariant i149: i1 <= n ==> x1 == n * (n + 1) / 2;\nloop invariant i150: i2 <= n ==> x2 == n * (n + 1) / 2;\nloop invariant i151: i1 > n ==> x1 == i1 * (i1 + 1) / 2;\nloop invariant i152: i2 > n ==> x2 == i2 * (i2 + 1) / 2;\nloop invariant i153: i1 >= 0 && i2 >= 0;\nloop invariant i154: i1 <= n && i2 <= n;\nloop invariant i155: x1 >= 0 && x2 >= 0;\nloop invariant i156: x1 <= i1 * (i1 + 1) / 2 && x2 <= i2 * (i2 + 1) / 2;\nloop invariant i157: x1 == (x1 + i1) + i1;\nloop invariant i158: x2 == (x2 + i2) + i2;\nloop invariant i159: x1 + x2 == (x1 + i1) + (x2 + i2);\nloop invariant i160: i2 <= i1;\nloop invariant i161: x2 <= x1 + n;\nloop invariant i162: i2 >= 1;\nloop invariant i163: i1 >= i2;\nloop invariant i164: x1 >= i1 * (i1 - 1) / 2;\nloop invariant i165: x2 >= i2 * (i2 - 1) / 2;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 65,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\t/*@\n\n\n\n\n\nloop invariant i6: x1 + i1 <= x2;\nloop invariant i7: x1 + i1 == x1 + i1;\n\n\n\n\n\nloop invariant i13: i1 >= 0;\nloop invariant i14: i2 >= 0;\nloop invariant i15: i1 + i2 >= 0;\n\nloop invariant i17: i1 + i2 >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i80: x1 == (i1 * (i1 - 1) / 2);\nloop invariant i81: x2 == (i2 * (i2 - 1) / 2);\nloop invariant i82: x1 <= x2;\n\n\n\n\n\n\nloop invariant i89: x2 == (x1 + i1);\n\n\n\n\n\nloop invariant i95: x1 <= x2 + i1;\nloop invariant i96: x2 <= x1 + i2;\n\n\nloop invariant i99: x1 + i1 == x2;\n\nloop invariant i101: x1 >= 0 && x1 <= n * (n + 1) / 2;\n\nloop invariant i103: x1 + i1 >= 0 && x1 + i1 <= n * (n + 1) / 2;\n\n\n\nloop invariant i107: x2 == x1 + i1;\nloop invariant i108: x1 == x2 + i2 ==> x2 <= x1;\nloop invariant i109: x2 == x1 + i1 ==> x1 <= x2;\n\n\n\n\nloop invariant i114: x1 == ((i1 * (i1 - 1)) / 2);\nloop invariant i115: x2 == ((i2 * (i2 - 1)) / 2);\nloop invariant i116: x2 <= x1 + i1;\nloop invariant i117: x1 <= x2 + i2;\nloop invariant i118: ((i1 <= n) ==> (x1 <= x2));\n\nloop invariant i120: ((i1 > n) ==> (x1 >= x2));\nloop invariant i121: ((i2 > n) ==> (x2 >= x1));\n\nloop invariant i123: (i2 <= n) ==> (i1 <= n);\nloop invariant i124: (i1 > n) ==> ((i2 > n) && (x2 == x1 + i1));\n\nloop invariant i126: ((i1 == n) && (i2 == n)) ==> (x1 == x2);\nloop invariant i127: ((i1 == n) && (i2 == n)) ==> (x2 == x1);\nloop invariant i128: ((i1 == n) && (i2 == n)) ==> (x2 == x1 + i1);\nloop invariant i129: ((i1 == n) && (i2 == n)) ==> (x1 == x2 + i2);\n\n\n\nloop invariant i133: x1 >= i1 * (i1 - 1) / 2 && x2 >= i2 * (i2 - 1) / 2;\nloop invariant i134: x1 + x2 >= i1 * (i1 - 1) / 2 + i2 * (i2 - 1) / 2;\nloop invariant i135: x1 <= x2 + i1 * (i1 - 1) / 2;\nloop invariant i136: x2 <= x1 + i2 * (i2 - 1) / 2;\n\nloop invariant i138: x1 >= 0;\nloop invariant i139: x2 >= 0;\nloop invariant i140: i1 >= i2 ==> (x2==x1+i1);\n\nloop invariant i142: i1 == i2 ==> (x2==x1+i2);\nloop invariant i143: x2 == x1 + i1 ==> i2 >= i1;\n\n\n\nloop invariant i147: 0 <= x1 <= i1 * (i1 + 1) / 2;\nloop invariant i148: 0 <= x2 <= i2 * (i2 + 1) / 2;\n\n\nloop invariant i151: i1 > n ==> x1 == i1 * (i1 + 1) / 2;\n\nloop invariant i153: i1 >= 0 && i2 >= 0;\n\nloop invariant i155: x1 >= 0 && x2 >= 0;\nloop invariant i156: x1 <= i1 * (i1 + 1) / 2 && x2 <= i2 * (i2 + 1) / 2;\n\n\n\n\n\nloop invariant i162: i2 >= 1;\n\nloop invariant i164: x1 >= i1 * (i1 - 1) / 2;\nloop invariant i165: x2 >= i2 * (i2 - 1) / 2;\n*/\nwhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c"
        ],
        "skipped": [],
        "total": 40,
        "success_count": 33,
        "failure_count": 7,
        "success_rate": 0.825
    }
}