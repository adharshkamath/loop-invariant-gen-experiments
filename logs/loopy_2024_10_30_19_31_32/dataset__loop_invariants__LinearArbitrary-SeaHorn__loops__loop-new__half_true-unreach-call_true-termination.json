{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> i % 2 == 0 ==> n == k;\nloop invariant k >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant k < 0 ==> i % 2 == 1 ==> n == k - 1;\nloop invariant k >= 0 ==> i % 2 == 1 ==> n == k + 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i < 2*k;\nloop invariant 0 <= n <= k;\nloop invariant (i % 2 == 0) ==> n == (i / 2);\nloop invariant (i % 2 != 0) ==> n == ((i - 1) / 2);\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i < 2*k ==> n <= k;\nloop invariant (i % 2 == 0) ==> i >= 0;\nloop invariant (i % 2 == 0) ==> i < 2*k;\nloop invariant (i % 2 == 0) ==> 0 <= n;\nloop invariant (i % 2 == 0) ==> n <= k;\nloop invariant (i % 2 != 0) ==> i >= 0;\nloop invariant (i % 2 != 0) ==> i < 2*k;\nloop invariant (i % 2 != 0) ==> 0 <= n;\nloop invariant (i % 2 != 0) ==> n <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k;\nloop invariant (i % 2) == (n % (2*k));\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2*k;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2*k;\nloop invariant (i % 2 == 0 ==> n >= i/2);\nloop invariant (i % 2 == 1 ==> n <= i/2);\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant i % 2 == 0 ==> n >= i / 2;\nloop invariant i % 2 != 0 ==> n == (i / 2) + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant n <= k;\nloop invariant (i % 2 == 0) ==> (n == i/2 + 1);\nloop invariant (i % 2 != 0) ==> (n == i/2 + 1);\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i/2;\nloop invariant k >= -LARGE_INT;\nloop invariant (k <= LARGE_INT ==> n == k);\nloop invariant (k > LARGE_INT ==> n == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= k;\nloop invariant 0 <= i < 2*k;\nloop invariant i % 2 == 0 ==> n == k + i / 2;\nloop invariant i % 2 == 1 ==> n == k + (i - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2*k;\nloop invariant n == k - (k - i + 1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant 0 <= n <= k;\nloop invariant i % 2 == 0 ==> n == i / 2;\nloop invariant i % 2 == 1 ==> n == (i - 1) / 2;\nloop invariant i >= 2 * k ==> n == k;\nloop invariant i < 2 * k ==> n <= k - 1;\nloop invariant i >= 2 * k ==> n == k ==> n == i / 2;\nloop invariant i < 2 * k ==> n <= k - 1 ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1;\nloop invariant n == k ==> i == 2 * k;\nloop invariant n <= k - 1 ==> i < 2 * k;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2;\nloop invariant n == k ==> i == 2 * k ==> n == i / 2;\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant n == (k - (k % 2)) / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> i % 2 == 0 ==> n == k;\nloop invariant k >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant k < 0 ==> i % 2 == 1 ==> n == k - 1;\nloop invariant k >= 0 ==> i % 2 == 1 ==> n == k + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\nloop invariant i6: k < 0 ==> i % 2 == 1 ==> n == k - 1;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i < 2*k;\nloop invariant 0 <= n <= k;\nloop invariant (i % 2 == 0) ==> n == (i / 2);\nloop invariant (i % 2 != 0) ==> n == ((i - 1) / 2);\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i < 2*k ==> n <= k;\nloop invariant (i % 2 == 0) ==> i >= 0;\nloop invariant (i % 2 == 0) ==> i < 2*k;\nloop invariant (i % 2 == 0) ==> 0 <= n;\nloop invariant (i % 2 == 0) ==> n <= k;\nloop invariant (i % 2 != 0) ==> i >= 0;\nloop invariant (i % 2 != 0) ==> i < 2*k;\nloop invariant (i % 2 != 0) ==> 0 <= n;\nloop invariant (i % 2 != 0) ==> n <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\n\n\n\nloop invariant i6: i >= 0 ==> n >= 0;\n\nloop invariant i8: (i % 2 == 0) ==> i >= 0;\n\nloop invariant i10: (i % 2 == 0) ==> 0 <= n;\n\nloop invariant i12: (i % 2 != 0) ==> i >= 0;\nloop invariant i13: (i % 2 != 0) ==> i < 2*k;\nloop invariant i14: (i % 2 != 0) ==> 0 <= n;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i % 2 == 0 ==> n == k;\nloop invariant i % 2 != 0 ==> n == k - 1;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == k;\nloop invariant i >= 0 ==> n >= 0;\nloop invariant i <= 2*k ==> n <= k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant n <= k ==> i % 2 == 0 ==> n == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: n >= 0;\n\n\n\n\nloop invariant i7: i >= 0 ==> n >= 0;\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant 0 <= n <= 2*k;\nloop invariant (i % 2) == (n % (2*k));\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == 2*k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2*k;\nloop invariant (i % 2 == 0 ==> n >= i/2);\nloop invariant (i % 2 == 1 ==> n <= i/2);\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant (i % 2 == 1 ==> n >= (i/2));\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant i % 2 == 0 ==> n >= i / 2;\nloop invariant i % 2 != 0 ==> n == (i / 2) + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant n <= k;\nloop invariant (i % 2 == 0) ==> (n == i/2 + 1);\nloop invariant (i % 2 != 0) ==> (n == i/2 + 1);\nloop invariant k < 0 ==> n == k;\nloop invariant k >= 0 ==> n == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: n >= 0;\n\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n == i/2;\nloop invariant k >= -LARGE_INT;\nloop invariant (k <= LARGE_INT ==> n == k);\nloop invariant (k > LARGE_INT ==> n == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: k >= -LARGE_INT;\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= k;\nloop invariant 0 <= i < 2*k;\nloop invariant i % 2 == 0 ==> n == k + i / 2;\nloop invariant i % 2 == 1 ==> n == k + (i - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 2*k;\nloop invariant n == k - (k - i + 1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant k >= 0 ==> n == k;\nloop invariant k < 0 ==> n == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2 * k;\nloop invariant 0 <= n <= k;\nloop invariant i % 2 == 0 ==> n == i / 2;\nloop invariant i % 2 == 1 ==> n == (i - 1) / 2;\nloop invariant i >= 2 * k ==> n == k;\nloop invariant i < 2 * k ==> n <= k - 1;\nloop invariant i >= 2 * k ==> n == k ==> n == i / 2;\nloop invariant i < 2 * k ==> n <= k - 1 ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1;\nloop invariant n == k ==> i == 2 * k;\nloop invariant n <= k - 1 ==> i < 2 * k;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2;\nloop invariant n == k ==> i == 2 * k ==> n == i / 2;\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: i >= 2 * k ==> n == k ==> n == i / 2;\n\n\n\n\n\nloop invariant i13: n == i / 2 ==> i % 2 == 0 ==> n == i / 2;\nloop invariant i14: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2;\nloop invariant i15: n == k ==> i == 2 * k ==> n == i / 2;\n\nloop invariant i17: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2;\nloop invariant i18: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i19: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2;\nloop invariant i20: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i21: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i22: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i23: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i24: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i25: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i26: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i27: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i28: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i29: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i30: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2*k;\nloop invariant n >= 0;\nloop invariant n == (k - (k % 2)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: n >= 0;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= 2*k is preserved but not established.\nloop invariant k < 0 ==> n == k is partially proven to be inductive.\nloop invariant k >= 0 ==> n == k is preserved but not established.\nloop invariant k < 0 ==> i % 2 == 0 ==> n == k is partially proven to be inductive.\nloop invariant k >= 0 ==> i % 2 == 0 ==> n == k is partially proven to be inductive.\nloop invariant k < 0 ==> i % 2 == 1 ==> n == k - 1 is partially proven to be inductive.\nloop invariant k >= 0 ==> i % 2 == 1 ==> n == k + 1 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < 2*k is preserved but not established.\nloop invariant 0 <= n <= k is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> n == (i / 2) is partially proven to be inductive.\nloop invariant (i % 2 != 0) ==> n == ((i - 1) / 2) is partially proven to be inductive.\nloop invariant i >= 0 ==> n >= 0 is partially proven to be inductive.\nloop invariant i < 2*k ==> n <= k is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> i >= 0 is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> i < 2*k is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> 0 <= n is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> n <= k is partially proven to be inductive.\nloop invariant (i % 2 != 0) ==> i >= 0 is partially proven to be inductive.\nloop invariant (i % 2 != 0) ==> i < 2*k is partially proven to be inductive.\nloop invariant (i % 2 != 0) ==> 0 <= n is partially proven to be inductive.\nloop invariant (i % 2 != 0) ==> n <= k is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> n == k is partially proven to be inductive.\nloop invariant i % 2 != 0 ==> n == k - 1 is partially proven to be inductive.\nloop invariant i <= 2*k ==> n <= k is partially proven to be inductive.\nloop invariant n <= k ==> i % 2 != 0 ==> n == k - 1 is partially proven to be inductive.\nloop invariant n <= k ==> i % 2 == 0 ==> n == k is partially proven to be inductive.\nloop invariant n >= 0 ==> i % 2 != 0 ==> n == k - 1 is partially proven to be inductive.\nloop invariant n >= 0 ==> i % 2 == 0 ==> n == k is partially proven to be inductive.\nloop invariant 0 <= n <= 2*k is partially proven to be inductive.\nloop invariant (i % 2) == (n % (2*k)) is partially proven to be inductive.\nloop invariant k >= 0 ==> n == 2*k is partially proven to be inductive.\nloop invariant i <= 2*k is partially proven to be inductive.\nloop invariant (i % 2 == 0 ==> n >= i/2) is partially proven to be inductive.\nloop invariant (i % 2 == 1 ==> n <= i/2) is partially proven to be inductive.\nloop invariant (i % 2 == 0 ==> n <= (i/2) + 1) is partially proven to be inductive.\nloop invariant (i % 2 == 1 ==> n >= (i/2)) is partially proven to be inductive.\nloop invariant 0 <= i <= 2 * k is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> n >= i / 2 is partially proven to be inductive.\nloop invariant i % 2 != 0 ==> n == (i / 2) + 1 is partially proven to be inductive.\nloop invariant 1 <= i <= 2*k is partially proven to be inductive.\nloop invariant n <= k is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> (n == i/2 + 1) is partially proven to be inductive.\nloop invariant (i % 2 != 0) ==> (n == i/2 + 1) is partially proven to be inductive.\nloop invariant n == i/2 is partially proven to be inductive.\nloop invariant k >= -LARGE_INT is partially proven to be inductive.\nloop invariant (k <= LARGE_INT ==> n == k) is partially proven to be inductive.\nloop invariant (k > LARGE_INT ==> n == 0) is partially proven to be inductive.\nloop invariant 0 <= i < 2*k is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> n == k + i / 2 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> n == k + (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == k - (k - i + 1)/2 is partially proven to be inductive.\nloop invariant k < 0 ==> n == 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> n == i / 2 is partially proven to be inductive.\nloop invariant i % 2 == 1 ==> n == (i - 1) / 2 is partially proven to be inductive.\nloop invariant i >= 2 * k ==> n == k is partially proven to be inductive.\nloop invariant i < 2 * k ==> n <= k - 1 is partially proven to be inductive.\nloop invariant i >= 2 * k ==> n == k ==> n == i / 2 is partially proven to be inductive.\nloop invariant i < 2 * k ==> n <= k - 1 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == i / 2 ==> i % 2 == 0 is partially proven to be inductive.\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 is partially proven to be inductive.\nloop invariant n == k ==> i == 2 * k is partially proven to be inductive.\nloop invariant n <= k - 1 ==> i < 2 * k is partially proven to be inductive.\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 is partially proven to be inductive.\nloop invariant n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 is partially proven to be inductive.\nloop invariant n == (k - (k % 2)) / 2 is partially proven to be inductive.\nAssertion k < 0 || n == k: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= 2*k;\nloop invariant i2: k < 0 ==> n == k;\nloop invariant i3: k >= 0 ==> n == k;\nloop invariant i4: k < 0 ==> i % 2 == 0 ==> n == k;\nloop invariant i5: k >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant i6: k < 0 ==> i % 2 == 1 ==> n == k - 1;\nloop invariant i7: k >= 0 ==> i % 2 == 1 ==> n == k + 1;\nloop invariant i8: i >= 0;\nloop invariant i9: i < 2*k;\nloop invariant i10: 0 <= n <= k;\nloop invariant i11: (i % 2 == 0) ==> n == (i / 2);\nloop invariant i12: (i % 2 != 0) ==> n == ((i - 1) / 2);\nloop invariant i13: i >= 0 ==> n >= 0;\nloop invariant i14: i < 2*k ==> n <= k;\nloop invariant i15: (i % 2 == 0) ==> i >= 0;\nloop invariant i16: (i % 2 == 0) ==> i < 2*k;\nloop invariant i17: (i % 2 == 0) ==> 0 <= n;\nloop invariant i18: (i % 2 == 0) ==> n <= k;\nloop invariant i19: (i % 2 != 0) ==> i >= 0;\nloop invariant i20: (i % 2 != 0) ==> i < 2*k;\nloop invariant i21: (i % 2 != 0) ==> 0 <= n;\nloop invariant i22: (i % 2 != 0) ==> n <= k;\nloop invariant i23: n >= 0;\nloop invariant i24: i % 2 == 0 ==> n == k;\nloop invariant i25: i % 2 != 0 ==> n == k - 1;\nloop invariant i26: i <= 2*k ==> n <= k;\nloop invariant i27: n <= k ==> i % 2 != 0 ==> n == k - 1;\nloop invariant i28: n <= k ==> i % 2 == 0 ==> n == k;\nloop invariant i29: n >= 0 ==> i % 2 != 0 ==> n == k - 1;\nloop invariant i30: n >= 0 ==> i % 2 == 0 ==> n == k;\nloop invariant i31: 0 <= n <= 2*k;\nloop invariant i32: (i % 2) == (n % (2*k));\nloop invariant i33: k >= 0 ==> n == 2*k;\nloop invariant i34: i <= 2*k;\nloop invariant i35: (i % 2 == 0 ==> n >= i/2);\nloop invariant i36: (i % 2 == 1 ==> n <= i/2);\nloop invariant i37: (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant i38: (i % 2 == 1 ==> n >= (i/2));\nloop invariant i39: 0 <= i <= 2 * k;\nloop invariant i40: i % 2 == 0 ==> n >= i / 2;\nloop invariant i41: i % 2 != 0 ==> n == (i / 2) + 1;\nloop invariant i42: 1 <= i <= 2*k;\nloop invariant i43: n <= k;\nloop invariant i44: (i % 2 == 0) ==> (n == i/2 + 1);\nloop invariant i45: (i % 2 != 0) ==> (n == i/2 + 1);\nloop invariant i46: n == i/2;\nloop invariant i47: k >= -LARGE_INT;\nloop invariant i48: (k <= LARGE_INT ==> n == k);\nloop invariant i49: (k > LARGE_INT ==> n == 0);\nloop invariant i50: 0 <= i < 2*k;\nloop invariant i51: i % 2 == 0 ==> n == k + i / 2;\nloop invariant i52: i % 2 == 1 ==> n == k + (i - 1) / 2;\nloop invariant i53: n == k - (k - i + 1)/2;\nloop invariant i54: k < 0 ==> n == 0;\nloop invariant i55: i % 2 == 0 ==> n == i / 2;\nloop invariant i56: i % 2 == 1 ==> n == (i - 1) / 2;\nloop invariant i57: i >= 2 * k ==> n == k;\nloop invariant i58: i < 2 * k ==> n <= k - 1;\nloop invariant i59: i >= 2 * k ==> n == k ==> n == i / 2;\nloop invariant i60: i < 2 * k ==> n <= k - 1 ==> n <= (i - 1) / 2;\nloop invariant i61: n == i / 2 ==> i % 2 == 0;\nloop invariant i62: n <= (i - 1) / 2 ==> i % 2 == 1;\nloop invariant i63: n == k ==> i == 2 * k;\nloop invariant i64: n <= k - 1 ==> i < 2 * k;\nloop invariant i65: n == i / 2 ==> i % 2 == 0 ==> n == i / 2;\nloop invariant i66: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2;\nloop invariant i67: n == k ==> i == 2 * k ==> n == i / 2;\nloop invariant i68: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2;\nloop invariant i69: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2;\nloop invariant i70: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i71: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2;\nloop invariant i72: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i73: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i74: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i75: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i76: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i77: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i78: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i79: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i80: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i81: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i82: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i83: n == (k - (k % 2)) / 2;\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 18,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\nloop invariant i6: k < 0 ==> i % 2 == 1 ==> n == k - 1;\n\nloop invariant i8: i >= 0;\n\n\nloop invariant i11: (i % 2 == 0) ==> n == (i / 2);\n\nloop invariant i13: i >= 0 ==> n >= 0;\nloop invariant i14: i < 2*k ==> n <= k;\nloop invariant i15: (i % 2 == 0) ==> i >= 0;\n\nloop invariant i17: (i % 2 == 0) ==> 0 <= n;\n\nloop invariant i19: (i % 2 != 0) ==> i >= 0;\nloop invariant i20: (i % 2 != 0) ==> i < 2*k;\nloop invariant i21: (i % 2 != 0) ==> 0 <= n;\nloop invariant i22: (i % 2 != 0) ==> n <= k;\nloop invariant i23: n >= 0;\n\n\nloop invariant i26: i <= 2*k ==> n <= k;\n\n\n\n\n\n\n\n\nloop invariant i35: (i % 2 == 0 ==> n >= i/2);\n\nloop invariant i37: (i % 2 == 0 ==> n <= (i/2) + 1);\nloop invariant i38: (i % 2 == 1 ==> n >= (i/2));\n\nloop invariant i40: i % 2 == 0 ==> n >= i / 2;\nloop invariant i41: i % 2 != 0 ==> n == (i / 2) + 1;\n\n\n\nloop invariant i45: (i % 2 != 0) ==> (n == i/2 + 1);\n\nloop invariant i47: k >= -LARGE_INT;\n\n\n\n\n\n\nloop invariant i54: k < 0 ==> n == 0;\nloop invariant i55: i % 2 == 0 ==> n == i / 2;\n\n\n\nloop invariant i59: i >= 2 * k ==> n == k ==> n == i / 2;\n\nloop invariant i61: n == i / 2 ==> i % 2 == 0;\n\n\nloop invariant i64: n <= k - 1 ==> i < 2 * k;\nloop invariant i65: n == i / 2 ==> i % 2 == 0 ==> n == i / 2;\nloop invariant i66: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2;\nloop invariant i67: n == k ==> i == 2 * k ==> n == i / 2;\n\nloop invariant i69: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2;\nloop invariant i70: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i71: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2;\nloop invariant i72: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i73: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i74: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i75: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i76: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i77: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i78: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i79: n == k ==> i == 2 * k ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i80: n <= k - 1 ==> i < 2 * k ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\nloop invariant i81: n == i / 2 ==> i % 2 == 0 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2 ==> n == i / 2;\nloop invariant i82: n <= (i - 1) / 2 ==> i % 2 == 1 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2 ==> n <= (i - 1) / 2;\n\n*/\nfor(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 59,
        "success_count": 49,
        "failure_count": 10,
        "success_rate": 0.8305084745762712
    }
}