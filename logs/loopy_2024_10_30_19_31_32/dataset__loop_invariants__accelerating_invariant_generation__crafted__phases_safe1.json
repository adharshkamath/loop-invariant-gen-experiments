{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x < 0x0fffffff;\nloop invariant (x < 0xfff0 ==> x % 2 == 0) ==> (x % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 != 0 ==> x >= 0xfff1;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant x < 0xfff0 ==> x % 2 == 1;\nloop invariant x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 4 == 0;\nloop invariant x % 2 == 1 ==> x % 4 == 1;\nloop invariant x % 4 == 0 ==> x % 2 == 0;\nloop invariant x % 4 == 1 ==> x % 2 == 1;\nloop invariant x % 8 == 0 ==> x % 4 == 0;\nloop invariant x % 8 == 1 ==> x % 4 == 1;\nloop invariant x % 8 == 2 ==> x % 4 == 2;\nloop invariant x % 8 == 3 ==> x % 4 == 3;\nloop invariant x % 8 == 4 ==> x % 4 == 0;\nloop invariant x % 8 == 5 ==> x % 4 == 1;\nloop invariant x % 8 == 6 ==> x % 4 == 2;\nloop invariant x % 8 == 7 ==> x % 4 == 3;\nloop invariant x % 16 == 0 ==> x % 8 == 0;\nloop invariant x % 16 == 1 ==> x % 8 == 1;\nloop invariant x % 16 == 2 ==> x % 8 == 2;\nloop invariant x % 16 == 3 ==> x % 8 == 3;\nloop invariant x % 16 == 4 ==> x % 8 == 0;\nloop invariant x % 16 == 5 ==> x % 8 == 1;\nloop invariant x % 16 == 6 ==> x % 8 == 2;\nloop invariant x % 16 == 7 ==> x % 8 == 3;\nloop invariant x % 16 == 8 ==> x % 8 == 0;\nloop invariant x % 16 == 9 ==> x % 8 == 1;\nloop invariant x % 16 == 10 ==> x % 8 == 2;\nloop invariant x % 16 == 11 ==> x % 8 == 3;\nloop invariant x % 16 == 12 ==> x % 8 == 4;\nloop invariant x % 16 == 13 ==> x % 8 == 5;\nloop invariant x % 16 == 14 ==> x % 8 == 6;\nloop invariant x % 16 == 15 ==> x % 8 == 7;\nloop invariant (x % 16 == 0 || x % 16 == 4) ==> x % 8 == 0;\nloop invariant (x % 16 == 1 || x % 16 == 5) ==> x % 8 == 1;\nloop invariant (x % 16 == 2 || x % 16 == 6) ==> x % 8 == 2;\nloop invariant (x % 16 == 3 || x % 16 == 7) ==> x % 8 == 3;\nloop invariant (x % 16 == 8 || x % 16 == 12) ==> x % 8 == 4;\nloop invariant (x % 16 == 9 || x % 16 == 13) ==> x % 8 == 5;\nloop invariant (x % 16 == 10 || x % 16 == 14) ==> x % 8 == 6;\nloop invariant (x % 16 == 11 || x % 16 == 15) ==> x % 8 == 7;\nloop invariant (x % 32 == 0 || x % 32 == 16) ==> x % 16 == 0;\nloop invariant (x % 32 == 1 || x % 32 == 17) ==> x % 16 == 1;\nloop invariant (x % 32 == 2 || x % 32 == 18) ==> x % 16 == 2;\nloop invariant (x % 32 == 3 || x % 32 == 19) ==> x % 16 == 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 >= 0;\nloop invariant x % 2 <= 1;\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 >= 0;\nloop invariant x % 2 <= 1;\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant loop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant !(x % 2) ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2) ==> x % 2 == 1;\nloop invariant !(x % 2) ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2) ==> x < 0xfff0;\nloop invariant !(x % 2) ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2 == 0 ==> (0 <= x && x <= 0x0fffffff));\nloop invariant (x % 2 == 1 ==> (1 <= x && x <= 0x0fffffff));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant !(x%2);\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant (x == 0) || (x%2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0x00000000;\nloop invariant x % 2 == 0 ==> x <= 0x00000fff;\nloop invariant x % 2 == 0 ==> x >= 0xfff00000;\nloop invariant x % 2 == 0 ==> x <= 0xffffffff;\nloop invariant x % 2 != 0 ==> x >= 0x00000001;\nloop invariant x % 2 != 0 ==> x <= 0x00000fff;\nloop invariant x % 2 != 0 ==> x >= 0xfff00001;\nloop invariant x % 2 != 0 ==> x <= 0xffffffff;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant 0x0fffffff > x;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 != 0 ==> x < 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x < 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x < 0xfff0;\nloop invariant x >= 0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 != 0 ==> x < 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x == (x + 1);\nloop invariant x % 2 != 0 ==> x == (x + 2);\nloop invariant x % 2 == 0 ==> x < 0x0fffffff;\nloop invariant x % 2 != 0 ==> x < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0x0fffffff;\nloop invariant x % 2 != 0 ==> x >= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * ((0xfff0 - x) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x < 0xfff0 ==> x < 0x0fffffff;\nloop invariant x >= 0xfff0 ==> x < 0x0fffffff;\nloop invariant x < 0xfff0 ==> (x == (x + 1));\nloop invariant x >= 0xfff0 ==> (x == (x + 2));\nloop invariant !(x % 2) ==> x < 0xfff0 || x == 0x1ffe0 || x == 0x3fe00 || x == 0x7fe00 || x == 0xffffe;\nloop invariant !(x % 2) ==> x >= 0xfff0 || x == 0x1ffe2 || x == 0x3fe02 || x == 0x7fe02 || x == 0xffffe;\nloop invariant !(x % 2) ==> x == 0x0fffffff || x == 0x1ffe0 || x == 0x3fe00 || x == 0x7fe00 || x == 0xffffe || x == 0x1ffe2 || x == 0x3fe02 || x == 0x7fe02;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x < 0x0fffffff ==> x < 0xfff0 || x % 2 == 0;\nloop invariant x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x < 0xfff0 ==> x % 2 == 0 || x < 0xfff0;\nloop invariant x >= 0xfff0 ==> x % 2 == 0 || x >= 0xfff0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 0x0fffffff;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant (x % 2 == 1 || x % 2 == 0) ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x + 1 < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 2 < 0x0fffffff;\nloop invariant 0 <= x < 0x0fffffff;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant (x % 2 == 1 || x % 2 == 0) ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x + 1 < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 2 < 0x0fffffff;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0x0fffffff;\nloop invariant (x < 0xfff0 ==> x % 2 == 0) ==> (x % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: (x < 0xfff0 ==> x % 2 == 0) ==> (x % 2 == 0);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 != 0 ==> x >= 0xfff1;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant x < 0xfff0 ==> x % 2 == 1;\nloop invariant x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 4 == 0;\nloop invariant x % 2 == 1 ==> x % 4 == 1;\nloop invariant x % 4 == 0 ==> x % 2 == 0;\nloop invariant x % 4 == 1 ==> x % 2 == 1;\nloop invariant x % 8 == 0 ==> x % 4 == 0;\nloop invariant x % 8 == 1 ==> x % 4 == 1;\nloop invariant x % 8 == 2 ==> x % 4 == 2;\nloop invariant x % 8 == 3 ==> x % 4 == 3;\nloop invariant x % 8 == 4 ==> x % 4 == 0;\nloop invariant x % 8 == 5 ==> x % 4 == 1;\nloop invariant x % 8 == 6 ==> x % 4 == 2;\nloop invariant x % 8 == 7 ==> x % 4 == 3;\nloop invariant x % 16 == 0 ==> x % 8 == 0;\nloop invariant x % 16 == 1 ==> x % 8 == 1;\nloop invariant x % 16 == 2 ==> x % 8 == 2;\nloop invariant x % 16 == 3 ==> x % 8 == 3;\nloop invariant x % 16 == 4 ==> x % 8 == 0;\nloop invariant x % 16 == 5 ==> x % 8 == 1;\nloop invariant x % 16 == 6 ==> x % 8 == 2;\nloop invariant x % 16 == 7 ==> x % 8 == 3;\nloop invariant x % 16 == 8 ==> x % 8 == 0;\nloop invariant x % 16 == 9 ==> x % 8 == 1;\nloop invariant x % 16 == 10 ==> x % 8 == 2;\nloop invariant x % 16 == 11 ==> x % 8 == 3;\nloop invariant x % 16 == 12 ==> x % 8 == 4;\nloop invariant x % 16 == 13 ==> x % 8 == 5;\nloop invariant x % 16 == 14 ==> x % 8 == 6;\nloop invariant x % 16 == 15 ==> x % 8 == 7;\nloop invariant (x % 16 == 0 || x % 16 == 4) ==> x % 8 == 0;\nloop invariant (x % 16 == 1 || x % 16 == 5) ==> x % 8 == 1;\nloop invariant (x % 16 == 2 || x % 16 == 6) ==> x % 8 == 2;\nloop invariant (x % 16 == 3 || x % 16 == 7) ==> x % 8 == 3;\nloop invariant (x % 16 == 8 || x % 16 == 12) ==> x % 8 == 4;\nloop invariant (x % 16 == 9 || x % 16 == 13) ==> x % 8 == 5;\nloop invariant (x % 16 == 10 || x % 16 == 14) ==> x % 8 == 6;\nloop invariant (x % 16 == 11 || x % 16 == 15) ==> x % 8 == 7;\nloop invariant (x % 32 == 0 || x % 32 == 16) ==> x % 16 == 0;\nloop invariant (x % 32 == 1 || x % 32 == 17) ==> x % 16 == 1;\nloop invariant (x % 32 == 2 || x % 32 == 18) ==> x % 16 == 2;\nloop invariant (x % 32 == 3 || x % 32 == 19) ==> x % 16 == 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x % 2 == 1 ==> x < 0xfff0;\n\nloop invariant i5: x >= 0xfff0 ==> x % 2 == 0;\n\n\nloop invariant i8: x % 4 == 0 ==> x % 2 == 0;\nloop invariant i9: x % 4 == 1 ==> x % 2 == 1;\nloop invariant i10: x % 8 == 0 ==> x % 4 == 0;\nloop invariant i11: x % 8 == 1 ==> x % 4 == 1;\nloop invariant i12: x % 8 == 2 ==> x % 4 == 2;\nloop invariant i13: x % 8 == 3 ==> x % 4 == 3;\nloop invariant i14: x % 8 == 4 ==> x % 4 == 0;\nloop invariant i15: x % 8 == 5 ==> x % 4 == 1;\nloop invariant i16: x % 8 == 6 ==> x % 4 == 2;\nloop invariant i17: x % 8 == 7 ==> x % 4 == 3;\nloop invariant i18: x % 16 == 0 ==> x % 8 == 0;\nloop invariant i19: x % 16 == 1 ==> x % 8 == 1;\nloop invariant i20: x % 16 == 2 ==> x % 8 == 2;\nloop invariant i21: x % 16 == 3 ==> x % 8 == 3;\n\n\n\n\nloop invariant i26: x % 16 == 8 ==> x % 8 == 0;\nloop invariant i27: x % 16 == 9 ==> x % 8 == 1;\nloop invariant i28: x % 16 == 10 ==> x % 8 == 2;\nloop invariant i29: x % 16 == 11 ==> x % 8 == 3;\nloop invariant i30: x % 16 == 12 ==> x % 8 == 4;\nloop invariant i31: x % 16 == 13 ==> x % 8 == 5;\nloop invariant i32: x % 16 == 14 ==> x % 8 == 6;\nloop invariant i33: x % 16 == 15 ==> x % 8 == 7;\n\n\n\n\n\n\n\n\nloop invariant i42: (x % 32 == 0 || x % 32 == 16) ==> x % 16 == 0;\nloop invariant i43: (x % 32 == 1 || x % 32 == 17) ==> x % 16 == 1;\nloop invariant i44: (x % 32 == 2 || x % 32 == 18) ==> x % 16 == 2;\nloop invariant i45: (x % 32 == 3 || x % 32 == 19) ==> x % 16 == 3;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 >= 0;\nloop invariant x % 2 <= 1;\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 >= 0;\nloop invariant x % 2 <= 1;\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x % 2 >= 0;\nloop invariant i3: x % 2 <= 1;\nloop invariant i4: x >= 0;\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant loop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant !(x % 2) ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2) ==> x % 2 == 1;\nloop invariant !(x % 2) ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant !(x % 2) ==> x < 0xfff0;\nloop invariant !(x % 2) ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\nloop invariant i4: x % 2 == 0 ==> x % 2 == 0;\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2 == 0 ==> (0 <= x && x <= 0x0fffffff));\nloop invariant (x % 2 == 1 ==> (1 <= x && x <= 0x0fffffff));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: (x % 2 == 1 ==> (1 <= x && x <= 0x0fffffff));\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant !(x%2);\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant (x == 0) || (x%2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x >= 0;\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0x00000000;\nloop invariant x % 2 == 0 ==> x <= 0x00000fff;\nloop invariant x % 2 == 0 ==> x >= 0xfff00000;\nloop invariant x % 2 == 0 ==> x <= 0xffffffff;\nloop invariant x % 2 != 0 ==> x >= 0x00000001;\nloop invariant x % 2 != 0 ==> x <= 0x00000fff;\nloop invariant x % 2 != 0 ==> x >= 0xfff00001;\nloop invariant x % 2 != 0 ==> x <= 0xffffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x % 2 == 0 ==> x >= 0x00000000;\n\n\nloop invariant i5: x % 2 == 0 ==> x <= 0xffffffff;\nloop invariant i6: x % 2 != 0 ==> x >= 0x00000001;\n\n\nloop invariant i9: x % 2 != 0 ==> x <= 0xffffffff;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant 0x0fffffff > x;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 != 0 ==> x < 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x < 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x < 0xfff0;\nloop invariant x >= 0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 != 0 ==> x < 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\nloop invariant i4: x % 2 != 0 ==> x < 0xfff0;\n\n\n\n\n\n\n\nloop invariant i12: x >= 0 ==> x % 2 != 0 ==> x < 0xfff0;\nloop invariant i13: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 == 0;\n\nloop invariant i15: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i16: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i17: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i18: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i19: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i20: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i21: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i22: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i23: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i24: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i25: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff0;\nloop invariant x % 2 != 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x == (x + 1);\nloop invariant x % 2 != 0 ==> x == (x + 2);\nloop invariant x % 2 == 0 ==> x < 0x0fffffff;\nloop invariant x % 2 != 0 ==> x < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x >= 0x0fffffff;\nloop invariant x % 2 != 0 ==> x >= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 != 0 ==> x % 2 != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i11: x % 2 != 0 ==> x % 2 != 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x >= 2 * ((0xfff0 - x) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x < 0xfff0 ==> x < 0x0fffffff;\nloop invariant x >= 0xfff0 ==> x < 0x0fffffff;\nloop invariant x < 0xfff0 ==> (x == (x + 1));\nloop invariant x >= 0xfff0 ==> (x == (x + 2));\nloop invariant !(x % 2) ==> x < 0xfff0 || x == 0x1ffe0 || x == 0x3fe00 || x == 0x7fe00 || x == 0xffffe;\nloop invariant !(x % 2) ==> x >= 0xfff0 || x == 0x1ffe2 || x == 0x3fe02 || x == 0x7fe02 || x == 0xffffe;\nloop invariant !(x % 2) ==> x == 0x0fffffff || x == 0x1ffe0 || x == 0x3fe00 || x == 0x7fe00 || x == 0xffffe || x == 0x1ffe2 || x == 0x3fe02 || x == 0x7fe02;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x < 0xfff0 ==> x < 0x0fffffff;\n\n\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant x < 0x0fffffff ==> x < 0xfff0 || x % 2 == 0;\nloop invariant x >= 0xfff0 ==> x % 2 == 0;\nloop invariant x < 0xfff0 ==> x % 2 == 0 || x < 0xfff0;\nloop invariant x >= 0xfff0 ==> x % 2 == 0 || x >= 0xfff0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: x < 0x0fffffff ==> x < 0xfff0 || x % 2 == 0;\nloop invariant i4: x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i5: x < 0xfff0 ==> x % 2 == 0 || x < 0xfff0;\nloop invariant i6: x >= 0xfff0 ==> x % 2 == 0 || x >= 0xfff0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0x0fffffff;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant (x % 2 == 1 || x % 2 == 0) ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x + 1 < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 2 < 0x0fffffff;\nloop invariant 0 <= x < 0x0fffffff;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant (x % 2 == 1 || x % 2 == 0) ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x + 1 < 0x0fffffff;\nloop invariant x % 2 == 0 ==> x + 2 < 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x % 2 == 1 ==> x < 0xfff0;\n\nloop invariant i4: x % 2 == 1 ==> x + 1 < 0x0fffffff;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 64: unexpected token 'invariant'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: 0 <= x < 0x0fffffff;\nloop invariant i2: (x < 0xfff0 ==> x % 2 == 0) ==> (x % 2 == 0);\nloop invariant i3: 0 <= x <= 0x0fffffff;\nloop invariant i4: x % 2 != 0 ==> x >= 0xfff1;\nloop invariant i5: x % 2 == 0 ==> x >= 0xfff0;\nloop invariant i6: x % 2 == 1 ==> x < 0xfff0;\nloop invariant i7: x < 0xfff0 ==> x % 2 == 1;\nloop invariant i8: x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i9: x % 2 == 0 ==> x % 4 == 0;\nloop invariant i10: x % 2 == 1 ==> x % 4 == 1;\nloop invariant i11: x % 4 == 0 ==> x % 2 == 0;\nloop invariant i12: x % 4 == 1 ==> x % 2 == 1;\nloop invariant i13: x % 8 == 0 ==> x % 4 == 0;\nloop invariant i14: x % 8 == 1 ==> x % 4 == 1;\nloop invariant i15: x % 8 == 2 ==> x % 4 == 2;\nloop invariant i16: x % 8 == 3 ==> x % 4 == 3;\nloop invariant i17: x % 8 == 4 ==> x % 4 == 0;\nloop invariant i18: x % 8 == 5 ==> x % 4 == 1;\nloop invariant i19: x % 8 == 6 ==> x % 4 == 2;\nloop invariant i20: x % 8 == 7 ==> x % 4 == 3;\nloop invariant i21: x % 16 == 0 ==> x % 8 == 0;\nloop invariant i22: x % 16 == 1 ==> x % 8 == 1;\nloop invariant i23: x % 16 == 2 ==> x % 8 == 2;\nloop invariant i24: x % 16 == 3 ==> x % 8 == 3;\nloop invariant i25: x % 16 == 4 ==> x % 8 == 0;\nloop invariant i26: x % 16 == 5 ==> x % 8 == 1;\nloop invariant i27: x % 16 == 6 ==> x % 8 == 2;\nloop invariant i28: x % 16 == 7 ==> x % 8 == 3;\nloop invariant i29: x % 16 == 8 ==> x % 8 == 0;\nloop invariant i30: x % 16 == 9 ==> x % 8 == 1;\nloop invariant i31: x % 16 == 10 ==> x % 8 == 2;\nloop invariant i32: x % 16 == 11 ==> x % 8 == 3;\nloop invariant i33: x % 16 == 12 ==> x % 8 == 4;\nloop invariant i34: x % 16 == 13 ==> x % 8 == 5;\nloop invariant i35: x % 16 == 14 ==> x % 8 == 6;\nloop invariant i36: x % 16 == 15 ==> x % 8 == 7;\nloop invariant i37: (x % 16 == 0 || x % 16 == 4) ==> x % 8 == 0;\nloop invariant i38: (x % 16 == 1 || x % 16 == 5) ==> x % 8 == 1;\nloop invariant i39: (x % 16 == 2 || x % 16 == 6) ==> x % 8 == 2;\nloop invariant i40: (x % 16 == 3 || x % 16 == 7) ==> x % 8 == 3;\nloop invariant i41: (x % 16 == 8 || x % 16 == 12) ==> x % 8 == 4;\nloop invariant i42: (x % 16 == 9 || x % 16 == 13) ==> x % 8 == 5;\nloop invariant i43: (x % 16 == 10 || x % 16 == 14) ==> x % 8 == 6;\nloop invariant i44: (x % 16 == 11 || x % 16 == 15) ==> x % 8 == 7;\nloop invariant i45: (x % 32 == 0 || x % 32 == 16) ==> x % 16 == 0;\nloop invariant i46: (x % 32 == 1 || x % 32 == 17) ==> x % 16 == 1;\nloop invariant i47: (x % 32 == 2 || x % 32 == 18) ==> x % 16 == 2;\nloop invariant i48: (x % 32 == 3 || x % 32 == 19) ==> x % 16 == 3;\nloop invariant i49: x % 2 >= 0;\nloop invariant i50: x % 2 <= 1;\nloop invariant i51: x >= 0;\nloop invariant i52: x <= 0x0fffffff;\nloop invariant i53: x % 2 == 0;\nloop invariant i54: loop invariant 0 <= x <= 0x0fffffff;\nloop invariant i55: !(x % 2) ==> x < 0xfff0;\nloop invariant i56: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i57: !(x % 2) ==> x % 2 == 1;\nloop invariant i58: !(x % 2) ==> x >= 0xfff0;\nloop invariant i59: x % 2 == 0 ==> x < 0xfff0;\nloop invariant i60: (x % 2 == 0 ==> (0 <= x && x <= 0x0fffffff));\nloop invariant i61: (x % 2 == 1 ==> (1 <= x && x <= 0x0fffffff));\nloop invariant i62: !(x%2);\nloop invariant i63: (x == 0) || (x%2 == 0);\nloop invariant i64: x % 2 == 0 ==> x >= 0x00000000;\nloop invariant i65: x % 2 == 0 ==> x <= 0x00000fff;\nloop invariant i66: x % 2 == 0 ==> x >= 0xfff00000;\nloop invariant i67: x % 2 == 0 ==> x <= 0xffffffff;\nloop invariant i68: x % 2 != 0 ==> x >= 0x00000001;\nloop invariant i69: x % 2 != 0 ==> x <= 0x00000fff;\nloop invariant i70: x % 2 != 0 ==> x >= 0xfff00001;\nloop invariant i71: x % 2 != 0 ==> x <= 0xffffffff;\nloop invariant i72: 0x0fffffff > x;\nloop invariant i73: x % 2 != 0 ==> x < 0xfff0;\nloop invariant i74: x >= 0 ==> x % 2 == 0;\nloop invariant i75: x >= 0 ==> x % 2 != 0;\nloop invariant i76: x >= 0 ==> x >= 0xfff0;\nloop invariant i77: x >= 0 ==> x < 0xfff0;\nloop invariant i78: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0;\nloop invariant i79: x >= 0 ==> x % 2 == 0 ==> x < 0xfff0;\nloop invariant i80: x >= 0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i81: x >= 0 ==> x % 2 != 0 ==> x < 0xfff0;\nloop invariant i82: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i83: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i84: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i85: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i86: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i87: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i88: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i89: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i90: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i91: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i92: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i93: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i94: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i95: x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i96: x % 2 == 0 ==> x == (x + 1);\nloop invariant i97: x % 2 != 0 ==> x == (x + 2);\nloop invariant i98: x % 2 == 0 ==> x < 0x0fffffff;\nloop invariant i99: x % 2 != 0 ==> x < 0x0fffffff;\nloop invariant i100: x % 2 == 0 ==> x >= 0x0fffffff;\nloop invariant i101: x % 2 != 0 ==> x >= 0x0fffffff;\nloop invariant i102: x % 2 != 0 ==> x % 2 != 0;\nloop invariant i103: x >= 2 * ((0xfff0 - x) / 2);\nloop invariant i104: x < 0xfff0 ==> x < 0x0fffffff;\nloop invariant i105: x >= 0xfff0 ==> x < 0x0fffffff;\nloop invariant i106: x < 0xfff0 ==> (x == (x + 1));\nloop invariant i107: x >= 0xfff0 ==> (x == (x + 2));\nloop invariant i108: !(x % 2) ==> x < 0xfff0 || x == 0x1ffe0 || x == 0x3fe00 || x == 0x7fe00 || x == 0xffffe;\nloop invariant i109: !(x % 2) ==> x >= 0xfff0 || x == 0x1ffe2 || x == 0x3fe02 || x == 0x7fe02 || x == 0xffffe;\nloop invariant i110: !(x % 2) ==> x == 0x0fffffff || x == 0x1ffe0 || x == 0x3fe00 || x == 0x7fe00 || x == 0xffffe || x == 0x1ffe2 || x == 0x3fe02 || x == 0x7fe02;\nloop invariant i111: x < 0x0fffffff ==> x < 0xfff0 || x % 2 == 0;\nloop invariant i112: x < 0xfff0 ==> x % 2 == 0 || x < 0xfff0;\nloop invariant i113: x >= 0xfff0 ==> x % 2 == 0 || x >= 0xfff0;\nloop invariant i114: (x % 2 == 1 || x % 2 == 0) ==> x >= 0xfff0;\nloop invariant i115: x % 2 == 1 ==> x + 1 < 0x0fffffff;\nloop invariant i116: x % 2 == 0 ==> x + 2 < 0x0fffffff;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 46,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: (x < 0xfff0 ==> x % 2 == 0) ==> (x % 2 == 0);\n\n\n\nloop invariant i6: x % 2 == 1 ==> x < 0xfff0;\n\nloop invariant i8: x >= 0xfff0 ==> x % 2 == 0;\n\n\nloop invariant i11: x % 4 == 0 ==> x % 2 == 0;\nloop invariant i12: x % 4 == 1 ==> x % 2 == 1;\nloop invariant i13: x % 8 == 0 ==> x % 4 == 0;\nloop invariant i14: x % 8 == 1 ==> x % 4 == 1;\nloop invariant i15: x % 8 == 2 ==> x % 4 == 2;\nloop invariant i16: x % 8 == 3 ==> x % 4 == 3;\nloop invariant i17: x % 8 == 4 ==> x % 4 == 0;\nloop invariant i18: x % 8 == 5 ==> x % 4 == 1;\nloop invariant i19: x % 8 == 6 ==> x % 4 == 2;\nloop invariant i20: x % 8 == 7 ==> x % 4 == 3;\nloop invariant i21: x % 16 == 0 ==> x % 8 == 0;\nloop invariant i22: x % 16 == 1 ==> x % 8 == 1;\nloop invariant i23: x % 16 == 2 ==> x % 8 == 2;\nloop invariant i24: x % 16 == 3 ==> x % 8 == 3;\n\n\n\n\nloop invariant i29: x % 16 == 8 ==> x % 8 == 0;\nloop invariant i30: x % 16 == 9 ==> x % 8 == 1;\nloop invariant i31: x % 16 == 10 ==> x % 8 == 2;\nloop invariant i32: x % 16 == 11 ==> x % 8 == 3;\nloop invariant i33: x % 16 == 12 ==> x % 8 == 4;\nloop invariant i34: x % 16 == 13 ==> x % 8 == 5;\nloop invariant i35: x % 16 == 14 ==> x % 8 == 6;\nloop invariant i36: x % 16 == 15 ==> x % 8 == 7;\n\n\n\n\n\n\n\n\nloop invariant i45: (x % 32 == 0 || x % 32 == 16) ==> x % 16 == 0;\nloop invariant i46: (x % 32 == 1 || x % 32 == 17) ==> x % 16 == 1;\nloop invariant i47: (x % 32 == 2 || x % 32 == 18) ==> x % 16 == 2;\nloop invariant i48: (x % 32 == 3 || x % 32 == 19) ==> x % 16 == 3;\nloop invariant i49: x % 2 >= 0;\nloop invariant i50: x % 2 <= 1;\nloop invariant i51: x >= 0;\n\n\n\n\nloop invariant i56: x % 2 == 0 ==> x % 2 == 0;\n\n\n\n\nloop invariant i61: (x % 2 == 1 ==> (1 <= x && x <= 0x0fffffff));\n\n\nloop invariant i64: x % 2 == 0 ==> x >= 0x00000000;\n\n\nloop invariant i67: x % 2 == 0 ==> x <= 0xffffffff;\nloop invariant i68: x % 2 != 0 ==> x >= 0x00000001;\n\n\nloop invariant i71: x % 2 != 0 ==> x <= 0xffffffff;\n\nloop invariant i73: x % 2 != 0 ==> x < 0xfff0;\n\n\n\n\n\n\n\nloop invariant i81: x >= 0 ==> x % 2 != 0 ==> x < 0xfff0;\nloop invariant i82: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 == 0;\n\nloop invariant i84: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i85: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i86: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i87: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i88: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i89: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i90: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i91: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\nloop invariant i92: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0;\nloop invariant i93: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0;\nloop invariant i94: x >= 0 ==> x % 2 == 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 != 0 ==> x >= 0xfff0 ==> x % 2 == 0;\n\n\n\n\nloop invariant i99: x % 2 != 0 ==> x < 0x0fffffff;\n\n\nloop invariant i102: x % 2 != 0 ==> x % 2 != 0;\n\nloop invariant i104: x < 0xfff0 ==> x < 0x0fffffff;\n\n\n\n\n\n\nloop invariant i111: x < 0x0fffffff ==> x < 0xfff0 || x % 2 == 0;\nloop invariant i112: x < 0xfff0 ==> x % 2 == 0 || x < 0xfff0;\nloop invariant i113: x >= 0xfff0 ==> x % 2 == 0 || x >= 0xfff0;\n\nloop invariant i115: x % 2 == 1 ==> x + 1 < 0x0fffffff;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 139,
        "success_count": 111,
        "failure_count": 28,
        "success_rate": 0.7985611510791367
    }
}