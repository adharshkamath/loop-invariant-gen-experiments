{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= buf <= buflim;\nloop invariant in > 0;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant bufferlen > 1;\nloop invariant inlen > 0;\nloop invariant bufferlen >= inlen;\nloop invariant buf <= buflim;\nloop invariant in < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= __BLAST_NONDET <= 1;\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant in <= inlen;\nloop invariant (buf == buflim) -> (__BLAST_NONDET == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant 0 <= in;\nloop invariant in <= inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim <= bufferlen - 2;\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant in < inlen;\nloop invariant buflim <= bufferlen - 2;\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf == bufferlen - 1;\nloop invariant __BLAST_NONDET ==> buf == bufferlen;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 1;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 2;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 3;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 4;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 5;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 6;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 7;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 8;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 9;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 10;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 11;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 12;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 13;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 14;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 15;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 16;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 17;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 18;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 19;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 20;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 21;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 22;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 23;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 24;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 25;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 26;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 27;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 28;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 29;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 30;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 31;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 32;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 33;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 34;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 35;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 36;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 37;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 38;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 39;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 40;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 41;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 42;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 43;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 44;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 45;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 46;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 47;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 48;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 49;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buf <= buflim;\nloop invariant buflim <= bufferlen - 2;\nloop invariant inlen > 0;\nloop invariant bufferlen > 1;\nloop invariant in < inlen - 1;\nloop invariant buf < buflim + 1;\nloop invariant buflim < bufferlen - 1;\nloop invariant bufferlen - 2 <= buflim;\nloop invariant 0 <= buf + 1;\nloop invariant buf + 1 < bufferlen;\nloop invariant 0 <= buf + 1;\nloop invariant buf + 1 < bufferlen;\nloop invariant 1 <= in;\nloop invariant in <= inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant (in < inlen) ==> (buf < buflim);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\n*/\n```",
            "```\n/*@\nloop invariant ( ( ((buf) + 2) == ((bufferlen)) ) ==> (((buf) == (buflim)) ==> (buf < bufferlen)) );\nloop invariant ( ((buf) <= (buflim)) ==> (((buf) + 1) <= (buflim)) );\nloop invariant ( ((buf) < (buflim)) ==> (((buf) + 1) <= (buflim)) );\nloop invariant ( (buf >= 0) ==> (((buf) + 1) >= 0) );\nloop invariant ( ((buf) + 1) < (bufferlen) ==> (((buf) + 1) <= (buflim)) );\nloop invariant ( ((buf) + 1) >= 0 ==> (((buf) + 1) <= (buflim)) );\nloop invariant ( ((buf) + 1) <= (buflim) ==> (((buf) + 1) >= 0) );\nloop invariant ( ((buf) + 1) >= 0 ==> (((buf) + 1) < (bufferlen)) );\nloop invariant ( ((buf) + 1) >= 0 ==> (((buf) + 1) < (buflim)) );\nloop invariant ( buf < buflim ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < bufferlen );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen;\nloop invariant in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf < bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf == buflim ==> in >= inlen;\nloop invariant in >= 0 ==> 0 <= buf < bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant !(__BLAST_NONDET ==> buf == buflim);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < buflim;\nloop invariant 1 <= buf;\nloop invariant buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in <= buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf;\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= in) ==> (in <= inlen);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= in) ==> (in <= inlen);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant 0 <= buf <= buflim ==> buf < bufferlen;\nloop invariant 0 <= in <= inlen ==> in < inlen;\nloop invariant 0 <= buf <= buflim ==> 0 <= buf;\nloop invariant 0 <= in <= inlen ==> 0 <= in;\nloop invariant 0 <= buf <= buflim ==> 0 <= buflim;\nloop invariant 0 <= in <= inlen ==> 0 <= inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf <= bufferlen - 2;\nloop invariant buf <= bufferlen - 2;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= buflim ==> buf < bufferlen;\nloop invariant 0 <= in <= inlen - 1 ==> in < inlen;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= buf <= buflim;\nloop invariant in > 0;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant bufferlen > 1;\nloop invariant inlen > 0;\nloop invariant bufferlen >= inlen;\nloop invariant buf <= buflim;\nloop invariant in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n\nloop invariant i3: in <= inlen;\n\nloop invariant i5: bufferlen > 1;\nloop invariant i6: inlen > 0;\n\nloop invariant i8: buf <= buflim;\nloop invariant i9: in < inlen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= __BLAST_NONDET <= 1;\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf <= bufferlen;\nloop invariant in <= inlen;\nloop invariant (buf == buflim) -> (__BLAST_NONDET == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= buf <= bufferlen;\nloop invariant i3: 0 <= in <= inlen;\nloop invariant i4: buf <= buflim;\nloop invariant i5: in <= inlen;\nloop invariant i6: buf <= bufferlen;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 53,
                "annotations": "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant 0 <= in;\nloop invariant in <= inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim <= bufferlen - 2;\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant in < inlen;\nloop invariant buflim <= bufferlen - 2;\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant 0 <= buf;\nloop invariant buf <= bufferlen;\nloop invariant __BLAST_NONDET ==> buf == buflim;\nloop invariant __BLAST_NONDET ==> buf == bufferlen - 1;\nloop invariant __BLAST_NONDET ==> buf == bufferlen;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 1;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 2;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 3;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 4;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 5;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 6;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 7;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 8;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 9;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 10;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 11;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 12;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 13;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 14;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 15;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 16;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 17;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 18;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 19;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 20;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 21;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 22;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 23;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 24;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 25;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 26;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 27;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 28;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 29;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 30;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 31;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 32;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 33;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 34;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 35;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 36;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 37;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 38;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 39;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 40;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 41;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 42;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 43;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 44;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 45;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 46;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 47;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 48;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 49;\nloop invariant __BLAST_NONDET ==> buf == bufferlen + 50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf;\nloop invariant i2: buf <= bufferlen;\nloop invariant i3: 0 <= in;\nloop invariant i4: in <= inlen;\nloop invariant i5: 0 <= buflim;\nloop invariant i6: buflim <= bufferlen - 2;\nloop invariant i7: in < inlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buf <= buflim;\nloop invariant buflim <= bufferlen - 2;\nloop invariant inlen > 0;\nloop invariant bufferlen > 1;\nloop invariant in < inlen - 1;\nloop invariant buf < buflim + 1;\nloop invariant buflim < bufferlen - 1;\nloop invariant bufferlen - 2 <= buflim;\nloop invariant 0 <= buf + 1;\nloop invariant buf + 1 < bufferlen;\nloop invariant 0 <= buf + 1;\nloop invariant buf + 1 < bufferlen;\nloop invariant 1 <= in;\nloop invariant in <= inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf < bufferlen;\nloop invariant i4: in < inlen;\nloop invariant i5: buf <= buflim;\nloop invariant i6: buflim <= bufferlen - 2;\nloop invariant i7: inlen > 0;\nloop invariant i8: bufferlen > 1;\n\nloop invariant i10: buf < buflim + 1;\nloop invariant i11: buflim < bufferlen - 1;\nloop invariant i12: bufferlen - 2 <= buflim;\nloop invariant i13: 0 <= buf + 1;\nloop invariant i14: buf + 1 < bufferlen;\n\nloop invariant i16: in <= inlen;\nloop invariant i17: 0 <= buf;\nloop invariant i18: 0 <= in;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant (in < inlen) ==> (buf < buflim);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\nloop invariant (buf < buflim) ==> (0 <= in);\nloop invariant (buf < buflim) ==> (buf < bufferlen);\nloop invariant (buf < buflim) ==> (in < inlen);\nloop invariant (buf < buflim) ==> (0 <= buf);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\n\nloop invariant i4: (buf < buflim) ==> (in < inlen);\nloop invariant i5: (buf < buflim) ==> (0 <= buf);\nloop invariant i6: (buf < buflim) ==> (0 <= in);\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant ( ( ((buf) + 2) == ((bufferlen)) ) ==> (((buf) == (buflim)) ==> (buf < bufferlen)) );\nloop invariant ( ((buf) <= (buflim)) ==> (((buf) + 1) <= (buflim)) );\nloop invariant ( ((buf) < (buflim)) ==> (((buf) + 1) <= (buflim)) );\nloop invariant ( (buf >= 0) ==> (((buf) + 1) >= 0) );\nloop invariant ( ((buf) + 1) < (bufferlen) ==> (((buf) + 1) <= (buflim)) );\nloop invariant ( ((buf) + 1) >= 0 ==> (((buf) + 1) <= (buflim)) );\nloop invariant ( ((buf) + 1) <= (buflim) ==> (((buf) + 1) >= 0) );\nloop invariant ( ((buf) + 1) >= 0 ==> (((buf) + 1) < (bufferlen)) );\nloop invariant ( ((buf) + 1) >= 0 ==> (((buf) + 1) < (buflim)) );\nloop invariant ( buf < buflim ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < bufferlen );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: ( ( ((buf) + 2) == ((bufferlen)) ) ==> (((buf) == (buflim)) ==> (buf < bufferlen)) );\n\nloop invariant i3: ( ((buf) < (buflim)) ==> (((buf) + 1) <= (buflim)) );\nloop invariant i4: ( (buf >= 0) ==> (((buf) + 1) >= 0) );\n\n\nloop invariant i7: ( ((buf) + 1) <= (buflim) ==> (((buf) + 1) >= 0) );\n\n\n\n\n\n\nloop invariant i14: ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant i15: ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen - 1;\nloop invariant 0 <= buflim <= bufferlen - 2;\nloop invariant buf <= buflim + 1;\nloop invariant in <= inlen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen - 1;\nloop invariant i3: 0 <= buflim <= bufferlen - 2;\nloop invariant i4: buf <= buflim + 1;\nloop invariant i5: in <= inlen - 1;\nloop invariant i6: 0 <= buf <= bufferlen - 1;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen - 1;\nloop invariant 0 <= in <= inlen;\nloop invariant in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: in < inlen;\nloop invariant i4: buf <= buflim;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf == buflim ==> in >= inlen;\nloop invariant in >= 0 ==> 0 <= buf < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf < buflim ==> in < inlen;\n\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant !(__BLAST_NONDET ==> buf == buflim);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: in <= inlen;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < buflim;\nloop invariant 1 <= buf;\nloop invariant buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in <= buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\nloop invariant buf < buflim;\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant in < buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf;\n\nloop invariant i3: 0 <= in;\nloop invariant i4: in < inlen;\n\n\n\nloop invariant i8: buf <= buflim;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf;\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= in) ==> (in <= inlen);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (1 <= in) ==> (in <= inlen);\nloop invariant (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant (0 <= buf) ==> (buf <= buflim + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf;\n\nloop invariant i3: (1 <= in) ==> (in <= inlen);\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\n\nloop invariant i4: in < inlen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant 0 <= buf <= buflim ==> buf < bufferlen;\nloop invariant 0 <= in <= inlen ==> in < inlen;\nloop invariant 0 <= buf <= buflim ==> 0 <= buf;\nloop invariant 0 <= in <= inlen ==> 0 <= in;\nloop invariant 0 <= buf <= buflim ==> 0 <= buflim;\nloop invariant 0 <= in <= inlen ==> 0 <= inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\n\nloop invariant i5: 0 <= in <= inlen ==> in < inlen;\nloop invariant i6: 0 <= buf <= buflim ==> 0 <= buf;\nloop invariant i7: 0 <= in <= inlen ==> 0 <= in;\nloop invariant i8: 0 <= buf <= buflim ==> 0 <= buflim;\nloop invariant i9: 0 <= in <= inlen ==> 0 <= inlen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buf <= buflim;\nloop invariant buf <= bufferlen - 2;\nloop invariant buf <= bufferlen - 2;\nloop invariant in <= inlen - 1;\nloop invariant 0 <= buf <= buflim ==> buf < bufferlen;\nloop invariant 0 <= in <= inlen - 1 ==> in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= in <= inlen;\nloop invariant i2: 0 <= buf <= buflim;\n\nloop invariant i4: in < inlen;\nloop invariant i5: buf <= buflim;\n\nloop invariant i7: in <= inlen - 1;\n\nloop invariant i9: 0 <= in <= inlen - 1 ==> in < inlen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 39: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 1 <= buf <= buflim;\nloop invariant i2: in > 0;\nloop invariant i3: in <= inlen;\nloop invariant i4: buf < bufferlen;\nloop invariant i5: bufferlen > 1;\nloop invariant i6: inlen > 0;\nloop invariant i7: bufferlen >= inlen;\nloop invariant i8: buf <= buflim;\nloop invariant i9: in < inlen;\nloop invariant i10: 0 <= __BLAST_NONDET <= 1;\nloop invariant i11: 0 <= buf <= bufferlen;\nloop invariant i12: 0 <= in <= inlen;\nloop invariant i13: buf <= bufferlen;\nloop invariant i14: (buf == buflim) -> (__BLAST_NONDET == 0);\nloop invariant i15: 0 <= buf;\nloop invariant i16: 0 <= in;\nloop invariant i17: 0 <= buflim;\nloop invariant i18: buflim <= bufferlen - 2;\nloop invariant i19: __BLAST_NONDET ==> buf == buflim;\nloop invariant i20: __BLAST_NONDET ==> buf == bufferlen - 1;\nloop invariant i21: __BLAST_NONDET ==> buf == bufferlen;\nloop invariant i22: __BLAST_NONDET ==> buf == bufferlen + 1;\nloop invariant i23: __BLAST_NONDET ==> buf == bufferlen + 2;\nloop invariant i24: __BLAST_NONDET ==> buf == bufferlen + 3;\nloop invariant i25: __BLAST_NONDET ==> buf == bufferlen + 4;\nloop invariant i26: __BLAST_NONDET ==> buf == bufferlen + 5;\nloop invariant i27: __BLAST_NONDET ==> buf == bufferlen + 6;\nloop invariant i28: __BLAST_NONDET ==> buf == bufferlen + 7;\nloop invariant i29: __BLAST_NONDET ==> buf == bufferlen + 8;\nloop invariant i30: __BLAST_NONDET ==> buf == bufferlen + 9;\nloop invariant i31: __BLAST_NONDET ==> buf == bufferlen + 10;\nloop invariant i32: __BLAST_NONDET ==> buf == bufferlen + 11;\nloop invariant i33: __BLAST_NONDET ==> buf == bufferlen + 12;\nloop invariant i34: __BLAST_NONDET ==> buf == bufferlen + 13;\nloop invariant i35: __BLAST_NONDET ==> buf == bufferlen + 14;\nloop invariant i36: __BLAST_NONDET ==> buf == bufferlen + 15;\nloop invariant i37: __BLAST_NONDET ==> buf == bufferlen + 16;\nloop invariant i38: __BLAST_NONDET ==> buf == bufferlen + 17;\nloop invariant i39: __BLAST_NONDET ==> buf == bufferlen + 18;\nloop invariant i40: __BLAST_NONDET ==> buf == bufferlen + 19;\nloop invariant i41: __BLAST_NONDET ==> buf == bufferlen + 20;\nloop invariant i42: __BLAST_NONDET ==> buf == bufferlen + 21;\nloop invariant i43: __BLAST_NONDET ==> buf == bufferlen + 22;\nloop invariant i44: __BLAST_NONDET ==> buf == bufferlen + 23;\nloop invariant i45: __BLAST_NONDET ==> buf == bufferlen + 24;\nloop invariant i46: __BLAST_NONDET ==> buf == bufferlen + 25;\nloop invariant i47: __BLAST_NONDET ==> buf == bufferlen + 26;\nloop invariant i48: __BLAST_NONDET ==> buf == bufferlen + 27;\nloop invariant i49: __BLAST_NONDET ==> buf == bufferlen + 28;\nloop invariant i50: __BLAST_NONDET ==> buf == bufferlen + 29;\nloop invariant i51: __BLAST_NONDET ==> buf == bufferlen + 30;\nloop invariant i52: __BLAST_NONDET ==> buf == bufferlen + 31;\nloop invariant i53: __BLAST_NONDET ==> buf == bufferlen + 32;\nloop invariant i54: __BLAST_NONDET ==> buf == bufferlen + 33;\nloop invariant i55: __BLAST_NONDET ==> buf == bufferlen + 34;\nloop invariant i56: __BLAST_NONDET ==> buf == bufferlen + 35;\nloop invariant i57: __BLAST_NONDET ==> buf == bufferlen + 36;\nloop invariant i58: __BLAST_NONDET ==> buf == bufferlen + 37;\nloop invariant i59: __BLAST_NONDET ==> buf == bufferlen + 38;\nloop invariant i60: __BLAST_NONDET ==> buf == bufferlen + 39;\nloop invariant i61: __BLAST_NONDET ==> buf == bufferlen + 40;\nloop invariant i62: __BLAST_NONDET ==> buf == bufferlen + 41;\nloop invariant i63: __BLAST_NONDET ==> buf == bufferlen + 42;\nloop invariant i64: __BLAST_NONDET ==> buf == bufferlen + 43;\nloop invariant i65: __BLAST_NONDET ==> buf == bufferlen + 44;\nloop invariant i66: __BLAST_NONDET ==> buf == bufferlen + 45;\nloop invariant i67: __BLAST_NONDET ==> buf == bufferlen + 46;\nloop invariant i68: __BLAST_NONDET ==> buf == bufferlen + 47;\nloop invariant i69: __BLAST_NONDET ==> buf == bufferlen + 48;\nloop invariant i70: __BLAST_NONDET ==> buf == bufferlen + 49;\nloop invariant i71: __BLAST_NONDET ==> buf == bufferlen + 50;\nloop invariant i72: 0 <= buf <= buflim;\nloop invariant i73: in < inlen - 1;\nloop invariant i74: buf < buflim + 1;\nloop invariant i75: buflim < bufferlen - 1;\nloop invariant i76: bufferlen - 2 <= buflim;\nloop invariant i77: 0 <= buf + 1;\nloop invariant i78: buf + 1 < bufferlen;\nloop invariant i79: 1 <= in;\nloop invariant i80: (in < inlen) ==> (buf < buflim);\nloop invariant i81: (buf < buflim) ==> (in < inlen);\nloop invariant i82: (buf < buflim) ==> (0 <= buf);\nloop invariant i83: (buf < buflim) ==> (0 <= in);\nloop invariant i84: (buf < buflim) ==> (buf < bufferlen);\nloop invariant i85: ( ( ((buf) + 2) == ((bufferlen)) ) ==> (((buf) == (buflim)) ==> (buf < bufferlen)) );\nloop invariant i86: ( ((buf) <= (buflim)) ==> (((buf) + 1) <= (buflim)) );\nloop invariant i87: ( ((buf) < (buflim)) ==> (((buf) + 1) <= (buflim)) );\nloop invariant i88: ( (buf >= 0) ==> (((buf) + 1) >= 0) );\nloop invariant i89: ( ((buf) + 1) < (bufferlen) ==> (((buf) + 1) <= (buflim)) );\nloop invariant i90: ( ((buf) + 1) >= 0 ==> (((buf) + 1) <= (buflim)) );\nloop invariant i91: ( ((buf) + 1) <= (buflim) ==> (((buf) + 1) >= 0) );\nloop invariant i92: ( ((buf) + 1) >= 0 ==> (((buf) + 1) < (bufferlen)) );\nloop invariant i93: ( ((buf) + 1) >= 0 ==> (((buf) + 1) < (buflim)) );\nloop invariant i94: ( buf < buflim ==> ((buf) + 1) < buflim );\nloop invariant i95: ( buf < bufferlen ==> ((buf) + 1) < bufferlen );\nloop invariant i96: ( buf < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant i97: ( buflim < bufferlen ==> ((buf) + 1) < buflim );\nloop invariant i98: ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant i99: ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant i100: 0 <= in <= inlen - 1;\nloop invariant i101: 0 <= buflim <= bufferlen - 2;\nloop invariant i102: buf <= buflim + 1;\nloop invariant i103: in <= inlen - 1;\nloop invariant i104: 0 <= buf <= bufferlen - 1;\nloop invariant i105: 0 <= buf < bufferlen;\nloop invariant i106: buf < buflim ==> in < inlen;\nloop invariant i107: buf == buflim ==> in >= inlen;\nloop invariant i108: in >= 0 ==> 0 <= buf < bufferlen;\nloop invariant i109: !(__BLAST_NONDET ==> buf == buflim);\nloop invariant i110: in < buflim;\nloop invariant i111: buf < buflim;\nloop invariant i112: 1 <= buf;\nloop invariant i113: in <= buflim;\nloop invariant i114: (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant i115: (1 <= in) ==> (in <= inlen);\nloop invariant i116: (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant i117: 0 <= buf <= buflim ==> buf < bufferlen;\nloop invariant i118: 0 <= in <= inlen ==> in < inlen;\nloop invariant i119: 0 <= buf <= buflim ==> 0 <= buf;\nloop invariant i120: 0 <= in <= inlen ==> 0 <= in;\nloop invariant i121: 0 <= buf <= buflim ==> 0 <= buflim;\nloop invariant i122: 0 <= in <= inlen ==> 0 <= inlen;\nloop invariant i123: buf <= bufferlen - 2;\nloop invariant i124: 0 <= in <= inlen - 1 ==> in < inlen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 59,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n\nloop invariant i3: in <= inlen;\nloop invariant i4: buf < bufferlen;\nloop invariant i5: bufferlen > 1;\nloop invariant i6: inlen > 0;\n\nloop invariant i8: buf <= buflim;\nloop invariant i9: in < inlen;\n\nloop invariant i11: 0 <= buf <= bufferlen;\nloop invariant i12: 0 <= in <= inlen;\nloop invariant i13: buf <= bufferlen;\n\nloop invariant i15: 0 <= buf;\nloop invariant i16: 0 <= in;\nloop invariant i17: 0 <= buflim;\nloop invariant i18: buflim <= bufferlen - 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: 0 <= buf <= buflim;\n\nloop invariant i74: buf < buflim + 1;\nloop invariant i75: buflim < bufferlen - 1;\nloop invariant i76: bufferlen - 2 <= buflim;\nloop invariant i77: 0 <= buf + 1;\nloop invariant i78: buf + 1 < bufferlen;\n\n\nloop invariant i81: (buf < buflim) ==> (in < inlen);\nloop invariant i82: (buf < buflim) ==> (0 <= buf);\nloop invariant i83: (buf < buflim) ==> (0 <= in);\nloop invariant i84: (buf < buflim) ==> (buf < bufferlen);\nloop invariant i85: ( ( ((buf) + 2) == ((bufferlen)) ) ==> (((buf) == (buflim)) ==> (buf < bufferlen)) );\n\nloop invariant i87: ( ((buf) < (buflim)) ==> (((buf) + 1) <= (buflim)) );\nloop invariant i88: ( (buf >= 0) ==> (((buf) + 1) >= 0) );\n\n\nloop invariant i91: ( ((buf) + 1) <= (buflim) ==> (((buf) + 1) >= 0) );\nloop invariant i92: ( ((buf) + 1) >= 0 ==> (((buf) + 1) < (bufferlen)) );\n\n\nloop invariant i95: ( buf < bufferlen ==> ((buf) + 1) < bufferlen );\n\n\nloop invariant i98: ( buf < bufferlen ==> (((buf) + 1) < bufferlen) ==> ((buf) < bufferlen) );\nloop invariant i99: ( buflim < bufferlen ==> (((buf) + 1) < buflim) ==> ((buf) < bufferlen) );\nloop invariant i100: 0 <= in <= inlen - 1;\nloop invariant i101: 0 <= buflim <= bufferlen - 2;\nloop invariant i102: buf <= buflim + 1;\nloop invariant i103: in <= inlen - 1;\nloop invariant i104: 0 <= buf <= bufferlen - 1;\nloop invariant i105: 0 <= buf < bufferlen;\nloop invariant i106: buf < buflim ==> in < inlen;\n\nloop invariant i108: in >= 0 ==> 0 <= buf < bufferlen;\n\n\n\n\n\nloop invariant i114: (1 <= buf) ==> (buf <= buflim + 1);\nloop invariant i115: (1 <= in) ==> (in <= inlen);\nloop invariant i116: (0 <= buf) ==> (buf <= buflim + 1);\nloop invariant i117: 0 <= buf <= buflim ==> buf < bufferlen;\nloop invariant i118: 0 <= in <= inlen ==> in < inlen;\nloop invariant i119: 0 <= buf <= buflim ==> 0 <= buf;\nloop invariant i120: 0 <= in <= inlen ==> 0 <= in;\nloop invariant i121: 0 <= buf <= buflim ==> 0 <= buflim;\nloop invariant i122: 0 <= in <= inlen ==> 0 <= inlen;\nloop invariant i123: buf <= bufferlen - 2;\nloop invariant i124: 0 <= in <= inlen - 1 ==> in < inlen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 167,
        "success_count": 137,
        "failure_count": 30,
        "success_rate": 0.8203592814371258
    }
}