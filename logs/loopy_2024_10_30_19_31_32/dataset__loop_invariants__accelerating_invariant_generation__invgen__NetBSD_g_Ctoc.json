{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len == 0 ==> i >= j;\nloop invariant len == 0 ==> i <= BASE_SZ;\nloop invariant len == 0 ==> j <= BASE_SZ;\nloop invariant len == 0 ==> i == j;\nloop invariant len == 0 ==> i == BASE_SZ;\nloop invariant len == 0 ==> j == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i <= j;\nloop invariant len >= 0; loop invariant i == j;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i < len + 1;\nloop invariant j < len + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant i >= j;\nloop invariant len >= 0;\nloop invariant BASE_SZ >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant (i - j) <= len;\nloop invariant (i - j) == len ==> (i == j);\nloop invariant (i - j) < len ==> (len > 0);\nloop invariant (i - j) == len ==> (len == 0);\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (i == j));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant (j <= i) ==> (len <= BASE_SZ - j);\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant (i >= j) ==> (len >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i == j + len;\nloop invariant len == 0 ==> len == 0;\nloop invariant i == j + len ==> i == j + len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i >= j;\nloop invariant j <= i;\nloop invariant len <= BASE_SZ - i;\nloop invariant len <= BASE_SZ - j;\nloop invariant i + j <= BASE_SZ;\nloop invariant j + len <= BASE_SZ;\nloop invariant i + len <= BASE_SZ;\nloop invariant j + i <= BASE_SZ;\nloop invariant 2 * j <= BASE_SZ;\nloop invariant 2 * i <= BASE_SZ;\nloop invariant 2 * len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= len && i <= BASE_SZ && i <= BASE_SZ * (BASE_SZ - 1) / 2 && j <= i && j <= len && j <= BASE_SZ && j <= BASE_SZ * (BASE_SZ - 1) / 2 && len >= 0 && len <= BASE_SZ && len <= BASE_SZ * (BASE_SZ - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len == 0 ==> i == j;\nloop invariant i <= j;\nloop invariant j <= i + len;\nloop invariant len == 0 ==> i == j + len;\nloop invariant i <= j + len;\nloop invariant j <= i + len - 1;\nloop invariant len == 0 ==> i == j + len - 1;\nloop invariant i <= j + len - 1;\nloop invariant j <= i + len - 2;\nloop invariant len == 0 ==> i == j + len - 2;\nloop invariant i <= j + len - 2;\nloop invariant j <= i + len - 3;\nloop invariant len == 0 ==> i == j + len - 3;\nloop invariant i <= j + len - 3;\nloop invariant j <= i + len - 4;\nloop invariant len == 0 ==> i == j + len - 4;\nloop invariant i <= j + len - 4;\nloop invariant j <= i + len - 5;\nloop invariant len == 0 ==> i == j + len - 5;\nloop invariant i <= j + len - 5;\nloop invariant j <= i + len - 6;\nloop invariant len == 0 ==> i == j + len - 6;\nloop invariant i <= j + len - 6;\nloop invariant j <= i + len - 7;\nloop invariant len == 0 ==> i == j + len - 7;\nloop invariant i <= j + len - 7;\nloop invariant j <= i + len - 8;\nloop invariant len == 0 ==> i == j + len - 8;\nloop invariant i <= j + len - 8;\nloop invariant j <= i + len - 9;\nloop invariant len == 0 ==> i == j + len - 9;\nloop invariant i <= j + len - 9;\nloop invariant j <= i + len - 10;\nloop invariant len == 0 ==> i == j + len - 10;\nloop invariant i <= j + len - 10;\nloop invariant j <= i + len - 11;\nloop invariant len == 0 ==> i == j + len - 11;\nloop invariant i <= j + len - 11;\nloop invariant j <= i + len - 12;\nloop invariant len == 0 ==> i == j + len - 12;\nloop invariant i <= j + len - 12;\nloop invariant j <= i + len - 13;\nloop invariant len == 0 ==> i == j + len - 13;\nloop invariant i <= j + len - 13;\nloop invariant j <= i + len - 14;\nloop invariant len == 0 ==> i == j + len - 14;\nloop invariant i <= j + len - 14;\nloop invariant j <= i + len - 15;\nloop invariant len == 0 ==> i == j + len - 15;\nloop invariant i <= j + len - 15;\nloop invariant j <= i + len - 16;\nloop invariant len == 0 ==> i == j + len - 16;\nloop invariant i <= j + len - 16;\nloop invariant j <= i + len - 17;\nloop invariant len == 0 ==> i == j + len - 17;\nloop invariant i <= j + len - 17;\nloop invariant j <= i + len - 18;\nloop invariant len == 0 ==> i == j + len - 18;\nloop invariant i <= j + len - 18;\nloop invariant j <= i + len - 19;\nloop invariant len == 0 ==> i == j + len - 19;\nloop invariant i <= j + len - 19;\nloop invariant j <= i + len - 20;\nloop invariant len == 0 ==> i == j + len - 20;\nloop invariant i <= j + len - 20;\nloop invariant j <= i + len - 21;\nloop invariant len == 0 ==> i == j + len - 21;\nloop invariant i <= j + len - 21;\nloop invariant j <= i + len - 22;\nloop invariant len == 0 ==> i == j + len - 22;\nloop invariant i <= j + len - 22;\nloop invariant j <= i + len - 23;\nloop invariant len == 0 ==> i == j + len - 23;\nloop invariant i <= j + len - 23;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant i == len + j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len == BASE_SZ - (i + j);\nloop invariant i + j < BASE_SZ;\nloop invariant len > 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i < BASE_SZ;\nloop invariant j < BASE_SZ;\nloop invariant i + j < BASE_SZ;\nloop invariant len > 0;\nloop invariant i < j;\nloop invariant i < BASE_SZ;\nloop invariant j < BASE_SZ;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len == 0 ==> i >= j;\nloop invariant len == 0 ==> i <= BASE_SZ;\nloop invariant len == 0 ==> j <= BASE_SZ;\nloop invariant len == 0 ==> i == j;\nloop invariant len == 0 ==> i == BASE_SZ;\nloop invariant len == 0 ==> j == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: len == 0 ==> i >= j;\nloop invariant i5: len == 0 ==> i <= BASE_SZ;\nloop invariant i6: len == 0 ==> j <= BASE_SZ;\nloop invariant i7: len == 0 ==> i == j;\nloop invariant i8: len == 0 ==> i == BASE_SZ;\nloop invariant i9: len == 0 ==> j == BASE_SZ;\nloop invariant i10: len == 0 ==> i == j == BASE_SZ;\nloop invariant i11: len == 0 ==> i == j == BASE_SZ == BASE_SZ;\nloop invariant i12: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i13: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i14: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i15: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i16: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i17: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i18: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i19: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i20: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i21: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i22: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i23: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i24: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i25: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i26: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i27: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i28: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i29: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i <= j;\nloop invariant len >= 0; loop invariant i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: i <= j;\nloop invariant i4: len >= 0; loop invariant i == j;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\n\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant i < len + 1;\nloop invariant j < len + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: i <= BASE_SZ;\nloop invariant i6: j <= BASE_SZ;\nloop invariant i7: i < len + 1;\nloop invariant i8: j < len + 1;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= len;\nloop invariant 0 <= j <= len;\nloop invariant i >= j;\nloop invariant len >= 0;\nloop invariant BASE_SZ >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= len;\nloop invariant i2: 0 <= j <= len;\nloop invariant i3: i >= j;\nloop invariant i4: len >= 0;\nloop invariant i5: BASE_SZ >= 0;\nloop invariant i6: i <= BASE_SZ;\nloop invariant i7: j <= BASE_SZ;\nloop invariant i8: len <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant (i - j) <= len;\nloop invariant (i - j) == len ==> (i == j);\nloop invariant (i - j) < len ==> (len > 0);\nloop invariant (i - j) == len ==> (len == 0);\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (i == j));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: (i - j) <= len;\nloop invariant i5: (i - j) == len ==> (i == j);\nloop invariant i6: (i - j) < len ==> (len > 0);\nloop invariant i7: (i - j) == len ==> (len == 0);\nloop invariant i8: (i - j) < len ==> (len > 0 ==> (i == j));\nloop invariant i9: (i - j) == len ==> (len == 0 ==> (i == j));\nloop invariant i10: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i));\nloop invariant i11: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i));\nloop invariant i12: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i13: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i14: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant i15: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant i16: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0));\nloop invariant i17: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0));\nloop invariant i18: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j));\nloop invariant i19: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j));\nloop invariant i20: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i));\nloop invariant i21: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i));\nloop invariant i22: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i23: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i24: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant i25: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant i26: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (i == j));\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len <= BASE_SZ;\nloop invariant (j <= i) ==> (len <= BASE_SZ - j);\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant (i >= j) ==> (len >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 1 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: (j <= i) ==> (len <= BASE_SZ - j);\nloop invariant i6: i <= BASE_SZ;\nloop invariant i7: j <= BASE_SZ;\nloop invariant i8: len >= 0;\nloop invariant i9: (i >= j) ==> (len >= 0);\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= BASE_SZ;\nloop invariant j <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= len <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: 0 <= j <= BASE_SZ;\nloop invariant i4: len >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\nloop invariant i7: i <= BASE_SZ;\nloop invariant i8: j <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant i == j + len;\nloop invariant len == 0 ==> len == 0;\nloop invariant i == j + len ==> i == j + len;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: i == j + len;\nloop invariant i4: len == 0 ==> len == 0;\nloop invariant i5: i == j + len ==> i == j + len;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len >= 0;\nloop invariant len <= BASE_SZ;\nloop invariant i >= j;\nloop invariant j <= i;\nloop invariant len <= BASE_SZ - i;\nloop invariant len <= BASE_SZ - j;\nloop invariant i + j <= BASE_SZ;\nloop invariant j + len <= BASE_SZ;\nloop invariant i + len <= BASE_SZ;\nloop invariant j + i <= BASE_SZ;\nloop invariant 2 * j <= BASE_SZ;\nloop invariant 2 * i <= BASE_SZ;\nloop invariant 2 * len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\nloop invariant i + j + len <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: len <= BASE_SZ;\nloop invariant i5: i >= j;\nloop invariant i6: j <= i;\nloop invariant i7: len <= BASE_SZ - i;\nloop invariant i8: len <= BASE_SZ - j;\nloop invariant i9: i + j <= BASE_SZ;\nloop invariant i10: j + len <= BASE_SZ;\nloop invariant i11: i + len <= BASE_SZ;\nloop invariant i12: j + i <= BASE_SZ;\nloop invariant i13: 2 * j <= BASE_SZ;\nloop invariant i14: 2 * i <= BASE_SZ;\nloop invariant i15: 2 * len <= BASE_SZ;\nloop invariant i16: i + j + len <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= len && i <= BASE_SZ && i <= BASE_SZ * (BASE_SZ - 1) / 2 && j <= i && j <= len && j <= BASE_SZ && j <= BASE_SZ * (BASE_SZ - 1) / 2 && len >= 0 && len <= BASE_SZ && len <= BASE_SZ * (BASE_SZ - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 1 <= i <= len && i <= BASE_SZ && i <= BASE_SZ * (BASE_SZ - 1) / 2 && j <= i && j <= len && j <= BASE_SZ && j <= BASE_SZ * (BASE_SZ - 1) / 2 && len >= 0 && len <= BASE_SZ && len <= BASE_SZ * (BASE_SZ - 1) / 2;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= len <= BASE_SZ;\nloop invariant len == 0 ==> i == j;\nloop invariant i <= j;\nloop invariant j <= i + len;\nloop invariant len == 0 ==> i == j + len;\nloop invariant i <= j + len;\nloop invariant j <= i + len - 1;\nloop invariant len == 0 ==> i == j + len - 1;\nloop invariant i <= j + len - 1;\nloop invariant j <= i + len - 2;\nloop invariant len == 0 ==> i == j + len - 2;\nloop invariant i <= j + len - 2;\nloop invariant j <= i + len - 3;\nloop invariant len == 0 ==> i == j + len - 3;\nloop invariant i <= j + len - 3;\nloop invariant j <= i + len - 4;\nloop invariant len == 0 ==> i == j + len - 4;\nloop invariant i <= j + len - 4;\nloop invariant j <= i + len - 5;\nloop invariant len == 0 ==> i == j + len - 5;\nloop invariant i <= j + len - 5;\nloop invariant j <= i + len - 6;\nloop invariant len == 0 ==> i == j + len - 6;\nloop invariant i <= j + len - 6;\nloop invariant j <= i + len - 7;\nloop invariant len == 0 ==> i == j + len - 7;\nloop invariant i <= j + len - 7;\nloop invariant j <= i + len - 8;\nloop invariant len == 0 ==> i == j + len - 8;\nloop invariant i <= j + len - 8;\nloop invariant j <= i + len - 9;\nloop invariant len == 0 ==> i == j + len - 9;\nloop invariant i <= j + len - 9;\nloop invariant j <= i + len - 10;\nloop invariant len == 0 ==> i == j + len - 10;\nloop invariant i <= j + len - 10;\nloop invariant j <= i + len - 11;\nloop invariant len == 0 ==> i == j + len - 11;\nloop invariant i <= j + len - 11;\nloop invariant j <= i + len - 12;\nloop invariant len == 0 ==> i == j + len - 12;\nloop invariant i <= j + len - 12;\nloop invariant j <= i + len - 13;\nloop invariant len == 0 ==> i == j + len - 13;\nloop invariant i <= j + len - 13;\nloop invariant j <= i + len - 14;\nloop invariant len == 0 ==> i == j + len - 14;\nloop invariant i <= j + len - 14;\nloop invariant j <= i + len - 15;\nloop invariant len == 0 ==> i == j + len - 15;\nloop invariant i <= j + len - 15;\nloop invariant j <= i + len - 16;\nloop invariant len == 0 ==> i == j + len - 16;\nloop invariant i <= j + len - 16;\nloop invariant j <= i + len - 17;\nloop invariant len == 0 ==> i == j + len - 17;\nloop invariant i <= j + len - 17;\nloop invariant j <= i + len - 18;\nloop invariant len == 0 ==> i == j + len - 18;\nloop invariant i <= j + len - 18;\nloop invariant j <= i + len - 19;\nloop invariant len == 0 ==> i == j + len - 19;\nloop invariant i <= j + len - 19;\nloop invariant j <= i + len - 20;\nloop invariant len == 0 ==> i == j + len - 20;\nloop invariant i <= j + len - 20;\nloop invariant j <= i + len - 21;\nloop invariant len == 0 ==> i == j + len - 21;\nloop invariant i <= j + len - 21;\nloop invariant j <= i + len - 22;\nloop invariant len == 0 ==> i == j + len - 22;\nloop invariant i <= j + len - 22;\nloop invariant j <= i + len - 23;\nloop invariant len == 0 ==> i == j + len - 23;\nloop invariant i <= j + len - 23;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: 0 <= len <= BASE_SZ;\nloop invariant i4: len == 0 ==> i == j;\nloop invariant i5: i <= j;\nloop invariant i6: j <= i + len;\nloop invariant i7: len == 0 ==> i == j + len;\nloop invariant i8: i <= j + len;\nloop invariant i9: j <= i + len - 1;\nloop invariant i10: len == 0 ==> i == j + len - 1;\nloop invariant i11: i <= j + len - 1;\nloop invariant i12: j <= i + len - 2;\nloop invariant i13: len == 0 ==> i == j + len - 2;\nloop invariant i14: i <= j + len - 2;\nloop invariant i15: j <= i + len - 3;\nloop invariant i16: len == 0 ==> i == j + len - 3;\nloop invariant i17: i <= j + len - 3;\nloop invariant i18: j <= i + len - 4;\nloop invariant i19: len == 0 ==> i == j + len - 4;\nloop invariant i20: i <= j + len - 4;\nloop invariant i21: j <= i + len - 5;\nloop invariant i22: len == 0 ==> i == j + len - 5;\nloop invariant i23: i <= j + len - 5;\nloop invariant i24: j <= i + len - 6;\nloop invariant i25: len == 0 ==> i == j + len - 6;\nloop invariant i26: i <= j + len - 6;\nloop invariant i27: j <= i + len - 7;\nloop invariant i28: len == 0 ==> i == j + len - 7;\nloop invariant i29: i <= j + len - 7;\nloop invariant i30: j <= i + len - 8;\nloop invariant i31: len == 0 ==> i == j + len - 8;\nloop invariant i32: i <= j + len - 8;\nloop invariant i33: j <= i + len - 9;\nloop invariant i34: len == 0 ==> i == j + len - 9;\nloop invariant i35: i <= j + len - 9;\nloop invariant i36: j <= i + len - 10;\nloop invariant i37: len == 0 ==> i == j + len - 10;\nloop invariant i38: i <= j + len - 10;\nloop invariant i39: j <= i + len - 11;\nloop invariant i40: len == 0 ==> i == j + len - 11;\nloop invariant i41: i <= j + len - 11;\nloop invariant i42: j <= i + len - 12;\nloop invariant i43: len == 0 ==> i == j + len - 12;\nloop invariant i44: i <= j + len - 12;\nloop invariant i45: j <= i + len - 13;\nloop invariant i46: len == 0 ==> i == j + len - 13;\nloop invariant i47: i <= j + len - 13;\nloop invariant i48: j <= i + len - 14;\nloop invariant i49: len == 0 ==> i == j + len - 14;\nloop invariant i50: i <= j + len - 14;\nloop invariant i51: j <= i + len - 15;\nloop invariant i52: len == 0 ==> i == j + len - 15;\nloop invariant i53: i <= j + len - 15;\nloop invariant i54: j <= i + len - 16;\nloop invariant i55: len == 0 ==> i == j + len - 16;\nloop invariant i56: i <= j + len - 16;\nloop invariant i57: j <= i + len - 17;\nloop invariant i58: len == 0 ==> i == j + len - 17;\nloop invariant i59: i <= j + len - 17;\nloop invariant i60: j <= i + len - 18;\nloop invariant i61: len == 0 ==> i == j + len - 18;\nloop invariant i62: i <= j + len - 18;\nloop invariant i63: j <= i + len - 19;\nloop invariant i64: len == 0 ==> i == j + len - 19;\nloop invariant i65: i <= j + len - 19;\nloop invariant i66: j <= i + len - 20;\nloop invariant i67: len == 0 ==> i == j + len - 20;\nloop invariant i68: i <= j + len - 20;\nloop invariant i69: j <= i + len - 21;\nloop invariant i70: len == 0 ==> i == j + len - 21;\nloop invariant i71: i <= j + len - 21;\nloop invariant i72: j <= i + len - 22;\nloop invariant i73: len == 0 ==> i == j + len - 22;\nloop invariant i74: i <= j + len - 22;\nloop invariant i75: j <= i + len - 23;\nloop invariant i76: len == 0 ==> i == j + len - 23;\nloop invariant i77: i <= j + len - 23;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= len;\nloop invariant 0 <= i <= len;\nloop invariant i == len + j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= len;\nloop invariant i2: 0 <= i <= len;\nloop invariant i3: i == len + j;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= BASE_SZ;\nloop invariant 0 <= i <= BASE_SZ;\nloop invariant len == BASE_SZ - (i + j);\nloop invariant i + j < BASE_SZ;\nloop invariant len > 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i < BASE_SZ;\nloop invariant j < BASE_SZ;\nloop invariant i + j < BASE_SZ;\nloop invariant len > 0;\nloop invariant i < j;\nloop invariant i < BASE_SZ;\nloop invariant j < BASE_SZ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= j <= BASE_SZ;\nloop invariant i2: 0 <= i <= BASE_SZ;\nloop invariant i3: len == BASE_SZ - (i + j);\nloop invariant i4: i + j < BASE_SZ;\nloop invariant i5: len > 0;\nloop invariant i6: i >= 0;\nloop invariant i7: j >= 0;\nloop invariant i8: i < BASE_SZ;\nloop invariant i9: j < BASE_SZ;\nloop invariant i10: i < j;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": true,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= BASE_SZ is inductive.\nloop invariant 0 <= j <= BASE_SZ is inductive.\nloop invariant len >= 0 is inductive.\nloop invariant len == 0 ==> i >= j is inductive.\nloop invariant len == 0 ==> i <= BASE_SZ is inductive.\nloop invariant len == 0 ==> j <= BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j is inductive.\nloop invariant len == 0 ==> i == BASE_SZ is inductive.\nloop invariant len == 0 ==> j == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ is inductive.\nloop invariant i <= j is inductive.\nloop invariant len >= 0; loop invariant i == j is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant j >= 0 is inductive.\nloop invariant len <= BASE_SZ is inductive.\nloop invariant i <= BASE_SZ is inductive.\nloop invariant j <= BASE_SZ is inductive.\nloop invariant i < len + 1 is inductive.\nloop invariant j < len + 1 is inductive.\nloop invariant 0 <= i <= len is inductive.\nloop invariant 0 <= j <= len is inductive.\nloop invariant i >= j is inductive.\nloop invariant BASE_SZ >= 0 is inductive.\nloop invariant 0 <= len <= BASE_SZ is inductive.\nloop invariant (i - j) <= len is inductive.\nloop invariant (i - j) == len ==> (i == j) is inductive.\nloop invariant (i - j) < len ==> (len > 0) is inductive.\nloop invariant (i - j) == len ==> (len == 0) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i)) is inductive.\nloop invariant (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i)) is inductive.\nloop invariant (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (i == j)) is inductive.\nloop invariant 1 <= i <= BASE_SZ is inductive.\nloop invariant (j <= i) ==> (len <= BASE_SZ - j) is inductive.\nloop invariant (i >= j) ==> (len >= 0) is inductive.\nloop invariant i == j + len is inductive.\nloop invariant len == 0 ==> len == 0 is inductive.\nloop invariant i == j + len ==> i == j + len is inductive.\nloop invariant j <= i is inductive.\nloop invariant len <= BASE_SZ - i is inductive.\nloop invariant len <= BASE_SZ - j is inductive.\nloop invariant i + j <= BASE_SZ is inductive.\nloop invariant j + len <= BASE_SZ is inductive.\nloop invariant i + len <= BASE_SZ is inductive.\nloop invariant j + i <= BASE_SZ is inductive.\nloop invariant 2 * j <= BASE_SZ is inductive.\nloop invariant 2 * i <= BASE_SZ is inductive.\nloop invariant 2 * len <= BASE_SZ is inductive.\nloop invariant i + j + len <= BASE_SZ is inductive.\nloop invariant 1 <= i <= len && i <= BASE_SZ && i <= BASE_SZ * (BASE_SZ - 1) / 2 && j <= i && j <= len && j <= BASE_SZ && j <= BASE_SZ * (BASE_SZ - 1) / 2 && len >= 0 && len <= BASE_SZ && len <= BASE_SZ * (BASE_SZ - 1) / 2 is inductive.\nloop invariant j <= i + len is inductive.\nloop invariant len == 0 ==> i == j + len is inductive.\nloop invariant i <= j + len is inductive.\nloop invariant j <= i + len - 1 is inductive.\nloop invariant len == 0 ==> i == j + len - 1 is inductive.\nloop invariant i <= j + len - 1 is inductive.\nloop invariant j <= i + len - 2 is inductive.\nloop invariant len == 0 ==> i == j + len - 2 is inductive.\nloop invariant i <= j + len - 2 is inductive.\nloop invariant j <= i + len - 3 is inductive.\nloop invariant len == 0 ==> i == j + len - 3 is inductive.\nloop invariant i <= j + len - 3 is inductive.\nloop invariant j <= i + len - 4 is inductive.\nloop invariant len == 0 ==> i == j + len - 4 is inductive.\nloop invariant i <= j + len - 4 is inductive.\nloop invariant j <= i + len - 5 is inductive.\nloop invariant len == 0 ==> i == j + len - 5 is inductive.\nloop invariant i <= j + len - 5 is inductive.\nloop invariant j <= i + len - 6 is inductive.\nloop invariant len == 0 ==> i == j + len - 6 is inductive.\nloop invariant i <= j + len - 6 is inductive.\nloop invariant j <= i + len - 7 is inductive.\nloop invariant len == 0 ==> i == j + len - 7 is inductive.\nloop invariant i <= j + len - 7 is inductive.\nloop invariant j <= i + len - 8 is inductive.\nloop invariant len == 0 ==> i == j + len - 8 is inductive.\nloop invariant i <= j + len - 8 is inductive.\nloop invariant j <= i + len - 9 is inductive.\nloop invariant len == 0 ==> i == j + len - 9 is inductive.\nloop invariant i <= j + len - 9 is inductive.\nloop invariant j <= i + len - 10 is inductive.\nloop invariant len == 0 ==> i == j + len - 10 is inductive.\nloop invariant i <= j + len - 10 is inductive.\nloop invariant j <= i + len - 11 is inductive.\nloop invariant len == 0 ==> i == j + len - 11 is inductive.\nloop invariant i <= j + len - 11 is inductive.\nloop invariant j <= i + len - 12 is inductive.\nloop invariant len == 0 ==> i == j + len - 12 is inductive.\nloop invariant i <= j + len - 12 is inductive.\nloop invariant j <= i + len - 13 is inductive.\nloop invariant len == 0 ==> i == j + len - 13 is inductive.\nloop invariant i <= j + len - 13 is inductive.\nloop invariant j <= i + len - 14 is inductive.\nloop invariant len == 0 ==> i == j + len - 14 is inductive.\nloop invariant i <= j + len - 14 is inductive.\nloop invariant j <= i + len - 15 is inductive.\nloop invariant len == 0 ==> i == j + len - 15 is inductive.\nloop invariant i <= j + len - 15 is inductive.\nloop invariant j <= i + len - 16 is inductive.\nloop invariant len == 0 ==> i == j + len - 16 is inductive.\nloop invariant i <= j + len - 16 is inductive.\nloop invariant j <= i + len - 17 is inductive.\nloop invariant len == 0 ==> i == j + len - 17 is inductive.\nloop invariant i <= j + len - 17 is inductive.\nloop invariant j <= i + len - 18 is inductive.\nloop invariant len == 0 ==> i == j + len - 18 is inductive.\nloop invariant i <= j + len - 18 is inductive.\nloop invariant j <= i + len - 19 is inductive.\nloop invariant len == 0 ==> i == j + len - 19 is inductive.\nloop invariant i <= j + len - 19 is inductive.\nloop invariant j <= i + len - 20 is inductive.\nloop invariant len == 0 ==> i == j + len - 20 is inductive.\nloop invariant i <= j + len - 20 is inductive.\nloop invariant j <= i + len - 21 is inductive.\nloop invariant len == 0 ==> i == j + len - 21 is inductive.\nloop invariant i <= j + len - 21 is inductive.\nloop invariant j <= i + len - 22 is inductive.\nloop invariant len == 0 ==> i == j + len - 22 is inductive.\nloop invariant i <= j + len - 22 is inductive.\nloop invariant j <= i + len - 23 is inductive.\nloop invariant len == 0 ==> i == j + len - 23 is inductive.\nloop invariant i <= j + len - 23 is inductive.\nloop invariant i == len + j is inductive.\nloop invariant len == BASE_SZ - (i + j) is inductive.\nloop invariant i + j < BASE_SZ is inductive.\nloop invariant len > 0 is inductive.\nloop invariant i < BASE_SZ is inductive.\nloop invariant j < BASE_SZ is inductive.\nloop invariant i < j is inductive.\nAssertion 0 <= BASE_SZ - 1: Valid\nAssertion 0 <= j: Valid\nAssertion j < BASE_SZ: Valid\nAssertion 0 <= i: Valid\nAssertion i < BASE_SZ: Valid",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  /*@\nloop invariant i1: 0 <= i <= BASE_SZ;\nloop invariant i2: 0 <= j <= BASE_SZ;\nloop invariant i3: len >= 0;\nloop invariant i4: len == 0 ==> i >= j;\nloop invariant i5: len == 0 ==> i <= BASE_SZ;\nloop invariant i6: len == 0 ==> j <= BASE_SZ;\nloop invariant i7: len == 0 ==> i == j;\nloop invariant i8: len == 0 ==> i == BASE_SZ;\nloop invariant i9: len == 0 ==> j == BASE_SZ;\nloop invariant i10: len == 0 ==> i == j == BASE_SZ;\nloop invariant i11: len == 0 ==> i == j == BASE_SZ == BASE_SZ;\nloop invariant i12: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i13: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i14: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i15: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i16: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i17: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i18: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i19: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i20: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i21: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i22: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i23: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i24: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i25: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i26: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i27: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i28: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i29: len == 0 ==> i == j == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ == BASE_SZ;\nloop invariant i30: i <= j;\nloop invariant i31: len >= 0; loop invariant i == j;\nloop invariant i32: i >= 0;\nloop invariant i33: j >= 0;\nloop invariant i34: len <= BASE_SZ;\nloop invariant i35: i <= BASE_SZ;\nloop invariant i36: j <= BASE_SZ;\nloop invariant i37: i < len + 1;\nloop invariant i38: j < len + 1;\nloop invariant i39: 0 <= i <= len;\nloop invariant i40: 0 <= j <= len;\nloop invariant i41: i >= j;\nloop invariant i42: BASE_SZ >= 0;\nloop invariant i43: 0 <= len <= BASE_SZ;\nloop invariant i44: (i - j) <= len;\nloop invariant i45: (i - j) == len ==> (i == j);\nloop invariant i46: (i - j) < len ==> (len > 0);\nloop invariant i47: (i - j) == len ==> (len == 0);\nloop invariant i48: (i - j) < len ==> (len > 0 ==> (i == j));\nloop invariant i49: (i - j) == len ==> (len == 0 ==> (i == j));\nloop invariant i50: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i));\nloop invariant i51: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i));\nloop invariant i52: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i53: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i54: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant i55: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant i56: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0));\nloop invariant i57: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0));\nloop invariant i58: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j));\nloop invariant i59: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j));\nloop invariant i60: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i));\nloop invariant i61: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i));\nloop invariant i62: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i63: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i64: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant i65: (i - j) == len ==> (len == 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len == 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i));\nloop invariant i66: (i - j) < len ==> (len > 0 ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (len > 0) ==> (i == j) ==> (j == i) ==> (i == j) ==> (j == i) ==> (i == j));\nloop invariant i67: 1 <= i <= BASE_SZ;\nloop invariant i68: (j <= i) ==> (len <= BASE_SZ - j);\nloop invariant i69: (i >= j) ==> (len >= 0);\nloop invariant i70: i == j + len;\nloop invariant i71: len == 0 ==> len == 0;\nloop invariant i72: i == j + len ==> i == j + len;\nloop invariant i73: j <= i;\nloop invariant i74: len <= BASE_SZ - i;\nloop invariant i75: len <= BASE_SZ - j;\nloop invariant i76: i + j <= BASE_SZ;\nloop invariant i77: j + len <= BASE_SZ;\nloop invariant i78: i + len <= BASE_SZ;\nloop invariant i79: j + i <= BASE_SZ;\nloop invariant i80: 2 * j <= BASE_SZ;\nloop invariant i81: 2 * i <= BASE_SZ;\nloop invariant i82: 2 * len <= BASE_SZ;\nloop invariant i83: i + j + len <= BASE_SZ;\nloop invariant i84: 1 <= i <= len && i <= BASE_SZ && i <= BASE_SZ * (BASE_SZ - 1) / 2 && j <= i && j <= len && j <= BASE_SZ && j <= BASE_SZ * (BASE_SZ - 1) / 2 && len >= 0 && len <= BASE_SZ && len <= BASE_SZ * (BASE_SZ - 1) / 2;\nloop invariant i85: j <= i + len;\nloop invariant i86: len == 0 ==> i == j + len;\nloop invariant i87: i <= j + len;\nloop invariant i88: j <= i + len - 1;\nloop invariant i89: len == 0 ==> i == j + len - 1;\nloop invariant i90: i <= j + len - 1;\nloop invariant i91: j <= i + len - 2;\nloop invariant i92: len == 0 ==> i == j + len - 2;\nloop invariant i93: i <= j + len - 2;\nloop invariant i94: j <= i + len - 3;\nloop invariant i95: len == 0 ==> i == j + len - 3;\nloop invariant i96: i <= j + len - 3;\nloop invariant i97: j <= i + len - 4;\nloop invariant i98: len == 0 ==> i == j + len - 4;\nloop invariant i99: i <= j + len - 4;\nloop invariant i100: j <= i + len - 5;\nloop invariant i101: len == 0 ==> i == j + len - 5;\nloop invariant i102: i <= j + len - 5;\nloop invariant i103: j <= i + len - 6;\nloop invariant i104: len == 0 ==> i == j + len - 6;\nloop invariant i105: i <= j + len - 6;\nloop invariant i106: j <= i + len - 7;\nloop invariant i107: len == 0 ==> i == j + len - 7;\nloop invariant i108: i <= j + len - 7;\nloop invariant i109: j <= i + len - 8;\nloop invariant i110: len == 0 ==> i == j + len - 8;\nloop invariant i111: i <= j + len - 8;\nloop invariant i112: j <= i + len - 9;\nloop invariant i113: len == 0 ==> i == j + len - 9;\nloop invariant i114: i <= j + len - 9;\nloop invariant i115: j <= i + len - 10;\nloop invariant i116: len == 0 ==> i == j + len - 10;\nloop invariant i117: i <= j + len - 10;\nloop invariant i118: j <= i + len - 11;\nloop invariant i119: len == 0 ==> i == j + len - 11;\nloop invariant i120: i <= j + len - 11;\nloop invariant i121: j <= i + len - 12;\nloop invariant i122: len == 0 ==> i == j + len - 12;\nloop invariant i123: i <= j + len - 12;\nloop invariant i124: j <= i + len - 13;\nloop invariant i125: len == 0 ==> i == j + len - 13;\nloop invariant i126: i <= j + len - 13;\nloop invariant i127: j <= i + len - 14;\nloop invariant i128: len == 0 ==> i == j + len - 14;\nloop invariant i129: i <= j + len - 14;\nloop invariant i130: j <= i + len - 15;\nloop invariant i131: len == 0 ==> i == j + len - 15;\nloop invariant i132: i <= j + len - 15;\nloop invariant i133: j <= i + len - 16;\nloop invariant i134: len == 0 ==> i == j + len - 16;\nloop invariant i135: i <= j + len - 16;\nloop invariant i136: j <= i + len - 17;\nloop invariant i137: len == 0 ==> i == j + len - 17;\nloop invariant i138: i <= j + len - 17;\nloop invariant i139: j <= i + len - 18;\nloop invariant i140: len == 0 ==> i == j + len - 18;\nloop invariant i141: i <= j + len - 18;\nloop invariant i142: j <= i + len - 19;\nloop invariant i143: len == 0 ==> i == j + len - 19;\nloop invariant i144: i <= j + len - 19;\nloop invariant i145: j <= i + len - 20;\nloop invariant i146: len == 0 ==> i == j + len - 20;\nloop invariant i147: i <= j + len - 20;\nloop invariant i148: j <= i + len - 21;\nloop invariant i149: len == 0 ==> i == j + len - 21;\nloop invariant i150: i <= j + len - 21;\nloop invariant i151: j <= i + len - 22;\nloop invariant i152: len == 0 ==> i == j + len - 22;\nloop invariant i153: i <= j + len - 22;\nloop invariant i154: j <= i + len - 23;\nloop invariant i155: len == 0 ==> i == j + len - 23;\nloop invariant i156: i <= j + len - 23;\nloop invariant i157: i == len + j;\nloop invariant i158: len == BASE_SZ - (i + j);\nloop invariant i159: i + j < BASE_SZ;\nloop invariant i160: len > 0;\nloop invariant i161: i < BASE_SZ;\nloop invariant i162: j < BASE_SZ;\nloop invariant i163: i < j;\n*/\nwhile (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n}\n {;\n//@ assert(j < BASE_SZ);\n}\n\n      {;\n//@ assert( 0<= i );\n}\n {;\n//@ assert(i < BASE_SZ );\n}\n\n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}"
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 159,
        "success_count": 131,
        "failure_count": 28,
        "success_rate": 0.8238993710691824
    }
}