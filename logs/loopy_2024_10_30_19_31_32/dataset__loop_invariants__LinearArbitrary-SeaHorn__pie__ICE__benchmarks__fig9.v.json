{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y < (x + 1);\nloop invariant x >= (y - 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\n*/\n```",
            "```\n/*@\nloop invariant ( 0 <= y <= (x + y) );\nloop invariant ( 0 <= x );\nloop invariant ( y <= (x + y) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 = 0;\nloop invariant v2 = 0;\nloop invariant v3 = 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 100000;\nloop invariant v2 <= 100000;\nloop invariant v3 <= 100000;\nloop invariant (y >= 0) ==> (x >= 0);\nloop invariant (y >= 0) ==> (x <= 100000);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (y <= 100000);\nloop invariant (y >= 0) ==> (v1 >= 0);\nloop invariant (y >= 0) ==> (v2 >= 0);\nloop invariant (y >= 0) ==> (v3 >= 0);\nloop invariant (y >= 0) ==> (v1 <= 100000);\nloop invariant (y >= 0) ==> (v2 <= 100000);\nloop invariant (y >= 0) ==> (v3 <= 100000);\nloop invariant (y >= 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant (y >= 0) ==> (v1 = 0);\nloop invariant (y >= 0) ==> (v2 = 0);\nloop invariant (y >= 0) ==> (v3 = 0);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (x >= 0);\nloop invariant (y >= 0) ==> (x <= 100000);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (y <= 100000);\nloop invariant (y >= 0) ==> (v1 >= 0);\nloop invariant (y >= 0) ==> (v2 >= 0);\nloop invariant (y >= 0) ==> (v3 >= 0);\nloop invariant (y >= 0) ==> (v1 <= 100000);\nloop invariant (y >= 0) ==> (v2 <= 100000);\nloop invariant (y >= 0) ==> (v3 <= 100000);\nloop invariant (y >= 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant (y >= 0) ==> (v1 = 0);\nloop invariant (y >= 0) ==> (v2 = 0);\nloop invariant (y >= 0) ==> (v3 = 0);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (x >= 0);\nloop invariant (y >= 0) ==> (x <= 100000);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (y <= 100000);\nloop invariant (y >= 0) ==> (v1 >= 0);\nloop invariant (y >= 0) ==> (v2 >= 0);\nloop invariant (y >= 0) ==> (v3 >= 0);\nloop invariant (y >= 0) ==> (v1 <= 100000);\nloop invariant (y >= 0) ==> (v2 <= 100000);\nloop invariant (y >= 0) ==> (v3 <= 100000);\nloop invariant (y >= 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant (y >= 0) ==> (v1 = 0);\nloop invariant (y >= 0) ==> (v2 = 0);\nloop invariant (y >= 0) ==> (v3 = 0);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 == v2 == v3 ==> (0 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 100000;\nloop invariant y == 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y == 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y < (x + 1);\nloop invariant x >= (y - 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\n\n\nloop invariant i5: x <= y;\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant ( 0 <= y <= (x + y) );\nloop invariant ( 0 <= x );\nloop invariant ( y <= (x + y) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: ( 0 <= y <= (x + y) );\nloop invariant i2: ( 0 <= x );\nloop invariant i3: ( y <= (x + y) );\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= y;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: x <= y;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 = 0;\nloop invariant v2 = 0;\nloop invariant v3 = 0;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 100000;\nloop invariant v2 <= 100000;\nloop invariant v3 <= 100000;\nloop invariant (y >= 0) ==> (x >= 0);\nloop invariant (y >= 0) ==> (x <= 100000);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (y <= 100000);\nloop invariant (y >= 0) ==> (v1 >= 0);\nloop invariant (y >= 0) ==> (v2 >= 0);\nloop invariant (y >= 0) ==> (v3 >= 0);\nloop invariant (y >= 0) ==> (v1 <= 100000);\nloop invariant (y >= 0) ==> (v2 <= 100000);\nloop invariant (y >= 0) ==> (v3 <= 100000);\nloop invariant (y >= 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant (y >= 0) ==> (v1 = 0);\nloop invariant (y >= 0) ==> (v2 = 0);\nloop invariant (y >= 0) ==> (v3 = 0);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (x >= 0);\nloop invariant (y >= 0) ==> (x <= 100000);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (y <= 100000);\nloop invariant (y >= 0) ==> (v1 >= 0);\nloop invariant (y >= 0) ==> (v2 >= 0);\nloop invariant (y >= 0) ==> (v3 >= 0);\nloop invariant (y >= 0) ==> (v1 <= 100000);\nloop invariant (y >= 0) ==> (v2 <= 100000);\nloop invariant (y >= 0) ==> (v3 <= 100000);\nloop invariant (y >= 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant (y >= 0) ==> (v1 = 0);\nloop invariant (y >= 0) ==> (v2 = 0);\nloop invariant (y >= 0) ==> (v3 = 0);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (x >= 0);\nloop invariant (y >= 0) ==> (x <= 100000);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (y <= 100000);\nloop invariant (y >= 0) ==> (v1 >= 0);\nloop invariant (y >= 0) ==> (v2 >= 0);\nloop invariant (y >= 0) ==> (v3 >= 0);\nloop invariant (y >= 0) ==> (v1 <= 100000);\nloop invariant (y >= 0) ==> (v2 <= 100000);\nloop invariant (y >= 0) ==> (v3 <= 100000);\nloop invariant (y >= 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant (y >= 0) ==> (v1 = 0);\nloop invariant (y >= 0) ==> (v2 = 0);\nloop invariant (y >= 0) ==> (v3 = 0);\nloop invariant (y >= 0) ==> (y >= 0);\nloop invariant (y >= 0) ==> (x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n\n\n\nloop invariant i6: y >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: x <= 100000;\n\n\n\n\n\n\n\nloop invariant i16: (y >= 0) ==> (x >= 0);\nloop invariant i17: (y >= 0) ==> (x <= 100000);\nloop invariant i18: (y >= 0) ==> (y >= 0);\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 == v2 == v3 ==> (0 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 0;\n\n\n\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y >= x;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: y >= x;\n\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 100000;\nloop invariant y == 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y == 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\nloop invariant y >= 0 ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= y;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: y == 0 ==> x >= 0;\nloop invariant i6: y >= 0 ==> x >= 0;\n\n\nloop invariant i9: y == 0 ==> x >= y;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: y < (x + 1);\nloop invariant i6: x >= (y - 1);\nloop invariant i7: x <= y;\nloop invariant i8: y <= x;\nloop invariant i9: ( 0 <= y <= (x + y) );\nloop invariant i10: ( 0 <= x );\nloop invariant i11: ( y <= (x + y) );\nloop invariant i12: 0 <= x <= y;\nloop invariant i13: 1 <= y <= 100000;\nloop invariant i14: 0 <= y;\nloop invariant i15: x >= y;\nloop invariant i16: v1 = 0;\nloop invariant i17: v2 = 0;\nloop invariant i18: v3 = 0;\nloop invariant i19: x <= 100000;\nloop invariant i20: y <= 100000;\nloop invariant i21: v1 >= 0;\nloop invariant i22: v2 >= 0;\nloop invariant i23: v3 >= 0;\nloop invariant i24: v1 <= 100000;\nloop invariant i25: v2 <= 100000;\nloop invariant i26: v3 <= 100000;\nloop invariant i27: (y >= 0) ==> (x >= 0);\nloop invariant i28: (y >= 0) ==> (x <= 100000);\nloop invariant i29: (y >= 0) ==> (y >= 0);\nloop invariant i30: (y >= 0) ==> (y <= 100000);\nloop invariant i31: (y >= 0) ==> (v1 >= 0);\nloop invariant i32: (y >= 0) ==> (v2 >= 0);\nloop invariant i33: (y >= 0) ==> (v3 >= 0);\nloop invariant i34: (y >= 0) ==> (v1 <= 100000);\nloop invariant i35: (y >= 0) ==> (v2 <= 100000);\nloop invariant i36: (y >= 0) ==> (v3 <= 100000);\nloop invariant i37: (y >= 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant i38: (y >= 0) ==> (v1 = 0);\nloop invariant i39: (y >= 0) ==> (v2 = 0);\nloop invariant i40: (y >= 0) ==> (v3 = 0);\nloop invariant i41: v1 == v2 == v3 ==> (0 == 1);\nloop invariant i42: 0 <= y <= x;\nloop invariant i43: y >= x;\nloop invariant i44: y == 0 ==> x >= 0;\nloop invariant i45: y >= 0 ==> x >= 0;\nloop invariant i46: y >= 0 ==> x >= y;\nloop invariant i47: y == 0 ==> x >= y;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\t/*@\n\n\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 0;\n\n\nloop invariant i7: x <= y;\n\nloop invariant i9: ( 0 <= y <= (x + y) );\nloop invariant i10: ( 0 <= x );\nloop invariant i11: ( y <= (x + y) );\nloop invariant i12: 0 <= x <= y;\n\nloop invariant i14: 0 <= y;\n\n\n\n\nloop invariant i19: x <= 100000;\n\n\n\n\n\n\n\nloop invariant i27: (y >= 0) ==> (x >= 0);\nloop invariant i28: (y >= 0) ==> (x <= 100000);\nloop invariant i29: (y >= 0) ==> (y >= 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i43: y >= x;\nloop invariant i44: y == 0 ==> x >= 0;\nloop invariant i45: y >= 0 ==> x >= 0;\n\nloop invariant i47: y == 0 ==> x >= y;\n*/\nwhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 80,
        "success_count": 68,
        "failure_count": 12,
        "success_rate": 0.85
    }
}