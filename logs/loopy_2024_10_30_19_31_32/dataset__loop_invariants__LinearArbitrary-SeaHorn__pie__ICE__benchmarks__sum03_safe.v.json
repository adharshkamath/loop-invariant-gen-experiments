{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant (sn == x) ==> (v1 == unknown_int());\nloop invariant (sn == x) ==> (v2 == unknown_int());\nloop invariant (sn == x) ==> (v3 == unknown_int());\nloop invariant (sn > x) ==> (v1 == unknown_int());\nloop invariant (sn > x) ==> (v2 == unknown_int());\nloop invariant (sn > x) ==> (v3 == unknown_int());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= sn;\nloop invariant 0 <= sn <= loop1;\nloop invariant x <= sn * 1;\nloop invariant x >= 0;\nloop invariant x <= loop1;\nloop invariant sn >= 0;\nloop invariant sn <= loop1 * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\n*/\n```",
            "```\n/*@\nloop invariant x = 1;\nloop invariant sn = 0;\nloop invariant loop1 >= 0;\nloop invariant n1 >= 0;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= INT_MAX;\nloop invariant loop1 == unknown_uint();\nloop invariant n1 == unknown_uint();\nloop invariant x == sn;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant unknown_int() == v1;\nloop invariant unknown_int() == v2;\nloop invariant unknown_int() == v3;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn > 0 ==> v1 == unknown_int();\nloop invariant sn > 0 ==> v2 == unknown_int();\nloop invariant sn > 0 ==> v3 == unknown_int();\nloop invariant unknown_uint() == loop1;\nloop invariant unknown_uint() == n1;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn > 0 ==> x == sn;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn > 0 ==> sn == sn;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn > 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn > 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn > 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn > 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn > 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn > 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn > 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn > 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= 1 + x;\nloop invariant 0 <= x <= 1 + sn;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= loop1;\nloop invariant 0 <= sn <= n1;\nloop invariant (sn == x * 1 || sn == 0);\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 1 + x;\nloop invariant x >= 0;\nloop invariant sn == x;\nloop invariant sn >= 0;\nloop invariant sn <= 1 + x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= sn;\nloop invariant sn >= 0;\nloop invariant sn <= 1 + x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= sn;\nloop invariant sn >= 0;\nloop invariant sn <= 1 + x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= sn;\nloop invariant sn >= 0;\nloop invariant sn <= 1 + x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= sn;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= x * 1;\nloop invariant 1 <= x <= n1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant v1 is non-deterministic;\nloop invariant v2 is non-deterministic;\nloop invariant v3 is non-deterministic;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant sn == x + 1 || sn == 0;\nloop invariant loop1 == unknown_uint();\nloop invariant n1 == unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= x;\nloop invariant v1 >= -v2;\nloop invariant v2 >= -v3;\nloop invariant v3 >= -v1;\nloop invariant sn >= 0;\nloop invariant (sn == x*1) ==> (v1 >= -v2);\nloop invariant (sn == x*1) ==> (v2 >= -v3);\nloop invariant (sn == x*1) ==> (v3 >= -v1);\nloop invariant (sn == x*1) ==> (sn >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= max_value_of(sn);loop invariant 0 <= x <= max_value_of(x);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant x <= sn;\nloop invariant loop1 >= 0;\nloop invariant n1 >= 0;\nloop invariant x + sn >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 <= 2147483647;\nloop invariant sn <= 2147483647;\nloop invariant x <= 2147483647;\nloop invariant loop1 * n1 >= 0;\nloop invariant sn == 0 ==> x == sn;\nloop invariant sn != 0 ==> x >= 1;\nloop invariant sn == 0 ==> x <= sn;\nloop invariant sn != 0 ==> x <= sn + 1;\nloop invariant x == 0 ==> sn == 0;\nloop invariant x != 0 ==> sn >= 1;\nloop invariant x == 0 ==> sn <= 0;\nloop invariant x != 0 ==> sn <= x;\nloop invariant sn == 0 ==> loop1 == 0;\nloop invariant sn != 0 ==> loop1 >= 1;\nloop invariant sn == 0 ==> loop1 <= 0;\nloop invariant sn != 0 ==> loop1 <= x;\nloop invariant sn == 0 ==> n1 == 0;\nloop invariant sn != 0 ==> n1 >= 1;\nloop invariant sn == 0 ==> n1 <= 0;\nloop invariant sn != 0 ==> n1 <= x;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x >= 1;\nloop invariant sn == 0 ==> x <= 0;\nloop invariant sn != 0 ==> x <= sn;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn != 0 ==> v1 >= 1;\nloop invariant sn == 0 ==> v1 <= 0;\nloop invariant sn != 0 ==> v1 <= 2147483647;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn != 0 ==> v2 >= 1;\nloop invariant sn == 0 ==> v2 <= 0;\nloop invariant sn != 0 ==> v2 <= 2147483647;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn != 0 ==> v3 >= 1;\nloop invariant sn == 0 ==> v3 <= 0;\nloop invariant sn != 0 ==> v3 <= 2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n1;\nloop invariant 0 <= x <= loop1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= sn <= n1;\nloop invariant 0 <= x <= loop1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant loop1 >= 0;\nloop invariant n1 >= 0;\nloop invariant v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant sn <= loop1 * n1;\nloop invariant sn <= loop1 * n1 + loop1;\nloop invariant sn <= loop1 * n1 + loop1 + 1;\nloop invariant sn <= loop1 * n1 + loop1 + 2;\nloop invariant sn <= loop1 * n1 + loop1 + 3;\nloop invariant sn <= loop1 * n1 + loop1 + 4;\nloop invariant sn <= loop1 * n1 + loop1 + 5;\nloop invariant sn <= loop1 * n1 + loop1 + 6;\nloop invariant sn <= loop1 * n1 + loop1 + 7;\nloop invariant sn <= loop1 * n1 + loop1 + 8;\nloop invariant sn <= loop1 * n1 + loop1 + 9;\nloop invariant sn <= loop1 * n1 + loop1 + 10;\nloop invariant sn <= loop1 * n1 + loop1 + 11;\nloop invariant sn <= loop1 * n1 + loop1 + 12;\nloop invariant sn <= loop1 * n1 + loop1 + 13;\nloop invariant sn <= loop1 * n1 + loop1 + 14;\nloop invariant sn <= loop1 * n1 + loop1 + 15;\nloop invariant sn <= loop1 * n1 + loop1 + 16;\nloop invariant sn <= loop1 * n1 + loop1 + 17;\nloop invariant sn <= loop1 * n1 + loop1 + 18;\nloop invariant sn <= loop1 * n1 + loop1 + 19;\nloop invariant sn <= loop1 * n1 + loop1 + 20;\nloop invariant sn <= loop1 * n1 + loop1 + 21;\nloop invariant sn <= loop1 * n1 + loop1 + 22;\nloop invariant sn <= loop1 * n1 + loop1 + 23;\nloop invariant sn <= loop1 * n1 + loop1 + 24;\nloop invariant sn <= loop1 * n1 + loop1 + 25;\nloop invariant sn <= loop1 * n1 + loop1 + 26;\nloop invariant sn <= loop1 * n1 + loop1 + 27;\nloop invariant sn <= loop1 * n1 + loop1 + 28;\nloop invariant sn <= loop1 * n1 + loop1 + 29;\nloop invariant sn <= loop1 * n1 + loop1 + 30;\nloop invariant sn <= loop1 * n1 + loop1 + 31;\nloop invariant sn <= loop1 * n1 + loop1 + 32;\nloop invariant sn <= loop1 * n1 + loop1 + 33;\nloop invariant sn <= loop1 * n1 + loop1 + 34;\nloop invariant sn <= loop1 * n1 + loop1 + 35;\nloop invariant sn <= loop1 * n1 + loop1 + 36;\nloop invariant sn <= loop1 * n1 + loop1 + 37;\nloop invariant sn <= loop1 * n1 + loop1 + 38;\nloop invariant sn <= loop1 * n1 + loop1 + 39;\nloop invariant sn <= loop1 * n1 + loop1 + 40;\nloop invariant sn <= loop1 * n1 + loop1 + 41;\nloop invariant sn <= loop1 * n1 + loop1 + 42;\nloop invariant sn <= loop1 * n1 + loop1 + 43;\nloop invariant sn <= loop1 * n1 + loop1 + 44;\nloop invariant sn <= loop1 * n1 + loop1 + 45;\nloop invariant sn <= loop1 * n1 + loop1 + 46;\nloop invariant sn <= loop1 * n1 + loop1 + 47;\nloop invariant sn <= loop1 * n1 + loop1 + 48;\nloop invariant sn <= loop1 * n1 + loop1 + 49;\nloop invariant sn <= loop1 * n1 + loop1 + 50;\nloop invariant sn <= loop1 * n1 + loop1 + 51;\nloop invariant sn <= loop1 * n1 + loop1 + 52;\nloop invariant sn <= loop1 * n1 + loop1 + 53;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant (sn == x) ==> (v1 == unknown_int());\nloop invariant (sn == x) ==> (v2 == unknown_int());\nloop invariant (sn == x) ==> (v3 == unknown_int());\nloop invariant (sn > x) ==> (v1 == unknown_int());\nloop invariant (sn > x) ==> (v2 == unknown_int());\nloop invariant (sn > x) ==> (v3 == unknown_int());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= sn;\nloop invariant 0 <= sn <= loop1;\nloop invariant x <= sn * 1;\nloop invariant x >= 0;\nloop invariant x <= loop1;\nloop invariant sn >= 0;\nloop invariant sn <= loop1 * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\nloop invariant sn <= x * 1;\nloop invariant sn >= x * 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= x <= sn;\n\nloop invariant i3: x <= sn * 1;\nloop invariant i4: x >= 0;\n\nloop invariant i6: sn >= 0;\n\nloop invariant i8: sn <= x * 1;\nloop invariant i9: sn >= x * 1;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x = 1;\nloop invariant sn = 0;\nloop invariant loop1 >= 0;\nloop invariant n1 >= 0;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant x >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= 2147483647;\nloop invariant loop1 >= 0;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 >= 0;\nloop invariant n1 <= 2147483647;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\nloop invariant i3: loop1 >= 0;\nloop invariant i4: n1 >= 0;\nloop invariant i5: v1 >= -2147483648;\nloop invariant i6: v1 <= 2147483647;\nloop invariant i7: v2 >= -2147483648;\nloop invariant i8: v2 <= 2147483647;\nloop invariant i9: v3 >= -2147483648;\nloop invariant i10: v3 <= 2147483647;\n\nloop invariant i12: sn >= 0;\nloop invariant i13: sn <= 2147483647;\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= INT_MAX;\nloop invariant loop1 == unknown_uint();\nloop invariant n1 == unknown_uint();\nloop invariant x == sn;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant unknown_int() == v1;\nloop invariant unknown_int() == v2;\nloop invariant unknown_int() == v3;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn > 0 ==> v1 == unknown_int();\nloop invariant sn > 0 ==> v2 == unknown_int();\nloop invariant sn > 0 ==> v3 == unknown_int();\nloop invariant unknown_uint() == loop1;\nloop invariant unknown_uint() == n1;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn > 0 ==> x == sn;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn > 0 ==> sn == sn;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn > 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn > 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn > 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn > 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn > 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn > 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn > 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn > 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == 0 ==> loop1 == unknown_uint();\nloop invariant sn == 0 ==> n1 == unknown_uint();\nloop invariant sn == 0 ==> v1 == unknown_int();\nloop invariant sn == 0 ==> v2 == unknown_int();\nloop invariant sn == 0 ==> v3 == unknown_int();\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\nloop invariant i4: x == sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: sn == 0 ==> x == 0;\nloop invariant i20: sn > 0 ==> x == sn;\nloop invariant i21: sn == 0 ==> sn == 0;\nloop invariant i22: sn > 0 ==> sn == sn;\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= 1 + x;\nloop invariant 0 <= x <= 1 + sn;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\nloop invariant i2: 0 <= x <= 1 + sn;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= loop1;\nloop invariant 0 <= sn <= n1;\nloop invariant (sn == x * 1 || sn == 0);\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\nloop invariant x == x;\nloop invariant sn == sn;\nloop invariant v1 == v1;\nloop invariant v2 == v2;\nloop invariant v3 == v3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\nloop invariant i3: (sn == x * 1 || sn == 0);\nloop invariant i4: v1 == v1;\nloop invariant i5: v2 == v2;\nloop invariant i6: v3 == v3;\nloop invariant i7: x == x;\nloop invariant i8: sn == sn;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 1 + x;\nloop invariant x >= 0;\nloop invariant sn == x;\nloop invariant sn >= 0;\nloop invariant sn <= 1 + x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= sn;\nloop invariant sn >= 0;\nloop invariant sn <= 1 + x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= sn;\nloop invariant sn >= 0;\nloop invariant sn <= 1 + x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= sn;\nloop invariant sn >= 0;\nloop invariant sn <= 1 + x;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant sn == x * 1 || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= sn;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: 0 <= sn <= 1 + x;\nloop invariant i2: x >= 0;\nloop invariant i3: sn == x;\nloop invariant i4: sn >= 0;\nloop invariant i5: sn <= 1 + x;\nloop invariant i6: sn == x * 1 || sn == 0;\nloop invariant i7: x <= sn;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= x * 1;\nloop invariant 1 <= x <= n1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 1;\nloop invariant 0 <= x <= 1;\nloop invariant v1 is non-deterministic;\nloop invariant v2 is non-deterministic;\nloop invariant v3 is non-deterministic;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant sn == x + 1 || sn == 0;\nloop invariant loop1 == unknown_uint();\nloop invariant n1 == unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= x;\nloop invariant v1 >= -v2;\nloop invariant v2 >= -v3;\nloop invariant v3 >= -v1;\nloop invariant sn >= 0;\nloop invariant (sn == x*1) ==> (v1 >= -v2);\nloop invariant (sn == x*1) ==> (v2 >= -v3);\nloop invariant (sn == x*1) ==> (v3 >= -v1);\nloop invariant (sn == x*1) ==> (sn >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\nloop invariant i5: sn >= 0;\n\n\n\nloop invariant i9: (sn == x*1) ==> (sn >= 0);\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= max_value_of(sn);loop invariant 0 <= x <= max_value_of(x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant x <= sn;\nloop invariant loop1 >= 0;\nloop invariant n1 >= 0;\nloop invariant x + sn >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 2147483647;\nloop invariant v2 <= 2147483647;\nloop invariant v3 <= 2147483647;\nloop invariant loop1 <= 2147483647;\nloop invariant n1 <= 2147483647;\nloop invariant sn <= 2147483647;\nloop invariant x <= 2147483647;\nloop invariant loop1 * n1 >= 0;\nloop invariant sn == 0 ==> x == sn;\nloop invariant sn != 0 ==> x >= 1;\nloop invariant sn == 0 ==> x <= sn;\nloop invariant sn != 0 ==> x <= sn + 1;\nloop invariant x == 0 ==> sn == 0;\nloop invariant x != 0 ==> sn >= 1;\nloop invariant x == 0 ==> sn <= 0;\nloop invariant x != 0 ==> sn <= x;\nloop invariant sn == 0 ==> loop1 == 0;\nloop invariant sn != 0 ==> loop1 >= 1;\nloop invariant sn == 0 ==> loop1 <= 0;\nloop invariant sn != 0 ==> loop1 <= x;\nloop invariant sn == 0 ==> n1 == 0;\nloop invariant sn != 0 ==> n1 >= 1;\nloop invariant sn == 0 ==> n1 <= 0;\nloop invariant sn != 0 ==> n1 <= x;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x >= 1;\nloop invariant sn == 0 ==> x <= 0;\nloop invariant sn != 0 ==> x <= sn;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn != 0 ==> v1 >= 1;\nloop invariant sn == 0 ==> v1 <= 0;\nloop invariant sn != 0 ==> v1 <= 2147483647;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn != 0 ==> v2 >= 1;\nloop invariant sn == 0 ==> v2 <= 0;\nloop invariant sn != 0 ==> v2 <= 2147483647;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn != 0 ==> v3 >= 1;\nloop invariant sn == 0 ==> v3 <= 0;\nloop invariant sn != 0 ==> v3 <= 2147483647;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn >= 0;\nloop invariant i3: x <= sn;\nloop invariant i4: loop1 >= 0;\nloop invariant i5: n1 >= 0;\nloop invariant i6: x + sn >= 0;\n\n\n\nloop invariant i10: v1 <= 2147483647;\nloop invariant i11: v2 <= 2147483647;\nloop invariant i12: v3 <= 2147483647;\n\n\nloop invariant i15: sn <= 2147483647;\nloop invariant i16: x <= 2147483647;\nloop invariant i17: loop1 * n1 >= 0;\nloop invariant i18: sn == 0 ==> x == sn;\nloop invariant i19: sn != 0 ==> x >= 1;\nloop invariant i20: sn == 0 ==> x <= sn;\nloop invariant i21: sn != 0 ==> x <= sn + 1;\nloop invariant i22: x == 0 ==> sn == 0;\nloop invariant i23: x != 0 ==> sn >= 1;\nloop invariant i24: x == 0 ==> sn <= 0;\nloop invariant i25: x != 0 ==> sn <= x;\n\n\n\n\n\n\n\n\nloop invariant i34: sn == 0 ==> x == 0;\nloop invariant i35: sn == 0 ==> x <= 0;\nloop invariant i36: sn != 0 ==> x <= sn;\n\n\n\nloop invariant i40: sn != 0 ==> v1 <= 2147483647;\n\n\n\nloop invariant i44: sn != 0 ==> v2 <= 2147483647;\n\n\n\nloop invariant i48: sn != 0 ==> v3 <= 2147483647;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n1;\nloop invariant 0 <= x <= loop1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= sn <= n1;\nloop invariant 0 <= x <= loop1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 56,
                "annotations": "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant loop1 >= 0;\nloop invariant n1 >= 0;\nloop invariant v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant sn <= loop1 * n1;\nloop invariant sn <= loop1 * n1 + loop1;\nloop invariant sn <= loop1 * n1 + loop1 + 1;\nloop invariant sn <= loop1 * n1 + loop1 + 2;\nloop invariant sn <= loop1 * n1 + loop1 + 3;\nloop invariant sn <= loop1 * n1 + loop1 + 4;\nloop invariant sn <= loop1 * n1 + loop1 + 5;\nloop invariant sn <= loop1 * n1 + loop1 + 6;\nloop invariant sn <= loop1 * n1 + loop1 + 7;\nloop invariant sn <= loop1 * n1 + loop1 + 8;\nloop invariant sn <= loop1 * n1 + loop1 + 9;\nloop invariant sn <= loop1 * n1 + loop1 + 10;\nloop invariant sn <= loop1 * n1 + loop1 + 11;\nloop invariant sn <= loop1 * n1 + loop1 + 12;\nloop invariant sn <= loop1 * n1 + loop1 + 13;\nloop invariant sn <= loop1 * n1 + loop1 + 14;\nloop invariant sn <= loop1 * n1 + loop1 + 15;\nloop invariant sn <= loop1 * n1 + loop1 + 16;\nloop invariant sn <= loop1 * n1 + loop1 + 17;\nloop invariant sn <= loop1 * n1 + loop1 + 18;\nloop invariant sn <= loop1 * n1 + loop1 + 19;\nloop invariant sn <= loop1 * n1 + loop1 + 20;\nloop invariant sn <= loop1 * n1 + loop1 + 21;\nloop invariant sn <= loop1 * n1 + loop1 + 22;\nloop invariant sn <= loop1 * n1 + loop1 + 23;\nloop invariant sn <= loop1 * n1 + loop1 + 24;\nloop invariant sn <= loop1 * n1 + loop1 + 25;\nloop invariant sn <= loop1 * n1 + loop1 + 26;\nloop invariant sn <= loop1 * n1 + loop1 + 27;\nloop invariant sn <= loop1 * n1 + loop1 + 28;\nloop invariant sn <= loop1 * n1 + loop1 + 29;\nloop invariant sn <= loop1 * n1 + loop1 + 30;\nloop invariant sn <= loop1 * n1 + loop1 + 31;\nloop invariant sn <= loop1 * n1 + loop1 + 32;\nloop invariant sn <= loop1 * n1 + loop1 + 33;\nloop invariant sn <= loop1 * n1 + loop1 + 34;\nloop invariant sn <= loop1 * n1 + loop1 + 35;\nloop invariant sn <= loop1 * n1 + loop1 + 36;\nloop invariant sn <= loop1 * n1 + loop1 + 37;\nloop invariant sn <= loop1 * n1 + loop1 + 38;\nloop invariant sn <= loop1 * n1 + loop1 + 39;\nloop invariant sn <= loop1 * n1 + loop1 + 40;\nloop invariant sn <= loop1 * n1 + loop1 + 41;\nloop invariant sn <= loop1 * n1 + loop1 + 42;\nloop invariant sn <= loop1 * n1 + loop1 + 43;\nloop invariant sn <= loop1 * n1 + loop1 + 44;\nloop invariant sn <= loop1 * n1 + loop1 + 45;\nloop invariant sn <= loop1 * n1 + loop1 + 46;\nloop invariant sn <= loop1 * n1 + loop1 + 47;\nloop invariant sn <= loop1 * n1 + loop1 + 48;\nloop invariant sn <= loop1 * n1 + loop1 + 49;\nloop invariant sn <= loop1 * n1 + loop1 + 50;\nloop invariant sn <= loop1 * n1 + loop1 + 51;\nloop invariant sn <= loop1 * n1 + loop1 + 52;\nloop invariant sn <= loop1 * n1 + loop1 + 53;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: loop1 >= 0;\nloop invariant i4: n1 >= 0;\nloop invariant i5: v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant i6: v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant i7: v3 >= INT_MIN && v3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: (sn == x) ==> (v1 == unknown_int());\nloop invariant i4: (sn == x) ==> (v2 == unknown_int());\nloop invariant i5: (sn == x) ==> (v3 == unknown_int());\nloop invariant i6: (sn > x) ==> (v1 == unknown_int());\nloop invariant i7: (sn > x) ==> (v2 == unknown_int());\nloop invariant i8: (sn > x) ==> (v3 == unknown_int());\nloop invariant i9: 0 <= x <= sn;\nloop invariant i10: 0 <= sn <= loop1;\nloop invariant i11: x <= sn * 1;\nloop invariant i12: x <= loop1;\nloop invariant i13: sn <= loop1 * 1;\nloop invariant i14: sn <= x * 1;\nloop invariant i15: sn >= x * 1;\nloop invariant i16: x = 1;\nloop invariant i17: sn = 0;\nloop invariant i18: loop1 >= 0;\nloop invariant i19: n1 >= 0;\nloop invariant i20: v1 >= -2147483648;\nloop invariant i21: v1 <= 2147483647;\nloop invariant i22: v2 >= -2147483648;\nloop invariant i23: v2 <= 2147483647;\nloop invariant i24: v3 >= -2147483648;\nloop invariant i25: v3 <= 2147483647;\nloop invariant i26: x >= 1;\nloop invariant i27: sn <= 2147483647;\nloop invariant i28: loop1 <= 2147483647;\nloop invariant i29: n1 <= 2147483647;\nloop invariant i30: 1 <= sn <= INT_MAX;\nloop invariant i31: loop1 == unknown_uint();\nloop invariant i32: n1 == unknown_uint();\nloop invariant i33: x == sn;\nloop invariant i34: v1 == unknown_int();\nloop invariant i35: v2 == unknown_int();\nloop invariant i36: v3 == unknown_int();\nloop invariant i37: unknown_int() == v1;\nloop invariant i38: unknown_int() == v2;\nloop invariant i39: unknown_int() == v3;\nloop invariant i40: sn == 0 ==> v1 == 0;\nloop invariant i41: sn == 0 ==> v2 == 0;\nloop invariant i42: sn == 0 ==> v3 == 0;\nloop invariant i43: sn > 0 ==> v1 == unknown_int();\nloop invariant i44: sn > 0 ==> v2 == unknown_int();\nloop invariant i45: sn > 0 ==> v3 == unknown_int();\nloop invariant i46: unknown_uint() == loop1;\nloop invariant i47: unknown_uint() == n1;\nloop invariant i48: sn == 0 ==> x == 0;\nloop invariant i49: sn > 0 ==> x == sn;\nloop invariant i50: sn == 0 ==> sn == 0;\nloop invariant i51: sn > 0 ==> sn == sn;\nloop invariant i52: sn == 0 ==> loop1 == unknown_uint();\nloop invariant i53: sn > 0 ==> loop1 == unknown_uint();\nloop invariant i54: sn == 0 ==> n1 == unknown_uint();\nloop invariant i55: sn > 0 ==> n1 == unknown_uint();\nloop invariant i56: sn == 0 ==> v1 == unknown_int();\nloop invariant i57: sn == 0 ==> v2 == unknown_int();\nloop invariant i58: sn == 0 ==> v3 == unknown_int();\nloop invariant i59: 1 <= sn <= 1 + x;\nloop invariant i60: 0 <= x <= 1 + sn;\nloop invariant i61: 1 <= x <= loop1;\nloop invariant i62: 0 <= sn <= n1;\nloop invariant i63: (sn == x * 1 || sn == 0);\nloop invariant i64: v1 == v1;\nloop invariant i65: v2 == v2;\nloop invariant i66: v3 == v3;\nloop invariant i67: x == x;\nloop invariant i68: sn == sn;\nloop invariant i69: 0 <= sn <= 1 + x;\nloop invariant i70: sn == x;\nloop invariant i71: sn <= 1 + x;\nloop invariant i72: sn == x * 1 || sn == 0;\nloop invariant i73: x <= sn;\nloop invariant i74: 1 <= sn <= x * 1;\nloop invariant i75: 1 <= x <= n1;\nloop invariant i76: 0 <= sn <= 1;\nloop invariant i77: 0 <= x <= 1;\nloop invariant i78: v1 is non-deterministic;\nloop invariant i79: v2 is non-deterministic;\nloop invariant i80: v3 is non-deterministic;\nloop invariant i81: 0 <= x <= n1;\nloop invariant i82: 0 <= v1 <= INT_MAX;\nloop invariant i83: 0 <= v2 <= INT_MAX;\nloop invariant i84: 0 <= v3 <= INT_MAX;\nloop invariant i85: sn == x + 1 || sn == 0;\nloop invariant i86: 1 <= sn <= x;\nloop invariant i87: v1 >= -v2;\nloop invariant i88: v2 >= -v3;\nloop invariant i89: v3 >= -v1;\nloop invariant i90: (sn == x*1) ==> (v1 >= -v2);\nloop invariant i91: (sn == x*1) ==> (v2 >= -v3);\nloop invariant i92: (sn == x*1) ==> (v3 >= -v1);\nloop invariant i93: (sn == x*1) ==> (sn >= 0);\nloop invariant i94: 0 <= sn <= max_value_of(sn);loop invariant 0 <= x <= max_value_of(x);\nloop invariant i95: x + sn >= 0;\nloop invariant i96: v1 >= 0;\nloop invariant i97: v2 >= 0;\nloop invariant i98: v3 >= 0;\nloop invariant i99: x <= 2147483647;\nloop invariant i100: loop1 * n1 >= 0;\nloop invariant i101: sn == 0 ==> x == sn;\nloop invariant i102: sn != 0 ==> x >= 1;\nloop invariant i103: sn == 0 ==> x <= sn;\nloop invariant i104: sn != 0 ==> x <= sn + 1;\nloop invariant i105: x == 0 ==> sn == 0;\nloop invariant i106: x != 0 ==> sn >= 1;\nloop invariant i107: x == 0 ==> sn <= 0;\nloop invariant i108: x != 0 ==> sn <= x;\nloop invariant i109: sn == 0 ==> loop1 == 0;\nloop invariant i110: sn != 0 ==> loop1 >= 1;\nloop invariant i111: sn == 0 ==> loop1 <= 0;\nloop invariant i112: sn != 0 ==> loop1 <= x;\nloop invariant i113: sn == 0 ==> n1 == 0;\nloop invariant i114: sn != 0 ==> n1 >= 1;\nloop invariant i115: sn == 0 ==> n1 <= 0;\nloop invariant i116: sn != 0 ==> n1 <= x;\nloop invariant i117: sn == 0 ==> x <= 0;\nloop invariant i118: sn != 0 ==> x <= sn;\nloop invariant i119: sn != 0 ==> v1 >= 1;\nloop invariant i120: sn == 0 ==> v1 <= 0;\nloop invariant i121: sn != 0 ==> v1 <= 2147483647;\nloop invariant i122: sn != 0 ==> v2 >= 1;\nloop invariant i123: sn == 0 ==> v2 <= 0;\nloop invariant i124: sn != 0 ==> v2 <= 2147483647;\nloop invariant i125: sn != 0 ==> v3 >= 1;\nloop invariant i126: sn == 0 ==> v3 <= 0;\nloop invariant i127: sn != 0 ==> v3 <= 2147483647;\nloop invariant i128: 0 <= x <= loop1;\nloop invariant i129: v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant i130: v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant i131: v3 >= INT_MIN && v3 <= INT_MAX;\nloop invariant i132: sn <= loop1 * n1;\nloop invariant i133: sn <= loop1 * n1 + loop1;\nloop invariant i134: sn <= loop1 * n1 + loop1 + 1;\nloop invariant i135: sn <= loop1 * n1 + loop1 + 2;\nloop invariant i136: sn <= loop1 * n1 + loop1 + 3;\nloop invariant i137: sn <= loop1 * n1 + loop1 + 4;\nloop invariant i138: sn <= loop1 * n1 + loop1 + 5;\nloop invariant i139: sn <= loop1 * n1 + loop1 + 6;\nloop invariant i140: sn <= loop1 * n1 + loop1 + 7;\nloop invariant i141: sn <= loop1 * n1 + loop1 + 8;\nloop invariant i142: sn <= loop1 * n1 + loop1 + 9;\nloop invariant i143: sn <= loop1 * n1 + loop1 + 10;\nloop invariant i144: sn <= loop1 * n1 + loop1 + 11;\nloop invariant i145: sn <= loop1 * n1 + loop1 + 12;\nloop invariant i146: sn <= loop1 * n1 + loop1 + 13;\nloop invariant i147: sn <= loop1 * n1 + loop1 + 14;\nloop invariant i148: sn <= loop1 * n1 + loop1 + 15;\nloop invariant i149: sn <= loop1 * n1 + loop1 + 16;\nloop invariant i150: sn <= loop1 * n1 + loop1 + 17;\nloop invariant i151: sn <= loop1 * n1 + loop1 + 18;\nloop invariant i152: sn <= loop1 * n1 + loop1 + 19;\nloop invariant i153: sn <= loop1 * n1 + loop1 + 20;\nloop invariant i154: sn <= loop1 * n1 + loop1 + 21;\nloop invariant i155: sn <= loop1 * n1 + loop1 + 22;\nloop invariant i156: sn <= loop1 * n1 + loop1 + 23;\nloop invariant i157: sn <= loop1 * n1 + loop1 + 24;\nloop invariant i158: sn <= loop1 * n1 + loop1 + 25;\nloop invariant i159: sn <= loop1 * n1 + loop1 + 26;\nloop invariant i160: sn <= loop1 * n1 + loop1 + 27;\nloop invariant i161: sn <= loop1 * n1 + loop1 + 28;\nloop invariant i162: sn <= loop1 * n1 + loop1 + 29;\nloop invariant i163: sn <= loop1 * n1 + loop1 + 30;\nloop invariant i164: sn <= loop1 * n1 + loop1 + 31;\nloop invariant i165: sn <= loop1 * n1 + loop1 + 32;\nloop invariant i166: sn <= loop1 * n1 + loop1 + 33;\nloop invariant i167: sn <= loop1 * n1 + loop1 + 34;\nloop invariant i168: sn <= loop1 * n1 + loop1 + 35;\nloop invariant i169: sn <= loop1 * n1 + loop1 + 36;\nloop invariant i170: sn <= loop1 * n1 + loop1 + 37;\nloop invariant i171: sn <= loop1 * n1 + loop1 + 38;\nloop invariant i172: sn <= loop1 * n1 + loop1 + 39;\nloop invariant i173: sn <= loop1 * n1 + loop1 + 40;\nloop invariant i174: sn <= loop1 * n1 + loop1 + 41;\nloop invariant i175: sn <= loop1 * n1 + loop1 + 42;\nloop invariant i176: sn <= loop1 * n1 + loop1 + 43;\nloop invariant i177: sn <= loop1 * n1 + loop1 + 44;\nloop invariant i178: sn <= loop1 * n1 + loop1 + 45;\nloop invariant i179: sn <= loop1 * n1 + loop1 + 46;\nloop invariant i180: sn <= loop1 * n1 + loop1 + 47;\nloop invariant i181: sn <= loop1 * n1 + loop1 + 48;\nloop invariant i182: sn <= loop1 * n1 + loop1 + 49;\nloop invariant i183: sn <= loop1 * n1 + loop1 + 50;\nloop invariant i184: sn <= loop1 * n1 + loop1 + 51;\nloop invariant i185: sn <= loop1 * n1 + loop1 + 52;\nloop invariant i186: sn <= loop1 * n1 + loop1 + 53;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
        "combined_annotation_num_solver_calls": 100,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\n\n\n\n\n\n\nloop invariant i9: 0 <= x <= sn;\n\nloop invariant i11: x <= sn * 1;\n\n\nloop invariant i14: sn <= x * 1;\nloop invariant i15: sn >= x * 1;\n\n\nloop invariant i18: loop1 >= 0;\nloop invariant i19: n1 >= 0;\nloop invariant i20: v1 >= -2147483648;\nloop invariant i21: v1 <= 2147483647;\nloop invariant i22: v2 >= -2147483648;\nloop invariant i23: v2 <= 2147483647;\nloop invariant i24: v3 >= -2147483648;\nloop invariant i25: v3 <= 2147483647;\n\nloop invariant i27: sn <= 2147483647;\n\n\n\n\n\nloop invariant i33: x == sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i48: sn == 0 ==> x == 0;\nloop invariant i49: sn > 0 ==> x == sn;\nloop invariant i50: sn == 0 ==> sn == 0;\nloop invariant i51: sn > 0 ==> sn == sn;\n\n\n\n\n\n\n\n\nloop invariant i60: 0 <= x <= 1 + sn;\n\n\nloop invariant i63: (sn == x * 1 || sn == 0);\nloop invariant i64: v1 == v1;\nloop invariant i65: v2 == v2;\nloop invariant i66: v3 == v3;\nloop invariant i67: x == x;\nloop invariant i68: sn == sn;\nloop invariant i69: 0 <= sn <= 1 + x;\nloop invariant i70: sn == x;\nloop invariant i71: sn <= 1 + x;\nloop invariant i72: sn == x * 1 || sn == 0;\nloop invariant i73: x <= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i93: (sn == x*1) ==> (sn >= 0);\n\nloop invariant i95: x + sn >= 0;\n\n\n\nloop invariant i99: x <= 2147483647;\nloop invariant i100: loop1 * n1 >= 0;\nloop invariant i101: sn == 0 ==> x == sn;\nloop invariant i102: sn != 0 ==> x >= 1;\nloop invariant i103: sn == 0 ==> x <= sn;\nloop invariant i104: sn != 0 ==> x <= sn + 1;\nloop invariant i105: x == 0 ==> sn == 0;\nloop invariant i106: x != 0 ==> sn >= 1;\nloop invariant i107: x == 0 ==> sn <= 0;\nloop invariant i108: x != 0 ==> sn <= x;\n\n\n\n\n\n\n\n\nloop invariant i117: sn == 0 ==> x <= 0;\nloop invariant i118: sn != 0 ==> x <= sn;\n\n\nloop invariant i121: sn != 0 ==> v1 <= 2147483647;\n\n\nloop invariant i124: sn != 0 ==> v2 <= 2147483647;\n\n\nloop invariant i127: sn != 0 ==> v3 <= 2147483647;\n\nloop invariant i129: v1 >= INT_MIN && v1 <= INT_MAX;\nloop invariant i130: v2 >= INT_MIN && v2 <= INT_MAX;\nloop invariant i131: v3 >= INT_MIN && v3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 92,
        "success_count": 78,
        "failure_count": 14,
        "success_rate": 0.8478260869565217
    }
}