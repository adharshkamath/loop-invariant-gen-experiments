{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  while ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant x <= 4 ==> x >= 4;\nloop invariant y <= 10*w;\nloop invariant z <= 100*x;\nloop invariant y <= 100;\nloop invariant z <= 1000;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100*w;\nloop invariant y <= 2;\nloop invariant y >= -100*w;\nloop invariant z <= 100*x;\nloop invariant w >= 1;\nloop invariant x == 0 ==> y == 0;\nloop invariant w == 1 ==> y == 0;\nloop invariant w == 2 ==> y == 0;\nloop invariant w == 3 ==> y == 0;\nloop invariant w == 4 ==> y == 0;\nloop invariant w >= 4 ==> y == -y;\nloop invariant w >= 5 ==> y == -y;\nloop invariant w >= 6 ==> y == -y;\nloop invariant w >= 7 ==> y == -y;\nloop invariant w >= 8 ==> y == -y;\nloop invariant w >= 9 ==> y == -y;\nloop invariant w >= 10 ==> y == -y;\nloop invariant w == 11 ==> y == -y;\nloop invariant w == 12 ==> y == -y;\nloop invariant w == 13 ==> y == -y;\nloop invariant w == 14 ==> y == -y;\nloop invariant w == 15 ==> y == -y;\nloop invariant w == 16 ==> y == -y;\nloop invariant w == 17 ==> y == -y;\nloop invariant w == 18 ==> y == -y;\nloop invariant w == 19 ==> y == -y;\nloop invariant w == 20 ==> y == -y;\nloop invariant w == 21 ==> y == -y;\nloop invariant w == 22 ==> y == -y;\nloop invariant w == 23 ==> y == -y;\nloop invariant w == 24 ==> y == -y;\nloop invariant w == 25 ==> y == -y;\nloop invariant w == 26 ==> y == -y;\nloop invariant w == 27 ==> y == -y;\nloop invariant w == 28 ==> y == -y;\nloop invariant w == 29 ==> y == -y;\nloop invariant w == 30 ==> y == -y;\nloop invariant w == 31 ==> y == -y;\nloop invariant w >= 32 ==> y == -y;\nloop invariant w >= 33 ==> y == -y;\nloop invariant w >= 34 ==> y == -y;\nloop invariant w >= 35 ==> y == -y;\nloop invariant w >= 36 ==> y == -y;\nloop invariant w >= 37 ==> y == -y;\nloop invariant w >= 38 ==> y == -y;\nloop invariant w >= 39 ==> y == -y;\nloop invariant w >= 40 ==> y == -y;\nloop invariant w >= 41 ==> y == -y;\nloop invariant w >= 42 ==> y == -y;\nloop invariant w >= 43 ==> y == -y;\nloop invariant w >= 44 ==> y == -y;\nloop invariant w >= 45 ==> y == -y;\nloop invariant w >= 46 ==> y == -y;\nloop invariant w >= 47 ==> y == -y;\nloop invariant w >= 48 ==> y == -y;\nloop invariant w >= 49 ==> y == -y;\nloop invariant w >= 50 ==> y == -y;\nloop invariant w >= 51 ==> y == -y;\nloop invariant w >= 52 ==> y == -y;\nloop invariant w >= 53 ==> y == -y;\nloop invariant w >= 54 ==> y == -y;\nloop invariant w >= 55 ==> y == -y;\nloop invariant w >= 56 ==> y == -y;\nloop invariant w >= 57 ==> y == -y;\nloop invariant w >= 58 ==> y == -y;\nloop invariant w >= 59 ==> y == -y;\nloop invariant w >= 60 ==> y == -y;\nloop invariant w >= 61 ==> y == -y;\nloop invariant w >= 62 ==> y == -y;\nloop invariant w >= 63 ==> y == -y;\nloop invariant w >= 64 ==> y == -y;\nloop invariant w >= 65 ==> y == -y;\nloop invariant w >= 66 ==> y == -y;\nloop invariant w >= 67 ==> y == -y;\nloop invariant w >= 68 ==> y == -y;\nloop invariant w >= 69 ==> y == -y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= w <= 100000;\nloop invariant z >= 100000 * w;\nloop invariant x >= 4 ==> y > 2;\nloop invariant y > 10 * w ==> y >= 10 * (w + 1);\nloop invariant z >= 100 * x ==> y < 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x <= 4 ==> 0 <= y <= 100;\nloop invariant x >= 4 ==> 0 <= y <= 100000;\nloop invariant x >= 4 ==> 0 <= z <= 100000;\nloop invariant x >= 4 ==> 0 <= w <= 100000;\nloop invariant x >= 4 ==> x * 100 <= y <= x * 100 + 1000;\nloop invariant x >= 4 ==> z >= x * 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4 * 100;\nloop invariant 0 <= z <= 10 * w;\nloop invariant 0 <= w <= INT_MAX;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 4 * 100;\nloop invariant z <= 10 * w;\nloop invariant w <= INT_MAX;\nloop invariant x == 0 ==> y <= 100;\nloop invariant x == 1 ==> y <= 200;\nloop invariant x == 2 ==> y <= 300;\nloop invariant x == 3 ==> y <= 400;\nloop invariant x == 4 ==> y <= 500;\nloop invariant x == 0 ==> z <= 10 * w;\nloop invariant x == 1 ==> z <= 11 * w;\nloop invariant x == 2 ==> z <= 12 * w;\nloop invariant x == 3 ==> z <= 13 * w;\nloop invariant x == 4 ==> z <= 14 * w;\nloop invariant x == 0 ==> w <= z / 10;\nloop invariant x == 1 ==> w <= (z - 10) / 11;\nloop invariant x == 2 ==> w <= (z - 20) / 12;\nloop invariant x == 3 ==> w <= (z - 30) / 13;\nloop invariant x == 4 ==> w <= (z - 40) / 14;\nloop invariant x == 0 ==> y <= 10 * w;\nloop invariant x == 1 ==> y <= 10 * w;\nloop invariant x == 2 ==> y <= 10 * w;\nloop invariant x == 3 ==> y <= 10 * w;\nloop invariant x == 4 ==> y <= 10 * w;\nloop invariant x == 0 ==> y <= 100 + 10 * w;\nloop invariant x == 1 ==> y <= 100 + 10 * w;\nloop invariant x == 2 ==> y <= 100 + 10 * w;\nloop invariant x == 3 ==> y <= 100 + 10 * w;\nloop invariant x == 4 ==> y <= 100 + 10 * w;\nloop invariant x == 0 ==> z <= 100 * w;\nloop invariant x == 1 ==> z <= 101 * w;\nloop invariant x == 2 ==> z <= 102 * w;\nloop invariant x == 3 ==> z <= 103 * w;\nloop invariant x == 4 ==> z <= 104 * w;\nloop invariant x == 0 ==> w <= z / 100;\nloop invariant x == 1 ==> w <= (z - 100) / 101;\nloop invariant x == 2 ==> w <= (z - 200) / 102;\nloop invariant x == 3 ==> w <= (z - 300) / 103;\nloop invariant x == 4 ==> w <= (z - 400) / 104;\nloop invariant x == 0 ==> y <= z / 10;\nloop invariant x == 1 ==> y <= (z - 10) / 11;\nloop invariant x == 2 ==> y <= (z - 20) / 12;\nloop invariant x == 3 ==> y <= (z - 30) / 13;\nloop invariant x == 4 ==> y <= (z - 40) / 14;\nloop invariant x == 0 ==> y <= 10 * w;\nloop invariant x == 1 ==> y <= 10 * w;\nloop invariant x == 2 ==> y <= 10 * w;\nloop invariant x == 3 ==> y <= 10 * w;\nloop invariant x == 4 ==> y <= 10 * w;\nloop invariant x == 0 ==> y <= 100 + 10 * w;\nloop invariant x == 1 ==> y <= 100 + 10 * w;\nloop invariant x == 2 ==> y <= 100 + 10 * w;\nloop invariant x == 3 ==> y <= 100 + 10 * w;\nloop invariant x == 4 ==> y <= 100 + 10 * w;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 4 ==> y > 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (x - 1) * x / 2;\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y >= (x - 1) * x / 2;\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant z >= 100 * x;\nloop invariant x >= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant z >= (1 + (w - 1) * w / 2);\nloop invariant w >= (1 + (z - 1) * z / 2);\nloop invariant x >= y;\nloop invariant y >= z;\nloop invariant z >= w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y >= 0 ==> z >= 100*x;\nloop invariant z >= 0 ==> y >= 10*w;\nloop invariant z >= 0 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 5;\nloop invariant x >= y / 100;\nloop invariant x >= z / 1000;\nloop invariant y >= z / 10;\nloop invariant x >= w;\nloop invariant z >= w * 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x < 4 || y < 10*w;\nloop invariant x < 4 || z < 100*x;\nloop invariant y < 10*w || z < 100*x;\nloop invariant x < 4 || y < 100;\nloop invariant x < 4 || z < 1000;\nloop invariant y < 100 || z < 1000;\nloop invariant w < 5;\nloop invariant x < 4 || y < 100000;\nloop invariant x < 4 || z < 100000;\nloop invariant y < 100000 || z < 100000;\nloop invariant x < 4 || w < 5;\nloop invariant y < 100000 || w < 5;\nloop invariant z < 100000 || w < 5;\nloop invariant x < 4 || x >= y / 100;\nloop invariant x < 4 || x >= z / 1000;\nloop invariant y < 10*w || x >= y / 100;\nloop invariant y < 10*w || x >= z / 1000;\nloop invariant z < 100*x || x >= y / 100;\nloop invariant z < 100*x || x >= z / 1000;\nloop invariant x < 4 || y >= z / 10;\nloop invariant x < 4 || y >= w * 10;\nloop invariant y >= z / 10 || y >= w * 10;\nloop invariant x < 4 || y >= z / 10;\nloop invariant x < 4 || y >= w * 10;\nloop invariant y >= z / 10 || y >= w * 10;\nloop invariant x < 4 || x >= 0;\nloop invariant x < 4 || y >= 0;\nloop invariant x < 4 || z >= 0;\nloop invariant x < 4 || w >= 0;\nloop invariant y >= 0 || x >= 0;\nloop invariant y >= 0 || y >= 0;\nloop invariant y >= 0 || z >= 0;\nloop invariant y >= 0 || w >= 0;\nloop invariant z >= 0 || x >= 0;\nloop invariant z >= 0 || y >= 0;\nloop invariant z >= 0 || z >= 0;\nloop invariant z >= 0 || w >= 0;\nloop invariant w >= 0 || x >= 0;\nloop invariant w >= 0 || y >= 0;\nloop invariant w >= 0 || z >= 0;\nloop invariant w >= 0 || w >= 0;\nloop invariant x >= 0 || x >= y / 100;\nloop invariant x >= 0 || x >= z / 1000;\nloop invariant y >= 0 || x >= y / 100;\nloop invariant y >= 0 || x >= z / 1000;\nloop invariant z >= 0 || x >= y / 100;\nloop invariant z >= 0 || x >= z / 1000;\nloop invariant x >= 0 || y >= z / 10;\nloop invariant x >= 0 || y >= w * 10;\nloop invariant y >= 0 || y >= z / 10;\nloop invariant y >= 0 || y >= w * 10;\nloop invariant y >= z / 10 || y >= z / 10;\nloop invariant y >= z / 10 || y >= w * 10;\nloop invariant y >= z / 10 || y >= w * 10;\nloop invariant z >= 0 || y >= z / 10;\nloop invariant z >= 0 || y >= w * 10;\nloop invariant z >= 0 || y >= z / 10;\nloop invariant z >= 0 || y >= w * 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100;\nloop invariant 0 <= z <= 10 * w;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant y >= 10 * w ==> z >= 100 * x;\nloop invariant w >= 1 ==> z >= 10;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x >= 0 ==> y == y + 100;\nloop invariant x >= 4 ==> x == x + 1;\nloop invariant x >= 4 ==> y == y + 1;\nloop invariant y > 10*w ==> y == -y;\nloop invariant z >= 100*x ==> y == -y;\nloop invariant w >= 0 ==> w == w + 1;\nloop invariant z >= 0 ==> z == z + 10;\nloop invariant x >= 0 ==> x == x + 1;\nloop invariant y >= 0 ==> y == y + 1;\nloop invariant z >= 0 ==> z == z + 10;\nloop invariant w >= 0 ==> w == w + 1;\nloop invariant z >= 100*x ==> y == -y;\nloop invariant x >= 0 ==> x == x + 1;\nloop invariant y >= 0 ==> y == y + 1;\nloop invariant z >= 0 ==> z == z + 10;\nloop invariant w >= 0 ==> w == w + 1;\nloop invariant z >= 100*x ==> y == -y;\nloop invariant x >= 0 ==> x == x + 1;\nloop invariant y >= 0 ==> y == y + 1;\nloop invariant z >= 0 ==> z == z + 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 1000;\nloop invariant 0 <= z <= 10000;\nloop invariant 0 <= w <= 1000;\nloop invariant x >= 4 ==> y > 2;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 1000;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant w >= y / 10;\nloop invariant y >= 100 * x;\nloop invariant z >= 100 * x;\nloop invariant w >= x + 1;\nloop invariant y >= 10 * w;\nloop invariant y <= 10 * w + 100;\nloop invariant y >= 2;\nloop invariant y <= 10 * w + 100 + 1;\nloop invariant y <= w * 10 + 100;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 10*w;\nloop invariant 0 <= z <= 10*w;\nloop invariant 0 <= w <= 100*x;\nloop invariant x >= 4 ==> y > 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant x <= 4 ==> x >= 4;\nloop invariant y <= 10*w;\nloop invariant z <= 100*x;\nloop invariant y <= 100;\nloop invariant z <= 1000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= w;\nloop invariant i5: x <= y;\n\n\n\n\nloop invariant i10: z <= 100*x;\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 48,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100*w;\nloop invariant y <= 2;\nloop invariant y >= -100*w;\nloop invariant z <= 100*x;\nloop invariant w >= 1;\nloop invariant x == 0 ==> y == 0;\nloop invariant w == 1 ==> y == 0;\nloop invariant w == 2 ==> y == 0;\nloop invariant w == 3 ==> y == 0;\nloop invariant w == 4 ==> y == 0;\nloop invariant w >= 4 ==> y == -y;\nloop invariant w >= 5 ==> y == -y;\nloop invariant w >= 6 ==> y == -y;\nloop invariant w >= 7 ==> y == -y;\nloop invariant w >= 8 ==> y == -y;\nloop invariant w >= 9 ==> y == -y;\nloop invariant w >= 10 ==> y == -y;\nloop invariant w == 11 ==> y == -y;\nloop invariant w == 12 ==> y == -y;\nloop invariant w == 13 ==> y == -y;\nloop invariant w == 14 ==> y == -y;\nloop invariant w == 15 ==> y == -y;\nloop invariant w == 16 ==> y == -y;\nloop invariant w == 17 ==> y == -y;\nloop invariant w == 18 ==> y == -y;\nloop invariant w == 19 ==> y == -y;\nloop invariant w == 20 ==> y == -y;\nloop invariant w == 21 ==> y == -y;\nloop invariant w == 22 ==> y == -y;\nloop invariant w == 23 ==> y == -y;\nloop invariant w == 24 ==> y == -y;\nloop invariant w == 25 ==> y == -y;\nloop invariant w == 26 ==> y == -y;\nloop invariant w == 27 ==> y == -y;\nloop invariant w == 28 ==> y == -y;\nloop invariant w == 29 ==> y == -y;\nloop invariant w == 30 ==> y == -y;\nloop invariant w == 31 ==> y == -y;\nloop invariant w >= 32 ==> y == -y;\nloop invariant w >= 33 ==> y == -y;\nloop invariant w >= 34 ==> y == -y;\nloop invariant w >= 35 ==> y == -y;\nloop invariant w >= 36 ==> y == -y;\nloop invariant w >= 37 ==> y == -y;\nloop invariant w >= 38 ==> y == -y;\nloop invariant w >= 39 ==> y == -y;\nloop invariant w >= 40 ==> y == -y;\nloop invariant w >= 41 ==> y == -y;\nloop invariant w >= 42 ==> y == -y;\nloop invariant w >= 43 ==> y == -y;\nloop invariant w >= 44 ==> y == -y;\nloop invariant w >= 45 ==> y == -y;\nloop invariant w >= 46 ==> y == -y;\nloop invariant w >= 47 ==> y == -y;\nloop invariant w >= 48 ==> y == -y;\nloop invariant w >= 49 ==> y == -y;\nloop invariant w >= 50 ==> y == -y;\nloop invariant w >= 51 ==> y == -y;\nloop invariant w >= 52 ==> y == -y;\nloop invariant w >= 53 ==> y == -y;\nloop invariant w >= 54 ==> y == -y;\nloop invariant w >= 55 ==> y == -y;\nloop invariant w >= 56 ==> y == -y;\nloop invariant w >= 57 ==> y == -y;\nloop invariant w >= 58 ==> y == -y;\nloop invariant w >= 59 ==> y == -y;\nloop invariant w >= 60 ==> y == -y;\nloop invariant w >= 61 ==> y == -y;\nloop invariant w >= 62 ==> y == -y;\nloop invariant w >= 63 ==> y == -y;\nloop invariant w >= 64 ==> y == -y;\nloop invariant w >= 65 ==> y == -y;\nloop invariant w >= 66 ==> y == -y;\nloop invariant w >= 67 ==> y == -y;\nloop invariant w >= 68 ==> y == -y;\nloop invariant w >= 69 ==> y == -y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: z >= 0;\nloop invariant i4: w >= 0;\n\nloop invariant i6: y <= 100*w;\n\nloop invariant i8: y >= -100*w;\nloop invariant i9: z <= 100*x;\n\nloop invariant i11: x == 0 ==> y == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= w <= 100000;\nloop invariant z >= 100000 * w;\nloop invariant x >= 4 ==> y > 2;\nloop invariant y > 10 * w ==> y >= 10 * (w + 1);\nloop invariant z >= 100 * x ==> y < 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x <= 4 ==> 0 <= y <= 100;\nloop invariant x >= 4 ==> 0 <= y <= 100000;\nloop invariant x >= 4 ==> 0 <= z <= 100000;\nloop invariant x >= 4 ==> 0 <= w <= 100000;\nloop invariant x >= 4 ==> x * 100 <= y <= x * 100 + 1000;\nloop invariant x >= 4 ==> z >= x * 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4 * 100;\nloop invariant 0 <= z <= 10 * w;\nloop invariant 0 <= w <= INT_MAX;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 4 * 100;\nloop invariant z <= 10 * w;\nloop invariant w <= INT_MAX;\nloop invariant x == 0 ==> y <= 100;\nloop invariant x == 1 ==> y <= 200;\nloop invariant x == 2 ==> y <= 300;\nloop invariant x == 3 ==> y <= 400;\nloop invariant x == 4 ==> y <= 500;\nloop invariant x == 0 ==> z <= 10 * w;\nloop invariant x == 1 ==> z <= 11 * w;\nloop invariant x == 2 ==> z <= 12 * w;\nloop invariant x == 3 ==> z <= 13 * w;\nloop invariant x == 4 ==> z <= 14 * w;\nloop invariant x == 0 ==> w <= z / 10;\nloop invariant x == 1 ==> w <= (z - 10) / 11;\nloop invariant x == 2 ==> w <= (z - 20) / 12;\nloop invariant x == 3 ==> w <= (z - 30) / 13;\nloop invariant x == 4 ==> w <= (z - 40) / 14;\nloop invariant x == 0 ==> y <= 10 * w;\nloop invariant x == 1 ==> y <= 10 * w;\nloop invariant x == 2 ==> y <= 10 * w;\nloop invariant x == 3 ==> y <= 10 * w;\nloop invariant x == 4 ==> y <= 10 * w;\nloop invariant x == 0 ==> y <= 100 + 10 * w;\nloop invariant x == 1 ==> y <= 100 + 10 * w;\nloop invariant x == 2 ==> y <= 100 + 10 * w;\nloop invariant x == 3 ==> y <= 100 + 10 * w;\nloop invariant x == 4 ==> y <= 100 + 10 * w;\nloop invariant x == 0 ==> z <= 100 * w;\nloop invariant x == 1 ==> z <= 101 * w;\nloop invariant x == 2 ==> z <= 102 * w;\nloop invariant x == 3 ==> z <= 103 * w;\nloop invariant x == 4 ==> z <= 104 * w;\nloop invariant x == 0 ==> w <= z / 100;\nloop invariant x == 1 ==> w <= (z - 100) / 101;\nloop invariant x == 2 ==> w <= (z - 200) / 102;\nloop invariant x == 3 ==> w <= (z - 300) / 103;\nloop invariant x == 4 ==> w <= (z - 400) / 104;\nloop invariant x == 0 ==> y <= z / 10;\nloop invariant x == 1 ==> y <= (z - 10) / 11;\nloop invariant x == 2 ==> y <= (z - 20) / 12;\nloop invariant x == 3 ==> y <= (z - 30) / 13;\nloop invariant x == 4 ==> y <= (z - 40) / 14;\nloop invariant x == 0 ==> y <= 10 * w;\nloop invariant x == 1 ==> y <= 10 * w;\nloop invariant x == 2 ==> y <= 10 * w;\nloop invariant x == 3 ==> y <= 10 * w;\nloop invariant x == 4 ==> y <= 10 * w;\nloop invariant x == 0 ==> y <= 100 + 10 * w;\nloop invariant x == 1 ==> y <= 100 + 10 * w;\nloop invariant x == 2 ==> y <= 100 + 10 * w;\nloop invariant x == 3 ==> y <= 100 + 10 * w;\nloop invariant x == 4 ==> y <= 100 + 10 * w;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\nloop invariant i3: 0 <= z <= 10 * w;\nloop invariant i4: 0 <= w <= INT_MAX;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: z >= 0;\nloop invariant i8: w >= 0;\n\n\nloop invariant i11: z <= 10 * w;\nloop invariant i12: w <= INT_MAX;\nloop invariant i13: x == 0 ==> y <= 100;\nloop invariant i14: x == 1 ==> y <= 200;\nloop invariant i15: x == 2 ==> y <= 300;\nloop invariant i16: x == 3 ==> y <= 400;\nloop invariant i17: x == 4 ==> y <= 500;\nloop invariant i18: x == 0 ==> z <= 10 * w;\nloop invariant i19: x == 1 ==> z <= 11 * w;\nloop invariant i20: x == 2 ==> z <= 12 * w;\nloop invariant i21: x == 3 ==> z <= 13 * w;\nloop invariant i22: x == 4 ==> z <= 14 * w;\nloop invariant i23: x == 0 ==> w <= z / 10;\n\n\n\n\nloop invariant i28: x == 0 ==> y <= 10 * w;\n\n\n\n\nloop invariant i33: x == 0 ==> y <= 100 + 10 * w;\nloop invariant i34: x == 1 ==> y <= 100 + 10 * w;\n\n\n\nloop invariant i38: x == 0 ==> z <= 100 * w;\nloop invariant i39: x == 1 ==> z <= 101 * w;\nloop invariant i40: x == 2 ==> z <= 102 * w;\nloop invariant i41: x == 3 ==> z <= 103 * w;\nloop invariant i42: x == 4 ==> z <= 104 * w;\nloop invariant i43: x == 0 ==> w <= z / 100;\n\n\n\n\nloop invariant i48: x == 0 ==> y <= z / 10;\n\n\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 4 ==> y > 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: z >= 0;\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (x - 1) * x / 2;\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y >= (x - 1) * x / 2;\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant z >= 100 * x;\nloop invariant x >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= (1 + (x - 1) * x / 2);\nloop invariant z >= (1 + (w - 1) * w / 2);\nloop invariant w >= (1 + (z - 1) * z / 2);\nloop invariant x >= y;\nloop invariant y >= z;\nloop invariant z >= w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant y >= 0 ==> x >= 4;\nloop invariant y >= 0 ==> z >= 100*x;\nloop invariant z >= 0 ==> y >= 10*w;\nloop invariant z >= 0 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\nloop invariant y >= 10*w ==> z >= 100*x;\nloop invariant z >= 100*x ==> y >= 0;\nloop invariant z >= 100*x ==> y >= 10*w;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant y >= 10*w ==> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: y >= z;\nloop invariant i11: z >= w;\nloop invariant i12: x >= 4 ==> y >= 2;\n\nloop invariant i14: y >= 10*w ==> y >= 0;\nloop invariant i15: z >= 100*x ==> y >= 0;\n\n\nloop invariant i18: z >= 0 ==> y >= 10*w;\n\n\nloop invariant i21: z >= 100*x ==> y >= 10*w;\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 5;\nloop invariant x >= y / 100;\nloop invariant x >= z / 1000;\nloop invariant y >= z / 10;\nloop invariant x >= w;\nloop invariant z >= w * 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x < 4 || y < 10*w;\nloop invariant x < 4 || z < 100*x;\nloop invariant y < 10*w || z < 100*x;\nloop invariant x < 4 || y < 100;\nloop invariant x < 4 || z < 1000;\nloop invariant y < 100 || z < 1000;\nloop invariant w < 5;\nloop invariant x < 4 || y < 100000;\nloop invariant x < 4 || z < 100000;\nloop invariant y < 100000 || z < 100000;\nloop invariant x < 4 || w < 5;\nloop invariant y < 100000 || w < 5;\nloop invariant z < 100000 || w < 5;\nloop invariant x < 4 || x >= y / 100;\nloop invariant x < 4 || x >= z / 1000;\nloop invariant y < 10*w || x >= y / 100;\nloop invariant y < 10*w || x >= z / 1000;\nloop invariant z < 100*x || x >= y / 100;\nloop invariant z < 100*x || x >= z / 1000;\nloop invariant x < 4 || y >= z / 10;\nloop invariant x < 4 || y >= w * 10;\nloop invariant y >= z / 10 || y >= w * 10;\nloop invariant x < 4 || y >= z / 10;\nloop invariant x < 4 || y >= w * 10;\nloop invariant y >= z / 10 || y >= w * 10;\nloop invariant x < 4 || x >= 0;\nloop invariant x < 4 || y >= 0;\nloop invariant x < 4 || z >= 0;\nloop invariant x < 4 || w >= 0;\nloop invariant y >= 0 || x >= 0;\nloop invariant y >= 0 || y >= 0;\nloop invariant y >= 0 || z >= 0;\nloop invariant y >= 0 || w >= 0;\nloop invariant z >= 0 || x >= 0;\nloop invariant z >= 0 || y >= 0;\nloop invariant z >= 0 || z >= 0;\nloop invariant z >= 0 || w >= 0;\nloop invariant w >= 0 || x >= 0;\nloop invariant w >= 0 || y >= 0;\nloop invariant w >= 0 || z >= 0;\nloop invariant w >= 0 || w >= 0;\nloop invariant x >= 0 || x >= y / 100;\nloop invariant x >= 0 || x >= z / 1000;\nloop invariant y >= 0 || x >= y / 100;\nloop invariant y >= 0 || x >= z / 1000;\nloop invariant z >= 0 || x >= y / 100;\nloop invariant z >= 0 || x >= z / 1000;\nloop invariant x >= 0 || y >= z / 10;\nloop invariant x >= 0 || y >= w * 10;\nloop invariant y >= 0 || y >= z / 10;\nloop invariant y >= 0 || y >= w * 10;\nloop invariant y >= z / 10 || y >= z / 10;\nloop invariant y >= z / 10 || y >= w * 10;\nloop invariant y >= z / 10 || y >= w * 10;\nloop invariant z >= 0 || y >= z / 10;\nloop invariant z >= 0 || y >= w * 10;\nloop invariant z >= 0 || y >= z / 10;\nloop invariant z >= 0 || y >= w * 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\nloop invariant i5: x >= y / 100;\nloop invariant i6: x >= z / 1000;\nloop invariant i7: y >= z / 10;\nloop invariant i8: x >= w;\nloop invariant i9: z >= w * 10;\nloop invariant i10: x >= 0;\nloop invariant i11: y >= 0;\nloop invariant i12: z >= 0;\nloop invariant i13: w >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i27: x < 4 || x >= y / 100;\nloop invariant i28: x < 4 || x >= z / 1000;\nloop invariant i29: y < 10*w || x >= y / 100;\nloop invariant i30: y < 10*w || x >= z / 1000;\nloop invariant i31: z < 100*x || x >= y / 100;\nloop invariant i32: z < 100*x || x >= z / 1000;\nloop invariant i33: x < 4 || y >= z / 10;\nloop invariant i34: x < 4 || y >= w * 10;\nloop invariant i35: y >= z / 10 || y >= w * 10;\nloop invariant i36: x < 4 || x >= 0;\nloop invariant i37: x < 4 || y >= 0;\nloop invariant i38: x < 4 || z >= 0;\nloop invariant i39: x < 4 || w >= 0;\nloop invariant i40: y >= 0 || x >= 0;\nloop invariant i41: y >= 0 || y >= 0;\nloop invariant i42: y >= 0 || z >= 0;\nloop invariant i43: y >= 0 || w >= 0;\nloop invariant i44: z >= 0 || x >= 0;\nloop invariant i45: z >= 0 || y >= 0;\nloop invariant i46: z >= 0 || z >= 0;\nloop invariant i47: z >= 0 || w >= 0;\nloop invariant i48: w >= 0 || x >= 0;\nloop invariant i49: w >= 0 || y >= 0;\nloop invariant i50: w >= 0 || z >= 0;\nloop invariant i51: w >= 0 || w >= 0;\nloop invariant i52: x >= 0 || x >= y / 100;\nloop invariant i53: x >= 0 || x >= z / 1000;\nloop invariant i54: y >= 0 || x >= y / 100;\nloop invariant i55: y >= 0 || x >= z / 1000;\nloop invariant i56: z >= 0 || x >= y / 100;\nloop invariant i57: z >= 0 || x >= z / 1000;\nloop invariant i58: x >= 0 || y >= z / 10;\nloop invariant i59: x >= 0 || y >= w * 10;\nloop invariant i60: y >= 0 || y >= z / 10;\nloop invariant i61: y >= 0 || y >= w * 10;\nloop invariant i62: y >= z / 10 || y >= z / 10;\nloop invariant i63: z >= 0 || y >= z / 10;\nloop invariant i64: z >= 0 || y >= w * 10;\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 100;\nloop invariant 0 <= z <= 10 * w;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x >= 4 ==> y >= 2;\nloop invariant y >= 10 * w ==> z >= 100 * x;\nloop invariant w >= 1 ==> z >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\nloop invariant i3: 0 <= z <= 10 * w;\nloop invariant i4: w >= 0;\nloop invariant i5: z >= 0;\n\n\nloop invariant i8: w >= 1 ==> z >= 10;\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x >= 0 ==> y == y + 100;\nloop invariant x >= 4 ==> x == x + 1;\nloop invariant x >= 4 ==> y == y + 1;\nloop invariant y > 10*w ==> y == -y;\nloop invariant z >= 100*x ==> y == -y;\nloop invariant w >= 0 ==> w == w + 1;\nloop invariant z >= 0 ==> z == z + 10;\nloop invariant x >= 0 ==> x == x + 1;\nloop invariant y >= 0 ==> y == y + 1;\nloop invariant z >= 0 ==> z == z + 10;\nloop invariant w >= 0 ==> w == w + 1;\nloop invariant z >= 100*x ==> y == -y;\nloop invariant x >= 0 ==> x == x + 1;\nloop invariant y >= 0 ==> y == y + 1;\nloop invariant z >= 0 ==> z == z + 10;\nloop invariant w >= 0 ==> w == w + 1;\nloop invariant z >= 100*x ==> y == -y;\nloop invariant x >= 0 ==> x == x + 1;\nloop invariant y >= 0 ==> y == y + 1;\nloop invariant z >= 0 ==> z == z + 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: z >= 0;\nloop invariant i4: w >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 1000;\nloop invariant 0 <= z <= 10000;\nloop invariant 0 <= w <= 1000;\nloop invariant x >= 4 ==> y > 2;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant x >= 4 ==> y <= 1000;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant w >= 0;\nloop invariant w <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\nloop invariant y >= 0;\nloop invariant y <= 1000;\nloop invariant z >= 0;\nloop invariant z <= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\n\n\nloop invariant i5: x >= 4 ==> y > 2;\nloop invariant i6: x >= 4 ==> y >= 0;\n\nloop invariant i8: w >= 0;\n\nloop invariant i10: z >= 0;\n\nloop invariant i12: y >= 0;\n\nloop invariant i14: x >= 0;\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant w >= y / 10;\nloop invariant y >= 100 * x;\nloop invariant z >= 100 * x;\nloop invariant w >= x + 1;\nloop invariant y >= 10 * w;\nloop invariant y <= 10 * w + 100;\nloop invariant y >= 2;\nloop invariant y <= 10 * w + 100 + 1;\nloop invariant y <= w * 10 + 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= w;\n\nloop invariant i6: y >= 100 * x;\n\n\nloop invariant i9: y >= 10 * w;\n\n\n\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 10*w;\nloop invariant 0 <= z <= 10*w;\nloop invariant 0 <= w <= 100*x;\nloop invariant x >= 4 ==> y > 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\n\n\nloop invariant i3: 0 <= z <= 10*w;\nloop invariant i4: 0 <= w <= 100*x;\n\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant 0 <= w is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z <= w is partially proven to be inductive.\nloop invariant x <= 4 ==> x >= 4 is preserved but not established.\nloop invariant y <= 10*w is partially proven to be inductive.\nloop invariant z <= 100*x is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant z <= 1000 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y <= 100*w is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant y >= -100*w is partially proven to be inductive.\nloop invariant w >= 1 is partially proven to be inductive.\nloop invariant x == 0 ==> y == 0 is partially proven to be inductive.\nloop invariant w == 1 ==> y == 0 is partially proven to be inductive.\nloop invariant w == 2 ==> y == 0 is partially proven to be inductive.\nloop invariant w == 3 ==> y == 0 is partially proven to be inductive.\nloop invariant w == 4 ==> y == 0 is partially proven to be inductive.\nloop invariant w >= 4 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 5 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 6 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 7 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 8 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 9 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 10 ==> y == -y is partially proven to be inductive.\nloop invariant w == 11 ==> y == -y is partially proven to be inductive.\nloop invariant w == 12 ==> y == -y is partially proven to be inductive.\nloop invariant w == 13 ==> y == -y is partially proven to be inductive.\nloop invariant w == 14 ==> y == -y is partially proven to be inductive.\nloop invariant w == 15 ==> y == -y is partially proven to be inductive.\nloop invariant w == 16 ==> y == -y is partially proven to be inductive.\nloop invariant w == 17 ==> y == -y is partially proven to be inductive.\nloop invariant w == 18 ==> y == -y is partially proven to be inductive.\nloop invariant w == 19 ==> y == -y is partially proven to be inductive.\nloop invariant w == 20 ==> y == -y is partially proven to be inductive.\nloop invariant w == 21 ==> y == -y is partially proven to be inductive.\nloop invariant w == 22 ==> y == -y is partially proven to be inductive.\nloop invariant w == 23 ==> y == -y is partially proven to be inductive.\nloop invariant w == 24 ==> y == -y is partially proven to be inductive.\nloop invariant w == 25 ==> y == -y is partially proven to be inductive.\nloop invariant w == 26 ==> y == -y is partially proven to be inductive.\nloop invariant w == 27 ==> y == -y is partially proven to be inductive.\nloop invariant w == 28 ==> y == -y is partially proven to be inductive.\nloop invariant w == 29 ==> y == -y is partially proven to be inductive.\nloop invariant w == 30 ==> y == -y is partially proven to be inductive.\nloop invariant w == 31 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 32 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 33 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 34 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 35 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 36 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 37 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 38 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 39 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 40 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 41 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 42 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 43 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 44 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 45 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 46 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 47 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 48 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 49 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 50 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 51 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 52 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 53 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 54 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 55 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 56 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 57 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 58 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 59 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 60 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 61 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 62 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 63 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 64 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 65 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 66 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 67 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 68 ==> y == -y is partially proven to be inductive.\nloop invariant w >= 69 ==> y == -y is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant 0 <= w <= 100000 is partially proven to be inductive.\nloop invariant z >= 100000 * w is partially proven to be inductive.\nloop invariant x >= 4 ==> y > 2 is partially proven to be inductive.\nloop invariant y > 10 * w ==> y >= 10 * (w + 1) is partially proven to be inductive.\nloop invariant z >= 100 * x ==> y < 0 is partially proven to be inductive.\nloop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 0 <= z <= 100000 is partially proven to be inductive.\nloop invariant x <= 4 ==> 0 <= y <= 100 is partially proven to be inductive.\nloop invariant x >= 4 ==> 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= 4 ==> 0 <= z <= 100000 is partially proven to be inductive.\nloop invariant x >= 4 ==> 0 <= w <= 100000 is partially proven to be inductive.\nloop invariant x >= 4 ==> x * 100 <= y <= x * 100 + 1000 is partially proven to be inductive.\nloop invariant x >= 4 ==> z >= x * 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 4 * 100 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 * w is partially proven to be inductive.\nloop invariant 0 <= w <= INT_MAX is partially proven to be inductive.\nloop invariant y <= 4 * 100 is partially proven to be inductive.\nloop invariant z <= 10 * w is partially proven to be inductive.\nloop invariant w <= INT_MAX is partially proven to be inductive.\nloop invariant x == 0 ==> y <= 100 is partially proven to be inductive.\nloop invariant x == 1 ==> y <= 200 is partially proven to be inductive.\nloop invariant x == 2 ==> y <= 300 is partially proven to be inductive.\nloop invariant x == 3 ==> y <= 400 is partially proven to be inductive.\nloop invariant x == 4 ==> y <= 500 is partially proven to be inductive.\nloop invariant x == 0 ==> z <= 10 * w is partially proven to be inductive.\nloop invariant x == 1 ==> z <= 11 * w is partially proven to be inductive.\nloop invariant x == 2 ==> z <= 12 * w is partially proven to be inductive.\nloop invariant x == 3 ==> z <= 13 * w is partially proven to be inductive.\nloop invariant x == 4 ==> z <= 14 * w is partially proven to be inductive.\nloop invariant x == 0 ==> w <= z / 10 is partially proven to be inductive.\nloop invariant x == 1 ==> w <= (z - 10) / 11 is partially proven to be inductive.\nloop invariant x == 2 ==> w <= (z - 20) / 12 is partially proven to be inductive.\nloop invariant x == 3 ==> w <= (z - 30) / 13 is partially proven to be inductive.\nloop invariant x == 4 ==> w <= (z - 40) / 14 is partially proven to be inductive.\nloop invariant x == 0 ==> y <= 10 * w is partially proven to be inductive.\nloop invariant x == 1 ==> y <= 10 * w is partially proven to be inductive.\nloop invariant x == 2 ==> y <= 10 * w is partially proven to be inductive.\nloop invariant x == 3 ==> y <= 10 * w is partially proven to be inductive.\nloop invariant x == 4 ==> y <= 10 * w is partially proven to be inductive.\nloop invariant x == 0 ==> y <= 100 + 10 * w is partially proven to be inductive.\nloop invariant x == 1 ==> y <= 100 + 10 * w is partially proven to be inductive.\nloop invariant x == 2 ==> y <= 100 + 10 * w is partially proven to be inductive.\nloop invariant x == 3 ==> y <= 100 + 10 * w is partially proven to be inductive.\nloop invariant x == 4 ==> y <= 100 + 10 * w is partially proven to be inductive.\nloop invariant x == 0 ==> z <= 100 * w is partially proven to be inductive.\nloop invariant x == 1 ==> z <= 101 * w is partially proven to be inductive.\nloop invariant x == 2 ==> z <= 102 * w is partially proven to be inductive.\nloop invariant x == 3 ==> z <= 103 * w is partially proven to be inductive.\nloop invariant x == 4 ==> z <= 104 * w is partially proven to be inductive.\nloop invariant x == 0 ==> w <= z / 100 is partially proven to be inductive.\nloop invariant x == 1 ==> w <= (z - 100) / 101 is partially proven to be inductive.\nloop invariant x == 2 ==> w <= (z - 200) / 102 is partially proven to be inductive.\nloop invariant x == 3 ==> w <= (z - 300) / 103 is partially proven to be inductive.\nloop invariant x == 4 ==> w <= (z - 400) / 104 is partially proven to be inductive.\nloop invariant x == 0 ==> y <= z / 10 is partially proven to be inductive.\nloop invariant x == 1 ==> y <= (z - 10) / 11 is partially proven to be inductive.\nloop invariant x == 2 ==> y <= (z - 20) / 12 is partially proven to be inductive.\nloop invariant x == 3 ==> y <= (z - 30) / 13 is partially proven to be inductive.\nloop invariant x == 4 ==> y <= (z - 40) / 14 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant y >= (x - 1) * x / 2 is partially proven to be inductive.\nloop invariant y >= (1 + (x - 1) * x / 2) is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant z >= 100 * x is partially proven to be inductive.\nloop invariant x >= 4 is partially proven to be inductive.\nloop invariant z >= (1 + (w - 1) * w / 2) is partially proven to be inductive.\nloop invariant w >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y >= z is partially proven to be inductive.\nloop invariant z >= w is partially proven to be inductive.\nloop invariant x >= 4 ==> y >= 2 is partially proven to be inductive.\nloop invariant x >= 4 ==> z >= 100*x is partially proven to be inductive.\nloop invariant y >= 10*w ==> y >= 0 is partially proven to be inductive.\nloop invariant z >= 100*x ==> y >= 0 is partially proven to be inductive.\nloop invariant y >= 0 ==> x >= 4 is partially proven to be inductive.\nloop invariant y >= 0 ==> z >= 100*x is partially proven to be inductive.\nloop invariant z >= 0 ==> y >= 10*w is partially proven to be inductive.\nloop invariant z >= 0 ==> z >= 100*x is partially proven to be inductive.\nloop invariant y >= 10*w ==> z >= 100*x is partially proven to be inductive.\nloop invariant z >= 100*x ==> y >= 10*w is partially proven to be inductive.\nloop invariant 0 <= w <= 5 is partially proven to be inductive.\nloop invariant x >= y / 100 is partially proven to be inductive.\nloop invariant x >= z / 1000 is partially proven to be inductive.\nloop invariant y >= z / 10 is partially proven to be inductive.\nloop invariant x >= w is partially proven to be inductive.\nloop invariant z >= w * 10 is partially proven to be inductive.\nloop invariant x < 4 || y < 10*w is partially proven to be inductive.\nloop invariant x < 4 || z < 100*x is partially proven to be inductive.\nloop invariant y < 10*w || z < 100*x is partially proven to be inductive.\nloop invariant x < 4 || y < 100 is partially proven to be inductive.\nloop invariant x < 4 || z < 1000 is partially proven to be inductive.\nloop invariant y < 100 || z < 1000 is partially proven to be inductive.\nloop invariant w < 5 is partially proven to be inductive.\nloop invariant x < 4 || y < 100000 is partially proven to be inductive.\nloop invariant x < 4 || z < 100000 is partially proven to be inductive.\nloop invariant y < 100000 || z < 100000 is partially proven to be inductive.\nloop invariant x < 4 || w < 5 is partially proven to be inductive.\nloop invariant y < 100000 || w < 5 is partially proven to be inductive.\nloop invariant z < 100000 || w < 5 is partially proven to be inductive.\nloop invariant x < 4 || x >= y / 100 is partially proven to be inductive.\nloop invariant x < 4 || x >= z / 1000 is partially proven to be inductive.\nloop invariant y < 10*w || x >= y / 100 is partially proven to be inductive.\nloop invariant y < 10*w || x >= z / 1000 is partially proven to be inductive.\nloop invariant z < 100*x || x >= y / 100 is partially proven to be inductive.\nloop invariant z < 100*x || x >= z / 1000 is partially proven to be inductive.\nloop invariant x < 4 || y >= z / 10 is partially proven to be inductive.\nloop invariant x < 4 || y >= w * 10 is partially proven to be inductive.\nloop invariant y >= z / 10 || y >= w * 10 is partially proven to be inductive.\nloop invariant x < 4 || x >= 0 is partially proven to be inductive.\nloop invariant x < 4 || y >= 0 is partially proven to be inductive.\nloop invariant x < 4 || z >= 0 is partially proven to be inductive.\nloop invariant x < 4 || w >= 0 is partially proven to be inductive.\nloop invariant y >= 0 || x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 || y >= 0 is partially proven to be inductive.\nloop invariant y >= 0 || z >= 0 is partially proven to be inductive.\nloop invariant y >= 0 || w >= 0 is partially proven to be inductive.\nloop invariant z >= 0 || x >= 0 is partially proven to be inductive.\nloop invariant z >= 0 || y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 || z >= 0 is partially proven to be inductive.\nloop invariant z >= 0 || w >= 0 is partially proven to be inductive.\nloop invariant w >= 0 || x >= 0 is partially proven to be inductive.\nloop invariant w >= 0 || y >= 0 is partially proven to be inductive.\nloop invariant w >= 0 || z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 || w >= 0 is partially proven to be inductive.\nloop invariant x >= 0 || x >= y / 100 is partially proven to be inductive.\nloop invariant x >= 0 || x >= z / 1000 is partially proven to be inductive.\nloop invariant y >= 0 || x >= y / 100 is partially proven to be inductive.\nloop invariant y >= 0 || x >= z / 1000 is partially proven to be inductive.\nloop invariant z >= 0 || x >= y / 100 is partially proven to be inductive.\nloop invariant z >= 0 || x >= z / 1000 is partially proven to be inductive.\nloop invariant x >= 0 || y >= z / 10 is partially proven to be inductive.\nloop invariant x >= 0 || y >= w * 10 is partially proven to be inductive.\nloop invariant y >= 0 || y >= z / 10 is partially proven to be inductive.\nloop invariant y >= 0 || y >= w * 10 is partially proven to be inductive.\nloop invariant y >= z / 10 || y >= z / 10 is partially proven to be inductive.\nloop invariant z >= 0 || y >= z / 10 is partially proven to be inductive.\nloop invariant z >= 0 || y >= w * 10 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant y >= 10 * w ==> z >= 100 * x is partially proven to be inductive.\nloop invariant w >= 1 ==> z >= 10 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nloop invariant z <= 100000 is partially proven to be inductive.\nloop invariant w <= 100000 is partially proven to be inductive.\nloop invariant z >= 100*x is partially proven to be inductive.\nloop invariant x >= 0 ==> y == y + 100 is partially proven to be inductive.\nloop invariant x >= 4 ==> x == x + 1 is partially proven to be inductive.\nloop invariant x >= 4 ==> y == y + 1 is partially proven to be inductive.\nloop invariant y > 10*w ==> y == -y is partially proven to be inductive.\nloop invariant z >= 100*x ==> y == -y is partially proven to be inductive.\nloop invariant w >= 0 ==> w == w + 1 is partially proven to be inductive.\nloop invariant z >= 0 ==> z == z + 10 is partially proven to be inductive.\nloop invariant x >= 0 ==> x == x + 1 is partially proven to be inductive.\nloop invariant y >= 0 ==> y == y + 1 is partially proven to be inductive.\nloop invariant 0 <= y <= 1000 is partially proven to be inductive.\nloop invariant 0 <= z <= 10000 is partially proven to be inductive.\nloop invariant 0 <= w <= 1000 is partially proven to be inductive.\nloop invariant x >= 4 ==> y >= 0 is partially proven to be inductive.\nloop invariant x >= 4 ==> y <= 1000 is partially proven to be inductive.\nloop invariant w <= 1000 is partially proven to be inductive.\nloop invariant z <= 10000 is partially proven to be inductive.\nloop invariant y <= 1000 is partially proven to be inductive.\nloop invariant w >= y / 10 is partially proven to be inductive.\nloop invariant y >= 100 * x is partially proven to be inductive.\nloop invariant w >= x + 1 is partially proven to be inductive.\nloop invariant y >= 10 * w is partially proven to be inductive.\nloop invariant y <= 10 * w + 100 is partially proven to be inductive.\nloop invariant y >= 2 is partially proven to be inductive.\nloop invariant y <= 10 * w + 100 + 1 is partially proven to be inductive.\nloop invariant y <= w * 10 + 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 10*w is partially proven to be inductive.\nloop invariant 0 <= z <= 10*w is partially proven to be inductive.\nloop invariant 0 <= w <= 100*x is partially proven to be inductive.\nAssertion y > 2: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= w;\nloop invariant i5: x <= y;\nloop invariant i6: y <= z;\nloop invariant i7: z <= w;\nloop invariant i8: x <= 4 ==> x >= 4;\nloop invariant i9: y <= 10*w;\nloop invariant i10: z <= 100*x;\nloop invariant i11: y <= 100;\nloop invariant i12: z <= 1000;\nloop invariant i13: x >= 0;\nloop invariant i14: y >= 0;\nloop invariant i15: z >= 0;\nloop invariant i16: w >= 0;\nloop invariant i17: x <= 4;\nloop invariant i18: y <= 100*w;\nloop invariant i19: y <= 2;\nloop invariant i20: y >= -100*w;\nloop invariant i21: w >= 1;\nloop invariant i22: x == 0 ==> y == 0;\nloop invariant i23: w == 1 ==> y == 0;\nloop invariant i24: w == 2 ==> y == 0;\nloop invariant i25: w == 3 ==> y == 0;\nloop invariant i26: w == 4 ==> y == 0;\nloop invariant i27: w >= 4 ==> y == -y;\nloop invariant i28: w >= 5 ==> y == -y;\nloop invariant i29: w >= 6 ==> y == -y;\nloop invariant i30: w >= 7 ==> y == -y;\nloop invariant i31: w >= 8 ==> y == -y;\nloop invariant i32: w >= 9 ==> y == -y;\nloop invariant i33: w >= 10 ==> y == -y;\nloop invariant i34: w == 11 ==> y == -y;\nloop invariant i35: w == 12 ==> y == -y;\nloop invariant i36: w == 13 ==> y == -y;\nloop invariant i37: w == 14 ==> y == -y;\nloop invariant i38: w == 15 ==> y == -y;\nloop invariant i39: w == 16 ==> y == -y;\nloop invariant i40: w == 17 ==> y == -y;\nloop invariant i41: w == 18 ==> y == -y;\nloop invariant i42: w == 19 ==> y == -y;\nloop invariant i43: w == 20 ==> y == -y;\nloop invariant i44: w == 21 ==> y == -y;\nloop invariant i45: w == 22 ==> y == -y;\nloop invariant i46: w == 23 ==> y == -y;\nloop invariant i47: w == 24 ==> y == -y;\nloop invariant i48: w == 25 ==> y == -y;\nloop invariant i49: w == 26 ==> y == -y;\nloop invariant i50: w == 27 ==> y == -y;\nloop invariant i51: w == 28 ==> y == -y;\nloop invariant i52: w == 29 ==> y == -y;\nloop invariant i53: w == 30 ==> y == -y;\nloop invariant i54: w == 31 ==> y == -y;\nloop invariant i55: w >= 32 ==> y == -y;\nloop invariant i56: w >= 33 ==> y == -y;\nloop invariant i57: w >= 34 ==> y == -y;\nloop invariant i58: w >= 35 ==> y == -y;\nloop invariant i59: w >= 36 ==> y == -y;\nloop invariant i60: w >= 37 ==> y == -y;\nloop invariant i61: w >= 38 ==> y == -y;\nloop invariant i62: w >= 39 ==> y == -y;\nloop invariant i63: w >= 40 ==> y == -y;\nloop invariant i64: w >= 41 ==> y == -y;\nloop invariant i65: w >= 42 ==> y == -y;\nloop invariant i66: w >= 43 ==> y == -y;\nloop invariant i67: w >= 44 ==> y == -y;\nloop invariant i68: w >= 45 ==> y == -y;\nloop invariant i69: w >= 46 ==> y == -y;\nloop invariant i70: w >= 47 ==> y == -y;\nloop invariant i71: w >= 48 ==> y == -y;\nloop invariant i72: w >= 49 ==> y == -y;\nloop invariant i73: w >= 50 ==> y == -y;\nloop invariant i74: w >= 51 ==> y == -y;\nloop invariant i75: w >= 52 ==> y == -y;\nloop invariant i76: w >= 53 ==> y == -y;\nloop invariant i77: w >= 54 ==> y == -y;\nloop invariant i78: w >= 55 ==> y == -y;\nloop invariant i79: w >= 56 ==> y == -y;\nloop invariant i80: w >= 57 ==> y == -y;\nloop invariant i81: w >= 58 ==> y == -y;\nloop invariant i82: w >= 59 ==> y == -y;\nloop invariant i83: w >= 60 ==> y == -y;\nloop invariant i84: w >= 61 ==> y == -y;\nloop invariant i85: w >= 62 ==> y == -y;\nloop invariant i86: w >= 63 ==> y == -y;\nloop invariant i87: w >= 64 ==> y == -y;\nloop invariant i88: w >= 65 ==> y == -y;\nloop invariant i89: w >= 66 ==> y == -y;\nloop invariant i90: w >= 67 ==> y == -y;\nloop invariant i91: w >= 68 ==> y == -y;\nloop invariant i92: w >= 69 ==> y == -y;\nloop invariant i93: 0 <= y <= 100000;\nloop invariant i94: x >= (1 + (y - 1) * y / 2);\nloop invariant i95: 0 <= w <= 100000;\nloop invariant i96: z >= 100000 * w;\nloop invariant i97: x >= 4 ==> y > 2;\nloop invariant i98: y > 10 * w ==> y >= 10 * (w + 1);\nloop invariant i99: z >= 100 * x ==> y < 0;\nloop invariant i100: 0 <= x <= 4;\nloop invariant i101: 0 <= z <= 100000;\nloop invariant i102: x <= 4 ==> 0 <= y <= 100;\nloop invariant i103: x >= 4 ==> 0 <= y <= 100000;\nloop invariant i104: x >= 4 ==> 0 <= z <= 100000;\nloop invariant i105: x >= 4 ==> 0 <= w <= 100000;\nloop invariant i106: x >= 4 ==> x * 100 <= y <= x * 100 + 1000;\nloop invariant i107: x >= 4 ==> z >= x * 100;\nloop invariant i108: 0 <= y <= 4 * 100;\nloop invariant i109: 0 <= z <= 10 * w;\nloop invariant i110: 0 <= w <= INT_MAX;\nloop invariant i111: y <= 4 * 100;\nloop invariant i112: z <= 10 * w;\nloop invariant i113: w <= INT_MAX;\nloop invariant i114: x == 0 ==> y <= 100;\nloop invariant i115: x == 1 ==> y <= 200;\nloop invariant i116: x == 2 ==> y <= 300;\nloop invariant i117: x == 3 ==> y <= 400;\nloop invariant i118: x == 4 ==> y <= 500;\nloop invariant i119: x == 0 ==> z <= 10 * w;\nloop invariant i120: x == 1 ==> z <= 11 * w;\nloop invariant i121: x == 2 ==> z <= 12 * w;\nloop invariant i122: x == 3 ==> z <= 13 * w;\nloop invariant i123: x == 4 ==> z <= 14 * w;\nloop invariant i124: x == 0 ==> w <= z / 10;\nloop invariant i125: x == 1 ==> w <= (z - 10) / 11;\nloop invariant i126: x == 2 ==> w <= (z - 20) / 12;\nloop invariant i127: x == 3 ==> w <= (z - 30) / 13;\nloop invariant i128: x == 4 ==> w <= (z - 40) / 14;\nloop invariant i129: x == 0 ==> y <= 10 * w;\nloop invariant i130: x == 1 ==> y <= 10 * w;\nloop invariant i131: x == 2 ==> y <= 10 * w;\nloop invariant i132: x == 3 ==> y <= 10 * w;\nloop invariant i133: x == 4 ==> y <= 10 * w;\nloop invariant i134: x == 0 ==> y <= 100 + 10 * w;\nloop invariant i135: x == 1 ==> y <= 100 + 10 * w;\nloop invariant i136: x == 2 ==> y <= 100 + 10 * w;\nloop invariant i137: x == 3 ==> y <= 100 + 10 * w;\nloop invariant i138: x == 4 ==> y <= 100 + 10 * w;\nloop invariant i139: x == 0 ==> z <= 100 * w;\nloop invariant i140: x == 1 ==> z <= 101 * w;\nloop invariant i141: x == 2 ==> z <= 102 * w;\nloop invariant i142: x == 3 ==> z <= 103 * w;\nloop invariant i143: x == 4 ==> z <= 104 * w;\nloop invariant i144: x == 0 ==> w <= z / 100;\nloop invariant i145: x == 1 ==> w <= (z - 100) / 101;\nloop invariant i146: x == 2 ==> w <= (z - 200) / 102;\nloop invariant i147: x == 3 ==> w <= (z - 300) / 103;\nloop invariant i148: x == 4 ==> w <= (z - 400) / 104;\nloop invariant i149: x == 0 ==> y <= z / 10;\nloop invariant i150: x == 1 ==> y <= (z - 10) / 11;\nloop invariant i151: x == 2 ==> y <= (z - 20) / 12;\nloop invariant i152: x == 3 ==> y <= (z - 30) / 13;\nloop invariant i153: x == 4 ==> y <= (z - 40) / 14;\nloop invariant i154: 1 <= x <= 4;\nloop invariant i155: 0 <= x <= 100000;\nloop invariant i156: y >= (x - 1) * x / 2;\nloop invariant i157: y >= (1 + (x - 1) * x / 2);\nloop invariant i158: x >= (y - 1) * y / 2;\nloop invariant i159: z >= 100 * x;\nloop invariant i160: x >= 4;\nloop invariant i161: z >= (1 + (w - 1) * w / 2);\nloop invariant i162: w >= (1 + (z - 1) * z / 2);\nloop invariant i163: x >= y;\nloop invariant i164: y >= z;\nloop invariant i165: z >= w;\nloop invariant i166: x >= 4 ==> y >= 2;\nloop invariant i167: x >= 4 ==> z >= 100*x;\nloop invariant i168: y >= 10*w ==> y >= 0;\nloop invariant i169: z >= 100*x ==> y >= 0;\nloop invariant i170: y >= 0 ==> x >= 4;\nloop invariant i171: y >= 0 ==> z >= 100*x;\nloop invariant i172: z >= 0 ==> y >= 10*w;\nloop invariant i173: z >= 0 ==> z >= 100*x;\nloop invariant i174: y >= 10*w ==> z >= 100*x;\nloop invariant i175: z >= 100*x ==> y >= 10*w;\nloop invariant i176: 0 <= w <= 5;\nloop invariant i177: x >= y / 100;\nloop invariant i178: x >= z / 1000;\nloop invariant i179: y >= z / 10;\nloop invariant i180: x >= w;\nloop invariant i181: z >= w * 10;\nloop invariant i182: x < 4 || y < 10*w;\nloop invariant i183: x < 4 || z < 100*x;\nloop invariant i184: y < 10*w || z < 100*x;\nloop invariant i185: x < 4 || y < 100;\nloop invariant i186: x < 4 || z < 1000;\nloop invariant i187: y < 100 || z < 1000;\nloop invariant i188: w < 5;\nloop invariant i189: x < 4 || y < 100000;\nloop invariant i190: x < 4 || z < 100000;\nloop invariant i191: y < 100000 || z < 100000;\nloop invariant i192: x < 4 || w < 5;\nloop invariant i193: y < 100000 || w < 5;\nloop invariant i194: z < 100000 || w < 5;\nloop invariant i195: x < 4 || x >= y / 100;\nloop invariant i196: x < 4 || x >= z / 1000;\nloop invariant i197: y < 10*w || x >= y / 100;\nloop invariant i198: y < 10*w || x >= z / 1000;\nloop invariant i199: z < 100*x || x >= y / 100;\nloop invariant i200: z < 100*x || x >= z / 1000;\nloop invariant i201: x < 4 || y >= z / 10;\nloop invariant i202: x < 4 || y >= w * 10;\nloop invariant i203: y >= z / 10 || y >= w * 10;\nloop invariant i204: x < 4 || x >= 0;\nloop invariant i205: x < 4 || y >= 0;\nloop invariant i206: x < 4 || z >= 0;\nloop invariant i207: x < 4 || w >= 0;\nloop invariant i208: y >= 0 || x >= 0;\nloop invariant i209: y >= 0 || y >= 0;\nloop invariant i210: y >= 0 || z >= 0;\nloop invariant i211: y >= 0 || w >= 0;\nloop invariant i212: z >= 0 || x >= 0;\nloop invariant i213: z >= 0 || y >= 0;\nloop invariant i214: z >= 0 || z >= 0;\nloop invariant i215: z >= 0 || w >= 0;\nloop invariant i216: w >= 0 || x >= 0;\nloop invariant i217: w >= 0 || y >= 0;\nloop invariant i218: w >= 0 || z >= 0;\nloop invariant i219: w >= 0 || w >= 0;\nloop invariant i220: x >= 0 || x >= y / 100;\nloop invariant i221: x >= 0 || x >= z / 1000;\nloop invariant i222: y >= 0 || x >= y / 100;\nloop invariant i223: y >= 0 || x >= z / 1000;\nloop invariant i224: z >= 0 || x >= y / 100;\nloop invariant i225: z >= 0 || x >= z / 1000;\nloop invariant i226: x >= 0 || y >= z / 10;\nloop invariant i227: x >= 0 || y >= w * 10;\nloop invariant i228: y >= 0 || y >= z / 10;\nloop invariant i229: y >= 0 || y >= w * 10;\nloop invariant i230: y >= z / 10 || y >= z / 10;\nloop invariant i231: z >= 0 || y >= z / 10;\nloop invariant i232: z >= 0 || y >= w * 10;\nloop invariant i233: 0 <= y <= 100;\nloop invariant i234: y >= 10 * w ==> z >= 100 * x;\nloop invariant i235: w >= 1 ==> z >= 10;\nloop invariant i236: y <= 100000;\nloop invariant i237: z <= 100000;\nloop invariant i238: w <= 100000;\nloop invariant i239: z >= 100*x;\nloop invariant i240: x >= 0 ==> y == y + 100;\nloop invariant i241: x >= 4 ==> x == x + 1;\nloop invariant i242: x >= 4 ==> y == y + 1;\nloop invariant i243: y > 10*w ==> y == -y;\nloop invariant i244: z >= 100*x ==> y == -y;\nloop invariant i245: w >= 0 ==> w == w + 1;\nloop invariant i246: z >= 0 ==> z == z + 10;\nloop invariant i247: x >= 0 ==> x == x + 1;\nloop invariant i248: y >= 0 ==> y == y + 1;\nloop invariant i249: 0 <= y <= 1000;\nloop invariant i250: 0 <= z <= 10000;\nloop invariant i251: 0 <= w <= 1000;\nloop invariant i252: x >= 4 ==> y >= 0;\nloop invariant i253: x >= 4 ==> y <= 1000;\nloop invariant i254: w <= 1000;\nloop invariant i255: z <= 10000;\nloop invariant i256: y <= 1000;\nloop invariant i257: w >= y / 10;\nloop invariant i258: y >= 100 * x;\nloop invariant i259: w >= x + 1;\nloop invariant i260: y >= 10 * w;\nloop invariant i261: y <= 10 * w + 100;\nloop invariant i262: y >= 2;\nloop invariant i263: y <= 10 * w + 100 + 1;\nloop invariant i264: y <= w * 10 + 100;\nloop invariant i265: 0 <= y <= 10*w;\nloop invariant i266: 0 <= z <= 10*w;\nloop invariant i267: 0 <= w <= 100*x;\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
        "combined_annotation_num_solver_calls": 169,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= w;\nloop invariant i5: x <= y;\n\n\n\n\nloop invariant i10: z <= 100*x;\n\n\nloop invariant i13: x >= 0;\nloop invariant i14: y >= 0;\nloop invariant i15: z >= 0;\nloop invariant i16: w >= 0;\n\nloop invariant i18: y <= 100*w;\n\nloop invariant i20: y >= -100*w;\n\nloop invariant i22: x == 0 ==> y == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i97: x >= 4 ==> y > 2;\nloop invariant i98: y > 10 * w ==> y >= 10 * (w + 1);\n\n\n\n\n\n\n\nloop invariant i106: x >= 4 ==> x * 100 <= y <= x * 100 + 1000;\n\n\nloop invariant i109: 0 <= z <= 10 * w;\nloop invariant i110: 0 <= w <= INT_MAX;\n\nloop invariant i112: z <= 10 * w;\nloop invariant i113: w <= INT_MAX;\nloop invariant i114: x == 0 ==> y <= 100;\nloop invariant i115: x == 1 ==> y <= 200;\nloop invariant i116: x == 2 ==> y <= 300;\nloop invariant i117: x == 3 ==> y <= 400;\nloop invariant i118: x == 4 ==> y <= 500;\nloop invariant i119: x == 0 ==> z <= 10 * w;\nloop invariant i120: x == 1 ==> z <= 11 * w;\nloop invariant i121: x == 2 ==> z <= 12 * w;\nloop invariant i122: x == 3 ==> z <= 13 * w;\nloop invariant i123: x == 4 ==> z <= 14 * w;\nloop invariant i124: x == 0 ==> w <= z / 10;\n\n\n\n\nloop invariant i129: x == 0 ==> y <= 10 * w;\n\n\n\n\nloop invariant i134: x == 0 ==> y <= 100 + 10 * w;\nloop invariant i135: x == 1 ==> y <= 100 + 10 * w;\n\n\n\nloop invariant i139: x == 0 ==> z <= 100 * w;\nloop invariant i140: x == 1 ==> z <= 101 * w;\nloop invariant i141: x == 2 ==> z <= 102 * w;\nloop invariant i142: x == 3 ==> z <= 103 * w;\nloop invariant i143: x == 4 ==> z <= 104 * w;\nloop invariant i144: x == 0 ==> w <= z / 100;\n\n\n\n\nloop invariant i149: x == 0 ==> y <= z / 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i164: y >= z;\nloop invariant i165: z >= w;\nloop invariant i166: x >= 4 ==> y >= 2;\n\nloop invariant i168: y >= 10*w ==> y >= 0;\nloop invariant i169: z >= 100*x ==> y >= 0;\n\n\nloop invariant i172: z >= 0 ==> y >= 10*w;\n\n\nloop invariant i175: z >= 100*x ==> y >= 10*w;\n\nloop invariant i177: x >= y / 100;\nloop invariant i178: x >= z / 1000;\nloop invariant i179: y >= z / 10;\nloop invariant i180: x >= w;\nloop invariant i181: z >= w * 10;\n\nloop invariant i183: x < 4 || z < 100*x;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i195: x < 4 || x >= y / 100;\nloop invariant i196: x < 4 || x >= z / 1000;\nloop invariant i197: y < 10*w || x >= y / 100;\nloop invariant i198: y < 10*w || x >= z / 1000;\nloop invariant i199: z < 100*x || x >= y / 100;\nloop invariant i200: z < 100*x || x >= z / 1000;\nloop invariant i201: x < 4 || y >= z / 10;\nloop invariant i202: x < 4 || y >= w * 10;\nloop invariant i203: y >= z / 10 || y >= w * 10;\nloop invariant i204: x < 4 || x >= 0;\nloop invariant i205: x < 4 || y >= 0;\nloop invariant i206: x < 4 || z >= 0;\nloop invariant i207: x < 4 || w >= 0;\nloop invariant i208: y >= 0 || x >= 0;\nloop invariant i209: y >= 0 || y >= 0;\nloop invariant i210: y >= 0 || z >= 0;\nloop invariant i211: y >= 0 || w >= 0;\nloop invariant i212: z >= 0 || x >= 0;\nloop invariant i213: z >= 0 || y >= 0;\nloop invariant i214: z >= 0 || z >= 0;\nloop invariant i215: z >= 0 || w >= 0;\nloop invariant i216: w >= 0 || x >= 0;\nloop invariant i217: w >= 0 || y >= 0;\nloop invariant i218: w >= 0 || z >= 0;\nloop invariant i219: w >= 0 || w >= 0;\nloop invariant i220: x >= 0 || x >= y / 100;\nloop invariant i221: x >= 0 || x >= z / 1000;\nloop invariant i222: y >= 0 || x >= y / 100;\nloop invariant i223: y >= 0 || x >= z / 1000;\nloop invariant i224: z >= 0 || x >= y / 100;\nloop invariant i225: z >= 0 || x >= z / 1000;\nloop invariant i226: x >= 0 || y >= z / 10;\nloop invariant i227: x >= 0 || y >= w * 10;\nloop invariant i228: y >= 0 || y >= z / 10;\nloop invariant i229: y >= 0 || y >= w * 10;\nloop invariant i230: y >= z / 10 || y >= z / 10;\nloop invariant i231: z >= 0 || y >= z / 10;\nloop invariant i232: z >= 0 || y >= w * 10;\n\n\nloop invariant i235: w >= 1 ==> z >= 10;\n\n\n\n\n\n\n\n\nloop invariant i244: z >= 100*x ==> y == -y;\n\n\n\n\n\n\n\nloop invariant i252: x >= 4 ==> y >= 0;\n\n\n\n\n\nloop invariant i258: y >= 100 * x;\n\nloop invariant i260: y >= 10 * w;\n\n\n\n\n\nloop invariant i266: 0 <= z <= 10*w;\nloop invariant i267: 0 <= w <= 100*x;\n*/\nwhile ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c"
        ],
        "skipped": [],
        "total": 166,
        "success_count": 137,
        "failure_count": 29,
        "success_rate": 0.8253012048192772
    }
}