{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= 0;\nloop invariant y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 10*x;\nloop invariant 0 <= w <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4, 0 <= y <= 200, 0 <= w <= 100000, 0 <= z <= 1000000;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 4;\nloop invariant 0 <= z <= 40;\nloop invariant x <= y;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4; loop invariant 0 <= y <= 2; loop invariant 1 <= w <= 10; loop invariant 10 <= z <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= (w * 10);\nloop invariant 0 <= z <= (x * 100);\nloop invariant w == z / 10;\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= (w * 10);\nloop invariant 0 <= z <= (x * 100);\nloop invariant w == z / 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= w * 10 + z;\nloop invariant 0 <= y <= 10 * (w - 1) + z;\nloop invariant 0 <= w <= z;\nloop invariant 0 <= z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant w >= 0;\nloop invariant w <= 100000;\nloop invariant z >= 0;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 10;\nloop invariant 0 <= z <= 100;\nloop invariant x <= z/10;\nloop invariant y <= 100*w;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= unknown_int();\nloop invariant 0 <= z <= 10 * unknown_int();\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant x == x;\nloop invariant y == y;\nloop invariant w == w;\nloop invariant z == z;\nloop invariant unknown_int() ==> (0 <= x <= 4);\nloop invariant unknown_int() ==> (0 <= y <= 2);\nloop invariant unknown_int() ==> (0 <= w <= unknown_int());\nloop invariant unknown_int() ==> (0 <= z <= 10 * unknown_int());\nloop invariant unknown_int() ==> (x == x);\nloop invariant unknown_int() ==> (y == y);\nloop invariant unknown_int() ==> (w == w);\nloop invariant unknown_int() ==> (z == z);\nloop invariant unknown_int() ==> (0 <= x <= 4 ==> x == x);\nloop invariant unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y));\nloop invariant unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w));\nloop invariant unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z));\nloop invariant unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z)));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x)));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z)))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x)))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)))))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= unknown_int();\nloop invariant 0 <= z <= 100*unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x <= 4;\nloop invariant z >= 100*x;\nloop invariant w >= 1;\nloop invariant y <= 10*w;\nloop invariant z >= 10*w;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant w >= 4*x;\nloop invariant z >= 400*x;\nloop invariant z <= 100*(x+1);\nloop invariant x >= 0 ==> w >= 1;\nloop invariant y >= 0 ==> z >= 100*x;\nloop invariant y <= 10*w ==> z >= 10*w;\nloop invariant w >= 4*x ==> z >= 400*x;\nloop invariant z <= 100*(x+1) ==> x >= 0;\nloop invariant y <= 2 ==> x >= 0;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant x >= 4 ==> w >= 1;\nloop invariant x >= 4 ==> y <= 10*w;\nloop invariant x >= 4 ==> z >= 10*w;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> z <= 100*(x+1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 1;\nloop invariant 0 <= z <= 100;\nloop invariant x >= 4 ==> y <= 10*w && z >= 100*x;\nloop invariant x < 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> w <= 1;\nloop invariant x >= 4 ==> z <= 100*x;\nloop invariant x < 4 ==> w <= 1;\nloop invariant x < 4 ==> z <= 100*x;\nloop invariant x >= 4 ==> x >= 4;\nloop invariant x < 4 ==> x < 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x < 4 ==> y <= 100;\nloop invariant x < 4 ==> y >= 0;\nloop invariant y <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\nloop invariant i3: w >= 0;\nloop invariant i4: z >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= z <= 10*x;\nloop invariant 0 <= w <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4, 0 <= y <= 200, 0 <= w <= 100000, 0 <= z <= 1000000;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\nloop invariant z >= w;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant y >= z;\nloop invariant x >= w;\nloop invariant y >= w;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\nloop invariant i4: z >= w;\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 4;\nloop invariant 0 <= z <= 40;\nloop invariant x <= y;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\nloop invariant x <= 2;\nloop invariant y >= -2;\nloop invariant w <= 4;\nloop invariant z <= 40;\nloop invariant x <= z/100;\nloop invariant y <= 10*w;\nloop invariant z >= 100*x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4; loop invariant 0 <= y <= 2; loop invariant 1 <= w <= 10; loop invariant 10 <= z <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= (w * 10);\nloop invariant 0 <= z <= (x * 100);\nloop invariant w == z / 10;\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= (w * 10);\nloop invariant 0 <= z <= (x * 100);\nloop invariant w == z / 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= w * 10 + z;\nloop invariant 0 <= y <= 10 * (w - 1) + z;\nloop invariant 0 <= w <= z;\nloop invariant 0 <= z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\nloop invariant z <= 10 * (w - 1) + 100 * x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant y <= w * 10 + z;\nloop invariant y <= 10 * (w - 1) + z;\nloop invariant w <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\nloop invariant i1: 0 <= x <= w * 10 + z;\n\nloop invariant i3: 0 <= w <= z;\n\nloop invariant i5: x >= 0;\n\nloop invariant i7: w >= 0;\nloop invariant i8: z >= 0;\n\n\nloop invariant i11: w <= z;\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant w >= 0;\nloop invariant w <= 100000;\nloop invariant z >= 0;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= 4;\nloop invariant y <= 100000;\nloop invariant w <= 100000;\nloop invariant z <= 100000;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\nloop invariant i4: w >= 0;\n\nloop invariant i6: z >= 0;\n\nloop invariant i8: x >= 0;\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 10;\nloop invariant 0 <= z <= 100;\nloop invariant x <= z/10;\nloop invariant y <= 100*w;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant w >= 0;\nloop invariant z >= 0;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\nloop invariant i5: x <= z/10;\nloop invariant i6: y <= 100*w;\nloop invariant i7: x >= 0;\n\nloop invariant i9: w >= 0;\nloop invariant i10: z >= 0;\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 35,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= unknown_int();\nloop invariant 0 <= z <= 10 * unknown_int();\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant x == x;\nloop invariant y == y;\nloop invariant w == w;\nloop invariant z == z;\nloop invariant unknown_int() ==> (0 <= x <= 4);\nloop invariant unknown_int() ==> (0 <= y <= 2);\nloop invariant unknown_int() ==> (0 <= w <= unknown_int());\nloop invariant unknown_int() ==> (0 <= z <= 10 * unknown_int());\nloop invariant unknown_int() ==> (x == x);\nloop invariant unknown_int() ==> (y == y);\nloop invariant unknown_int() ==> (w == w);\nloop invariant unknown_int() ==> (z == z);\nloop invariant unknown_int() ==> (0 <= x <= 4 ==> x == x);\nloop invariant unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y));\nloop invariant unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w));\nloop invariant unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z));\nloop invariant unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z)));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x)));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z)))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x)))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)))))));\nloop invariant unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)))))));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\nloop invariant i5: x == x;\nloop invariant i6: y == y;\nloop invariant i7: w == w;\nloop invariant i8: z == z;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= unknown_int();\nloop invariant 0 <= z <= 100*unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant x <= 4;\nloop invariant z >= 100*x;\nloop invariant w >= 1;\nloop invariant y <= 10*w;\nloop invariant z >= 10*w;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant w >= 4*x;\nloop invariant z >= 400*x;\nloop invariant z <= 100*(x+1);\nloop invariant x >= 0 ==> w >= 1;\nloop invariant y >= 0 ==> z >= 100*x;\nloop invariant y <= 10*w ==> z >= 10*w;\nloop invariant w >= 4*x ==> z >= 400*x;\nloop invariant z <= 100*(x+1) ==> x >= 0;\nloop invariant y <= 2 ==> x >= 0;\nloop invariant x >= 4 ==> y >= 0;\nloop invariant x >= 4 ==> z >= 100*x;\nloop invariant x >= 4 ==> w >= 1;\nloop invariant x >= 4 ==> y <= 10*w;\nloop invariant x >= 4 ==> z >= 10*w;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> z <= 100*(x+1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\nloop invariant i6: z >= 10*w;\n\nloop invariant i8: x >= 0;\n\n\n\n\n\nloop invariant i14: y <= 10*w ==> z >= 10*w;\n\nloop invariant i16: z <= 100*(x+1) ==> x >= 0;\nloop invariant i17: y <= 2 ==> x >= 0;\n\n\n\n\nloop invariant i22: x >= 4 ==> z >= 10*w;\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= w <= 1;\nloop invariant 0 <= z <= 100;\nloop invariant x >= 4 ==> y <= 10*w && z >= 100*x;\nloop invariant x < 4 ==> y <= 2;\nloop invariant x >= 4 ==> y <= 2;\nloop invariant x >= 4 ==> w <= 1;\nloop invariant x >= 4 ==> z <= 100*x;\nloop invariant x < 4 ==> w <= 1;\nloop invariant x < 4 ==> z <= 100*x;\nloop invariant x >= 4 ==> x >= 4;\nloop invariant x < 4 ==> x < 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant y <= 10*w;\nloop invariant z >= 0;\nloop invariant z <= 100*x;\nloop invariant w >= 0;\nloop invariant w <= 1;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: x >= 4 ==> x >= 4;\nloop invariant i13: x < 4 ==> x < 4;\n\n\n\nloop invariant i17: z >= 0;\n\nloop invariant i19: w >= 0;\n\nloop invariant i21: x >= 0;\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 28: unexpected token ','",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\nloop invariant i1: 1 <= x <= 4;\nloop invariant i2: y >= 0;\nloop invariant i3: w >= 0;\nloop invariant i4: z >= 0;\nloop invariant i5: y <= 10*w;\nloop invariant i6: z >= 100*x;\nloop invariant i7: x >= 4 ==> y <= 2;\nloop invariant i8: x < 4 ==> y <= 100;\nloop invariant i9: x < 4 ==> y >= 0;\nloop invariant i10: y <= 100;\nloop invariant i11: 0 <= x <= 4;\nloop invariant i12: 0 <= y <= 2;\nloop invariant i13: 0 <= z <= 10*x;\nloop invariant i14: 0 <= w <= x;\nloop invariant i15: 0 <= x <= 4, 0 <= y <= 200, 0 <= w <= 100000, 0 <= z <= 1000000;\nloop invariant i16: x >= w;\nloop invariant i17: y >= w;\nloop invariant i18: z >= w;\nloop invariant i19: x >= y;\nloop invariant i20: x >= z;\nloop invariant i21: y >= z;\nloop invariant i22: 0 <= w <= 4;\nloop invariant i23: 0 <= z <= 40;\nloop invariant i24: x <= y;\nloop invariant i25: x <= 2;\nloop invariant i26: y >= -2;\nloop invariant i27: w <= 4;\nloop invariant i28: z <= 40;\nloop invariant i29: x <= z/100;\nloop invariant i30: 1 <= x <= 4; loop invariant 0 <= y <= 2; loop invariant 1 <= w <= 10; loop invariant 10 <= z <= 100;\nloop invariant i31: 0 <= y <= 100000;\nloop invariant i32: x >= (1 + (y - 1) * y / 2);\nloop invariant i33: 0 <= y <= (w * 10);\nloop invariant i34: 0 <= z <= (x * 100);\nloop invariant i35: w == z / 10;\nloop invariant i36: 0 <= x <= w * 10 + z;\nloop invariant i37: 0 <= y <= 10 * (w - 1) + z;\nloop invariant i38: 0 <= w <= z;\nloop invariant i39: 0 <= z <= 10 * (w - 1) + 100 * x;\nloop invariant i40: x >= 0;\nloop invariant i41: y <= w * 10 + z;\nloop invariant i42: y <= 10 * (w - 1) + z;\nloop invariant i43: w <= z;\nloop invariant i44: z <= 10 * (w - 1) + 100 * x;\nloop invariant i45: y <= 100000;\nloop invariant i46: w <= 100000;\nloop invariant i47: z <= 100000;\nloop invariant i48: x <= 4;\nloop invariant i49: 0 <= w <= 10;\nloop invariant i50: 0 <= z <= 100;\nloop invariant i51: x <= z/10;\nloop invariant i52: y <= 100*w;\nloop invariant i53: 0 <= w <= unknown_int();\nloop invariant i54: 0 <= z <= 10 * unknown_int();\nloop invariant i55: x == x;\nloop invariant i56: y == y;\nloop invariant i57: w == w;\nloop invariant i58: z == z;\nloop invariant i59: unknown_int() ==> (0 <= x <= 4);\nloop invariant i60: unknown_int() ==> (0 <= y <= 2);\nloop invariant i61: unknown_int() ==> (0 <= w <= unknown_int());\nloop invariant i62: unknown_int() ==> (0 <= z <= 10 * unknown_int());\nloop invariant i63: unknown_int() ==> (x == x);\nloop invariant i64: unknown_int() ==> (y == y);\nloop invariant i65: unknown_int() ==> (w == w);\nloop invariant i66: unknown_int() ==> (z == z);\nloop invariant i67: unknown_int() ==> (0 <= x <= 4 ==> x == x);\nloop invariant i68: unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y));\nloop invariant i69: unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w));\nloop invariant i70: unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z));\nloop invariant i71: unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x));\nloop invariant i72: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)));\nloop invariant i73: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)));\nloop invariant i74: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z)));\nloop invariant i75: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x)));\nloop invariant i76: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y))));\nloop invariant i77: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w))));\nloop invariant i78: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z))));\nloop invariant i79: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x))));\nloop invariant i80: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)))));\nloop invariant i81: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)))));\nloop invariant i82: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z)))));\nloop invariant i83: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x)))));\nloop invariant i84: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y))))));\nloop invariant i85: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w))))));\nloop invariant i86: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= z <= 10 * unknown_int() ==> z == z))))));\nloop invariant i87: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= x <= 4 ==> x == x))))));\nloop invariant i88: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= y <= 2 ==> y == y)))))));\nloop invariant i89: unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (unknown_int() ==> (0 <= w <= unknown_int() ==> w == w)))))));\nloop invariant i90: 0 <= z <= 100*unknown_int();\nloop invariant i91: w >= 1;\nloop invariant i92: z >= 10*w;\nloop invariant i93: y <= 2;\nloop invariant i94: w >= 4*x;\nloop invariant i95: z >= 400*x;\nloop invariant i96: z <= 100*(x+1);\nloop invariant i97: x >= 0 ==> w >= 1;\nloop invariant i98: y >= 0 ==> z >= 100*x;\nloop invariant i99: y <= 10*w ==> z >= 10*w;\nloop invariant i100: w >= 4*x ==> z >= 400*x;\nloop invariant i101: z <= 100*(x+1) ==> x >= 0;\nloop invariant i102: y <= 2 ==> x >= 0;\nloop invariant i103: x >= 4 ==> y >= 0;\nloop invariant i104: x >= 4 ==> z >= 100*x;\nloop invariant i105: x >= 4 ==> w >= 1;\nloop invariant i106: x >= 4 ==> y <= 10*w;\nloop invariant i107: x >= 4 ==> z >= 10*w;\nloop invariant i108: x >= 4 ==> z <= 100*(x+1);\nloop invariant i109: 0 <= w <= 1;\nloop invariant i110: x >= 4 ==> y <= 10*w && z >= 100*x;\nloop invariant i111: x < 4 ==> y <= 2;\nloop invariant i112: x >= 4 ==> w <= 1;\nloop invariant i113: x >= 4 ==> z <= 100*x;\nloop invariant i114: x < 4 ==> w <= 1;\nloop invariant i115: x < 4 ==> z <= 100*x;\nloop invariant i116: x >= 4 ==> x >= 4;\nloop invariant i117: x < 4 ==> x < 4;\nloop invariant i118: z <= 100*x;\nloop invariant i119: w <= 1;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 64,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\n\n\nloop invariant i3: w >= 0;\nloop invariant i4: z >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: z >= w;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: w == z / 10;\nloop invariant i36: 0 <= x <= w * 10 + z;\n\nloop invariant i38: 0 <= w <= z;\n\nloop invariant i40: x >= 0;\n\n\nloop invariant i43: w <= z;\n\n\n\n\n\n\n\nloop invariant i51: x <= z/10;\nloop invariant i52: y <= 100*w;\n\n\nloop invariant i55: x == x;\nloop invariant i56: y == y;\nloop invariant i57: w == w;\nloop invariant i58: z == z;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i92: z >= 10*w;\n\n\n\n\n\n\nloop invariant i99: y <= 10*w ==> z >= 10*w;\n\nloop invariant i101: z <= 100*(x+1) ==> x >= 0;\nloop invariant i102: y <= 2 ==> x >= 0;\n\n\nloop invariant i105: x >= 4 ==> w >= 1;\n\nloop invariant i107: x >= 4 ==> z >= 10*w;\n\n\n\n\n\n\n\n\nloop invariant i116: x >= 4 ==> x >= 4;\nloop invariant i117: x < 4 ==> x < 4;\n\n\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c"
        ],
        "skipped": [],
        "total": 132,
        "success_count": 105,
        "failure_count": 27,
        "success_rate": 0.7954545454545454
    }
}