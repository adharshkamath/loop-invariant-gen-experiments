{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x5p;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant 0 <= input;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= input <= 100000;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1p == unknown_int();\nloop invariant x2p == unknown_int();\nloop invariant x3p == unknown_int();\nloop invariant x4p == unknown_int();\nloop invariant x5p == unknown_int();\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant 0 <= x2p <= x4p + 2;\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant input == unknown_int();\nloop invariant input == 0;\nloop invariant x1 == 0;\nloop invariant x2 == 0;\nloop invariant x3 == 0;\nloop invariant x4 == 0;\nloop invariant x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant (x2 <= -1 || x4 <= x2 + 2);\nloop invariant x5 == 0;\nloop invariant 0 <= x4p <= x4 + 1;\nloop invariant x3p == x2p;\nloop invariant (x2p <= -1 || x4 <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 || x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant 0 <= input;\nloop invariant input > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\n*/\n```",
            "```\n/*@\nloop invariant input >= 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant (x2 <= -1 || x4 <= x2 + 2);\nloop invariant x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x4 >= 0;\nloop invariant x5 >= 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && x4 >= 0 && x5 >= 0;\nloop invariant 0 <= x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant 0 <= x2 <= x3;\nloop invariant -1 <= x2 <= x4 + 2;\nloop invariant x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 = x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant input == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant ( 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5 && input == 0) ==> ( 0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1p and x1p <= x4p + 1 and x2p == x3p and (x2p <= -1 or x4p <= x2p + 2) and x5p == 0;\nloop invariant 0 <= x1 and x1 <= x4 + 1 and x2 == x3 and (x2 <= -1 or x4 <= x2 + 2) and x5 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= x1p;\nloop invariant 0 <= x2 <= x2p;\nloop invariant 0 <= x3 <= x3p;\nloop invariant 0 <= x4 <= x4p;\nloop invariant 0 <= x5 <= x5p;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant x1 = x1p;\nloop invariant x2 = x2p;\nloop invariant x3 = x3p;\nloop invariant x4 = x4p;\nloop invariant x5 = x5p;\nloop invariant input = unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant input = unknown_int();\nloop invariant 0 <= input;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x5p;\nloop invariant x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant 0 <= input;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\nloop invariant i7: x1 <= x4 + 1;\nloop invariant i8: x2 == x3;\nloop invariant i9: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i10: x5 == 0;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= input <= 100000;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1p == unknown_int();\nloop invariant x2p == unknown_int();\nloop invariant x3p == unknown_int();\nloop invariant x4p == unknown_int();\nloop invariant x5p == unknown_int();\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant 0 <= x2p <= x4p + 2;\nloop invariant x5p == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\nloop invariant input == unknown_int();\nloop invariant input == 0;\nloop invariant x1 == 0;\nloop invariant x2 == 0;\nloop invariant x3 == 0;\nloop invariant x4 == 0;\nloop invariant x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\nloop invariant i2: 0 <= x1 <= x4 + 1;\nloop invariant i3: x2 == x3;\n\nloop invariant i5: x5 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant (x2 <= -1 || x4 <= x2 + 2);\nloop invariant x5 == 0;\nloop invariant 0 <= x4p <= x4 + 1;\nloop invariant x3p == x2p;\nloop invariant (x2p <= -1 || x4 <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant (x2p <= -1 || x4p <= x2p + 2);\nloop invariant x5p == 0;\nloop invariant 0 <= input;\nloop invariant input > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\nloop invariant i3: (x2 <= -1 || x4 <= x2 + 2);\nloop invariant i4: x5 == 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1p == x1;\nloop invariant x2p == x2;\nloop invariant x3p == x3;\nloop invariant x4p == x4;\nloop invariant x5p == x5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x5 == 0;\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant input >= 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant (x2 <= -1 || x4 <= x2 + 2);\nloop invariant x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\nloop invariant i2: 0 <= x1 <= x4 + 1;\nloop invariant i3: x2 == x3;\nloop invariant i4: (x2 <= -1 || x4 <= x2 + 2);\nloop invariant i5: x5 == 0;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x4 >= 0;\nloop invariant x5 >= 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0 && x4 >= 0 && x5 >= 0;\nloop invariant 0 <= x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: x1 >= 0;\n\n\n\nloop invariant i5: x5 >= 0;\n\n\n\n\nloop invariant i10: 0 <= x1 <= x4 + 1;\nloop invariant i11: x2 == x3;\nloop invariant i12: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i13: x5 == 0;\n\n\nloop invariant i16: 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant 0 <= x2 <= x3;\nloop invariant -1 <= x2 <= x4 + 2;\nloop invariant x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\n\n\nloop invariant i4: x5 == 0;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 = x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant input == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\n\nloop invariant i3: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i4: x5 == 0;\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x5 == 0;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5 && input == 0) ==> ( 0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: ( 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5 && input == 0) ==> ( 0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 || x4 <= x2 + 2;\nloop invariant x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\nloop invariant i5: 0 <= x1 <= x4 + 1;\nloop invariant i6: x2 == x3;\nloop invariant i7: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i8: x5 == 0;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1p and x1p <= x4p + 1 and x2p == x3p and (x2p <= -1 or x4p <= x2p + 2) and x5p == 0;\nloop invariant 0 <= x1 and x1 <= x4 + 1 and x2 == x3 and (x2 <= -1 or x4 <= x2 + 2) and x5 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= input <= 1;\nloop invariant 0 <= x1 <= x1p;\nloop invariant 0 <= x2 <= x2p;\nloop invariant 0 <= x3 <= x3p;\nloop invariant 0 <= x4 <= x4p;\nloop invariant 0 <= x5 <= x5p;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 || x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant x1 = x1p;\nloop invariant x2 = x2p;\nloop invariant x3 = x3p;\nloop invariant x4 = x4p;\nloop invariant x5 = x5p;\nloop invariant input = unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= x4 + 1;\nloop invariant x2 == x3;\nloop invariant x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant x5 == 0;\nloop invariant 0 <= x1p <= x4p + 1;\nloop invariant x2p == x3p;\nloop invariant x2p <= -1 ==> x4p <= x2p + 2;\nloop invariant x5p == 0;\nloop invariant input = unknown_int();\nloop invariant 0 <= input;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x1 <= x4 + 1;\nloop invariant i2: x2 == x3;\n\nloop invariant i4: x5 == 0;\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\nloop invariant i1: 0 <= x5p;\nloop invariant i2: x1p <= x4p + 1;\nloop invariant i3: x2p == x3p;\nloop invariant i4: x2p <= -1 || x4p <= x2p + 2;\nloop invariant i5: x5p == 0;\nloop invariant i6: 0 <= input;\nloop invariant i7: x1 <= x4 + 1;\nloop invariant i8: x2 == x3;\nloop invariant i9: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i10: x5 == 0;\nloop invariant i11: 1 <= input <= 100000;\nloop invariant i12: 0 <= x1 <= x4 + 1;\nloop invariant i13: x4 <= x2 + 2;\nloop invariant i14: x1p == unknown_int();\nloop invariant i15: x2p == unknown_int();\nloop invariant i16: x3p == unknown_int();\nloop invariant i17: x4p == unknown_int();\nloop invariant i18: x5p == unknown_int();\nloop invariant i19: 0 <= x1p <= x4p + 1;\nloop invariant i20: 0 <= x2p <= x4p + 2;\nloop invariant i21: x1p == x1;\nloop invariant i22: x2p == x2;\nloop invariant i23: x3p == x3;\nloop invariant i24: x4p == x4;\nloop invariant i25: x5p == x5;\nloop invariant i26: input == unknown_int();\nloop invariant i27: input == 0;\nloop invariant i28: x1 == 0;\nloop invariant i29: x2 == 0;\nloop invariant i30: x3 == 0;\nloop invariant i31: x4 == 0;\nloop invariant i32: (x2 <= -1 || x4 <= x2 + 2);\nloop invariant i33: 0 <= x4p <= x4 + 1;\nloop invariant i34: x3p == x2p;\nloop invariant i35: (x2p <= -1 || x4 <= x2p + 2);\nloop invariant i36: (x2p <= -1 || x4p <= x2p + 2);\nloop invariant i37: input > 0;\nloop invariant i38: x2 <= -1 ==> x4 <= x2 + 2;\nloop invariant i39: input >= 0;\nloop invariant i40: x1 >= 0;\nloop invariant i41: x2 >= 0;\nloop invariant i42: x3 >= 0;\nloop invariant i43: x4 >= 0;\nloop invariant i44: x5 >= 0;\nloop invariant i45: x1 >= 0 && x2 >= 0 && x3 >= 0 && x4 >= 0 && x5 >= 0;\nloop invariant i46: 0 <= x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0;\nloop invariant i47: 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\nloop invariant i48: 0 <= y <= 100000;\nloop invariant i49: x >= (1 + (y - 1) * y / 2);\nloop invariant i50: 0 <= x2 <= x3;\nloop invariant i51: -1 <= x2 <= x4 + 2;\nloop invariant i52: x2 = x3;\nloop invariant i53: ( 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5 && input == 0) ==> ( 0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\nloop invariant i54: 0 <= x1p and x1p <= x4p + 1 and x2p == x3p and (x2p <= -1 or x4p <= x2p + 2) and x5p == 0;\nloop invariant i55: 0 <= x1 and x1 <= x4 + 1 and x2 == x3 and (x2 <= -1 or x4 <= x2 + 2) and x5 == 0;\nloop invariant i56: 0 <= input <= 1;\nloop invariant i57: 0 <= x1 <= x1p;\nloop invariant i58: 0 <= x2 <= x2p;\nloop invariant i59: 0 <= x3 <= x3p;\nloop invariant i60: 0 <= x4 <= x4p;\nloop invariant i61: 0 <= x5 <= x5p;\nloop invariant i62: x1 = x1p;\nloop invariant i63: x2 = x2p;\nloop invariant i64: x3 = x3p;\nloop invariant i65: x4 = x4p;\nloop invariant i66: x5 = x5p;\nloop invariant i67: input = unknown_int();\nloop invariant i68: x2p <= -1 ==> x4p <= x2p + 2;\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 24,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  /*@\n\n\n\n\n\n\nloop invariant i7: x1 <= x4 + 1;\nloop invariant i8: x2 == x3;\nloop invariant i9: x2 <= -1 || x4 <= x2 + 2;\nloop invariant i10: x5 == 0;\n\nloop invariant i12: 0 <= x1 <= x4 + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i32: (x2 <= -1 || x4 <= x2 + 2);\n\n\n\n\n\n\n\nloop invariant i40: x1 >= 0;\n\n\n\nloop invariant i44: x5 >= 0;\n\n\nloop invariant i47: 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0;\n\n\n\n\n\nloop invariant i53: ( 0 <= x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0 && x1p == x1 && x2p == x2 && x3p == x3 && x4p == x4 && x5p == x5 && input == 0) ==> ( 0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 83,
        "success_count": 71,
        "failure_count": 12,
        "success_rate": 0.8554216867469879
    }
}