{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant m >= 0;\nloop invariant i < n ==> m > 0;\nloop invariant i == 2*i || i == 3*i;\nloop invariant i * m >= 0;\nloop invariant i == 1 || i == 2*i || i == 3*i;\nloop invariant i == 1 || i == 2*i || i == 3*i ==> m > 0;\nloop invariant i == 1 || i == 2*i || i == 3*i ==> m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2^n;\nloop invariant i == 1 or i == 2 or i == 3;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i;\nloop invariant n <= i;\nloop invariant i <= 2*i;\nloop invariant i <= 3*i;\nloop invariant i > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 < i;\nloop invariant i <= n;\nloop invariant ((m > 0) ==> (i == 2^k));\nloop invariant ((m <= 0) ==> (i == 3^k));\nloop invariant (k >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant m > 0 ==> i = 2^k;\nloop invariant m <= 0 ==> i = 3^k;\n*/\n```",
            "```\n/*@\nloop invariant ( m >= 0 );\nloop invariant ( i >= 1 );\nloop invariant ( i <= 3^(floor(log(1, i))) );\nloop invariant ( m == 0 ==> i == 1 );\nloop invariant ( m > 0 ==> i == 2^floor(log(2, i)) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n * 3;\nloop invariant m <= 0 ==> i <= 2 * n;\nloop invariant m > 0 ==> i <= 3 * n;\nloop invariant m <= 0 ==> i >= n;\nloop invariant m > 0 ==> i >= 3 * n;\nloop invariant m <= 0 ==> i % 2 == 0;\nloop invariant m > 0 ==> i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= (4 * n / 3);\nloop invariant i == 2 * i ==> m <= 0;\nloop invariant i == 3 * i ==> m > 0;\nloop invariant (i == 2 * i) || (i == 3 * i);\nloop invariant (i <= 2 * i) || (i <= 3 * i);\nloop invariant (i >= 2 * i) || (i >= 3 * i);\nloop invariant (i <= 2 * i) || (i <= 3 * i) ==> (i == 2 * i) || (i == 3 * i);\nloop invariant (i <= 2 * i) || (i <= 3 * i) ==> (i == 2 * i) || (i == 3 * i) ==> (i <= 2 * i) || (i <= 3 * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant ( (m > 0) ==> (i == (2^k)) ) || ( (m <= 0) ==> (i == (3^k)) ) where k = log(i);\nloop invariant ( (m > 0) ==> (i >= 2^(k-1)) ) && ( (m <= 0) ==> (i >= 3^(k-1)) );\nloop invariant ( (m > 0) ==> (i <= 2^k) ) && ( (m <= 0) ==> (i <= 3^k) );\nloop invariant ( (m > 0) ==> (k <= log(n)) ) && ( (m <= 0) ==> (k <= log(n)) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= max(n, m); loop invariant i <= 2 * i ==> m > 0; loop invariant i <= 3 * i ==> m <= 0; loop invariant i > 0; loop invariant i <= n; loop invariant i <= 1; loop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant i < n;\nloop invariant i > 0;\nloop invariant m > 0 ==> i % 2 == 0;\nloop invariant m <= 0 ==> i % 3 == 0;\nloop invariant i == 1 || i == 2 || i == 3;\nloop invariant i == 1 || i == 2 || i == 4 || i == 6 || i == 8 || i == 9 || i == 12 || i == 16 || i == 18 || i == 24 || i == 27 || i == 32 || i == 36 || i == 48 || i == 54 || i == 64 || i == 72 || i == 81 || i == 96 || i == 108 || i == 128 || i == 144 || i == 162 || i == 192 || i == 216 || i == 243 || i == 256 || i == 288 || i == 324 || i == 384 || i == 432 || i == 486 || i == 512 || i == 576 || i == 648 || i == 768 || i == 864 || i == 972 || i == 1024 || i == 1152 || i == 1296 || i == 1536 || i == 1728 || i == 1944 || i == 2048 || i == 2304 || i == 2592 || i == 2727 || i == 3072 || i == 3456 || i == 3888 || i == 3936 || i == 5124 || i == 6556 || i == 8192 || i == 10288 || i == 12288 || i == 16384 || i == 24576 || i == 32768 || i == 49152 || i == 65536 || i == 98304 || i == 131072 || i == 196608 || i == 262144 || i == 393216 || i == 524288 || i == 786432 || i == 1048576 || i == 1179648 || i == 1572864 || i == 2097152 || i == 2359296 || i == 3145728 || i == 4194304 || i == 4613732 || i == 6291456 || i == 8388608 || i == 9227468 || i == 12582912 || i == 16777216 || i == 25165824 || i == 33554432 || i == 50331648 || i == 67108864 || i == 100663296 || i == 134217728 || i == 201326592 || i == 268435456 || i == 503316480 || i == 1006632960 || i == 2013265920 || i == 4026531840;\n*/\n```",
            "```\n/*@\nloop invariant y < n;\nloop invariant m >= 0;\nloop invariant i > 0;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 2^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant m >= 0;\nloop invariant i < n ==> m > 0;\nloop invariant i == 2*i || i == 3*i;\nloop invariant i * m >= 0;\nloop invariant i == 1 || i == 2*i || i == 3*i;\nloop invariant i == 1 || i == 2*i || i == 3*i ==> m > 0;\nloop invariant i == 1 || i == 2*i || i == 3*i ==> m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2^n;\nloop invariant i == 1 or i == 2 or i == 3;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\nloop invariant i == 1 or i == 2*i or i == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant m == 1 ==> (i == 2^k, k >= 0);\nloop invariant m == -1 ==> (i == 3^k, k >= 0);\nloop invariant m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n\nloop invariant i5: i >= 1;\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i;\nloop invariant n <= i;\nloop invariant i <= 2*i;\nloop invariant i <= 3*i;\nloop invariant i > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: 1 <= i;\n\nloop invariant i3: i <= 2*i;\nloop invariant i4: i <= 3*i;\nloop invariant i5: i > 0;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 < i;\nloop invariant i <= n;\nloop invariant ((m > 0) ==> (i == 2^k));\nloop invariant ((m <= 0) ==> (i == 3^k));\nloop invariant (k >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 < i;\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\nloop invariant i <= n;\nloop invariant i >= n;\nloop invariant i >= 0;\nloop invariant i < n;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant i <= 2 * i;\nloop invariant i <= 3 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i >= 0;\n\n\nloop invariant i5: i >= 1;\nloop invariant i6: i <= 2 * i;\nloop invariant i7: i <= 3 * i;\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant m > 0 ==> i = 2^k;\nloop invariant m <= 0 ==> i = 3^k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( m >= 0 );\nloop invariant ( i >= 1 );\nloop invariant ( i <= 3^(floor(log(1, i))) );\nloop invariant ( m == 0 ==> i == 1 );\nloop invariant ( m > 0 ==> i == 2^floor(log(2, i)) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: ( i >= 1 );\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n * 3;\nloop invariant m <= 0 ==> i <= 2 * n;\nloop invariant m > 0 ==> i <= 3 * n;\nloop invariant m <= 0 ==> i >= n;\nloop invariant m > 0 ==> i >= 3 * n;\nloop invariant m <= 0 ==> i % 2 == 0;\nloop invariant m > 0 ==> i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\nloop invariant m > 0 ==> i <= 2 * n;\nloop invariant i >= n;\nloop invariant m <= 0 ==> i > 0;\nloop invariant m > 0 ==> i > 0;\nloop invariant i % 2 == 0;\nloop invariant i % 3 == 0;\nloop invariant i >= 1;\nloop invariant m <= 0 ==> i <= 3 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: i >= 1;\nloop invariant i9: m <= 0 ==> i > 0;\nloop invariant i10: m > 0 ==> i > 0;\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= (4 * n / 3);\nloop invariant i == 2 * i ==> m <= 0;\nloop invariant i == 3 * i ==> m > 0;\nloop invariant (i == 2 * i) || (i == 3 * i);\nloop invariant (i <= 2 * i) || (i <= 3 * i);\nloop invariant (i >= 2 * i) || (i >= 3 * i);\nloop invariant (i <= 2 * i) || (i <= 3 * i) ==> (i == 2 * i) || (i == 3 * i);\nloop invariant (i <= 2 * i) || (i <= 3 * i) ==> (i == 2 * i) || (i == 3 * i) ==> (i <= 2 * i) || (i <= 3 * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i == 2 * i ==> m <= 0;\nloop invariant i3: i == 3 * i ==> m > 0;\n\nloop invariant i5: (i <= 2 * i) || (i <= 3 * i);\n\n\nloop invariant i8: (i <= 2 * i) || (i <= 3 * i) ==> (i == 2 * i) || (i == 3 * i) ==> (i <= 2 * i) || (i <= 3 * i);\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant ( (m > 0) ==> (i == (2^k)) ) || ( (m <= 0) ==> (i == (3^k)) ) where k = log(i);\nloop invariant ( (m > 0) ==> (i >= 2^(k-1)) ) && ( (m <= 0) ==> (i >= 3^(k-1)) );\nloop invariant ( (m > 0) ==> (i <= 2^k) ) && ( (m <= 0) ==> (i <= 3^k) );\nloop invariant ( (m > 0) ==> (k <= log(n)) ) && ( (m <= 0) ==> (k <= log(n)) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= max(n, m); loop invariant i <= 2 * i ==> m > 0; loop invariant i <= 3 * i ==> m <= 0; loop invariant i > 0; loop invariant i <= n; loop invariant i <= 1; loop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i < n;\nloop invariant i > 0;\nloop invariant m > 0 ==> i % 2 == 0;\nloop invariant m <= 0 ==> i % 3 == 0;\nloop invariant i == 1 || i == 2 || i == 3;\nloop invariant i == 1 || i == 2 || i == 4 || i == 6 || i == 8 || i == 9 || i == 12 || i == 16 || i == 18 || i == 24 || i == 27 || i == 32 || i == 36 || i == 48 || i == 54 || i == 64 || i == 72 || i == 81 || i == 96 || i == 108 || i == 128 || i == 144 || i == 162 || i == 192 || i == 216 || i == 243 || i == 256 || i == 288 || i == 324 || i == 384 || i == 432 || i == 486 || i == 512 || i == 576 || i == 648 || i == 768 || i == 864 || i == 972 || i == 1024 || i == 1152 || i == 1296 || i == 1536 || i == 1728 || i == 1944 || i == 2048 || i == 2304 || i == 2592 || i == 2727 || i == 3072 || i == 3456 || i == 3888 || i == 3936 || i == 5124 || i == 6556 || i == 8192 || i == 10288 || i == 12288 || i == 16384 || i == 24576 || i == 32768 || i == 49152 || i == 65536 || i == 98304 || i == 131072 || i == 196608 || i == 262144 || i == 393216 || i == 524288 || i == 786432 || i == 1048576 || i == 1179648 || i == 1572864 || i == 2097152 || i == 2359296 || i == 3145728 || i == 4194304 || i == 4613732 || i == 6291456 || i == 8388608 || i == 9227468 || i == 12582912 || i == 16777216 || i == 25165824 || i == 33554432 || i == 50331648 || i == 67108864 || i == 100663296 || i == 134217728 || i == 201326592 || i == 268435456 || i == 503316480 || i == 1006632960 || i == 2013265920 || i == 4026531840;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\nloop invariant i2: i > 0;\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y < n;\nloop invariant m >= 0;\nloop invariant i > 0;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 2^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\nloop invariant i <= 3^n;\nloop invariant i >= 2;\nloop invariant i <= 3^n;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\nloop invariant i3: i > 0;\n\nloop invariant i5: i >= 1;\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: m >= 0;\nloop invariant i3: i < n ==> m > 0;\nloop invariant i4: i == 2*i || i == 3*i;\nloop invariant i5: i * m >= 0;\nloop invariant i6: i == 1 || i == 2*i || i == 3*i;\nloop invariant i7: i == 1 || i == 2*i || i == 3*i ==> m > 0;\nloop invariant i8: i == 1 || i == 2*i || i == 3*i ==> m >= 0;\nloop invariant i9: i >= 1;\nloop invariant i10: i <= n;\nloop invariant i11: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k);\nloop invariant i12: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i13: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i14: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i15: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i16: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i17: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i18: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i19: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i20: (m > 0 ==> i = 2^k) ==> (m <= 0 ==> i = 3^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k) ==> (m > 0 ==> i = 2^k);\nloop invariant i21: 0 <= i <= 2^n;\nloop invariant i22: i == 1 or i == 2 or i == 3;\nloop invariant i23: i == 1 or i == 2*i or i == 3*i;\nloop invariant i24: 1 <= i <= n;\nloop invariant i25: m == 1 ==> (i == 2^k, k >= 0);\nloop invariant i26: m == -1 ==> (i == 3^k, k >= 0);\nloop invariant i27: m == 0 ==> (i == 2^k * 3^l, k >= 0, l >= 0);\nloop invariant i28: 1 <= i;\nloop invariant i29: n <= i;\nloop invariant i30: i <= 2*i;\nloop invariant i31: i <= 3*i;\nloop invariant i32: i > 0;\nloop invariant i33: 0 < i;\nloop invariant i34: ((m > 0) ==> (i == 2^k));\nloop invariant i35: ((m <= 0) ==> (i == 3^k));\nloop invariant i36: (k >= 0);\nloop invariant i37: i >= 0;\nloop invariant i38: i < n;\nloop invariant i39: i <= 2 * i;\nloop invariant i40: i <= 3 * i;\nloop invariant i41: i >= n;\nloop invariant i42: m > 0 ==> i = 2^k;\nloop invariant i43: m <= 0 ==> i = 3^k;\nloop invariant i44: ( m >= 0 );\nloop invariant i45: ( i >= 1 );\nloop invariant i46: ( i <= 3^(floor(log(1, i))) );\nloop invariant i47: ( m == 0 ==> i == 1 );\nloop invariant i48: ( m > 0 ==> i == 2^floor(log(2, i)) );\nloop invariant i49: 0 <= i <= n * 3;\nloop invariant i50: m <= 0 ==> i <= 2 * n;\nloop invariant i51: m > 0 ==> i <= 3 * n;\nloop invariant i52: m <= 0 ==> i >= n;\nloop invariant i53: m > 0 ==> i >= 3 * n;\nloop invariant i54: m <= 0 ==> i % 2 == 0;\nloop invariant i55: m > 0 ==> i % 3 == 0;\nloop invariant i56: m <= 0 ==> i > 0;\nloop invariant i57: m > 0 ==> i > 0;\nloop invariant i58: m <= 0 ==> i <= 3 * n;\nloop invariant i59: m > 0 ==> i <= 2 * n;\nloop invariant i60: i % 2 == 0;\nloop invariant i61: i % 3 == 0;\nloop invariant i62: 1 <= i <= (4 * n / 3);\nloop invariant i63: i == 2 * i ==> m <= 0;\nloop invariant i64: i == 3 * i ==> m > 0;\nloop invariant i65: (i == 2 * i) || (i == 3 * i);\nloop invariant i66: (i <= 2 * i) || (i <= 3 * i);\nloop invariant i67: (i >= 2 * i) || (i >= 3 * i);\nloop invariant i68: (i <= 2 * i) || (i <= 3 * i) ==> (i == 2 * i) || (i == 3 * i);\nloop invariant i69: (i <= 2 * i) || (i <= 3 * i) ==> (i == 2 * i) || (i == 3 * i) ==> (i <= 2 * i) || (i <= 3 * i);\nloop invariant i70: ( (m > 0) ==> (i == (2^k)) ) || ( (m <= 0) ==> (i == (3^k)) ) where k = log(i);\nloop invariant i71: ( (m > 0) ==> (i >= 2^(k-1)) ) && ( (m <= 0) ==> (i >= 3^(k-1)) );\nloop invariant i72: ( (m > 0) ==> (i <= 2^k) ) && ( (m <= 0) ==> (i <= 3^k) );\nloop invariant i73: ( (m > 0) ==> (k <= log(n)) ) && ( (m <= 0) ==> (k <= log(n)) );\nloop invariant i74: 0 <= i <= max(n, m); loop invariant i <= 2 * i ==> m > 0; loop invariant i <= 3 * i ==> m <= 0; loop invariant i > 0; loop invariant i <= n; loop invariant i <= 1; loop invariant i >= 1;\nloop invariant i75: m > 0 ==> i % 2 == 0;\nloop invariant i76: m <= 0 ==> i % 3 == 0;\nloop invariant i77: i == 1 || i == 2 || i == 3;\nloop invariant i78: i == 1 || i == 2 || i == 4 || i == 6 || i == 8 || i == 9 || i == 12 || i == 16 || i == 18 || i == 24 || i == 27 || i == 32 || i == 36 || i == 48 || i == 54 || i == 64 || i == 72 || i == 81 || i == 96 || i == 108 || i == 128 || i == 144 || i == 162 || i == 192 || i == 216 || i == 243 || i == 256 || i == 288 || i == 324 || i == 384 || i == 432 || i == 486 || i == 512 || i == 576 || i == 648 || i == 768 || i == 864 || i == 972 || i == 1024 || i == 1152 || i == 1296 || i == 1536 || i == 1728 || i == 1944 || i == 2048 || i == 2304 || i == 2592 || i == 2727 || i == 3072 || i == 3456 || i == 3888 || i == 3936 || i == 5124 || i == 6556 || i == 8192 || i == 10288 || i == 12288 || i == 16384 || i == 24576 || i == 32768 || i == 49152 || i == 65536 || i == 98304 || i == 131072 || i == 196608 || i == 262144 || i == 393216 || i == 524288 || i == 786432 || i == 1048576 || i == 1179648 || i == 1572864 || i == 2097152 || i == 2359296 || i == 3145728 || i == 4194304 || i == 4613732 || i == 6291456 || i == 8388608 || i == 9227468 || i == 12582912 || i == 16777216 || i == 25165824 || i == 33554432 || i == 50331648 || i == 67108864 || i == 100663296 || i == 134217728 || i == 201326592 || i == 268435456 || i == 503316480 || i == 1006632960 || i == 2013265920 || i == 4026531840;\nloop invariant i79: y < n;\nloop invariant i80: i <= 3^n;\nloop invariant i81: i <= 2^n;\nloop invariant i82: i >= 2;\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "combined_annotation_num_solver_calls": 44,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i28: 1 <= i;\n\nloop invariant i30: i <= 2*i;\nloop invariant i31: i <= 3*i;\nloop invariant i32: i > 0;\nloop invariant i33: 0 < i;\n\n\n\nloop invariant i37: i >= 0;\n\nloop invariant i39: i <= 2 * i;\nloop invariant i40: i <= 3 * i;\n\n\n\n\nloop invariant i45: ( i >= 1 );\n\n\n\n\n\n\n\n\n\n\nloop invariant i56: m <= 0 ==> i > 0;\nloop invariant i57: m > 0 ==> i > 0;\n\n\n\n\n\nloop invariant i63: i == 2 * i ==> m <= 0;\nloop invariant i64: i == 3 * i ==> m > 0;\n\nloop invariant i66: (i <= 2 * i) || (i <= 3 * i);\n\n\nloop invariant i69: (i <= 2 * i) || (i <= 3 * i) ==> (i == 2 * i) || (i == 3 * i) ==> (i <= 2 * i) || (i <= 3 * i);\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 171,
        "success_count": 141,
        "failure_count": 30,
        "success_rate": 0.8245614035087719
    }
}