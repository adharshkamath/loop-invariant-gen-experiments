{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= exclusive;\nloop invariant exclusive >= nonexclusive + unowned;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid <= 1000;\nloop invariant 0 <= unowned <= 1000;\nloop invariant 0 <= nonexclusive <= 1000;\nloop invariant exclusive = 0;\nloop invariant invalid + unowned + nonexclusive >= 1;\nloop invariant (exclusive == 0) ==> (unowned + invalid + nonexclusive >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant (invalid >= 1) ==> (exclusive == 0);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0);\nloop invariant (invalid >= 1) ==> (unowned == 0);\nloop invariant (invalid >= 1) ==> (exclusive >= 0);\nloop invariant (invalid >= 1) ==> (unowned >= 0);\nloop invariant (invalid >= 1) ==> (nonexclusive >= 0);\nloop invariant (invalid >= 1) ==> (exclusive <= 100000);\nloop invariant (invalid >= 1) ==> (unowned <= 100000);\nloop invariant (invalid >= 1) ==> (nonexclusive <= 100000);\nloop invariant (invalid >= 1) ==> (exclusive + unowned + nonexclusive >= 1);\nloop invariant (invalid >= 1) ==> (nonexclusive + unowned <= 100000);\nloop invariant (invalid >= 1) ==> (invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant (invalid >= 1) ==> (exclusive >= invalid - unowned - nonexclusive);\nloop invariant (invalid >= 1) ==> (unowned >= invalid - exclusive - nonexclusive);\nloop invariant (invalid >= 1) ==> (nonexclusive >= invalid - unowned - exclusive);\nloop invariant (invalid >= 1) ==> (exclusive == 0 ==> nonexclusive + unowned >= 1);\nloop invariant (invalid >= 1) ==> (exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\nloop invariant (invalid >= 1) ==> (exclusive == 0 ==> nonexclusive + unowned <= 100000);\nloop invariant (invalid >= 1) ==> (exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0 ==> unowned >= 1);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0 ==> unowned <= 100000);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant (invalid >= 1) ==> (unowned == 0 ==> exclusive >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid;\nloop invariant 1 <= unowned;\nloop invariant 1 <= nonexclusive;\nloop invariant exclusive == 0;\nloop invariant exclusive == 1 ==> unowned == 0;\nloop invariant exclusive == 1 ==> nonexclusive == 0;\nloop invariant exclusive == 0 ==> unowned >= 1;\nloop invariant exclusive == 0 ==> nonexclusive >= 1;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 2;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= 3;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1 + 1 + 0 + 0;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + 0 + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= 1 + 0 + 1 + 0;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + 0 + 1 + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive == invalid + unowned + nonexclusive + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive == invalid + unowned + exclusive + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + nonexclusive + 2;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + exclusive + 2;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + exclusive;\nloop invariant exclusive == 0 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant exclusive == 0 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive <= invalid + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive <= invalid + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive >= invalid;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive >= invalid;\nloop invariant exclusive == 0 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 0 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant exclusive == 0 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive <= invalid + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive <= invalid + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive >= invalid;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive >= invalid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= exclusive <= 1;\nloop invariant 0 <= unowned;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant unowned >= nonexclusive;\nloop invariant invalid >= nonexclusive + unowned;\nloop invariant 0 <= exclusive + nonexclusive + unowned;\nloop invariant invalid >= exclusive + nonexclusive + unowned;\nloop invariant 0 <= exclusive + nonexclusive + unowned - invalid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant exclusive == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= unowned;\nloop invariant 0 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant exclusive + unowned + nonexclusive >= 1;\nloop invariant exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant unknown_int() ==> invalid >= 1;\nloop invariant unknown_int() ==> exclusive == 0;\nloop invariant unknown_int() ==> nonexclusive == 0;\nloop invariant unknown_int() ==> unowned == 0;\nloop invariant (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid >= 1;\nloop invariant (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant (exclusive==0 && nonexclusive==0 && unowned==0) ==> exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant nonexclusive > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant nonexclusive > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant nonexclusive > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant nonexclusive > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant unowned > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant unowned > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant unowned > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant unowned > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant exclusive > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant exclusive > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant exclusive > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant exclusive > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant exclusive > 0 ==> unknown_int() ==> nonexclusive + unowned >= 1;\nloop invariant exclusive > 0 ==> unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive > 0 ==> unknown_int() ==> exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant nonexclusive + unowned >= 1 ==> unknown_int() ==> invalid >= 1;\nloop invariant nonexclusive + unowned >= 1 ==> unknown_int() ==> exclusive == 0;\nloop invariant nonexclusive + unowned >= 1 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant nonexclusive + unowned >= 1 ==> unknown_int() ==> unowned == 0;\nloop invariant invalid >= 1 ==> unknown_int() ==> exclusive == 0;\nloop invariant invalid >= 1 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant invalid >= 1 ==> unknown_int() ==> unowned == 0;\nloop invariant exclusive == 0 ==> nonexclusive == 0;\nloop invariant exclusive == 0 ==> unowned == 0;\nloop invariant nonexclusive == 0 ==> unowned == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= nonexclusive <= invalid;\nloop invariant 0 <= unowned <= 1;\nloop invariant 1 <= exclusive <= invalid + unowned + nonexclusive;\nloop invariant nonexclusive + unowned + exclusive + invalid >= 1;\nloop invariant exclusive + unowned + nonexclusive >= 1;\nloop invariant nonexclusive + unowned + exclusive >= 1;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant unowned >= 0;\nloop invariant exclusive >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive ==> invalid + unowned + exclusive + nonexclusive == 1;\nloop invariant nonexclusive ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant unowned ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant invalid ==> invalid >= 1;\n*/\n```",
            "```\n/*@\nloop invariant ( ( unknown_int() ==> nonexclusive + unowned >= 1 ) );\nloop invariant ( ( unknown_int() ==> exclusive >= 0 ) );\nloop invariant ( ( unknown_int() ==> unowned >= 0 ) );\nloop invariant ( ( unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> invalid >= 1 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> nonexclusive + unowned >= 1 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> exclusive >= 0 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> unowned >= 0 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> exclusive >= 0 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> unowned >= 0 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant ( ( unknown_int() ==> exclusive >= 0 ) );\nloop invariant ( ( unknown_int() ==> unowned >= 0 ) );\nloop invariant ( ( unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant ( ( exclusive >= 0 ) );\nloop invariant ( ( unowned >= 0 ) );\nloop invariant ( ( invalid + unowned + exclusive + nonexclusive >= 1 ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant exclusive == 1;\nloop invariant (invalid + unowned + exclusive + nonexclusive) >= 1;\nloop invariant (invalid >= 1);\nloop invariant (unowned >= 0);\nloop invariant (exclusive >= 0);\nloop invariant (nonexclusive + unowned >=1);\nloop invariant (invalid >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant exclusive + unowned + nonexclusive + invalid >= 1;\nloop invariant exclusive >= 0 ==> unowned == 0;\nloop invariant exclusive >= 0 ==> nonexclusive == 0;\nloop invariant exclusive >= 0 ==> invalid >= 1;\nloop invariant exclusive >= 0 ==> exclusive == 1;\nloop invariant nonexclusive >= 0 ==> unowned == 0;\nloop invariant nonexclusive >= 0 ==> exclusive == 0;\nloop invariant nonexclusive >= 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 0 ==> nonexclusive == 1;\nloop invariant unowned >= 0 ==> exclusive == 0;\nloop invariant unowned >= 0 ==> nonexclusive == 0;\nloop invariant unowned >= 0 ==> invalid >= 1;\nloop invariant unowned >= 0 ==> unowned == 1;\nloop invariant invalid >= 1 ==> exclusive == 0;\nloop invariant invalid >= 1 ==> nonexclusive == 0;\nloop invariant invalid >= 1 ==> unowned == 0;\nloop invariant invalid >= 1 ==> invalid == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= unowned;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= invalid - 1;\nloop invariant 0 <= unowned <= unowned + exclusive;\nloop invariant 0 <= nonexclusive <= unowned + nonexclusive;\nloop invariant 0 <= exclusive <= exclusive + 1;\nloop invariant invalid >= 1;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\n*/\n```",
            "```\n/*@\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 1 <= exclusive;\nloop invariant exclusive >= nonexclusive + unowned;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid;\nloop invariant i2: 0 <= unowned;\nloop invariant i3: 0 <= nonexclusive;\n\n\nloop invariant i6: nonexclusive >= 0;\nloop invariant i7: unowned >= 0;\n\nloop invariant i9: exclusive >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid <= 1000;\nloop invariant 0 <= unowned <= 1000;\nloop invariant 0 <= nonexclusive <= 1000;\nloop invariant exclusive = 0;\nloop invariant invalid + unowned + nonexclusive >= 1;\nloop invariant (exclusive == 0) ==> (unowned + invalid + nonexclusive >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant (invalid >= 1) ==> (exclusive == 0);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0);\nloop invariant (invalid >= 1) ==> (unowned == 0);\nloop invariant (invalid >= 1) ==> (exclusive >= 0);\nloop invariant (invalid >= 1) ==> (unowned >= 0);\nloop invariant (invalid >= 1) ==> (nonexclusive >= 0);\nloop invariant (invalid >= 1) ==> (exclusive <= 100000);\nloop invariant (invalid >= 1) ==> (unowned <= 100000);\nloop invariant (invalid >= 1) ==> (nonexclusive <= 100000);\nloop invariant (invalid >= 1) ==> (exclusive + unowned + nonexclusive >= 1);\nloop invariant (invalid >= 1) ==> (nonexclusive + unowned <= 100000);\nloop invariant (invalid >= 1) ==> (invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant (invalid >= 1) ==> (exclusive >= invalid - unowned - nonexclusive);\nloop invariant (invalid >= 1) ==> (unowned >= invalid - exclusive - nonexclusive);\nloop invariant (invalid >= 1) ==> (nonexclusive >= invalid - unowned - exclusive);\nloop invariant (invalid >= 1) ==> (exclusive == 0 ==> nonexclusive + unowned >= 1);\nloop invariant (invalid >= 1) ==> (exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\nloop invariant (invalid >= 1) ==> (exclusive == 0 ==> nonexclusive + unowned <= 100000);\nloop invariant (invalid >= 1) ==> (exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0 ==> unowned >= 1);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0 ==> unowned <= 100000);\nloop invariant (invalid >= 1) ==> (nonexclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant (invalid >= 1) ==> (unowned == 0 ==> exclusive >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: invalid + unowned + exclusive + nonexclusive >= 1;\n\n\n\n\n\nloop invariant i11: (invalid >= 1) ==> (unowned >= 0);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i23: (invalid >= 1) ==> (exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\n\n\n\nloop invariant i27: (invalid >= 1) ==> (nonexclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid;\nloop invariant 1 <= unowned;\nloop invariant 1 <= nonexclusive;\nloop invariant exclusive == 0;\nloop invariant exclusive == 1 ==> unowned == 0;\nloop invariant exclusive == 1 ==> nonexclusive == 0;\nloop invariant exclusive == 0 ==> unowned >= 1;\nloop invariant exclusive == 0 ==> nonexclusive >= 1;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 2;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= 3;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1 + 1 + 0 + 0;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + 0 + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= 1 + 0 + 1 + 0;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + 0 + 1 + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive == invalid + unowned + nonexclusive + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive == invalid + unowned + exclusive + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + nonexclusive + 2;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + exclusive + 2;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + exclusive;\nloop invariant exclusive == 0 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant exclusive == 0 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive <= invalid + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive <= invalid + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive >= invalid;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive >= invalid;\nloop invariant exclusive == 0 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 0 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant exclusive == 0 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 1 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive <= invalid + 1;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive <= invalid + 1;\nloop invariant exclusive == 0 ==> invalid + unowned + nonexclusive >= invalid;\nloop invariant exclusive == 1 ==> invalid + unowned + exclusive >= invalid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: exclusive == 1 ==> unowned == 0;\nloop invariant i6: exclusive == 1 ==> nonexclusive == 0;\n\n\n\nloop invariant i10: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\n\nloop invariant i12: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\n\n\n\nloop invariant i16: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + 0 + 1 + 1;\n\n\nloop invariant i19: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + nonexclusive + 2;\nloop invariant i20: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + exclusive + 2;\nloop invariant i21: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + nonexclusive;\nloop invariant i22: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + exclusive;\n\n\n\n\n\n\n\n\n\nloop invariant i32: exclusive == 1 ==> invalid + unowned + exclusive <= invalid + 1;\n\nloop invariant i34: exclusive == 1 ==> invalid + unowned + exclusive >= invalid;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= exclusive <= 1;\nloop invariant 0 <= unowned;\nloop invariant 1 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant unowned >= nonexclusive;\nloop invariant invalid >= nonexclusive + unowned;\nloop invariant 0 <= exclusive + nonexclusive + unowned;\nloop invariant invalid >= exclusive + nonexclusive + unowned;\nloop invariant 0 <= exclusive + nonexclusive + unowned - invalid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= unowned;\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant exclusive == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 31,
                "annotations": "```\n/*@\nloop invariant 0 <= unowned;\nloop invariant 0 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant exclusive + unowned + nonexclusive >= 1;\nloop invariant exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant unknown_int() ==> invalid >= 1;\nloop invariant unknown_int() ==> exclusive == 0;\nloop invariant unknown_int() ==> nonexclusive == 0;\nloop invariant unknown_int() ==> unowned == 0;\nloop invariant (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid >= 1;\nloop invariant (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant (exclusive==0 && nonexclusive==0 && unowned==0) ==> exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant nonexclusive > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant nonexclusive > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant nonexclusive > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant nonexclusive > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant unowned > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant unowned > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant unowned > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant unowned > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant exclusive > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant exclusive > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant exclusive > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant exclusive > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant exclusive > 0 ==> unknown_int() ==> nonexclusive + unowned >= 1;\nloop invariant exclusive > 0 ==> unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive > 0 ==> unknown_int() ==> exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant nonexclusive + unowned >= 1 ==> unknown_int() ==> invalid >= 1;\nloop invariant nonexclusive + unowned >= 1 ==> unknown_int() ==> exclusive == 0;\nloop invariant nonexclusive + unowned >= 1 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant nonexclusive + unowned >= 1 ==> unknown_int() ==> unowned == 0;\nloop invariant invalid >= 1 ==> unknown_int() ==> exclusive == 0;\nloop invariant invalid >= 1 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant invalid >= 1 ==> unknown_int() ==> unowned == 0;\nloop invariant exclusive == 0 ==> nonexclusive == 0;\nloop invariant exclusive == 0 ==> unowned == 0;\nloop invariant nonexclusive == 0 ==> unowned == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= unowned;\nloop invariant i2: 0 <= invalid;\nloop invariant i3: 0 <= nonexclusive;\nloop invariant i4: 0 <= exclusive;\n\n\n\n\n\n\nloop invariant i11: (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid >= 1;\nloop invariant i12: (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= nonexclusive <= invalid;\nloop invariant 0 <= unowned <= 1;\nloop invariant 1 <= exclusive <= invalid + unowned + nonexclusive;\nloop invariant nonexclusive + unowned + exclusive + invalid >= 1;\nloop invariant exclusive + unowned + nonexclusive >= 1;\nloop invariant nonexclusive + unowned + exclusive >= 1;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant unowned >= 0;\nloop invariant exclusive >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: nonexclusive + unowned + exclusive + invalid >= 1;\n\n\n\nloop invariant i8: unowned >= 0;\nloop invariant i9: exclusive >= 0;\nloop invariant i10: invalid >= 0;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive ==> invalid + unowned + exclusive + nonexclusive == 1;\nloop invariant nonexclusive ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant unowned ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant invalid ==> invalid >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= unowned;\nloop invariant i3: 0 <= nonexclusive;\nloop invariant i4: 0 <= exclusive;\n\nloop invariant i6: invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i8: nonexclusive ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i9: unowned ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i10: invalid ==> invalid >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant ( ( unknown_int() ==> nonexclusive + unowned >= 1 ) );\nloop invariant ( ( unknown_int() ==> exclusive >= 0 ) );\nloop invariant ( ( unknown_int() ==> unowned >= 0 ) );\nloop invariant ( ( unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> invalid >= 1 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> nonexclusive + unowned >= 1 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> exclusive >= 0 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> unowned >= 0 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> exclusive >= 0 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> unowned >= 0 ) );\nloop invariant ( ( unknown_int() ==> unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant ( ( unknown_int() ==> exclusive >= 0 ) );\nloop invariant ( ( unknown_int() ==> unowned >= 0 ) );\nloop invariant ( ( unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant ( ( exclusive >= 0 ) );\nloop invariant ( ( unowned >= 0 ) );\nloop invariant ( ( invalid + unowned + exclusive + nonexclusive >= 1 ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: ( ( exclusive >= 0 ) );\nloop invariant i11: ( ( unowned >= 0 ) );\nloop invariant i12: ( ( invalid + unowned + exclusive + nonexclusive >= 1 ) );\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant exclusive == 1;\nloop invariant (invalid + unowned + exclusive + nonexclusive) >= 1;\nloop invariant (invalid >= 1);\nloop invariant (unowned >= 0);\nloop invariant (exclusive >= 0);\nloop invariant (nonexclusive + unowned >=1);\nloop invariant (invalid >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: (invalid + unowned + exclusive + nonexclusive) >= 1;\n\nloop invariant i7: (unowned >= 0);\nloop invariant i8: (exclusive >= 0);\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant exclusive + unowned + nonexclusive + invalid >= 1;\nloop invariant exclusive >= 0 ==> unowned == 0;\nloop invariant exclusive >= 0 ==> nonexclusive == 0;\nloop invariant exclusive >= 0 ==> invalid >= 1;\nloop invariant exclusive >= 0 ==> exclusive == 1;\nloop invariant nonexclusive >= 0 ==> unowned == 0;\nloop invariant nonexclusive >= 0 ==> exclusive == 0;\nloop invariant nonexclusive >= 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 0 ==> nonexclusive == 1;\nloop invariant unowned >= 0 ==> exclusive == 0;\nloop invariant unowned >= 0 ==> nonexclusive == 0;\nloop invariant unowned >= 0 ==> invalid >= 1;\nloop invariant unowned >= 0 ==> unowned == 1;\nloop invariant invalid >= 1 ==> exclusive == 0;\nloop invariant invalid >= 1 ==> nonexclusive == 0;\nloop invariant invalid >= 1 ==> unowned == 0;\nloop invariant invalid >= 1 ==> invalid == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: exclusive + unowned + nonexclusive + invalid >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= unowned;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\nloop invariant unowned == 0 ==> invalid >= 1;\nloop invariant exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 1 ==> invalid >= 1;\nloop invariant nonexclusive == 1 ==> exclusive >= 1;\nloop invariant nonexclusive == 1 ==> invalid >= 1;\nloop invariant unowned == 1 ==> exclusive >= 1;\nloop invariant unowned == 1 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive == 0 ==> exclusive >= 1;\nloop invariant nonexclusive == 0 ==> invalid >= 1;\nloop invariant unowned == 0 ==> exclusive >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid;\nloop invariant i2: 0 <= nonexclusive;\nloop invariant i3: 0 <= exclusive;\nloop invariant i4: 0 <= unowned;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= invalid - 1;\nloop invariant 0 <= unowned <= unowned + exclusive;\nloop invariant 0 <= nonexclusive <= unowned + nonexclusive;\nloop invariant 0 <= exclusive <= exclusive + 1;\nloop invariant invalid >= 1;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= unowned <= unowned + exclusive;\nloop invariant i3: 0 <= nonexclusive <= unowned + nonexclusive;\nloop invariant i4: 0 <= exclusive <= exclusive + 1;\n\n\nloop invariant i7: invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i8: exclusive >= 0;\nloop invariant i9: unowned >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 1;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: nonexclusive >= 0;\nloop invariant i2: exclusive >= 0;\nloop invariant i3: unowned >= 0;\n\nloop invariant i5: nonexclusive + unowned >= 0;\nloop invariant i6: invalid + unowned + exclusive + nonexclusive >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 44: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid;\nloop invariant i2: 0 <= unowned;\nloop invariant i3: 0 <= nonexclusive;\nloop invariant i4: 1 <= exclusive;\nloop invariant i5: exclusive >= nonexclusive + unowned;\nloop invariant i6: nonexclusive >= 0;\nloop invariant i7: unowned >= 0;\nloop invariant i8: invalid >= 1;\nloop invariant i9: exclusive >= 0;\nloop invariant i10: 1 <= invalid <= 1000;\nloop invariant i11: 0 <= unowned <= 1000;\nloop invariant i12: 0 <= nonexclusive <= 1000;\nloop invariant i13: exclusive = 0;\nloop invariant i14: invalid + unowned + nonexclusive >= 1;\nloop invariant i15: (exclusive == 0) ==> (unowned + invalid + nonexclusive >= 1);\nloop invariant i16: 1 <= invalid <= 100000;\nloop invariant i17: 0 <= unowned <= 100000;\nloop invariant i18: 0 <= nonexclusive <= 100000;\nloop invariant i19: 0 <= exclusive <= 100000;\nloop invariant i20: invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i21: nonexclusive + unowned >= 1;\nloop invariant i22: (invalid >= 1) ==> (exclusive == 0);\nloop invariant i23: (invalid >= 1) ==> (nonexclusive == 0);\nloop invariant i24: (invalid >= 1) ==> (unowned == 0);\nloop invariant i25: (invalid >= 1) ==> (exclusive >= 0);\nloop invariant i26: (invalid >= 1) ==> (unowned >= 0);\nloop invariant i27: (invalid >= 1) ==> (nonexclusive >= 0);\nloop invariant i28: (invalid >= 1) ==> (exclusive <= 100000);\nloop invariant i29: (invalid >= 1) ==> (unowned <= 100000);\nloop invariant i30: (invalid >= 1) ==> (nonexclusive <= 100000);\nloop invariant i31: (invalid >= 1) ==> (exclusive + unowned + nonexclusive >= 1);\nloop invariant i32: (invalid >= 1) ==> (nonexclusive + unowned <= 100000);\nloop invariant i33: (invalid >= 1) ==> (invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant i34: (invalid >= 1) ==> (exclusive >= invalid - unowned - nonexclusive);\nloop invariant i35: (invalid >= 1) ==> (unowned >= invalid - exclusive - nonexclusive);\nloop invariant i36: (invalid >= 1) ==> (nonexclusive >= invalid - unowned - exclusive);\nloop invariant i37: (invalid >= 1) ==> (exclusive == 0 ==> nonexclusive + unowned >= 1);\nloop invariant i38: (invalid >= 1) ==> (exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\nloop invariant i39: (invalid >= 1) ==> (exclusive == 0 ==> nonexclusive + unowned <= 100000);\nloop invariant i40: (invalid >= 1) ==> (exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant i41: (invalid >= 1) ==> (nonexclusive == 0 ==> unowned >= 1);\nloop invariant i42: (invalid >= 1) ==> (nonexclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\nloop invariant i43: (invalid >= 1) ==> (nonexclusive == 0 ==> unowned <= 100000);\nloop invariant i44: (invalid >= 1) ==> (nonexclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= 100000);\nloop invariant i45: (invalid >= 1) ==> (unowned == 0 ==> exclusive >= 1);\nloop invariant i46: 1 <= invalid;\nloop invariant i47: 1 <= unowned;\nloop invariant i48: 1 <= nonexclusive;\nloop invariant i49: exclusive == 0;\nloop invariant i50: exclusive == 1 ==> unowned == 0;\nloop invariant i51: exclusive == 1 ==> nonexclusive == 0;\nloop invariant i52: exclusive == 0 ==> unowned >= 1;\nloop invariant i53: exclusive == 0 ==> nonexclusive >= 1;\nloop invariant i54: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 2;\nloop invariant i55: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\nloop invariant i56: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= 3;\nloop invariant i57: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\nloop invariant i58: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1 + 1 + 0 + 0;\nloop invariant i59: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + 0 + 1;\nloop invariant i60: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= 1 + 0 + 1 + 0;\nloop invariant i61: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + 0 + 1 + 1;\nloop invariant i62: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive == invalid + unowned + nonexclusive + 1;\nloop invariant i63: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive == invalid + unowned + exclusive + 1;\nloop invariant i64: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + nonexclusive + 2;\nloop invariant i65: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + exclusive + 2;\nloop invariant i66: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + nonexclusive;\nloop invariant i67: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + exclusive;\nloop invariant i68: exclusive == 0 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant i69: exclusive == 1 ==> unowned + nonexclusive <= invalid - 1;\nloop invariant i70: exclusive == 0 ==> unowned + nonexclusive >= 1;\nloop invariant i71: exclusive == 1 ==> unowned + nonexclusive >= 1;\nloop invariant i72: exclusive == 0 ==> invalid >= 1 + unowned + nonexclusive;\nloop invariant i73: exclusive == 1 ==> invalid >= 1 + unowned + exclusive;\nloop invariant i74: exclusive == 0 ==> invalid + unowned + nonexclusive >= 2;\nloop invariant i75: exclusive == 1 ==> invalid + unowned + exclusive >= 2;\nloop invariant i76: exclusive == 0 ==> invalid + unowned + nonexclusive <= invalid + 1;\nloop invariant i77: exclusive == 1 ==> invalid + unowned + exclusive <= invalid + 1;\nloop invariant i78: exclusive == 0 ==> invalid + unowned + nonexclusive >= invalid;\nloop invariant i79: exclusive == 1 ==> invalid + unowned + exclusive >= invalid;\nloop invariant i80: 0 <= exclusive <= 1;\nloop invariant i81: unowned >= nonexclusive;\nloop invariant i82: invalid >= nonexclusive + unowned;\nloop invariant i83: 0 <= exclusive + nonexclusive + unowned;\nloop invariant i84: invalid >= exclusive + nonexclusive + unowned;\nloop invariant i85: 0 <= exclusive + nonexclusive + unowned - invalid;\nloop invariant i86: 0 <= unowned <= 1;\nloop invariant i87: 0 <= invalid <= 1;\nloop invariant i88: 0 <= nonexclusive <= 1;\nloop invariant i89: 0 <= exclusive;\nloop invariant i90: exclusive + unowned + nonexclusive >= 1;\nloop invariant i91: exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant i92: unknown_int() ==> invalid >= 1;\nloop invariant i93: unknown_int() ==> exclusive == 0;\nloop invariant i94: unknown_int() ==> nonexclusive == 0;\nloop invariant i95: unknown_int() ==> unowned == 0;\nloop invariant i96: (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid >= 1;\nloop invariant i97: (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i98: (exclusive==0 && nonexclusive==0 && unowned==0) ==> exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant i99: nonexclusive > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant i100: nonexclusive > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant i101: nonexclusive > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant i102: nonexclusive > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant i103: unowned > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant i104: unowned > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant i105: unowned > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant i106: unowned > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant i107: exclusive > 0 ==> unknown_int() ==> invalid >= 1;\nloop invariant i108: exclusive > 0 ==> unknown_int() ==> exclusive == 0;\nloop invariant i109: exclusive > 0 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant i110: exclusive > 0 ==> unknown_int() ==> unowned == 0;\nloop invariant i111: exclusive > 0 ==> unknown_int() ==> nonexclusive + unowned >= 1;\nloop invariant i112: exclusive > 0 ==> unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i113: exclusive > 0 ==> unknown_int() ==> exclusive + unowned + nonexclusive == invalid + unowned + exclusive + nonexclusive;\nloop invariant i114: nonexclusive + unowned >= 1 ==> unknown_int() ==> invalid >= 1;\nloop invariant i115: nonexclusive + unowned >= 1 ==> unknown_int() ==> exclusive == 0;\nloop invariant i116: nonexclusive + unowned >= 1 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant i117: nonexclusive + unowned >= 1 ==> unknown_int() ==> unowned == 0;\nloop invariant i118: invalid >= 1 ==> unknown_int() ==> exclusive == 0;\nloop invariant i119: invalid >= 1 ==> unknown_int() ==> nonexclusive == 0;\nloop invariant i120: invalid >= 1 ==> unknown_int() ==> unowned == 0;\nloop invariant i121: exclusive == 0 ==> nonexclusive == 0;\nloop invariant i122: exclusive == 0 ==> unowned == 0;\nloop invariant i123: nonexclusive == 0 ==> unowned == 0;\nloop invariant i124: 0 <= nonexclusive <= invalid;\nloop invariant i125: 1 <= exclusive <= invalid + unowned + nonexclusive;\nloop invariant i126: nonexclusive + unowned + exclusive + invalid >= 1;\nloop invariant i127: nonexclusive + unowned + exclusive >= 1;\nloop invariant i128: invalid >= 0;\nloop invariant i129: exclusive >= 1;\nloop invariant i130: exclusive ==> invalid + unowned + exclusive + nonexclusive == 1;\nloop invariant i131: nonexclusive ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i132: unowned ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i133: invalid ==> invalid >= 1;\nloop invariant i134: ( ( unknown_int() ==> nonexclusive + unowned >= 1 ) );\nloop invariant i135: ( ( unknown_int() ==> exclusive >= 0 ) );\nloop invariant i136: ( ( unknown_int() ==> unowned >= 0 ) );\nloop invariant i137: ( ( unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant i138: ( ( unknown_int() ==> unknown_int() ==> invalid >= 1 ) );\nloop invariant i139: ( ( unknown_int() ==> unknown_int() ==> nonexclusive + unowned >= 1 ) );\nloop invariant i140: ( ( unknown_int() ==> unknown_int() ==> exclusive >= 0 ) );\nloop invariant i141: ( ( unknown_int() ==> unknown_int() ==> unowned >= 0 ) );\nloop invariant i142: ( ( unknown_int() ==> unknown_int() ==> invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant i143: ( ( exclusive >= 0 ) );\nloop invariant i144: ( ( unowned >= 0 ) );\nloop invariant i145: ( ( invalid + unowned + exclusive + nonexclusive >= 1 ) );\nloop invariant i146: 0 <= invalid <= 100000;\nloop invariant i147: exclusive == 1;\nloop invariant i148: (invalid + unowned + exclusive + nonexclusive) >= 1;\nloop invariant i149: (invalid >= 1);\nloop invariant i150: (unowned >= 0);\nloop invariant i151: (exclusive >= 0);\nloop invariant i152: (nonexclusive + unowned >=1);\nloop invariant i153: exclusive + unowned + nonexclusive + invalid >= 1;\nloop invariant i154: exclusive >= 0 ==> unowned == 0;\nloop invariant i155: exclusive >= 0 ==> nonexclusive == 0;\nloop invariant i156: exclusive >= 0 ==> invalid >= 1;\nloop invariant i157: exclusive >= 0 ==> exclusive == 1;\nloop invariant i158: nonexclusive >= 0 ==> unowned == 0;\nloop invariant i159: nonexclusive >= 0 ==> exclusive == 0;\nloop invariant i160: nonexclusive >= 0 ==> invalid >= 1;\nloop invariant i161: nonexclusive >= 0 ==> nonexclusive == 1;\nloop invariant i162: unowned >= 0 ==> exclusive == 0;\nloop invariant i163: unowned >= 0 ==> nonexclusive == 0;\nloop invariant i164: unowned >= 0 ==> invalid >= 1;\nloop invariant i165: unowned >= 0 ==> unowned == 1;\nloop invariant i166: invalid >= 1 ==> exclusive == 0;\nloop invariant i167: invalid >= 1 ==> nonexclusive == 0;\nloop invariant i168: invalid >= 1 ==> unowned == 0;\nloop invariant i169: invalid >= 1 ==> invalid == 1;\nloop invariant i170: exclusive == 1 ==> nonexclusive + unowned >= 1;\nloop invariant i171: exclusive == 1 ==> invalid >= 1;\nloop invariant i172: nonexclusive == 1 ==> exclusive >= 1;\nloop invariant i173: nonexclusive == 1 ==> invalid >= 1;\nloop invariant i174: unowned == 1 ==> exclusive >= 1;\nloop invariant i175: unowned == 1 ==> invalid >= 1;\nloop invariant i176: exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant i177: exclusive == 0 ==> invalid >= 1;\nloop invariant i178: nonexclusive == 0 ==> exclusive >= 1;\nloop invariant i179: nonexclusive == 0 ==> invalid >= 1;\nloop invariant i180: unowned == 0 ==> exclusive >= 1;\nloop invariant i181: unowned == 0 ==> invalid >= 1;\nloop invariant i182: 0 <= invalid <= invalid - 1;\nloop invariant i183: 0 <= unowned <= unowned + exclusive;\nloop invariant i184: 0 <= nonexclusive <= unowned + nonexclusive;\nloop invariant i185: 0 <= exclusive <= exclusive + 1;\nloop invariant i186: nonexclusive + unowned >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 86,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid;\nloop invariant i2: 0 <= unowned;\nloop invariant i3: 0 <= nonexclusive;\n\n\nloop invariant i6: nonexclusive >= 0;\nloop invariant i7: unowned >= 0;\n\nloop invariant i9: exclusive >= 0;\n\n\nloop invariant i12: 0 <= nonexclusive <= 1000;\n\n\nloop invariant i15: (exclusive == 0) ==> (unowned + invalid + nonexclusive >= 1);\n\n\nloop invariant i18: 0 <= nonexclusive <= 100000;\nloop invariant i19: 0 <= exclusive <= 100000;\nloop invariant i20: invalid + unowned + exclusive + nonexclusive >= 1;\n\n\n\n\nloop invariant i25: (invalid >= 1) ==> (exclusive >= 0);\nloop invariant i26: (invalid >= 1) ==> (unowned >= 0);\nloop invariant i27: (invalid >= 1) ==> (nonexclusive >= 0);\nloop invariant i28: (invalid >= 1) ==> (exclusive <= 100000);\n\nloop invariant i30: (invalid >= 1) ==> (nonexclusive <= 100000);\n\n\n\n\n\n\n\nloop invariant i38: (invalid >= 1) ==> (exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\n\n\n\nloop invariant i42: (invalid >= 1) ==> (nonexclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= 1);\n\n\n\n\n\n\n\nloop invariant i50: exclusive == 1 ==> unowned == 0;\nloop invariant i51: exclusive == 1 ==> nonexclusive == 0;\n\n\n\nloop invariant i55: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\n\nloop invariant i57: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + nonexclusive + 1;\n\nloop invariant i59: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + unowned + 0 + 1;\n\nloop invariant i61: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + 1 + 0 + 1 + 1;\n\n\nloop invariant i64: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + nonexclusive + 2;\nloop invariant i65: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive <= invalid + unowned + exclusive + 2;\nloop invariant i66: exclusive == 0 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + nonexclusive;\nloop invariant i67: exclusive == 1 ==> invalid + unowned + exclusive + nonexclusive >= invalid + unowned + exclusive;\n\n\n\n\n\n\n\n\n\nloop invariant i77: exclusive == 1 ==> invalid + unowned + exclusive <= invalid + 1;\nloop invariant i78: exclusive == 0 ==> invalid + unowned + nonexclusive >= invalid;\nloop invariant i79: exclusive == 1 ==> invalid + unowned + exclusive >= invalid;\nloop invariant i80: 0 <= exclusive <= 1;\nloop invariant i81: unowned >= nonexclusive;\n\nloop invariant i83: 0 <= exclusive + nonexclusive + unowned;\n\n\n\n\nloop invariant i88: 0 <= nonexclusive <= 1;\nloop invariant i89: 0 <= exclusive;\n\n\n\n\n\n\nloop invariant i96: (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid >= 1;\nloop invariant i97: (exclusive==0 && nonexclusive==0 && unowned==0) ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i126: nonexclusive + unowned + exclusive + invalid >= 1;\n\nloop invariant i128: invalid >= 0;\n\n\nloop invariant i131: nonexclusive ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i132: unowned ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i133: invalid ==> invalid >= 1;\n\n\n\n\n\n\n\n\n\nloop invariant i143: ( ( exclusive >= 0 ) );\nloop invariant i144: ( ( unowned >= 0 ) );\nloop invariant i145: ( ( invalid + unowned + exclusive + nonexclusive >= 1 ) );\n\n\nloop invariant i148: (invalid + unowned + exclusive + nonexclusive) >= 1;\n\nloop invariant i150: (unowned >= 0);\nloop invariant i151: (exclusive >= 0);\n\nloop invariant i153: exclusive + unowned + nonexclusive + invalid >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i183: 0 <= unowned <= unowned + exclusive;\nloop invariant i184: 0 <= nonexclusive <= unowned + nonexclusive;\nloop invariant i185: 0 <= exclusive <= exclusive + 1;\nloop invariant i186: nonexclusive + unowned >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 149,
        "success_count": 121,
        "failure_count": 28,
        "success_rate": 0.8120805369127517
    }
}