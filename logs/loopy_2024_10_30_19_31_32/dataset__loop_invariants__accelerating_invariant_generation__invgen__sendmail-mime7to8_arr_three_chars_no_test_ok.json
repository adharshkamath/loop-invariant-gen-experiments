{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant 0 <= fb;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb > 0 ==> 0 <= fb;\nloop invariant fb > 0 ==> fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb > 0 ==> 0 <= fb;\nloop invariant fb > 0 ==> fb < fbuflen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\n*/\n```",
            "```\n/*@\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb <= fbuflen - 1;\nloop invariant fb >= 0 ==> fb < fbuflen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fbuflen > 0;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET;\nloop invariant fb + 3 * __BLAST_NONDET < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 1;\nloop invariant fb + 3 * __BLAST_NONDET + 1 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 2;\nloop invariant fb + 3 * __BLAST_NONDET + 2 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 3;\nloop invariant fb + 3 * __BLAST_NONDET + 3 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 4;\nloop invariant fb + 3 * __BLAST_NONDET + 4 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 5;\nloop invariant fb + 3 * __BLAST_NONDET + 5 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 6;\nloop invariant fb + 3 * __BLAST_NONDET + 6 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 7;\nloop invariant fb + 3 * __BLAST_NONDET + 7 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 8;\nloop invariant fb + 3 * __BLAST_NONDET + 8 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 9;\nloop invariant fb + 3 * __BLAST_NONDET + 9 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 10;\nloop invariant fb + 3 * __BLAST_NONDET + 10 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 11;\nloop invariant fb + 3 * __BLAST_NONDET + 11 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 12;\nloop invariant fb + 3 * __BLAST_NONDET + 12 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 13;\nloop invariant fb + 3 * __BLAST_NONDET + 13 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 14;\nloop invariant fb + 3 * __BLAST_NONDET + 14 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 15;\nloop invariant fb + 3 * __BLAST_NONDET + 15 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 16;\nloop invariant fb + 3 * __BLAST_NONDET + 16 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 17;\nloop invariant fb + 3 * __BLAST_NONDET + 17 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 18;\nloop invariant fb + 3 * __BLAST_NONDET + 18 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 19;\nloop invariant fb + 3 * __BLAST_NONDET + 19 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 20;\nloop invariant fb + 3 * __BLAST_NONDET + 20 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 21;\nloop invariant fb + 3 * __BLAST_NONDET + 21 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 22;\nloop invariant fb + 3 * __BLAST_NONDET + 22 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 23;\nloop invariant fb + 3 * __BLAST_NONDET + 23 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 24;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fbuflen > 0;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb > -1;\nloop invariant fb < fbuflen;\nloop invariant fb > 0;\nloop invariant fb < fbuflen;\nloop invariant fb > -1;\nloop invariant fb < fbuflen;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb > 0 ==> 0 <= fb;\nloop invariant fb > 0 ==> fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb > 0 ==> 0 <= fb;\nloop invariant fb > 0 ==> fb < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb > 0 ==> 0 <= fb;\nloop invariant i4: fb > 0 ==> fb < fbuflen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\nloop invariant fb < fbuflen;\nloop invariant fb == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb == 0;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\nloop invariant fb <= fbuflen - 1;\nloop invariant fb >= 0 ==> fb < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: fb >= 0;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb <= fbuflen - 1;\nloop invariant i4: fb >= 0 ==> fb < fbuflen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fbuflen > 0;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fbuflen > 0;\nloop invariant i4: fb >= 0;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 25,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET;\nloop invariant fb + 3 * __BLAST_NONDET < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 1;\nloop invariant fb + 3 * __BLAST_NONDET + 1 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 2;\nloop invariant fb + 3 * __BLAST_NONDET + 2 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 3;\nloop invariant fb + 3 * __BLAST_NONDET + 3 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 4;\nloop invariant fb + 3 * __BLAST_NONDET + 4 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 5;\nloop invariant fb + 3 * __BLAST_NONDET + 5 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 6;\nloop invariant fb + 3 * __BLAST_NONDET + 6 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 7;\nloop invariant fb + 3 * __BLAST_NONDET + 7 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 8;\nloop invariant fb + 3 * __BLAST_NONDET + 8 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 9;\nloop invariant fb + 3 * __BLAST_NONDET + 9 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 10;\nloop invariant fb + 3 * __BLAST_NONDET + 10 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 11;\nloop invariant fb + 3 * __BLAST_NONDET + 11 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 12;\nloop invariant fb + 3 * __BLAST_NONDET + 12 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 13;\nloop invariant fb + 3 * __BLAST_NONDET + 13 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 14;\nloop invariant fb + 3 * __BLAST_NONDET + 14 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 15;\nloop invariant fb + 3 * __BLAST_NONDET + 15 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 16;\nloop invariant fb + 3 * __BLAST_NONDET + 16 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 17;\nloop invariant fb + 3 * __BLAST_NONDET + 17 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 18;\nloop invariant fb + 3 * __BLAST_NONDET + 18 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 19;\nloop invariant fb + 3 * __BLAST_NONDET + 19 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 20;\nloop invariant fb + 3 * __BLAST_NONDET + 20 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 21;\nloop invariant fb + 3 * __BLAST_NONDET + 21 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 22;\nloop invariant fb + 3 * __BLAST_NONDET + 22 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 23;\nloop invariant fb + 3 * __BLAST_NONDET + 23 < fbuflen;\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 24;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fbuflen > 0;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\nloop invariant fb >= 0;\nloop invariant fb < fbuflen - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fbuflen > 0;\nloop invariant i4: fb >= 0;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= fb;\nloop invariant fb < fbuflen;\nloop invariant fb > -1;\nloop invariant fb < fbuflen;\nloop invariant fb > 0;\nloop invariant fb < fbuflen;\nloop invariant fb > -1;\nloop invariant fb < fbuflen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb > -1;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= fb is partially proven to be inductive.\nloop invariant fb < fbuflen is partially proven to be inductive.\nloop invariant fb >= 0 is partially proven to be inductive.\nloop invariant fb > 0 ==> 0 <= fb is partially proven to be inductive.\nloop invariant fb > 0 ==> fb < fbuflen is partially proven to be inductive.\nloop invariant fb == 0 is partially proven to be inductive.\nloop invariant fb < fbuflen - 1 is preserved but not established.\nloop invariant fb <= fbuflen - 1 is partially proven to be inductive.\nloop invariant fb >= 0 ==> fb < fbuflen is partially proven to be inductive.\nloop invariant fbuflen > 0 is partially proven to be inductive.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET is preserved but not established.\nloop invariant fb + 3 * __BLAST_NONDET < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 1 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 1 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 2 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 2 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 3 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 3 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 4 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 4 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 5 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 5 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 6 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 6 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 7 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 7 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 8 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 8 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 9 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 9 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 10 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 10 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 11 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 11 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 12 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 12 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 13 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 13 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 14 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 14 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 15 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 15 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 16 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 16 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 17 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 17 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 18 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 18 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 19 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 19 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 20 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 20 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 21 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 21 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 22 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 22 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 23 is partially proven to be inductive.\nloop invariant fb + 3 * __BLAST_NONDET + 23 < fbuflen is preserved but not established.\nloop invariant 0 <= fb + 3 * __BLAST_NONDET + 24 is partially proven to be inductive.\nloop invariant fb > -1 is partially proven to be inductive.\nloop invariant fb > 0 is preserved but not established.\nAssertion 0 <= fb: Partially proven\nAssertion fb < fbuflen: Partially proven\nAssertion 0 <= fb: Partially proven\nAssertion fb < fbuflen: Partially proven\nAssertion 0 <= fb: Partially proven\nAssertion fb < fbuflen: Partially proven\nAssertion 0 <= fb: Partially proven\nAssertion fb < fbuflen: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\nloop invariant i4: fb > 0 ==> 0 <= fb;\nloop invariant i5: fb > 0 ==> fb < fbuflen;\nloop invariant i6: fb == 0;\nloop invariant i7: fb < fbuflen - 1;\nloop invariant i8: fb <= fbuflen - 1;\nloop invariant i9: fb >= 0 ==> fb < fbuflen;\nloop invariant i10: fbuflen > 0;\nloop invariant i11: 0 <= fb + 3 * __BLAST_NONDET;\nloop invariant i12: fb + 3 * __BLAST_NONDET < fbuflen;\nloop invariant i13: 0 <= fb + 3 * __BLAST_NONDET + 1;\nloop invariant i14: fb + 3 * __BLAST_NONDET + 1 < fbuflen;\nloop invariant i15: 0 <= fb + 3 * __BLAST_NONDET + 2;\nloop invariant i16: fb + 3 * __BLAST_NONDET + 2 < fbuflen;\nloop invariant i17: 0 <= fb + 3 * __BLAST_NONDET + 3;\nloop invariant i18: fb + 3 * __BLAST_NONDET + 3 < fbuflen;\nloop invariant i19: 0 <= fb + 3 * __BLAST_NONDET + 4;\nloop invariant i20: fb + 3 * __BLAST_NONDET + 4 < fbuflen;\nloop invariant i21: 0 <= fb + 3 * __BLAST_NONDET + 5;\nloop invariant i22: fb + 3 * __BLAST_NONDET + 5 < fbuflen;\nloop invariant i23: 0 <= fb + 3 * __BLAST_NONDET + 6;\nloop invariant i24: fb + 3 * __BLAST_NONDET + 6 < fbuflen;\nloop invariant i25: 0 <= fb + 3 * __BLAST_NONDET + 7;\nloop invariant i26: fb + 3 * __BLAST_NONDET + 7 < fbuflen;\nloop invariant i27: 0 <= fb + 3 * __BLAST_NONDET + 8;\nloop invariant i28: fb + 3 * __BLAST_NONDET + 8 < fbuflen;\nloop invariant i29: 0 <= fb + 3 * __BLAST_NONDET + 9;\nloop invariant i30: fb + 3 * __BLAST_NONDET + 9 < fbuflen;\nloop invariant i31: 0 <= fb + 3 * __BLAST_NONDET + 10;\nloop invariant i32: fb + 3 * __BLAST_NONDET + 10 < fbuflen;\nloop invariant i33: 0 <= fb + 3 * __BLAST_NONDET + 11;\nloop invariant i34: fb + 3 * __BLAST_NONDET + 11 < fbuflen;\nloop invariant i35: 0 <= fb + 3 * __BLAST_NONDET + 12;\nloop invariant i36: fb + 3 * __BLAST_NONDET + 12 < fbuflen;\nloop invariant i37: 0 <= fb + 3 * __BLAST_NONDET + 13;\nloop invariant i38: fb + 3 * __BLAST_NONDET + 13 < fbuflen;\nloop invariant i39: 0 <= fb + 3 * __BLAST_NONDET + 14;\nloop invariant i40: fb + 3 * __BLAST_NONDET + 14 < fbuflen;\nloop invariant i41: 0 <= fb + 3 * __BLAST_NONDET + 15;\nloop invariant i42: fb + 3 * __BLAST_NONDET + 15 < fbuflen;\nloop invariant i43: 0 <= fb + 3 * __BLAST_NONDET + 16;\nloop invariant i44: fb + 3 * __BLAST_NONDET + 16 < fbuflen;\nloop invariant i45: 0 <= fb + 3 * __BLAST_NONDET + 17;\nloop invariant i46: fb + 3 * __BLAST_NONDET + 17 < fbuflen;\nloop invariant i47: 0 <= fb + 3 * __BLAST_NONDET + 18;\nloop invariant i48: fb + 3 * __BLAST_NONDET + 18 < fbuflen;\nloop invariant i49: 0 <= fb + 3 * __BLAST_NONDET + 19;\nloop invariant i50: fb + 3 * __BLAST_NONDET + 19 < fbuflen;\nloop invariant i51: 0 <= fb + 3 * __BLAST_NONDET + 20;\nloop invariant i52: fb + 3 * __BLAST_NONDET + 20 < fbuflen;\nloop invariant i53: 0 <= fb + 3 * __BLAST_NONDET + 21;\nloop invariant i54: fb + 3 * __BLAST_NONDET + 21 < fbuflen;\nloop invariant i55: 0 <= fb + 3 * __BLAST_NONDET + 22;\nloop invariant i56: fb + 3 * __BLAST_NONDET + 22 < fbuflen;\nloop invariant i57: 0 <= fb + 3 * __BLAST_NONDET + 23;\nloop invariant i58: fb + 3 * __BLAST_NONDET + 23 < fbuflen;\nloop invariant i59: 0 <= fb + 3 * __BLAST_NONDET + 24;\nloop invariant i60: fb > -1;\nloop invariant i61: fb > 0;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 26,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: fb >= 0;\nloop invariant i4: fb > 0 ==> 0 <= fb;\nloop invariant i5: fb > 0 ==> fb < fbuflen;\nloop invariant i6: fb == 0;\n\nloop invariant i8: fb <= fbuflen - 1;\nloop invariant i9: fb >= 0 ==> fb < fbuflen;\nloop invariant i10: fbuflen > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i60: fb > -1;\n\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n\n    {;\n//@ assert(fb<fbuflen);\n}\n\n  }\n\n END:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 169,
        "success_count": 139,
        "failure_count": 30,
        "success_rate": 0.8224852071005917
    }
}