{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant j <= i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= i <= INT_MAX;\nloop invariant 0 <= j <= INT_MAX;\nloop invariant i == x * (x + 1) / 2;\nloop invariant j == y * (y + 1) / 2;\nloop invariant j <= i - 1 ==> flag == 1;\nloop invariant j <= i - 1 ==> flag == 0 ==> i <= j + 1;\nloop invariant j <= i - 1 ==> flag == 0 ==> j == i - 1;\nloop invariant j <= i - 1 ==> flag == 0 ==> i == j + 1;\nloop invariant j <= i - 1 ==> flag == 1 ==> i <= j + 1;\nloop invariant j <= i - 1 ==> flag == 1 ==> j == i - 2;\nloop invariant j <= i - 1 ==> flag == 1 ==> i == j + 2;\nloop invariant j <= i - 1 ==> i == j + 2 ==> flag == 1;\nloop invariant j <= i - 1 ==> i == j + 1 ==> flag == 0;\nloop invariant j <= i - 1 ==> i == j + 1 ==> flag == 1 ==> j == i - 2;\nloop invariant j <= i - 1 ==> i == j + 2 ==> flag == 1 ==> j == i - 3;\nloop invariant j <= i - 1 ==> i == j + 2 ==> flag == 0 ==> j == i - 1;\nloop invariant j <= i - 1 ==> i == j + 1 ==> flag == 0 ==> j == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 0 <= i <= (unknown1() * unknown1()) / 2;\nloop invariant 0 <= j <= unknown1() * unknown1();\nloop invariant flag ==> (j <= i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant y >= j;\nloop invariant j <= i - 1;\nloop invariant y <= i - 1;\nloop invariant i >= j;\nloop invariant x <= y;\nloop invariant j <= y;\nloop invariant x <= i - 1;\nloop invariant y >= i - 1;\nloop invariant i <= j + 1;\nloop invariant y >= x;\nloop invariant i >= x;\nloop invariant j >= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant j <= x + 1;\nloop invariant y >= x + 1;\nloop invariant y <= j + 1;\nloop invariant x <= j + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant j <= i - 1;\nloop invariant ((flag && j <= i - 1) ==> j <= i - 1);\nloop invariant ((flag && j <= i - 1) ==> i <= j);\nloop invariant (flag && j <= i - 1 ==> j <= i - 1);\nloop invariant (flag && j <= i - 1 ==> i <= j);\nloop invariant ((not flag && j <= i - 1) ==> j <= i - 1);\nloop invariant ((not flag && j <= i - 1) ==> i <= j);\nloop invariant (not flag && j <= i - 1 ==> j <= i - 1);\nloop invariant (not flag && j <= i - 1 ==> i <= j);\nloop invariant ((flag && i <= j) ==> i <= j);\nloop invariant ((not flag && i <= j) ==> i <= j);\nloop invariant (flag && i <= j ==> i <= j);\nloop invariant (not flag && i <= j ==> i <= j);\nloop invariant ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> j <= i - 1));\nloop invariant ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> i <= j));\nloop invariant (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> j <= i - 1));\nloop invariant (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> i <= j));\nloop invariant ((not flag && j <= i - 1) ==> ((not flag && j <= i - 1) ==> j <= i - 1));\nloop invariant ((not flag && j <= i - 1) ==> ((not flag && j <= i - 1) ==> i <= j));\nloop invariant (not flag && j <= i - 1 ==> (not flag && j <= i - 1 ==> j <= i - 1));\nloop invariant (not flag && j <= i - 1 ==> (not flag && j <= i - 1 ==> i <= j));\nloop invariant (flag ==> (flag && j <= i - 1));\nloop invariant (not flag ==> (not flag && j <= i - 1));\nloop invariant (flag ==> (flag && i <= j));\nloop invariant (not flag ==> (not flag && i <= j));\nloop invariant (flag ==> (flag ==> j <= i - 1));\nloop invariant (flag ==> (flag ==> i <= j));\nloop invariant (not flag ==> (not flag ==> j <= i - 1));\nloop invariant (not flag ==> (not flag ==> i <= j));\nloop invariant (flag ==> (flag ==> flag && j <= i - 1));\nloop invariant (flag ==> (flag ==> flag && i <= j));\nloop invariant (not flag ==> (not flag ==> not flag && j <= i - 1));\nloop invariant (not flag ==> (not flag ==> not flag && i <= j));\nloop invariant (flag ==> (flag ==> (flag && j <= i - 1)));\nloop invariant (flag ==> (flag ==> (flag && i <= j)));\nloop invariant (not flag ==> (not flag ==> (not flag && j <= i - 1)));\nloop invariant (not flag ==> (not flag ==> (not flag && i <= j)));\nloop invariant (flag ==> (flag ==> (flag ==> j <= i - 1)));\nloop invariant (flag ==> (flag ==> (flag ==> i <= j)));\nloop invariant (not flag ==> (not flag ==> (not flag ==> j <= i - 1)));\nloop invariant (not flag ==> (not flag ==> (not flag ==> i <= j)));\nloop invariant (flag ==> (flag ==> (flag ==> flag && j <= i - 1)));\nloop invariant (flag ==> (flag ==> (flag ==> flag && i <= j)));\nloop invariant (not flag ==> (not flag ==> (not flag ==> not flag && j <= i - 1)));\nloop invariant (not flag ==> (not flag ==> (not flag ==> not flag && i <= j)));\nloop invariant (flag ==> (flag ==> (flag ==> (flag && j <= i - 1))));\nloop invariant (flag ==> (flag ==> (flag ==> (flag && i <= j))));\nloop invariant (not flag ==> (not flag ==> (not flag ==> (not flag && j <= i - 1))));\nloop invariant (not flag ==> (not flag ==> (not flag ==> (not flag && i <= j))));\nloop invariant (flag ==> (flag ==> (flag ==> (flag ==> j <= i - 1))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i + 1;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= i - 1 ==> flag == 1;\nloop invariant j > i - 1 ==> flag == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y <= 100000;\nloop invariant i >= x * x / 2;\nloop invariant j >= y * y / 2;\nloop invariant j <= i - 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (0 <= y <= 100000);\nloop invariant (x >= (1 + (y - 1) * y / 2));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant j <= i;\nloop invariant 0 <= x;\nloop invariant x <= i;\nloop invariant 0 <= y;\nloop invariant y <= j;\nloop invariant i <= j + 1;\nloop invariant j <= i - 1 ==> i <= 2;\nloop invariant j <= i - 1 ==> j <= 1;\n*/\n```",
            "```\n/*@\nloop invariant y = j - x;\nloop invariant y = i - x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j; loop invariant 0 <= j <= i; loop invariant flag ==> (i - j == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= j <= i - 1;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i - 1;\nloop invariant j <= i;\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant 0 <= x <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant j <= i * i / 2;\nloop invariant x * i >= j;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant j <= i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 0 <= i <= INT_MAX;\nloop invariant 0 <= j <= INT_MAX;\nloop invariant i == x * (x + 1) / 2;\nloop invariant j == y * (y + 1) / 2;\nloop invariant j <= i - 1 ==> flag == 1;\nloop invariant j <= i - 1 ==> flag == 0 ==> i <= j + 1;\nloop invariant j <= i - 1 ==> flag == 0 ==> j == i - 1;\nloop invariant j <= i - 1 ==> flag == 0 ==> i == j + 1;\nloop invariant j <= i - 1 ==> flag == 1 ==> i <= j + 1;\nloop invariant j <= i - 1 ==> flag == 1 ==> j == i - 2;\nloop invariant j <= i - 1 ==> flag == 1 ==> i == j + 2;\nloop invariant j <= i - 1 ==> i == j + 2 ==> flag == 1;\nloop invariant j <= i - 1 ==> i == j + 1 ==> flag == 0;\nloop invariant j <= i - 1 ==> i == j + 1 ==> flag == 1 ==> j == i - 2;\nloop invariant j <= i - 1 ==> i == j + 2 ==> flag == 1 ==> j == i - 3;\nloop invariant j <= i - 1 ==> i == j + 2 ==> flag == 0 ==> j == i - 1;\nloop invariant j <= i - 1 ==> i == j + 1 ==> flag == 0 ==> j == i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= INT_MAX;\nloop invariant i2: 0 <= y <= INT_MAX;\nloop invariant i3: 0 <= i <= INT_MAX;\nloop invariant i4: 0 <= j <= INT_MAX;\nloop invariant i5: i == x * (x + 1) / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: j <= i - 1 ==> i == j + 1 ==> flag == 0 ==> j == i - 1;\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 0 <= i <= (unknown1() * unknown1()) / 2;\nloop invariant 0 <= j <= unknown1() * unknown1();\nloop invariant flag ==> (j <= i - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant y >= j;\nloop invariant j <= i - 1;\nloop invariant y <= i - 1;\nloop invariant i >= j;\nloop invariant x <= y;\nloop invariant j <= y;\nloop invariant x <= i - 1;\nloop invariant y >= i - 1;\nloop invariant i <= j + 1;\nloop invariant y >= x;\nloop invariant i >= x;\nloop invariant j >= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant j <= x + 1;\nloop invariant y >= x + 1;\nloop invariant y <= j + 1;\nloop invariant x <= j + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x;\n\n\n\n\nloop invariant i6: x <= y;\n\n\n\nloop invariant i10: i <= j + 1;\nloop invariant i11: y >= x;\nloop invariant i12: i >= x;\nloop invariant i13: j >= x;\nloop invariant i14: i >= y;\nloop invariant i15: j >= y;\n\n\nloop invariant i18: y <= j + 1;\nloop invariant i19: x <= j + 1;\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 34,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= y;\nloop invariant j <= i - 1;\nloop invariant ((flag && j <= i - 1) ==> j <= i - 1);\nloop invariant ((flag && j <= i - 1) ==> i <= j);\nloop invariant (flag && j <= i - 1 ==> j <= i - 1);\nloop invariant (flag && j <= i - 1 ==> i <= j);\nloop invariant ((not flag && j <= i - 1) ==> j <= i - 1);\nloop invariant ((not flag && j <= i - 1) ==> i <= j);\nloop invariant (not flag && j <= i - 1 ==> j <= i - 1);\nloop invariant (not flag && j <= i - 1 ==> i <= j);\nloop invariant ((flag && i <= j) ==> i <= j);\nloop invariant ((not flag && i <= j) ==> i <= j);\nloop invariant (flag && i <= j ==> i <= j);\nloop invariant (not flag && i <= j ==> i <= j);\nloop invariant ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> j <= i - 1));\nloop invariant ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> i <= j));\nloop invariant (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> j <= i - 1));\nloop invariant (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> i <= j));\nloop invariant ((not flag && j <= i - 1) ==> ((not flag && j <= i - 1) ==> j <= i - 1));\nloop invariant ((not flag && j <= i - 1) ==> ((not flag && j <= i - 1) ==> i <= j));\nloop invariant (not flag && j <= i - 1 ==> (not flag && j <= i - 1 ==> j <= i - 1));\nloop invariant (not flag && j <= i - 1 ==> (not flag && j <= i - 1 ==> i <= j));\nloop invariant (flag ==> (flag && j <= i - 1));\nloop invariant (not flag ==> (not flag && j <= i - 1));\nloop invariant (flag ==> (flag && i <= j));\nloop invariant (not flag ==> (not flag && i <= j));\nloop invariant (flag ==> (flag ==> j <= i - 1));\nloop invariant (flag ==> (flag ==> i <= j));\nloop invariant (not flag ==> (not flag ==> j <= i - 1));\nloop invariant (not flag ==> (not flag ==> i <= j));\nloop invariant (flag ==> (flag ==> flag && j <= i - 1));\nloop invariant (flag ==> (flag ==> flag && i <= j));\nloop invariant (not flag ==> (not flag ==> not flag && j <= i - 1));\nloop invariant (not flag ==> (not flag ==> not flag && i <= j));\nloop invariant (flag ==> (flag ==> (flag && j <= i - 1)));\nloop invariant (flag ==> (flag ==> (flag && i <= j)));\nloop invariant (not flag ==> (not flag ==> (not flag && j <= i - 1)));\nloop invariant (not flag ==> (not flag ==> (not flag && i <= j)));\nloop invariant (flag ==> (flag ==> (flag ==> j <= i - 1)));\nloop invariant (flag ==> (flag ==> (flag ==> i <= j)));\nloop invariant (not flag ==> (not flag ==> (not flag ==> j <= i - 1)));\nloop invariant (not flag ==> (not flag ==> (not flag ==> i <= j)));\nloop invariant (flag ==> (flag ==> (flag ==> flag && j <= i - 1)));\nloop invariant (flag ==> (flag ==> (flag ==> flag && i <= j)));\nloop invariant (not flag ==> (not flag ==> (not flag ==> not flag && j <= i - 1)));\nloop invariant (not flag ==> (not flag ==> (not flag ==> not flag && i <= j)));\nloop invariant (flag ==> (flag ==> (flag ==> (flag && j <= i - 1))));\nloop invariant (flag ==> (flag ==> (flag ==> (flag && i <= j))));\nloop invariant (not flag ==> (not flag ==> (not flag ==> (not flag && j <= i - 1))));\nloop invariant (not flag ==> (not flag ==> (not flag ==> (not flag && i <= j))));\nloop invariant (flag ==> (flag ==> (flag ==> (flag ==> j <= i - 1))));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: x <= i;\nloop invariant i4: y <= j;\nloop invariant i5: x <= y;\n\nloop invariant i7: ((flag && j <= i - 1) ==> j <= i - 1);\nloop invariant i8: ((flag && j <= i - 1) ==> i <= j);\nloop invariant i9: (flag && j <= i - 1 ==> j <= i - 1);\nloop invariant i10: (flag && j <= i - 1 ==> i <= j);\n\n\n\n\nloop invariant i15: ((flag && i <= j) ==> i <= j);\n\nloop invariant i17: (flag && i <= j ==> i <= j);\n\nloop invariant i19: ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> j <= i - 1));\nloop invariant i20: ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> i <= j));\nloop invariant i21: (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> j <= i - 1));\nloop invariant i22: (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> i <= j));\n\n\n\n\n\n\nloop invariant i29: (flag ==> (flag && i <= j));\n\n\nloop invariant i32: (flag ==> (flag ==> i <= j));\n\n\n\nloop invariant i36: (flag ==> (flag ==> flag && i <= j));\n\n\n\nloop invariant i40: (flag ==> (flag ==> (flag && i <= j)));\n\n\n\nloop invariant i44: (flag ==> (flag ==> (flag ==> i <= j)));\n\n\n\nloop invariant i48: (flag ==> (flag ==> (flag ==> flag && i <= j)));\n\n\n\nloop invariant i52: (flag ==> (flag ==> (flag ==> (flag && i <= j))));\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i + 1;\nloop invariant x == i;\nloop invariant y == j;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= i - 1 ==> flag == 1;\nloop invariant j > i - 1 ==> flag == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y <= 100000;\nloop invariant i >= x * x / 2;\nloop invariant j >= y * y / 2;\nloop invariant j <= i - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\nloop invariant i2: i >= x * x / 2;\nloop invariant i3: j >= y * y / 2;\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (0 <= y <= 100000);\nloop invariant (x >= (1 + (y - 1) * y / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant j <= i;\nloop invariant 0 <= x;\nloop invariant x <= i;\nloop invariant 0 <= y;\nloop invariant y <= j;\nloop invariant i <= j + 1;\nloop invariant j <= i - 1 ==> i <= 2;\nloop invariant j <= i - 1 ==> j <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\nloop invariant i4: 0 <= x;\nloop invariant i5: x <= i;\nloop invariant i6: 0 <= y;\nloop invariant i7: y <= j;\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant y = j - x;\nloop invariant y = i - x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\nloop invariant j = y + x;\nloop invariant j = x + y;\nloop invariant j = i - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j; loop invariant 0 <= j <= i; loop invariant flag ==> (i - j == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= j <= i - 1;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\nloop invariant j >= y;\nloop invariant i == x;\nloop invariant j == y;\nloop invariant i >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= y <= j;\n\nloop invariant i4: x <= i;\nloop invariant i5: y <= j;\nloop invariant i6: i >= x;\nloop invariant i7: j >= y;\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i - 1;\nloop invariant j <= i;\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant 0 <= x <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant j <= i * i / 2;\nloop invariant x * i >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= y <= j;\n\n\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 46: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= i <= j;\nloop invariant i2: j <= i - 1;\nloop invariant i3: 0 <= x <= INT_MAX;\nloop invariant i4: 0 <= y <= INT_MAX;\nloop invariant i5: 0 <= i <= INT_MAX;\nloop invariant i6: 0 <= j <= INT_MAX;\nloop invariant i7: i == x * (x + 1) / 2;\nloop invariant i8: j == y * (y + 1) / 2;\nloop invariant i9: j <= i - 1 ==> flag == 1;\nloop invariant i10: j <= i - 1 ==> flag == 0 ==> i <= j + 1;\nloop invariant i11: j <= i - 1 ==> flag == 0 ==> j == i - 1;\nloop invariant i12: j <= i - 1 ==> flag == 0 ==> i == j + 1;\nloop invariant i13: j <= i - 1 ==> flag == 1 ==> i <= j + 1;\nloop invariant i14: j <= i - 1 ==> flag == 1 ==> j == i - 2;\nloop invariant i15: j <= i - 1 ==> flag == 1 ==> i == j + 2;\nloop invariant i16: j <= i - 1 ==> i == j + 2 ==> flag == 1;\nloop invariant i17: j <= i - 1 ==> i == j + 1 ==> flag == 0;\nloop invariant i18: j <= i - 1 ==> i == j + 1 ==> flag == 1 ==> j == i - 2;\nloop invariant i19: j <= i - 1 ==> i == j + 2 ==> flag == 1 ==> j == i - 3;\nloop invariant i20: j <= i - 1 ==> i == j + 2 ==> flag == 0 ==> j == i - 1;\nloop invariant i21: j <= i - 1 ==> i == j + 1 ==> flag == 0 ==> j == i - 1;\nloop invariant i22: 0 <= x <= unknown1();\nloop invariant i23: 0 <= y <= unknown1();\nloop invariant i24: 0 <= i <= (unknown1() * unknown1()) / 2;\nloop invariant i25: 0 <= j <= unknown1() * unknown1();\nloop invariant i26: flag ==> (j <= i - 1);\nloop invariant i27: 0 <= x;\nloop invariant i28: y >= j;\nloop invariant i29: y <= i - 1;\nloop invariant i30: i >= j;\nloop invariant i31: x <= y;\nloop invariant i32: j <= y;\nloop invariant i33: x <= i - 1;\nloop invariant i34: y >= i - 1;\nloop invariant i35: i <= j + 1;\nloop invariant i36: y >= x;\nloop invariant i37: i >= x;\nloop invariant i38: j >= x;\nloop invariant i39: i >= y;\nloop invariant i40: j >= y;\nloop invariant i41: j <= x + 1;\nloop invariant i42: y >= x + 1;\nloop invariant i43: y <= j + 1;\nloop invariant i44: x <= j + 1;\nloop invariant i45: 0 <= y;\nloop invariant i46: x <= i;\nloop invariant i47: y <= j;\nloop invariant i48: ((flag && j <= i - 1) ==> j <= i - 1);\nloop invariant i49: ((flag && j <= i - 1) ==> i <= j);\nloop invariant i50: (flag && j <= i - 1 ==> j <= i - 1);\nloop invariant i51: (flag && j <= i - 1 ==> i <= j);\nloop invariant i52: ((not flag && j <= i - 1) ==> j <= i - 1);\nloop invariant i53: ((not flag && j <= i - 1) ==> i <= j);\nloop invariant i54: (not flag && j <= i - 1 ==> j <= i - 1);\nloop invariant i55: (not flag && j <= i - 1 ==> i <= j);\nloop invariant i56: ((flag && i <= j) ==> i <= j);\nloop invariant i57: ((not flag && i <= j) ==> i <= j);\nloop invariant i58: (flag && i <= j ==> i <= j);\nloop invariant i59: (not flag && i <= j ==> i <= j);\nloop invariant i60: ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> j <= i - 1));\nloop invariant i61: ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> i <= j));\nloop invariant i62: (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> j <= i - 1));\nloop invariant i63: (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> i <= j));\nloop invariant i64: ((not flag && j <= i - 1) ==> ((not flag && j <= i - 1) ==> j <= i - 1));\nloop invariant i65: ((not flag && j <= i - 1) ==> ((not flag && j <= i - 1) ==> i <= j));\nloop invariant i66: (not flag && j <= i - 1 ==> (not flag && j <= i - 1 ==> j <= i - 1));\nloop invariant i67: (not flag && j <= i - 1 ==> (not flag && j <= i - 1 ==> i <= j));\nloop invariant i68: (flag ==> (flag && j <= i - 1));\nloop invariant i69: (not flag ==> (not flag && j <= i - 1));\nloop invariant i70: (flag ==> (flag && i <= j));\nloop invariant i71: (not flag ==> (not flag && i <= j));\nloop invariant i72: (flag ==> (flag ==> j <= i - 1));\nloop invariant i73: (flag ==> (flag ==> i <= j));\nloop invariant i74: (not flag ==> (not flag ==> j <= i - 1));\nloop invariant i75: (not flag ==> (not flag ==> i <= j));\nloop invariant i76: (flag ==> (flag ==> flag && j <= i - 1));\nloop invariant i77: (flag ==> (flag ==> flag && i <= j));\nloop invariant i78: (not flag ==> (not flag ==> not flag && j <= i - 1));\nloop invariant i79: (not flag ==> (not flag ==> not flag && i <= j));\nloop invariant i80: (flag ==> (flag ==> (flag && j <= i - 1)));\nloop invariant i81: (flag ==> (flag ==> (flag && i <= j)));\nloop invariant i82: (not flag ==> (not flag ==> (not flag && j <= i - 1)));\nloop invariant i83: (not flag ==> (not flag ==> (not flag && i <= j)));\nloop invariant i84: (flag ==> (flag ==> (flag ==> j <= i - 1)));\nloop invariant i85: (flag ==> (flag ==> (flag ==> i <= j)));\nloop invariant i86: (not flag ==> (not flag ==> (not flag ==> j <= i - 1)));\nloop invariant i87: (not flag ==> (not flag ==> (not flag ==> i <= j)));\nloop invariant i88: (flag ==> (flag ==> (flag ==> flag && j <= i - 1)));\nloop invariant i89: (flag ==> (flag ==> (flag ==> flag && i <= j)));\nloop invariant i90: (not flag ==> (not flag ==> (not flag ==> not flag && j <= i - 1)));\nloop invariant i91: (not flag ==> (not flag ==> (not flag ==> not flag && i <= j)));\nloop invariant i92: (flag ==> (flag ==> (flag ==> (flag && j <= i - 1))));\nloop invariant i93: (flag ==> (flag ==> (flag ==> (flag && i <= j))));\nloop invariant i94: (not flag ==> (not flag ==> (not flag ==> (not flag && j <= i - 1))));\nloop invariant i95: (not flag ==> (not flag ==> (not flag ==> (not flag && i <= j))));\nloop invariant i96: (flag ==> (flag ==> (flag ==> (flag ==> j <= i - 1))));\nloop invariant i97: 0 <= j <= i + 1;\nloop invariant i98: x == i;\nloop invariant i99: y == j;\nloop invariant i100: i >= 0;\nloop invariant i101: j >= 0;\nloop invariant i102: j > i - 1 ==> flag == 0;\nloop invariant i103: 1 <= x <= y <= 100000;\nloop invariant i104: i >= x * x / 2;\nloop invariant i105: j >= y * y / 2;\nloop invariant i106: 0 <= y <= 100000;\nloop invariant i107: x >= (1 + (y - 1) * y / 2);\nloop invariant i108: (0 <= y <= 100000);\nloop invariant i109: (x >= (1 + (y - 1) * y / 2));\nloop invariant i110: 1 <= i;\nloop invariant i111: 1 <= j;\nloop invariant i112: j <= i;\nloop invariant i113: j <= i - 1 ==> i <= 2;\nloop invariant i114: j <= i - 1 ==> j <= 1;\nloop invariant i115: y = j - x;\nloop invariant i116: y = i - x;\nloop invariant i117: j = x + y;\nloop invariant i118: j = i - x;\nloop invariant i119: j = y + x;\nloop invariant i120: 0 <= i <= j; loop invariant 0 <= j <= i; loop invariant flag ==> (i - j == 1);\nloop invariant i121: 0 <= x <= i;\nloop invariant i122: 0 <= y <= j;\nloop invariant i123: 0 <= j <= i - 1;\nloop invariant i124: i == x;\nloop invariant i125: j == y;\nloop invariant i126: 0 <= i <= 1;\nloop invariant i127: 0 <= y <= 1;\nloop invariant i128: 0 <= x <= 1;\nloop invariant i129: j <= i * i / 2;\nloop invariant i130: x * i >= j;\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
        "combined_annotation_num_solver_calls": 57,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= i <= j;\n\nloop invariant i3: 0 <= x <= INT_MAX;\nloop invariant i4: 0 <= y <= INT_MAX;\nloop invariant i5: 0 <= i <= INT_MAX;\nloop invariant i6: 0 <= j <= INT_MAX;\nloop invariant i7: i == x * (x + 1) / 2;\nloop invariant i8: j == y * (y + 1) / 2;\nloop invariant i9: j <= i - 1 ==> flag == 1;\nloop invariant i10: j <= i - 1 ==> flag == 0 ==> i <= j + 1;\nloop invariant i11: j <= i - 1 ==> flag == 0 ==> j == i - 1;\nloop invariant i12: j <= i - 1 ==> flag == 0 ==> i == j + 1;\nloop invariant i13: j <= i - 1 ==> flag == 1 ==> i <= j + 1;\nloop invariant i14: j <= i - 1 ==> flag == 1 ==> j == i - 2;\nloop invariant i15: j <= i - 1 ==> flag == 1 ==> i == j + 2;\nloop invariant i16: j <= i - 1 ==> i == j + 2 ==> flag == 1;\nloop invariant i17: j <= i - 1 ==> i == j + 1 ==> flag == 0;\nloop invariant i18: j <= i - 1 ==> i == j + 1 ==> flag == 1 ==> j == i - 2;\nloop invariant i19: j <= i - 1 ==> i == j + 2 ==> flag == 1 ==> j == i - 3;\nloop invariant i20: j <= i - 1 ==> i == j + 2 ==> flag == 0 ==> j == i - 1;\nloop invariant i21: j <= i - 1 ==> i == j + 1 ==> flag == 0 ==> j == i - 1;\n\n\n\n\n\nloop invariant i27: 0 <= x;\n\n\nloop invariant i30: i >= j;\nloop invariant i31: x <= y;\n\n\n\nloop invariant i35: i <= j + 1;\nloop invariant i36: y >= x;\nloop invariant i37: i >= x;\nloop invariant i38: j >= x;\nloop invariant i39: i >= y;\nloop invariant i40: j >= y;\n\n\nloop invariant i43: y <= j + 1;\nloop invariant i44: x <= j + 1;\nloop invariant i45: 0 <= y;\nloop invariant i46: x <= i;\nloop invariant i47: y <= j;\nloop invariant i48: ((flag && j <= i - 1) ==> j <= i - 1);\nloop invariant i49: ((flag && j <= i - 1) ==> i <= j);\nloop invariant i50: (flag && j <= i - 1 ==> j <= i - 1);\nloop invariant i51: (flag && j <= i - 1 ==> i <= j);\n\n\n\n\nloop invariant i56: ((flag && i <= j) ==> i <= j);\n\nloop invariant i58: (flag && i <= j ==> i <= j);\n\nloop invariant i60: ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> j <= i - 1));\nloop invariant i61: ((flag && j <= i - 1) ==> ((flag && j <= i - 1) ==> i <= j));\nloop invariant i62: (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> j <= i - 1));\nloop invariant i63: (flag && j <= i - 1 ==> (flag && j <= i - 1 ==> i <= j));\n\n\n\n\n\n\nloop invariant i70: (flag ==> (flag && i <= j));\n\n\nloop invariant i73: (flag ==> (flag ==> i <= j));\n\n\n\nloop invariant i77: (flag ==> (flag ==> flag && i <= j));\n\n\n\nloop invariant i81: (flag ==> (flag ==> (flag && i <= j)));\n\n\n\nloop invariant i85: (flag ==> (flag ==> (flag ==> i <= j)));\n\n\n\nloop invariant i89: (flag ==> (flag ==> (flag ==> flag && i <= j)));\n\n\n\nloop invariant i93: (flag ==> (flag ==> (flag ==> (flag && i <= j))));\n\n\n\nloop invariant i97: 0 <= j <= i + 1;\n\n\nloop invariant i100: i >= 0;\nloop invariant i101: j >= 0;\n\n\nloop invariant i104: i >= x * x / 2;\nloop invariant i105: j >= y * y / 2;\nloop invariant i106: 0 <= y <= 100000;\n\nloop invariant i108: (0 <= y <= 100000);\n\n\n\nloop invariant i112: j <= i;\nloop invariant i113: j <= i - 1 ==> i <= 2;\nloop invariant i114: j <= i - 1 ==> j <= 1;\n\n\n\n\n\nloop invariant i120: 0 <= i <= j; loop invariant 0 <= j <= i; loop invariant flag ==> (i - j == 1);\nloop invariant i121: 0 <= x <= i;\nloop invariant i122: 0 <= y <= j;\n\n\n\n\n\n\n\nloop invariant i130: x * i >= j;\n*/\nwhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n\t}\n\t\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c"
        ],
        "skipped": [],
        "total": 127,
        "success_count": 103,
        "failure_count": 24,
        "success_rate": 0.8110236220472441
    }
}