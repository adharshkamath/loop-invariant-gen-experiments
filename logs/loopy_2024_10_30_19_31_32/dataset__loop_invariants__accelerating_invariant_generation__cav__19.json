{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  while(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x <= n-1;\nloop invariant y == m;\nloop invariant x >= m;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x > m ==> y >= n;\nloop invariant x <= m ==> y <= m;\nloop invariant x > m ==> y >= m+1;\nloop invariant x <= m ==> y <= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant m <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant y >= m; loop invariant y <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= m;\nloop invariant 0 <= x <= n;\nloop invariant y <= x;\nloop invariant x <= n;\nloop invariant x <= m + 1;\nloop invariant y <= m;\nloop invariant y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant (x >= m + 1) ==> (y >= m); loop invariant (x > m) ==> (y >= m);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x >= y;\nloop invariant x <= n-1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant (if x >= m + 1 then y = x - 1 else y = m);\nloop invariant (if x > m then (x <= n and y >= n) else (x <= n and y = m));\nloop invariant (if x = n then (y = n or y >= n + 1) else (x < n and y < n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x >= m + 1 ==> y = m + 1;\nloop invariant x > m + 1 ==> y > m + 1;\nloop invariant x <= m + 1 ==> y <= m + 1;\nloop invariant x <= n ==> y <= n;\nloop invariant x >= m + 1 ==> y >= m + 1;\nloop invariant x <= m ==> y <= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < m+1;\nloop invariant 0 <= x <= n;\nloop invariant y <= x;\nloop invariant x <= m+1 ==> y >= m;\nloop invariant x <= n-1 ==> x >= m+1 ==> y >= n;\n*/\n```",
            "```\n/*@\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m + 1 ==> y >= m;\nloop invariant x <= m ==> y <= m;\nloop invariant x == m ==> y == m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant 0 <= y <= n;\nloop invariant x >= m;\nloop invariant y >= m+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x == m ==> y >= m+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= m;\nloop invariant m <= x <= n;\nloop invariant n+1 >= x >= m+1 ==> x == n;\nloop invariant n+1 >= x >= m+1 ==> y == n+1;\nloop invariant x == m+1 ==> y == m+1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x <= n-1;\nloop invariant y == m;\nloop invariant x >= m;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\n\n\n\nloop invariant i4: x >= 0;\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x > m ==> y >= n;\nloop invariant x <= m ==> y <= m;\nloop invariant x > m ==> y >= m+1;\nloop invariant x <= m ==> y <= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\nloop invariant i4: x <= n;\nloop invariant i5: y >= 0;\n\n\nloop invariant i8: x <= m ==> y <= m;\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant m <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant y >= m; loop invariant y <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n; loop invariant m <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant y >= m; loop invariant y <= x;\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= m;\nloop invariant 0 <= x <= n;\nloop invariant y <= x;\nloop invariant x <= n;\nloop invariant x <= m + 1;\nloop invariant y <= m;\nloop invariant y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\n\nloop invariant i2: 0 <= x <= n;\n\nloop invariant i4: x <= n;\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant (x >= m + 1) ==> (y >= m); loop invariant (x > m) ==> (y >= m);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant (x >= m + 1) ==> (y >= m); loop invariant (x > m) ==> (y >= m);\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x >= y;\nloop invariant x <= n-1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\nloop invariant i4: y >= m;\nloop invariant i5: x <= n;\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant (if x >= m + 1 then y = x - 1 else y = m);\nloop invariant (if x > m then (x <= n and y >= n) else (x <= n and y = m));\nloop invariant (if x = n then (y = n or y >= n + 1) else (x < n and y < n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m;\nloop invariant y >= m;\nloop invariant x >= m + 1 ==> y = m + 1;\nloop invariant x > m + 1 ==> y > m + 1;\nloop invariant x <= m + 1 ==> y <= m + 1;\nloop invariant x <= n ==> y <= n;\nloop invariant x >= m + 1 ==> y >= m + 1;\nloop invariant x <= m ==> y <= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n;\n\nloop invariant i3: x <= n;\n\n\nloop invariant i6: y >= m;\n\nloop invariant i8: x > m + 1 ==> y > m + 1;\nloop invariant i9: x <= m + 1 ==> y <= m + 1;\n\nloop invariant i11: x >= m + 1 ==> y >= m + 1;\nloop invariant i12: x <= m ==> y <= m;\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y < m+1;\nloop invariant 0 <= x <= n;\nloop invariant y <= x;\nloop invariant x <= m+1 ==> y >= m;\nloop invariant x <= n-1 ==> x >= m+1 ==> y >= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\n\nloop invariant i2: 0 <= x <= n;\n\nloop invariant i4: x <= m+1 ==> y >= m;\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= m + 1 ==> y >= m;\nloop invariant x <= m ==> y <= m;\nloop invariant x == m ==> y == m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: x <= n;\n\n\nloop invariant i4: x <= m ==> y <= m;\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant 0 <= y <= n;\nloop invariant x >= m;\nloop invariant y >= m+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\n\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y >= m;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x == m ==> y >= m+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: y >= m;\nloop invariant i3: x <= n;\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= m;\nloop invariant m <= x <= n;\nloop invariant n+1 >= x >= m+1 ==> x == n;\nloop invariant n+1 >= x >= m+1 ==> y == n+1;\nloop invariant x == m+1 ==> y == m+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 61: unexpected token 'x'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\nloop invariant i1: x <= n-1;\nloop invariant i2: y == m;\nloop invariant i3: x >= m;\nloop invariant i4: x >= 0;\nloop invariant i5: 0 <= x <= n;\nloop invariant i6: 0 <= y <= n;\nloop invariant i7: x <= n;\nloop invariant i8: y >= 0;\nloop invariant i9: y <= n;\nloop invariant i10: x > m ==> y >= n;\nloop invariant i11: x <= m ==> y <= m;\nloop invariant i12: x > m ==> y >= m+1;\nloop invariant i13: 0 <= x <= n; loop invariant m <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant y >= m; loop invariant y <= x;\nloop invariant i14: 0 <= y <= m;\nloop invariant i15: y <= x;\nloop invariant i16: x <= m + 1;\nloop invariant i17: y <= m;\nloop invariant i18: 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant (x >= m + 1) ==> (y >= m); loop invariant (x > m) ==> (y >= m);\nloop invariant i19: m <= y <= n;\nloop invariant i20: x >= y;\nloop invariant i21: y >= m;\nloop invariant i22: (if x >= m + 1 then y = x - 1 else y = m);\nloop invariant i23: (if x > m then (x <= n and y >= n) else (x <= n and y = m));\nloop invariant i24: (if x = n then (y = n or y >= n + 1) else (x < n and y < n));\nloop invariant i25: x >= m + 1 ==> y = m + 1;\nloop invariant i26: x > m + 1 ==> y > m + 1;\nloop invariant i27: x <= m + 1 ==> y <= m + 1;\nloop invariant i28: x <= n ==> y <= n;\nloop invariant i29: x >= m + 1 ==> y >= m + 1;\nloop invariant i30: 0 <= y < m+1;\nloop invariant i31: x <= m+1 ==> y >= m;\nloop invariant i32: x <= n-1 ==> x >= m+1 ==> y >= n;\nloop invariant i33: x >= m + 1 ==> y >= m;\nloop invariant i34: x == m ==> y == m;\nloop invariant i35: 0 <= x <= n-1;\nloop invariant i36: y >= m+1;\nloop invariant i37: x == m ==> y >= m+1;\nloop invariant i38: m <= x <= n;\nloop invariant i39: n+1 >= x >= m+1 ==> x == n;\nloop invariant i40: n+1 >= x >= m+1 ==> y == n+1;\nloop invariant i41: x == m+1 ==> y == m+1;\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
        "combined_annotation_num_solver_calls": 15,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    \nreturn;\n\n  if(m < 0)\n    \nreturn;\n\n  if(m > n-1)\n    \nreturn;\n\n  /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: 0 <= x <= n;\nloop invariant i6: 0 <= y <= n;\nloop invariant i7: x <= n;\nloop invariant i8: y >= 0;\nloop invariant i9: y <= n;\n\nloop invariant i11: x <= m ==> y <= m;\nloop invariant i12: x > m ==> y >= m+1;\nloop invariant i13: 0 <= x <= n; loop invariant m <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant y >= m; loop invariant y <= x;\n\nloop invariant i15: y <= x;\n\n\nloop invariant i18: 0 <= x <= n; loop invariant 0 <= y <= n; loop invariant (x >= m + 1) ==> (y >= m); loop invariant (x > m) ==> (y >= m);\nloop invariant i19: m <= y <= n;\nloop invariant i20: x >= y;\nloop invariant i21: y >= m;\n\n\n\n\nloop invariant i26: x > m + 1 ==> y > m + 1;\nloop invariant i27: x <= m + 1 ==> y <= m + 1;\nloop invariant i28: x <= n ==> y <= n;\nloop invariant i29: x >= m + 1 ==> y >= m + 1;\n\nloop invariant i31: x <= m+1 ==> y >= m;\n\nloop invariant i33: x >= m + 1 ==> y >= m;\nloop invariant i34: x == m ==> y == m;\n\n\n\nloop invariant i38: m <= x <= n;\n\n\nloop invariant i41: x == m+1 ==> y == m+1;\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) \n\nreturn;\n\n    x = x;\n  }\n  if(x < n)\n    \nreturn;\n\n  if(y >= n+1)\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c"
        ],
        "skipped": [],
        "total": 129,
        "success_count": 104,
        "failure_count": 25,
        "success_rate": 0.8062015503875969
    }
}