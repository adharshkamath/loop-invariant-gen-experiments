{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant buf + 1 <= buflim;\nloop invariant in + 1 <= inlen;\nloop invariant buf + 1 <= bufferlen;\nloop invariant in + 1 <= bufferlen;\nloop invariant buflim + 1 <= bufferlen;\nloop invariant 0 <= in;\nloop invariant 0 <= inlen;\nloop invariant 0 <= buflim;\nloop invariant 0 <= buf;\nloop invariant 0 <= bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf;\nloop invariant 1 <= buf;\nloop invariant buf <= buflim;\nloop invariant buf <= in;\nloop invariant in <= inlen;\nloop invariant in < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant in < inlen ==> buf < bufferlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf == buflim ==> in >= inlen;\nloop invariant in >= inlen ==> buf >= buflim;\nloop invariant buf == 0;\nloop invariant in == 0;\nloop invariant buf < bufferlen ==> in < inlen;\nloop invariant in < inlen ==> buf < bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in;\nloop invariant in <= inlen;\nloop invariant 0 <= buf;\nloop invariant buf <= buflim;\nloop invariant buf <= bufferlen;\nloop invariant inlen <= bufferlen;\nloop invariant buflim <= bufferlen - 2;\nloop invariant in <= in + unknown();\nloop invariant buf <= buf + 1;\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf <= buflim;\nloop invariant 0 <= in;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim + 2;\nloop invariant !(buf == buflim) ==> in < inlen;\nloop invariant !(buf == buflim) ==> buf < bufferlen;\nloop invariant !(buf == buflim) ==> in < inlen;\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant buf == buflim ==> buf == bufferlen;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant buf == buflim ==> 0 <= in;\nloop invariant buf == buflim ==> 0 <= buf;\nloop invariant buf == buflim ==> 0 <= inlen;\nloop invariant buf == buflim ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant buf <= buflim;\nloop invariant buf <= bufferlen - 2;\nloop invariant buf <= inlen;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant in + 1 <= inlen;\nloop invariant 0 <= in + 1 <= inlen;\nloop invariant 0 <= in + 2 <= inlen;\nloop invariant 0 <= buf + 1 <= buflim;\nloop invariant 0 <= buf + 2 <= buflim;\nloop invariant unknown() ==> (buf == buflim);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf <= buflim ==> buf < bufferlen;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf >= 0;\nloop invariant in <= inlen ==> in >= 0;\nloop invariant buf <= buflim ==> buf == 0;\nloop invariant in <= inlen ==> in == 0;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf < bufferlen;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf >= 0;\nloop invariant in <= inlen ==> in >= 0;\nloop invariant buf <= buflim ==> buf == 0;\nloop invariant in <= inlen ==> in == 0;\nloop invariant buf <= buflim ==> buf <= buf;\nloop invariant in <= inlen ==> in <= in;\nloop invariant buf <= buflim ==> buf == buf;\nloop invariant in <= inlen ==> in == in;\nloop invariant buf <= buflim ==> buf < in;\nloop invariant in <= inlen ==> in < buf;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf < bufferlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant buf + 1 <= buflim;\nloop invariant buf < bufferlen - 2;\nloop invariant buf + 2 <= bufferlen - 1;\nloop invariant buf + 3 <= bufferlen;\nloop invariant buf + 4 <= bufferlen + 1;\nloop invariant buf + 5 <= bufferlen + 2;\nloop invariant buflim < bufferlen;\nloop invariant in + 1 <= inlen;\nloop invariant in < inlen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= buf && buf <= buflim;\nloop invariant 0 <= in && in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\nloop invariant buf < buflim ==> 0 <= buf < buflim;\nloop invariant buf < buflim ==> buf < buflim;\nloop invariant buf < buflim ==> 0 <= in <= inlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf < buflim ==> 0 <= buf < inlen;\nloop invariant buf < buflim ==> buf < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf < buflim ==> 0 <= buf < buflim;\nloop invariant i4: buf < buflim ==> buf < buflim;\nloop invariant i5: buf < buflim ==> 0 <= in <= inlen;\nloop invariant i6: buf < buflim ==> in < inlen;\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant buf + 1 <= buflim;\nloop invariant in + 1 <= inlen;\nloop invariant buf + 1 <= bufferlen;\nloop invariant in + 1 <= bufferlen;\nloop invariant buflim + 1 <= bufferlen;\nloop invariant 0 <= in;\nloop invariant 0 <= inlen;\nloop invariant 0 <= buflim;\nloop invariant 0 <= buf;\nloop invariant 0 <= bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\nloop invariant i2: in + 1 <= inlen;\n\n\nloop invariant i5: buflim + 1 <= bufferlen;\nloop invariant i6: 0 <= in;\nloop invariant i7: 0 <= inlen;\nloop invariant i8: 0 <= buflim;\nloop invariant i9: 0 <= buf;\nloop invariant i10: 0 <= bufferlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= buf;\nloop invariant 1 <= buf;\nloop invariant buf <= buflim;\nloop invariant buf <= in;\nloop invariant in <= inlen;\nloop invariant in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf;\n\nloop invariant i3: buf <= buflim;\nloop invariant i4: buf <= in;\nloop invariant i5: in <= inlen;\nloop invariant i6: in < inlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= bufferlen;\nloop invariant 0 <= in <= inlen;\nloop invariant in < inlen ==> buf < bufferlen;\nloop invariant buf < buflim ==> in < inlen;\nloop invariant buf == buflim ==> in >= inlen;\nloop invariant in >= inlen ==> buf >= buflim;\nloop invariant buf == 0;\nloop invariant in == 0;\nloop invariant buf < bufferlen ==> in < inlen;\nloop invariant in < inlen ==> buf < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\n\nloop invariant i4: buf < buflim ==> in < inlen;\n\nloop invariant i6: in >= inlen ==> buf >= buflim;\n\n\nloop invariant i9: buf < bufferlen ==> in < inlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= in;\nloop invariant in <= inlen;\nloop invariant 0 <= buf;\nloop invariant buf <= buflim;\nloop invariant buf <= bufferlen;\nloop invariant inlen <= bufferlen;\nloop invariant buflim <= bufferlen - 2;\nloop invariant in <= in + unknown();\nloop invariant buf <= buf + 1;\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\nloop invariant buf <= bufferlen - 2 + unknown();\nloop invariant in <= buflim + unknown();\nloop invariant in <= bufferlen - 2 + unknown();\nloop invariant buf <= buflim + unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= in;\nloop invariant i2: in <= inlen;\nloop invariant i3: 0 <= buf;\nloop invariant i4: buf <= buflim;\nloop invariant i5: buf <= bufferlen;\n\nloop invariant i7: buflim <= bufferlen - 2;\n\nloop invariant i9: buf <= buf + 1;\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf <= buflim;\nloop invariant 0 <= in;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf;\nloop invariant i2: buf <= buflim;\nloop invariant i3: 0 <= in;\nloop invariant i4: in <= inlen;\nloop invariant i5: 0 <= buf <= buflim;\nloop invariant i6: 0 <= in <= inlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf <= buflim + 2;\nloop invariant !(buf == buflim) ==> in < inlen;\nloop invariant !(buf == buflim) ==> buf < bufferlen;\nloop invariant !(buf == buflim) ==> in < inlen;\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant buf == buflim ==> buf == bufferlen;\nloop invariant buf == buflim ==> in == inlen;\nloop invariant buf == buflim ==> 0 <= in;\nloop invariant buf == buflim ==> 0 <= buf;\nloop invariant buf == buflim ==> 0 <= inlen;\nloop invariant buf == buflim ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\nloop invariant !(buf == buflim) ==> 0 <= inlen;\nloop invariant !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant !(buf == buflim) ==> unknown();\nloop invariant buf == buflim ==> unknown();\nloop invariant !(buf == buflim) ==> 0 <= in;\nloop invariant !(buf == buflim) ==> 0 <= buf;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= in <= inlen;\n\nloop invariant i3: !(buf == buflim) ==> in < inlen;\n\nloop invariant i5: !(buf == buflim) ==> 0 <= in;\nloop invariant i6: !(buf == buflim) ==> 0 <= buf;\nloop invariant i7: !(buf == buflim) ==> 0 <= inlen;\nloop invariant i8: !(buf == buflim) ==> 0 <= buflim + 2;\n\n\nloop invariant i11: buf == buflim ==> 0 <= in;\nloop invariant i12: buf == buflim ==> 0 <= buf;\nloop invariant i13: buf == buflim ==> 0 <= inlen;\nloop invariant i14: buf == buflim ==> 0 <= buflim + 2;\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= buf;\nloop invariant buf < bufferlen;\nloop invariant 0 <= in;\nloop invariant in < inlen;\nloop invariant 0 <= buflim;\nloop invariant buflim < inlen;\nloop invariant buf <= buflim;\nloop invariant buf <= bufferlen - 2;\nloop invariant buf <= inlen;\nloop invariant buf >= 0;\nloop invariant in >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\nloop invariant buflim >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf;\n\nloop invariant i3: 0 <= in;\nloop invariant i4: in < inlen;\nloop invariant i5: 0 <= buflim;\nloop invariant i6: buflim < inlen;\nloop invariant i7: buf <= buflim;\n\nloop invariant i9: buf <= inlen;\nloop invariant i10: buf >= 0;\nloop invariant i11: in >= 0;\nloop invariant i12: buflim >= 0;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant in + 1 <= inlen;\nloop invariant 0 <= in + 1 <= inlen;\nloop invariant 0 <= in + 2 <= inlen;\nloop invariant 0 <= buf + 1 <= buflim;\nloop invariant 0 <= buf + 2 <= buflim;\nloop invariant unknown() ==> (buf == buflim);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\nloop invariant unknown() ==> (buf + 1 < buflim);\nloop invariant unknown() ==> (buf + 2 < buflim);\nloop invariant unknown() ==> (buf + 1 < bufferlen);\nloop invariant unknown() ==> (buf + 2 < bufferlen);\nloop invariant unknown() ==> (buf < buflim);\nloop invariant unknown() ==> (buf < bufferlen);\nloop invariant unknown() ==> (in < inlen);\nloop invariant unknown() ==> (in + 1 < inlen);\nloop invariant unknown() ==> (in + 2 < inlen);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: in + 1 <= inlen;\nloop invariant i4: 0 <= in + 1 <= inlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in < inlen;\nloop invariant 0 <= buflim < bufferlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in < inlen;\nloop invariant i3: 0 <= buflim < bufferlen;\nloop invariant i4: buf <= buflim;\nloop invariant i5: in <= inlen;\nloop invariant i6: buf < bufferlen;\nloop invariant i7: in < inlen;\nloop invariant i8: 0 <= buf < bufferlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant buf <= buflim;\nloop invariant in <= inlen;\nloop invariant buf <= buflim ==> buf < bufferlen;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf >= 0;\nloop invariant in <= inlen ==> in >= 0;\nloop invariant buf <= buflim ==> buf == 0;\nloop invariant in <= inlen ==> in == 0;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf < bufferlen;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf >= 0;\nloop invariant in <= inlen ==> in >= 0;\nloop invariant buf <= buflim ==> buf == 0;\nloop invariant in <= inlen ==> in == 0;\nloop invariant buf <= buflim ==> buf <= buf;\nloop invariant in <= inlen ==> in <= in;\nloop invariant buf <= buflim ==> buf == buf;\nloop invariant in <= inlen ==> in == in;\nloop invariant buf <= buflim ==> buf < in;\nloop invariant in <= inlen ==> in < buf;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\nloop invariant in <= inlen ==> in <= inlen;\nloop invariant buf <= buflim ==> buf == buflim;\nloop invariant in <= inlen ==> in == inlen;\nloop invariant buf <= buflim ==> buf < buflim;\nloop invariant in <= inlen ==> in < inlen;\nloop invariant buf <= buflim ==> buf <= buflim;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf <= buflim;\nloop invariant i4: in <= inlen;\n\nloop invariant i6: in <= inlen ==> in < inlen;\nloop invariant i7: buf <= buflim ==> buf <= buflim;\nloop invariant i8: in <= inlen ==> in <= inlen;\nloop invariant i9: buf <= buflim ==> buf >= 0;\nloop invariant i10: in <= inlen ==> in >= 0;\n\n\n\nloop invariant i14: buf <= buflim ==> buf <= buf;\nloop invariant i15: in <= inlen ==> in <= in;\nloop invariant i16: buf <= buflim ==> buf == buf;\nloop invariant i17: in <= inlen ==> in == in;\n\n\n\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\n\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= buf <= buflim;\nloop invariant 0 <= in <= inlen;\nloop invariant 0 <= buf < bufferlen;\nloop invariant buf + 1 <= buflim;\nloop invariant buf < bufferlen - 2;\nloop invariant buf + 2 <= bufferlen - 1;\nloop invariant buf + 3 <= bufferlen;\nloop invariant buf + 4 <= bufferlen + 1;\nloop invariant buf + 5 <= bufferlen + 2;\nloop invariant buflim < bufferlen;\nloop invariant in + 1 <= inlen;\nloop invariant in < inlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= buflim;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: 0 <= buf < bufferlen;\n\n\n\n\n\n\nloop invariant i10: buflim < bufferlen;\nloop invariant i11: in + 1 <= inlen;\nloop invariant i12: in < inlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= buf && buf <= buflim;\nloop invariant 0 <= in && in <= inlen;\nloop invariant buf < bufferlen;\nloop invariant in < inlen;\nloop invariant buflim < bufferlen;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf && buf <= buflim;\nloop invariant i2: 0 <= in && in <= inlen;\nloop invariant i3: buf < bufferlen;\nloop invariant i4: in < inlen;\nloop invariant i5: buflim < bufferlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 219: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf < buflim ==> 0 <= buf < buflim;\nloop invariant i4: buf < buflim ==> buf < buflim;\nloop invariant i5: buf < buflim ==> 0 <= in <= inlen;\nloop invariant i6: buf < buflim ==> in < inlen;\nloop invariant i7: buf < buflim ==> 0 <= buf < inlen;\nloop invariant i8: buf < buflim ==> buf < inlen;\nloop invariant i9: i1;\nloop invariant i10: i2;\nloop invariant i11: i3;\nloop invariant i12: i4;\nloop invariant i13: i5;\nloop invariant i14: i6;\nloop invariant i15: i7;\nloop invariant i16: i8;\nloop invariant i17: i9;\nloop invariant i18: i10;\nloop invariant i19: i11;\nloop invariant i20: i12;\nloop invariant i21: i13;\nloop invariant i22: i14;\nloop invariant i23: i15;\nloop invariant i24: i16;\nloop invariant i25: i17;\nloop invariant i26: i18;\nloop invariant i27: i19;\nloop invariant i28: i20;\nloop invariant i29: i21;\nloop invariant i30: i22;\nloop invariant i31: i23;\nloop invariant i32: i24;\nloop invariant i33: i25;\nloop invariant i34: i26;\nloop invariant i35: i27;\nloop invariant i36: i28;\nloop invariant i37: i29;\nloop invariant i38: i30;\nloop invariant i39: i31;\nloop invariant i40: i32;\nloop invariant i41: i33;\nloop invariant i42: i34;\nloop invariant i43: i35;\nloop invariant i44: i36;\nloop invariant i45: i37;\nloop invariant i46: i38;\nloop invariant i47: i39;\nloop invariant i48: i40;\nloop invariant i49: i41;\nloop invariant i50: i42;\nloop invariant i51: i43;\nloop invariant i52: i44;\nloop invariant i53: i45;\nloop invariant i54: i46;\nloop invariant i55: i47;\nloop invariant i56: i48;\nloop invariant i57: i49;\nloop invariant i58: i50;\nloop invariant i59: i51;\nloop invariant i60: i52;\nloop invariant i61: i53;\nloop invariant i62: i54;\nloop invariant i63: i55;\nloop invariant i64: i56;\nloop invariant i65: i57;\nloop invariant i66: i58;\nloop invariant i67: i59;\nloop invariant i68: i60;\nloop invariant i69: i61;\nloop invariant i70: i62;\nloop invariant i71: i63;\nloop invariant i72: i64;\nloop invariant i73: i65;\nloop invariant i74: i66;\nloop invariant i75: i67;\nloop invariant i76: i68;\nloop invariant i77: i69;\nloop invariant i78: i70;\nloop invariant i79: i71;\nloop invariant i80: i72;\nloop invariant i81: i73;\nloop invariant i82: i74;\nloop invariant i83: i75;\nloop invariant i84: i76;\nloop invariant i85: i77;\nloop invariant i86: i78;\nloop invariant i87: i79;\nloop invariant i88: i80;\nloop invariant i89: i81;\nloop invariant i90: i82;\nloop invariant i91: i83;\nloop invariant i92: i84;\nloop invariant i93: i85;\nloop invariant i94: i86;\nloop invariant i95: i87;\nloop invariant i96: i88;\nloop invariant i97: i89;\nloop invariant i98: i90;\nloop invariant i99: i91;\nloop invariant i100: i92;\nloop invariant i101: i93;\nloop invariant i102: i94;\nloop invariant i103: i95;\nloop invariant i104: i96;\nloop invariant i105: i97;\nloop invariant i106: i98;\nloop invariant i107: i99;\nloop invariant i108: i100;\nloop invariant i109: i101;\nloop invariant i110: i102;\nloop invariant i111: i103;\nloop invariant i112: i104;\nloop invariant i113: i105;\nloop invariant i114: i106;\nloop invariant i115: i107;\nloop invariant i116: i108;\nloop invariant i117: i109;\nloop invariant i118: i110;\nloop invariant i119: i111;\nloop invariant i120: i112;\nloop invariant i121: i113;\nloop invariant i122: i114;\nloop invariant i123: i115;\nloop invariant i124: i116;\nloop invariant i125: i117;\nloop invariant i126: i118;\nloop invariant i127: i119;\nloop invariant i128: i120;\nloop invariant i129: i121;\nloop invariant i130: i122;\nloop invariant i131: i123;\nloop invariant i132: i124;\nloop invariant i133: i125;\nloop invariant i134: i126;\nloop invariant i135: i127;\nloop invariant i136: i128;\nloop invariant i137: i129;\nloop invariant i138: i130;\nloop invariant i139: i131;\nloop invariant i140: i132;\nloop invariant i141: i133;\nloop invariant i142: i134;\nloop invariant i143: i135;\nloop invariant i144: i136;\nloop invariant i145: i137;\nloop invariant i146: i138;\nloop invariant i147: i139;\nloop invariant i148: i140;\nloop invariant i149: i141;\nloop invariant i150: i142;\nloop invariant i151: i143;\nloop invariant i152: i144;\nloop invariant i153: i145;\nloop invariant i154: i146;\nloop invariant i155: i147;\nloop invariant i156: i148;\nloop invariant i157: i149;\nloop invariant i158: i150;\nloop invariant i159: i151;\nloop invariant i160: i152;\nloop invariant i161: i153;\nloop invariant i162: i154;\nloop invariant i163: i155;\nloop invariant i164: i156;\nloop invariant i165: i157;\nloop invariant i166: i158;\nloop invariant i167: buf + 1 <= buflim;\nloop invariant i168: in + 1 <= inlen;\nloop invariant i169: buf + 1 <= bufferlen;\nloop invariant i170: in + 1 <= bufferlen;\nloop invariant i171: buflim + 1 <= bufferlen;\nloop invariant i172: 0 <= in;\nloop invariant i173: 0 <= inlen;\nloop invariant i174: 0 <= buflim;\nloop invariant i175: 0 <= buf;\nloop invariant i176: 0 <= bufferlen;\nloop invariant i177: 1 <= buf;\nloop invariant i178: buf <= buflim;\nloop invariant i179: buf <= in;\nloop invariant i180: in <= inlen;\nloop invariant i181: in < inlen;\nloop invariant i182: in < inlen ==> buf < bufferlen;\nloop invariant i183: buf == buflim ==> in >= inlen;\nloop invariant i184: in >= inlen ==> buf >= buflim;\nloop invariant i185: buf == 0;\nloop invariant i186: in == 0;\nloop invariant i187: buf < bufferlen ==> in < inlen;\nloop invariant i188: buf <= bufferlen;\nloop invariant i189: inlen <= bufferlen;\nloop invariant i190: buflim <= bufferlen - 2;\nloop invariant i191: in <= in + unknown();\nloop invariant i192: buf <= buf + 1;\nloop invariant i193: buf <= buflim + unknown();\nloop invariant i194: buf <= bufferlen + unknown();\nloop invariant i195: in <= buflim + unknown();\nloop invariant i196: in <= bufferlen + unknown();\nloop invariant i197: buf <= bufferlen - 2 + unknown();\nloop invariant i198: in <= bufferlen - 2 + unknown();\nloop invariant i199: 0 <= buf <= buflim;\nloop invariant i200: 0 <= buf <= buflim + 2;\nloop invariant i201: !(buf == buflim) ==> in < inlen;\nloop invariant i202: !(buf == buflim) ==> buf < bufferlen;\nloop invariant i203: !(buf == buflim) ==> 0 <= in;\nloop invariant i204: !(buf == buflim) ==> 0 <= buf;\nloop invariant i205: !(buf == buflim) ==> 0 <= inlen;\nloop invariant i206: !(buf == buflim) ==> 0 <= buflim + 2;\nloop invariant i207: buf == buflim ==> in == inlen;\nloop invariant i208: buf == buflim ==> buf == bufferlen;\nloop invariant i209: buf == buflim ==> 0 <= in;\nloop invariant i210: buf == buflim ==> 0 <= buf;\nloop invariant i211: buf == buflim ==> 0 <= inlen;\nloop invariant i212: buf == buflim ==> 0 <= buflim + 2;\nloop invariant i213: !(buf == buflim) ==> unknown();\nloop invariant i214: buf == buflim ==> unknown();\nloop invariant i215: buf < bufferlen;\nloop invariant i216: buflim < inlen;\nloop invariant i217: buf <= bufferlen - 2;\nloop invariant i218: buf <= inlen;\nloop invariant i219: buf >= 0;\nloop invariant i220: in >= 0;\nloop invariant i221: buflim >= 0;\nloop invariant i222: 0 <= in + 1 <= inlen;\nloop invariant i223: 0 <= in + 2 <= inlen;\nloop invariant i224: 0 <= buf + 1 <= buflim;\nloop invariant i225: 0 <= buf + 2 <= buflim;\nloop invariant i226: unknown() ==> (buf == buflim);\nloop invariant i227: unknown() ==> (buf < buflim);\nloop invariant i228: unknown() ==> (buf < bufferlen);\nloop invariant i229: unknown() ==> (in < inlen);\nloop invariant i230: unknown() ==> (in + 1 < inlen);\nloop invariant i231: unknown() ==> (in + 2 < inlen);\nloop invariant i232: unknown() ==> (buf + 1 < buflim);\nloop invariant i233: unknown() ==> (buf + 2 < buflim);\nloop invariant i234: unknown() ==> (buf + 1 < bufferlen);\nloop invariant i235: unknown() ==> (buf + 2 < bufferlen);\nloop invariant i236: 0 <= in < inlen;\nloop invariant i237: 0 <= buflim < bufferlen;\nloop invariant i238: 0 <= buf < bufferlen;\nloop invariant i239: buf <= buflim ==> buf < bufferlen;\nloop invariant i240: in <= inlen ==> in < inlen;\nloop invariant i241: buf <= buflim ==> buf <= buflim;\nloop invariant i242: in <= inlen ==> in <= inlen;\nloop invariant i243: buf <= buflim ==> buf >= 0;\nloop invariant i244: in <= inlen ==> in >= 0;\nloop invariant i245: buf <= buflim ==> buf == 0;\nloop invariant i246: in <= inlen ==> in == 0;\nloop invariant i247: buf <= buflim ==> buf < buflim;\nloop invariant i248: buf <= buflim ==> buf <= buf;\nloop invariant i249: in <= inlen ==> in <= in;\nloop invariant i250: buf <= buflim ==> buf == buf;\nloop invariant i251: in <= inlen ==> in == in;\nloop invariant i252: buf <= buflim ==> buf < in;\nloop invariant i253: in <= inlen ==> in < buf;\nloop invariant i254: buf <= buflim ==> buf == buflim;\nloop invariant i255: in <= inlen ==> in == inlen;\nloop invariant i256: buf < bufferlen - 2;\nloop invariant i257: buf + 2 <= bufferlen - 1;\nloop invariant i258: buf + 3 <= bufferlen;\nloop invariant i259: buf + 4 <= bufferlen + 1;\nloop invariant i260: buf + 5 <= bufferlen + 2;\nloop invariant i261: buflim < bufferlen;\nloop invariant i262: 0 <= buf && buf <= buflim;\nloop invariant i263: 0 <= in && in <= inlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 190,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  /*@\nloop invariant i1: 0 <= buf <= bufferlen;\nloop invariant i2: 0 <= in <= inlen;\nloop invariant i3: buf < buflim ==> 0 <= buf < buflim;\nloop invariant i4: buf < buflim ==> buf < buflim;\nloop invariant i5: buf < buflim ==> 0 <= in <= inlen;\nloop invariant i6: buf < buflim ==> in < inlen;\nloop invariant i7: buf < buflim ==> 0 <= buf < inlen;\nloop invariant i8: buf < buflim ==> buf < inlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i168: in + 1 <= inlen;\nloop invariant i169: buf + 1 <= bufferlen;\n\nloop invariant i171: buflim + 1 <= bufferlen;\nloop invariant i172: 0 <= in;\nloop invariant i173: 0 <= inlen;\nloop invariant i174: 0 <= buflim;\nloop invariant i175: 0 <= buf;\nloop invariant i176: 0 <= bufferlen;\n\nloop invariant i178: buf <= buflim;\nloop invariant i179: buf <= in;\nloop invariant i180: in <= inlen;\nloop invariant i181: in < inlen;\nloop invariant i182: in < inlen ==> buf < bufferlen;\n\nloop invariant i184: in >= inlen ==> buf >= buflim;\n\n\nloop invariant i187: buf < bufferlen ==> in < inlen;\nloop invariant i188: buf <= bufferlen;\n\nloop invariant i190: buflim <= bufferlen - 2;\n\nloop invariant i192: buf <= buf + 1;\n\n\n\n\n\n\nloop invariant i199: 0 <= buf <= buflim;\nloop invariant i200: 0 <= buf <= buflim + 2;\nloop invariant i201: !(buf == buflim) ==> in < inlen;\nloop invariant i202: !(buf == buflim) ==> buf < bufferlen;\nloop invariant i203: !(buf == buflim) ==> 0 <= in;\nloop invariant i204: !(buf == buflim) ==> 0 <= buf;\nloop invariant i205: !(buf == buflim) ==> 0 <= inlen;\nloop invariant i206: !(buf == buflim) ==> 0 <= buflim + 2;\n\n\nloop invariant i209: buf == buflim ==> 0 <= in;\nloop invariant i210: buf == buflim ==> 0 <= buf;\nloop invariant i211: buf == buflim ==> 0 <= inlen;\nloop invariant i212: buf == buflim ==> 0 <= buflim + 2;\n\n\nloop invariant i215: buf < bufferlen;\nloop invariant i216: buflim < inlen;\nloop invariant i217: buf <= bufferlen - 2;\nloop invariant i218: buf <= inlen;\nloop invariant i219: buf >= 0;\nloop invariant i220: in >= 0;\nloop invariant i221: buflim >= 0;\nloop invariant i222: 0 <= in + 1 <= inlen;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i236: 0 <= in < inlen;\nloop invariant i237: 0 <= buflim < bufferlen;\nloop invariant i238: 0 <= buf < bufferlen;\nloop invariant i239: buf <= buflim ==> buf < bufferlen;\nloop invariant i240: in <= inlen ==> in < inlen;\nloop invariant i241: buf <= buflim ==> buf <= buflim;\nloop invariant i242: in <= inlen ==> in <= inlen;\nloop invariant i243: buf <= buflim ==> buf >= 0;\nloop invariant i244: in <= inlen ==> in >= 0;\n\n\n\nloop invariant i248: buf <= buflim ==> buf <= buf;\nloop invariant i249: in <= inlen ==> in <= in;\nloop invariant i250: buf <= buflim ==> buf == buf;\nloop invariant i251: in <= inlen ==> in == in;\n\n\n\n\n\n\n\n\n\nloop invariant i261: buflim < bufferlen;\nloop invariant i262: 0 <= buf && buf <= buflim;\nloop invariant i263: 0 <= in && in <= inlen;\n*/\nwhile (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n\n    {;\n//@ assert(in<inlen);\n}\n\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n\n    {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 33,
        "success_count": 28,
        "failure_count": 5,
        "success_rate": 0.8484848484848485
    }
}