{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= old <= INT_MAX;\nloop invariant 0 <= new <= INT_MAX;\nloop invariant lock == 1 || lock == 0;\nloop invariant old <= new;\nloop invariant (lock == 0 ==> new == old + 1);\nloop invariant (lock == 1 ==> new == old);\nloop invariant (lock == 0 ==> old == new - 1);\nloop invariant (lock == 1 ==> old == new);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant old == (new - 1);\nloop invariant lock == 0;\nloop invariant old <= new;\nloop invariant old == new || lock == 1;\nloop invariant old == new || lock == 0;\nloop invariant old == new || unknown() == 0;\nloop invariant old == new || unknown() == 1;\nloop invariant old == new || unknown() != 0;\nloop invariant old == new || unknown() != 1;\nloop invariant old == new || old == new;\nloop invariant old == new || old != new;\nloop invariant old == new || lock == 0 || lock == 1;\nloop invariant old == new || lock == 0 || lock == 1 || unknown() == 0;\nloop invariant old == new || lock == 0 || lock == 1 || unknown() == 1;\nloop invariant old == new || lock == 0 || lock == 1 || unknown() != 0;\nloop invariant old == new || lock == 0 || lock == 1 || unknown() != 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new;\nloop invariant old == new || lock == 0 || lock == 1 || old != new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || unknown() == 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || unknown() == 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || unknown() != 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || unknown() != 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || old != new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() == 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() == 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() != 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() != 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old != new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() == 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() == 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() != 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() != 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old != new;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= new;\nloop invariant new <= new+1;\nloop invariant lock == 1;\nloop invariant old == new;\n*/\n```",
            "```\n/*@\nloop invariant lock = 1 ==> old = new;\nloop invariant lock = 0 ==> new = old + 1;\nloop invariant old >= 0;\nloop invariant new >= 0;\nloop invariant new >= old;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant old <= 2147483647;\nloop invariant new <= 2147483647;\nloop invariant old >= new - 1;\nloop invariant new >= old + 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant lock == 0 ==> old == new + 1;\nloop invariant old <= new;\nloop invariant new <= old;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> old >= new;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 1 ==> old <= new - 1;\nloop invariant lock == 0 ==> old >= new + 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant lock == 0 ==> old == new + 1;\nloop invariant old <= new + 1;\nloop invariant new <= old + 1;\nloop invariant lock == 1 ==> old <= new + 1;\nloop invariant lock == 0 ==> old >= new - 1;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 0 ==> new >= old - 1;\nloop invariant old <= new + 1;\nloop invariant new <= old + 1;\nloop invariant lock == 1 ==> old <= new + 1;\nloop invariant lock == 0 ==> old >= new - 1;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 0 ==> new >= old - 1;\nloop invariant old <= new + 2;\nloop invariant new <= old + 2;\nloop invariant lock == 1 ==> old <= new + 2;\nloop invariant lock == 0 ==> old >= new - 2;\nloop invariant lock == 1 ==> new <= old + 2;\nloop invariant lock == 0 ==> new >= old - 2;\nloop invariant old <= new + 3;\nloop invariant new <= old + 3;\nloop invariant lock == 1 ==> old <= new + 3;\nloop invariant lock == 0 ==> old >= new - 3;\nloop invariant lock == 1 ==> new <= old + 3;\nloop invariant lock == 0 ==> new >= old - 3;\nloop invariant old <= new + 4;\nloop invariant new <= old + 4;\nloop invariant lock == 1 ==> old <= new + 4;\nloop invariant lock == 0 ==> old >= new - 4;\nloop invariant lock == 1 ==> new <= old + 4;\nloop invariant lock == 0 ==> new >= old - 4;\nloop invariant old <= new + 5;\nloop invariant new <= old + 5;\nloop invariant lock == 1 ==> old <= new + 5;\nloop invariant lock == 0 ==> old >= new - 5;\nloop invariant lock == 1 ==> new <= old + 5;\nloop invariant lock == 0 ==> new >= old - 5;\nloop invariant old <= new + 6;\nloop invariant new <= old + 6;\nloop invariant lock == 1 ==> old <= new + 6;\nloop invariant lock == 0 ==> old >= new - 6;\nloop invariant lock == 1 ==> new <= old + 6;\nloop invariant lock == 0 ==> new >= old - 6;\nloop invariant old <= new + 7;\nloop invariant new <= old + 7;\nloop invariant lock == 1 ==> old <= new + 7;\nloop invariant lock == 0 ==> old >= new - 7;\nloop invariant lock == 1 ==> new <= old + 7;\nloop invariant lock == 0 ==> new >= old - 7;\nloop invariant old <= new + 8;\nloop invariant new <= old + 8;\nloop invariant lock == 1 ==> old <= new + 8;\nloop invariant lock == 0 ==> old >= new - 8;\nloop invariant lock == 1 ==> new <= old + 8;\nloop invariant lock == 0 ==> new >= old - 8;\nloop invariant old <= new + 9;\nloop invariant new <= old + 9;\nloop invariant lock == 1 ==> old <= new + 9;\nloop invariant lock == 0 ==> old >= new - 9;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> old == new;\nloop invariant old >= 0;\nloop invariant new >= old;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old + unknown();\nloop invariant old >= 0 ==> old <= new;\nloop invariant old >= 0 ==> old == new - 1;\nloop invariant old >= 0 ==> lock == 0 || lock == 1;\nloop invariant lock == 1 ==> old >= 0;\nloop invariant lock == 0 ==> old >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old;\nloop invariant old <= new;\nloop invariant lock == 1 ==> old == unknown_uint();\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> old >= unknown();\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 0 ==> new <= new + 1;\nloop invariant lock == 1 ==> old >= new - 1;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == unknown_uint();\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant new >= old;\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= new <= 4294967295;\nloop invariant 0 <= old <= 4294967295;\nloop invariant lock == 1 ==> old >= new;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> old < new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\nloop invariant lock == 1 ==> old < new + 1;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> old < new;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\nloop invariant lock == 1 ==> old < new + 1;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\nloop invariant lock == 1 ==> old < new + 1;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\nloop invariant lock == 1 ==> old < new + 1;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 || lock == 0;loop invariant lock >= 0;loop invariant lock <= 1;loop invariant old >= 0;loop invariant new >= 0;loop invariant new >= old;loop invariant new - old == 1;loop invariant lock ==> old == new;loop invariant lock ==> lock == 1;loop invariant lock ==> lock == 0;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 1 ==> old == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 1 ==> old == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant old == old + 1 ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new ==> lock == 1;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 1 ==> old == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant old == old + 1 ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new ==> lock == 1;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 1 ==> old == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant old == old + 1 ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new ==> lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old;\nloop invariant old <= new;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant new >= old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> old != new;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant lock == 1 ==> old < new;\nloop invariant lock == 0 ==> old == new;\nloop invariant new != old ==> lock == 1;\nloop invariant new != old ==> lock == 0;\nloop invariant new < old + 1 ==> lock == 1;\nloop invariant new < old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 0 ==> new <= old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 0 ==> new < old + 1;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= new <= 100000;\nloop invariant lock == 0;\nloop invariant lock ==> old == new;\nloop invariant old == new ==> lock == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new == old;\nloop invariant old != new ==> lock == 1;\nloop invariant old == new ==> lock == 0;\nloop invariant old == new || new == old;\nloop invariant old != new || lock == 1;\nloop invariant old != new || new == old || lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= old <= 4294967295;\nloop invariant lock == 0;\nloop invariant 1 <= new <= 4294967295;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn();\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn();\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= INT_MAX;\nloop invariant 0 <= new <= INT_MAX;\nloop invariant lock == 1 || lock == 0;\nloop invariant old <= new;\nloop invariant (lock == 0 ==> new == old + 1);\nloop invariant (lock == 1 ==> new == old);\nloop invariant (lock == 0 ==> old == new - 1);\nloop invariant (lock == 1 ==> old == new);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 1 || lock == 0;\nloop invariant i4: old <= new;\nloop invariant i5: (lock == 0 ==> new == old + 1);\nloop invariant i6: (lock == 1 ==> new == old);\nloop invariant i7: (lock == 0 ==> old == new - 1);\nloop invariant i8: (lock == 1 ==> old == new);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 25,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant old == (new - 1);\nloop invariant lock == 0;\nloop invariant old <= new;\nloop invariant old == new || lock == 1;\nloop invariant old == new || lock == 0;\nloop invariant old == new || unknown() == 0;\nloop invariant old == new || unknown() == 1;\nloop invariant old == new || unknown() != 0;\nloop invariant old == new || unknown() != 1;\nloop invariant old == new || old == new;\nloop invariant old == new || old != new;\nloop invariant old == new || lock == 0 || lock == 1;\nloop invariant old == new || lock == 0 || lock == 1 || unknown() == 0;\nloop invariant old == new || lock == 0 || lock == 1 || unknown() == 1;\nloop invariant old == new || lock == 0 || lock == 1 || unknown() != 0;\nloop invariant old == new || lock == 0 || lock == 1 || unknown() != 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new;\nloop invariant old == new || lock == 0 || lock == 1 || old != new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || unknown() == 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || unknown() == 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || unknown() != 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || unknown() != 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || old != new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() == 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() == 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() != 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() != 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old != new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() == 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() == 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() != 0;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() != 1;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old != new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\nloop invariant i4: old <= new;\n\nloop invariant i6: old == new || lock == 0;\n\n\n\n\n\nloop invariant i12: old == new || old != new;\nloop invariant i13: old == new || lock == 0 || lock == 1;\n\n\n\n\nloop invariant i18: old == new || lock == 0 || lock == 1 || old == new;\nloop invariant i19: old == new || lock == 0 || lock == 1 || old != new;\n\n\n\n\nloop invariant i24: old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant i25: old == new || lock == 0 || lock == 1 || old == new || old != new;\nloop invariant i26: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1;\n\n\n\n\nloop invariant i31: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new;\nloop invariant i32: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old != new;\n\n\n\n\nloop invariant i37: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant i38: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old != new;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= new;\nloop invariant new <= new+1;\nloop invariant lock == 1;\nloop invariant old == new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: new <= new+1;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant lock = 1 ==> old = new;\nloop invariant lock = 0 ==> new = old + 1;\nloop invariant old >= 0;\nloop invariant new >= 0;\nloop invariant new >= old;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant old <= 2147483647;\nloop invariant new <= 2147483647;\nloop invariant old >= new - 1;\nloop invariant new >= old + 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant lock == 0 ==> old == new + 1;\nloop invariant old <= new;\nloop invariant new <= old;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 0 ==> old >= new;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new >= old;\nloop invariant lock == 1 ==> old <= new - 1;\nloop invariant lock == 0 ==> old >= new + 1;\nloop invariant lock == 1 ==> old == new - 1;\nloop invariant lock == 0 ==> old == new + 1;\nloop invariant old <= new + 1;\nloop invariant new <= old + 1;\nloop invariant lock == 1 ==> old <= new + 1;\nloop invariant lock == 0 ==> old >= new - 1;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 0 ==> new >= old - 1;\nloop invariant old <= new + 1;\nloop invariant new <= old + 1;\nloop invariant lock == 1 ==> old <= new + 1;\nloop invariant lock == 0 ==> old >= new - 1;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 0 ==> new >= old - 1;\nloop invariant old <= new + 2;\nloop invariant new <= old + 2;\nloop invariant lock == 1 ==> old <= new + 2;\nloop invariant lock == 0 ==> old >= new - 2;\nloop invariant lock == 1 ==> new <= old + 2;\nloop invariant lock == 0 ==> new >= old - 2;\nloop invariant old <= new + 3;\nloop invariant new <= old + 3;\nloop invariant lock == 1 ==> old <= new + 3;\nloop invariant lock == 0 ==> old >= new - 3;\nloop invariant lock == 1 ==> new <= old + 3;\nloop invariant lock == 0 ==> new >= old - 3;\nloop invariant old <= new + 4;\nloop invariant new <= old + 4;\nloop invariant lock == 1 ==> old <= new + 4;\nloop invariant lock == 0 ==> old >= new - 4;\nloop invariant lock == 1 ==> new <= old + 4;\nloop invariant lock == 0 ==> new >= old - 4;\nloop invariant old <= new + 5;\nloop invariant new <= old + 5;\nloop invariant lock == 1 ==> old <= new + 5;\nloop invariant lock == 0 ==> old >= new - 5;\nloop invariant lock == 1 ==> new <= old + 5;\nloop invariant lock == 0 ==> new >= old - 5;\nloop invariant old <= new + 6;\nloop invariant new <= old + 6;\nloop invariant lock == 1 ==> old <= new + 6;\nloop invariant lock == 0 ==> old >= new - 6;\nloop invariant lock == 1 ==> new <= old + 6;\nloop invariant lock == 0 ==> new >= old - 6;\nloop invariant old <= new + 7;\nloop invariant new <= old + 7;\nloop invariant lock == 1 ==> old <= new + 7;\nloop invariant lock == 0 ==> old >= new - 7;\nloop invariant lock == 1 ==> new <= old + 7;\nloop invariant lock == 0 ==> new >= old - 7;\nloop invariant old <= new + 8;\nloop invariant new <= old + 8;\nloop invariant lock == 1 ==> old <= new + 8;\nloop invariant lock == 0 ==> old >= new - 8;\nloop invariant lock == 1 ==> new <= old + 8;\nloop invariant lock == 0 ==> new >= old - 8;\nloop invariant old <= new + 9;\nloop invariant new <= old + 9;\nloop invariant lock == 1 ==> old <= new + 9;\nloop invariant lock == 0 ==> old >= new - 9;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\n\nloop invariant i5: new >= old;\n\n\nloop invariant i8: lock == 1 ==> old == new;\nloop invariant i9: lock == 0 ==> old == new - 1;\nloop invariant i10: old <= 2147483647;\nloop invariant i11: new <= 2147483647;\nloop invariant i12: old >= new - 1;\n\n\n\nloop invariant i16: old <= new;\n\nloop invariant i18: lock == 1 ==> old <= new;\n\nloop invariant i20: lock == 1 ==> new <= old;\nloop invariant i21: lock == 0 ==> new >= old;\n\n\nloop invariant i24: old <= new + 1;\nloop invariant i25: new <= old + 1;\nloop invariant i26: lock == 1 ==> old <= new + 1;\nloop invariant i27: lock == 0 ==> old >= new - 1;\nloop invariant i28: lock == 1 ==> new <= old + 1;\nloop invariant i29: lock == 0 ==> new >= old - 1;\nloop invariant i30: old <= new + 2;\nloop invariant i31: new <= old + 2;\nloop invariant i32: lock == 1 ==> old <= new + 2;\nloop invariant i33: lock == 0 ==> old >= new - 2;\nloop invariant i34: lock == 1 ==> new <= old + 2;\nloop invariant i35: lock == 0 ==> new >= old - 2;\nloop invariant i36: old <= new + 3;\nloop invariant i37: new <= old + 3;\nloop invariant i38: lock == 1 ==> old <= new + 3;\nloop invariant i39: lock == 0 ==> old >= new - 3;\nloop invariant i40: lock == 1 ==> new <= old + 3;\nloop invariant i41: lock == 0 ==> new >= old - 3;\nloop invariant i42: old <= new + 4;\nloop invariant i43: new <= old + 4;\nloop invariant i44: lock == 1 ==> old <= new + 4;\nloop invariant i45: lock == 0 ==> old >= new - 4;\nloop invariant i46: lock == 1 ==> new <= old + 4;\nloop invariant i47: lock == 0 ==> new >= old - 4;\nloop invariant i48: old <= new + 5;\nloop invariant i49: new <= old + 5;\nloop invariant i50: lock == 1 ==> old <= new + 5;\nloop invariant i51: lock == 0 ==> old >= new - 5;\nloop invariant i52: lock == 1 ==> new <= old + 5;\nloop invariant i53: lock == 0 ==> new >= old - 5;\nloop invariant i54: old <= new + 6;\nloop invariant i55: new <= old + 6;\nloop invariant i56: lock == 1 ==> old <= new + 6;\nloop invariant i57: lock == 0 ==> old >= new - 6;\nloop invariant i58: lock == 1 ==> new <= old + 6;\nloop invariant i59: lock == 0 ==> new >= old - 6;\nloop invariant i60: old <= new + 7;\nloop invariant i61: new <= old + 7;\nloop invariant i62: lock == 1 ==> old <= new + 7;\nloop invariant i63: lock == 0 ==> old >= new - 7;\nloop invariant i64: lock == 1 ==> new <= old + 7;\nloop invariant i65: lock == 0 ==> new >= old - 7;\nloop invariant i66: old <= new + 8;\nloop invariant i67: new <= old + 8;\nloop invariant i68: lock == 1 ==> old <= new + 8;\nloop invariant i69: lock == 0 ==> old >= new - 8;\nloop invariant i70: lock == 1 ==> new <= old + 8;\nloop invariant i71: lock == 0 ==> new >= old - 8;\nloop invariant i72: old <= new + 9;\nloop invariant i73: new <= old + 9;\nloop invariant i74: lock == 1 ==> old <= new + 9;\nloop invariant i75: lock == 0 ==> old >= new - 9;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> old == new;\nloop invariant old >= 0;\nloop invariant new >= old;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> lock == 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new == old + unknown();\nloop invariant old >= 0 ==> old <= new;\nloop invariant old >= 0 ==> old == new - 1;\nloop invariant old >= 0 ==> lock == 0 || lock == 1;\nloop invariant lock == 1 ==> old >= 0;\nloop invariant lock == 0 ==> old >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 1 ==> old == new;\n\nloop invariant i3: new >= old;\nloop invariant i4: lock == 0 ==> lock == 0;\nloop invariant i5: lock == 1 ==> lock == 1;\n\n\nloop invariant i8: old >= 0 ==> old <= new;\n\nloop invariant i10: old >= 0 ==> lock == 0 || lock == 1;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= old;\nloop invariant old <= new;\nloop invariant lock == 1 ==> old == unknown_uint();\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> old >= unknown();\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 0 ==> new <= new + 1;\nloop invariant lock == 1 ==> old >= new - 1;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == unknown_uint();\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> new <= old + 1;\nloop invariant lock == 0 ==> old == new - 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 0 ==> old == new;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: old <= new;\n\nloop invariant i4: lock == 0 ==> new == old + 1;\n\n\nloop invariant i7: lock == 0 ==> new <= new + 1;\nloop invariant i8: lock == 1 ==> old >= new - 1;\nloop invariant i9: lock == 1 ==> old <= new;\n\n\nloop invariant i12: lock == 0 ==> new <= old + 1;\nloop invariant i13: lock == 0 ==> old == new - 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= new <= UINT_MAX;\nloop invariant 0 <= old <= UINT_MAX;\nloop invariant new >= old;\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\nloop invariant lock == 0 ==> !(lock == 1);\nloop invariant lock == 1 ==> !(lock == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: new >= old;\nloop invariant i4: lock == 0 ==> !(lock == 1);\nloop invariant i5: lock == 1 ==> !(lock == 0);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= new <= 4294967295;\nloop invariant 0 <= old <= 4294967295;\nloop invariant lock == 1 ==> old >= new;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> old < new;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\nloop invariant lock == 1 ==> old < new + 1;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> old < new;\nloop invariant lock == 1 ==> old <= new;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\nloop invariant lock == 1 ==> old < new + 1;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\nloop invariant lock == 1 ==> old < new + 1;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\nloop invariant lock == 1 ==> old < new + 1;\nloop invariant lock == 1 ==> new >= old;\nloop invariant lock == 1 ==> new <= old + 1;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 1 ==> new < old + 2;\nloop invariant lock == 1 ==> old + 1 < new + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 1 ==> old >= new;\nloop invariant i4: lock == 1 ==> old <= new;\n\n\n\nloop invariant i8: lock == 1 ==> new < old + 2;\nloop invariant i9: lock == 1 ==> old + 1 < new + 2;\nloop invariant i10: lock == 1 ==> old < new + 1;\nloop invariant i11: lock == 1 ==> new >= old;\nloop invariant i12: lock == 1 ==> new <= old + 1;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant lock == 1 || lock == 0;loop invariant lock >= 0;loop invariant lock <= 1;loop invariant old >= 0;loop invariant new >= 0;loop invariant new >= old;loop invariant new - old == 1;loop invariant lock ==> old == new;loop invariant lock ==> lock == 1;loop invariant lock ==> lock == 0;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 1 || lock == 0;loop invariant lock >= 0;loop invariant lock <= 1;loop invariant old >= 0;loop invariant new >= 0;loop invariant new >= old;loop invariant new - old == 1;loop invariant lock ==> old == new;loop invariant lock ==> lock == 1;loop invariant lock ==> lock == 0;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 1 ==> old == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 1 ==> old == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant old == old + 1 ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new ==> lock == 1;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 1 ==> old == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant old == old + 1 ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new ==> lock == 1;\nloop invariant lock == 1 ==> old == new;\nloop invariant lock == 1 ==> old == old + 1;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant old == old + 1 ==> lock == 1;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant old == new ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 1 ==> old == new;\n\n\nloop invariant i4: old == old + 1 ==> lock == 1;\n\nloop invariant i6: old == new ==> lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= old;\nloop invariant old <= new;\nloop invariant lock <= 1;\nloop invariant lock >= 0;\nloop invariant new >= old + 1;\nloop invariant lock == 0 ==> old == new;\nloop invariant lock == 1 ==> old != new;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant lock == 1 ==> old < new;\nloop invariant lock == 0 ==> old == new;\nloop invariant new != old ==> lock == 1;\nloop invariant new != old ==> lock == 0;\nloop invariant new < old + 1 ==> lock == 1;\nloop invariant new < old + 1 ==> lock == 0;\nloop invariant lock == 0 ==> new == old;\nloop invariant lock == 1 ==> new == old + 1;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new > old;\nloop invariant lock == 0 ==> new <= old;\nloop invariant lock == 1 ==> new >= old + 1;\nloop invariant lock == 0 ==> new < old + 1;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant lock == 0 ==> new == old + 1;\nloop invariant lock == 1 ==> new < old + 1;\nloop invariant lock == 0 ==> new >= old + 1;\nloop invariant lock == 1 ==> new <= old;\nloop invariant lock == 0 ==> new > old;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new != old + 1;\nloop invariant lock == 1 ==> new == old;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: old <= new;\nloop invariant i3: lock <= 1;\nloop invariant i4: lock >= 0;\n\n\n\nloop invariant i8: new == old + 1 ==> lock == 0;\n\n\n\nloop invariant i12: new != old ==> lock == 0;\nloop invariant i13: new < old + 1 ==> lock == 1;\n\n\n\n\n\n\n\n\n\nloop invariant i23: lock == 1 ==> new == old;\nloop invariant i24: lock == 0 ==> new == old + 1;\nloop invariant i25: lock == 1 ==> new < old + 1;\nloop invariant i26: lock == 0 ==> new >= old + 1;\nloop invariant i27: lock == 1 ==> new <= old;\nloop invariant i28: lock == 0 ==> new > old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= new <= 100000;\nloop invariant lock == 0;\nloop invariant lock ==> old == new;\nloop invariant old == new ==> lock == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock ==> old == new;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= old <= 4294967295;\nloop invariant 0 <= new <= 4294967295;\nloop invariant old <= new;\nloop invariant lock == 1 ==> new != old;\nloop invariant lock == 0 ==> new == old;\nloop invariant old != new ==> lock == 1;\nloop invariant old == new ==> lock == 0;\nloop invariant old == new || new == old;\nloop invariant old != new || lock == 1;\nloop invariant old != new || new == old || lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: old <= new;\n\n\n\n\n\nloop invariant i9: old != new || lock == 1;\nloop invariant i10: old != new || new == old || lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 1 <= old <= 4294967295;\nloop invariant lock == 0;\nloop invariant 1 <= new <= 4294967295;\nloop invariant new == old + 1 ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn();\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn();\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\nloop invariant i4: new == old + 1 ==> lock == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: 0 <= old <= INT_MAX;\nloop invariant i2: 0 <= new <= INT_MAX;\nloop invariant i3: lock == 1 || lock == 0;\nloop invariant i4: old <= new;\nloop invariant i5: (lock == 0 ==> new == old + 1);\nloop invariant i6: (lock == 1 ==> new == old);\nloop invariant i7: (lock == 0 ==> old == new - 1);\nloop invariant i8: (lock == 1 ==> old == new);\nloop invariant i9: 0 <= old <= 4294967295;\nloop invariant i10: old == (new - 1);\nloop invariant i11: lock == 0;\nloop invariant i12: old == new || lock == 1;\nloop invariant i13: old == new || lock == 0;\nloop invariant i14: old == new || unknown() == 0;\nloop invariant i15: old == new || unknown() == 1;\nloop invariant i16: old == new || unknown() != 0;\nloop invariant i17: old == new || unknown() != 1;\nloop invariant i18: old == new || old == new;\nloop invariant i19: old == new || old != new;\nloop invariant i20: old == new || lock == 0 || lock == 1;\nloop invariant i21: old == new || lock == 0 || lock == 1 || unknown() == 0;\nloop invariant i22: old == new || lock == 0 || lock == 1 || unknown() == 1;\nloop invariant i23: old == new || lock == 0 || lock == 1 || unknown() != 0;\nloop invariant i24: old == new || lock == 0 || lock == 1 || unknown() != 1;\nloop invariant i25: old == new || lock == 0 || lock == 1 || old == new;\nloop invariant i26: old == new || lock == 0 || lock == 1 || old != new;\nloop invariant i27: old == new || lock == 0 || lock == 1 || old == new || unknown() == 0;\nloop invariant i28: old == new || lock == 0 || lock == 1 || old == new || unknown() == 1;\nloop invariant i29: old == new || lock == 0 || lock == 1 || old == new || unknown() != 0;\nloop invariant i30: old == new || lock == 0 || lock == 1 || old == new || unknown() != 1;\nloop invariant i31: old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant i32: old == new || lock == 0 || lock == 1 || old == new || old != new;\nloop invariant i33: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1;\nloop invariant i34: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() == 0;\nloop invariant i35: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() == 1;\nloop invariant i36: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() != 0;\nloop invariant i37: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || unknown() != 1;\nloop invariant i38: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new;\nloop invariant i39: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old != new;\nloop invariant i40: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() == 0;\nloop invariant i41: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() == 1;\nloop invariant i42: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() != 0;\nloop invariant i43: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || unknown() != 1;\nloop invariant i44: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant i45: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old != new;\nloop invariant i46: 1 <= old <= new;\nloop invariant i47: new <= new+1;\nloop invariant i48: lock == 1;\nloop invariant i49: old == new;\nloop invariant i50: lock = 1 ==> old = new;\nloop invariant i51: lock = 0 ==> new = old + 1;\nloop invariant i52: old >= 0;\nloop invariant i53: new >= 0;\nloop invariant i54: new >= old;\nloop invariant i55: lock == 1 ==> new == old + 1;\nloop invariant i56: lock == 0 ==> new == old;\nloop invariant i57: lock == 1 ==> old == new;\nloop invariant i58: lock == 0 ==> old == new - 1;\nloop invariant i59: old <= 2147483647;\nloop invariant i60: new <= 2147483647;\nloop invariant i61: old >= new - 1;\nloop invariant i62: new >= old + 1;\nloop invariant i63: lock == 1 ==> old == new - 1;\nloop invariant i64: lock == 0 ==> old == new + 1;\nloop invariant i65: new <= old;\nloop invariant i66: lock == 1 ==> old <= new;\nloop invariant i67: lock == 0 ==> old >= new;\nloop invariant i68: lock == 1 ==> new <= old;\nloop invariant i69: lock == 0 ==> new >= old;\nloop invariant i70: lock == 1 ==> old <= new - 1;\nloop invariant i71: lock == 0 ==> old >= new + 1;\nloop invariant i72: old <= new + 1;\nloop invariant i73: new <= old + 1;\nloop invariant i74: lock == 1 ==> old <= new + 1;\nloop invariant i75: lock == 0 ==> old >= new - 1;\nloop invariant i76: lock == 1 ==> new <= old + 1;\nloop invariant i77: lock == 0 ==> new >= old - 1;\nloop invariant i78: old <= new + 2;\nloop invariant i79: new <= old + 2;\nloop invariant i80: lock == 1 ==> old <= new + 2;\nloop invariant i81: lock == 0 ==> old >= new - 2;\nloop invariant i82: lock == 1 ==> new <= old + 2;\nloop invariant i83: lock == 0 ==> new >= old - 2;\nloop invariant i84: old <= new + 3;\nloop invariant i85: new <= old + 3;\nloop invariant i86: lock == 1 ==> old <= new + 3;\nloop invariant i87: lock == 0 ==> old >= new - 3;\nloop invariant i88: lock == 1 ==> new <= old + 3;\nloop invariant i89: lock == 0 ==> new >= old - 3;\nloop invariant i90: old <= new + 4;\nloop invariant i91: new <= old + 4;\nloop invariant i92: lock == 1 ==> old <= new + 4;\nloop invariant i93: lock == 0 ==> old >= new - 4;\nloop invariant i94: lock == 1 ==> new <= old + 4;\nloop invariant i95: lock == 0 ==> new >= old - 4;\nloop invariant i96: old <= new + 5;\nloop invariant i97: new <= old + 5;\nloop invariant i98: lock == 1 ==> old <= new + 5;\nloop invariant i99: lock == 0 ==> old >= new - 5;\nloop invariant i100: lock == 1 ==> new <= old + 5;\nloop invariant i101: lock == 0 ==> new >= old - 5;\nloop invariant i102: old <= new + 6;\nloop invariant i103: new <= old + 6;\nloop invariant i104: lock == 1 ==> old <= new + 6;\nloop invariant i105: lock == 0 ==> old >= new - 6;\nloop invariant i106: lock == 1 ==> new <= old + 6;\nloop invariant i107: lock == 0 ==> new >= old - 6;\nloop invariant i108: old <= new + 7;\nloop invariant i109: new <= old + 7;\nloop invariant i110: lock == 1 ==> old <= new + 7;\nloop invariant i111: lock == 0 ==> old >= new - 7;\nloop invariant i112: lock == 1 ==> new <= old + 7;\nloop invariant i113: lock == 0 ==> new >= old - 7;\nloop invariant i114: old <= new + 8;\nloop invariant i115: new <= old + 8;\nloop invariant i116: lock == 1 ==> old <= new + 8;\nloop invariant i117: lock == 0 ==> old >= new - 8;\nloop invariant i118: lock == 1 ==> new <= old + 8;\nloop invariant i119: lock == 0 ==> new >= old - 8;\nloop invariant i120: old <= new + 9;\nloop invariant i121: new <= old + 9;\nloop invariant i122: lock == 1 ==> old <= new + 9;\nloop invariant i123: lock == 0 ==> old >= new - 9;\nloop invariant i124: lock == 0 ==> lock == 0;\nloop invariant i125: lock == 1 ==> lock == 1;\nloop invariant i126: lock == 0 ==> new == old + unknown();\nloop invariant i127: old >= 0 ==> old <= new;\nloop invariant i128: old >= 0 ==> old == new - 1;\nloop invariant i129: old >= 0 ==> lock == 0 || lock == 1;\nloop invariant i130: lock == 1 ==> old >= 0;\nloop invariant i131: lock == 0 ==> old >= 0;\nloop invariant i132: 0 <= old;\nloop invariant i133: lock == 1 ==> old == unknown_uint();\nloop invariant i134: lock == 0 ==> new == old + 1;\nloop invariant i135: lock == 1 ==> old >= unknown();\nloop invariant i136: lock == 0 ==> old == new;\nloop invariant i137: lock == 0 ==> new <= new + 1;\nloop invariant i138: lock == 1 ==> old >= new - 1;\nloop invariant i139: lock == 0 ==> old == unknown_uint();\nloop invariant i140: lock == 0 ==> new <= old + 1;\nloop invariant i141: 0 <= new <= UINT_MAX;\nloop invariant i142: 0 <= old <= UINT_MAX;\nloop invariant i143: lock == 0 ==> !(lock == 1);\nloop invariant i144: lock == 1 ==> !(lock == 0);\nloop invariant i145: 0 <= new <= 4294967295;\nloop invariant i146: lock == 1 ==> old >= new;\nloop invariant i147: lock == 1 ==> new >= old + 1;\nloop invariant i148: lock == 1 ==> old < new;\nloop invariant i149: lock == 1 ==> new < old + 2;\nloop invariant i150: lock == 1 ==> old + 1 < new + 2;\nloop invariant i151: lock == 1 ==> old < new + 1;\nloop invariant i152: lock == 1 ==> new >= old;\nloop invariant i153: lock == 1 ==> old + 1 <= new;\nloop invariant i154: lock == 1 ==> new > old;\nloop invariant i155: lock == 1 || lock == 0;loop invariant lock >= 0;loop invariant lock <= 1;loop invariant old >= 0;loop invariant new >= 0;loop invariant new >= old;loop invariant new - old == 1;loop invariant lock ==> old == new;loop invariant lock ==> lock == 1;loop invariant lock ==> lock == 0;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;\nloop invariant i156: lock == 1 ==> old == old + 1;\nloop invariant i157: old == old + 1 ==> lock == 1;\nloop invariant i158: new == old + 1 ==> lock == 1;\nloop invariant i159: old == new ==> lock == 1;\nloop invariant i160: lock <= 1;\nloop invariant i161: lock >= 0;\nloop invariant i162: lock == 1 ==> old != new;\nloop invariant i163: new == old + 1 ==> lock == 0;\nloop invariant i164: new != old ==> lock == 1;\nloop invariant i165: new != old ==> lock == 0;\nloop invariant i166: new < old + 1 ==> lock == 1;\nloop invariant i167: new < old + 1 ==> lock == 0;\nloop invariant i168: lock == 1 ==> new != old;\nloop invariant i169: lock == 0 ==> new != old + 1;\nloop invariant i170: lock == 0 ==> new <= old;\nloop invariant i171: lock == 0 ==> new < old + 1;\nloop invariant i172: lock == 1 ==> new == old;\nloop invariant i173: lock == 1 ==> new < old + 1;\nloop invariant i174: lock == 0 ==> new >= old + 1;\nloop invariant i175: lock == 0 ==> new > old;\nloop invariant i176: 1 <= old <= new <= 100000;\nloop invariant i177: lock ==> old == new;\nloop invariant i178: old == new ==> lock == 0;\nloop invariant i179: old != new ==> lock == 1;\nloop invariant i180: old == new || new == old;\nloop invariant i181: old != new || lock == 1;\nloop invariant i182: old != new || new == old || lock == 1;\nloop invariant i183: 1 <= old <= 4294967295;\nloop invariant i184: 1 <= new <= 4294967295;\nloop invariant i185: new == old + 1 ==> unknown() ==> lock == 0;\nloop invariant i186: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0;\nloop invariant i187: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn();\nloop invariant i188: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn();\nloop invariant i189: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new;\nloop invariant i190: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0;\nloop invariant i191: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1;\nloop invariant i192: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant i193: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\nloop invariant i194: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1;\nloop invariant i195: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant i196: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\nloop invariant i197: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1;\nloop invariant i198: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old;\nloop invariant i199: new == old + 1 ==> unknown() ==> lock == 0 ==> new != old ==> lock == 0 ==> lock == 1 ==> errorFn() ==> errorFn() ==> old == new ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0 ==> lock == 1 ==> new != old ==> lock == 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 71,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 1 || lock == 0;\nloop invariant i4: old <= new;\nloop invariant i5: (lock == 0 ==> new == old + 1);\nloop invariant i6: (lock == 1 ==> new == old);\nloop invariant i7: (lock == 0 ==> old == new - 1);\nloop invariant i8: (lock == 1 ==> old == new);\n\n\n\n\nloop invariant i13: old == new || lock == 0;\n\n\n\n\n\nloop invariant i19: old == new || old != new;\nloop invariant i20: old == new || lock == 0 || lock == 1;\n\n\n\n\nloop invariant i25: old == new || lock == 0 || lock == 1 || old == new;\nloop invariant i26: old == new || lock == 0 || lock == 1 || old != new;\n\n\n\n\nloop invariant i31: old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant i32: old == new || lock == 0 || lock == 1 || old == new || old != new;\nloop invariant i33: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1;\n\n\n\n\nloop invariant i38: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new;\nloop invariant i39: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old != new;\n\n\n\n\nloop invariant i44: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old == new;\nloop invariant i45: old == new || lock == 0 || lock == 1 || old == new || lock == 0 || lock == 1 || old == new || old != new;\n\nloop invariant i47: new <= new+1;\n\n\n\n\n\n\nloop invariant i54: new >= old;\n\n\nloop invariant i57: lock == 1 ==> old == new;\nloop invariant i58: lock == 0 ==> old == new - 1;\nloop invariant i59: old <= 2147483647;\nloop invariant i60: new <= 2147483647;\nloop invariant i61: old >= new - 1;\n\n\n\n\nloop invariant i66: lock == 1 ==> old <= new;\n\nloop invariant i68: lock == 1 ==> new <= old;\nloop invariant i69: lock == 0 ==> new >= old;\n\n\nloop invariant i72: old <= new + 1;\nloop invariant i73: new <= old + 1;\nloop invariant i74: lock == 1 ==> old <= new + 1;\nloop invariant i75: lock == 0 ==> old >= new - 1;\nloop invariant i76: lock == 1 ==> new <= old + 1;\nloop invariant i77: lock == 0 ==> new >= old - 1;\nloop invariant i78: old <= new + 2;\nloop invariant i79: new <= old + 2;\nloop invariant i80: lock == 1 ==> old <= new + 2;\nloop invariant i81: lock == 0 ==> old >= new - 2;\nloop invariant i82: lock == 1 ==> new <= old + 2;\nloop invariant i83: lock == 0 ==> new >= old - 2;\nloop invariant i84: old <= new + 3;\nloop invariant i85: new <= old + 3;\nloop invariant i86: lock == 1 ==> old <= new + 3;\nloop invariant i87: lock == 0 ==> old >= new - 3;\nloop invariant i88: lock == 1 ==> new <= old + 3;\nloop invariant i89: lock == 0 ==> new >= old - 3;\nloop invariant i90: old <= new + 4;\nloop invariant i91: new <= old + 4;\nloop invariant i92: lock == 1 ==> old <= new + 4;\nloop invariant i93: lock == 0 ==> old >= new - 4;\nloop invariant i94: lock == 1 ==> new <= old + 4;\nloop invariant i95: lock == 0 ==> new >= old - 4;\nloop invariant i96: old <= new + 5;\nloop invariant i97: new <= old + 5;\nloop invariant i98: lock == 1 ==> old <= new + 5;\nloop invariant i99: lock == 0 ==> old >= new - 5;\nloop invariant i100: lock == 1 ==> new <= old + 5;\nloop invariant i101: lock == 0 ==> new >= old - 5;\nloop invariant i102: old <= new + 6;\nloop invariant i103: new <= old + 6;\nloop invariant i104: lock == 1 ==> old <= new + 6;\nloop invariant i105: lock == 0 ==> old >= new - 6;\nloop invariant i106: lock == 1 ==> new <= old + 6;\nloop invariant i107: lock == 0 ==> new >= old - 6;\nloop invariant i108: old <= new + 7;\nloop invariant i109: new <= old + 7;\nloop invariant i110: lock == 1 ==> old <= new + 7;\nloop invariant i111: lock == 0 ==> old >= new - 7;\nloop invariant i112: lock == 1 ==> new <= old + 7;\nloop invariant i113: lock == 0 ==> new >= old - 7;\nloop invariant i114: old <= new + 8;\nloop invariant i115: new <= old + 8;\nloop invariant i116: lock == 1 ==> old <= new + 8;\nloop invariant i117: lock == 0 ==> old >= new - 8;\nloop invariant i118: lock == 1 ==> new <= old + 8;\nloop invariant i119: lock == 0 ==> new >= old - 8;\nloop invariant i120: old <= new + 9;\nloop invariant i121: new <= old + 9;\nloop invariant i122: lock == 1 ==> old <= new + 9;\nloop invariant i123: lock == 0 ==> old >= new - 9;\nloop invariant i124: lock == 0 ==> lock == 0;\nloop invariant i125: lock == 1 ==> lock == 1;\n\nloop invariant i127: old >= 0 ==> old <= new;\n\nloop invariant i129: old >= 0 ==> lock == 0 || lock == 1;\nloop invariant i130: lock == 1 ==> old >= 0;\n\n\n\nloop invariant i134: lock == 0 ==> new == old + 1;\n\n\nloop invariant i137: lock == 0 ==> new <= new + 1;\nloop invariant i138: lock == 1 ==> old >= new - 1;\n\nloop invariant i140: lock == 0 ==> new <= old + 1;\n\n\nloop invariant i143: lock == 0 ==> !(lock == 1);\nloop invariant i144: lock == 1 ==> !(lock == 0);\n\nloop invariant i146: lock == 1 ==> old >= new;\n\n\nloop invariant i149: lock == 1 ==> new < old + 2;\nloop invariant i150: lock == 1 ==> old + 1 < new + 2;\nloop invariant i151: lock == 1 ==> old < new + 1;\nloop invariant i152: lock == 1 ==> new >= old;\n\n\nloop invariant i155: lock == 1 || lock == 0;loop invariant lock >= 0;loop invariant lock <= 1;loop invariant old >= 0;loop invariant new >= 0;loop invariant new >= old;loop invariant new - old == 1;loop invariant lock ==> old == new;loop invariant lock ==> lock == 1;loop invariant lock ==> lock == 0;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;loop invariant lock ==> new >= old;loop invariant lock ==> new - old == 1;loop invariant lock ==> lock == 1 || lock == 0;loop invariant lock ==> lock >= 0;loop invariant lock ==> lock <= 1;loop invariant lock ==> old >= 0;loop invariant lock ==> new >= 0;\nloop invariant i156: lock == 1 ==> old == old + 1;\nloop invariant i157: old == old + 1 ==> lock == 1;\n\nloop invariant i159: old == new ==> lock == 1;\nloop invariant i160: lock <= 1;\nloop invariant i161: lock >= 0;\nloop invariant i162: lock == 1 ==> old != new;\nloop invariant i163: new == old + 1 ==> lock == 0;\n\nloop invariant i165: new != old ==> lock == 0;\nloop invariant i166: new < old + 1 ==> lock == 1;\nloop invariant i167: new < old + 1 ==> lock == 0;\nloop invariant i168: lock == 1 ==> new != old;\n\n\n\nloop invariant i172: lock == 1 ==> new == old;\nloop invariant i173: lock == 1 ==> new < old + 1;\nloop invariant i174: lock == 0 ==> new >= old + 1;\nloop invariant i175: lock == 0 ==> new > old;\n\nloop invariant i177: lock ==> old == new;\nloop invariant i178: old == new ==> lock == 0;\n\n\nloop invariant i181: old != new || lock == 1;\nloop invariant i182: old != new || new == old || lock == 1;\n\nloop invariant i184: 1 <= new <= 4294967295;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 12,
        "success_count": 12,
        "failure_count": 0,
        "success_rate": 1.0
    }
}