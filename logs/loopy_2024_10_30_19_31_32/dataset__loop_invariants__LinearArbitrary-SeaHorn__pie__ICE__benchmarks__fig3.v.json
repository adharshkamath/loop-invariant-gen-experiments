{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\twhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> lock == 1 || lock == 0;\nloop invariant lock == 0 ==> x <= y;\nloop invariant lock == 1 ==> x >= y;\nloop invariant lock == 0 ==> x >= y - 1;\nloop invariant lock == 1 ==> x <= y + 1;\nloop invariant lock == 0 ==> x <= y + 1;\nloop invariant lock == 1 ==> x >= y - 1;\nloop invariant lock == 0 ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant lock == 0;\nloop invariant v1 == 0;\nloop invariant v2 == 0;\nloop invariant v3 == 0;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant x == y ==> lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant lock == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant lock == 1;\nloop invariant input == 0;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= lock <= 2;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 0 <= input <= 1;\nloop invariant 1 <= v1 <= 2;\nloop invariant 1 <= v2 <= 2;\nloop invariant 1 <= v3 <= 2;\nloop invariant (lock == 1 ==> x == y);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= input;\nloop invariant x = y;\nloop invariant y = y + 1 ==> x = y;\nloop invariant y != x ==> x = y;\nloop invariant y = x ==> lock == 1;\nloop invariant y != x ==> lock == 0;\nloop invariant x = y ==> y = y + 1;\nloop invariant y != x ==> y = x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 1 ==> input == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 1 ==> x < y;\nloop invariant lock == 1 ==> input == 0;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 1 ==> y == y;\nloop invariant lock == 1 ==> y < 100000;\nloop invariant lock == 1 ==> x < y;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 0 ==> input == 0;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant loop invariant 0 <= y <= 100000;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 0;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> lock == 1 || lock == 0;\nloop invariant lock == 0 ==> x <= y;\nloop invariant lock == 1 ==> x >= y;\nloop invariant lock == 0 ==> x >= y - 1;\nloop invariant lock == 1 ==> x <= y + 1;\nloop invariant lock == 0 ==> x <= y + 1;\nloop invariant lock == 1 ==> x >= y - 1;\nloop invariant lock == 0 ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\nloop invariant i1: lock == 1 ==> x == y;\nloop invariant i2: lock == 0 ==> lock == 1 || lock == 0;\nloop invariant i3: lock == 0 ==> x <= y;\nloop invariant i4: lock == 1 ==> x >= y;\nloop invariant i5: lock == 0 ==> x >= y - 1;\nloop invariant i6: lock == 1 ==> x <= y + 1;\nloop invariant i7: lock == 0 ==> x <= y + 1;\nloop invariant i8: lock == 1 ==> x >= y - 1;\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant lock == 0;\nloop invariant v1 == 0;\nloop invariant v2 == 0;\nloop invariant v3 == 0;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant x == y ==> lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n\nloop invariant i8: x == y ==> lock == 1;\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant lock == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant lock == 1;\nloop invariant input == 0;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= lock <= 2;\nloop invariant 1 <= x <= 2;\nloop invariant 1 <= y <= 2;\nloop invariant 0 <= input <= 1;\nloop invariant 1 <= v1 <= 2;\nloop invariant 1 <= v2 <= 2;\nloop invariant 1 <= v3 <= 2;\nloop invariant (lock == 1 ==> x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n\nloop invariant i8: (lock == 1 ==> x == y);\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= input;\nloop invariant x = y;\nloop invariant y = y + 1 ==> x = y;\nloop invariant y != x ==> x = y;\nloop invariant y = x ==> lock == 1;\nloop invariant y != x ==> lock == 0;\nloop invariant x = y ==> y = y + 1;\nloop invariant y != x ==> y = x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\nloop invariant i6: y != x ==> lock == 0;\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= y; implies lock == 0;\nloop invariant 1 <= x <= y; implies lock == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\nloop invariant 1 <= x <= y; implies input == 0;\nloop invariant 1 <= x <= y; implies input == 1;\nloop invariant 1 <= x; implies lock == 1;\nloop invariant 1 <= y; implies lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 1 ==> input == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 1 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 1 ==> x < y;\nloop invariant lock == 1 ==> input == 0;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 1 ==> y == y;\nloop invariant lock == 1 ==> y < 100000;\nloop invariant lock == 1 ==> x < y;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 0 ==> lock == 1;\nloop invariant lock == 0 ==> lock == 0;\nloop invariant lock == 0 ==> input == 0;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> y == y;\nloop invariant lock == 0 ==> y < 100000;\nloop invariant lock == 0 ==> x < y;\nloop invariant lock == 0 ==> input == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\nloop invariant i3: lock == 1 ==> x == y;\n\nloop invariant i5: lock == 1 ==> input == 0;\n\n\nloop invariant i8: lock == 0 ==> lock == 0;\nloop invariant i9: lock == 0 ==> y == y;\n\n\nloop invariant i12: lock == 1 ==> y == y;\n\n\n\nloop invariant i16: lock == 0 ==> x < y;\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant loop invariant 0 <= y <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 71: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\nloop invariant i1: 0 <= y <= x;\nloop invariant i2: lock == 1;\nloop invariant i3: x == y;\nloop invariant i4: lock == 0;\nloop invariant i5: y <= x;\nloop invariant i6: x >= y;\nloop invariant i7: lock == 1 ==> x == y;\nloop invariant i8: lock == 0 ==> lock == 1 || lock == 0;\nloop invariant i9: lock == 0 ==> x <= y;\nloop invariant i10: lock == 1 ==> x >= y;\nloop invariant i11: lock == 0 ==> x >= y - 1;\nloop invariant i12: lock == 1 ==> x <= y + 1;\nloop invariant i13: lock == 0 ==> x <= y + 1;\nloop invariant i14: lock == 1 ==> x >= y - 1;\nloop invariant i15: lock == 0 ==> x >= y;\nloop invariant i16: 0 <= y <= 100000;\nloop invariant i17: x >= (1 + (y - 1) * y / 2);\nloop invariant i18: 0 <= x <= y;\nloop invariant i19: 0 <= y;\nloop invariant i20: v1 == 0;\nloop invariant i21: v2 == 0;\nloop invariant i22: v3 == 0;\nloop invariant i23: lock == 1 ==> lock == 0;\nloop invariant i24: x == y ==> lock == 1;\nloop invariant i25: y >= 0;\nloop invariant i26: input == 0;\nloop invariant i27: v1 == v2;\nloop invariant i28: v2 == v3;\nloop invariant i29: v3 == v1;\nloop invariant i30: 1 <= lock <= 2;\nloop invariant i31: 1 <= x <= 2;\nloop invariant i32: 1 <= y <= 2;\nloop invariant i33: 0 <= input <= 1;\nloop invariant i34: 1 <= v1 <= 2;\nloop invariant i35: 1 <= v2 <= 2;\nloop invariant i36: 1 <= v3 <= 2;\nloop invariant i37: (lock == 1 ==> x == y);\nloop invariant i38: 0 <= y <= input;\nloop invariant i39: x = y;\nloop invariant i40: y = y + 1 ==> x = y;\nloop invariant i41: y != x ==> x = y;\nloop invariant i42: y = x ==> lock == 1;\nloop invariant i43: y != x ==> lock == 0;\nloop invariant i44: x = y ==> y = y + 1;\nloop invariant i45: y != x ==> y = x;\nloop invariant i46: 1 <= x <= y; implies lock == 1;\nloop invariant i47: 1 <= y; implies lock == 1;\nloop invariant i48: 1 <= x; implies lock == 1;\nloop invariant i49: 1 <= x <= y; implies input == 0;\nloop invariant i50: 1 <= x <= y; implies input == 1;\nloop invariant i51: 1 <= x <= y; implies lock == 0;\nloop invariant i52: 1 <= y; implies lock == 0;\nloop invariant i53: y <= 100000;\nloop invariant i54: lock == 0 ==> input == 1;\nloop invariant i55: lock == 1 ==> input == 0;\nloop invariant i56: lock == 0 ==> lock == 1;\nloop invariant i57: lock == 0 ==> lock == 0;\nloop invariant i58: lock == 0 ==> y == y;\nloop invariant i59: lock == 0 ==> y < 100000;\nloop invariant i60: lock == 1 ==> x < y;\nloop invariant i61: lock == 1 ==> y == y;\nloop invariant i62: lock == 1 ==> y < 100000;\nloop invariant i63: lock == 0 ==> input == 0;\nloop invariant i64: lock == 0 ==> x == y;\nloop invariant i65: lock == 0 ==> x < y;\nloop invariant i66: loop invariant 0 <= y <= 100000;\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 26,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\t/*@\n\n\n\n\n\n\nloop invariant i7: lock == 1 ==> x == y;\nloop invariant i8: lock == 0 ==> lock == 1 || lock == 0;\nloop invariant i9: lock == 0 ==> x <= y;\nloop invariant i10: lock == 1 ==> x >= y;\nloop invariant i11: lock == 0 ==> x >= y - 1;\nloop invariant i12: lock == 1 ==> x <= y + 1;\nloop invariant i13: lock == 0 ==> x <= y + 1;\nloop invariant i14: lock == 1 ==> x >= y - 1;\n\n\n\n\n\n\n\n\n\nloop invariant i24: x == y ==> lock == 1;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: (lock == 1 ==> x == y);\n\n\n\n\n\nloop invariant i43: y != x ==> lock == 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i55: lock == 1 ==> input == 0;\n\nloop invariant i57: lock == 0 ==> lock == 0;\nloop invariant i58: lock == 0 ==> y == y;\n\n\nloop invariant i61: lock == 1 ==> y == y;\n\n\n\nloop invariant i65: lock == 0 ==> x < y;\n\n*/\nwhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 78,
        "success_count": 66,
        "failure_count": 12,
        "success_rate": 0.8461538461538461
    }
}