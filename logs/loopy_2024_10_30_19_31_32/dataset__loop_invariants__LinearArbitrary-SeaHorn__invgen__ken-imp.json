{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x >= -j;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x <= i-x;\nloop invariant y <= j-y;\nloop invariant x+y == i+j;\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant j <= i;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant y <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant y <= j;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x+y <= i+j;\nloop invariant x+y >= i+j - ((i-j)^2)/2;\nloop invariant x+y >= i-j;\nloop invariant x+y <= i+j;\nloop invariant x+y >= 0;\nloop invariant x+y <= i+j;\nloop invariant x+y >= 0;\nloop invariant x+y <= i+j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= i - y;\nloop invariant y >= j - x;\nloop invariant x + y >= i + j;\nloop invariant x - y <= i - j;\nloop invariant x * y <= i * j;\nloop invariant x / y >= i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 1 <= y <= j;\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i && 0 <= y <= j && i>=j && i-j==x && j==y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant i == j ==> y == 0;\nloop invariant i != j ==> y != 0;\nloop invariant 0 <= x <= i + j;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= i - j;\nloop invariant y >= j - i;\nloop invariant x == i - y;\nloop invariant y == j - x;\nloop invariant i >= j ==> x >= y;\nloop invariant i <= j ==> x <= y;\nloop invariant x == 0 ==> y == j;\nloop invariant y == 0 ==> x == i;\nloop invariant i == j ==> x == y;\nloop invariant i != j ==> x != y;\nloop invariant i >= j ==> x >= y && x <= j;\nloop invariant i <= j ==> y >= x && y <= i;\nloop invariant x == 0 ==> y == j && i == j;\nloop invariant y == 0 ==> x == i && j == i;\nloop invariant i >= j ==> x >= y && x <= j && y >= 0 && y <= i;\nloop invariant i <= j ==> y >= x && y <= i && x >= 0 && x <= j;\nloop invariant i == j ==> x == y && y == j && i == j;\nloop invariant i != j ==> x != y && x == i - y && y == j - x && i >= j && j >= x && x >= 0 && y >= 0 && i <= 2147483647 && j <= 2147483647 && x <= 2147483647 && y <= 2147483647;\n*/\n```",
            "```\n/*@\nloop invariant y < 0 ==> false;\nloop invariant y < 0 ==> x < y;\nloop invariant y < 0 ==> x == j;\nloop invariant x < y ==> false;\nloop invariant x < y ==> x == i;\nloop invariant x < y ==> y == j;\nloop invariant x == y ==> false;\nloop invariant x == y ==> x == i;\nloop invariant x == y ==> y == j;\nloop invariant x != 0 ==> false;\nloop invariant x != 0 ==> x == i;\nloop invariant x != 0 ==> y == j;\nloop invariant i == j ==> false;\nloop invariant i == j ==> y != 0;\nloop invariant y < 0 ==> false;\nloop invariant y < 0 ==> x < y;\nloop invariant y < 0 ==> x == j;\nloop invariant x < y ==> false;\nloop invariant x < y ==> x == i;\nloop invariant x < y ==> y == j;\nloop invariant x == y ==> false;\nloop invariant x == y ==> x == i;\nloop invariant x == y ==> y == j;\nloop invariant x != 0 ==> false;\nloop invariant x != 0 ==> x == i;\nloop invariant x != 0 ==> y == j;\nloop invariant i == j ==> false;\nloop invariant i == j ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x + y <= i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= 0;\nloop invariant x + y <= i + j;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i; loop invariant 0 <= y <= j; loop invariant i >= j; loop invariant x >= y; loop invariant x + y == i + j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= i - j;\nloop invariant y >= j - i;\nloop invariant x == 0 ==> y == j - i;\nloop invariant x != 0 ==> y != j - i;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0 ==> y != 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x + y == i + j - 2*x;\nloop invariant x == i - 2*x;\nloop invariant y == j - 2*y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\nloop invariant i1: x <= i;\nloop invariant i2: y <= j;\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x >= -j;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\nloop invariant x >= 0;\nloop invariant x >= i - j;\nloop invariant i >= 0;\nloop invariant x >= j;\nloop invariant x >= i - j;\nloop invariant x >= -j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x <= i-x;\nloop invariant y <= j-y;\nloop invariant x+y == i+j;\nloop invariant (x != 0) ==> (y != 0);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0);\nloop invariant i9: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j);\nloop invariant i10: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant i11: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant j <= i;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant y <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant y <= j;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i - j <= (x - y);\nloop invariant ((i - j) * (i - j + 1) / 2) <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\nloop invariant i7: i - j <= (x - y);\n\nloop invariant i9: y <= j;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x+y <= i+j;\nloop invariant x+y >= i+j - ((i-j)^2)/2;\nloop invariant x+y >= i-j;\nloop invariant x+y <= i+j;\nloop invariant x+y >= 0;\nloop invariant x+y <= i+j;\nloop invariant x+y >= 0;\nloop invariant x+y <= i+j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\nloop invariant i3: x <= i;\nloop invariant i4: y <= j;\nloop invariant i5: x+y <= i+j;\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x >= i - y;\nloop invariant y >= j - x;\nloop invariant x + y >= i + j;\nloop invariant x - y <= i - j;\nloop invariant x * y <= i * j;\nloop invariant x / y >= i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\nloop invariant x + y == i + j;\nloop invariant x - y == i - j;\nloop invariant x * y == i * j;\nloop invariant x / y == i / j;\nloop invariant x % y == i % j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\nloop invariant i6: x - y <= i - j;\n\n\n\n\nloop invariant i11: x - y == i - j;\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= i;\nloop invariant 1 <= y <= j;\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\nloop invariant x + y >= (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i && 0 <= y <= j && i>=j && i-j==x && j==y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant i == j ==> y == 0;\nloop invariant i != j ==> y != 0;\nloop invariant 0 <= x <= i + j;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= i - j;\nloop invariant y >= j - i;\nloop invariant x == i - y;\nloop invariant y == j - x;\nloop invariant i >= j ==> x >= y;\nloop invariant i <= j ==> x <= y;\nloop invariant x == 0 ==> y == j;\nloop invariant y == 0 ==> x == i;\nloop invariant i == j ==> x == y;\nloop invariant i != j ==> x != y;\nloop invariant i >= j ==> x >= y && x <= j;\nloop invariant i <= j ==> y >= x && y <= i;\nloop invariant x == 0 ==> y == j && i == j;\nloop invariant y == 0 ==> x == i && j == i;\nloop invariant i >= j ==> x >= y && x <= j && y >= 0 && y <= i;\nloop invariant i <= j ==> y >= x && y <= i && x >= 0 && x <= j;\nloop invariant i == j ==> x == y && y == j && i == j;\nloop invariant i != j ==> x != y && x == i - y && y == j - x && i >= j && j >= x && x >= 0 && y >= 0 && i <= 2147483647 && j <= 2147483647 && x <= 2147483647 && y <= 2147483647;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: i >= j ==> x >= y;\nloop invariant i15: i <= j ==> x <= y;\n\n\nloop invariant i18: i == j ==> x == y;\nloop invariant i19: i != j ==> x != y;\n\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant y < 0 ==> false;\nloop invariant y < 0 ==> x < y;\nloop invariant y < 0 ==> x == j;\nloop invariant x < y ==> false;\nloop invariant x < y ==> x == i;\nloop invariant x < y ==> y == j;\nloop invariant x == y ==> false;\nloop invariant x == y ==> x == i;\nloop invariant x == y ==> y == j;\nloop invariant x != 0 ==> false;\nloop invariant x != 0 ==> x == i;\nloop invariant x != 0 ==> y == j;\nloop invariant i == j ==> false;\nloop invariant i == j ==> y != 0;\nloop invariant y < 0 ==> false;\nloop invariant y < 0 ==> x < y;\nloop invariant y < 0 ==> x == j;\nloop invariant x < y ==> false;\nloop invariant x < y ==> x == i;\nloop invariant x < y ==> y == j;\nloop invariant x == y ==> false;\nloop invariant x == y ==> x == i;\nloop invariant x == y ==> y == j;\nloop invariant x != 0 ==> false;\nloop invariant x != 0 ==> x == i;\nloop invariant x != 0 ==> y == j;\nloop invariant i == j ==> false;\nloop invariant i == j ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x + y <= i + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x + y <= i + j;\nloop invariant x + y >= 0;\nloop invariant x + y <= i + j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\nloop invariant i4: x <= i;\nloop invariant i5: y <= j;\nloop invariant i6: x + y <= i + j;\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == i + j;\nloop invariant x == i - j;\nloop invariant y == j - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i; loop invariant 0 <= y <= j; loop invariant i >= j; loop invariant x >= y; loop invariant x + y == i + j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x + y == i + j;\nloop invariant x >= i - j;\nloop invariant y >= j - i;\nloop invariant x == 0 ==> y == j - i;\nloop invariant x != 0 ==> y != j - i;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0;\nloop invariant x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0;\nloop invariant x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j;\nloop invariant i11: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j;\nloop invariant i12: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 93: unbound logic variable false. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\nloop invariant i1: x <= i;\nloop invariant i2: y <= j;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x + y == i + j - 2*x;\nloop invariant i6: x == i - 2*x;\nloop invariant i7: y == j - 2*y;\nloop invariant i8: x >= y;\nloop invariant i9: x >= -j;\nloop invariant i10: x >= i - j;\nloop invariant i11: i >= 0;\nloop invariant i12: x >= j;\nloop invariant i13: 0 <= x <= i;\nloop invariant i14: 0 <= y <= j;\nloop invariant i15: x <= i-x;\nloop invariant i16: y <= j-y;\nloop invariant i17: x+y == i+j;\nloop invariant i18: (x != 0) ==> (y != 0);\nloop invariant i19: (x != 0) ==> (y != 0) ==> (x+y == i+j);\nloop invariant i20: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0);\nloop invariant i21: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j);\nloop invariant i22: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant i23: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant i24: 0 <= i;\nloop invariant i25: 0 <= j;\nloop invariant i26: j <= i;\nloop invariant i27: 0 <= x;\nloop invariant i28: 0 <= y;\nloop invariant i29: y <= x;\nloop invariant i30: i - j <= (x - y);\nloop invariant i31: ((i - j) * (i - j + 1) / 2) <= x;\nloop invariant i32: 0 <= y <= 100000;\nloop invariant i33: x >= (1 + (y - 1) * y / 2);\nloop invariant i34: x+y <= i+j;\nloop invariant i35: x+y >= i+j - ((i-j)^2)/2;\nloop invariant i36: x+y >= i-j;\nloop invariant i37: x+y >= 0;\nloop invariant i38: x >= i - y;\nloop invariant i39: y >= j - x;\nloop invariant i40: x + y >= i + j;\nloop invariant i41: x - y <= i - j;\nloop invariant i42: x * y <= i * j;\nloop invariant i43: x / y >= i / j;\nloop invariant i44: x % y == i % j;\nloop invariant i45: x + y == i + j;\nloop invariant i46: x - y == i - j;\nloop invariant i47: x * y == i * j;\nloop invariant i48: x / y == i / j;\nloop invariant i49: 1 <= x <= i;\nloop invariant i50: 1 <= y <= j;\nloop invariant i51: x + y >= (i + j);\nloop invariant i52: 0 <= x <= i && 0 <= y <= j && i>=j && i-j==x && j==y;\nloop invariant i53: 0 <= i <= 2147483647;\nloop invariant i54: 0 <= j <= 2147483647;\nloop invariant i55: 0 <= x <= 2147483647;\nloop invariant i56: 0 <= y <= 2147483647;\nloop invariant i57: i == j ==> y == 0;\nloop invariant i58: i != j ==> y != 0;\nloop invariant i59: 0 <= x <= i + j;\nloop invariant i60: y >= j - i;\nloop invariant i61: x == i - y;\nloop invariant i62: y == j - x;\nloop invariant i63: i >= j ==> x >= y;\nloop invariant i64: i <= j ==> x <= y;\nloop invariant i65: x == 0 ==> y == j;\nloop invariant i66: y == 0 ==> x == i;\nloop invariant i67: i == j ==> x == y;\nloop invariant i68: i != j ==> x != y;\nloop invariant i69: i >= j ==> x >= y && x <= j;\nloop invariant i70: i <= j ==> y >= x && y <= i;\nloop invariant i71: x == 0 ==> y == j && i == j;\nloop invariant i72: y == 0 ==> x == i && j == i;\nloop invariant i73: i >= j ==> x >= y && x <= j && y >= 0 && y <= i;\nloop invariant i74: i <= j ==> y >= x && y <= i && x >= 0 && x <= j;\nloop invariant i75: i == j ==> x == y && y == j && i == j;\nloop invariant i76: i != j ==> x != y && x == i - y && y == j - x && i >= j && j >= x && x >= 0 && y >= 0 && i <= 2147483647 && j <= 2147483647 && x <= 2147483647 && y <= 2147483647;\nloop invariant i77: y < 0 ==> false;\nloop invariant i78: y < 0 ==> x < y;\nloop invariant i79: y < 0 ==> x == j;\nloop invariant i80: x < y ==> false;\nloop invariant i81: x < y ==> x == i;\nloop invariant i82: x < y ==> y == j;\nloop invariant i83: x == y ==> false;\nloop invariant i84: x == y ==> x == i;\nloop invariant i85: x == y ==> y == j;\nloop invariant i86: x != 0 ==> false;\nloop invariant i87: x != 0 ==> x == i;\nloop invariant i88: x != 0 ==> y == j;\nloop invariant i89: i == j ==> false;\nloop invariant i90: i == j ==> y != 0;\nloop invariant i91: 0 <= x + y <= i + j;\nloop invariant i92: x + y <= i + j;\nloop invariant i93: x + y >= 0;\nloop invariant i94: x == i - j;\nloop invariant i95: y == j - i;\nloop invariant i96: 0 <= x <= i; loop invariant 0 <= y <= j; loop invariant i >= j; loop invariant x >= y; loop invariant x + y == i + j;\nloop invariant i97: x == 0 ==> y == j - i;\nloop invariant i98: x != 0 ==> y != j - i;\nloop invariant i99: x == 0 ==> y == j - i ==> j - i != 0;\nloop invariant i100: x != 0 ==> y != j - i ==> j - i != 0;\nloop invariant i101: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j;\nloop invariant i102: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j;\nloop invariant i103: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0;\nloop invariant i104: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0;\nloop invariant i105: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR;\nloop invariant i106: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR;\nloop invariant i107: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false;\nloop invariant i108: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false;\nloop invariant i109: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false;\nloop invariant i110: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false;\nloop invariant i111: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false;\nloop invariant i112: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false;\nloop invariant i113: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false;\nloop invariant i114: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false;\nloop invariant i115: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0;\nloop invariant i116: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0;\nloop invariant i117: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0;\nloop invariant i118: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0;\nloop invariant i119: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0;\nloop invariant i120: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0;\nloop invariant i121: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0 ==> ERROR ==> \\false ==> \\false ==> \\false ==> \\false ==> y != 0 ==> y != 0 ==> y != 0 ==> y != 0;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 39,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\nloop invariant i1: x <= i;\nloop invariant i2: y <= j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0);\nloop invariant i21: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j);\nloop invariant i22: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j);\nloop invariant i23: (x != 0) ==> (y != 0) ==> (x+y == i+j) ==> (y != 0) ==> (x+y == i+j) ==> (x+y == i+j) ==> (x+y == i+j);\n\n\n\n\n\n\nloop invariant i30: i - j <= (x - y);\n\n\n\nloop invariant i34: x+y <= i+j;\n\n\n\n\n\n\nloop invariant i41: x - y <= i - j;\n\n\n\n\nloop invariant i46: x - y == i - j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i63: i >= j ==> x >= y;\nloop invariant i64: i <= j ==> x <= y;\n\n\nloop invariant i67: i == j ==> x == y;\nloop invariant i68: i != j ==> x != y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i92: x + y <= i + j;\n\n\n\n\nloop invariant i97: x == 0 ==> y == j - i;\nloop invariant i98: x != 0 ==> y != j - i;\n\n\nloop invariant i101: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j;\nloop invariant i102: x != 0 ==> y != j - i ==> j - i != 0 ==> i != j;\nloop invariant i103: x == 0 ==> y == j - i ==> j - i != 0 ==> i != j ==> y != 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c"
        ],
        "skipped": [],
        "total": 31,
        "success_count": 27,
        "failure_count": 4,
        "success_rate": 0.8709677419354839
    }
}