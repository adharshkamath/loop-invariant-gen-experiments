{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant y <= n;\nloop invariant x <= 0;\nloop invariant x + y == n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= x;\nloop invariant x + y == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant n == x;\nloop invariant y == n - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x == n - y;\nloop invariant y == n - x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y == n;\nloop invariant x >= 1 ==> x < n;\nloop invariant y >= 1 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\nloop invariant x >= 1 ==> x > 0;\nloop invariant y >= 1 ==> y > 0;\nloop invariant x >= 0 ==> x > 0;\nloop invariant y >= 0 ==> y > 0;\nloop invariant x >= 1 ==> x < n;\nloop invariant y >= 1 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\nloop invariant x >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= 1 ==> x <= n;\nloop invariant y >= 1 ==> y <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\nloop invariant x >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= 1 ==> x <= n;\nloop invariant y >= 1 ==> y <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\nloop invariant x >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= 1 ==> x <= n;\nloop invariant y >= 1 ==> y <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\n*/\n```",
            "```\n/*@\nloop invariant n = x;\nloop invariant y = n - x;\nloop invariant n >= x;\nloop invariant y = n - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y == n - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= x;\nloop invariant x+y=n;\nloop invariant y==x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x <= n - y;\nloop invariant y <= n - x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x + y == n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x - y == -x;\nloop invariant y - x == x;\nloop invariant x - y >= -2*n;\nloop invariant y - x >= 0;\nloop invariant x - y <= 2*n;\nloop invariant y - x <= n;\nloop invariant x * y == n*(n-1)/2;\nloop invariant x * y >= 0;\nloop invariant x * y <= n*(n-1)/2;\nloop invariant x * y == n*(n-1)/2 ==> x == n && y == 0 || x == 0 && y == n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y <= n;\nloop invariant x <= 0;\nloop invariant x + y == n;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: y <= n;\n\nloop invariant i3: x + y == n;\nloop invariant i4: x >= 0;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x + y == n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= x;\nloop invariant x + y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\nloop invariant i3: x + y == n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant n == x;\nloop invariant y == n - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= n;\n\nloop invariant i3: y == n - x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x == n - y;\nloop invariant y == n - x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y == n;\nloop invariant x >= 1 ==> x < n;\nloop invariant y >= 1 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\nloop invariant x >= 1 ==> x > 0;\nloop invariant y >= 1 ==> y > 0;\nloop invariant x >= 0 ==> x > 0;\nloop invariant y >= 0 ==> y > 0;\nloop invariant x >= 1 ==> x < n;\nloop invariant y >= 1 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\nloop invariant x >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= 1 ==> x <= n;\nloop invariant y >= 1 ==> y <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\nloop invariant x >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= 1 ==> x <= n;\nloop invariant y >= 1 ==> y <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\nloop invariant x >= 1 ==> x >= 1;\nloop invariant y >= 1 ==> y >= 1;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= 1 ==> x <= n;\nloop invariant y >= 1 ==> y <= n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= 1 ==> x == n - y;\nloop invariant y >= 1 ==> y == n - x;\nloop invariant x >= 0 ==> x == n - y;\nloop invariant y >= 0 ==> y == n - x;\nloop invariant x >= 1 ==> x + y == n;\nloop invariant y >= 1 ==> x + y == n;\nloop invariant x >= 0 ==> x + y == n;\nloop invariant y >= 0 ==> x + y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x == n - y;\nloop invariant i4: y == n - x;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: x <= n;\nloop invariant i8: y <= n;\nloop invariant i9: x + y == n;\n\n\nloop invariant i12: x >= 0 ==> x <= n;\nloop invariant i13: y >= 0 ==> y <= n;\nloop invariant i14: x >= 1 ==> x == n - y;\nloop invariant i15: y >= 1 ==> y == n - x;\nloop invariant i16: x >= 0 ==> x == n - y;\nloop invariant i17: y >= 0 ==> y == n - x;\nloop invariant i18: x >= 1 ==> x + y == n;\nloop invariant i19: y >= 1 ==> x + y == n;\nloop invariant i20: x >= 0 ==> x + y == n;\nloop invariant i21: y >= 0 ==> x + y == n;\nloop invariant i22: x >= 1 ==> x > 0;\nloop invariant i23: y >= 1 ==> y > 0;\n\n\nloop invariant i26: x >= 1 ==> x >= 1;\nloop invariant i27: y >= 1 ==> y >= 1;\nloop invariant i28: x >= 0 ==> x >= 0;\nloop invariant i29: y >= 0 ==> y >= 0;\nloop invariant i30: x >= 1 ==> x <= n;\nloop invariant i31: y >= 1 ==> y <= n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant n = x;\nloop invariant y = n - x;\nloop invariant n >= x;\nloop invariant y = n - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\n\n\nloop invariant i3: n >= x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y == n - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: y == n - x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= x;\nloop invariant x+y=n;\nloop invariant y==x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x + y == n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x <= n - y;\nloop invariant y <= n - x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant x + y == n;\nloop invariant y <= n - x;\nloop invariant x <= n - y;\nloop invariant x + y == n;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x + y == n;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: x <= n;\nloop invariant i7: y <= n;\nloop invariant i8: x <= n - y;\nloop invariant i9: y <= n - x;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\nloop invariant x >= y;\nloop invariant y >= x;\nloop invariant n - x == y;\nloop invariant n - y == x;\nloop invariant x + y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x + y == n;\n\n\nloop invariant i6: n - x == y;\nloop invariant i7: n - y == x;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x >= n - y;\nloop invariant y >= n - x;\nloop invariant x > 0 ==> x < n;\nloop invariant y > 0 ==> y < n;\nloop invariant x >= 0 ==> x <= n;\nloop invariant y >= 0 ==> y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x + y == n;\nloop invariant i4: x == n - y;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: x <= n;\nloop invariant i8: y <= n;\nloop invariant i9: x + y >= 0;\nloop invariant i10: x + y <= 2*n;\nloop invariant i11: x >= n - y;\nloop invariant i12: y >= n - x;\n\n\nloop invariant i15: x >= 0 ==> x <= n;\nloop invariant i16: y >= 0 ==> y <= n;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x + y == n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= n;\nloop invariant y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x + y == n;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: x <= n;\nloop invariant i7: y <= n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x + y == n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x - y == -x;\nloop invariant y - x == x;\nloop invariant x - y >= -2*n;\nloop invariant y - x >= 0;\nloop invariant x - y <= 2*n;\nloop invariant y - x <= n;\nloop invariant x * y == n*(n-1)/2;\nloop invariant x * y >= 0;\nloop invariant x * y <= n*(n-1)/2;\nloop invariant x * y == n*(n-1)/2 ==> x == n && y == 0 || x == 0 && y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: x + y == n;\nloop invariant i4: x <= n;\nloop invariant i5: y <= n;\nloop invariant i6: x + y >= 0;\nloop invariant i7: x + y <= 2*n;\n\n\nloop invariant i10: x - y >= -2*n;\n\nloop invariant i12: x - y <= 2*n;\nloop invariant i13: y - x <= n;\n\nloop invariant i15: x * y >= 0;\nloop invariant i16: x * y <= n*(n-1)/2;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 49: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: y <= n;\nloop invariant i2: x <= 0;\nloop invariant i3: x + y == n;\nloop invariant i4: x >= 0;\nloop invariant i5: 0 <= x <= n;\nloop invariant i6: 0 <= y <= n;\nloop invariant i7: 0 <= y <= x;\nloop invariant i8: 0 <= n;\nloop invariant i9: n == x;\nloop invariant i10: y == n - x;\nloop invariant i11: x == n - y;\nloop invariant i12: y >= 0;\nloop invariant i13: x <= n;\nloop invariant i14: x >= 1 ==> x < n;\nloop invariant i15: y >= 1 ==> y < n;\nloop invariant i16: x >= 0 ==> x <= n;\nloop invariant i17: y >= 0 ==> y <= n;\nloop invariant i18: x >= 1 ==> x == n - y;\nloop invariant i19: y >= 1 ==> y == n - x;\nloop invariant i20: x >= 0 ==> x == n - y;\nloop invariant i21: y >= 0 ==> y == n - x;\nloop invariant i22: x >= 1 ==> x + y == n;\nloop invariant i23: y >= 1 ==> x + y == n;\nloop invariant i24: x >= 0 ==> x + y == n;\nloop invariant i25: y >= 0 ==> x + y == n;\nloop invariant i26: x >= 1 ==> x > 0;\nloop invariant i27: y >= 1 ==> y > 0;\nloop invariant i28: x >= 0 ==> x > 0;\nloop invariant i29: y >= 0 ==> y > 0;\nloop invariant i30: x >= 1 ==> x >= 1;\nloop invariant i31: y >= 1 ==> y >= 1;\nloop invariant i32: x >= 0 ==> x >= 0;\nloop invariant i33: y >= 0 ==> y >= 0;\nloop invariant i34: x >= 1 ==> x <= n;\nloop invariant i35: y >= 1 ==> y <= n;\nloop invariant i36: n = x;\nloop invariant i37: y = n - x;\nloop invariant i38: n >= x;\nloop invariant i39: x+y=n;\nloop invariant i40: y==x;\nloop invariant i41: x <= n - y;\nloop invariant i42: y <= n - x;\nloop invariant i43: x >= y;\nloop invariant i44: y >= x;\nloop invariant i45: n - x == y;\nloop invariant i46: n - y == x;\nloop invariant i47: x + y >= 0;\nloop invariant i48: x + y <= 2*n;\nloop invariant i49: x >= n - y;\nloop invariant i50: y >= n - x;\nloop invariant i51: x > 0 ==> x < n;\nloop invariant i52: y > 0 ==> y < n;\nloop invariant i53: 0 <= x;\nloop invariant i54: 0 <= y;\nloop invariant i55: x - y == -x;\nloop invariant i56: y - x == x;\nloop invariant i57: x - y >= -2*n;\nloop invariant i58: y - x >= 0;\nloop invariant i59: x - y <= 2*n;\nloop invariant i60: y - x <= n;\nloop invariant i61: x * y == n*(n-1)/2;\nloop invariant i62: x * y >= 0;\nloop invariant i63: x * y <= n*(n-1)/2;\nloop invariant i64: x * y == n*(n-1)/2 ==> x == n && y == 0 || x == 0 && y == n;\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  /*@\nloop invariant i1: y <= n;\n\nloop invariant i3: x + y == n;\nloop invariant i4: x >= 0;\nloop invariant i5: 0 <= x <= n;\nloop invariant i6: 0 <= y <= n;\n\nloop invariant i8: 0 <= n;\n\nloop invariant i10: y == n - x;\nloop invariant i11: x == n - y;\nloop invariant i12: y >= 0;\nloop invariant i13: x <= n;\n\n\nloop invariant i16: x >= 0 ==> x <= n;\nloop invariant i17: y >= 0 ==> y <= n;\nloop invariant i18: x >= 1 ==> x == n - y;\nloop invariant i19: y >= 1 ==> y == n - x;\nloop invariant i20: x >= 0 ==> x == n - y;\nloop invariant i21: y >= 0 ==> y == n - x;\nloop invariant i22: x >= 1 ==> x + y == n;\nloop invariant i23: y >= 1 ==> x + y == n;\nloop invariant i24: x >= 0 ==> x + y == n;\nloop invariant i25: y >= 0 ==> x + y == n;\nloop invariant i26: x >= 1 ==> x > 0;\nloop invariant i27: y >= 1 ==> y > 0;\n\n\nloop invariant i30: x >= 1 ==> x >= 1;\nloop invariant i31: y >= 1 ==> y >= 1;\nloop invariant i32: x >= 0 ==> x >= 0;\nloop invariant i33: y >= 0 ==> y >= 0;\nloop invariant i34: x >= 1 ==> x <= n;\nloop invariant i35: y >= 1 ==> y <= n;\n\n\nloop invariant i38: n >= x;\n\n\nloop invariant i41: x <= n - y;\nloop invariant i42: y <= n - x;\n\n\nloop invariant i45: n - x == y;\nloop invariant i46: n - y == x;\nloop invariant i47: x + y >= 0;\nloop invariant i48: x + y <= 2*n;\nloop invariant i49: x >= n - y;\nloop invariant i50: y >= n - x;\n\n\nloop invariant i53: 0 <= x;\nloop invariant i54: 0 <= y;\n\n\nloop invariant i57: x - y >= -2*n;\n\nloop invariant i59: x - y <= 2*n;\nloop invariant i60: y - x <= n;\n\nloop invariant i62: x * y >= 0;\nloop invariant i63: x * y <= n*(n-1)/2;\n\n*/\nwhile(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 60,
        "success_count": 50,
        "failure_count": 10,
        "success_rate": 0.8333333333333334
    }
}