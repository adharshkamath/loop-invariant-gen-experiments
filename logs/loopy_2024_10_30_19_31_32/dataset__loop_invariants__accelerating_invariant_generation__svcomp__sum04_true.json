{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum04_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant i <= SIZE + 1 ==> sn == i * a;\nloop invariant i >= SIZE + 1 ==> sn == SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant a * i + sn - a <= SIZE * a;\nloop invariant (i = 1 && sn = 0) ==> (sn == SIZE * a || sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = SIZE * a;\nloop invariant sn >= 0;\nloop invariant i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = SIZE * a;\nloop invariant sn >= 0;\nloop invariant i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant i * a == sn + a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1 ==> sn == (i-1)*a;\nloop invariant i <= SIZE ==> sn == i*a;\nloop invariant i > SIZE ==> sn == SIZE*a;\nloop invariant i == SIZE + 1 ==> sn == SIZE*a;\nloop invariant i == SIZE + 1 ==> i == SIZE + 1;\nloop invariant i == SIZE + 1 ==> sn == SIZE*a;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant a >= 0;\nloop invariant SIZE >= 0;\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant a >= 0;\nloop invariant SIZE >= 0;\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant a >= 0;\nloop invariant SIZE >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i0 <= SIZE;\nloop invariant i1 = i + 1;\nloop invariant sn1 = sn + a;\nloop invariant i = SIZE + 1;\nloop invariant sn = SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= (1 + a) * (i - 1);\nloop invariant sn <= (1 + a) * i;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant sn >= 2 * i;\nloop invariant sn <= 2 * (SIZE - i + 1);\nloop invariant sn >= i * a;\nloop invariant sn <= (SIZE - i + 1) * a;\nloop invariant sn >= a * (i - 1);\nloop invariant sn <= a * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == (i-1)*a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant for all k such that 1 <= k <= i: sn + a*k <= SIZE*a;\nloop invariant for all k such that 1 <= k < i: sn + a*k < SIZE*a;\nloop invariant for all k such that i < k <= SIZE: sn + a*k >= SIZE*a;\nloop invariant for all k such that i < k <= SIZE: sn + a*k > SIZE*a;\n*/\n```",
            "```\n/*@\nloop invariant x = a * i;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= x <= SIZE * a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= x <= SIZE * a;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn >= 0;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant i >= 1;\nloop invariant i <= SIZE + 1;\nloop invariant i <= SIZE + 1 ==> sn == i * a;\nloop invariant i >= SIZE + 1 ==> sn == SIZE * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: i <= SIZE + 1;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= SIZE;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\nloop invariant i4: a == 2;\nloop invariant i5: SIZE == 8;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant a * i + sn - a <= SIZE * a;\nloop invariant (i = 1 && sn = 0) ==> (sn == SIZE * a || sn == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = SIZE * a;\nloop invariant sn >= 0;\nloop invariant i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = SIZE * a;\nloop invariant sn >= 0;\nloop invariant i <= SIZE;\nloop invariant 0 <= sn <= SIZE * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant 1 <= sn <= SIZE * a;\nloop invariant sn == (i - 1) * a;\nloop invariant i * a == sn + a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\n\nloop invariant i3: sn == (i - 1) * a;\nloop invariant i4: i * a == sn + a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant i >= 1 ==> sn == (i-1)*a;\nloop invariant i <= SIZE ==> sn == i*a;\nloop invariant i > SIZE ==> sn == SIZE*a;\nloop invariant i == SIZE + 1 ==> sn == SIZE*a;\nloop invariant i == SIZE + 1 ==> i == SIZE + 1;\nloop invariant i == SIZE + 1 ==> sn == SIZE*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 0 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\n\n\n\n\n\nloop invariant i8: i == SIZE + 1 ==> i == SIZE + 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = i * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant a >= 0;\nloop invariant SIZE >= 0;\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant a >= 0;\nloop invariant SIZE >= 0;\nloop invariant 0 <= i <= SIZE;\nloop invariant sn = a * i;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant a >= 0;\nloop invariant SIZE >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: a >= 0;\nloop invariant i6: SIZE >= 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i0 <= SIZE;\nloop invariant i1 = i + 1;\nloop invariant sn1 = sn + a;\nloop invariant i = SIZE + 1;\nloop invariant sn = SIZE * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant sn >= (1 + a) * (i - 1);\nloop invariant sn <= (1 + a) * i;\nloop invariant sn >= 0;\nloop invariant sn <= SIZE * a;\nloop invariant sn >= 2 * i;\nloop invariant sn <= 2 * (SIZE - i + 1);\nloop invariant sn >= i * a;\nloop invariant sn <= (SIZE - i + 1) * a;\nloop invariant sn >= a * (i - 1);\nloop invariant sn <= a * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\nloop invariant i3: sn <= (1 + a) * i;\nloop invariant i4: sn >= 0;\n\n\n\n\n\nloop invariant i10: sn >= a * (i - 1);\nloop invariant i11: sn <= a * i;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == (i-1)*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: 0 <= sn <= SIZE*a;\nloop invariant i3: sn == (i-1)*a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant for all k such that 1 <= k <= i: sn + a*k <= SIZE*a;\nloop invariant for all k such that 1 <= k < i: sn + a*k < SIZE*a;\nloop invariant for all k such that i < k <= SIZE: sn + a*k >= SIZE*a;\nloop invariant for all k such that i < k <= SIZE: sn + a*k > SIZE*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x = a * i;\nloop invariant 1 <= i <= SIZE;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= i <= SIZE;\nloop invariant 0 <= x <= SIZE * a;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 0 <= x <= SIZE * a;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\nloop invariant 0 <= sn <= SIZE * a;\nloop invariant 1 <= i <= SIZE;\nloop invariant x == a * i;\nloop invariant sn == a * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= SIZE*a;\nloop invariant i4: 0 <= sn <= SIZE * a;\nloop invariant i5: i >= 1;\nloop invariant i6: i <= SIZE + 1;\nloop invariant i7: i <= SIZE + 1 ==> sn == i * a;\nloop invariant i8: i >= SIZE + 1 ==> sn == SIZE * a;\nloop invariant i9: i1;\nloop invariant i10: i2;\nloop invariant i11: 0 <= i <= SIZE;\nloop invariant i12: a == 2;\nloop invariant i13: SIZE == 8;\nloop invariant i14: 1 <= i <= SIZE;\nloop invariant i15: a * i + sn - a <= SIZE * a;\nloop invariant i16: (i = 1 && sn = 0) ==> (sn == SIZE * a || sn == 0);\nloop invariant i17: sn = SIZE * a;\nloop invariant i18: i <= SIZE;\nloop invariant i19: 1 <= i <= SIZE + 1;\nloop invariant i20: 1 <= sn <= SIZE * a;\nloop invariant i21: sn == (i - 1) * a;\nloop invariant i22: i * a == sn + a;\nloop invariant i23: 0 <= i <= SIZE + 1;\nloop invariant i24: sn <= SIZE * a;\nloop invariant i25: i >= 1 ==> sn == (i-1)*a;\nloop invariant i26: i <= SIZE ==> sn == i*a;\nloop invariant i27: i > SIZE ==> sn == SIZE*a;\nloop invariant i28: i == SIZE + 1 ==> sn == SIZE*a;\nloop invariant i29: i == SIZE + 1 ==> i == SIZE + 1;\nloop invariant i30: sn = i * a;\nloop invariant i31: sn = a * i;\nloop invariant i32: a >= 0;\nloop invariant i33: SIZE >= 0;\nloop invariant i34: i0 <= SIZE;\nloop invariant i35: i1 = i + 1;\nloop invariant i36: sn1 = sn + a;\nloop invariant i37: i = SIZE + 1;\nloop invariant i38: sn >= (1 + a) * (i - 1);\nloop invariant i39: sn <= (1 + a) * i;\nloop invariant i40: sn >= 2 * i;\nloop invariant i41: sn <= 2 * (SIZE - i + 1);\nloop invariant i42: sn >= i * a;\nloop invariant i43: sn <= (SIZE - i + 1) * a;\nloop invariant i44: sn >= a * (i - 1);\nloop invariant i45: sn <= a * i;\nloop invariant i46: 0 <= sn <= SIZE*a;\nloop invariant i47: sn == (i-1)*a;\nloop invariant i48: for all k such that 1 <= k <= i: sn + a*k <= SIZE*a;\nloop invariant i49: for all k such that 1 <= k < i: sn + a*k < SIZE*a;\nloop invariant i50: for all k such that i < k <= SIZE: sn + a*k >= SIZE*a;\nloop invariant i51: for all k such that i < k <= SIZE: sn + a*k > SIZE*a;\nloop invariant i52: x = a * i;\nloop invariant i53: sn == a * i;\nloop invariant i54: 0 <= x <= SIZE * a;\nloop invariant i55: x == a * i;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 31,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= SIZE*a;\nloop invariant i4: 0 <= sn <= SIZE * a;\nloop invariant i5: i >= 1;\nloop invariant i6: i <= SIZE + 1;\n\nloop invariant i8: i >= SIZE + 1 ==> sn == SIZE * a;\n\n\n\nloop invariant i12: a == 2;\nloop invariant i13: SIZE == 8;\n\n\n\n\n\nloop invariant i19: 1 <= i <= SIZE + 1;\n\nloop invariant i21: sn == (i - 1) * a;\nloop invariant i22: i * a == sn + a;\nloop invariant i23: 0 <= i <= SIZE + 1;\nloop invariant i24: sn <= SIZE * a;\nloop invariant i25: i >= 1 ==> sn == (i-1)*a;\n\nloop invariant i27: i > SIZE ==> sn == SIZE*a;\nloop invariant i28: i == SIZE + 1 ==> sn == SIZE*a;\nloop invariant i29: i == SIZE + 1 ==> i == SIZE + 1;\n\n\nloop invariant i32: a >= 0;\nloop invariant i33: SIZE >= 0;\n\n\n\n\n\nloop invariant i39: sn <= (1 + a) * i;\n\n\n\n\nloop invariant i44: sn >= a * (i - 1);\nloop invariant i45: sn <= a * i;\nloop invariant i46: 0 <= sn <= SIZE*a;\nloop invariant i47: sn == (i-1)*a;\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/up-nested.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum04_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum01_true.c"
        ],
        "skipped": [],
        "total": 178,
        "success_count": 147,
        "failure_count": 31,
        "success_rate": 0.8258426966292135
    }
}