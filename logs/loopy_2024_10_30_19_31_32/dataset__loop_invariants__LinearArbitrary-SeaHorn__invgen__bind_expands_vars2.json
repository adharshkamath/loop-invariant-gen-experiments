{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant MAXDATA > 0;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= MAXDATA * 2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i <= n2;\nloop invariant mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant mc_i <= n2 ==> mc_i == n2;\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant mc_i <= n2 ==> mc_i == n2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= cp1_off <= n1;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant n2 <= MAXDATA*2 - n1;\nloop invariant n1 <= MAXDATA*2;\nloop invariant 1 <= MAXDATA;\nloop invariant 1 <= cp1_off <= n1;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant n2 <= MAXDATA*2 - n1;\nloop invariant n1 <= MAXDATA*2;\nloop invariant 1 <= MAXDATA;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant n2 <= MAXDATA*2 - n1;\nloop invariant n2 <= MAXDATA*2 - cp1_off;\nloop invariant 0 <= n2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant 0 <= n1;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant 0 <= cp1_off + mc_i;\nloop invariant MAXDATA > 0;\nloop invariant n1 > 0;\nloop invariant n2 > 0;\nloop invariant cp1_off > 0;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA*2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA*2 - cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant n1 <= MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off+mc_i <= MAXDATA * 2;\nloop invariant mc_i < n2 ==> cp1_off+mc_i < MAXDATA * 2;\nloop invariant mc_i >= n2 ==> cp1_off+mc_i < MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off+mc_i <= MAXDATA * 2;\nloop invariant mc_i < n2 ==> cp1_off+mc_i < MAXDATA * 2;\nloop invariant mc_i >= n2 ==> cp1_off+mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA*2 - n1;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i <= MAXDATA*2 - n1;\nloop invariant mc_i <= n2;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - 2*n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - 2*n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i <= n2;\nloop invariant cp1_off+mc_i < MAXDATA * 2;\nloop invariant cp1_off+mc_i <= 2*n1;\nloop invariant cp1_off+mc_i <= 2*MAXDATA;\nloop invariant cp1_off+mc_i <= 2*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 4*MAXDATA;\nloop invariant cp1_off+mc_i <= 4*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 8*MAXDATA;\nloop invariant cp1_off+mc_i <= 8*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 16*MAXDATA;\nloop invariant cp1_off+mc_i <= 16*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 32*MAXDATA;\nloop invariant cp1_off+mc_i <= 32*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 64*MAXDATA;\nloop invariant cp1_off+mc_i <= 64*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 128*MAXDATA;\nloop invariant cp1_off+mc_i <= 128*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 256*MAXDATA;\nloop invariant cp1_off+mc_i <= 256*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 512*MAXDATA;\nloop invariant cp1_off+mc_i <= 512*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 1024*MAXDATA;\nloop invariant cp1_off+mc_i <= 1024*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 2048*MAXDATA;\nloop invariant cp1_off+mc_i <= 2048*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 4096*MAXDATA;\nloop invariant cp1_off+mc_i <= 4096*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 8192*MAXDATA;\nloop invariant cp1_off+mc_i <= 8192*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 16384*MAXDATA;\nloop invariant cp1_off+mc_i <= 16384*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 32768*MAXDATA;\nloop invariant cp1_off+mc_i <= 32768*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 65536*MAXDATA;\nloop invariant cp1_off+mc_i <= 65536*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 131072*MAXDATA;\nloop invariant cp1_off+mc_i <= 131072*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 262144*MAXDATA;\nloop invariant cp1_off+mc_i <= 262144*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 524288*MAXDATA;\nloop invariant cp1_off+mc_i <= 524288*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 1048576*MAXDATA;\nloop invariant cp1_off+mc_i <= 1048576*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 2097152*MAXDATA;\nloop invariant cp1_off+mc_i <= 2097152*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 4194304*MAXDATA;\nloop invariant cp1_off+mc_i <= 4194304*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 8388608*MAXDATA;\nloop invariant cp1_off+mc_i <= 8388608*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 16777216*MAXDATA;\nloop invariant cp1_off+mc_i <= 16777216*MAXDATA*2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant n2 <= MAXDATA*2 - n1;\nloop invariant cp1_off+mc_i < MAXDATA * 2;\nloop invariant mc_i < n2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant MAXDATA > 0;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant mc_i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\nloop invariant i5: mc_i >= 0;\n\nloop invariant i7: MAXDATA > 0;\nloop invariant i8: n1 <= MAXDATA * 2;\nloop invariant i9: cp1_off <= n1;\nloop invariant i10: n2 <= MAXDATA * 2 - n1;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= MAXDATA * 2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i <= n2;\nloop invariant mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\nloop invariant i5: mc_i >= 0;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant mc_i <= n2 ==> mc_i == n2;\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant mc_i <= n2 ==> mc_i == n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= cp1_off <= n1;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant n2 <= MAXDATA*2 - n1;\nloop invariant n1 <= MAXDATA*2;\nloop invariant 1 <= MAXDATA;\nloop invariant 1 <= cp1_off <= n1;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant n2 <= MAXDATA*2 - n1;\nloop invariant n1 <= MAXDATA*2;\nloop invariant 1 <= MAXDATA;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: n1 <= MAXDATA * 2;\n\nloop invariant i4: n2 <= MAXDATA*2 - n1;\nloop invariant i5: n1 <= MAXDATA*2;\nloop invariant i6: 1 <= MAXDATA;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant n2 <= MAXDATA*2 - n1;\nloop invariant n2 <= MAXDATA*2 - cp1_off;\nloop invariant 0 <= n2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant 0 <= n1;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant 0 <= cp1_off + mc_i;\nloop invariant MAXDATA > 0;\nloop invariant n1 > 0;\nloop invariant n2 > 0;\nloop invariant cp1_off > 0;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA*2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA*2 - cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: n2 <= MAXDATA*2 - n1;\nloop invariant i3: n2 <= MAXDATA*2 - cp1_off;\n\nloop invariant i5: n1 <= MAXDATA * 2;\n\n\nloop invariant i8: cp1_off + mc_i <= MAXDATA * 2;\n\nloop invariant i10: MAXDATA > 0;\n\n\n\nloop invariant i14: mc_i >= 0;\n\n\n\n\n\n\n\nloop invariant i22: cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant i23: cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\n\nloop invariant i25: cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\n\nloop invariant i27: cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\n\nloop invariant i29: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant n1 <= MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: mc_i >= 0;\n\nloop invariant i4: n1 <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off+mc_i <= MAXDATA * 2;\nloop invariant mc_i < n2 ==> cp1_off+mc_i < MAXDATA * 2;\nloop invariant mc_i >= n2 ==> cp1_off+mc_i < MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off+mc_i <= MAXDATA * 2;\nloop invariant mc_i < n2 ==> cp1_off+mc_i < MAXDATA * 2;\nloop invariant mc_i >= n2 ==> cp1_off+mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: 0 <= MAXDATA;\n\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: n1 <= MAXDATA * 2;\nloop invariant i4: cp1_off <= n1;\nloop invariant i5: n2 <= MAXDATA * 2 - n1;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA*2 - n1;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i <= MAXDATA*2 - n1;\nloop invariant mc_i <= n2;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - 2*n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - 2*n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: 0 <= MAXDATA;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 49,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i <= n2;\nloop invariant cp1_off+mc_i < MAXDATA * 2;\nloop invariant cp1_off+mc_i <= 2*n1;\nloop invariant cp1_off+mc_i <= 2*MAXDATA;\nloop invariant cp1_off+mc_i <= 2*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 4*MAXDATA;\nloop invariant cp1_off+mc_i <= 4*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 8*MAXDATA;\nloop invariant cp1_off+mc_i <= 8*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 16*MAXDATA;\nloop invariant cp1_off+mc_i <= 16*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 32*MAXDATA;\nloop invariant cp1_off+mc_i <= 32*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 64*MAXDATA;\nloop invariant cp1_off+mc_i <= 64*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 128*MAXDATA;\nloop invariant cp1_off+mc_i <= 128*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 256*MAXDATA;\nloop invariant cp1_off+mc_i <= 256*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 512*MAXDATA;\nloop invariant cp1_off+mc_i <= 512*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 1024*MAXDATA;\nloop invariant cp1_off+mc_i <= 1024*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 2048*MAXDATA;\nloop invariant cp1_off+mc_i <= 2048*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 4096*MAXDATA;\nloop invariant cp1_off+mc_i <= 4096*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 8192*MAXDATA;\nloop invariant cp1_off+mc_i <= 8192*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 16384*MAXDATA;\nloop invariant cp1_off+mc_i <= 16384*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 32768*MAXDATA;\nloop invariant cp1_off+mc_i <= 32768*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 65536*MAXDATA;\nloop invariant cp1_off+mc_i <= 65536*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 131072*MAXDATA;\nloop invariant cp1_off+mc_i <= 131072*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 262144*MAXDATA;\nloop invariant cp1_off+mc_i <= 262144*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 524288*MAXDATA;\nloop invariant cp1_off+mc_i <= 524288*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 1048576*MAXDATA;\nloop invariant cp1_off+mc_i <= 1048576*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 2097152*MAXDATA;\nloop invariant cp1_off+mc_i <= 2097152*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 4194304*MAXDATA;\nloop invariant cp1_off+mc_i <= 4194304*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 8388608*MAXDATA;\nloop invariant cp1_off+mc_i <= 8388608*MAXDATA*2;\nloop invariant cp1_off+mc_i <= 16777216*MAXDATA;\nloop invariant cp1_off+mc_i <= 16777216*MAXDATA*2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n\nloop invariant i6: cp1_off+mc_i <= 2*MAXDATA;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1 + n2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant n2 <= MAXDATA*2 - n1;\nloop invariant cp1_off+mc_i < MAXDATA * 2;\nloop invariant mc_i < n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: n2 <= MAXDATA*2 - n1;\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= cp1_off <= n1 is preserved but not established.\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1 is preserved but not established.\nloop invariant 0 <= mc_i <= n2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 is preserved but not established.\nloop invariant mc_i >= 0 is partially proven to be inductive.\nloop invariant mc_i <= n2 is partially proven to be inductive.\nloop invariant MAXDATA > 0 is partially proven to be inductive.\nloop invariant n1 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off <= n1 is partially proven to be inductive.\nloop invariant n2 <= MAXDATA * 2 - n1 is partially proven to be inductive.\nloop invariant mc_i < n2 is preserved but not established.\nloop invariant 0 <= cp1_off <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= n1 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant mc_i <= n2 ==> mc_i == n2 is preserved but not established.\nloop invariant 1 <= cp1_off <= n1 is partially proven to be inductive.\nloop invariant n2 <= MAXDATA*2 - n1 is partially proven to be inductive.\nloop invariant n1 <= MAXDATA*2 is partially proven to be inductive.\nloop invariant 1 <= MAXDATA is partially proven to be inductive.\nloop invariant n2 <= MAXDATA*2 - cp1_off is partially proven to be inductive.\nloop invariant 0 <= n2 is partially proven to be inductive.\nloop invariant 0 <= n1 is partially proven to be inductive.\nloop invariant cp1_off + mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= cp1_off + mc_i is partially proven to be inductive.\nloop invariant n1 > 0 is partially proven to be inductive.\nloop invariant n2 > 0 is partially proven to be inductive.\nloop invariant cp1_off > 0 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA*2 - n1 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA*2 - cp1_off is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n1 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= MAXDATA is partially proven to be inductive.\nloop invariant 0 <= cp1_off+mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant mc_i < n2 ==> cp1_off+mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant mc_i >= n2 ==> cp1_off+mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= n2 <= MAXDATA*2 - n1 is partially proven to be inductive.\nloop invariant mc_i <= MAXDATA*2 - n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - 2*n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - 2*n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 is partially proven to be inductive.\nloop invariant cp1_off+mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 2*n1 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 2*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 2*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 4*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 4*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 8*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 8*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 16*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 16*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 32*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 32*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 64*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 64*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 128*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 128*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 256*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 256*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 512*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 512*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 1024*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 1024*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 2048*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 2048*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 4096*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 4096*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 8192*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 8192*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 16384*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 16384*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 32768*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 32768*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 65536*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 65536*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 131072*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 131072*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 262144*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 262144*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 524288*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 524288*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 1048576*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 1048576*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 2097152*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 2097152*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 4194304*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 4194304*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 8388608*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 8388608*MAXDATA*2 is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 16777216*MAXDATA is partially proven to be inductive.\nloop invariant cp1_off+mc_i <= 16777216*MAXDATA*2 is partially proven to be inductive.\nloop invariant 0 <= n2 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= cp1_off <= n1 + n2 is partially proven to be inductive.\nloop invariant 1 <= n1 <= MAXDATA * 2 is partially proven to be inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= cp1_off <= n1;\nloop invariant i2: 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant i3: 0 <= mc_i <= n2;\nloop invariant i4: cp1_off + mc_i < MAXDATA * 2;\nloop invariant i5: mc_i >= 0;\nloop invariant i6: mc_i <= n2;\nloop invariant i7: MAXDATA > 0;\nloop invariant i8: n1 <= MAXDATA * 2;\nloop invariant i9: cp1_off <= n1;\nloop invariant i10: n2 <= MAXDATA * 2 - n1;\nloop invariant i11: mc_i < n2;\nloop invariant i12: 0 <= cp1_off <= MAXDATA * 2;\nloop invariant i13: 0 <= n1 <= MAXDATA * 2;\nloop invariant i14: 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i15: mc_i <= n2 ==> mc_i == n2;\nloop invariant i16: 1 <= cp1_off <= n1;\nloop invariant i17: n2 <= MAXDATA*2 - n1;\nloop invariant i18: n1 <= MAXDATA*2;\nloop invariant i19: 1 <= MAXDATA;\nloop invariant i20: n2 <= MAXDATA*2 - cp1_off;\nloop invariant i21: 0 <= n2;\nloop invariant i22: 0 <= n1;\nloop invariant i23: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i24: 0 <= cp1_off + mc_i;\nloop invariant i25: n1 > 0;\nloop invariant i26: n2 > 0;\nloop invariant i27: cp1_off > 0;\nloop invariant i28: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA*2 - n1;\nloop invariant i29: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA*2 - cp1_off;\nloop invariant i30: cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i;\nloop invariant i31: cp1_off + mc_i < MAXDATA * 2 ==> 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i32: cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant i33: cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\nloop invariant i34: cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n2;\nloop invariant i35: cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\nloop invariant i36: cp1_off + mc_i < MAXDATA * 2 ==> 0 <= n1;\nloop invariant i37: cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant i38: cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant i39: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant i40: 0 <= MAXDATA;\nloop invariant i41: 0 <= cp1_off+mc_i <= MAXDATA * 2;\nloop invariant i42: mc_i < n2 ==> cp1_off+mc_i < MAXDATA * 2;\nloop invariant i43: mc_i >= n2 ==> cp1_off+mc_i < MAXDATA * 2;\nloop invariant i44: 0 <= n2 <= MAXDATA*2 - n1;\nloop invariant i45: mc_i <= MAXDATA*2 - n1;\nloop invariant i46: mc_i <= n2 + MAXDATA*2 - n1;\nloop invariant i47: mc_i <= n2 + MAXDATA*2 - 2*n1;\nloop invariant i48: mc_i <= n2 + MAXDATA*2 - 2*n1 + n1;\nloop invariant i49: mc_i <= n2 + MAXDATA*2 - n1 + n1;\nloop invariant i50: mc_i <= n2 + MAXDATA*2;\nloop invariant i51: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1;\nloop invariant i52: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1;\nloop invariant i53: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1;\nloop invariant i54: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i55: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i56: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i57: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i58: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i59: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i60: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i61: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i62: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i63: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i64: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i65: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i66: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i67: mc_i <= n2 + MAXDATA*2 - n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1;\nloop invariant i68: cp1_off+mc_i < MAXDATA * 2;\nloop invariant i69: cp1_off+mc_i <= 2*n1;\nloop invariant i70: cp1_off+mc_i <= 2*MAXDATA;\nloop invariant i71: cp1_off+mc_i <= 2*MAXDATA*2;\nloop invariant i72: cp1_off+mc_i <= 4*MAXDATA;\nloop invariant i73: cp1_off+mc_i <= 4*MAXDATA*2;\nloop invariant i74: cp1_off+mc_i <= 8*MAXDATA;\nloop invariant i75: cp1_off+mc_i <= 8*MAXDATA*2;\nloop invariant i76: cp1_off+mc_i <= 16*MAXDATA;\nloop invariant i77: cp1_off+mc_i <= 16*MAXDATA*2;\nloop invariant i78: cp1_off+mc_i <= 32*MAXDATA;\nloop invariant i79: cp1_off+mc_i <= 32*MAXDATA*2;\nloop invariant i80: cp1_off+mc_i <= 64*MAXDATA;\nloop invariant i81: cp1_off+mc_i <= 64*MAXDATA*2;\nloop invariant i82: cp1_off+mc_i <= 128*MAXDATA;\nloop invariant i83: cp1_off+mc_i <= 128*MAXDATA*2;\nloop invariant i84: cp1_off+mc_i <= 256*MAXDATA;\nloop invariant i85: cp1_off+mc_i <= 256*MAXDATA*2;\nloop invariant i86: cp1_off+mc_i <= 512*MAXDATA;\nloop invariant i87: cp1_off+mc_i <= 512*MAXDATA*2;\nloop invariant i88: cp1_off+mc_i <= 1024*MAXDATA;\nloop invariant i89: cp1_off+mc_i <= 1024*MAXDATA*2;\nloop invariant i90: cp1_off+mc_i <= 2048*MAXDATA;\nloop invariant i91: cp1_off+mc_i <= 2048*MAXDATA*2;\nloop invariant i92: cp1_off+mc_i <= 4096*MAXDATA;\nloop invariant i93: cp1_off+mc_i <= 4096*MAXDATA*2;\nloop invariant i94: cp1_off+mc_i <= 8192*MAXDATA;\nloop invariant i95: cp1_off+mc_i <= 8192*MAXDATA*2;\nloop invariant i96: cp1_off+mc_i <= 16384*MAXDATA;\nloop invariant i97: cp1_off+mc_i <= 16384*MAXDATA*2;\nloop invariant i98: cp1_off+mc_i <= 32768*MAXDATA;\nloop invariant i99: cp1_off+mc_i <= 32768*MAXDATA*2;\nloop invariant i100: cp1_off+mc_i <= 65536*MAXDATA;\nloop invariant i101: cp1_off+mc_i <= 65536*MAXDATA*2;\nloop invariant i102: cp1_off+mc_i <= 131072*MAXDATA;\nloop invariant i103: cp1_off+mc_i <= 131072*MAXDATA*2;\nloop invariant i104: cp1_off+mc_i <= 262144*MAXDATA;\nloop invariant i105: cp1_off+mc_i <= 262144*MAXDATA*2;\nloop invariant i106: cp1_off+mc_i <= 524288*MAXDATA;\nloop invariant i107: cp1_off+mc_i <= 524288*MAXDATA*2;\nloop invariant i108: cp1_off+mc_i <= 1048576*MAXDATA;\nloop invariant i109: cp1_off+mc_i <= 1048576*MAXDATA*2;\nloop invariant i110: cp1_off+mc_i <= 2097152*MAXDATA;\nloop invariant i111: cp1_off+mc_i <= 2097152*MAXDATA*2;\nloop invariant i112: cp1_off+mc_i <= 4194304*MAXDATA;\nloop invariant i113: cp1_off+mc_i <= 4194304*MAXDATA*2;\nloop invariant i114: cp1_off+mc_i <= 8388608*MAXDATA;\nloop invariant i115: cp1_off+mc_i <= 8388608*MAXDATA*2;\nloop invariant i116: cp1_off+mc_i <= 16777216*MAXDATA;\nloop invariant i117: cp1_off+mc_i <= 16777216*MAXDATA*2;\nloop invariant i118: 0 <= n2 <= MAXDATA * 2;\nloop invariant i119: 0 <= cp1_off <= n1 + n2;\nloop invariant i120: 1 <= n1 <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\nloop invariant i5: mc_i >= 0;\n\nloop invariant i7: MAXDATA > 0;\nloop invariant i8: n1 <= MAXDATA * 2;\nloop invariant i9: cp1_off <= n1;\nloop invariant i10: n2 <= MAXDATA * 2 - n1;\n\n\n\n\n\n\nloop invariant i17: n2 <= MAXDATA*2 - n1;\nloop invariant i18: n1 <= MAXDATA*2;\nloop invariant i19: 1 <= MAXDATA;\nloop invariant i20: n2 <= MAXDATA*2 - cp1_off;\n\n\nloop invariant i23: cp1_off + mc_i <= MAXDATA * 2;\n\n\n\n\n\n\n\n\nloop invariant i32: cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - n1;\nloop invariant i33: cp1_off + mc_i < MAXDATA * 2 ==> n2 <= MAXDATA*2 - cp1_off;\n\nloop invariant i35: cp1_off + mc_i < MAXDATA * 2 ==> n1 <= MAXDATA * 2;\n\nloop invariant i37: cp1_off + mc_i < MAXDATA * 2 ==> mc_i >= 0;\n\nloop invariant i39: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant i40: 0 <= MAXDATA;\n\nloop invariant i42: mc_i < n2 ==> cp1_off+mc_i < MAXDATA * 2;\n\n\nloop invariant i45: mc_i <= MAXDATA*2 - n1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i70: cp1_off+mc_i <= 2*MAXDATA;\nloop invariant i71: cp1_off+mc_i <= 2*MAXDATA*2;\nloop invariant i72: cp1_off+mc_i <= 4*MAXDATA;\nloop invariant i73: cp1_off+mc_i <= 4*MAXDATA*2;\nloop invariant i74: cp1_off+mc_i <= 8*MAXDATA;\nloop invariant i75: cp1_off+mc_i <= 8*MAXDATA*2;\nloop invariant i76: cp1_off+mc_i <= 16*MAXDATA;\nloop invariant i77: cp1_off+mc_i <= 16*MAXDATA*2;\nloop invariant i78: cp1_off+mc_i <= 32*MAXDATA;\nloop invariant i79: cp1_off+mc_i <= 32*MAXDATA*2;\nloop invariant i80: cp1_off+mc_i <= 64*MAXDATA;\nloop invariant i81: cp1_off+mc_i <= 64*MAXDATA*2;\nloop invariant i82: cp1_off+mc_i <= 128*MAXDATA;\nloop invariant i83: cp1_off+mc_i <= 128*MAXDATA*2;\nloop invariant i84: cp1_off+mc_i <= 256*MAXDATA;\nloop invariant i85: cp1_off+mc_i <= 256*MAXDATA*2;\nloop invariant i86: cp1_off+mc_i <= 512*MAXDATA;\nloop invariant i87: cp1_off+mc_i <= 512*MAXDATA*2;\nloop invariant i88: cp1_off+mc_i <= 1024*MAXDATA;\nloop invariant i89: cp1_off+mc_i <= 1024*MAXDATA*2;\nloop invariant i90: cp1_off+mc_i <= 2048*MAXDATA;\nloop invariant i91: cp1_off+mc_i <= 2048*MAXDATA*2;\nloop invariant i92: cp1_off+mc_i <= 4096*MAXDATA;\nloop invariant i93: cp1_off+mc_i <= 4096*MAXDATA*2;\nloop invariant i94: cp1_off+mc_i <= 8192*MAXDATA;\nloop invariant i95: cp1_off+mc_i <= 8192*MAXDATA*2;\nloop invariant i96: cp1_off+mc_i <= 16384*MAXDATA;\nloop invariant i97: cp1_off+mc_i <= 16384*MAXDATA*2;\nloop invariant i98: cp1_off+mc_i <= 32768*MAXDATA;\nloop invariant i99: cp1_off+mc_i <= 32768*MAXDATA*2;\nloop invariant i100: cp1_off+mc_i <= 65536*MAXDATA;\nloop invariant i101: cp1_off+mc_i <= 65536*MAXDATA*2;\nloop invariant i102: cp1_off+mc_i <= 131072*MAXDATA;\nloop invariant i103: cp1_off+mc_i <= 131072*MAXDATA*2;\nloop invariant i104: cp1_off+mc_i <= 262144*MAXDATA;\nloop invariant i105: cp1_off+mc_i <= 262144*MAXDATA*2;\nloop invariant i106: cp1_off+mc_i <= 524288*MAXDATA;\nloop invariant i107: cp1_off+mc_i <= 524288*MAXDATA*2;\nloop invariant i108: cp1_off+mc_i <= 1048576*MAXDATA;\nloop invariant i109: cp1_off+mc_i <= 1048576*MAXDATA*2;\nloop invariant i110: cp1_off+mc_i <= 2097152*MAXDATA;\nloop invariant i111: cp1_off+mc_i <= 2097152*MAXDATA*2;\nloop invariant i112: cp1_off+mc_i <= 4194304*MAXDATA;\nloop invariant i113: cp1_off+mc_i <= 4194304*MAXDATA*2;\nloop invariant i114: cp1_off+mc_i <= 8388608*MAXDATA;\nloop invariant i115: cp1_off+mc_i <= 8388608*MAXDATA*2;\nloop invariant i116: cp1_off+mc_i <= 16777216*MAXDATA;\nloop invariant i117: cp1_off+mc_i <= 16777216*MAXDATA*2;\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c"
        ],
        "skipped": [],
        "total": 27,
        "success_count": 25,
        "failure_count": 2,
        "success_rate": 0.9259259259259259
    }
}