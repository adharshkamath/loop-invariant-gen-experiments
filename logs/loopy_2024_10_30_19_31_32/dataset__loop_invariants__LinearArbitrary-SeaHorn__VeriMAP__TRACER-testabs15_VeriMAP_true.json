{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    while (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= n;\nloop invariant a + b >= 3*i;\nloop invariant a + b == 3n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= n;\nloop invariant a + b == 3n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a - b == 0 ==> a == b;\nloop invariant a - b == 1 ==> a == b + 1;\nloop invariant a - b == -1 ==> a == b - 1;\nloop invariant a - b == 2 ==> a == b + 2;\nloop invariant a - b == -2 ==> a == b - 2;\nloop invariant a - b == 3 ==> a == b + 3;\nloop invariant a - b == -3 ==> a == b - 3;\nloop invariant a - b == 4 ==> a == b + 4;\nloop invariant a - b == -4 ==> a == b - 4;\nloop invariant a - b == 5 ==> a == b + 5;\nloop invariant a - b == -5 ==> a == b - 5;\nloop invariant a - b == 6 ==> a == b + 6;\nloop invariant a - b == -6 ==> a == b - 6;\nloop invariant a - b == 7 ==> a == b + 7;\nloop invariant a - b == -7 ==> a == b - 7;\nloop invariant a - b == 8 ==> a == b + 8;\nloop invariant a - b == -8 ==> a == b - 8;\nloop invariant a - b == 9 ==> a == b + 9;\nloop invariant a - b == -9 ==> a == b - 9;\nloop invariant a - b == 10 ==> a == b + 10;\nloop invariant a - b == -10 ==> a == b - 10;\nloop invariant a - b == 11 ==> a == b + 11;\nloop invariant a - b == -11 ==> a == b - 11;\nloop invariant a - b == 12 ==> a == b + 12;\nloop invariant a - b == -12 ==> a == b - 12;\nloop invariant a - b == 13 ==> a == b + 13;\nloop invariant a - b == -13 ==> a == b - 13;\nloop invariant a - b == 14 ==> a == b + 14;\nloop invariant a - b == -14 ==> a == b - 14;\nloop invariant a - b == 15 ==> a == b + 15;\nloop invariant a - b == -15 ==> a == b - 15;\nloop invariant a - b == 16 ==> a == b + 16;\nloop invariant a - b == -16 ==> a == b - 16;\nloop invariant a - b == 17 ==> a == b + 17;\nloop invariant a - b == -17 ==> a == b - 17;\nloop invariant a - b == 18 ==> a == b + 18;\nloop invariant a - b == -18 ==> a == b - 18;\nloop invariant a - b == 19 ==> a == b + 19;\nloop invariant a - b == -19 ==> a == b - 19;\nloop invariant a - b == 20 ==> a == b + 20;\nloop invariant a - b == -20 ==> a == b - 20;\nloop invariant a - b == 21 ==> a == b + 21;\nloop invariant a - b == -21 ==> a == b - 21;\nloop invariant a - b == 22 ==> a == b + 22;\nloop invariant a - b == -22 ==> a == b - 22;\nloop invariant a - b == 23 ==> a == b + 23;\nloop invariant a - b == -23 ==> a == b - 23;\nloop invariant a - b == 24 ==> a == b + 24;\nloop invariant a - b == -24 ==> a == b - 24;\nloop invariant a - b == 25 ==> a == b + 25;\nloop invariant a - b == -25 ==> a == b - 25;\nloop invariant a - b == 26 ==> a == b + 26;\nloop invariant a - b == -26 ==> a == b - 26;\nloop invariant a - b == 27 ==> a == b + 27;\nloop invariant a - b == -27 ==> a == b - 27;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*i;\nloop invariant 0 <= b <= 2*i;\nloop invariant ((TRACER_NONDET ==> a >= 1) && (TRACER_NONDET ==> b >= 2));\nloop invariant ((!TRACER_NONDET ==> a >= 2) && (!TRACER_NONDET ==> b >= 1));\nloop invariant a+b >= 3*i;\nloop invariant a+b <= 3*(n-i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a == 2*i + a' && b == i + b';\nloop invariant a' >= 0;\nloop invariant b' >= 0;\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 2 * i;\nloop invariant a + b <= 3 * i;\nloop invariant a + b == 3 * n - 3 * (n - i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3 * n;\nloop invariant 0 <= b <= 3 * n;\nloop invariant TRACER_NONDET ==> a + b == 3 * i;\nloop invariant a + b <= 3 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*n ==> (a == 3*n/2 && b == 3*n/2);\nloop invariant a + b != 3*n ==> ((a == 2*n && b == n) || (a == n && b == 2*n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant min(a, b) >= 0;\nloop invariant max(a, b) <= 2*n;\nloop invariant a + b == (i*3 + 3*n - 2*i - 2*n);\nloop invariant ((i < n) ==> (a >= b));\nloop invariant ((i < n) ==> (b >= a));\nloop invariant ((i == n) ==> (a + b == 3*n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a >= b;\nloop invariant i == (a + b) / 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n * 2;\nloop invariant 0 <= b <= n * 2;\nloop invariant a + b == 3 * i;\nloop invariant ((TRACER_NONDET && (a == (n - i) + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i)) || (!TRACER_NONDET && (a == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i))) ==> (b == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i - 2 * i);\nloop invariant ((!TRACER_NONDET && (a == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i)) || (TRACER_NONDET && (a == (n - i) + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i))) ==> (b == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i - 2 * i);\nloop invariant (TRACER_NONDET || !TRACER_NONDET) ==> (a + b == 3 * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b = 3*i;\nloop invariant a <= 2*b;\nloop invariant b <= 2*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= n;\nloop invariant a - b <= n;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*n - b;\nloop invariant b <= 2*n - a;\nloop invariant a + b == 3*n - 2*i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a >= 0;\nloop invariant a <= 2 * n;\nloop invariant b >= 0;\nloop invariant b <= 2 * n;\nloop invariant a + b == 3 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: i >= 0;\nloop invariant i6: i <= n;\nloop invariant i7: a >= 0;\n\nloop invariant i9: b >= 0;\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= n;\nloop invariant a + b >= 3*i;\nloop invariant a + b == 3n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= n;\nloop invariant a + b == 3n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b >= 3*i;\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a - b == 0 ==> a == b;\nloop invariant a - b == 1 ==> a == b + 1;\nloop invariant a - b == -1 ==> a == b - 1;\nloop invariant a - b == 2 ==> a == b + 2;\nloop invariant a - b == -2 ==> a == b - 2;\nloop invariant a - b == 3 ==> a == b + 3;\nloop invariant a - b == -3 ==> a == b - 3;\nloop invariant a - b == 4 ==> a == b + 4;\nloop invariant a - b == -4 ==> a == b - 4;\nloop invariant a - b == 5 ==> a == b + 5;\nloop invariant a - b == -5 ==> a == b - 5;\nloop invariant a - b == 6 ==> a == b + 6;\nloop invariant a - b == -6 ==> a == b - 6;\nloop invariant a - b == 7 ==> a == b + 7;\nloop invariant a - b == -7 ==> a == b - 7;\nloop invariant a - b == 8 ==> a == b + 8;\nloop invariant a - b == -8 ==> a == b - 8;\nloop invariant a - b == 9 ==> a == b + 9;\nloop invariant a - b == -9 ==> a == b - 9;\nloop invariant a - b == 10 ==> a == b + 10;\nloop invariant a - b == -10 ==> a == b - 10;\nloop invariant a - b == 11 ==> a == b + 11;\nloop invariant a - b == -11 ==> a == b - 11;\nloop invariant a - b == 12 ==> a == b + 12;\nloop invariant a - b == -12 ==> a == b - 12;\nloop invariant a - b == 13 ==> a == b + 13;\nloop invariant a - b == -13 ==> a == b - 13;\nloop invariant a - b == 14 ==> a == b + 14;\nloop invariant a - b == -14 ==> a == b - 14;\nloop invariant a - b == 15 ==> a == b + 15;\nloop invariant a - b == -15 ==> a == b - 15;\nloop invariant a - b == 16 ==> a == b + 16;\nloop invariant a - b == -16 ==> a == b - 16;\nloop invariant a - b == 17 ==> a == b + 17;\nloop invariant a - b == -17 ==> a == b - 17;\nloop invariant a - b == 18 ==> a == b + 18;\nloop invariant a - b == -18 ==> a == b - 18;\nloop invariant a - b == 19 ==> a == b + 19;\nloop invariant a - b == -19 ==> a == b - 19;\nloop invariant a - b == 20 ==> a == b + 20;\nloop invariant a - b == -20 ==> a == b - 20;\nloop invariant a - b == 21 ==> a == b + 21;\nloop invariant a - b == -21 ==> a == b - 21;\nloop invariant a - b == 22 ==> a == b + 22;\nloop invariant a - b == -22 ==> a == b - 22;\nloop invariant a - b == 23 ==> a == b + 23;\nloop invariant a - b == -23 ==> a == b - 23;\nloop invariant a - b == 24 ==> a == b + 24;\nloop invariant a - b == -24 ==> a == b - 24;\nloop invariant a - b == 25 ==> a == b + 25;\nloop invariant a - b == -25 ==> a == b - 25;\nloop invariant a - b == 26 ==> a == b + 26;\nloop invariant a - b == -26 ==> a == b - 26;\nloop invariant a - b == 27 ==> a == b + 27;\nloop invariant a - b == -27 ==> a == b - 27;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a - b == 0 ==> a == b;\nloop invariant i6: a - b == 1 ==> a == b + 1;\nloop invariant i7: a - b == -1 ==> a == b - 1;\nloop invariant i8: a - b == 2 ==> a == b + 2;\nloop invariant i9: a - b == -2 ==> a == b - 2;\nloop invariant i10: a - b == 3 ==> a == b + 3;\nloop invariant i11: a - b == -3 ==> a == b - 3;\nloop invariant i12: a - b == 4 ==> a == b + 4;\nloop invariant i13: a - b == -4 ==> a == b - 4;\nloop invariant i14: a - b == 5 ==> a == b + 5;\nloop invariant i15: a - b == -5 ==> a == b - 5;\nloop invariant i16: a - b == 6 ==> a == b + 6;\nloop invariant i17: a - b == -6 ==> a == b - 6;\nloop invariant i18: a - b == 7 ==> a == b + 7;\nloop invariant i19: a - b == -7 ==> a == b - 7;\nloop invariant i20: a - b == 8 ==> a == b + 8;\nloop invariant i21: a - b == -8 ==> a == b - 8;\nloop invariant i22: a - b == 9 ==> a == b + 9;\nloop invariant i23: a - b == -9 ==> a == b - 9;\nloop invariant i24: a - b == 10 ==> a == b + 10;\nloop invariant i25: a - b == -10 ==> a == b - 10;\nloop invariant i26: a - b == 11 ==> a == b + 11;\nloop invariant i27: a - b == -11 ==> a == b - 11;\nloop invariant i28: a - b == 12 ==> a == b + 12;\nloop invariant i29: a - b == -12 ==> a == b - 12;\nloop invariant i30: a - b == 13 ==> a == b + 13;\nloop invariant i31: a - b == -13 ==> a == b - 13;\nloop invariant i32: a - b == 14 ==> a == b + 14;\nloop invariant i33: a - b == -14 ==> a == b - 14;\nloop invariant i34: a - b == 15 ==> a == b + 15;\nloop invariant i35: a - b == -15 ==> a == b - 15;\nloop invariant i36: a - b == 16 ==> a == b + 16;\nloop invariant i37: a - b == -16 ==> a == b - 16;\nloop invariant i38: a - b == 17 ==> a == b + 17;\nloop invariant i39: a - b == -17 ==> a == b - 17;\nloop invariant i40: a - b == 18 ==> a == b + 18;\nloop invariant i41: a - b == -18 ==> a == b - 18;\nloop invariant i42: a - b == 19 ==> a == b + 19;\nloop invariant i43: a - b == -19 ==> a == b - 19;\nloop invariant i44: a - b == 20 ==> a == b + 20;\nloop invariant i45: a - b == -20 ==> a == b - 20;\nloop invariant i46: a - b == 21 ==> a == b + 21;\nloop invariant i47: a - b == -21 ==> a == b - 21;\nloop invariant i48: a - b == 22 ==> a == b + 22;\nloop invariant i49: a - b == -22 ==> a == b - 22;\nloop invariant i50: a - b == 23 ==> a == b + 23;\nloop invariant i51: a - b == -23 ==> a == b - 23;\nloop invariant i52: a - b == 24 ==> a == b + 24;\nloop invariant i53: a - b == -24 ==> a == b - 24;\nloop invariant i54: a - b == 25 ==> a == b + 25;\nloop invariant i55: a - b == -25 ==> a == b - 25;\nloop invariant i56: a - b == 26 ==> a == b + 26;\nloop invariant i57: a - b == -26 ==> a == b - 26;\nloop invariant i58: a - b == 27 ==> a == b + 27;\nloop invariant i59: a - b == -27 ==> a == b - 27;\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*i;\nloop invariant 0 <= b <= 2*i;\nloop invariant ((TRACER_NONDET ==> a >= 1) && (TRACER_NONDET ==> b >= 2));\nloop invariant ((!TRACER_NONDET ==> a >= 2) && (!TRACER_NONDET ==> b >= 1));\nloop invariant a+b >= 3*i;\nloop invariant a+b <= 3*(n-i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2*i;\nloop invariant i3: 0 <= b <= 2*i;\n\n\nloop invariant i6: a+b >= 3*i;\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a == 2*i + a' && b == i + b';\nloop invariant a' >= 0;\nloop invariant b' >= 0;\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\nloop invariant a + b == 3*i + a' + b';\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a == 2*i + a' && b == i + b';\nloop invariant i5: a' >= 0;\nloop invariant i6: b' >= 0;\nloop invariant i7: a + b == 3*i + a' + b';\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 2 * i;\nloop invariant a + b <= 3 * i;\nloop invariant a + b == 3 * n - 3 * (n - i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a + b >= 2 * i;\nloop invariant i5: a + b <= 3 * i;\nloop invariant i6: a + b == 3 * n - 3 * (n - i);\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n;\nloop invariant 0 <= b <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\nloop invariant a+b = 3*i;\nloop invariant i <= n ==> a <= 3*n;\nloop invariant i <= n ==> b <= 3*n;\nloop invariant i <= n ==> a+b = 3*i;\nloop invariant a <= 3*n;\nloop invariant b <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3 * n;\nloop invariant 0 <= b <= 3 * n;\nloop invariant TRACER_NONDET ==> a + b == 3 * i;\nloop invariant a + b <= 3 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: TRACER_NONDET ==> a + b == 3 * i;\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a + b == 3*n ==> (a == 3*n/2 && b == 3*n/2);\nloop invariant a + b != 3*n ==> ((a == 2*n && b == n) || (a == n && b == 2*n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant min(a, b) >= 0;\nloop invariant max(a, b) <= 2*n;\nloop invariant a + b == (i*3 + 3*n - 2*i - 2*n);\nloop invariant ((i < n) ==> (a >= b));\nloop invariant ((i < n) ==> (b >= a));\nloop invariant ((i == n) ==> (a + b == 3*n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a >= b;\nloop invariant i == (a + b) / 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n * 2;\nloop invariant 0 <= b <= n * 2;\nloop invariant a + b == 3 * i;\nloop invariant ((TRACER_NONDET && (a == (n - i) + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i)) || (!TRACER_NONDET && (a == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i))) ==> (b == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i - 2 * i);\nloop invariant ((!TRACER_NONDET && (a == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i)) || (TRACER_NONDET && (a == (n - i) + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i))) ==> (b == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i - 2 * i);\nloop invariant (TRACER_NONDET || !TRACER_NONDET) ==> (a + b == 3 * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3 * i;\n\n\nloop invariant i7: (TRACER_NONDET || !TRACER_NONDET) ==> (a + b == 3 * i);\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b = 3*i;\nloop invariant a <= 2*b;\nloop invariant b <= 2*a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: a <= 2*b;\nloop invariant i6: b <= 2*a;\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= n;\nloop invariant a - b <= n;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*n - b;\nloop invariant b <= 2*n - a;\nloop invariant a + b == 3*n - 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\nloop invariant i6: a >= i;\nloop invariant i7: b >= i;\n\n\n\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: unexpected token 'n'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2 * n;\nloop invariant i3: 0 <= b <= 2 * n;\nloop invariant i4: a + b == 3 * n;\nloop invariant i5: i >= 0;\nloop invariant i6: i <= n;\nloop invariant i7: a >= 0;\nloop invariant i8: a <= 2 * n;\nloop invariant i9: b >= 0;\nloop invariant i10: b <= 2 * n;\nloop invariant i11: 0 <= a <= 2*n;\nloop invariant i12: 0 <= b <= n;\nloop invariant i13: a + b >= 3*i;\nloop invariant i14: a + b == 3n;\nloop invariant i15: 0 <= b <= 2*n;\nloop invariant i16: a + b == 3*i;\nloop invariant i17: a - b == 0 ==> a == b;\nloop invariant i18: a - b == 1 ==> a == b + 1;\nloop invariant i19: a - b == -1 ==> a == b - 1;\nloop invariant i20: a - b == 2 ==> a == b + 2;\nloop invariant i21: a - b == -2 ==> a == b - 2;\nloop invariant i22: a - b == 3 ==> a == b + 3;\nloop invariant i23: a - b == -3 ==> a == b - 3;\nloop invariant i24: a - b == 4 ==> a == b + 4;\nloop invariant i25: a - b == -4 ==> a == b - 4;\nloop invariant i26: a - b == 5 ==> a == b + 5;\nloop invariant i27: a - b == -5 ==> a == b - 5;\nloop invariant i28: a - b == 6 ==> a == b + 6;\nloop invariant i29: a - b == -6 ==> a == b - 6;\nloop invariant i30: a - b == 7 ==> a == b + 7;\nloop invariant i31: a - b == -7 ==> a == b - 7;\nloop invariant i32: a - b == 8 ==> a == b + 8;\nloop invariant i33: a - b == -8 ==> a == b - 8;\nloop invariant i34: a - b == 9 ==> a == b + 9;\nloop invariant i35: a - b == -9 ==> a == b - 9;\nloop invariant i36: a - b == 10 ==> a == b + 10;\nloop invariant i37: a - b == -10 ==> a == b - 10;\nloop invariant i38: a - b == 11 ==> a == b + 11;\nloop invariant i39: a - b == -11 ==> a == b - 11;\nloop invariant i40: a - b == 12 ==> a == b + 12;\nloop invariant i41: a - b == -12 ==> a == b - 12;\nloop invariant i42: a - b == 13 ==> a == b + 13;\nloop invariant i43: a - b == -13 ==> a == b - 13;\nloop invariant i44: a - b == 14 ==> a == b + 14;\nloop invariant i45: a - b == -14 ==> a == b - 14;\nloop invariant i46: a - b == 15 ==> a == b + 15;\nloop invariant i47: a - b == -15 ==> a == b - 15;\nloop invariant i48: a - b == 16 ==> a == b + 16;\nloop invariant i49: a - b == -16 ==> a == b - 16;\nloop invariant i50: a - b == 17 ==> a == b + 17;\nloop invariant i51: a - b == -17 ==> a == b - 17;\nloop invariant i52: a - b == 18 ==> a == b + 18;\nloop invariant i53: a - b == -18 ==> a == b - 18;\nloop invariant i54: a - b == 19 ==> a == b + 19;\nloop invariant i55: a - b == -19 ==> a == b - 19;\nloop invariant i56: a - b == 20 ==> a == b + 20;\nloop invariant i57: a - b == -20 ==> a == b - 20;\nloop invariant i58: a - b == 21 ==> a == b + 21;\nloop invariant i59: a - b == -21 ==> a == b - 21;\nloop invariant i60: a - b == 22 ==> a == b + 22;\nloop invariant i61: a - b == -22 ==> a == b - 22;\nloop invariant i62: a - b == 23 ==> a == b + 23;\nloop invariant i63: a - b == -23 ==> a == b - 23;\nloop invariant i64: a - b == 24 ==> a == b + 24;\nloop invariant i65: a - b == -24 ==> a == b - 24;\nloop invariant i66: a - b == 25 ==> a == b + 25;\nloop invariant i67: a - b == -25 ==> a == b - 25;\nloop invariant i68: a - b == 26 ==> a == b + 26;\nloop invariant i69: a - b == -26 ==> a == b - 26;\nloop invariant i70: a - b == 27 ==> a == b + 27;\nloop invariant i71: a - b == -27 ==> a == b - 27;\nloop invariant i72: 0 <= a <= 2*i;\nloop invariant i73: 0 <= b <= 2*i;\nloop invariant i74: ((TRACER_NONDET ==> a >= 1) && (TRACER_NONDET ==> b >= 2));\nloop invariant i75: ((!TRACER_NONDET ==> a >= 2) && (!TRACER_NONDET ==> b >= 1));\nloop invariant i76: a+b >= 3*i;\nloop invariant i77: a+b <= 3*(n-i);\nloop invariant i78: a == 2*i + a' && b == i + b';\nloop invariant i79: a' >= 0;\nloop invariant i80: b' >= 0;\nloop invariant i81: a + b == 3*i + a' + b';\nloop invariant i82: a + b >= 2 * i;\nloop invariant i83: a + b <= 3 * i;\nloop invariant i84: a + b == 3 * n - 3 * (n - i);\nloop invariant i85: 0 <= a <= n;\nloop invariant i86: 0 <= a <= 3*n;\nloop invariant i87: 0 <= b <= 3*n;\nloop invariant i88: a+b = 3*i;\nloop invariant i89: i <= n ==> a <= 3*n;\nloop invariant i90: i <= n ==> b <= 3*n;\nloop invariant i91: i <= n ==> a+b = 3*i;\nloop invariant i92: a <= 3*n;\nloop invariant i93: b <= 3*n;\nloop invariant i94: 0 <= a <= 3 * n;\nloop invariant i95: 0 <= b <= 3 * n;\nloop invariant i96: TRACER_NONDET ==> a + b == 3 * i;\nloop invariant i97: a + b <= 3 * n;\nloop invariant i98: a + b == 3*n ==> (a == 3*n/2 && b == 3*n/2);\nloop invariant i99: a + b != 3*n ==> ((a == 2*n && b == n) || (a == n && b == 2*n));\nloop invariant i100: min(a, b) >= 0;\nloop invariant i101: max(a, b) <= 2*n;\nloop invariant i102: a + b == (i*3 + 3*n - 2*i - 2*n);\nloop invariant i103: ((i < n) ==> (a >= b));\nloop invariant i104: ((i < n) ==> (b >= a));\nloop invariant i105: ((i == n) ==> (a + b == 3*n));\nloop invariant i106: a >= b;\nloop invariant i107: i == (a + b) / 3;\nloop invariant i108: 0 <= a <= n * 2;\nloop invariant i109: 0 <= b <= n * 2;\nloop invariant i110: a + b == 3 * i;\nloop invariant i111: ((TRACER_NONDET && (a == (n - i) + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i)) || (!TRACER_NONDET && (a == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i))) ==> (b == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i - 2 * i);\nloop invariant i112: ((!TRACER_NONDET && (a == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i)) || (TRACER_NONDET && (a == (n - i) + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i))) ==> (b == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i - 2 * i);\nloop invariant i113: (TRACER_NONDET || !TRACER_NONDET) ==> (a + b == 3 * i);\nloop invariant i114: a + b = 3*i;\nloop invariant i115: a <= 2*b;\nloop invariant i116: b <= 2*a;\nloop invariant i117: a + b >= n;\nloop invariant i118: a - b <= n;\nloop invariant i119: a >= i;\nloop invariant i120: b >= i;\nloop invariant i121: a <= 2*n - b;\nloop invariant i122: b <= 2*n - a;\nloop invariant i123: a + b == 3*n - 2*i;\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2 * n;\nloop invariant i3: 0 <= b <= 2 * n;\nloop invariant i4: a + b == 3 * n;\nloop invariant i5: i >= 0;\nloop invariant i6: i <= n;\nloop invariant i7: a >= 0;\nloop invariant i8: a <= 2 * n;\nloop invariant i9: b >= 0;\nloop invariant i10: b <= 2 * n;\nloop invariant i11: 0 <= a <= 2*n;\nloop invariant i12: 0 <= b <= n;\nloop invariant i13: a + b >= 3*i;\n\nloop invariant i15: 0 <= b <= 2*n;\nloop invariant i16: a + b == 3*i;\nloop invariant i17: a - b == 0 ==> a == b;\nloop invariant i18: a - b == 1 ==> a == b + 1;\nloop invariant i19: a - b == -1 ==> a == b - 1;\nloop invariant i20: a - b == 2 ==> a == b + 2;\nloop invariant i21: a - b == -2 ==> a == b - 2;\nloop invariant i22: a - b == 3 ==> a == b + 3;\nloop invariant i23: a - b == -3 ==> a == b - 3;\nloop invariant i24: a - b == 4 ==> a == b + 4;\nloop invariant i25: a - b == -4 ==> a == b - 4;\nloop invariant i26: a - b == 5 ==> a == b + 5;\nloop invariant i27: a - b == -5 ==> a == b - 5;\nloop invariant i28: a - b == 6 ==> a == b + 6;\nloop invariant i29: a - b == -6 ==> a == b - 6;\nloop invariant i30: a - b == 7 ==> a == b + 7;\nloop invariant i31: a - b == -7 ==> a == b - 7;\nloop invariant i32: a - b == 8 ==> a == b + 8;\nloop invariant i33: a - b == -8 ==> a == b - 8;\nloop invariant i34: a - b == 9 ==> a == b + 9;\nloop invariant i35: a - b == -9 ==> a == b - 9;\nloop invariant i36: a - b == 10 ==> a == b + 10;\nloop invariant i37: a - b == -10 ==> a == b - 10;\nloop invariant i38: a - b == 11 ==> a == b + 11;\nloop invariant i39: a - b == -11 ==> a == b - 11;\nloop invariant i40: a - b == 12 ==> a == b + 12;\nloop invariant i41: a - b == -12 ==> a == b - 12;\nloop invariant i42: a - b == 13 ==> a == b + 13;\nloop invariant i43: a - b == -13 ==> a == b - 13;\nloop invariant i44: a - b == 14 ==> a == b + 14;\nloop invariant i45: a - b == -14 ==> a == b - 14;\nloop invariant i46: a - b == 15 ==> a == b + 15;\nloop invariant i47: a - b == -15 ==> a == b - 15;\nloop invariant i48: a - b == 16 ==> a == b + 16;\nloop invariant i49: a - b == -16 ==> a == b - 16;\nloop invariant i50: a - b == 17 ==> a == b + 17;\nloop invariant i51: a - b == -17 ==> a == b - 17;\nloop invariant i52: a - b == 18 ==> a == b + 18;\nloop invariant i53: a - b == -18 ==> a == b - 18;\nloop invariant i54: a - b == 19 ==> a == b + 19;\nloop invariant i55: a - b == -19 ==> a == b - 19;\nloop invariant i56: a - b == 20 ==> a == b + 20;\nloop invariant i57: a - b == -20 ==> a == b - 20;\nloop invariant i58: a - b == 21 ==> a == b + 21;\nloop invariant i59: a - b == -21 ==> a == b - 21;\nloop invariant i60: a - b == 22 ==> a == b + 22;\nloop invariant i61: a - b == -22 ==> a == b - 22;\nloop invariant i62: a - b == 23 ==> a == b + 23;\nloop invariant i63: a - b == -23 ==> a == b - 23;\nloop invariant i64: a - b == 24 ==> a == b + 24;\nloop invariant i65: a - b == -24 ==> a == b - 24;\nloop invariant i66: a - b == 25 ==> a == b + 25;\nloop invariant i67: a - b == -25 ==> a == b - 25;\nloop invariant i68: a - b == 26 ==> a == b + 26;\nloop invariant i69: a - b == -26 ==> a == b - 26;\nloop invariant i70: a - b == 27 ==> a == b + 27;\nloop invariant i71: a - b == -27 ==> a == b - 27;\nloop invariant i72: 0 <= a <= 2*i;\nloop invariant i73: 0 <= b <= 2*i;\nloop invariant i74: ((TRACER_NONDET ==> a >= 1) && (TRACER_NONDET ==> b >= 2));\nloop invariant i75: ((!TRACER_NONDET ==> a >= 2) && (!TRACER_NONDET ==> b >= 1));\nloop invariant i76: a+b >= 3*i;\nloop invariant i77: a+b <= 3*(n-i);\nloop invariant i78: a == 2*i + a' && b == i + b';\nloop invariant i79: a' >= 0;\nloop invariant i80: b' >= 0;\nloop invariant i81: a + b == 3*i + a' + b';\nloop invariant i82: a + b >= 2 * i;\nloop invariant i83: a + b <= 3 * i;\nloop invariant i84: a + b == 3 * n - 3 * (n - i);\nloop invariant i85: 0 <= a <= n;\nloop invariant i86: 0 <= a <= 3*n;\nloop invariant i87: 0 <= b <= 3*n;\nloop invariant i88: a+b = 3*i;\nloop invariant i89: i <= n ==> a <= 3*n;\nloop invariant i90: i <= n ==> b <= 3*n;\nloop invariant i91: i <= n ==> a+b = 3*i;\nloop invariant i92: a <= 3*n;\nloop invariant i93: b <= 3*n;\nloop invariant i94: 0 <= a <= 3 * n;\nloop invariant i95: 0 <= b <= 3 * n;\nloop invariant i96: TRACER_NONDET ==> a + b == 3 * i;\nloop invariant i97: a + b <= 3 * n;\nloop invariant i98: a + b == 3*n ==> (a == 3*n/2 && b == 3*n/2);\nloop invariant i99: a + b != 3*n ==> ((a == 2*n && b == n) || (a == n && b == 2*n));\nloop invariant i100: min(a, b) >= 0;\nloop invariant i101: max(a, b) <= 2*n;\nloop invariant i102: a + b == (i*3 + 3*n - 2*i - 2*n);\nloop invariant i103: ((i < n) ==> (a >= b));\nloop invariant i104: ((i < n) ==> (b >= a));\nloop invariant i105: ((i == n) ==> (a + b == 3*n));\nloop invariant i106: a >= b;\nloop invariant i107: i == (a + b) / 3;\nloop invariant i108: 0 <= a <= n * 2;\nloop invariant i109: 0 <= b <= n * 2;\nloop invariant i110: a + b == 3 * i;\nloop invariant i111: ((TRACER_NONDET && (a == (n - i) + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i)) || (!TRACER_NONDET && (a == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i))) ==> (b == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i - 2 * i);\nloop invariant i112: ((!TRACER_NONDET && (a == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i)) || (TRACER_NONDET && (a == (n - i) + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i))) ==> (b == (n - i) * 2 + (n - i) * (n - i + 1) / 2 + (n - i) * 2 * i - 2 * i);\nloop invariant i113: (TRACER_NONDET || !TRACER_NONDET) ==> (a + b == 3 * i);\nloop invariant i114: a + b = 3*i;\nloop invariant i115: a <= 2*b;\nloop invariant i116: b <= 2*a;\nloop invariant i117: a + b >= n;\nloop invariant i118: a - b <= n;\nloop invariant i119: a >= i;\nloop invariant i120: b >= i;\nloop invariant i121: a <= 2*n - b;\nloop invariant i122: b <= 2*n - a;\nloop invariant i123: a + b == 3*n - 2*i;\n*/\nwhile (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n\n  }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 9,
        "success_count": 9,
        "failure_count": 0,
        "success_rate": 1.0
    }
}