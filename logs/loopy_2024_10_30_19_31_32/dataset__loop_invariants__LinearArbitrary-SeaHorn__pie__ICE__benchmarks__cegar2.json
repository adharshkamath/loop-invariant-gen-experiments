{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant ( x < N ==> 0 <= m <= N-1);\nloop invariant ( x < N ==> m >= 0 );\nloop invariant ( x < N ==> m < x );\nloop invariant ( unknown_int() ==> m == x );\nloop invariant ( unknown_int() ==> m == 0 );\nloop invariant ( unknown_int() ==> m == N );\nloop invariant ( unknown_int() ==> m <= N-1 );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N - 1;\nloop invariant (x == 0) ==> (m == 0);\nloop invariant (x > 0) ==> (m == 0) || (m == x - 1);\nloop invariant (N > 0) ==> (m < N);\nloop invariant (N == 0) ==> (m == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (x == N) ==> (m == N);\nloop invariant (x < N) ==> (m < N);\nloop invariant (x < N) ==> (0 <= m <= x - 1);\nloop invariant (x < N) ==> (input != 0 ==> (m == x));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant m >= 0;\nloop invariant m < N;\nloop invariant m == 0 || m > 0 && m < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x > m ==> (0 <= m) && (m < x);\nloop invariant x <= m ==> m = 0;\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m < 0) ==> (m >= N);\nloop invariant (m >= N) ==> (m < 0);\nloop invariant m >= 0 ==> (m < N);\nloop invariant m < N ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= N;\nloop invariant 0 <= m < N;\nloop invariant m <= x;\nloop invariant (N == 0 ==> m == 0);\nloop invariant ((N > 0 && x == N) ==> m == N - 1);\nloop invariant ((N > 0 && x > 0 && x <= N) ==> m < x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant if (N > 0) ==> m < N;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= N;\nloop invariant m == x || m == x - 1;\nloop invariant x == N;\nloop invariant m >= 0;\nloop invariant m < N;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant m <= N;\nloop invariant if (x < N) then (((x = 0) || (x = 1)) ==> (m = 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant N >= 0;\nloop invariant (x == N) ==> (m < N);\nloop invariant (x == N) ==> (m >= 0);\nloop invariant (x == N) ==> (m == N - 1) ==> (input == 0);\nloop invariant (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m <= N - 1);\nloop invariant (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m >= 0);\nloop invariant (x == N) ==> (m == N - 1) ==> (input != 0) ==> (input >= 0);\nloop invariant (x == N) ==> (m == N - 1) ==> (input != 0) ==> (input <= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant m >= 0; loop invariant m < N; loop invariant m >= 0; loop invariant m < N; loop invariant x == N; loop invariant x >= 0; loop invariant x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant m >= 0; loop invariant m < N;\nloop invariant m >= 0; loop invariant m < N; loop invariant m >= 0; loop invariant m < N; loop invariant x == N;\nloop invariant m >= 0; loop invariant m < N; loop invariant x == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant input >= 0;\nloop invariant (if x == N then (m == N-1) else (m <= x-1));\nloop invariant (if x == N then (input == 0) else (input == 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (x > m) ==> (m == x - 1);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (m == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (m == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\n*/\n```",
            "```\n/*@\nloop invariant ( x >= 0 && x <= N );\nloop invariant ( m >= 0 && m <= N );\nloop invariant ( m >= x );\nloop invariant ( input >= 0 );\nloop invariant ( input <= 1 );\nloop invariant ( (input == 0) ==> (m == x) );\nloop invariant ( (input == 1) ==> (m <= x) );\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant ( x < N ==> 0 <= m <= N-1);\nloop invariant ( x < N ==> m >= 0 );\nloop invariant ( x < N ==> m < x );\nloop invariant ( unknown_int() ==> m == x );\nloop invariant ( unknown_int() ==> m == 0 );\nloop invariant ( unknown_int() ==> m == N );\nloop invariant ( unknown_int() ==> m <= N-1 );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\nloop invariant ( unknown_int() ==> m < N );\nloop invariant ( unknown_int() ==> m >= 0 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N - 1;\nloop invariant (x == 0) ==> (m == 0);\nloop invariant (x > 0) ==> (m == 0) || (m == x - 1);\nloop invariant (N > 0) ==> (m < N);\nloop invariant (N == 0) ==> (m == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\nloop invariant i5: (N > 0) ==> (m < N);\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (x == N) ==> (m == N);\nloop invariant (x < N) ==> (m < N);\nloop invariant (x < N) ==> (0 <= m <= x - 1);\nloop invariant (x < N) ==> (input != 0 ==> (m == x));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\nloop invariant i3: (x < N) ==> (m < N);\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant m >= 0;\nloop invariant m < N;\nloop invariant m == 0 || m > 0 && m < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x > m ==> (0 <= m) && (m < x);\nloop invariant x <= m ==> m = 0;\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m < 0) ==> (m >= N);\nloop invariant (m >= N) ==> (m < 0);\nloop invariant m >= 0 ==> (m < N);\nloop invariant m < N ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\nloop invariant (m < N) ==> (m >= 0);\nloop invariant (m >= 0) ==> (m < N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= N;\nloop invariant 0 <= m < N;\nloop invariant m <= x;\nloop invariant (N == 0 ==> m == 0);\nloop invariant ((N > 0 && x == N) ==> m == N - 1);\nloop invariant ((N > 0 && x > 0 && x <= N) ==> m < x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\nloop invariant i1: 0 <= x;\n\n\nloop invariant i4: m <= x;\nloop invariant i5: (N == 0 ==> m == 0);\n\nloop invariant i7: ((N > 0 && x > 0 && x <= N) ==> m < x);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant if (N > 0) ==> m < N;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\nloop invariant if (N > 0) ==> x <= N;\nloop invariant if (N > 0) ==> m <= N - 1;\nloop invariant if (N > 0) ==> x <= N - 1;\nloop invariant if (N > 0) ==> m >= 0;\nloop invariant if (N > 0) ==> m <= x;\nloop invariant if (N > 0) ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= N;\nloop invariant m == x || m == x - 1;\nloop invariant x == N;\nloop invariant m >= 0;\nloop invariant m < N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant 0 <= m <= x;\nloop invariant m <= N;\nloop invariant if (x < N) then (((x = 0) || (x = 1)) ==> (m = 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant N >= 0;\nloop invariant (x == N) ==> (m < N);\nloop invariant (x == N) ==> (m >= 0);\nloop invariant (x == N) ==> (m == N - 1) ==> (input == 0);\nloop invariant (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m <= N - 1);\nloop invariant (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m >= 0);\nloop invariant (x == N) ==> (m == N - 1) ==> (input != 0) ==> (input >= 0);\nloop invariant (x == N) ==> (m == N - 1) ==> (input != 0) ==> (input <= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\nloop invariant i7: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m <= N - 1);\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant m >= 0; loop invariant m < N; loop invariant m >= 0; loop invariant m < N; loop invariant x == N; loop invariant x >= 0; loop invariant x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant m >= 0; loop invariant m < N;\nloop invariant m >= 0; loop invariant m < N; loop invariant m >= 0; loop invariant m < N; loop invariant x == N;\nloop invariant m >= 0; loop invariant m < N; loop invariant x == N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: m >= 0; loop invariant m < N; loop invariant m >= 0; loop invariant m < N; loop invariant x == N;\nloop invariant i3: m >= 0; loop invariant m < N; loop invariant x == N;\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant input >= 0;\nloop invariant (if x == N then (m == N-1) else (m <= x-1));\nloop invariant (if x == N then (input == 0) else (input == 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= m <= N;\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (x > m) ==> (m == x - 1);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (m == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (m == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\nloop invariant (m == 0) ==> (x == 0);\nloop invariant (m == 0) ==> (N == 0);\nloop invariant (m == 0) ==> (input == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\nloop invariant i7: (m == 0) ==> (m == 0);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( x >= 0 && x <= N );\nloop invariant ( m >= 0 && m <= N );\nloop invariant ( m >= x );\nloop invariant ( input >= 0 );\nloop invariant ( input <= 1 );\nloop invariant ( (input == 0) ==> (m == x) );\nloop invariant ( (input == 1) ==> (m <= x) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\nloop invariant i7: ( (input == 1) ==> (m <= x) );\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\nloop invariant i1: ( x < N ==> 0 <= m <= N-1);\nloop invariant i2: ( x < N ==> m >= 0 );\nloop invariant i3: ( x < N ==> m < x );\nloop invariant i4: ( unknown_int() ==> m == x );\nloop invariant i5: ( unknown_int() ==> m == 0 );\nloop invariant i6: ( unknown_int() ==> m == N );\nloop invariant i7: ( unknown_int() ==> m <= N-1 );\nloop invariant i8: ( unknown_int() ==> m >= 0 );\nloop invariant i9: ( unknown_int() ==> m < N );\nloop invariant i10: 0 <= x <= N;\nloop invariant i11: 0 <= m <= N - 1;\nloop invariant i12: (x == 0) ==> (m == 0);\nloop invariant i13: (x > 0) ==> (m == 0) || (m == x - 1);\nloop invariant i14: (N > 0) ==> (m < N);\nloop invariant i15: (N == 0) ==> (m == 0);\nloop invariant i16: (x == N) ==> (m == N);\nloop invariant i17: (x < N) ==> (m < N);\nloop invariant i18: (x < N) ==> (0 <= m <= x - 1);\nloop invariant i19: (x < N) ==> (input != 0 ==> (m == x));\nloop invariant i20: m >= 0;\nloop invariant i21: m < N;\nloop invariant i22: m == 0 || m > 0 && m < x;\nloop invariant i23: x > m ==> (0 <= m) && (m < x);\nloop invariant i24: x <= m ==> m = 0;\nloop invariant i25: (m >= 0) ==> (m < N);\nloop invariant i26: (m < N) ==> (m >= 0);\nloop invariant i27: (m < 0) ==> (m >= N);\nloop invariant i28: (m >= N) ==> (m < 0);\nloop invariant i29: m >= 0 ==> (m < N);\nloop invariant i30: m < N ==> (m >= 0);\nloop invariant i31: 0 <= x;\nloop invariant i32: x <= N;\nloop invariant i33: 0 <= m < N;\nloop invariant i34: m <= x;\nloop invariant i35: (N == 0 ==> m == 0);\nloop invariant i36: ((N > 0 && x == N) ==> m == N - 1);\nloop invariant i37: ((N > 0 && x > 0 && x <= N) ==> m < x);\nloop invariant i38: 0 <= m <= N;\nloop invariant i39: if (N > 0) ==> m < N;\nloop invariant i40: if (N > 0) ==> m >= 0;\nloop invariant i41: if (N > 0) ==> m <= x;\nloop invariant i42: if (N > 0) ==> x >= 0;\nloop invariant i43: if (N > 0) ==> x <= N;\nloop invariant i44: if (N > 0) ==> m <= N - 1;\nloop invariant i45: if (N > 0) ==> x <= N - 1;\nloop invariant i46: m == x || m == x - 1;\nloop invariant i47: x == N;\nloop invariant i48: 1 <= x <= N;\nloop invariant i49: 0 <= m <= x;\nloop invariant i50: m <= N;\nloop invariant i51: if (x < N) then (((x = 0) || (x = 1)) ==> (m = 0));\nloop invariant i52: N >= 0;\nloop invariant i53: (x == N) ==> (m < N);\nloop invariant i54: (x == N) ==> (m >= 0);\nloop invariant i55: (x == N) ==> (m == N - 1) ==> (input == 0);\nloop invariant i56: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m <= N - 1);\nloop invariant i57: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m >= 0);\nloop invariant i58: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (input >= 0);\nloop invariant i59: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (input <= 1);\nloop invariant i60: 0 <= x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant m >= 0; loop invariant m < N; loop invariant m >= 0; loop invariant m < N; loop invariant x == N; loop invariant x >= 0; loop invariant x <= N; loop invariant x >= 0; loop invariant x <= N; loop invariant m >= 0; loop invariant m < N;\nloop invariant i61: m >= 0; loop invariant m < N; loop invariant m >= 0; loop invariant m < N; loop invariant x == N;\nloop invariant i62: m >= 0; loop invariant m < N; loop invariant x == N;\nloop invariant i63: input >= 0;\nloop invariant i64: (if x == N then (m == N-1) else (m <= x-1));\nloop invariant i65: (if x == N then (input == 0) else (input == 1));\nloop invariant i66: (m == 0) ==> (x == 0);\nloop invariant i67: (x > m) ==> (m == x - 1);\nloop invariant i68: (m == 0) ==> (input == 0);\nloop invariant i69: (m == 0) ==> (N == 0);\nloop invariant i70: (m == 0) ==> (m == 0);\nloop invariant i71: ( x >= 0 && x <= N );\nloop invariant i72: ( m >= 0 && m <= N );\nloop invariant i73: ( m >= x );\nloop invariant i74: ( input >= 0 );\nloop invariant i75: ( input <= 1 );\nloop invariant i76: ( (input == 0) ==> (m == x) );\nloop invariant i77: ( (input == 1) ==> (m <= x) );\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "combined_annotation_num_solver_calls": 29,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\nloop invariant i1: ( x < N ==> 0 <= m <= N-1);\nloop invariant i2: ( x < N ==> m >= 0 );\n\n\n\n\n\n\n\n\n\nloop invariant i12: (x == 0) ==> (m == 0);\nloop invariant i13: (x > 0) ==> (m == 0) || (m == x - 1);\nloop invariant i14: (N > 0) ==> (m < N);\nloop invariant i15: (N == 0) ==> (m == 0);\nloop invariant i16: (x == N) ==> (m == N);\nloop invariant i17: (x < N) ==> (m < N);\n\nloop invariant i19: (x < N) ==> (input != 0 ==> (m == x));\nloop invariant i20: m >= 0;\n\nloop invariant i22: m == 0 || m > 0 && m < x;\nloop invariant i23: x > m ==> (0 <= m) && (m < x);\n\n\nloop invariant i26: (m < N) ==> (m >= 0);\nloop invariant i27: (m < 0) ==> (m >= N);\n\n\nloop invariant i30: m < N ==> (m >= 0);\nloop invariant i31: 0 <= x;\n\n\nloop invariant i34: m <= x;\nloop invariant i35: (N == 0 ==> m == 0);\nloop invariant i36: ((N > 0 && x == N) ==> m == N - 1);\nloop invariant i37: ((N > 0 && x > 0 && x <= N) ==> m < x);\n\n\n\n\n\n\n\n\nloop invariant i46: m == x || m == x - 1;\n\n\nloop invariant i49: 0 <= m <= x;\n\n\n\n\nloop invariant i54: (x == N) ==> (m >= 0);\nloop invariant i55: (x == N) ==> (m == N - 1) ==> (input == 0);\nloop invariant i56: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m <= N - 1);\nloop invariant i57: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (m >= 0);\nloop invariant i58: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (input >= 0);\nloop invariant i59: (x == N) ==> (m == N - 1) ==> (input != 0) ==> (input <= 1);\n\nloop invariant i61: m >= 0; loop invariant m < N; loop invariant m >= 0; loop invariant m < N; loop invariant x == N;\nloop invariant i62: m >= 0; loop invariant m < N; loop invariant x == N;\nloop invariant i63: input >= 0;\n\n\nloop invariant i66: (m == 0) ==> (x == 0);\nloop invariant i67: (x > m) ==> (m == x - 1);\nloop invariant i68: (m == 0) ==> (input == 0);\nloop invariant i69: (m == 0) ==> (N == 0);\nloop invariant i70: (m == 0) ==> (m == 0);\nloop invariant i71: ( x >= 0 && x <= N );\nloop invariant i72: ( m >= 0 && m <= N );\nloop invariant i73: ( m >= x );\nloop invariant i74: ( input >= 0 );\nloop invariant i75: ( input <= 1 );\nloop invariant i76: ( (input == 0) ==> (m == x) );\nloop invariant i77: ( (input == 1) ==> (m <= x) );\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c"
        ],
        "skipped": [],
        "total": 71,
        "success_count": 60,
        "failure_count": 11,
        "success_rate": 0.8450704225352113
    }
}