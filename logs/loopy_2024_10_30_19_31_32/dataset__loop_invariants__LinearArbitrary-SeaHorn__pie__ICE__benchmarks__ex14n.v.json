{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \twhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant v3 == 1;\nloop invariant v2 == 0 || v2 == 1;\nloop invariant v1 == 0 || v1 == 1;\nloop invariant y == 0 || y == 1;\nloop invariant x == 0 || x == 1;\nloop invariant N == 0 || N == 1;\nloop invariant N == 1 ==> x <= 1;\nloop invariant N == 1 ==> x >= 0;\nloop invariant y == 0 ==> x <= N;\nloop invariant y == 0 ==> x >= 0;\nloop invariant x == 0 ==> x <= N;\nloop invariant x == 0 ==> x >= 0;\nloop invariant y == 0 ==> y <= N;\nloop invariant y == 0 ==> y >= 0;\nloop invariant x == 1 ==> x <= N;\nloop invariant x == 1 ==> x >= 0;\nloop invariant y == 1 ==> y <= N;\nloop invariant y == 1 ==> y >= 0;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant y <= N;\nloop invariant y >= 0;\nloop invariant x == N ==> v1 == v2;\nloop invariant x == N ==> v2 == v3;\nloop invariant x == N ==> v3 == v1;\nloop invariant x == N ==> v1 == v3;\nloop invariant x == N ==> v2 == v1;\nloop invariant x == 0 ==> v1 == 1;\nloop invariant x == 0 ==> v2 == 0;\nloop invariant x == 0 ==> v3 == 1;\nloop invariant x == 1 ==> v1 == 0;\nloop invariant x == 1 ==> v2 == 1;\nloop invariant x == 1 ==> v3 == 0;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant 0 <= N <= 1;\nloop invariant x <= N ==> x == 0 || x == 1;\nloop invariant y <= N ==> y == 0 || y == 1;\nloop invariant v1 <= 1 ==> v1 == 0 || v1 == 1;\nloop invariant v2 <= 1 ==> v2 == 0 || v2 == 1;\nloop invariant v3 <= 1 ==> v3 == 0 || v3 == 1;\nloop invariant N <= 1 ==> N == 0 || N == 1;\nloop invariant x >= 0 ==> x == 0 || x == 1;\nloop invariant y >= 0 ==> y == 0 || y == 1;\nloop invariant v1 >= 0 ==> v1 == 0 || v1 == 1;\nloop invariant v2 >= 0 ==> v2 == 0 || v2 == 1;\nloop invariant v3 >= 0 ==> v3 == 0 || v3 == 1;\nloop invariant N >= 0 ==> N == 0 || N == 1;\nloop invariant x == 0 ==> x <= N;\nloop invariant x == 0 ==> x >= 0;\nloop invariant y == 0 ==> y <= N;\nloop invariant y == 0 ==> y >= 0;\nloop invariant v1 == 0 ==> v1 <= 1;\nloop invariant v1 == 0 ==> v1 >= 0;\nloop invariant v2 == 0 ==> v2 <= 1;\nloop invariant v2 == 0 ==> v2 >= 0;\nloop invariant v3 == 0 ==> v3 <= 1;\nloop invariant v3 == 0 ==> v3 >= 0;\nloop invariant N == 0 ==> N <= 1;\nloop invariant N == 0 ==> N >= 0;\nloop invariant x == 1 ==> x <= N;\nloop invariant x == 1 ==> x >= 0;\nloop invariant y == 1 ==> y <= N;\nloop invariant y == 1 ==> y >= 0;\nloop invariant v1 == 1 ==> v1 <= 1;\nloop invariant v1 == 1 ==> v1 >= 0;\nloop invariant v2 == 1 ==> v2 <= 1;\nloop invariant v2 == 1 ==> v2 >= 0;\nloop invariant v3 == 1 ==> v3 <= 1;\nloop invariant v3 == 1 ==> v3 >= 0;\nloop invariant N == 1 ==> N <= 1;\nloop invariant N == 1 ==> N >= 0;\nloop invariant x <= N && y <= N;\nloop invariant v1 <= 1 && v2 <= 1 && v3 <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant v1 == v3;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant x + y == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant -N <= y <= N;\nloop invariant v3 == v1;\nloop invariant v2 == v3;\nloop invariant v1 == v2;\nloop invariant v1 == v3;\nloop invariant v2 == v1;\nloop invariant v3 == v2;\nloop invariant v1 == v2 == v3;\nloop invariant v1 == v3 == v2;\nloop invariant v2 == v1 == v3;\nloop invariant v2 == v3 == v1;\nloop invariant v3 == v2 == v1;\nloop invariant v3 == v1 == v2;\nloop invariant v2 == v1;\nloop invariant v1 == v2;\nloop invariant v3 == v1;\nloop invariant v1 == v3;\nloop invariant v2 == v3;\nloop invariant v3 == v2;\nloop invariant v1 == v2 == v3 == v3;\nloop invariant v2 == v3 == v1 == v1;\nloop invariant v3 == v1 == v2 == v2;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v1;\nloop invariant v2 == v3 == v1 == v2;\nloop invariant v3 == v1 == v2 == v3;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant y = N - x;\nloop invariant v1 = v2;\nloop invariant v2 = v3;\nloop invariant v3 = v1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant y = N - x;\nloop invariant v1 <= v2 <= v3;\nloop invariant 0 <= v1 <= N;\nloop invariant 0 <= v2 <= N;\nloop invariant 0 <= v3 <= N;\nloop invariant (if (y < 0 || y >= N) then 0 == 1 else 1 == 1);\nloop invariant (if (x <= N) then y = N - x else 1 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 1 <= y <= N - 1;\nloop invariant v1 = v2;\nloop invariant v2 = v3;\nloop invariant v3 = v1;\nloop invariant x + y = N;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant x + y = N ==> x + y = N;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant y = N - x;\nloop invariant v1 = v2;\nloop invariant v2 = v3;\nloop invariant v3 = v1;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant x + y = N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant x + y == N;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == x;\nloop invariant v2 == y;\nloop invariant v3 == N - x;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v2;\nloop invariant v1 <= v1;\nloop invariant v2 <= v3;\nloop invariant v3 <= v2;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\n*/\n```",
            "```\n/*@\nloop invariant x <= N && x >= 1;\nloop invariant y = N - x;\nloop invariant 0 <= y <= N;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant x + y == N;\nloop invariant x * y == N * (N - 1) / 2;\nloop invariant v1 == x;\nloop invariant v2 == y;\nloop invariant v3 == N - x - y;\n*/\n```",
            "```\n/*@\nloop invariant x <= N;\nloop invariant 1 <= x <= N;\nloop invariant v1 == v3;\nloop invariant v2 == v1;\nloop invariant v3 == v2;\nloop invariant v1 == v3 ==> v2 == v1;\nloop invariant v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v1 == v3;\nloop invariant x == N ==> v2 == v1;\nloop invariant x == N ==> v3 == v2;\nloop invariant x == N ==> v1 == v2;\nloop invariant x == N ==> v2 == v3;\nloop invariant x == N ==> v3 == v1;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N-x;\nloop invariant v1 = v2;\nloop invariant v2 = v3;\nloop invariant v3 = v1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant x <= y;\nloop invariant y == N-x;\nloop invariant x == N-y;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N + 1;\nloop invariant 0 <= y <= N;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v3;\nloop invariant v2 == v1;\nloop invariant v3 == v2;\nloop invariant x <= N;\nloop invariant y <= N;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant x <= N + 1;\nloop invariant y <= N;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant v1 == v3;\nloop invariant v2 == v1;\nloop invariant v3 == v2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant (y + x) == N;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant (v1 + v2 + v3) == 0;\nloop invariant (v1 == 1 || v2 == 1 || v3 == 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant v3 == 1;\nloop invariant v2 == 0 || v2 == 1;\nloop invariant v1 == 0 || v1 == 1;\nloop invariant y == 0 || y == 1;\nloop invariant x == 0 || x == 1;\nloop invariant N == 0 || N == 1;\nloop invariant N == 1 ==> x <= 1;\nloop invariant N == 1 ==> x >= 0;\nloop invariant y == 0 ==> x <= N;\nloop invariant y == 0 ==> x >= 0;\nloop invariant x == 0 ==> x <= N;\nloop invariant x == 0 ==> x >= 0;\nloop invariant y == 0 ==> y <= N;\nloop invariant y == 0 ==> y >= 0;\nloop invariant x == 1 ==> x <= N;\nloop invariant x == 1 ==> x >= 0;\nloop invariant y == 1 ==> y <= N;\nloop invariant y == 1 ==> y >= 0;\nloop invariant x <= N;\nloop invariant x >= 0;\nloop invariant y <= N;\nloop invariant y >= 0;\nloop invariant x == N ==> v1 == v2;\nloop invariant x == N ==> v2 == v3;\nloop invariant x == N ==> v3 == v1;\nloop invariant x == N ==> v1 == v3;\nloop invariant x == N ==> v2 == v1;\nloop invariant x == 0 ==> v1 == 1;\nloop invariant x == 0 ==> v2 == 0;\nloop invariant x == 0 ==> v3 == 1;\nloop invariant x == 1 ==> v1 == 0;\nloop invariant x == 1 ==> v2 == 1;\nloop invariant x == 1 ==> v3 == 0;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant 0 <= N <= 1;\nloop invariant x <= N ==> x == 0 || x == 1;\nloop invariant y <= N ==> y == 0 || y == 1;\nloop invariant v1 <= 1 ==> v1 == 0 || v1 == 1;\nloop invariant v2 <= 1 ==> v2 == 0 || v2 == 1;\nloop invariant v3 <= 1 ==> v3 == 0 || v3 == 1;\nloop invariant N <= 1 ==> N == 0 || N == 1;\nloop invariant x >= 0 ==> x == 0 || x == 1;\nloop invariant y >= 0 ==> y == 0 || y == 1;\nloop invariant v1 >= 0 ==> v1 == 0 || v1 == 1;\nloop invariant v2 >= 0 ==> v2 == 0 || v2 == 1;\nloop invariant v3 >= 0 ==> v3 == 0 || v3 == 1;\nloop invariant N >= 0 ==> N == 0 || N == 1;\nloop invariant x == 0 ==> x <= N;\nloop invariant x == 0 ==> x >= 0;\nloop invariant y == 0 ==> y <= N;\nloop invariant y == 0 ==> y >= 0;\nloop invariant v1 == 0 ==> v1 <= 1;\nloop invariant v1 == 0 ==> v1 >= 0;\nloop invariant v2 == 0 ==> v2 <= 1;\nloop invariant v2 == 0 ==> v2 >= 0;\nloop invariant v3 == 0 ==> v3 <= 1;\nloop invariant v3 == 0 ==> v3 >= 0;\nloop invariant N == 0 ==> N <= 1;\nloop invariant N == 0 ==> N >= 0;\nloop invariant x == 1 ==> x <= N;\nloop invariant x == 1 ==> x >= 0;\nloop invariant y == 1 ==> y <= N;\nloop invariant y == 1 ==> y >= 0;\nloop invariant v1 == 1 ==> v1 <= 1;\nloop invariant v1 == 1 ==> v1 >= 0;\nloop invariant v2 == 1 ==> v2 <= 1;\nloop invariant v2 == 1 ==> v2 >= 0;\nloop invariant v3 == 1 ==> v3 <= 1;\nloop invariant v3 == 1 ==> v3 >= 0;\nloop invariant N == 1 ==> N <= 1;\nloop invariant N == 1 ==> N >= 0;\nloop invariant x <= N && y <= N;\nloop invariant v1 <= 1 && v2 <= 1 && v3 <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\nloop invariant i8: N == 1 ==> x >= 0;\n\nloop invariant i10: y == 0 ==> x >= 0;\nloop invariant i11: x == 0 ==> x <= N;\nloop invariant i12: x == 0 ==> x >= 0;\n\nloop invariant i14: y == 0 ==> y >= 0;\n\nloop invariant i16: x == 1 ==> x >= 0;\n\nloop invariant i18: y == 1 ==> y >= 0;\n\nloop invariant i20: x >= 0;\n\n\n\n\n\n\n\nloop invariant i28: x == 0 ==> v1 == 1;\nloop invariant i29: x == 0 ==> v2 == 0;\nloop invariant i30: x == 0 ==> v3 == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i52: v1 == 0 ==> v1 <= 1;\nloop invariant i53: v1 == 0 ==> v1 >= 0;\nloop invariant i54: v2 == 0 ==> v2 <= 1;\nloop invariant i55: v2 == 0 ==> v2 >= 0;\nloop invariant i56: v3 == 0 ==> v3 <= 1;\nloop invariant i57: v3 == 0 ==> v3 >= 0;\nloop invariant i58: N == 0 ==> N <= 1;\nloop invariant i59: N == 0 ==> N >= 0;\nloop invariant i60: v1 == 1 ==> v1 <= 1;\nloop invariant i61: v1 == 1 ==> v1 >= 0;\nloop invariant i62: v2 == 1 ==> v2 <= 1;\nloop invariant i63: v2 == 1 ==> v2 >= 0;\nloop invariant i64: v3 == 1 ==> v3 <= 1;\nloop invariant i65: v3 == 1 ==> v3 >= 0;\nloop invariant i66: N == 1 ==> N <= 1;\nloop invariant i67: N == 1 ==> N >= 0;\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant v1 == v3;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant x + y == N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant -N <= y <= N;\nloop invariant v3 == v1;\nloop invariant v2 == v3;\nloop invariant v1 == v2;\nloop invariant v1 == v3;\nloop invariant v2 == v1;\nloop invariant v3 == v2;\nloop invariant v1 == v2 == v3;\nloop invariant v1 == v3 == v2;\nloop invariant v2 == v1 == v3;\nloop invariant v2 == v3 == v1;\nloop invariant v3 == v2 == v1;\nloop invariant v3 == v1 == v2;\nloop invariant v2 == v1;\nloop invariant v1 == v2;\nloop invariant v3 == v1;\nloop invariant v1 == v3;\nloop invariant v2 == v3;\nloop invariant v3 == v2;\nloop invariant v1 == v2 == v3 == v3;\nloop invariant v2 == v3 == v1 == v1;\nloop invariant v3 == v1 == v2 == v2;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v1;\nloop invariant v2 == v3 == v1 == v2;\nloop invariant v3 == v1 == v2 == v3;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\nloop invariant v2 == v3 == v1 == v3;\nloop invariant v3 == v1 == v2 == v1;\nloop invariant v1 == v2 == v3 == v2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant y = N - x;\nloop invariant v1 = v2;\nloop invariant v2 = v3;\nloop invariant v3 = v1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant y = N - x;\nloop invariant v1 <= v2 <= v3;\nloop invariant 0 <= v1 <= N;\nloop invariant 0 <= v2 <= N;\nloop invariant 0 <= v3 <= N;\nloop invariant (if (y < 0 || y >= N) then 0 == 1 else 1 == 1);\nloop invariant (if (x <= N) then y = N - x else 1 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 1 <= y <= N - 1;\nloop invariant v1 = v2;\nloop invariant v2 = v3;\nloop invariant v3 = v1;\nloop invariant x + y = N;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant x + y = N ==> x + y = N;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\nloop invariant i7: v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\n\nloop invariant i9: 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant y = N - x;\nloop invariant v1 = v2;\nloop invariant v2 = v3;\nloop invariant v3 = v1;\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant x + y = N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant x + y == N;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == x;\nloop invariant v2 == y;\nloop invariant v3 == N - x;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v2;\nloop invariant v1 <= v1;\nloop invariant v2 <= v3;\nloop invariant v3 <= v2;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant v1 <= v2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: v1 <= v1;\n\nloop invariant i16: v2 <= v2;\nloop invariant i17: v3 <= v3;\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= N && x >= 1;\nloop invariant y = N - x;\nloop invariant 0 <= y <= N;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant x + y == N;\nloop invariant x * y == N * (N - 1) / 2;\nloop invariant v1 == x;\nloop invariant v2 == y;\nloop invariant v3 == N - x - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant x <= N;\nloop invariant 1 <= x <= N;\nloop invariant v1 == v3;\nloop invariant v2 == v1;\nloop invariant v3 == v2;\nloop invariant v1 == v3 ==> v2 == v1;\nloop invariant v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v1 == v3;\nloop invariant x == N ==> v2 == v1;\nloop invariant x == N ==> v3 == v2;\nloop invariant x == N ==> v1 == v2;\nloop invariant x == N ==> v2 == v3;\nloop invariant x == N ==> v3 == v1;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i18: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant i19: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i20: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant i21: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i22: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i23: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i24: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i25: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i26: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i27: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i28: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i29: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i30: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i31: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i32: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i33: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i34: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N-x;\nloop invariant v1 = v2;\nloop invariant v2 = v3;\nloop invariant v3 = v1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant x <= y;\nloop invariant y == N-x;\nloop invariant x == N-y;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N + 1;\nloop invariant 0 <= y <= N;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == v3;\nloop invariant v2 == v1;\nloop invariant v3 == v2;\nloop invariant x <= N;\nloop invariant y <= N;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant x <= N + 1;\nloop invariant y <= N;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= N;\nloop invariant v2 <= N;\nloop invariant v3 <= N;\nloop invariant v1 == v3;\nloop invariant v2 == v1;\nloop invariant v3 == v2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x >= 1;\n\n\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= y <= N;\nloop invariant (y + x) == N;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant (v1 + v2 + v3) == 0;\nloop invariant (v1 == 1 || v2 == 1 || v3 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 108: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\nloop invariant i1: v3 == 1;\nloop invariant i2: v2 == 0 || v2 == 1;\nloop invariant i3: v1 == 0 || v1 == 1;\nloop invariant i4: y == 0 || y == 1;\nloop invariant i5: x == 0 || x == 1;\nloop invariant i6: N == 0 || N == 1;\nloop invariant i7: N == 1 ==> x <= 1;\nloop invariant i8: N == 1 ==> x >= 0;\nloop invariant i9: y == 0 ==> x <= N;\nloop invariant i10: y == 0 ==> x >= 0;\nloop invariant i11: x == 0 ==> x <= N;\nloop invariant i12: x == 0 ==> x >= 0;\nloop invariant i13: y == 0 ==> y <= N;\nloop invariant i14: y == 0 ==> y >= 0;\nloop invariant i15: x == 1 ==> x <= N;\nloop invariant i16: x == 1 ==> x >= 0;\nloop invariant i17: y == 1 ==> y <= N;\nloop invariant i18: y == 1 ==> y >= 0;\nloop invariant i19: x <= N;\nloop invariant i20: x >= 0;\nloop invariant i21: y <= N;\nloop invariant i22: y >= 0;\nloop invariant i23: x == N ==> v1 == v2;\nloop invariant i24: x == N ==> v2 == v3;\nloop invariant i25: x == N ==> v3 == v1;\nloop invariant i26: x == N ==> v1 == v3;\nloop invariant i27: x == N ==> v2 == v1;\nloop invariant i28: x == 0 ==> v1 == 1;\nloop invariant i29: x == 0 ==> v2 == 0;\nloop invariant i30: x == 0 ==> v3 == 1;\nloop invariant i31: x == 1 ==> v1 == 0;\nloop invariant i32: x == 1 ==> v2 == 1;\nloop invariant i33: x == 1 ==> v3 == 0;\nloop invariant i34: 0 <= x <= N;\nloop invariant i35: 0 <= y <= N;\nloop invariant i36: 0 <= v1 <= 1;\nloop invariant i37: 0 <= v2 <= 1;\nloop invariant i38: 0 <= v3 <= 1;\nloop invariant i39: 0 <= N <= 1;\nloop invariant i40: x <= N ==> x == 0 || x == 1;\nloop invariant i41: y <= N ==> y == 0 || y == 1;\nloop invariant i42: v1 <= 1 ==> v1 == 0 || v1 == 1;\nloop invariant i43: v2 <= 1 ==> v2 == 0 || v2 == 1;\nloop invariant i44: v3 <= 1 ==> v3 == 0 || v3 == 1;\nloop invariant i45: N <= 1 ==> N == 0 || N == 1;\nloop invariant i46: x >= 0 ==> x == 0 || x == 1;\nloop invariant i47: y >= 0 ==> y == 0 || y == 1;\nloop invariant i48: v1 >= 0 ==> v1 == 0 || v1 == 1;\nloop invariant i49: v2 >= 0 ==> v2 == 0 || v2 == 1;\nloop invariant i50: v3 >= 0 ==> v3 == 0 || v3 == 1;\nloop invariant i51: N >= 0 ==> N == 0 || N == 1;\nloop invariant i52: v1 == 0 ==> v1 <= 1;\nloop invariant i53: v1 == 0 ==> v1 >= 0;\nloop invariant i54: v2 == 0 ==> v2 <= 1;\nloop invariant i55: v2 == 0 ==> v2 >= 0;\nloop invariant i56: v3 == 0 ==> v3 <= 1;\nloop invariant i57: v3 == 0 ==> v3 >= 0;\nloop invariant i58: N == 0 ==> N <= 1;\nloop invariant i59: N == 0 ==> N >= 0;\nloop invariant i60: v1 == 1 ==> v1 <= 1;\nloop invariant i61: v1 == 1 ==> v1 >= 0;\nloop invariant i62: v2 == 1 ==> v2 <= 1;\nloop invariant i63: v2 == 1 ==> v2 >= 0;\nloop invariant i64: v3 == 1 ==> v3 <= 1;\nloop invariant i65: v3 == 1 ==> v3 >= 0;\nloop invariant i66: N == 1 ==> N <= 1;\nloop invariant i67: N == 1 ==> N >= 0;\nloop invariant i68: x <= N && y <= N;\nloop invariant i69: v1 <= 1 && v2 <= 1 && v3 <= 1;\nloop invariant i70: v1 == v3;\nloop invariant i71: v2 == v3;\nloop invariant i72: v3 == v1;\nloop invariant i73: x + y == N;\nloop invariant i74: -N <= y <= N;\nloop invariant i75: v1 == v2;\nloop invariant i76: v2 == v1;\nloop invariant i77: v3 == v2;\nloop invariant i78: v1 == v2 == v3;\nloop invariant i79: v1 == v3 == v2;\nloop invariant i80: v2 == v1 == v3;\nloop invariant i81: v2 == v3 == v1;\nloop invariant i82: v3 == v2 == v1;\nloop invariant i83: v3 == v1 == v2;\nloop invariant i84: v1 == v2 == v3 == v3;\nloop invariant i85: v2 == v3 == v1 == v1;\nloop invariant i86: v3 == v1 == v2 == v2;\nloop invariant i87: v1 == v2 == v3 == v2;\nloop invariant i88: v2 == v3 == v1 == v3;\nloop invariant i89: v3 == v1 == v2 == v1;\nloop invariant i90: v1 == v2 == v3 == v1;\nloop invariant i91: v2 == v3 == v1 == v2;\nloop invariant i92: v3 == v1 == v2 == v3;\nloop invariant i93: y = N - x;\nloop invariant i94: v1 = v2;\nloop invariant i95: v2 = v3;\nloop invariant i96: v3 = v1;\nloop invariant i97: v1 <= v2 <= v3;\nloop invariant i98: 0 <= v1 <= N;\nloop invariant i99: 0 <= v2 <= N;\nloop invariant i100: 0 <= v3 <= N;\nloop invariant i101: (if (y < 0 || y >= N) then 0 == 1 else 1 == 1);\nloop invariant i102: (if (x <= N) then y = N - x else 1 == 1);\nloop invariant i103: 1 <= y <= N - 1;\nloop invariant i104: x + y = N;\nloop invariant i105: v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\nloop invariant i106: x + y = N ==> x + y = N;\nloop invariant i107: 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\nloop invariant i108: v1 == x;\nloop invariant i109: v2 == y;\nloop invariant i110: v3 == N - x;\nloop invariant i111: v1 <= v2;\nloop invariant i112: v2 <= v3;\nloop invariant i113: v3 <= v1;\nloop invariant i114: v1 <= v3;\nloop invariant i115: v1 <= v1;\nloop invariant i116: v3 <= v2;\nloop invariant i117: v2 <= v2;\nloop invariant i118: v3 <= v3;\nloop invariant i119: x <= N && x >= 1;\nloop invariant i120: 1 <= x <= N;\nloop invariant i121: x * y == N * (N - 1) / 2;\nloop invariant i122: v3 == N - x - y;\nloop invariant i123: v1 == v3 ==> v2 == v1;\nloop invariant i124: v2 == v3 ==> v3 == v1;\nloop invariant i125: x == N ==> v3 == v2;\nloop invariant i126: x == N ==> v1 == v2 ==> v2 == v3;\nloop invariant i127: x == N ==> v2 == v3 ==> v3 == v1;\nloop invariant i128: x == N ==> v3 == v1 ==> v1 == v2;\nloop invariant i129: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i130: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant i131: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i132: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant i133: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i134: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i135: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i136: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i137: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i138: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i139: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i140: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i141: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i142: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i143: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i144: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i145: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i146: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i147: 0 <= y <= N-x;\nloop invariant i148: x <= y;\nloop invariant i149: y == N-x;\nloop invariant i150: x == N-y;\nloop invariant i151: 0 <= x <= N + 1;\nloop invariant i152: x >= 1;\nloop invariant i153: v1 >= 0;\nloop invariant i154: v2 >= 0;\nloop invariant i155: v3 >= 0;\nloop invariant i156: v1 <= N;\nloop invariant i157: v2 <= N;\nloop invariant i158: v3 <= N;\nloop invariant i159: x <= N + 1;\nloop invariant i160: (y + x) == N;\nloop invariant i161: (v1 + v2 + v3) == 0;\nloop invariant i162: (v1 == 1 || v2 == 1 || v3 == 1);\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
        "combined_annotation_num_solver_calls": 33,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \t/*@\n\n\n\n\n\n\n\nloop invariant i8: N == 1 ==> x >= 0;\n\nloop invariant i10: y == 0 ==> x >= 0;\nloop invariant i11: x == 0 ==> x <= N;\nloop invariant i12: x == 0 ==> x >= 0;\n\nloop invariant i14: y == 0 ==> y >= 0;\n\nloop invariant i16: x == 1 ==> x >= 0;\n\nloop invariant i18: y == 1 ==> y >= 0;\n\nloop invariant i20: x >= 0;\n\n\n\n\n\n\n\nloop invariant i28: x == 0 ==> v1 == 1;\nloop invariant i29: x == 0 ==> v2 == 0;\nloop invariant i30: x == 0 ==> v3 == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i52: v1 == 0 ==> v1 <= 1;\nloop invariant i53: v1 == 0 ==> v1 >= 0;\nloop invariant i54: v2 == 0 ==> v2 <= 1;\nloop invariant i55: v2 == 0 ==> v2 >= 0;\nloop invariant i56: v3 == 0 ==> v3 <= 1;\nloop invariant i57: v3 == 0 ==> v3 >= 0;\nloop invariant i58: N == 0 ==> N <= 1;\nloop invariant i59: N == 0 ==> N >= 0;\nloop invariant i60: v1 == 1 ==> v1 <= 1;\nloop invariant i61: v1 == 1 ==> v1 >= 0;\nloop invariant i62: v2 == 1 ==> v2 <= 1;\nloop invariant i63: v2 == 1 ==> v2 >= 0;\nloop invariant i64: v3 == 1 ==> v3 <= 1;\nloop invariant i65: v3 == 1 ==> v3 >= 0;\nloop invariant i66: N == 1 ==> N <= 1;\nloop invariant i67: N == 1 ==> N >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i105: v1 == v2 && v2 == v3 && v3 == v1 ==> v1 == v2 && v2 == v3 && v3 == v1;\n\nloop invariant i107: 1 <= y <= N - 1 ==> 1 <= y <= N - 1;\n\n\n\n\n\n\n\nloop invariant i115: v1 <= v1;\n\nloop invariant i117: v2 <= v2;\nloop invariant i118: v3 <= v3;\n\n\n\n\n\n\n\n\n\n\nloop invariant i129: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i130: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant i131: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i132: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2;\nloop invariant i133: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i134: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i135: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i136: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i137: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i138: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i139: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i140: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i141: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i142: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i143: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i144: x == N ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\nloop invariant i145: x == N ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3;\nloop invariant i146: x == N ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1 ==> v1 == v2 ==> v2 == v3 ==> v3 == v1;\n\n\n\n\n\nloop invariant i152: x >= 1;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c"
        ],
        "skipped": [],
        "total": 75,
        "success_count": 64,
        "failure_count": 11,
        "success_rate": 0.8533333333333334
    }
}