{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant cp1_off <= MAXDATA * 2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant cp1_off + mc_i <= n1;loop invariant 0 <= mc_i;loop invariant mc_i <= n2;loop invariant 1 <= mc_i;loop invariant n1 <= MAXDATA * 2;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 0 <= cp1_off;loop invariant cp1_off <= MAXDATA * 2;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 1 <= mc_i;loop invariant mc_i <= n2;loop invariant cp1_off + mc_i <= n1;loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i <= n1 + mc_i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i < n2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant (cp1_off + mc_i) >= 0;\nloop invariant (cp1_off + mc_i) <= MAXDATA * 2;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i < n2;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= MAXDATA * 2;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) < MAXDATA * 2;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i < n2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant MAXDATA * 2 >= n1;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i <= n2;\nloop invariant mc_i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1 <= MAXDATA * 2 && 0 <= n2 <= MAXDATA * 2 - n1 && 0 <= mc_i <= n2 && 0 <= MAXDATA && n1 > MAXDATA * 2 && cp1_off <= n1 && n2 <= MAXDATA * 2 - n1 && cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant n1 > 0;\nloop invariant n2 > 0;\nloop invariant MAXDATA > 0;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA*2 - n1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= mc_i;\nloop invariant 0 <= cp1_off <= MAXDATA * 2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= cp1_off <= MAXDATA * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant mc_i < n2 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA*2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant cp1_off <= MAXDATA * 2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: cp1_off <= MAXDATA * 2;\nloop invariant i2: n1 <= MAXDATA * 2;\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: mc_i >= 0;\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant cp1_off + mc_i <= n1;loop invariant 0 <= mc_i;loop invariant mc_i <= n2;loop invariant 1 <= mc_i;loop invariant n1 <= MAXDATA * 2;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 0 <= cp1_off;loop invariant cp1_off <= MAXDATA * 2;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 1 <= mc_i;loop invariant mc_i <= n2;loop invariant cp1_off + mc_i <= n1;loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: cp1_off + mc_i <= n1;loop invariant 0 <= mc_i;loop invariant mc_i <= n2;loop invariant 1 <= mc_i;loop invariant n1 <= MAXDATA * 2;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 0 <= cp1_off;loop invariant cp1_off <= MAXDATA * 2;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 1 <= mc_i;loop invariant mc_i <= n2;loop invariant cp1_off + mc_i <= n1;loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i < n2;\nloop invariant cp1_off + mc_i >= cp1_off;\nloop invariant cp1_off + mc_i <= n1 + mc_i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\nloop invariant i4: mc_i >= 0;\n\nloop invariant i6: cp1_off + mc_i >= cp1_off;\nloop invariant i7: cp1_off + mc_i <= n1 + mc_i;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i < n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i >= 0;\nloop invariant mc_i <= n2;\nloop invariant (cp1_off + mc_i) >= 0;\nloop invariant (cp1_off + mc_i) <= MAXDATA * 2;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i < n2;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= MAXDATA * 2;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) < MAXDATA * 2;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: mc_i >= 0;\n\n\nloop invariant i6: (cp1_off + mc_i) <= MAXDATA * 2;\n\nloop invariant i8: (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i >= 0;\n\nloop invariant i10: (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off <= n1;\nloop invariant i11: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i < n2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: n1 <= MAXDATA * 2;\nloop invariant i4: cp1_off <= n1;\nloop invariant i5: n2 <= MAXDATA * 2 - n1;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant MAXDATA * 2 >= n1;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant mc_i <= n2;\nloop invariant mc_i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: MAXDATA * 2 >= n1;\nloop invariant i2: cp1_off <= n1;\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\n\nloop invariant i5: mc_i >= 0;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1 <= MAXDATA * 2 && 0 <= n2 <= MAXDATA * 2 - n1 && 0 <= mc_i <= n2 && 0 <= MAXDATA && n1 > MAXDATA * 2 && cp1_off <= n1 && n2 <= MAXDATA * 2 - n1 && cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant n1 > 0;\nloop invariant n2 > 0;\nloop invariant MAXDATA > 0;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA*2 - n1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\n\n\nloop invariant i6: MAXDATA > 0;\nloop invariant i7: n1 <= MAXDATA * 2;\nloop invariant i8: cp1_off <= n1;\nloop invariant i9: n2 <= MAXDATA*2 - n1;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= MAXDATA;\nloop invariant 0 <= mc_i;\nloop invariant 0 <= cp1_off <= MAXDATA * 2;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant 0 <= cp1_off <= MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\nloop invariant i5: 0 <= MAXDATA;\nloop invariant i6: 0 <= mc_i;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n1 <= MAXDATA * 2;\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant 0 <= mc_i <= n2;\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant mc_i < n2 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: mc_i < n2 ==> mc_i <= n2 - 1;\nloop invariant i8: mc_i <= n2 - 1 ==> mc_i < n2;\nloop invariant i9: mc_i <= n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i10: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i11: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i12: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i13: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i14: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i15: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i16: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i17: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i18: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i19: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= cp1_off <= n1;\nloop invariant 0 <= n2 <= MAXDATA*2;\nloop invariant 0 <= mc_i <= n2;\nloop invariant mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant cp1_off <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant n1 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant n2 <= MAXDATA * 2 - n1 is partially proven to be inductive.\nloop invariant mc_i >= 0 is partially proven to be inductive.\nloop invariant mc_i <= n2 is preserved but not established.\nloop invariant cp1_off + mc_i < MAXDATA * 2 is preserved but not established.\nloop invariant cp1_off + mc_i <= n1;loop invariant 0 <= mc_i;loop invariant mc_i <= n2;loop invariant 1 <= mc_i;loop invariant n1 <= MAXDATA * 2;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 0 <= cp1_off;loop invariant cp1_off <= MAXDATA * 2;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 1 <= mc_i;loop invariant mc_i <= n2;loop invariant cp1_off + mc_i <= n1;loop invariant cp1_off + mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= cp1_off <= n1 is partially proven to be inductive.\nloop invariant 0 <= n1 <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant 0 <= n2 <= MAXDATA * 2 - n1 is partially proven to be inductive.\nloop invariant mc_i < n2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i >= cp1_off is partially proven to be inductive.\nloop invariant cp1_off + mc_i <= n1 + mc_i is partially proven to be inductive.\nloop invariant 0 <= mc_i <= n2 is partially proven to be inductive.\nloop invariant 0 <= cp1_off + mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) >= 0 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i < n2 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i >= 0 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off >= 0 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off <= n1 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) < MAXDATA * 2 is partially proven to be inductive.\nloop invariant (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n2 is partially proven to be inductive.\nloop invariant cp1_off <= n1 is partially proven to be inductive.\nloop invariant mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant MAXDATA * 2 >= n1 is partially proven to be inductive.\nloop invariant 0 <= cp1_off <= n1 <= MAXDATA * 2 && 0 <= n2 <= MAXDATA * 2 - n1 && 0 <= mc_i <= n2 && 0 <= MAXDATA && n1 > MAXDATA * 2 && cp1_off <= n1 && n2 <= MAXDATA * 2 - n1 && cp1_off + mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant n1 > 0 is partially proven to be inductive.\nloop invariant n2 > 0 is partially proven to be inductive.\nloop invariant MAXDATA > 0 is partially proven to be inductive.\nloop invariant n2 <= MAXDATA*2 - n1 is partially proven to be inductive.\nloop invariant 0 <= MAXDATA is partially proven to be inductive.\nloop invariant 0 <= mc_i is partially proven to be inductive.\nloop invariant 0 <= cp1_off <= MAXDATA * 2 is partially proven to be inductive.\nloop invariant cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2 is partially proven to be inductive.\nloop invariant mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2 is partially proven to be inductive.\nloop invariant mc_i < n2 ==> mc_i <= n2 - 1 is partially proven to be inductive.\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 is partially proven to be inductive.\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 + 1 is partially proven to be inductive.\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 is partially proven to be inductive.\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 is partially proven to be inductive.\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 is partially proven to be inductive.\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 is partially proven to be inductive.\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 is partially proven to be inductive.\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 is partially proven to be inductive.\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 is partially proven to be inductive.\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 is partially proven to be inductive.\nloop invariant mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 is partially proven to be inductive.\nloop invariant mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 is partially proven to be inductive.\nloop invariant 0 <= n2 <= MAXDATA*2 is partially proven to be inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: cp1_off <= MAXDATA * 2;\nloop invariant i2: n1 <= MAXDATA * 2;\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: mc_i >= 0;\nloop invariant i5: mc_i <= n2;\nloop invariant i6: cp1_off + mc_i < MAXDATA * 2;\nloop invariant i7: cp1_off + mc_i <= n1;loop invariant 0 <= mc_i;loop invariant mc_i <= n2;loop invariant 1 <= mc_i;loop invariant n1 <= MAXDATA * 2;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 0 <= cp1_off;loop invariant cp1_off <= MAXDATA * 2;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 1 <= mc_i;loop invariant mc_i <= n2;loop invariant cp1_off + mc_i <= n1;loop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i8: 0 <= cp1_off <= n1;\nloop invariant i9: 0 <= n1 <= MAXDATA * 2;\nloop invariant i10: 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant i11: mc_i < n2;\nloop invariant i12: cp1_off + mc_i >= cp1_off;\nloop invariant i13: cp1_off + mc_i <= n1 + mc_i;\nloop invariant i14: 0 <= mc_i <= n2;\nloop invariant i15: 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i16: (cp1_off + mc_i) >= 0;\nloop invariant i17: (cp1_off + mc_i) <= MAXDATA * 2;\nloop invariant i18: (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i < n2;\nloop invariant i19: (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant i20: (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off >= 0;\nloop invariant i21: (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off <= n1;\nloop invariant i22: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant i23: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= MAXDATA * 2;\nloop invariant i24: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) < MAXDATA * 2;\nloop invariant i25: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant i26: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n2;\nloop invariant i27: cp1_off <= n1;\nloop invariant i28: mc_i < MAXDATA * 2;\nloop invariant i29: MAXDATA * 2 >= n1;\nloop invariant i30: 0 <= cp1_off <= n1 <= MAXDATA * 2 && 0 <= n2 <= MAXDATA * 2 - n1 && 0 <= mc_i <= n2 && 0 <= MAXDATA && n1 > MAXDATA * 2 && cp1_off <= n1 && n2 <= MAXDATA * 2 - n1 && cp1_off + mc_i < MAXDATA * 2;\nloop invariant i31: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i32: n1 > 0;\nloop invariant i33: n2 > 0;\nloop invariant i34: MAXDATA > 0;\nloop invariant i35: n2 <= MAXDATA*2 - n1;\nloop invariant i36: 0 <= MAXDATA;\nloop invariant i37: 0 <= mc_i;\nloop invariant i38: 0 <= cp1_off <= MAXDATA * 2;\nloop invariant i39: cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant i40: mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant i41: mc_i < n2 ==> mc_i <= n2 - 1;\nloop invariant i42: mc_i <= n2 - 1 ==> mc_i < n2;\nloop invariant i43: mc_i <= n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i44: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i45: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i46: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i47: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i48: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i49: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i50: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i51: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i52: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i53: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i54: 0 <= n2 <= MAXDATA*2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: cp1_off <= MAXDATA * 2;\nloop invariant i2: n1 <= MAXDATA * 2;\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: mc_i >= 0;\n\n\nloop invariant i7: cp1_off + mc_i <= n1;loop invariant 0 <= mc_i;loop invariant mc_i <= n2;loop invariant 1 <= mc_i;loop invariant n1 <= MAXDATA * 2;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 0 <= cp1_off;loop invariant cp1_off <= MAXDATA * 2;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant MAXDATA > 0;loop invariant n1 <= MAXDATA * 2;loop invariant cp1_off <= n1;loop invariant n2 <= MAXDATA * 2 - n1;loop invariant 0 <= n1;loop invariant 0 <= n2;loop invariant 1 <= mc_i;loop invariant mc_i <= n2;loop invariant cp1_off + mc_i <= n1;loop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i8: 0 <= cp1_off <= n1;\nloop invariant i9: 0 <= n1 <= MAXDATA * 2;\nloop invariant i10: 0 <= n2 <= MAXDATA * 2 - n1;\nloop invariant i11: mc_i < n2;\nloop invariant i12: cp1_off + mc_i >= cp1_off;\nloop invariant i13: cp1_off + mc_i <= n1 + mc_i;\nloop invariant i14: 0 <= mc_i <= n2;\nloop invariant i15: 0 <= cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i16: (cp1_off + mc_i) >= 0;\nloop invariant i17: (cp1_off + mc_i) <= MAXDATA * 2;\nloop invariant i18: (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i < n2;\nloop invariant i19: (cp1_off + mc_i) < MAXDATA * 2 ==> mc_i >= 0;\nloop invariant i20: (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off >= 0;\nloop invariant i21: (cp1_off + mc_i) < MAXDATA * 2 ==> cp1_off <= n1;\nloop invariant i22: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) >= 0;\nloop invariant i23: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= MAXDATA * 2;\nloop invariant i24: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) < MAXDATA * 2;\nloop invariant i25: (cp1_off + mc_i) < MAXDATA * 2 ==> (n1 - cp1_off) <= n1;\nloop invariant i26: cp1_off + mc_i < MAXDATA * 2 ==> cp1_off + mc_i < n2;\nloop invariant i27: cp1_off <= n1;\nloop invariant i28: mc_i < MAXDATA * 2;\nloop invariant i29: MAXDATA * 2 >= n1;\nloop invariant i30: 0 <= cp1_off <= n1 <= MAXDATA * 2 && 0 <= n2 <= MAXDATA * 2 - n1 && 0 <= mc_i <= n2 && 0 <= MAXDATA && n1 > MAXDATA * 2 && cp1_off <= n1 && n2 <= MAXDATA * 2 - n1 && cp1_off + mc_i < MAXDATA * 2;\nloop invariant i31: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i32: n1 > 0;\nloop invariant i33: n2 > 0;\nloop invariant i34: MAXDATA > 0;\nloop invariant i35: n2 <= MAXDATA*2 - n1;\nloop invariant i36: 0 <= MAXDATA;\nloop invariant i37: 0 <= mc_i;\nloop invariant i38: 0 <= cp1_off <= MAXDATA * 2;\nloop invariant i39: cp1_off + mc_i < MAXDATA * 2 ==> mc_i < n2;\nloop invariant i40: mc_i < n2 ==> cp1_off + mc_i < MAXDATA * 2;\nloop invariant i41: mc_i < n2 ==> mc_i <= n2 - 1;\nloop invariant i42: mc_i <= n2 - 1 ==> mc_i < n2;\nloop invariant i43: mc_i <= n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i44: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i45: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i46: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i47: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i48: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i49: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i50: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i51: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i52: mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1;\nloop invariant i53: mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1 ==> mc_i < n2 - 1 ==> mc_i < n2 - 1 + 1 ==> mc_i <= n2 - 1;\nloop invariant i54: 0 <= n2 <= MAXDATA*2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n\n  }\n\n END:  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 162,
        "success_count": 134,
        "failure_count": 28,
        "success_rate": 0.8271604938271605
    }
}