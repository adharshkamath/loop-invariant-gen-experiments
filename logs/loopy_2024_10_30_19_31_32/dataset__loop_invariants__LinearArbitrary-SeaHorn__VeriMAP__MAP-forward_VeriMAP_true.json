{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a + b + i <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a <= 2*i;\nloop invariant b <= 2*i;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b <= 3*n;\nloop invariant a+b >= 0;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 3 * i;\nloop invariant a + b <= 3 * n;\nloop invariant a >= b;\nloop invariant a + b == 3 * i + a + b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b = 3 * i;\nloop invariant a + 2 * b >= 3 * i;\nloop invariant a + 2 * b <= 3 * i;\nloop invariant a - 2 * b >= -3 * i;\nloop invariant a - 2 * b <= -3 * i;\nloop invariant a <= 2 * i;\nloop invariant b <= 2 * i;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 3 * n - i;\nloop invariant b <= 3 * n - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a + b == 3*n ==> b == 2*n;\nloop invariant a + b == 3*n ==> a == n;\nloop invariant a + b == 2*n ==> b == n;\nloop invariant a + b == 2*n ==> a == 2*n;\nloop invariant a + b == n ==> b == 0;\nloop invariant a + b == n ==> a == n;\nloop invariant a + b == 0 ==> b == 0;\nloop invariant a + b == 0 ==> a == 0;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a == n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> b >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> b <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> i <= n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i <= n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i <= n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i <= n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= n;\nloop invariant a + b == 3*i;\nloop invariant a - b == 2*i;\nloop invariant (a + b) >= (3*i);\nloop invariant (a - b) >= (2*i);\nloop invariant (a + b) <= (3*i);\nloop invariant (a - b) <= (2*i);\nloop invariant (a + b) == (3*i);\nloop invariant (a - b) == (2*i);\nloop invariant (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant (a - b) >= (2*i) ==> (a - b) >= (2*i);\nloop invariant (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant (a - b) >= (2*i) ==> (a - b) >= (2*i);\nloop invariant (a + b) <= (3*i) ==> (a + b) <= (3*i);\nloop invariant (a + b) <= (3*i) ==> (a - b) <= (2*i);\nloop invariant (a + b) <= (3*i) ==> (a + b) <= (3*i);\nloop invariant (a + b) <= (3*i) ==> (a - b) <= (2*i);\nloop invariant (a - b) <= (2*i) ==> (a + b) <= (3*i);\nloop invariant (a - b) <= (2*i) ==> (a - b) <= (2*i);\nloop invariant (a - b) <= (2*i) ==> (a + b) <= (3*i);\nloop invariant (a - b) <= (2*i) ==> (a - b) <= (2*i);\nloop invariant (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant (a - b) >= (2*i) ==> (a - b) >= (2*i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b >= 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*(i + 1);\nloop invariant a == b + i;\nloop invariant b == a - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= (2 * i);\nloop invariant b >= (i * (i + 1) / 2);\nloop invariant a + b >= 3 * i;\n*/\n```",
            "```\n/*@\nloop invariant a == i + n;\nloop invariant b == 2*i;\nloop invariant a + b == i + n + 2*i;\nloop invariant a + b == 3*i + n;\nloop invariant i < n ==> a == i + n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n, a <= b;\nloop invariant b - a = n - i;\nloop invariant a + b = 3*n - i;\nloop invariant i >= 0 ==> a + b == 3*n;\nloop invariant i < n ==> a + b != 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant 0 <= i <= n;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a >= b;\nloop invariant a + b >= a;\nloop invariant a + b >= b;\nloop invariant a + b <= a + b;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= n;\nloop invariant b >= 2*n;\nloop invariant a + b >= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b == 3*n;\nloop invariant (i < n) ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a + b + i <= 3*n;\nloop invariant a + b >= i;\nloop invariant a + b <= 3*n;\nloop invariant a <= 2*i;\nloop invariant b <= 2*i;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*(n-i);\nloop invariant b <= 2*(n-i);\nloop invariant a >= i;\nloop invariant b >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2*n;\nloop invariant i3: 0 <= b <= 2*n;\nloop invariant i4: a + b == 3*i;\n\nloop invariant i6: a + b >= i;\nloop invariant i7: a + b <= 3*n;\nloop invariant i8: a <= 2*i;\nloop invariant i9: b <= 2*i;\nloop invariant i10: a >= i;\nloop invariant i11: b >= i;\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a+b <= 3*n;\nloop invariant a+b >= 0;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\nloop invariant b == 3*n ==> i == n;\nloop invariant a >= 3*n ==> i >= n;\nloop invariant b >= 3*n ==> i >= n;\nloop invariant a <= 3*n ==> i <= n;\nloop invariant b <= 3*n ==> i <= n;\nloop invariant a == 0 ==> b == 0;\nloop invariant b == 0 ==> a == 0;\nloop invariant a >= 0 ==> b >= 0;\nloop invariant b >= 0 ==> a >= 0;\nloop invariant a == 0 ==> i == 0;\nloop invariant b == 0 ==> i == 0;\nloop invariant a >= 0 ==> i >= 0;\nloop invariant b >= 0 ==> i >= 0;\nloop invariant a == 3*n ==> i == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: a+b >= 0;\nloop invariant i6: a == 0 ==> b == 0;\nloop invariant i7: b == 0 ==> a == 0;\nloop invariant i8: a >= 0 ==> b >= 0;\nloop invariant i9: b >= 0 ==> a >= 0;\nloop invariant i10: a == 0 ==> i == 0;\nloop invariant i11: b == 0 ==> i == 0;\nloop invariant i12: a >= 0 ==> i >= 0;\nloop invariant i13: b >= 0 ==> i >= 0;\n\n\n\n\nloop invariant i18: a <= 3*n ==> i <= n;\nloop invariant i19: b <= 3*n ==> i <= n;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 3 * i;\nloop invariant a + b <= 3 * n;\nloop invariant a >= b;\nloop invariant a + b == 3 * i + a + b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a + b >= 3 * i;\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b = 3 * i;\nloop invariant a + 2 * b >= 3 * i;\nloop invariant a + 2 * b <= 3 * i;\nloop invariant a - 2 * b >= -3 * i;\nloop invariant a - 2 * b <= -3 * i;\nloop invariant a <= 2 * i;\nloop invariant b <= 2 * i;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 3 * n - i;\nloop invariant b <= 3 * n - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\n\nloop invariant i5: a + 2 * b >= 3 * i;\n\nloop invariant i7: a - 2 * b >= -3 * i;\n\nloop invariant i9: a <= 2 * i;\nloop invariant i10: b <= 2 * i;\nloop invariant i11: a >= i;\nloop invariant i12: b >= i;\nloop invariant i13: a <= 3 * n - i;\nloop invariant i14: b <= 3 * n - i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a + b == 3*n ==> b == 2*n;\nloop invariant a + b == 3*n ==> a == n;\nloop invariant a + b == 2*n ==> b == n;\nloop invariant a + b == 2*n ==> a == 2*n;\nloop invariant a + b == n ==> b == 0;\nloop invariant a + b == n ==> a == n;\nloop invariant a + b == 0 ==> b == 0;\nloop invariant a + b == 0 ==> a == 0;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a == n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> b >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> b <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> i <= n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i <= n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i <= n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i <= n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\nloop invariant i6: a >= 0;\nloop invariant i7: b >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: i <= n;\n\n\n\n\n\n\nloop invariant i16: a + b == 0 ==> b == 0;\nloop invariant i17: a + b == 0 ==> a == 0;\nloop invariant i18: a + b >= 0;\nloop invariant i19: a + b == 3*n ==> b == 2*n ==> a == n;\nloop invariant i20: a + b == 3*n ==> b == 2*n ==> a + b == 3*n;\nloop invariant i21: a + b == 3*n ==> b == 2*n ==> b >= 0;\nloop invariant i22: a + b == 3*n ==> b == 2*n ==> b <= 2*n;\nloop invariant i23: a + b == 3*n ==> b == 2*n ==> a >= 0;\nloop invariant i24: a + b == 3*n ==> b == 2*n ==> a <= 2*n;\nloop invariant i25: a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant i26: a + b == 3*n ==> b == 2*n ==> i <= n;\n\nloop invariant i28: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant i29: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i <= n;\nloop invariant i30: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant i31: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant i32: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\nloop invariant i33: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i <= n;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= n;\nloop invariant a + b == 3*i;\nloop invariant a - b == 2*i;\nloop invariant (a + b) >= (3*i);\nloop invariant (a - b) >= (2*i);\nloop invariant (a + b) <= (3*i);\nloop invariant (a - b) <= (2*i);\nloop invariant (a + b) == (3*i);\nloop invariant (a - b) == (2*i);\nloop invariant (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant (a - b) >= (2*i) ==> (a - b) >= (2*i);\nloop invariant (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant (a - b) >= (2*i) ==> (a - b) >= (2*i);\nloop invariant (a + b) <= (3*i) ==> (a + b) <= (3*i);\nloop invariant (a + b) <= (3*i) ==> (a - b) <= (2*i);\nloop invariant (a + b) <= (3*i) ==> (a + b) <= (3*i);\nloop invariant (a + b) <= (3*i) ==> (a - b) <= (2*i);\nloop invariant (a - b) <= (2*i) ==> (a + b) <= (3*i);\nloop invariant (a - b) <= (2*i) ==> (a - b) <= (2*i);\nloop invariant (a - b) <= (2*i) ==> (a + b) <= (3*i);\nloop invariant (a - b) <= (2*i) ==> (a - b) <= (2*i);\nloop invariant (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant (a - b) >= (2*i) ==> (a - b) >= (2*i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n\nloop invariant i6: (a + b) >= (3*i);\n\nloop invariant i8: (a + b) <= (3*i);\nloop invariant i9: (a - b) <= (2*i);\nloop invariant i10: (a + b) == (3*i);\n\n\nloop invariant i13: (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant i14: (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant i15: (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant i16: (a + b) >= (3*i) ==> (a + b) >= (3*i);\n\nloop invariant i18: (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant i19: (a - b) >= (2*i) ==> (a - b) >= (2*i);\nloop invariant i20: (a + b) <= (3*i) ==> (a + b) <= (3*i);\nloop invariant i21: (a + b) <= (3*i) ==> (a - b) <= (2*i);\nloop invariant i22: (a - b) <= (2*i) ==> (a + b) <= (3*i);\nloop invariant i23: (a - b) <= (2*i) ==> (a - b) <= (2*i);\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b >= 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b >= 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*(i + 1);\nloop invariant a == b + i;\nloop invariant b == a - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b >= 3*i;\nloop invariant i5: a + b <= 3*(i + 1);\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= (2 * i);\nloop invariant b >= (i * (i + 1) / 2);\nloop invariant a + b >= 3 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b >= 3 * i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant a == i + n;\nloop invariant b == 2*i;\nloop invariant a + b == i + n + 2*i;\nloop invariant a + b == 3*i + n;\nloop invariant i < n ==> a == i + n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\n\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n, a <= b;\nloop invariant b - a = n - i;\nloop invariant a + b = 3*n - i;\nloop invariant i >= 0 ==> a + b == 3*n;\nloop invariant i < n ==> a + b != 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant 0 <= i <= n;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a >= b;\nloop invariant a + b >= a;\nloop invariant a + b >= b;\nloop invariant a + b <= a + b;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\n\n\nloop invariant i3: 0 <= i <= n;\n\nloop invariant i5: a >= 0;\nloop invariant i6: b >= 0;\nloop invariant i7: i >= 0;\nloop invariant i8: i <= n;\n\n\nloop invariant i11: a + b >= 0;\n\nloop invariant i13: a + b >= a;\nloop invariant i14: a + b >= b;\nloop invariant i15: a + b <= a + b;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= n;\nloop invariant b >= 2*n;\nloop invariant a + b >= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a + b == 3*n;\nloop invariant (i < n) ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\nloop invariant \\top ==> (a + b == 3*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 60: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2*n;\nloop invariant i3: 0 <= b <= 2*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a + b + i <= 3*n;\nloop invariant i6: a + b >= i;\nloop invariant i7: a + b <= 3*n;\nloop invariant i8: a <= 2*i;\nloop invariant i9: b <= 2*i;\nloop invariant i10: a >= i;\nloop invariant i11: b >= i;\nloop invariant i12: a <= 2*(n-i);\nloop invariant i13: b <= 2*(n-i);\nloop invariant i14: 0 <= a <= 3*n;\nloop invariant i15: 0 <= b <= 3*n;\nloop invariant i16: a+b <= 3*n;\nloop invariant i17: a+b >= 0;\nloop invariant i18: a == 0 ==> b == 0;\nloop invariant i19: b == 0 ==> a == 0;\nloop invariant i20: a >= 0 ==> b >= 0;\nloop invariant i21: b >= 0 ==> a >= 0;\nloop invariant i22: a == 0 ==> i == 0;\nloop invariant i23: b == 0 ==> i == 0;\nloop invariant i24: a >= 0 ==> i >= 0;\nloop invariant i25: b >= 0 ==> i >= 0;\nloop invariant i26: a == 3*n ==> i == n;\nloop invariant i27: b == 3*n ==> i == n;\nloop invariant i28: a >= 3*n ==> i >= n;\nloop invariant i29: b >= 3*n ==> i >= n;\nloop invariant i30: a <= 3*n ==> i <= n;\nloop invariant i31: b <= 3*n ==> i <= n;\nloop invariant i32: a >= 0;\nloop invariant i33: b >= 0;\nloop invariant i34: a + b >= 3 * i;\nloop invariant i35: a + b <= 3 * n;\nloop invariant i36: a >= b;\nloop invariant i37: a + b == 3 * i + a + b;\nloop invariant i38: a + b == 3*n;\nloop invariant i39: a + b = 3 * i;\nloop invariant i40: a + 2 * b >= 3 * i;\nloop invariant i41: a + 2 * b <= 3 * i;\nloop invariant i42: a - 2 * b >= -3 * i;\nloop invariant i43: a - 2 * b <= -3 * i;\nloop invariant i44: a <= 2 * i;\nloop invariant i45: b <= 2 * i;\nloop invariant i46: a <= 3 * n - i;\nloop invariant i47: b <= 3 * n - i;\nloop invariant i48: a + b >= 2*n;\nloop invariant i49: i >= 0;\nloop invariant i50: i <= n;\nloop invariant i51: a + b == 3*n ==> b == 2*n;\nloop invariant i52: a + b == 3*n ==> a == n;\nloop invariant i53: a + b == 2*n ==> b == n;\nloop invariant i54: a + b == 2*n ==> a == 2*n;\nloop invariant i55: a + b == n ==> b == 0;\nloop invariant i56: a + b == n ==> a == n;\nloop invariant i57: a + b == 0 ==> b == 0;\nloop invariant i58: a + b == 0 ==> a == 0;\nloop invariant i59: a + b >= 0;\nloop invariant i60: a + b == 3*n ==> b == 2*n ==> a == n;\nloop invariant i61: a + b == 3*n ==> b == 2*n ==> a + b == 3*n;\nloop invariant i62: a + b == 3*n ==> b == 2*n ==> b >= 0;\nloop invariant i63: a + b == 3*n ==> b == 2*n ==> b <= 2*n;\nloop invariant i64: a + b == 3*n ==> b == 2*n ==> a >= 0;\nloop invariant i65: a + b == 3*n ==> b == 2*n ==> a <= 2*n;\nloop invariant i66: a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant i67: a + b == 3*n ==> b == 2*n ==> i <= n;\nloop invariant i68: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n;\nloop invariant i69: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant i70: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i <= n;\nloop invariant i71: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant i72: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant i73: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\nloop invariant i74: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i <= n;\nloop invariant i75: 0 <= b <= n;\nloop invariant i76: a - b == 2*i;\nloop invariant i77: (a + b) >= (3*i);\nloop invariant i78: (a - b) >= (2*i);\nloop invariant i79: (a + b) <= (3*i);\nloop invariant i80: (a - b) <= (2*i);\nloop invariant i81: (a + b) == (3*i);\nloop invariant i82: (a - b) == (2*i);\nloop invariant i83: (a + b) == (3*i) ==> (a - b) == (2*i);\nloop invariant i84: (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant i85: (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant i86: (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant i87: (a + b) >= (3*i) ==> (a + b) >= (3*i);\nloop invariant i88: (a + b) >= (3*i) ==> (a - b) >= (2*i);\nloop invariant i89: (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant i90: (a - b) >= (2*i) ==> (a - b) >= (2*i);\nloop invariant i91: (a + b) <= (3*i) ==> (a + b) <= (3*i);\nloop invariant i92: (a + b) <= (3*i) ==> (a - b) <= (2*i);\nloop invariant i93: (a - b) <= (2*i) ==> (a + b) <= (3*i);\nloop invariant i94: (a - b) <= (2*i) ==> (a - b) <= (2*i);\nloop invariant i95: a + b >= 3*i;\nloop invariant i96: a + b <= 3*(i + 1);\nloop invariant i97: a == b + i;\nloop invariant i98: b == a - i;\nloop invariant i99: a >= (2 * i);\nloop invariant i100: b >= (i * (i + 1) / 2);\nloop invariant i101: a == i + n;\nloop invariant i102: b == 2*i;\nloop invariant i103: a + b == i + n + 2*i;\nloop invariant i104: a + b == 3*i + n;\nloop invariant i105: i < n ==> a == i + n;\nloop invariant i106: 0 <= a <= n, a <= b;\nloop invariant i107: b - a = n - i;\nloop invariant i108: a + b = 3*n - i;\nloop invariant i109: i >= 0 ==> a + b == 3*n;\nloop invariant i110: i < n ==> a + b != 3*n;\nloop invariant i111: a <= 2*n;\nloop invariant i112: b <= 2*n;\nloop invariant i113: a + b >= a;\nloop invariant i114: a + b >= b;\nloop invariant i115: a + b <= a + b;\nloop invariant i116: a >= n;\nloop invariant i117: b >= 2*n;\nloop invariant i118: a + b >= 3*n;\nloop invariant i119: (i < n) ==> (a + b == 3*n);\nloop invariant i120: \\top ==> (a + b == 3*n);\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2*n;\nloop invariant i3: 0 <= b <= 2*n;\nloop invariant i4: a + b == 3*i;\n\nloop invariant i6: a + b >= i;\nloop invariant i7: a + b <= 3*n;\nloop invariant i8: a <= 2*i;\nloop invariant i9: b <= 2*i;\nloop invariant i10: a >= i;\nloop invariant i11: b >= i;\n\n\nloop invariant i14: 0 <= a <= 3*n;\nloop invariant i15: 0 <= b <= 3*n;\nloop invariant i16: a+b <= 3*n;\nloop invariant i17: a+b >= 0;\nloop invariant i18: a == 0 ==> b == 0;\nloop invariant i19: b == 0 ==> a == 0;\nloop invariant i20: a >= 0 ==> b >= 0;\nloop invariant i21: b >= 0 ==> a >= 0;\nloop invariant i22: a == 0 ==> i == 0;\nloop invariant i23: b == 0 ==> i == 0;\nloop invariant i24: a >= 0 ==> i >= 0;\nloop invariant i25: b >= 0 ==> i >= 0;\nloop invariant i26: a == 3*n ==> i == n;\nloop invariant i27: b == 3*n ==> i == n;\nloop invariant i28: a >= 3*n ==> i >= n;\nloop invariant i29: b >= 3*n ==> i >= n;\nloop invariant i30: a <= 3*n ==> i <= n;\nloop invariant i31: b <= 3*n ==> i <= n;\nloop invariant i32: a >= 0;\nloop invariant i33: b >= 0;\nloop invariant i34: a + b >= 3 * i;\nloop invariant i35: a + b <= 3 * n;\n\n\n\n\nloop invariant i40: a + 2 * b >= 3 * i;\n\nloop invariant i42: a - 2 * b >= -3 * i;\n\nloop invariant i44: a <= 2 * i;\nloop invariant i45: b <= 2 * i;\nloop invariant i46: a <= 3 * n - i;\nloop invariant i47: b <= 3 * n - i;\n\nloop invariant i49: i >= 0;\nloop invariant i50: i <= n;\n\n\n\n\n\n\nloop invariant i57: a + b == 0 ==> b == 0;\nloop invariant i58: a + b == 0 ==> a == 0;\nloop invariant i59: a + b >= 0;\nloop invariant i60: a + b == 3*n ==> b == 2*n ==> a == n;\nloop invariant i61: a + b == 3*n ==> b == 2*n ==> a + b == 3*n;\nloop invariant i62: a + b == 3*n ==> b == 2*n ==> b >= 0;\nloop invariant i63: a + b == 3*n ==> b == 2*n ==> b <= 2*n;\nloop invariant i64: a + b == 3*n ==> b == 2*n ==> a >= 0;\nloop invariant i65: a + b == 3*n ==> b == 2*n ==> a <= 2*n;\nloop invariant i66: a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant i67: a + b == 3*n ==> b == 2*n ==> i <= n;\n\nloop invariant i69: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i >= 0;\nloop invariant i70: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> i <= n;\nloop invariant i71: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a >= 0;\nloop invariant i72: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> a <= 2*n;\nloop invariant i73: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i >= 0;\nloop invariant i74: a + b == 3*n ==> b == 2*n ==> a + b == 3*n ==> b == 2*n ==> a + b == 2*n ==> i <= n;\n\n\nloop invariant i77: (a + b) >= (3*i);\n\nloop invariant i79: (a + b) <= (3*i);\nloop invariant i80: (a - b) <= (2*i);\nloop invariant i81: (a + b) == (3*i);\n\n\nloop invariant i84: (a + b) == (3*i) ==> (a + b) == (3*i);\nloop invariant i85: (a - b) == (2*i) ==> (a + b) == (3*i);\nloop invariant i86: (a - b) == (2*i) ==> (a - b) == (2*i);\nloop invariant i87: (a + b) >= (3*i) ==> (a + b) >= (3*i);\n\nloop invariant i89: (a - b) >= (2*i) ==> (a + b) >= (3*i);\nloop invariant i90: (a - b) >= (2*i) ==> (a - b) >= (2*i);\nloop invariant i91: (a + b) <= (3*i) ==> (a + b) <= (3*i);\nloop invariant i92: (a + b) <= (3*i) ==> (a - b) <= (2*i);\nloop invariant i93: (a - b) <= (2*i) ==> (a + b) <= (3*i);\nloop invariant i94: (a - b) <= (2*i) ==> (a - b) <= (2*i);\nloop invariant i95: a + b >= 3*i;\nloop invariant i96: a + b <= 3*(i + 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i110: i < n ==> a + b != 3*n;\nloop invariant i111: a <= 2*n;\nloop invariant i112: b <= 2*n;\nloop invariant i113: a + b >= a;\nloop invariant i114: a + b >= b;\nloop invariant i115: a + b <= a + b;\n\n\n\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ { ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 3,
        "success_count": 3,
        "failure_count": 0,
        "success_rate": 1.0
    }
}