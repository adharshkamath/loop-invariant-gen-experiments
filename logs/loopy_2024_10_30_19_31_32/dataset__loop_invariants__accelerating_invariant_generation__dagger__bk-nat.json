{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant invalid >= unowned + nonexclusive + exclusive;\nloop invariant unowned + nonexclusive + exclusive <= invalid;\nloop invariant invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant invalid + unowned + nonexclusive + exclusive <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= unowned <= invalid;\nloop invariant 0 <= nonexclusive + unowned <= invalid;\nloop invariant 0 <= nonexclusive <= invalid;\nloop invariant 0 <= exclusive <= 1;\nloop invariant 1 <= invalid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant exclusive <= invalid;\nloop invariant nonexclusive <= invalid;\nloop invariant unowned <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant unowned >= 1;\nloop invariant nonexclusive >= 1;\nloop invariant exclusive <= 1;\nloop invariant nonexclusive <= 1;\nloop invariant unowned <= 1;\nloop invariant nonexclusive + unowned <= 1;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid <= unowned+nonexclusive+exclusive;\nloop invariant 0 <= unowned <= invalid+nonexclusive+exclusive;\nloop invariant 0 <= nonexclusive <= invalid+unowned+exclusive;\nloop invariant 0 <= exclusive <= invalid+unowned+nonexclusive;\nloop invariant exclusive == 1 || nonexclusive == 0 || unowned == 0;\nloop invariant unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant exclusive ==> exclusive == 1 && nonexclusive == 0 && unowned == 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && unowned == 0 && exclusive == 0;\nloop invariant unowned ==> unowned == 0 && nonexclusive == 0 && exclusive == 0;\nloop invariant nonexclusive ==> nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant unowned ==> unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant exclusive ==> exclusive == 0 || nonexclusive == 0 || unowned == 0;\nloop invariant exclusive ==> exclusive == 1 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant unowned ==> unowned == 0 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant exclusive ==> exclusive == 1;\nloop invariant nonexclusive ==> nonexclusive == 0;\nloop invariant unowned ==> unowned == 0;\nloop invariant exclusive ==> exclusive == 1 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant unowned ==> unowned == 0 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant exclusive ==> exclusive == 1 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant unowned ==> unowned == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant exclusive ==> exclusive == 1 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant unowned ==> unowned == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant exclusive ==> exclusive == 1 && invalid >= 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid >= 1;\nloop invariant unowned ==> unowned == 0 && invalid >= 1;\nloop invariant exclusive ==> exclusive == 1 && invalid == 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid == 1;\nloop invariant unowned ==> unowned == 0 && invalid == 1;\nloop invariant exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0;\nloop invariant unowned ==> unowned == 0 && invalid == 1 && unowned == 0;\nloop invariant exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant unowned ==> unowned == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\nloop invariant unowned ==> unowned == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 10000;\nloop invariant 0 <= nonexclusive <= 10000;\nloop invariant 0 <= unowned <= 10000;\nloop invariant 0 <= exclusive <= 10000;\nloop invariant invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= nonexclusive + unowned;\nloop invariant 0 <= exclusive + nonexclusive;\nloop invariant 0 <= exclusive + nonexclusive + unowned;\nloop invariant 0 <= invalid + unowned + exclusive;\nloop invariant 0 <= invalid + unowned + exclusive + nonexclusive;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive >= 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive >= 0 ==> unowned >= 0;\nloop invariant exclusive >= 0 ==> nonexclusive >= 0;\nloop invariant exclusive >= 0 ==> invalid >= 1;\nloop invariant exclusive >= 0 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant exclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 0 ==> unowned >= 0;\nloop invariant nonexclusive >= 0 ==> exclusive >= 0;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0 ==> exclusive + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant unowned >= 0 ==> invalid >= 1;\nloop invariant unowned >= 0 ==> nonexclusive >= 0;\nloop invariant unowned >= 0 ==> exclusive >= 0;\nloop invariant unowned >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 0 ==> nonexclusive + unowned >= 1;\nloop invariant unowned >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> unowned >= 0;\nloop invariant invalid >= 1 ==> nonexclusive >= 0;\nloop invariant invalid >= 1 ==> exclusive >= 0;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> nonexclusive + unowned >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant unowned + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant unowned + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant unowned + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant unowned + nonexclusive >= 1 ==> exclusive >= 0;\nloop invariant unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant exclusive + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant exclusive + nonexclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1 ==> nonexclusive >= 0;\nloop invariant invalid + unowned + exclusive >= 1 ==> exclusive >= 0;\nloop invariant invalid + unowned + exclusive >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive >= 1 ==> unowned >= 0;\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1 ==> exclusive >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= invalid0;\nloop invariant 0 <= unowned <= unowned0;\nloop invariant 0 <= nonexclusive <= nonexclusive0;\nloop invariant 0 <= exclusive <= exclusive0;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> exclusive == exclusive0;\nloop invariant nonexclusive == 0 ==> nonexclusive == nonexclusive0;\nloop invariant unowned == 0 ==> unowned == unowned0;\nloop invariant invalid >= 1 ==> invalid >= invalid0;\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant ! (exclusive==0) ==> exclusive == exclusive0;\nloop invariant ! (nonexclusive==0) ==> nonexclusive == nonexclusive0;\nloop invariant ! (unowned==0) ==> unowned == unowned0;\nloop invariant (invalid>= 1) ==> invalid >= invalid0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive ==> invalid + unowned + exclusive >= 1;\nloop invariant exclusive ==> unowned + nonexclusive >= 1;\nloop invariant nonexclusive ==> invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive ==> unowned + nonexclusive >= 1;\nloop invariant unowned ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned ==> nonexclusive + unowned >= 1;\nloop invariant invalid ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid ==> nonexclusive + unowned >= 1;\nloop invariant invalid ==> unowned + nonexclusive >= 1;\nloop invariant invalid ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid ==> unowned + nonexclusive >= 1;\nloop invariant invalid ==> nonexclusive + unowned >= 1;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 1; loop invariant 0 <= unowned <= 1; loop invariant 0 <= nonexclusive <= 1; loop invariant 0 <= exclusive <= 1; loop invariant invalid + unowned + exclusive >= 1; loop invariant 0 <= invalid + unowned + exclusive; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid < 100000;\nloop invariant exclusive == 0 ==> unowned < 100000;\nloop invariant exclusive == 0 ==> nonexclusive < 100000;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 1;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> unowned >= 1;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid and invalid <= 1;\nloop invariant 0 <= unowned and unowned <= 1;\nloop invariant 0 <= nonexclusive and nonexclusive <= 1;\nloop invariant 0 <= exclusive and exclusive <= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant invalid + nonexclusive + exclusive >= 1;\nloop invariant invalid + unowned + nonexclusive >= 1;\nloop invariant exclusive + nonexclusive + unowned >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= invalid <= 2;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant exclusive <= 1;\nloop invariant unowned <= invalid;\nloop invariant nonexclusive <= invalid;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant (unknown_int() ==> nonexclusive + unowned >= 1);\nloop invariant (unknown_int() ==> exclusive >= 0);\nloop invariant (unknown_int() ==> unowned >= 0);\nloop invariant (unknown_int() ==> nonexclusive >= 0);\nloop invariant (unknown_int() ==> invalid >= 1);\nloop invariant (unknown_int() ==> nonexclusive + unowned < invalid);\nloop invariant (unknown_int() ==> exclusive < 1);\nloop invariant (unknown_int() ==> unowned < invalid);\nloop invariant (unknown_int() ==> nonexclusive < invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive < invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive >= 0);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive >= 1);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant invalid + unowned + exclusive <= 3;\nloop invariant exclusive <= nonexclusive + unowned;\nloop invariant nonexclusive <= invalid + unowned + exclusive - 1;\nloop invariant unowned <= invalid + nonexclusive + exclusive - 1;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant 0 <= invalid + unowned + exclusive <= 1;\nloop invariant exclusive >= unowned;\nloop invariant exclusive >= nonexclusive;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= exclusive <= 1;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 0 <= invalid;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive + nonexclusive + unowned == 1;\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant invalid >= unowned + nonexclusive + exclusive;\nloop invariant unowned + nonexclusive + exclusive <= invalid;\nloop invariant invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant invalid + unowned + nonexclusive + exclusive <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\nloop invariant i7: invalid + unowned + nonexclusive + exclusive >= 1;\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= unowned <= invalid;\nloop invariant 0 <= nonexclusive + unowned <= invalid;\nloop invariant 0 <= nonexclusive <= invalid;\nloop invariant 0 <= exclusive <= 1;\nloop invariant 1 <= invalid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant invalid >= 0;\nloop invariant exclusive <= invalid;\nloop invariant nonexclusive <= invalid;\nloop invariant unowned <= invalid;\nloop invariant nonexclusive + unowned <= invalid;\nloop invariant nonexclusive + unowned >= 1;\nloop invariant unowned >= 1;\nloop invariant nonexclusive >= 1;\nloop invariant exclusive <= 1;\nloop invariant nonexclusive <= 1;\nloop invariant unowned <= 1;\nloop invariant nonexclusive + unowned <= 1;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive <= 0;\nloop invariant nonexclusive <= 0;\nloop invariant unowned <= 0;\nloop invariant nonexclusive + unowned <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant i6: exclusive >= 0;\nloop invariant i7: nonexclusive >= 0;\nloop invariant i8: unowned >= 0;\nloop invariant i9: invalid >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: nonexclusive + unowned >= 0;\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= invalid <= unowned+nonexclusive+exclusive;\nloop invariant 0 <= unowned <= invalid+nonexclusive+exclusive;\nloop invariant 0 <= nonexclusive <= invalid+unowned+exclusive;\nloop invariant 0 <= exclusive <= invalid+unowned+nonexclusive;\nloop invariant exclusive == 1 || nonexclusive == 0 || unowned == 0;\nloop invariant unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant exclusive ==> exclusive == 1 && nonexclusive == 0 && unowned == 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && unowned == 0 && exclusive == 0;\nloop invariant unowned ==> unowned == 0 && nonexclusive == 0 && exclusive == 0;\nloop invariant nonexclusive ==> nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant unowned ==> unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant exclusive ==> exclusive == 0 || nonexclusive == 0 || unowned == 0;\nloop invariant exclusive ==> exclusive == 1 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant unowned ==> unowned == 0 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant exclusive ==> exclusive == 1;\nloop invariant nonexclusive ==> nonexclusive == 0;\nloop invariant unowned ==> unowned == 0;\nloop invariant exclusive ==> exclusive == 1 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant unowned ==> unowned == 0 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant exclusive ==> exclusive == 1 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant unowned ==> unowned == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant exclusive ==> exclusive == 1 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant unowned ==> unowned == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant exclusive ==> exclusive == 1 && invalid >= 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid >= 1;\nloop invariant unowned ==> unowned == 0 && invalid >= 1;\nloop invariant exclusive ==> exclusive == 1 && invalid == 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid == 1;\nloop invariant unowned ==> unowned == 0 && invalid == 1;\nloop invariant exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0;\nloop invariant unowned ==> unowned == 0 && invalid == 1 && unowned == 0;\nloop invariant exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant unowned ==> unowned == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\nloop invariant nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\nloop invariant unowned ==> unowned == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid;\nloop invariant i2: 0 <= unowned;\nloop invariant i3: 0 <= nonexclusive;\nloop invariant i4: 0 <= exclusive;\n\n\nloop invariant i7: 0 <= nonexclusive <= invalid+unowned+exclusive;\n\n\nloop invariant i10: unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant i11: nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant i12: invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant i13: exclusive ==> exclusive == 1 && nonexclusive == 0 && unowned == 0;\n\n\nloop invariant i16: nonexclusive ==> nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant i17: unowned ==> unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant i18: exclusive ==> exclusive == 0 || nonexclusive == 0 || unowned == 0;\nloop invariant i19: exclusive ==> exclusive == 1 && invalid + unowned + nonexclusive + exclusive >= 1;\n\n\nloop invariant i22: exclusive ==> exclusive == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 10000;\nloop invariant 0 <= nonexclusive <= 10000;\nloop invariant 0 <= unowned <= 10000;\nloop invariant 0 <= exclusive <= 10000;\nloop invariant invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: invalid + nonexclusive + unowned + exclusive >= 1;\n\n\n\n\n\nloop invariant i11: exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant 0 <= nonexclusive + unowned;\nloop invariant 0 <= exclusive + nonexclusive;\nloop invariant 0 <= exclusive + nonexclusive + unowned;\nloop invariant 0 <= invalid + unowned + exclusive;\nloop invariant 0 <= invalid + unowned + exclusive + nonexclusive;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive >= 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive >= 0 ==> unowned >= 0;\nloop invariant exclusive >= 0 ==> nonexclusive >= 0;\nloop invariant exclusive >= 0 ==> invalid >= 1;\nloop invariant exclusive >= 0 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant exclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 0 ==> unowned >= 0;\nloop invariant nonexclusive >= 0 ==> exclusive >= 0;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 0 ==> exclusive + nonexclusive >= 1;\nloop invariant nonexclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant unowned >= 0 ==> invalid >= 1;\nloop invariant unowned >= 0 ==> nonexclusive >= 0;\nloop invariant unowned >= 0 ==> exclusive >= 0;\nloop invariant unowned >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 0 ==> nonexclusive + unowned >= 1;\nloop invariant unowned >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> unowned >= 0;\nloop invariant invalid >= 1 ==> nonexclusive >= 0;\nloop invariant invalid >= 1 ==> exclusive >= 0;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant invalid >= 1 ==> nonexclusive + unowned >= 1;\nloop invariant invalid >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant unowned + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant unowned + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant unowned + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant unowned + nonexclusive >= 1 ==> exclusive >= 0;\nloop invariant unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned + nonexclusive >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant exclusive + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant exclusive + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant exclusive + nonexclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid >= 1;\nloop invariant invalid + unowned + exclusive >= 1 ==> nonexclusive >= 0;\nloop invariant invalid + unowned + exclusive >= 1 ==> exclusive >= 0;\nloop invariant invalid + unowned + exclusive >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive >= 1 ==> unowned >= 0;\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1 ==> exclusive >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid;\nloop invariant i2: 0 <= unowned;\nloop invariant i3: 0 <= nonexclusive;\nloop invariant i4: 0 <= exclusive;\nloop invariant i5: 0 <= nonexclusive + unowned;\nloop invariant i6: 0 <= exclusive + nonexclusive;\nloop invariant i7: 0 <= exclusive + nonexclusive + unowned;\nloop invariant i8: 0 <= invalid + unowned + exclusive;\nloop invariant i9: 0 <= invalid + unowned + exclusive + nonexclusive;\nloop invariant i10: invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i12: exclusive >= 0 ==> unowned >= 0;\nloop invariant i13: exclusive >= 0 ==> nonexclusive >= 0;\n\n\nloop invariant i16: exclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i17: exclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i19: nonexclusive >= 0 ==> unowned >= 0;\nloop invariant i20: nonexclusive >= 0 ==> exclusive >= 0;\nloop invariant i21: nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i23: nonexclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i25: unowned >= 0 ==> nonexclusive >= 0;\nloop invariant i26: unowned >= 0 ==> exclusive >= 0;\nloop invariant i27: unowned >= 0 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i29: unowned >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i31: invalid >= 1 ==> unowned >= 0;\nloop invariant i32: invalid >= 1 ==> nonexclusive >= 0;\nloop invariant i33: invalid >= 1 ==> exclusive >= 0;\nloop invariant i34: invalid >= 1 ==> invalid + unowned + exclusive >= 1;\n\n\nloop invariant i37: invalid >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i39: unowned + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant i40: unowned + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i41: unowned + nonexclusive >= 1 ==> exclusive >= 0;\nloop invariant i42: unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i44: unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i46: exclusive + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant i47: exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i48: exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i50: exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\n\nloop invariant i53: invalid + unowned + exclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i54: invalid + unowned + exclusive >= 1 ==> exclusive >= 0;\n\nloop invariant i56: invalid + unowned + exclusive >= 1 ==> unowned >= 0;\nloop invariant i57: invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\n\nloop invariant i60: invalid + unowned + exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i61: invalid + unowned + exclusive + nonexclusive >= 1 ==> exclusive >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= invalid0;\nloop invariant 0 <= unowned <= unowned0;\nloop invariant 0 <= nonexclusive <= nonexclusive0;\nloop invariant 0 <= exclusive <= exclusive0;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive == 0 ==> exclusive == exclusive0;\nloop invariant nonexclusive == 0 ==> nonexclusive == nonexclusive0;\nloop invariant unowned == 0 ==> unowned == unowned0;\nloop invariant invalid >= 1 ==> invalid >= invalid0;\nloop invariant invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant ! (exclusive==0) ==> exclusive == exclusive0;\nloop invariant ! (nonexclusive==0) ==> nonexclusive == nonexclusive0;\nloop invariant ! (unowned==0) ==> unowned == unowned0;\nloop invariant (invalid>= 1) ==> invalid >= invalid0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive >= 1;\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid;\nloop invariant 0 <= unowned;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= exclusive;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive ==> invalid + unowned + exclusive >= 1;\nloop invariant exclusive ==> unowned + nonexclusive >= 1;\nloop invariant nonexclusive ==> invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive ==> unowned + nonexclusive >= 1;\nloop invariant unowned ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned ==> nonexclusive + unowned >= 1;\nloop invariant invalid ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid ==> nonexclusive + unowned >= 1;\nloop invariant invalid ==> unowned + nonexclusive >= 1;\nloop invariant invalid ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid ==> unowned + nonexclusive >= 1;\nloop invariant invalid ==> nonexclusive + unowned >= 1;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\nloop invariant invalid ==> nonexclusive >= 0;\nloop invariant invalid ==> unowned >= 0;\nloop invariant invalid ==> exclusive >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid;\nloop invariant i2: 0 <= unowned;\nloop invariant i3: 0 <= nonexclusive;\nloop invariant i4: 0 <= exclusive;\nloop invariant i5: invalid + unowned + exclusive >= 1;\nloop invariant i6: exclusive ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i8: nonexclusive ==> invalid + unowned + exclusive >= 1;\nloop invariant i9: nonexclusive ==> unowned + nonexclusive >= 1;\nloop invariant i10: unowned ==> invalid + unowned + exclusive >= 1;\nloop invariant i11: unowned ==> nonexclusive + unowned >= 1;\nloop invariant i12: invalid ==> invalid + unowned + exclusive >= 1;\n\n\nloop invariant i15: invalid ==> exclusive >= 0;\nloop invariant i16: invalid ==> nonexclusive >= 0;\nloop invariant i17: invalid ==> unowned >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 1; loop invariant 0 <= unowned <= 1; loop invariant 0 <= nonexclusive <= 1; loop invariant 0 <= exclusive <= 1; loop invariant invalid + unowned + exclusive >= 1; loop invariant 0 <= invalid + unowned + exclusive; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 100000;\nloop invariant 0 <= unowned <= 100000;\nloop invariant 0 <= nonexclusive <= 100000;\nloop invariant 0 <= exclusive <= 100000;\nloop invariant exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant exclusive == 0 ==> invalid >= 1;\nloop invariant exclusive == 0 ==> unowned >= 0;\nloop invariant exclusive == 0 ==> nonexclusive >= 0;\nloop invariant exclusive == 0 ==> invalid < 100000;\nloop invariant exclusive == 0 ==> unowned < 100000;\nloop invariant exclusive == 0 ==> nonexclusive < 100000;\nloop invariant exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 1;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> unowned >= 1;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant nonexclusive >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 1;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant invalid >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i22: unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\n\n\n\n\nloop invariant i27: unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\n\n\n\nloop invariant i31: nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid and invalid <= 1;\nloop invariant 0 <= unowned and unowned <= 1;\nloop invariant 0 <= nonexclusive and nonexclusive <= 1;\nloop invariant 0 <= exclusive and exclusive <= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant invalid + nonexclusive + exclusive >= 1;\nloop invariant invalid + unowned + nonexclusive >= 1;\nloop invariant exclusive + nonexclusive + unowned >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 1 <= invalid <= 2;\nloop invariant nonexclusive + unowned >= 0;\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant exclusive <= 1;\nloop invariant unowned <= invalid;\nloop invariant nonexclusive <= invalid;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant (unknown_int() ==> nonexclusive + unowned >= 1);\nloop invariant (unknown_int() ==> exclusive >= 0);\nloop invariant (unknown_int() ==> unowned >= 0);\nloop invariant (unknown_int() ==> nonexclusive >= 0);\nloop invariant (unknown_int() ==> invalid >= 1);\nloop invariant (unknown_int() ==> nonexclusive + unowned < invalid);\nloop invariant (unknown_int() ==> exclusive < 1);\nloop invariant (unknown_int() ==> unowned < invalid);\nloop invariant (unknown_int() ==> nonexclusive < invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive < invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive >= 0);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive >= 1);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: nonexclusive + unowned >= 0;\nloop invariant i3: exclusive >= 0;\nloop invariant i4: unowned >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant invalid + unowned + exclusive <= 3;\nloop invariant exclusive <= nonexclusive + unowned;\nloop invariant nonexclusive <= invalid + unowned + exclusive - 1;\nloop invariant unowned <= invalid + nonexclusive + exclusive - 1;\nloop invariant invalid >= 1;\nloop invariant exclusive >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant unowned >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: invalid + unowned + exclusive >= 1;\n\n\n\n\n\nloop invariant i11: exclusive >= 0;\nloop invariant i12: nonexclusive >= 0;\nloop invariant i13: unowned >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= invalid <= 1;\nloop invariant 0 <= unowned <= 1;\nloop invariant 0 <= nonexclusive <= 1;\nloop invariant 0 <= exclusive <= 1;\nloop invariant 0 <= invalid + unowned + exclusive <= 1;\nloop invariant exclusive >= unowned;\nloop invariant exclusive >= nonexclusive;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= exclusive <= 1;\nloop invariant 0 <= nonexclusive;\nloop invariant 0 <= unowned;\nloop invariant 0 <= invalid;\nloop invariant invalid + unowned + exclusive >= 1;\nloop invariant exclusive + nonexclusive + unowned == 1;\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\nloop invariant (unowned == 0) ==> !unknown_int();\nloop invariant (exclusive == 1) ==> !unknown_int();\nloop invariant (nonexclusive == 0) ==> !unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: 0 <= unowned;\nloop invariant i4: 0 <= invalid;\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 244: unexpected token 'and'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= invalid <= 1;\nloop invariant i2: 0 <= unowned <= 1;\nloop invariant i3: 0 <= nonexclusive <= 1;\nloop invariant i4: 0 <= exclusive <= 1;\nloop invariant i5: invalid >= unowned + nonexclusive + exclusive;\nloop invariant i6: unowned + nonexclusive + exclusive <= invalid;\nloop invariant i7: invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant i8: invalid + unowned + nonexclusive + exclusive <= 2;\nloop invariant i9: 0 <= unowned <= invalid;\nloop invariant i10: 0 <= nonexclusive + unowned <= invalid;\nloop invariant i11: 0 <= nonexclusive <= invalid;\nloop invariant i12: 1 <= invalid;\nloop invariant i13: 0 <= invalid <= 100000;\nloop invariant i14: 0 <= unowned <= 100000;\nloop invariant i15: 0 <= nonexclusive <= 100000;\nloop invariant i16: 0 <= exclusive <= 100000;\nloop invariant i17: exclusive >= 0;\nloop invariant i18: nonexclusive >= 0;\nloop invariant i19: unowned >= 0;\nloop invariant i20: invalid >= 0;\nloop invariant i21: exclusive <= invalid;\nloop invariant i22: nonexclusive <= invalid;\nloop invariant i23: unowned <= invalid;\nloop invariant i24: nonexclusive + unowned <= invalid;\nloop invariant i25: nonexclusive + unowned >= 1;\nloop invariant i26: unowned >= 1;\nloop invariant i27: nonexclusive >= 1;\nloop invariant i28: exclusive <= 1;\nloop invariant i29: nonexclusive <= 1;\nloop invariant i30: unowned <= 1;\nloop invariant i31: nonexclusive + unowned <= 1;\nloop invariant i32: nonexclusive + unowned >= 0;\nloop invariant i33: exclusive <= 0;\nloop invariant i34: nonexclusive <= 0;\nloop invariant i35: unowned <= 0;\nloop invariant i36: nonexclusive + unowned <= 0;\nloop invariant i37: 0 <= invalid;\nloop invariant i38: 0 <= unowned;\nloop invariant i39: 0 <= nonexclusive;\nloop invariant i40: 0 <= exclusive;\nloop invariant i41: 0 <= invalid <= unowned+nonexclusive+exclusive;\nloop invariant i42: 0 <= unowned <= invalid+nonexclusive+exclusive;\nloop invariant i43: 0 <= nonexclusive <= invalid+unowned+exclusive;\nloop invariant i44: 0 <= exclusive <= invalid+unowned+nonexclusive;\nloop invariant i45: exclusive == 1 || nonexclusive == 0 || unowned == 0;\nloop invariant i46: unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant i47: nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant i48: exclusive ==> exclusive == 1 && nonexclusive == 0 && unowned == 0;\nloop invariant i49: nonexclusive ==> nonexclusive == 0 && unowned == 0 && exclusive == 0;\nloop invariant i50: unowned ==> unowned == 0 && nonexclusive == 0 && exclusive == 0;\nloop invariant i51: nonexclusive ==> nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant i52: unowned ==> unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant i53: exclusive ==> exclusive == 0 || nonexclusive == 0 || unowned == 0;\nloop invariant i54: exclusive ==> exclusive == 1 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant i55: nonexclusive ==> nonexclusive == 0 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant i56: unowned ==> unowned == 0 && invalid + unowned + nonexclusive + exclusive >= 1;\nloop invariant i57: exclusive ==> exclusive == 1;\nloop invariant i58: nonexclusive ==> nonexclusive == 0;\nloop invariant i59: unowned ==> unowned == 0;\nloop invariant i60: exclusive ==> exclusive == 1 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant i61: nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant i62: unowned ==> unowned == 0 && invalid >= 1 && unowned+nonexclusive+exclusive >= 1;\nloop invariant i63: exclusive ==> exclusive == 1 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant i64: nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant i65: unowned ==> unowned == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0 && exclusive >= 0;\nloop invariant i66: exclusive ==> exclusive == 1 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant i67: nonexclusive ==> nonexclusive == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant i68: unowned ==> unowned == 0 && invalid >= 1 && unowned >= 0 && nonexclusive >= 0;\nloop invariant i69: exclusive ==> exclusive == 1 && invalid >= 1;\nloop invariant i70: nonexclusive ==> nonexclusive == 0 && invalid >= 1;\nloop invariant i71: unowned ==> unowned == 0 && invalid >= 1;\nloop invariant i72: exclusive ==> exclusive == 1 && invalid == 1;\nloop invariant i73: nonexclusive ==> nonexclusive == 0 && invalid == 1;\nloop invariant i74: unowned ==> unowned == 0 && invalid == 1;\nloop invariant i75: exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0;\nloop invariant i76: nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0;\nloop invariant i77: unowned ==> unowned == 0 && invalid == 1 && unowned == 0;\nloop invariant i78: exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant i79: nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant i80: unowned ==> unowned == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0;\nloop invariant i81: exclusive ==> exclusive == 1 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\nloop invariant i82: nonexclusive ==> nonexclusive == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\nloop invariant i83: unowned ==> unowned == 0 && invalid == 1 && unowned == 0 && nonexclusive == 0 && exclusive == 1;\nloop invariant i84: 0 <= invalid <= 10000;\nloop invariant i85: 0 <= nonexclusive <= 10000;\nloop invariant i86: 0 <= unowned <= 10000;\nloop invariant i87: 0 <= exclusive <= 10000;\nloop invariant i88: invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant i89: exclusive == 0 ==> nonexclusive + unowned + exclusive >= 1;\nloop invariant i90: exclusive == 0 ==> nonexclusive + unowned >= 1;\nloop invariant i91: exclusive == 0 ==> invalid >= 1;\nloop invariant i92: exclusive == 0 ==> unowned >= 0;\nloop invariant i93: exclusive == 0 ==> nonexclusive >= 0;\nloop invariant i94: exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant i95: 0 <= nonexclusive + unowned;\nloop invariant i96: 0 <= exclusive + nonexclusive;\nloop invariant i97: 0 <= exclusive + nonexclusive + unowned;\nloop invariant i98: 0 <= invalid + unowned + exclusive;\nloop invariant i99: 0 <= invalid + unowned + exclusive + nonexclusive;\nloop invariant i100: invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i101: exclusive >= 0 ==> nonexclusive + unowned >= 1;\nloop invariant i102: exclusive >= 0 ==> unowned >= 0;\nloop invariant i103: exclusive >= 0 ==> nonexclusive >= 0;\nloop invariant i104: exclusive >= 0 ==> invalid >= 1;\nloop invariant i105: exclusive >= 0 ==> unowned + nonexclusive >= 1;\nloop invariant i106: exclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i107: exclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i108: nonexclusive >= 0 ==> invalid >= 1;\nloop invariant i109: nonexclusive >= 0 ==> unowned >= 0;\nloop invariant i110: nonexclusive >= 0 ==> exclusive >= 0;\nloop invariant i111: nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i112: nonexclusive >= 0 ==> exclusive + nonexclusive >= 1;\nloop invariant i113: nonexclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i114: unowned >= 0 ==> invalid >= 1;\nloop invariant i115: unowned >= 0 ==> nonexclusive >= 0;\nloop invariant i116: unowned >= 0 ==> exclusive >= 0;\nloop invariant i117: unowned >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i118: unowned >= 0 ==> nonexclusive + unowned >= 1;\nloop invariant i119: unowned >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i120: invalid >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant i121: invalid >= 1 ==> unowned >= 0;\nloop invariant i122: invalid >= 1 ==> nonexclusive >= 0;\nloop invariant i123: invalid >= 1 ==> exclusive >= 0;\nloop invariant i124: invalid >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant i125: invalid >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant i126: invalid >= 1 ==> nonexclusive + unowned >= 1;\nloop invariant i127: invalid >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i128: unowned + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant i129: unowned + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant i130: unowned + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i131: unowned + nonexclusive >= 1 ==> exclusive >= 0;\nloop invariant i132: unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant i133: unowned + nonexclusive >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant i134: unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i135: exclusive + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant i136: exclusive + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant i137: exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i138: exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant i139: exclusive + nonexclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant i140: exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i141: invalid + unowned + exclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant i142: invalid + unowned + exclusive >= 1 ==> invalid >= 1;\nloop invariant i143: invalid + unowned + exclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i144: invalid + unowned + exclusive >= 1 ==> exclusive >= 0;\nloop invariant i145: invalid + unowned + exclusive >= 1 ==> exclusive + nonexclusive >= 1;\nloop invariant i146: invalid + unowned + exclusive >= 1 ==> unowned >= 0;\nloop invariant i147: invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\nloop invariant i148: invalid + unowned + exclusive + nonexclusive >= 1 ==> unowned + nonexclusive >= 1;\nloop invariant i149: invalid + unowned + exclusive + nonexclusive >= 1 ==> invalid >= 1;\nloop invariant i150: invalid + unowned + exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i151: invalid + unowned + exclusive + nonexclusive >= 1 ==> exclusive >= 0;\nloop invariant i152: 0 <= invalid <= invalid0;\nloop invariant i153: 0 <= unowned <= unowned0;\nloop invariant i154: 0 <= nonexclusive <= nonexclusive0;\nloop invariant i155: 0 <= exclusive <= exclusive0;\nloop invariant i156: invalid + unowned + exclusive >= 1;\nloop invariant i157: exclusive == 0 ==> exclusive == exclusive0;\nloop invariant i158: nonexclusive == 0 ==> nonexclusive == nonexclusive0;\nloop invariant i159: unowned == 0 ==> unowned == unowned0;\nloop invariant i160: invalid >= 1 ==> invalid >= invalid0;\nloop invariant i161: invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive >= 1;\nloop invariant i162: ! (exclusive==0) ==> exclusive == exclusive0;\nloop invariant i163: ! (nonexclusive==0) ==> nonexclusive == nonexclusive0;\nloop invariant i164: ! (unowned==0) ==> unowned == unowned0;\nloop invariant i165: (invalid>= 1) ==> invalid >= invalid0;\nloop invariant i166: exclusive ==> invalid + unowned + exclusive >= 1;\nloop invariant i167: exclusive ==> unowned + nonexclusive >= 1;\nloop invariant i168: nonexclusive ==> invalid + unowned + exclusive >= 1;\nloop invariant i169: nonexclusive ==> unowned + nonexclusive >= 1;\nloop invariant i170: unowned ==> invalid + unowned + exclusive >= 1;\nloop invariant i171: unowned ==> nonexclusive + unowned >= 1;\nloop invariant i172: invalid ==> invalid + unowned + exclusive >= 1;\nloop invariant i173: invalid ==> nonexclusive + unowned >= 1;\nloop invariant i174: invalid ==> unowned + nonexclusive >= 1;\nloop invariant i175: invalid ==> exclusive >= 0;\nloop invariant i176: invalid ==> nonexclusive >= 0;\nloop invariant i177: invalid ==> unowned >= 0;\nloop invariant i178: 0 <= invalid <= 1; loop invariant 0 <= unowned <= 1; loop invariant 0 <= nonexclusive <= 1; loop invariant 0 <= exclusive <= 1; loop invariant invalid + unowned + exclusive >= 1; loop invariant 0 <= invalid + unowned + exclusive; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1; loop invariant 0 <= invalid + unowned + exclusive - 1;\nloop invariant i179: exclusive == 0 ==> invalid < 100000;\nloop invariant i180: exclusive == 0 ==> unowned < 100000;\nloop invariant i181: exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i182: exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i183: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant i184: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant i185: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant i186: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant i187: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant i188: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i189: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i190: unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 1;\nloop invariant i191: unowned >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant i192: unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant i193: unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant i194: unowned >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant i195: unowned >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant i196: unowned >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i197: unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i198: nonexclusive >= 1 ==> exclusive == 0 ==> unowned >= 1;\nloop invariant i199: nonexclusive >= 1 ==> exclusive == 0 ==> invalid >= 1;\nloop invariant i200: nonexclusive >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant i201: nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant i202: nonexclusive >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant i203: nonexclusive >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant i204: nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i205: nonexclusive >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i206: invalid >= 1 ==> exclusive == 0 ==> unowned >= 1;\nloop invariant i207: invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 1;\nloop invariant i208: invalid >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant i209: invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\nloop invariant i210: invalid >= 1 ==> exclusive == 0 ==> invalid < 100000;\nloop invariant i211: invalid >= 1 ==> exclusive == 0 ==> unowned < 100000;\nloop invariant i212: invalid >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i213: invalid >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i214: 0 <= invalid and invalid <= 1;\nloop invariant i215: 0 <= unowned and unowned <= 1;\nloop invariant i216: 0 <= nonexclusive and nonexclusive <= 1;\nloop invariant i217: 0 <= exclusive and exclusive <= 1;\nloop invariant i218: invalid + nonexclusive + exclusive >= 1;\nloop invariant i219: invalid + unowned + nonexclusive >= 1;\nloop invariant i220: exclusive + nonexclusive + unowned >= 1;\nloop invariant i221: 1 <= invalid <= 2;\nloop invariant i222: (unknown_int() ==> nonexclusive + unowned >= 1);\nloop invariant i223: (unknown_int() ==> exclusive >= 0);\nloop invariant i224: (unknown_int() ==> unowned >= 0);\nloop invariant i225: (unknown_int() ==> nonexclusive >= 0);\nloop invariant i226: (unknown_int() ==> invalid >= 1);\nloop invariant i227: (unknown_int() ==> nonexclusive + unowned < invalid);\nloop invariant i228: (unknown_int() ==> exclusive < 1);\nloop invariant i229: (unknown_int() ==> unowned < invalid);\nloop invariant i230: (unknown_int() ==> nonexclusive < invalid);\nloop invariant i231: (unknown_int() ==> exclusive + unowned + nonexclusive < invalid);\nloop invariant i232: (unknown_int() ==> exclusive + unowned + nonexclusive >= 0);\nloop invariant i233: (unknown_int() ==> exclusive + unowned + nonexclusive >= 1);\nloop invariant i234: (unknown_int() ==> exclusive + unowned + nonexclusive <= invalid);\nloop invariant i235: invalid + unowned + exclusive <= 3;\nloop invariant i236: exclusive <= nonexclusive + unowned;\nloop invariant i237: nonexclusive <= invalid + unowned + exclusive - 1;\nloop invariant i238: unowned <= invalid + nonexclusive + exclusive - 1;\nloop invariant i239: invalid >= 1;\nloop invariant i240: 0 <= invalid + unowned + exclusive <= 1;\nloop invariant i241: exclusive >= unowned;\nloop invariant i242: exclusive >= nonexclusive;\nloop invariant i243: exclusive + nonexclusive + unowned == 1;\nloop invariant i244: (exclusive == 1) ==> !unknown_int();\nloop invariant i245: (nonexclusive == 0) ==> !unknown_int();\nloop invariant i246: (unowned == 0) ==> !unknown_int();\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
        "combined_annotation_num_solver_calls": 86,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) \nreturn 0;\n\n\tif (! (nonexclusive==0)) \nreturn 0;\n\n\tif (! (unowned==0)) \nreturn 0;\n\n\tif (! (invalid>= 1)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: 0 <= nonexclusive <= 1;\nloop invariant i4: 0 <= exclusive <= 1;\n\n\nloop invariant i7: invalid + unowned + nonexclusive + exclusive >= 1;\n\n\n\n\n\n\n\nloop invariant i15: 0 <= nonexclusive <= 100000;\nloop invariant i16: 0 <= exclusive <= 100000;\nloop invariant i17: exclusive >= 0;\nloop invariant i18: nonexclusive >= 0;\nloop invariant i19: unowned >= 0;\nloop invariant i20: invalid >= 0;\n\n\n\n\n\n\n\nloop invariant i28: exclusive <= 1;\nloop invariant i29: nonexclusive <= 1;\n\n\nloop invariant i32: nonexclusive + unowned >= 0;\n\n\n\n\nloop invariant i37: 0 <= invalid;\nloop invariant i38: 0 <= unowned;\nloop invariant i39: 0 <= nonexclusive;\nloop invariant i40: 0 <= exclusive;\n\n\nloop invariant i43: 0 <= nonexclusive <= invalid+unowned+exclusive;\n\n\nloop invariant i46: unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant i47: nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant i48: exclusive ==> exclusive == 1 && nonexclusive == 0 && unowned == 0;\n\n\nloop invariant i51: nonexclusive ==> nonexclusive == 0 || unowned == 0 || exclusive == 0;\nloop invariant i52: unowned ==> unowned == 0 || nonexclusive == 0 || exclusive == 0;\nloop invariant i53: exclusive ==> exclusive == 0 || nonexclusive == 0 || unowned == 0;\nloop invariant i54: exclusive ==> exclusive == 1 && invalid + unowned + nonexclusive + exclusive >= 1;\n\n\nloop invariant i57: exclusive ==> exclusive == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i85: 0 <= nonexclusive <= 10000;\n\nloop invariant i87: 0 <= exclusive <= 10000;\nloop invariant i88: invalid + nonexclusive + unowned + exclusive >= 1;\n\n\n\nloop invariant i92: exclusive == 0 ==> unowned >= 0;\nloop invariant i93: exclusive == 0 ==> nonexclusive >= 0;\nloop invariant i94: exclusive == 0 ==> invalid + nonexclusive + unowned + exclusive >= 1;\nloop invariant i95: 0 <= nonexclusive + unowned;\nloop invariant i96: 0 <= exclusive + nonexclusive;\nloop invariant i97: 0 <= exclusive + nonexclusive + unowned;\nloop invariant i98: 0 <= invalid + unowned + exclusive;\nloop invariant i99: 0 <= invalid + unowned + exclusive + nonexclusive;\nloop invariant i100: invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i102: exclusive >= 0 ==> unowned >= 0;\nloop invariant i103: exclusive >= 0 ==> nonexclusive >= 0;\n\n\nloop invariant i106: exclusive >= 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i107: exclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i109: nonexclusive >= 0 ==> unowned >= 0;\nloop invariant i110: nonexclusive >= 0 ==> exclusive >= 0;\nloop invariant i111: nonexclusive >= 0 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i113: nonexclusive >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i115: unowned >= 0 ==> nonexclusive >= 0;\nloop invariant i116: unowned >= 0 ==> exclusive >= 0;\nloop invariant i117: unowned >= 0 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i119: unowned >= 0 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i121: invalid >= 1 ==> unowned >= 0;\nloop invariant i122: invalid >= 1 ==> nonexclusive >= 0;\nloop invariant i123: invalid >= 1 ==> exclusive >= 0;\nloop invariant i124: invalid >= 1 ==> invalid + unowned + exclusive >= 1;\n\n\nloop invariant i127: invalid >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i129: unowned + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant i130: unowned + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i131: unowned + nonexclusive >= 1 ==> exclusive >= 0;\nloop invariant i132: unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i134: unowned + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\nloop invariant i136: exclusive + nonexclusive >= 1 ==> unowned >= 0;\nloop invariant i137: exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i138: exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i140: exclusive + nonexclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\n\nloop invariant i143: invalid + unowned + exclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i144: invalid + unowned + exclusive >= 1 ==> exclusive >= 0;\n\nloop invariant i146: invalid + unowned + exclusive >= 1 ==> unowned >= 0;\nloop invariant i147: invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive + nonexclusive >= 1;\n\n\nloop invariant i150: invalid + unowned + exclusive + nonexclusive >= 1 ==> nonexclusive >= 0;\nloop invariant i151: invalid + unowned + exclusive + nonexclusive >= 1 ==> exclusive >= 0;\n\n\n\n\nloop invariant i156: invalid + unowned + exclusive >= 1;\n\n\n\n\nloop invariant i161: invalid + unowned + exclusive >= 1 ==> invalid + unowned + exclusive >= 1;\n\n\n\n\nloop invariant i166: exclusive ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i168: nonexclusive ==> invalid + unowned + exclusive >= 1;\nloop invariant i169: nonexclusive ==> unowned + nonexclusive >= 1;\nloop invariant i170: unowned ==> invalid + unowned + exclusive >= 1;\nloop invariant i171: unowned ==> nonexclusive + unowned >= 1;\nloop invariant i172: invalid ==> invalid + unowned + exclusive >= 1;\n\n\nloop invariant i175: invalid ==> exclusive >= 0;\nloop invariant i176: invalid ==> nonexclusive >= 0;\nloop invariant i177: invalid ==> unowned >= 0;\n\n\n\nloop invariant i181: exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i182: exclusive == 0 ==> invalid + unowned + exclusive >= 1;\n\nloop invariant i184: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant i185: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\n\n\nloop invariant i188: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i189: nonexclusive + unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\n\n\nloop invariant i192: unowned >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant i193: unowned >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\n\n\nloop invariant i196: unowned >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i197: unowned >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\nloop invariant i198: nonexclusive >= 1 ==> exclusive == 0 ==> unowned >= 1;\n\nloop invariant i200: nonexclusive >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant i201: nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\n\n\nloop invariant i204: nonexclusive >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i205: nonexclusive >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\n\n\nloop invariant i208: invalid >= 1 ==> exclusive == 0 ==> unowned >= 0;\nloop invariant i209: invalid >= 1 ==> exclusive == 0 ==> nonexclusive >= 0;\n\n\nloop invariant i212: invalid >= 1 ==> exclusive == 0 ==> nonexclusive < 100000;\nloop invariant i213: invalid >= 1 ==> exclusive == 0 ==> invalid + unowned + exclusive >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) \nreturn 0;\n\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) \nreturn 0;\n\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\n\t{;\n//@ assert(unowned >= 0);\n}\n\n\t{;\n//@ assert(invalid >= 0);\n}\n\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "skipped": [],
        "total": 148,
        "success_count": 120,
        "failure_count": 28,
        "success_rate": 0.8108108108108109
    }
}