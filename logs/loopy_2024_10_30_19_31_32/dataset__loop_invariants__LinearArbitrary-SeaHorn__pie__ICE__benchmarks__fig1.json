{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x < 0;\nloop invariant y > 0;\nloop invariant y <= 50;\nloop invariant x >= (y * (y - 1) / 2);\nloop invariant x <= (y * (y - 1) / 2) + (y - 1);\n*/\n```",
            "```\n/*@\nloop invariant y > 0;\nloop invariant x + y <= 0;\nloop invariant x < 0;\nloop invariant y >= 1;\nloop invariant x >= -50;\nloop invariant x <= -50 + y;\nloop invariant y <= -50 - x;\nloop invariant (x <= -50 ==> y >= 1);\nloop invariant (x < 0 ==> y > 0);\nloop invariant (x >= -50 ==> y <= -50 - x);\nloop invariant (y >= 1 ==> x + y <= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y >= 1;\nloop invariant y <= (-50 - x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant x >= -50;\nloop invariant y > 0;\nloop invariant x + y > -50;\nloop invariant x + y <= 0 ==> y == -x;\n*/\n```",
            "```\n/*@\nloop invariant y > 0 ==> (x + y) >= 0;\nloop invariant y > 0 ==> (x + y) <= 0 ==> false;\nloop invariant y > 0 ==> true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant 0 <= y;\nloop invariant y > 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= abs(x);\nloop invariant x >= (-50 + (y - 1) * y / 2);\nloop invariant x + y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50; loop invariant 0 <= y <= 1; loop invariant x + y <= -50; loop invariant x + (y - 1) <= -50; loop invariant x + (y - 1) * y / 2 <= -50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant ( x >= -50);\nloop invariant ( y >= 0);\nloop invariant ( x + y <= -50);\nloop invariant ( x + y >= -50);\nloop invariant ( x + y == -50);\nloop invariant ( x + y == 0);\nloop invariant ( x + y == -1);\nloop invariant ( x + y == -2);\nloop invariant ( x + y == -3);\nloop invariant ( x + y == -4);\nloop invariant ( x + y == -5);\nloop invariant ( x + y == -6);\nloop invariant ( x + y == -7);\nloop invariant ( x + y == -8);\nloop invariant ( x + y == -9);\nloop invariant ( x + y == -10);\nloop invariant ( x + y == -11);\nloop invariant ( x + y == -12);\nloop invariant ( x + y == -13);\nloop invariant ( x + y == -14);\nloop invariant ( x + y == -15);\nloop invariant ( x + y == -16);\nloop invariant ( x + y == -17);\nloop invariant ( x + y == -18);\nloop invariant ( x + y == -19);\nloop invariant ( x + y == -20);\nloop invariant ( x + y == -21);\nloop invariant ( x + y == -22);\nloop invariant ( x + y == -23);\nloop invariant ( x + y == -24);\nloop invariant ( x + y == -25);\nloop invariant ( x + y == -26);\nloop invariant ( x + y == -27);\nloop invariant ( x + y == -28);\nloop invariant ( x + y == -29);\nloop invariant ( x + y == -30);\nloop invariant ( x + y == -31);\nloop invariant ( x + y == -32);\nloop invariant ( x + y == -33);\nloop invariant ( x + y == -34);\nloop invariant ( x + y == -35);\nloop invariant ( x + y == -36);\nloop invariant ( x + y == -37);\nloop invariant ( x + y == -38);\nloop invariant ( x + y == -39);\nloop invariant ( x + y == -40);\nloop invariant ( x + y == -41);\nloop invariant ( x + y == -42);\nloop invariant ( x + y == -43);\nloop invariant ( x + y == -44);\nloop invariant ( x + y == -45);\nloop invariant ( x + y == -46);\nloop invariant ( x + y == -47);\nloop invariant ( x + y == -48);\nloop invariant ( x + y == -49);\nloop invariant ( x + y == -50);\nloop invariant ( x + y == -51);\nloop invariant ( x + y == -52);\nloop invariant ( x + y == -53);\nloop invariant ( x + y == -54);\nloop invariant ( x + y == -55);\nloop invariant ( x + y == -56);\nloop invariant ( x + y == -57);\nloop invariant ( x + y == -58);\nloop invariant ( x + y == -59);\nloop invariant ( x + y == -60);\nloop invariant ( x + y == -61);\nloop invariant ( x + y == -62);\nloop invariant ( x + y == -63);\nloop invariant ( x + y == -64);\nloop invariant ( x + y == -65);\nloop invariant ( x + y == -66);\nloop invariant ( x + y == -67);\nloop invariant ( x + y == -68);\nloop invariant ( x + y == -69);\nloop invariant ( x + y == -70);\nloop invariant ( x + y == -71);\nloop invariant ( x + y == -72);\nloop invariant ( x + y == -73);\nloop invariant ( x + y == -74);\nloop invariant ( x + y == -75);\nloop invariant ( x + y == -76);\nloop invariant ( x + y == -77);\nloop invariant ( x + y == -78);\nloop invariant ( x + y == -79);\nloop invariant ( x + y == -80);\nloop invariant ( x + y == -81);\nloop invariant ( x + y == -82);\nloop invariant ( x + y == -83);\nloop invariant ( x + y == -84);\nloop invariant ( x + y == -85);\nloop invariant ( x + y == -86);\n*/\n```",
            "```\n/*@\nloop invariant - x >= -50; x < 0;\nloop invariant - y >= 0; y <= 100000;\nloop invariant - x <= -50 + y * y / 2;\nloop invariant - x >= -50 + (y - 1) * y / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x < 0;\nloop invariant y > 0;\nloop invariant y <= 50;\nloop invariant x >= (y * (y - 1) / 2);\nloop invariant x <= (y * (y - 1) / 2) + (y - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\nloop invariant i5: x <= (y * (y - 1) / 2) + (y - 1);\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x + y <= 0;\nloop invariant x < 0;\nloop invariant y >= 1;\nloop invariant x >= -50;\nloop invariant x <= -50 + y;\nloop invariant y <= -50 - x;\nloop invariant (x <= -50 ==> y >= 1);\nloop invariant (x < 0 ==> y > 0);\nloop invariant (x >= -50 ==> y <= -50 - x);\nloop invariant (y >= 1 ==> x + y <= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y >= 1;\nloop invariant y <= (-50 - x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= -50;\nloop invariant y > 0;\nloop invariant x + y > -50;\nloop invariant x + y <= 0 ==> y == -x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y > 0 ==> (x + y) >= 0;\nloop invariant y > 0 ==> (x + y) <= 0 ==> false;\nloop invariant y > 0 ==> true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant 0 <= y;\nloop invariant y > 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\nloop invariant x == (x + y);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant y == (x + y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= abs(x);\nloop invariant x >= (-50 + (y - 1) * y / 2);\nloop invariant x + y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50; loop invariant 0 <= y <= 1; loop invariant x + y <= -50; loop invariant x + (y - 1) <= -50; loop invariant x + (y - 1) * y / 2 <= -50;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 45,
                "annotations": "```\n/*@\nloop invariant ( x >= -50);\nloop invariant ( y >= 0);\nloop invariant ( x + y <= -50);\nloop invariant ( x + y >= -50);\nloop invariant ( x + y == -50);\nloop invariant ( x + y == 0);\nloop invariant ( x + y == -1);\nloop invariant ( x + y == -2);\nloop invariant ( x + y == -3);\nloop invariant ( x + y == -4);\nloop invariant ( x + y == -5);\nloop invariant ( x + y == -6);\nloop invariant ( x + y == -7);\nloop invariant ( x + y == -8);\nloop invariant ( x + y == -9);\nloop invariant ( x + y == -10);\nloop invariant ( x + y == -11);\nloop invariant ( x + y == -12);\nloop invariant ( x + y == -13);\nloop invariant ( x + y == -14);\nloop invariant ( x + y == -15);\nloop invariant ( x + y == -16);\nloop invariant ( x + y == -17);\nloop invariant ( x + y == -18);\nloop invariant ( x + y == -19);\nloop invariant ( x + y == -20);\nloop invariant ( x + y == -21);\nloop invariant ( x + y == -22);\nloop invariant ( x + y == -23);\nloop invariant ( x + y == -24);\nloop invariant ( x + y == -25);\nloop invariant ( x + y == -26);\nloop invariant ( x + y == -27);\nloop invariant ( x + y == -28);\nloop invariant ( x + y == -29);\nloop invariant ( x + y == -30);\nloop invariant ( x + y == -31);\nloop invariant ( x + y == -32);\nloop invariant ( x + y == -33);\nloop invariant ( x + y == -34);\nloop invariant ( x + y == -35);\nloop invariant ( x + y == -36);\nloop invariant ( x + y == -37);\nloop invariant ( x + y == -38);\nloop invariant ( x + y == -39);\nloop invariant ( x + y == -40);\nloop invariant ( x + y == -41);\nloop invariant ( x + y == -42);\nloop invariant ( x + y == -43);\nloop invariant ( x + y == -44);\nloop invariant ( x + y == -45);\nloop invariant ( x + y == -46);\nloop invariant ( x + y == -47);\nloop invariant ( x + y == -48);\nloop invariant ( x + y == -49);\nloop invariant ( x + y == -50);\nloop invariant ( x + y == -51);\nloop invariant ( x + y == -52);\nloop invariant ( x + y == -53);\nloop invariant ( x + y == -54);\nloop invariant ( x + y == -55);\nloop invariant ( x + y == -56);\nloop invariant ( x + y == -57);\nloop invariant ( x + y == -58);\nloop invariant ( x + y == -59);\nloop invariant ( x + y == -60);\nloop invariant ( x + y == -61);\nloop invariant ( x + y == -62);\nloop invariant ( x + y == -63);\nloop invariant ( x + y == -64);\nloop invariant ( x + y == -65);\nloop invariant ( x + y == -66);\nloop invariant ( x + y == -67);\nloop invariant ( x + y == -68);\nloop invariant ( x + y == -69);\nloop invariant ( x + y == -70);\nloop invariant ( x + y == -71);\nloop invariant ( x + y == -72);\nloop invariant ( x + y == -73);\nloop invariant ( x + y == -74);\nloop invariant ( x + y == -75);\nloop invariant ( x + y == -76);\nloop invariant ( x + y == -77);\nloop invariant ( x + y == -78);\nloop invariant ( x + y == -79);\nloop invariant ( x + y == -80);\nloop invariant ( x + y == -81);\nloop invariant ( x + y == -82);\nloop invariant ( x + y == -83);\nloop invariant ( x + y == -84);\nloop invariant ( x + y == -85);\nloop invariant ( x + y == -86);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant - x >= -50; x < 0;\nloop invariant - y >= 0; y <= 100000;\nloop invariant - x <= -50 + y * y / 2;\nloop invariant - x >= -50 + (y - 1) * y / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 139: unexpected token 'x'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\nloop invariant i1: x < 0;\nloop invariant i2: y > 0;\nloop invariant i3: y <= 50;\nloop invariant i4: x >= (y * (y - 1) / 2);\nloop invariant i5: x <= (y * (y - 1) / 2) + (y - 1);\nloop invariant i6: x + y <= 0;\nloop invariant i7: y >= 1;\nloop invariant i8: x >= -50;\nloop invariant i9: x <= -50 + y;\nloop invariant i10: y <= -50 - x;\nloop invariant i11: (x <= -50 ==> y >= 1);\nloop invariant i12: (x < 0 ==> y > 0);\nloop invariant i13: (x >= -50 ==> y <= -50 - x);\nloop invariant i14: (y >= 1 ==> x + y <= 0);\nloop invariant i15: 0 <= x <= -50;\nloop invariant i16: y <= (-50 - x);\nloop invariant i17: 0 <= y <= 100000;\nloop invariant i18: x >= (1 + (y - 1) * y / 2);\nloop invariant i19: x + y > -50;\nloop invariant i20: x + y <= 0 ==> y == -x;\nloop invariant i21: y > 0 ==> (x + y) >= 0;\nloop invariant i22: y > 0 ==> (x + y) <= 0 ==> false;\nloop invariant i23: y > 0 ==> true;\nloop invariant i24: 0 <= x < 0;\nloop invariant i25: 0 <= y;\nloop invariant i26: y == (x + y);\nloop invariant i27: x == (x + y);\nloop invariant i28: y == 0;\nloop invariant i29: x == 0;\nloop invariant i30: 1 <= y <= abs(x);\nloop invariant i31: x >= (-50 + (y - 1) * y / 2);\nloop invariant i32: x + y >= 0;\nloop invariant i33: 0 <= x <= -50; loop invariant 0 <= y <= 1; loop invariant x + y <= -50; loop invariant x + (y - 1) <= -50; loop invariant x + (y - 1) * y / 2 <= -50;\nloop invariant i34: 0 <= y <= x;\nloop invariant i35: x >= 0;\nloop invariant i36: ( x >= -50);\nloop invariant i37: ( y >= 0);\nloop invariant i38: ( x + y <= -50);\nloop invariant i39: ( x + y >= -50);\nloop invariant i40: ( x + y == -50);\nloop invariant i41: ( x + y == 0);\nloop invariant i42: ( x + y == -1);\nloop invariant i43: ( x + y == -2);\nloop invariant i44: ( x + y == -3);\nloop invariant i45: ( x + y == -4);\nloop invariant i46: ( x + y == -5);\nloop invariant i47: ( x + y == -6);\nloop invariant i48: ( x + y == -7);\nloop invariant i49: ( x + y == -8);\nloop invariant i50: ( x + y == -9);\nloop invariant i51: ( x + y == -10);\nloop invariant i52: ( x + y == -11);\nloop invariant i53: ( x + y == -12);\nloop invariant i54: ( x + y == -13);\nloop invariant i55: ( x + y == -14);\nloop invariant i56: ( x + y == -15);\nloop invariant i57: ( x + y == -16);\nloop invariant i58: ( x + y == -17);\nloop invariant i59: ( x + y == -18);\nloop invariant i60: ( x + y == -19);\nloop invariant i61: ( x + y == -20);\nloop invariant i62: ( x + y == -21);\nloop invariant i63: ( x + y == -22);\nloop invariant i64: ( x + y == -23);\nloop invariant i65: ( x + y == -24);\nloop invariant i66: ( x + y == -25);\nloop invariant i67: ( x + y == -26);\nloop invariant i68: ( x + y == -27);\nloop invariant i69: ( x + y == -28);\nloop invariant i70: ( x + y == -29);\nloop invariant i71: ( x + y == -30);\nloop invariant i72: ( x + y == -31);\nloop invariant i73: ( x + y == -32);\nloop invariant i74: ( x + y == -33);\nloop invariant i75: ( x + y == -34);\nloop invariant i76: ( x + y == -35);\nloop invariant i77: ( x + y == -36);\nloop invariant i78: ( x + y == -37);\nloop invariant i79: ( x + y == -38);\nloop invariant i80: ( x + y == -39);\nloop invariant i81: ( x + y == -40);\nloop invariant i82: ( x + y == -41);\nloop invariant i83: ( x + y == -42);\nloop invariant i84: ( x + y == -43);\nloop invariant i85: ( x + y == -44);\nloop invariant i86: ( x + y == -45);\nloop invariant i87: ( x + y == -46);\nloop invariant i88: ( x + y == -47);\nloop invariant i89: ( x + y == -48);\nloop invariant i90: ( x + y == -49);\nloop invariant i91: ( x + y == -51);\nloop invariant i92: ( x + y == -52);\nloop invariant i93: ( x + y == -53);\nloop invariant i94: ( x + y == -54);\nloop invariant i95: ( x + y == -55);\nloop invariant i96: ( x + y == -56);\nloop invariant i97: ( x + y == -57);\nloop invariant i98: ( x + y == -58);\nloop invariant i99: ( x + y == -59);\nloop invariant i100: ( x + y == -60);\nloop invariant i101: ( x + y == -61);\nloop invariant i102: ( x + y == -62);\nloop invariant i103: ( x + y == -63);\nloop invariant i104: ( x + y == -64);\nloop invariant i105: ( x + y == -65);\nloop invariant i106: ( x + y == -66);\nloop invariant i107: ( x + y == -67);\nloop invariant i108: ( x + y == -68);\nloop invariant i109: ( x + y == -69);\nloop invariant i110: ( x + y == -70);\nloop invariant i111: ( x + y == -71);\nloop invariant i112: ( x + y == -72);\nloop invariant i113: ( x + y == -73);\nloop invariant i114: ( x + y == -74);\nloop invariant i115: ( x + y == -75);\nloop invariant i116: ( x + y == -76);\nloop invariant i117: ( x + y == -77);\nloop invariant i118: ( x + y == -78);\nloop invariant i119: ( x + y == -79);\nloop invariant i120: ( x + y == -80);\nloop invariant i121: ( x + y == -81);\nloop invariant i122: ( x + y == -82);\nloop invariant i123: ( x + y == -83);\nloop invariant i124: ( x + y == -84);\nloop invariant i125: ( x + y == -85);\nloop invariant i126: ( x + y == -86);\nloop invariant i127: - x >= -50; x < 0;\nloop invariant i128: - y >= 0; y <= 100000;\nloop invariant i129: - x <= -50 + y * y / 2;\nloop invariant i130: - x >= -50 + (y - 1) * y / 2;\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 66,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \t/*@\n\n\n\n\nloop invariant i5: x <= (y * (y - 1) / 2) + (y - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c"
        ],
        "skipped": [],
        "total": 76,
        "success_count": 64,
        "failure_count": 12,
        "success_rate": 0.8421052631578947
    }
}