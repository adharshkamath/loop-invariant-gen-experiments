{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  do {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= a <= 1;\nloop invariant 0 <= x <= 10;\nloop invariant a >= 0;\nloop invariant a <= 1;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant (x == N);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= a <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= a <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N; loop invariant x >= 1 + (x - 1) * (x - 2) / 2; loop invariant a <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant a <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(a > 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N = 10;\nloop invariant a = 0;\nloop invariant x >= 1;\nloop invariant x <= N;\nloop invariant a <= 1;\nloop invariant x == N ==> a == 0;\nloop invariant x != N ==> a > 0;\nloop invariant x != N ==> a <= 1;\nloop invariant x >= 1 ==> a <= 1;\nloop invariant x >= 1 ==> a >= 0;\nloop invariant x >= 1 ==> a != 1;\nloop invariant x != N ==> a != 0;\nloop invariant a >= 0 ==> a <= 1;\nloop invariant a >= 0 ==> a != 1;\nloop invariant a >= 0 ==> a != 0;\nloop invariant a >= 0 ==> a != -1;\nloop invariant a >= 0 ==> a >= 0;\nloop invariant a >= 0 ==> a >= -1;\nloop invariant a >= 0 ==> a >= 1;\nloop invariant a >= 0 ==> a >= 2;\nloop invariant a >= 0 ==> a >= 3;\nloop invariant a >= 0 ==> a >= 4;\nloop invariant a >= 0 ==> a >= 5;\nloop invariant a >= 0 ==> a >= 6;\nloop invariant a >= 0 ==> a >= 7;\nloop invariant a >= 0 ==> a >= 8;\nloop invariant a >= 0 ==> a >= 9;\nloop invariant a >= 0 ==> a >= 10;\nloop invariant a >= 0 ==> a >= 11;\nloop invariant a >= 0 ==> a >= 12;\nloop invariant a >= 0 ==> a >= 13;\nloop invariant a >= 0 ==> a >= 14;\nloop invariant a >= 0 ==> a >= 15;\nloop invariant a >= 0 ==> a >= 16;\nloop invariant a >= 0 ==> a >= 17;\nloop invariant a >= 0 ==> a >= 18;\nloop invariant a >= 0 ==> a >= 19;\nloop invariant a >= 0 ==> a >= 20;\nloop invariant a >= 0 ==> a >= 21;\nloop invariant a >= 0 ==> a >= 22;\nloop invariant a >= 0 ==> a >= 23;\nloop invariant a >= 0 ==> a >= 24;\nloop invariant a >= 0 ==> a >= 25;\nloop invariant a >= 0 ==> a >= 26;\nloop invariant a >= 0 ==> a >= 27;\nloop invariant a >= 0 ==> a >= 28;\nloop invariant a >= 0 ==> a >= 29;\nloop invariant a >= 0 ==> a >= 30;\nloop invariant a >= 0 ==> a >= 31;\nloop invariant a >= 0 ==> a >= 32;\nloop invariant a >= 0 ==> a >= 33;\nloop invariant a >= 0 ==> a >= 34;\nloop invariant a >= 0 ==> a >= 35;\nloop invariant a >= 0 ==> a >= 36;\nloop invariant a >= 0 ==> a >= 37;\nloop invariant a >= 0 ==> a >= 38;\nloop invariant a >= 0 ==> a >= 39;\nloop invariant a >= 0 ==> a >= 40;\nloop invariant a >= 0 ==> a >= 41;\nloop invariant a >= 0 ==> a >= 42;\nloop invariant a >= 0 ==> a >= 43;\nloop invariant a >= 0 ==> a >= 44;\nloop invariant a >= 0 ==> a >= 45;\nloop invariant a >= 0 ==> a >= 46;\nloop invariant a >= 0 ==> a >= 47;\nloop invariant a >= 0 ==> a >= 48;\nloop invariant a >= 0 ==> a >= 49;\nloop invariant a >= 0 ==> a >= 50;\nloop invariant a >= 0 ==> a >= 51;\nloop invariant a >= 0 ==> a >= 52;\nloop invariant a >= 0 ==> a >= 53;\nloop invariant a >= 0 ==> a >= 54;\nloop invariant a >= 0 ==> a >= 55;\nloop invariant a >= 0 ==> a >= 56;\nloop invariant a >= 0 ==> a >= 57;\nloop invariant a >= 0 ==> a >= 58;\nloop invariant a >= 0 ==> a >= 59;\nloop invariant a >= 0 ==> a >= 60;\nloop invariant a >= 0 ==> a >= 61;\nloop invariant a >= 0 ==> a >= 62;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (a == 0);\n*/\n```",
            "```\n/*@\nloop invariant x = N;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant a = 0;\nloop invariant N = 10;\nloop invariant N >= 0;\nloop invariant N <= 10000;\nloop invariant x + 1 = N;\nloop invariant x + 1 >= 1;\nloop invariant x + 1 <= 10000;\nloop invariant (x + 1) >= 0;\nloop invariant (x + 1) <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant a <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\n*/\n```",
            "```\n/*@\nloop invariant x == N;\nloop invariant 0 <= x <= N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x == N;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant a <= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= a <= 1;\nloop invariant 0 <= x <= 10;\nloop invariant a >= 0;\nloop invariant a <= 1;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant (x == N);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: a <= 1;\nloop invariant i5: x >= 0;\n\n\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= a <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: 0 <= a <= x;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant 0 <= a <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: 0 <= a <= 1;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N; loop invariant x >= 1 + (x - 1) * (x - 2) / 2; loop invariant a <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= N; loop invariant x >= 1 + (x - 1) * (x - 2) / 2; loop invariant a <= 1;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant a <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: a <= 1;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(a > 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: !(a > 1);\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 70,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant N = 10;\nloop invariant a = 0;\nloop invariant x >= 1;\nloop invariant x <= N;\nloop invariant a <= 1;\nloop invariant x == N ==> a == 0;\nloop invariant x != N ==> a > 0;\nloop invariant x != N ==> a <= 1;\nloop invariant x >= 1 ==> a <= 1;\nloop invariant x >= 1 ==> a >= 0;\nloop invariant x >= 1 ==> a != 1;\nloop invariant x != N ==> a != 0;\nloop invariant a >= 0 ==> a <= 1;\nloop invariant a >= 0 ==> a != 1;\nloop invariant a >= 0 ==> a != 0;\nloop invariant a >= 0 ==> a != -1;\nloop invariant a >= 0 ==> a >= 0;\nloop invariant a >= 0 ==> a >= -1;\nloop invariant a >= 0 ==> a >= 1;\nloop invariant a >= 0 ==> a >= 2;\nloop invariant a >= 0 ==> a >= 3;\nloop invariant a >= 0 ==> a >= 4;\nloop invariant a >= 0 ==> a >= 5;\nloop invariant a >= 0 ==> a >= 6;\nloop invariant a >= 0 ==> a >= 7;\nloop invariant a >= 0 ==> a >= 8;\nloop invariant a >= 0 ==> a >= 9;\nloop invariant a >= 0 ==> a >= 10;\nloop invariant a >= 0 ==> a >= 11;\nloop invariant a >= 0 ==> a >= 12;\nloop invariant a >= 0 ==> a >= 13;\nloop invariant a >= 0 ==> a >= 14;\nloop invariant a >= 0 ==> a >= 15;\nloop invariant a >= 0 ==> a >= 16;\nloop invariant a >= 0 ==> a >= 17;\nloop invariant a >= 0 ==> a >= 18;\nloop invariant a >= 0 ==> a >= 19;\nloop invariant a >= 0 ==> a >= 20;\nloop invariant a >= 0 ==> a >= 21;\nloop invariant a >= 0 ==> a >= 22;\nloop invariant a >= 0 ==> a >= 23;\nloop invariant a >= 0 ==> a >= 24;\nloop invariant a >= 0 ==> a >= 25;\nloop invariant a >= 0 ==> a >= 26;\nloop invariant a >= 0 ==> a >= 27;\nloop invariant a >= 0 ==> a >= 28;\nloop invariant a >= 0 ==> a >= 29;\nloop invariant a >= 0 ==> a >= 30;\nloop invariant a >= 0 ==> a >= 31;\nloop invariant a >= 0 ==> a >= 32;\nloop invariant a >= 0 ==> a >= 33;\nloop invariant a >= 0 ==> a >= 34;\nloop invariant a >= 0 ==> a >= 35;\nloop invariant a >= 0 ==> a >= 36;\nloop invariant a >= 0 ==> a >= 37;\nloop invariant a >= 0 ==> a >= 38;\nloop invariant a >= 0 ==> a >= 39;\nloop invariant a >= 0 ==> a >= 40;\nloop invariant a >= 0 ==> a >= 41;\nloop invariant a >= 0 ==> a >= 42;\nloop invariant a >= 0 ==> a >= 43;\nloop invariant a >= 0 ==> a >= 44;\nloop invariant a >= 0 ==> a >= 45;\nloop invariant a >= 0 ==> a >= 46;\nloop invariant a >= 0 ==> a >= 47;\nloop invariant a >= 0 ==> a >= 48;\nloop invariant a >= 0 ==> a >= 49;\nloop invariant a >= 0 ==> a >= 50;\nloop invariant a >= 0 ==> a >= 51;\nloop invariant a >= 0 ==> a >= 52;\nloop invariant a >= 0 ==> a >= 53;\nloop invariant a >= 0 ==> a >= 54;\nloop invariant a >= 0 ==> a >= 55;\nloop invariant a >= 0 ==> a >= 56;\nloop invariant a >= 0 ==> a >= 57;\nloop invariant a >= 0 ==> a >= 58;\nloop invariant a >= 0 ==> a >= 59;\nloop invariant a >= 0 ==> a >= 60;\nloop invariant a >= 0 ==> a >= 61;\nloop invariant a >= 0 ==> a >= 62;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n\n\n\n\nloop invariant i6: a <= 1;\nloop invariant i7: x == N ==> a == 0;\n\nloop invariant i9: x != N ==> a <= 1;\nloop invariant i10: x >= 1 ==> a <= 1;\n\nloop invariant i12: x >= 1 ==> a != 1;\n\nloop invariant i14: a >= 0 ==> a <= 1;\nloop invariant i15: a >= 0 ==> a != 1;\n\nloop invariant i17: a >= 0 ==> a != -1;\nloop invariant i18: a >= 0 ==> a >= 0;\nloop invariant i19: a >= 0 ==> a >= -1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant (a == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: (a == 0);\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x = N;\nloop invariant x >= 0;\nloop invariant x <= N;\nloop invariant a = 0;\nloop invariant N = 10;\nloop invariant N >= 0;\nloop invariant N <= 10000;\nloop invariant x + 1 = N;\nloop invariant x + 1 >= 1;\nloop invariant x + 1 <= 10000;\nloop invariant (x + 1) >= 0;\nloop invariant (x + 1) <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\nloop invariant x >= 0;\nloop invariant x <= 10000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\nloop invariant i6: N >= 0;\nloop invariant i7: N <= 10000;\n\nloop invariant i9: x + 1 >= 1;\n\nloop invariant i11: (x + 1) >= 0;\n\n\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant a <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: a <= 1;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\nloop invariant !(a < 0);\nloop invariant !(a > 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: !(a > 1);\nloop invariant i3: !(a < 0);\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x == N;\nloop invariant 0 <= x <= N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant x == N;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\n\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= N;\nloop invariant a <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: a <= 0;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 28: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\nloop invariant i1: 1 <= a <= 1;\nloop invariant i2: 0 <= x <= 10;\nloop invariant i3: a >= 0;\nloop invariant i4: a <= 1;\nloop invariant i5: x >= 0;\nloop invariant i6: x <= 10;\nloop invariant i7: (x == N);\nloop invariant i8: 0 <= x <= N;\nloop invariant i9: 0 <= a <= x;\nloop invariant i10: 0 <= a <= 1;\nloop invariant i11: 0 <= x <= N; loop invariant x >= 1 + (x - 1) * (x - 2) / 2; loop invariant a <= 1;\nloop invariant i12: !(a > 1);\nloop invariant i13: N = 10;\nloop invariant i14: a = 0;\nloop invariant i15: x >= 1;\nloop invariant i16: x <= N;\nloop invariant i17: x == N ==> a == 0;\nloop invariant i18: x != N ==> a > 0;\nloop invariant i19: x != N ==> a <= 1;\nloop invariant i20: x >= 1 ==> a <= 1;\nloop invariant i21: x >= 1 ==> a >= 0;\nloop invariant i22: x >= 1 ==> a != 1;\nloop invariant i23: x != N ==> a != 0;\nloop invariant i24: a >= 0 ==> a <= 1;\nloop invariant i25: a >= 0 ==> a != 1;\nloop invariant i26: a >= 0 ==> a != 0;\nloop invariant i27: a >= 0 ==> a != -1;\nloop invariant i28: a >= 0 ==> a >= 0;\nloop invariant i29: a >= 0 ==> a >= -1;\nloop invariant i30: a >= 0 ==> a >= 1;\nloop invariant i31: a >= 0 ==> a >= 2;\nloop invariant i32: a >= 0 ==> a >= 3;\nloop invariant i33: a >= 0 ==> a >= 4;\nloop invariant i34: a >= 0 ==> a >= 5;\nloop invariant i35: a >= 0 ==> a >= 6;\nloop invariant i36: a >= 0 ==> a >= 7;\nloop invariant i37: a >= 0 ==> a >= 8;\nloop invariant i38: a >= 0 ==> a >= 9;\nloop invariant i39: a >= 0 ==> a >= 10;\nloop invariant i40: a >= 0 ==> a >= 11;\nloop invariant i41: a >= 0 ==> a >= 12;\nloop invariant i42: a >= 0 ==> a >= 13;\nloop invariant i43: a >= 0 ==> a >= 14;\nloop invariant i44: a >= 0 ==> a >= 15;\nloop invariant i45: a >= 0 ==> a >= 16;\nloop invariant i46: a >= 0 ==> a >= 17;\nloop invariant i47: a >= 0 ==> a >= 18;\nloop invariant i48: a >= 0 ==> a >= 19;\nloop invariant i49: a >= 0 ==> a >= 20;\nloop invariant i50: a >= 0 ==> a >= 21;\nloop invariant i51: a >= 0 ==> a >= 22;\nloop invariant i52: a >= 0 ==> a >= 23;\nloop invariant i53: a >= 0 ==> a >= 24;\nloop invariant i54: a >= 0 ==> a >= 25;\nloop invariant i55: a >= 0 ==> a >= 26;\nloop invariant i56: a >= 0 ==> a >= 27;\nloop invariant i57: a >= 0 ==> a >= 28;\nloop invariant i58: a >= 0 ==> a >= 29;\nloop invariant i59: a >= 0 ==> a >= 30;\nloop invariant i60: a >= 0 ==> a >= 31;\nloop invariant i61: a >= 0 ==> a >= 32;\nloop invariant i62: a >= 0 ==> a >= 33;\nloop invariant i63: a >= 0 ==> a >= 34;\nloop invariant i64: a >= 0 ==> a >= 35;\nloop invariant i65: a >= 0 ==> a >= 36;\nloop invariant i66: a >= 0 ==> a >= 37;\nloop invariant i67: a >= 0 ==> a >= 38;\nloop invariant i68: a >= 0 ==> a >= 39;\nloop invariant i69: a >= 0 ==> a >= 40;\nloop invariant i70: a >= 0 ==> a >= 41;\nloop invariant i71: a >= 0 ==> a >= 42;\nloop invariant i72: a >= 0 ==> a >= 43;\nloop invariant i73: a >= 0 ==> a >= 44;\nloop invariant i74: a >= 0 ==> a >= 45;\nloop invariant i75: a >= 0 ==> a >= 46;\nloop invariant i76: a >= 0 ==> a >= 47;\nloop invariant i77: a >= 0 ==> a >= 48;\nloop invariant i78: a >= 0 ==> a >= 49;\nloop invariant i79: a >= 0 ==> a >= 50;\nloop invariant i80: a >= 0 ==> a >= 51;\nloop invariant i81: a >= 0 ==> a >= 52;\nloop invariant i82: a >= 0 ==> a >= 53;\nloop invariant i83: a >= 0 ==> a >= 54;\nloop invariant i84: a >= 0 ==> a >= 55;\nloop invariant i85: a >= 0 ==> a >= 56;\nloop invariant i86: a >= 0 ==> a >= 57;\nloop invariant i87: a >= 0 ==> a >= 58;\nloop invariant i88: a >= 0 ==> a >= 59;\nloop invariant i89: a >= 0 ==> a >= 60;\nloop invariant i90: a >= 0 ==> a >= 61;\nloop invariant i91: a >= 0 ==> a >= 62;\nloop invariant i92: (a == 0);\nloop invariant i93: x = N;\nloop invariant i94: N >= 0;\nloop invariant i95: N <= 10000;\nloop invariant i96: x + 1 = N;\nloop invariant i97: x + 1 >= 1;\nloop invariant i98: x + 1 <= 10000;\nloop invariant i99: (x + 1) >= 0;\nloop invariant i100: (x + 1) <= 10000;\nloop invariant i101: x <= 10000;\nloop invariant i102: !(a < 0);\nloop invariant i103: x == N;\nloop invariant i104: a <= 0;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  /*@\n\nloop invariant i2: 0 <= x <= 10;\nloop invariant i3: a >= 0;\nloop invariant i4: a <= 1;\nloop invariant i5: x >= 0;\nloop invariant i6: x <= 10;\n\nloop invariant i8: 0 <= x <= N;\nloop invariant i9: 0 <= a <= x;\nloop invariant i10: 0 <= a <= 1;\nloop invariant i11: 0 <= x <= N; loop invariant x >= 1 + (x - 1) * (x - 2) / 2; loop invariant a <= 1;\nloop invariant i12: !(a > 1);\n\n\nloop invariant i15: x >= 1;\nloop invariant i16: x <= N;\nloop invariant i17: x == N ==> a == 0;\nloop invariant i18: x != N ==> a > 0;\nloop invariant i19: x != N ==> a <= 1;\nloop invariant i20: x >= 1 ==> a <= 1;\nloop invariant i21: x >= 1 ==> a >= 0;\nloop invariant i22: x >= 1 ==> a != 1;\nloop invariant i23: x != N ==> a != 0;\nloop invariant i24: a >= 0 ==> a <= 1;\nloop invariant i25: a >= 0 ==> a != 1;\nloop invariant i26: a >= 0 ==> a != 0;\nloop invariant i27: a >= 0 ==> a != -1;\nloop invariant i28: a >= 0 ==> a >= 0;\nloop invariant i29: a >= 0 ==> a >= -1;\nloop invariant i30: a >= 0 ==> a >= 1;\nloop invariant i31: a >= 0 ==> a >= 2;\nloop invariant i32: a >= 0 ==> a >= 3;\nloop invariant i33: a >= 0 ==> a >= 4;\nloop invariant i34: a >= 0 ==> a >= 5;\nloop invariant i35: a >= 0 ==> a >= 6;\nloop invariant i36: a >= 0 ==> a >= 7;\nloop invariant i37: a >= 0 ==> a >= 8;\nloop invariant i38: a >= 0 ==> a >= 9;\nloop invariant i39: a >= 0 ==> a >= 10;\nloop invariant i40: a >= 0 ==> a >= 11;\nloop invariant i41: a >= 0 ==> a >= 12;\nloop invariant i42: a >= 0 ==> a >= 13;\nloop invariant i43: a >= 0 ==> a >= 14;\nloop invariant i44: a >= 0 ==> a >= 15;\nloop invariant i45: a >= 0 ==> a >= 16;\nloop invariant i46: a >= 0 ==> a >= 17;\nloop invariant i47: a >= 0 ==> a >= 18;\nloop invariant i48: a >= 0 ==> a >= 19;\nloop invariant i49: a >= 0 ==> a >= 20;\nloop invariant i50: a >= 0 ==> a >= 21;\nloop invariant i51: a >= 0 ==> a >= 22;\nloop invariant i52: a >= 0 ==> a >= 23;\nloop invariant i53: a >= 0 ==> a >= 24;\nloop invariant i54: a >= 0 ==> a >= 25;\nloop invariant i55: a >= 0 ==> a >= 26;\nloop invariant i56: a >= 0 ==> a >= 27;\nloop invariant i57: a >= 0 ==> a >= 28;\nloop invariant i58: a >= 0 ==> a >= 29;\nloop invariant i59: a >= 0 ==> a >= 30;\nloop invariant i60: a >= 0 ==> a >= 31;\nloop invariant i61: a >= 0 ==> a >= 32;\nloop invariant i62: a >= 0 ==> a >= 33;\nloop invariant i63: a >= 0 ==> a >= 34;\nloop invariant i64: a >= 0 ==> a >= 35;\nloop invariant i65: a >= 0 ==> a >= 36;\nloop invariant i66: a >= 0 ==> a >= 37;\nloop invariant i67: a >= 0 ==> a >= 38;\nloop invariant i68: a >= 0 ==> a >= 39;\nloop invariant i69: a >= 0 ==> a >= 40;\nloop invariant i70: a >= 0 ==> a >= 41;\nloop invariant i71: a >= 0 ==> a >= 42;\nloop invariant i72: a >= 0 ==> a >= 43;\nloop invariant i73: a >= 0 ==> a >= 44;\nloop invariant i74: a >= 0 ==> a >= 45;\nloop invariant i75: a >= 0 ==> a >= 46;\nloop invariant i76: a >= 0 ==> a >= 47;\nloop invariant i77: a >= 0 ==> a >= 48;\nloop invariant i78: a >= 0 ==> a >= 49;\nloop invariant i79: a >= 0 ==> a >= 50;\nloop invariant i80: a >= 0 ==> a >= 51;\nloop invariant i81: a >= 0 ==> a >= 52;\nloop invariant i82: a >= 0 ==> a >= 53;\nloop invariant i83: a >= 0 ==> a >= 54;\nloop invariant i84: a >= 0 ==> a >= 55;\nloop invariant i85: a >= 0 ==> a >= 56;\nloop invariant i86: a >= 0 ==> a >= 57;\nloop invariant i87: a >= 0 ==> a >= 58;\nloop invariant i88: a >= 0 ==> a >= 59;\nloop invariant i89: a >= 0 ==> a >= 60;\nloop invariant i90: a >= 0 ==> a >= 61;\nloop invariant i91: a >= 0 ==> a >= 62;\nloop invariant i92: (a == 0);\n\nloop invariant i94: N >= 0;\nloop invariant i95: N <= 10000;\n\nloop invariant i97: x + 1 >= 1;\nloop invariant i98: x + 1 <= 10000;\nloop invariant i99: (x + 1) >= 0;\nloop invariant i100: (x + 1) <= 10000;\nloop invariant i101: x <= 10000;\nloop invariant i102: !(a < 0);\nloop invariant i103: x == N;\nloop invariant i104: a <= 0;\n*/\ndo {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 21,
        "success_count": 21,
        "failure_count": 0,
        "success_rate": 1.0
    }
}