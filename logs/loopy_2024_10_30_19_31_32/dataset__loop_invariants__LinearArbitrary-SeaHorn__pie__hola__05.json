{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant j = i + x + y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i = (1 + x) * x / 2;\nloop invariant j >= (1 + y) * y / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant 0 <= x;\nloop invariant x <= 2147483647;\nloop invariant 0 <= y;\nloop invariant y <= 2147483647;\nloop invariant 0 <= i;\nloop invariant i <= 2147483647;\nloop invariant 0 <= j;\nloop invariant j <= 2147483647;\nloop invariant 0 <= flag;\nloop invariant flag <= 1;\nloop invariant 0 <= x;\nloop invariant x <= 2147483647;\nloop invariant 0 <= y;\nloop invariant y <= 2147483647;\nloop invariant 0 <= x;\nloop invariant x <= 2147483647;\nloop invariant 0 <= y;\nloop invariant y <= 2147483647;\nloop invariant 0 <= i;\nloop invariant i <= 2147483647;\nloop invariant 0 <= j;\nloop invariant j <= 2147483647;\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant if flag then j >= i else j >= i + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 29;\nloop invariant 1 <= y <= 29;\nloop invariant 1 <= i <= 840;\nloop invariant 1 <= j <= 840;\nloop invariant (if flag then i <= j else true);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j;\nloop invariant 0 <= i;\nloop invariant i <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= j;\nloop invariant y <= i;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y - 1;\nloop invariant y <= i - j;\nloop invariant i <= j + x;\nloop invariant j <= i - y;\nloop invariant i <= j + x - y;\nloop invariant j <= i - y + x;\nloop invariant x <= y + j - i;\nloop invariant y <= i - j + x;\nloop invariant i <= j + x + y;\nloop invariant j <= i - x - y;\nloop invariant i <= j + x + y - 1;\nloop invariant j <= i - x - y + 1;\nloop invariant x <= y + j - i + 1;\nloop invariant y <= i - j + x - 1;\nloop invariant i <= j + x + y - 2;\nloop invariant j <= i - x - y + 2;\nloop invariant x <= y + j - i + 2;\nloop invariant y <= i - j + x - 2;\nloop invariant i <= j + x + y - 3;\nloop invariant j <= i - x - y + 3;\nloop invariant x <= y + j - i + 3;\nloop invariant y <= i - j + x - 3;\nloop invariant i <= j + x + y - 4;\nloop invariant j <= i - x - y + 4;\nloop invariant x <= y + j - i + 4;\nloop invariant y <= i - j + x - 4;\nloop invariant i <= j + x + y - 5;\nloop invariant j <= i - x - y + 5;\nloop invariant x <= y + j - i + 5;\nloop invariant y <= i - j + x - 5;\nloop invariant i <= j + x + y - 6;\nloop invariant j <= i - x - y + 6;\nloop invariant x <= y + j - i + 6;\nloop invariant y <= i - j + x - 6;\nloop invariant i <= j + x + y - 7;\nloop invariant j <= i - x - y + 7;\nloop invariant x <= y + j - i + 7;\nloop invariant y <= i - j + x - 7;\nloop invariant i <= j + x + y - 8;\nloop invariant j <= i - x - y + 8;\nloop invariant x <= y + j - i + 8;\nloop invariant y <= i - j + x - 8;\nloop invariant i <= j + x + y - 9;\nloop invariant j <= i - x - y + 9;\nloop invariant x <= y + j - i + 9;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 1 <= y <= 100000;\nloop invariant j - i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j; loop invariant x == i; loop invariant y == j; loop invariant x == y; loop invariant x == j - i; loop invariant y == j - i; loop invariant x == y + i - j; loop invariant y == x + i - j; loop invariant x >= j; loop invariant y >= j; loop invariant x <= j; loop invariant y <= j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2^31-1;\nloop invariant 1 <= y <= 2^31-1;\nloop invariant 0 <= i <= 2^31-1;\nloop invariant 0 <= j <= 2^31-1;\nloop invariant i <= j;\nloop invariant j >= i;\nloop invariant i == j || j > i;\nloop invariant i == j || j < i;\nloop invariant i == j || j != i;\nloop invariant i == j || j >= i;\nloop invariant i == j || j <= i;\nloop invariant i == j || j > i || j <= i;\nloop invariant i == j || j < i || j >= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2*i; loop invariant j >= i; loop invariant i >= 0; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= i; loop invariant y <= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant i >= x * x / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 0 <= i <= unknown1() * unknown1();\nloop invariant 0 <= j <= unknown1() * unknown1();\nloop invariant x <= y;\nloop invariant i <= j;\nloop invariant j <= i + unknown1();\nloop invariant i <= j + unknown1();\nloop invariant j <= i + unknown1() * unknown1();\nloop invariant i <= j + unknown1() * unknown1();\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i + j) <= (x + y);\nloop invariant x >= i;\nloop invariant y == j;\nloop invariant i <= x;\nloop invariant j <= y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 0 <= i <= x*(x+1)/2;\nloop invariant 0 <= j <= y*(y+1)/2;\nloop invariant (flag ==> j >= i);\nloop invariant (!flag ==> j >= i);\nloop invariant ((x == 0) && (y == 0) ==> (i == 0) && (j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant x <= y;\nloop invariant j >= i;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= j;\nloop invariant y <= i;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant j = i + x + y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i = (1 + x) * x / 2;\nloop invariant j >= (1 + y) * y / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\nloop invariant i6: j >= (1 + y) * y / 2;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant 0 <= x;\nloop invariant x <= 2147483647;\nloop invariant 0 <= y;\nloop invariant y <= 2147483647;\nloop invariant 0 <= i;\nloop invariant i <= 2147483647;\nloop invariant 0 <= j;\nloop invariant j <= 2147483647;\nloop invariant 0 <= flag;\nloop invariant flag <= 1;\nloop invariant 0 <= x;\nloop invariant x <= 2147483647;\nloop invariant 0 <= y;\nloop invariant y <= 2147483647;\nloop invariant 0 <= x;\nloop invariant x <= 2147483647;\nloop invariant 0 <= y;\nloop invariant y <= 2147483647;\nloop invariant 0 <= i;\nloop invariant i <= 2147483647;\nloop invariant 0 <= j;\nloop invariant j <= 2147483647;\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\nloop invariant i == (x * (x + 1) / 2);\nloop invariant j == (y * (y + 1) / 2);\nloop invariant flag == 1 ==> i > j;\nloop invariant flag == 0 ==> i == j;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\nloop invariant i3: flag == 0 ==> i == j;\nloop invariant i4: 0 <= x;\nloop invariant i5: x <= 2147483647;\nloop invariant i6: 0 <= y;\nloop invariant i7: y <= 2147483647;\nloop invariant i8: 0 <= i;\nloop invariant i9: i <= 2147483647;\nloop invariant i10: 0 <= j;\nloop invariant i11: j <= 2147483647;\n\n\nloop invariant i14: x == y;\nloop invariant i15: i == (x * (x + 1) / 2);\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant if flag then j >= i else j >= i + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 29;\nloop invariant 1 <= y <= 29;\nloop invariant 1 <= i <= 840;\nloop invariant 1 <= j <= 840;\nloop invariant (if flag then i <= j else true);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 32,
                "annotations": "```\n/*@\nloop invariant 0 <= j;\nloop invariant 0 <= i;\nloop invariant i <= j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= j;\nloop invariant y <= i;\nloop invariant x <= y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= y - 1;\nloop invariant y <= i - j;\nloop invariant i <= j + x;\nloop invariant j <= i - y;\nloop invariant i <= j + x - y;\nloop invariant j <= i - y + x;\nloop invariant x <= y + j - i;\nloop invariant y <= i - j + x;\nloop invariant i <= j + x + y;\nloop invariant j <= i - x - y;\nloop invariant i <= j + x + y - 1;\nloop invariant j <= i - x - y + 1;\nloop invariant x <= y + j - i + 1;\nloop invariant y <= i - j + x - 1;\nloop invariant i <= j + x + y - 2;\nloop invariant j <= i - x - y + 2;\nloop invariant x <= y + j - i + 2;\nloop invariant y <= i - j + x - 2;\nloop invariant i <= j + x + y - 3;\nloop invariant j <= i - x - y + 3;\nloop invariant x <= y + j - i + 3;\nloop invariant y <= i - j + x - 3;\nloop invariant i <= j + x + y - 4;\nloop invariant j <= i - x - y + 4;\nloop invariant x <= y + j - i + 4;\nloop invariant y <= i - j + x - 4;\nloop invariant i <= j + x + y - 5;\nloop invariant j <= i - x - y + 5;\nloop invariant x <= y + j - i + 5;\nloop invariant y <= i - j + x - 5;\nloop invariant i <= j + x + y - 6;\nloop invariant j <= i - x - y + 6;\nloop invariant x <= y + j - i + 6;\nloop invariant y <= i - j + x - 6;\nloop invariant i <= j + x + y - 7;\nloop invariant j <= i - x - y + 7;\nloop invariant x <= y + j - i + 7;\nloop invariant y <= i - j + x - 7;\nloop invariant i <= j + x + y - 8;\nloop invariant j <= i - x - y + 8;\nloop invariant x <= y + j - i + 8;\nloop invariant y <= i - j + x - 8;\nloop invariant i <= j + x + y - 9;\nloop invariant j <= i - x - y + 9;\nloop invariant x <= y + j - i + 9;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= j;\nloop invariant i2: 0 <= i;\nloop invariant i3: i <= j;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\nloop invariant i6: x <= j;\nloop invariant i7: y <= i;\nloop invariant i8: x <= y;\n\n\n\n\nloop invariant i13: i <= j + x;\n\nloop invariant i15: i <= j + x - y;\n\nloop invariant i17: x <= y + j - i;\n\nloop invariant i19: i <= j + x + y;\n\n\n\nloop invariant i23: x <= y + j - i + 1;\n\n\n\nloop invariant i27: x <= y + j - i + 2;\n\n\n\nloop invariant i31: x <= y + j - i + 3;\n\n\n\nloop invariant i35: x <= y + j - i + 4;\n\n\n\nloop invariant i39: x <= y + j - i + 5;\n\n\n\nloop invariant i43: x <= y + j - i + 6;\n\n\n\nloop invariant i47: x <= y + j - i + 7;\n\n\n\nloop invariant i51: x <= y + j - i + 8;\n\n\n\nloop invariant i55: x <= y + j - i + 9;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant 1 <= y <= 100000;\nloop invariant j - i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j; loop invariant x == i; loop invariant y == j; loop invariant x == y; loop invariant x == j - i; loop invariant y == j - i; loop invariant x == y + i - j; loop invariant y == x + i - j; loop invariant x >= j; loop invariant y >= j; loop invariant x <= j; loop invariant y <= j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= i <= j; loop invariant x == i; loop invariant y == j; loop invariant x == y; loop invariant x == j - i; loop invariant y == j - i; loop invariant x == y + i - j; loop invariant y == x + i - j; loop invariant x >= j; loop invariant y >= j; loop invariant x <= j; loop invariant y <= j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2^31-1;\nloop invariant 1 <= y <= 2^31-1;\nloop invariant 0 <= i <= 2^31-1;\nloop invariant 0 <= j <= 2^31-1;\nloop invariant i <= j;\nloop invariant j >= i;\nloop invariant i == j || j > i;\nloop invariant i == j || j < i;\nloop invariant i == j || j != i;\nloop invariant i == j || j >= i;\nloop invariant i == j || j <= i;\nloop invariant i == j || j > i || j <= i;\nloop invariant i == j || j < i || j >= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\nloop invariant i == j || j >= i || j <= i;\nloop invariant i == j || j <= i || j >= i;\nloop invariant i == j || j > i || j >= i;\nloop invariant i == j || j < i || j <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n\n\n\nloop invariant i9: i == j || j != i;\n\n\nloop invariant i12: i == j || j > i || j <= i;\nloop invariant i13: i == j || j < i || j >= i;\nloop invariant i14: i == j || j >= i || j <= i;\nloop invariant i15: i == j || j <= i || j >= i;\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2*i; loop invariant j >= i; loop invariant i >= 0; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= i; loop invariant y <= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant i >= x * x / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: i >= x * x / 2;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown1();\nloop invariant 0 <= y <= unknown1();\nloop invariant 0 <= i <= unknown1() * unknown1();\nloop invariant 0 <= j <= unknown1() * unknown1();\nloop invariant x <= y;\nloop invariant i <= j;\nloop invariant j <= i + unknown1();\nloop invariant i <= j + unknown1();\nloop invariant j <= i + unknown1() * unknown1();\nloop invariant i <= j + unknown1() * unknown1();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\nloop invariant i5: x <= y;\nloop invariant i6: i <= j;\n\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant (i + j) <= (x + y);\nloop invariant x >= i;\nloop invariant y == j;\nloop invariant i <= x;\nloop invariant j <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 0 <= i <= x*(x+1)/2;\nloop invariant 0 <= j <= y*(y+1)/2;\nloop invariant (flag ==> j >= i);\nloop invariant (!flag ==> j >= i);\nloop invariant ((x == 0) && (y == 0) ==> (i == 0) && (j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant x <= y;\nloop invariant j >= i;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= j;\nloop invariant y <= i;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i <= j;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\n\nloop invariant i2: x <= y;\nloop invariant i3: j >= i;\n\n\n\n\n\n\nloop invariant i10: i <= j;\n\n\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: j = i + x + y;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: i = (1 + x) * x / 2;\nloop invariant i6: j >= (1 + y) * y / 2;\nloop invariant i7: 0 <= flag <= 1;\nloop invariant i8: flag == 1 ==> i > j;\nloop invariant i9: flag == 0 ==> i == j;\nloop invariant i10: 0 <= x;\nloop invariant i11: x <= 2147483647;\nloop invariant i12: 0 <= y;\nloop invariant i13: y <= 2147483647;\nloop invariant i14: 0 <= i;\nloop invariant i15: i <= 2147483647;\nloop invariant i16: 0 <= j;\nloop invariant i17: j <= 2147483647;\nloop invariant i18: 0 <= flag;\nloop invariant i19: flag <= 1;\nloop invariant i20: x == y;\nloop invariant i21: i == (x * (x + 1) / 2);\nloop invariant i22: j == (y * (y + 1) / 2);\nloop invariant i23: i >= 0;\nloop invariant i24: j >= 0;\nloop invariant i25: if flag then j >= i else j >= i + 1;\nloop invariant i26: 1 <= x <= 29;\nloop invariant i27: 1 <= y <= 29;\nloop invariant i28: 1 <= i <= 840;\nloop invariant i29: 1 <= j <= 840;\nloop invariant i30: (if flag then i <= j else true);\nloop invariant i31: i <= j;\nloop invariant i32: x <= j;\nloop invariant i33: y <= i;\nloop invariant i34: x <= y;\nloop invariant i35: x >= 1;\nloop invariant i36: y >= 1;\nloop invariant i37: x <= y - 1;\nloop invariant i38: y <= i - j;\nloop invariant i39: i <= j + x;\nloop invariant i40: j <= i - y;\nloop invariant i41: i <= j + x - y;\nloop invariant i42: j <= i - y + x;\nloop invariant i43: x <= y + j - i;\nloop invariant i44: y <= i - j + x;\nloop invariant i45: i <= j + x + y;\nloop invariant i46: j <= i - x - y;\nloop invariant i47: i <= j + x + y - 1;\nloop invariant i48: j <= i - x - y + 1;\nloop invariant i49: x <= y + j - i + 1;\nloop invariant i50: y <= i - j + x - 1;\nloop invariant i51: i <= j + x + y - 2;\nloop invariant i52: j <= i - x - y + 2;\nloop invariant i53: x <= y + j - i + 2;\nloop invariant i54: y <= i - j + x - 2;\nloop invariant i55: i <= j + x + y - 3;\nloop invariant i56: j <= i - x - y + 3;\nloop invariant i57: x <= y + j - i + 3;\nloop invariant i58: y <= i - j + x - 3;\nloop invariant i59: i <= j + x + y - 4;\nloop invariant i60: j <= i - x - y + 4;\nloop invariant i61: x <= y + j - i + 4;\nloop invariant i62: y <= i - j + x - 4;\nloop invariant i63: i <= j + x + y - 5;\nloop invariant i64: j <= i - x - y + 5;\nloop invariant i65: x <= y + j - i + 5;\nloop invariant i66: y <= i - j + x - 5;\nloop invariant i67: i <= j + x + y - 6;\nloop invariant i68: j <= i - x - y + 6;\nloop invariant i69: x <= y + j - i + 6;\nloop invariant i70: y <= i - j + x - 6;\nloop invariant i71: i <= j + x + y - 7;\nloop invariant i72: j <= i - x - y + 7;\nloop invariant i73: x <= y + j - i + 7;\nloop invariant i74: y <= i - j + x - 7;\nloop invariant i75: i <= j + x + y - 8;\nloop invariant i76: j <= i - x - y + 8;\nloop invariant i77: x <= y + j - i + 8;\nloop invariant i78: y <= i - j + x - 8;\nloop invariant i79: i <= j + x + y - 9;\nloop invariant i80: j <= i - x - y + 9;\nloop invariant i81: x <= y + j - i + 9;\nloop invariant i82: 1 <= x <= 100000;\nloop invariant i83: 1 <= y <= 100000;\nloop invariant i84: j - i >= 0;\nloop invariant i85: 0 <= i <= j; loop invariant x == i; loop invariant y == j; loop invariant x == y; loop invariant x == j - i; loop invariant y == j - i; loop invariant x == y + i - j; loop invariant y == x + i - j; loop invariant x >= j; loop invariant y >= j; loop invariant x <= j; loop invariant y <= j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i;\nloop invariant i86: 1 <= x <= 2^31-1;\nloop invariant i87: 1 <= y <= 2^31-1;\nloop invariant i88: 0 <= i <= 2^31-1;\nloop invariant i89: 0 <= j <= 2^31-1;\nloop invariant i90: j >= i;\nloop invariant i91: i == j || j > i;\nloop invariant i92: i == j || j < i;\nloop invariant i93: i == j || j != i;\nloop invariant i94: i == j || j >= i;\nloop invariant i95: i == j || j <= i;\nloop invariant i96: i == j || j > i || j <= i;\nloop invariant i97: i == j || j < i || j >= i;\nloop invariant i98: i == j || j >= i || j <= i;\nloop invariant i99: i == j || j <= i || j >= i;\nloop invariant i100: i == j || j > i || j >= i;\nloop invariant i101: i == j || j < i || j <= i;\nloop invariant i102: 0 <= j <= 2*i; loop invariant j >= i; loop invariant i >= 0; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= i; loop invariant y <= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i;\nloop invariant i103: i >= x * x / 2;\nloop invariant i104: 0 <= x <= unknown1();\nloop invariant i105: 0 <= y <= unknown1();\nloop invariant i106: 0 <= i <= unknown1() * unknown1();\nloop invariant i107: 0 <= j <= unknown1() * unknown1();\nloop invariant i108: j <= i + unknown1();\nloop invariant i109: i <= j + unknown1();\nloop invariant i110: j <= i + unknown1() * unknown1();\nloop invariant i111: i <= j + unknown1() * unknown1();\nloop invariant i112: (i + j) <= (x + y);\nloop invariant i113: x >= i;\nloop invariant i114: y == j;\nloop invariant i115: i <= x;\nloop invariant i116: j <= y;\nloop invariant i117: 1 <= x <= y;\nloop invariant i118: 0 <= i <= x*(x+1)/2;\nloop invariant i119: 0 <= j <= y*(y+1)/2;\nloop invariant i120: (flag ==> j >= i);\nloop invariant i121: (!flag ==> j >= i);\nloop invariant i122: ((x == 0) && (y == 0) ==> (i == 0) && (j == 0));\nloop invariant i123: ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant i124: ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant i125: ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant i126: ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\nloop invariant i127: 1 <= i <= j;\nloop invariant i128: i >= 1;\nloop invariant i129: j >= 1;\nloop invariant i130: x <= i;\nloop invariant i131: y <= j;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
        "combined_annotation_num_solver_calls": 53,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\nloop invariant i6: j >= (1 + y) * y / 2;\n\n\nloop invariant i9: flag == 0 ==> i == j;\nloop invariant i10: 0 <= x;\nloop invariant i11: x <= 2147483647;\nloop invariant i12: 0 <= y;\nloop invariant i13: y <= 2147483647;\nloop invariant i14: 0 <= i;\nloop invariant i15: i <= 2147483647;\nloop invariant i16: 0 <= j;\nloop invariant i17: j <= 2147483647;\n\n\nloop invariant i20: x == y;\nloop invariant i21: i == (x * (x + 1) / 2);\n\nloop invariant i23: i >= 0;\nloop invariant i24: j >= 0;\n\n\n\n\n\n\nloop invariant i31: i <= j;\nloop invariant i32: x <= j;\nloop invariant i33: y <= i;\nloop invariant i34: x <= y;\n\n\n\n\nloop invariant i39: i <= j + x;\n\nloop invariant i41: i <= j + x - y;\n\nloop invariant i43: x <= y + j - i;\n\nloop invariant i45: i <= j + x + y;\n\n\n\nloop invariant i49: x <= y + j - i + 1;\n\n\n\nloop invariant i53: x <= y + j - i + 2;\n\n\nloop invariant i56: j <= i - x - y + 3;\nloop invariant i57: x <= y + j - i + 3;\n\n\nloop invariant i60: j <= i - x - y + 4;\nloop invariant i61: x <= y + j - i + 4;\n\n\nloop invariant i64: j <= i - x - y + 5;\nloop invariant i65: x <= y + j - i + 5;\n\n\nloop invariant i68: j <= i - x - y + 6;\nloop invariant i69: x <= y + j - i + 6;\n\n\nloop invariant i72: j <= i - x - y + 7;\nloop invariant i73: x <= y + j - i + 7;\n\n\nloop invariant i76: j <= i - x - y + 8;\nloop invariant i77: x <= y + j - i + 8;\n\n\nloop invariant i80: j <= i - x - y + 9;\nloop invariant i81: x <= y + j - i + 9;\n\n\nloop invariant i84: j - i >= 0;\nloop invariant i85: 0 <= i <= j; loop invariant x == i; loop invariant y == j; loop invariant x == y; loop invariant x == j - i; loop invariant y == j - i; loop invariant x == y + i - j; loop invariant y == x + i - j; loop invariant x >= j; loop invariant y >= j; loop invariant x <= j; loop invariant y <= j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i; loop invariant y == j; loop invariant i == j; loop invariant x == 0; loop invariant y == 0; loop invariant i == 0; loop invariant j == 0; loop invariant x == i;\n\n\n\n\nloop invariant i90: j >= i;\nloop invariant i91: i == j || j > i;\nloop invariant i92: i == j || j < i;\nloop invariant i93: i == j || j != i;\nloop invariant i94: i == j || j >= i;\nloop invariant i95: i == j || j <= i;\nloop invariant i96: i == j || j > i || j <= i;\nloop invariant i97: i == j || j < i || j >= i;\nloop invariant i98: i == j || j >= i || j <= i;\nloop invariant i99: i == j || j <= i || j >= i;\nloop invariant i100: i == j || j > i || j >= i;\nloop invariant i101: i == j || j < i || j <= i;\nloop invariant i102: 0 <= j <= 2*i; loop invariant j >= i; loop invariant i >= 0; loop invariant x >= 0; loop invariant y >= 0; loop invariant x <= i; loop invariant y <= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i; loop invariant x + y <= i; loop invariant x + y >= i;\nloop invariant i103: i >= x * x / 2;\n\n\n\n\n\n\n\n\nloop invariant i112: (i + j) <= (x + y);\nloop invariant i113: x >= i;\nloop invariant i114: y == j;\nloop invariant i115: i <= x;\nloop invariant i116: j <= y;\n\nloop invariant i118: 0 <= i <= x*(x+1)/2;\nloop invariant i119: 0 <= j <= y*(y+1)/2;\nloop invariant i120: (flag ==> j >= i);\nloop invariant i121: (!flag ==> j >= i);\nloop invariant i122: ((x == 0) && (y == 0) ==> (i == 0) && (j == 0));\nloop invariant i123: ((x == 0) && (y == 0) ==> (flag ==> j == 0));\nloop invariant i124: ((x == 0) && (y == 0) ==> (!flag ==> i == 0));\nloop invariant i125: ((x == 0) && (y == 0) ==> (flag ==> i == 0));\nloop invariant i126: ((x == 0) && (y == 0) ==> (!flag ==> j == 0));\n\n\n\nloop invariant i130: x <= i;\nloop invariant i131: y <= j;\n*/\nwhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c"
        ],
        "skipped": [],
        "total": 103,
        "success_count": 88,
        "failure_count": 15,
        "success_rate": 0.8543689320388349
    }
}