{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant i%2 == x%2;\nloop invariant (i%2 == 0) ==> (x == 2*y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 1 ==> x == 2*y+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant x == 2*y;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 0 ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y;\nloop invariant i%2 != 0 ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= i/2;\nloop invariant i <= n;\nloop invariant (i % 2 == 0 ==> x == 2*y);\nloop invariant (i % 2 != 0 ==> x == 2*y - 1);\nloop invariant (i % 2 == 0 ==> y == i/2);\nloop invariant (i % 2 != 0 ==> y == (i-1)/2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x <= 2*y;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 1 ==> x == 2*y + 1;\nloop invariant i%2 == 0 ==> i == 2*y;\nloop invariant i%2 == 1 ==> i == 2*y + 1;\nloop invariant i%2 == 0 ==> x == i + y;\nloop invariant i%2 == 1 ==> x == i + y - 1;\nloop invariant x == i + y;\nloop invariant y == i/2;\nloop invariant i == 2*y;\nloop invariant i%2 == 0 ==> i == n;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= i / 2;\nloop invariant (i % 2 == 0) ==> (x == 2 * y);\nloop invariant (i % 2 != 0) ==> (x == 2 * y + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 2*y >= x;\nloop invariant 2*y <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= i/2;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 1 ==> x == 2*(y-1) + 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> y == i/2;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 != 0 ==> y == (i-1)/2;\nloop invariant i%2 != 0 ==> x == 2*y + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x >= i;\nloop invariant x >= 2*y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant i%2 == x%2;\nloop invariant (i%2 == 0) ==> (x == 2*y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 1 ==> x == 2*y+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant x == 2*y;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 0 ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y;\nloop invariant i%2 != 0 ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= x <= n;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n;\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i16: i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i17: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\n\n\nloop invariant i20: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\n\n\n\n\n\n\nloop invariant i27: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i28: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\n\n\nloop invariant i31: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i32: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= i/2;\nloop invariant i <= n;\nloop invariant (i % 2 == 0 ==> x == 2*y);\nloop invariant (i % 2 != 0 ==> x == 2*y - 1);\nloop invariant (i % 2 == 0 ==> y == i/2);\nloop invariant (i % 2 != 0 ==> y == (i-1)/2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x <= i;\nloop invariant i5: y <= i/2;\n\n\n\nloop invariant i9: (i % 2 == 0 ==> y == i/2);\nloop invariant i10: (i % 2 != 0 ==> y == (i-1)/2);\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x <= 2*y;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 1 ==> x == 2*y + 1;\nloop invariant i%2 == 0 ==> i == 2*y;\nloop invariant i%2 == 1 ==> i == 2*y + 1;\nloop invariant i%2 == 0 ==> x == i + y;\nloop invariant i%2 == 1 ==> x == i + y - 1;\nloop invariant x == i + y;\nloop invariant y == i/2;\nloop invariant i == 2*y;\nloop invariant i%2 == 0 ==> i == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= i / 2;\nloop invariant (i % 2 == 0) ==> (x == 2 * y);\nloop invariant (i % 2 != 0) ==> (x == 2 * y + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\nloop invariant i2: 0 <= x <= i;\nloop invariant i3: 0 <= y <= i / 2;\nloop invariant i4: (i % 2 == 0) ==> (x == 2 * y);\nloop invariant i5: (i % 2 != 0) ==> (x == 2 * y + 1);\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 2*y >= x;\nloop invariant 2*y <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= i/2;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 == 1 ==> x == 2*(y-1) + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\nloop invariant i2: 0 <= x <= i;\nloop invariant i3: 0 <= y <= i/2;\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n/2;\nloop invariant i%2 == 0 ==> y == i/2;\nloop invariant i%2 == 0 ==> x == 2*y;\nloop invariant i%2 != 0 ==> y == (i-1)/2;\nloop invariant i%2 != 0 ==> x == 2*y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\nloop invariant i4: i%2 == 0 ==> y == i/2;\nloop invariant i5: i%2 == 0 ==> x == 2*y;\nloop invariant i6: i%2 != 0 ==> y == (i-1)/2;\nloop invariant i7: i%2 != 0 ==> x == 2*y + 1;\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant x >= i;\nloop invariant x >= 2*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\nloop invariant i2: x >= i;\n\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 == x%2 is partially proven to be inductive.\nloop invariant (i%2 == 0) ==> (x == 2*y) is partially proven to be inductive.\nloop invariant 0 <= y <= n / 2 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y is partially proven to be inductive.\nloop invariant i%2 == 1 ==> x == 2*y+1 is partially proven to be inductive.\nloop invariant x == 2*y is partially proven to be inductive.\nloop invariant i%2 == 0 ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 == 0 ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y is partially proven to be inductive.\nloop invariant i%2 != 0 ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 != 0 ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= x <= n is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= i is partially proven to be inductive.\nloop invariant y <= i/2 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant (i % 2 == 0 ==> x == 2*y) is partially proven to be inductive.\nloop invariant (i % 2 != 0 ==> x == 2*y - 1) is partially proven to be inductive.\nloop invariant (i % 2 == 0 ==> y == i/2) is partially proven to be inductive.\nloop invariant (i % 2 != 0 ==> y == (i-1)/2) is partially proven to be inductive.\nloop invariant 0 <= y <= n is partially proven to be inductive.\nloop invariant x <= 2*y is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant i%2 == 1 ==> x == 2*y + 1 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> i == 2*y is partially proven to be inductive.\nloop invariant i%2 == 1 ==> i == 2*y + 1 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> x == i + y is partially proven to be inductive.\nloop invariant i%2 == 1 ==> x == i + y - 1 is partially proven to be inductive.\nloop invariant x == i + y is partially proven to be inductive.\nloop invariant y == i/2 is partially proven to be inductive.\nloop invariant i == 2*y is partially proven to be inductive.\nloop invariant i%2 == 0 ==> i == n is preserved but not established.\nloop invariant 0 <= x <= i is partially proven to be inductive.\nloop invariant 0 <= y <= i / 2 is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> (x == 2 * y) is partially proven to be inductive.\nloop invariant (i % 2 != 0) ==> (x == 2 * y + 1) is partially proven to be inductive.\nloop invariant 2*y >= x is partially proven to be inductive.\nloop invariant 2*y <= x is partially proven to be inductive.\nloop invariant 0 <= y <= i/2 is partially proven to be inductive.\nloop invariant i%2 == 1 ==> x == 2*(y-1) + 1 is partially proven to be inductive.\nloop invariant i%2 == 0 ==> y == i/2 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> y == (i-1)/2 is partially proven to be inductive.\nloop invariant i%2 != 0 ==> x == 2*y + 1 is partially proven to be inductive.\nloop invariant x >= i is partially proven to be inductive.\nloop invariant x >= 2*y is partially proven to be inductive.\nAssertion x == 2 * y: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x <= n;\nloop invariant i3: 0 <= y <= n/2;\nloop invariant i4: i%2 == x%2;\nloop invariant i5: (i%2 == 0) ==> (x == 2*y);\nloop invariant i6: 0 <= y <= n / 2;\nloop invariant i7: i%2 == 0 ==> x == 2*y;\nloop invariant i8: i%2 == 1 ==> x == 2*y+1;\nloop invariant i9: x == 2*y;\nloop invariant i10: i%2 == 0 ==> 0 <= x <= n;\nloop invariant i11: i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i12: i%2 != 0 ==> x == 2*y;\nloop invariant i13: i%2 != 0 ==> 0 <= x <= n;\nloop invariant i14: i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i15: i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i16: i%2 == 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i17: i%2 != 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i18: i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i19: i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i20: i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i21: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\nloop invariant i22: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= x <= n;\nloop invariant i23: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i24: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\nloop invariant i25: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n;\nloop invariant i26: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i27: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i28: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i29: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i30: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i31: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i32: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\nloop invariant i33: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= x <= n;\nloop invariant i34: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> 0 <= y <= n/2;\nloop invariant i35: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i36: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\nloop invariant i37: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n;\nloop invariant i38: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2;\nloop invariant i39: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i40: i >= 0;\nloop invariant i41: x >= 0;\nloop invariant i42: y >= 0;\nloop invariant i43: x <= i;\nloop invariant i44: y <= i/2;\nloop invariant i45: i <= n;\nloop invariant i46: (i % 2 == 0 ==> x == 2*y);\nloop invariant i47: (i % 2 != 0 ==> x == 2*y - 1);\nloop invariant i48: (i % 2 == 0 ==> y == i/2);\nloop invariant i49: (i % 2 != 0 ==> y == (i-1)/2);\nloop invariant i50: 0 <= y <= n;\nloop invariant i51: x <= 2*y;\nloop invariant i52: x <= n;\nloop invariant i53: i%2 == 1 ==> x == 2*y + 1;\nloop invariant i54: i%2 == 0 ==> i == 2*y;\nloop invariant i55: i%2 == 1 ==> i == 2*y + 1;\nloop invariant i56: i%2 == 0 ==> x == i + y;\nloop invariant i57: i%2 == 1 ==> x == i + y - 1;\nloop invariant i58: x == i + y;\nloop invariant i59: y == i/2;\nloop invariant i60: i == 2*y;\nloop invariant i61: i%2 == 0 ==> i == n;\nloop invariant i62: 0 <= x <= i;\nloop invariant i63: 0 <= y <= i / 2;\nloop invariant i64: (i % 2 == 0) ==> (x == 2 * y);\nloop invariant i65: (i % 2 != 0) ==> (x == 2 * y + 1);\nloop invariant i66: 2*y >= x;\nloop invariant i67: 2*y <= x;\nloop invariant i68: 0 <= y <= i/2;\nloop invariant i69: i%2 == 1 ==> x == 2*(y-1) + 1;\nloop invariant i70: i%2 == 0 ==> y == i/2;\nloop invariant i71: i%2 != 0 ==> y == (i-1)/2;\nloop invariant i72: i%2 != 0 ==> x == 2*y + 1;\nloop invariant i73: x >= i;\nloop invariant i74: x >= 2*y;\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  /*@\n\n\n\nloop invariant i4: i%2 == x%2;\nloop invariant i5: (i%2 == 0) ==> (x == 2*y);\n\nloop invariant i7: i%2 == 0 ==> x == 2*y;\nloop invariant i8: i%2 == 1 ==> x == 2*y+1;\n\n\n\n\nloop invariant i13: i%2 != 0 ==> 0 <= x <= n;\nloop invariant i14: i%2 != 0 ==> 0 <= y <= n/2;\n\n\nloop invariant i17: i%2 != 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i18: i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i19: i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i20: i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i21: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\n\n\nloop invariant i24: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\nloop invariant i25: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n;\nloop invariant i26: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2;\n\n\nloop invariant i29: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= x <= n;\nloop invariant i30: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> 0 <= y <= n/2;\nloop invariant i31: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0;\nloop invariant i32: i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y ==> i%2 == 0 ==> x == 2*y;\n\n\nloop invariant i35: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0;\nloop invariant i36: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y;\nloop invariant i37: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= x <= n;\nloop invariant i38: i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> x == 2*y ==> i%2 != 0 ==> 0 <= y <= n/2;\n\nloop invariant i40: i >= 0;\nloop invariant i41: x >= 0;\nloop invariant i42: y >= 0;\nloop invariant i43: x <= i;\nloop invariant i44: y <= i/2;\n\nloop invariant i46: (i % 2 == 0 ==> x == 2*y);\n\nloop invariant i48: (i % 2 == 0 ==> y == i/2);\nloop invariant i49: (i % 2 != 0 ==> y == (i-1)/2);\n\n\n\nloop invariant i53: i%2 == 1 ==> x == 2*y + 1;\nloop invariant i54: i%2 == 0 ==> i == 2*y;\nloop invariant i55: i%2 == 1 ==> i == 2*y + 1;\n\n\n\nloop invariant i59: y == i/2;\n\n\nloop invariant i62: 0 <= x <= i;\nloop invariant i63: 0 <= y <= i / 2;\nloop invariant i64: (i % 2 == 0) ==> (x == 2 * y);\nloop invariant i65: (i % 2 != 0) ==> (x == 2 * y + 1);\n\nloop invariant i67: 2*y <= x;\nloop invariant i68: 0 <= y <= i/2;\n\nloop invariant i70: i%2 == 0 ==> y == i/2;\nloop invariant i71: i%2 != 0 ==> y == (i-1)/2;\nloop invariant i72: i%2 != 0 ==> x == 2*y + 1;\nloop invariant i73: x >= i;\nloop invariant i74: x >= 2*y;\n*/\nwhile(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c"
        ],
        "skipped": [],
        "total": 119,
        "success_count": 100,
        "failure_count": 19,
        "success_rate": 0.8403361344537815
    }
}