{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    while (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x >= (1 + (i - 1) * i / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x;\nloop invariant 0 <= y <= 2;\nloop invariant y == 2 || x >= 0;\nloop invariant y == 2 || i >= 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\n*/\n```",
            "```\n/*@\nloop invariant y <= 2 ==> 0 <= i <= 10;\nloop invariant x <= -1 ==> y <= 2;\nloop invariant x <= -1 ==> x <= 0;\nloop invariant x <= -1 ==> i = 10;\nloop invariant x <= -1 ==> y = 2;\nloop invariant y <= 2 ==> x = 0;\nloop invariant y <= 2 ==> i = 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant i <= 10;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant y <= 10;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant y == x;\n*/\n```",
            "```\n/*@\nloop invariant y <= 2;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant !(y > 2) ==> x >= y;\nloop invariant (y <= 2) ==> x >= 0;\nloop invariant x >= y ==> !(x <= -1);\nloop invariant y >= 0 ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> x >= y;\nloop invariant !(y > 2) ==> x >= 0;\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= unknown_uint();\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant 0 <= x <= 2;\nloop invariant y > 0 ==> x >= unknown_uint();\nloop invariant y <= 2 ==> x >= 0;\nloop invariant y > 0 ==> x >= 0;\nloop invariant y <= 2 ==> i >= 0;\nloop invariant y > 0 ==> i >= 0;\nloop invariant i >= 10 ==> x >= 0;\nloop invariant i >= 10 ==> y > 0;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant y <= 2;\nloop invariant i < 10 ==> x >= 0;\nloop invariant i < 10 ==> x <= 10;\nloop invariant i < 10 ==> y <= 2;\nloop invariant i < 10 ==> x >= y;\nloop invariant i < 10 ==> x - y >= 0;\nloop invariant i < 10 ==> x - y <= 10;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x >= 0) ==> (y <= 2) ==> (x >= 0);\nloop invariant i > 10 ==> (x <= 0);\nloop invariant 0 <= i <= 10;\nloop invariant true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 2;\nloop invariant y <= 2;\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 2;\nloop invariant y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant !(y > 2);\nloop invariant x >= 0;\nloop invariant i <= 10;\nloop invariant y <= 2;\nloop invariant !(x <= -1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 9;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x >= (1 + (i - 1) * i / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\nloop invariant i2: 0 <= x;\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x;\nloop invariant 0 <= y <= 2;\nloop invariant y == 2 || x >= 0;\nloop invariant y == 2 || i >= 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\nloop invariant y == 2 || i == 10 || x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 0 <= x;\n\nloop invariant i4: y == 2 || x >= 0;\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant y <= 2 ==> 0 <= i <= 10;\nloop invariant x <= -1 ==> y <= 2;\nloop invariant x <= -1 ==> x <= 0;\nloop invariant x <= -1 ==> i = 10;\nloop invariant x <= -1 ==> y = 2;\nloop invariant y <= 2 ==> x = 0;\nloop invariant y <= 2 ==> i = 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\nloop invariant y <= 2 ==> 0 <= x <= 0;\nloop invariant y <= 2 ==> 0 <= y <= 2;\nloop invariant y <= 2 ==> 0 <= i <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: y <= 2 ==> 0 <= i <= 10;\nloop invariant i2: x <= -1 ==> y <= 2;\nloop invariant i3: x <= -1 ==> x <= 0;\n\n\n\n\n\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant i <= 10;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\nloop invariant i >= 0;\nloop invariant i <= 9;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\n\nloop invariant i3: i <= 10;\nloop invariant i4: i >= 0;\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant y <= 10;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2;\n\n\n\nloop invariant i7: y <= 10;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant y == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\n\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y <= 2;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant !(y > 2) ==> x >= y;\nloop invariant (y <= 2) ==> x >= 0;\nloop invariant x >= y ==> !(x <= -1);\nloop invariant y >= 0 ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> x >= y;\nloop invariant !(y > 2) ==> x >= 0;\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\nloop invariant !(y > 2) ==> !(x <= -1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: y <= 2;\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: (y <= 2) ==> x >= 0;\nloop invariant i6: x >= y ==> !(x <= -1);\nloop invariant i7: y >= 0 ==> !(x <= -1);\nloop invariant i8: !(y > 2) ==> !(x <= -1);\nloop invariant i9: !(y > 2) ==> x >= 0;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= unknown_uint();\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant 0 <= x <= 2;\nloop invariant y > 0 ==> x >= unknown_uint();\nloop invariant y <= 2 ==> x >= 0;\nloop invariant y > 0 ==> x >= 0;\nloop invariant y <= 2 ==> i >= 0;\nloop invariant y > 0 ==> i >= 0;\nloop invariant i >= 10 ==> x >= 0;\nloop invariant i >= 10 ==> y > 0;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\nloop invariant y <= 2 ==> i >= 10;\nloop invariant y > 0 ==> i >= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\n\n\nloop invariant i4: y <= 2;\nloop invariant i5: x >= 0;\nloop invariant i6: i >= 0;\n\n\nloop invariant i9: y <= 2 ==> x >= 0;\nloop invariant i10: y > 0 ==> x >= 0;\nloop invariant i11: y <= 2 ==> i >= 0;\nloop invariant i12: y > 0 ==> i >= 0;\nloop invariant i13: i >= 10 ==> x >= 0;\n\n\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant y <= 2;\nloop invariant i < 10 ==> x >= 0;\nloop invariant i < 10 ==> x <= 10;\nloop invariant i < 10 ==> y <= 2;\nloop invariant i < 10 ==> x >= y;\nloop invariant i < 10 ==> x - y >= 0;\nloop invariant i < 10 ==> x - y <= 10;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\nloop invariant i < 10 ==> y - x >= -10;\nloop invariant i < 10 ==> y - x <= 2;\nloop invariant i < 10 ==> y - x >= -2;\nloop invariant i < 10 ==> y - x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: y <= 2;\nloop invariant i4: i < 10 ==> x >= 0;\n\nloop invariant i6: i < 10 ==> y <= 2;\n\n\n\nloop invariant i10: i < 10 ==> y - x <= 10;\n\nloop invariant i12: i < 10 ==> y - x <= 2;\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x >= 0) ==> (y <= 2) ==> (x >= 0);\nloop invariant i > 10 ==> (x <= 0);\nloop invariant 0 <= i <= 10;\nloop invariant true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x >= 0) ==> (y <= 2) ==> (x >= 0);\nloop invariant i3: i > 10 ==> (x <= 0);\n\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 2;\nloop invariant y <= 2;\nloop invariant 0 <= i <= 10;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 2;\nloop invariant y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\n\n\nloop invariant i5: y <= 2;\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant !(y > 2);\nloop invariant x >= 0;\nloop invariant i <= 10;\nloop invariant y <= 2;\nloop invariant !(x <= -1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: !(y > 2);\nloop invariant i3: x >= 0;\nloop invariant i4: i <= 10;\nloop invariant i5: y <= 2;\nloop invariant i6: !(x <= -1);\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 35: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2;\nloop invariant i4: 0 <= i <= 9;\nloop invariant i5: 0 <= x;\nloop invariant i6: 0 <= y;\nloop invariant i7: x >= (1 + (i - 1) * i / 2);\nloop invariant i8: 0 <= y <= 2;\nloop invariant i9: y == 2 || x >= 0;\nloop invariant i10: y == 2 || i >= 10 || x == 0;\nloop invariant i11: y == 2 || i == 10 || x == 0;\nloop invariant i12: y <= 2 ==> 0 <= i <= 10;\nloop invariant i13: x <= -1 ==> y <= 2;\nloop invariant i14: x <= -1 ==> x <= 0;\nloop invariant i15: x <= -1 ==> i = 10;\nloop invariant i16: x <= -1 ==> y = 2;\nloop invariant i17: y <= 2 ==> x = 0;\nloop invariant i18: y <= 2 ==> i = 0;\nloop invariant i19: y <= 2 ==> 0 <= x <= 0;\nloop invariant i20: y <= 2 ==> 0 <= y <= 2;\nloop invariant i21: y <= 2 ==> 0 <= i <= 0;\nloop invariant i22: 0 <= x <= 2;\nloop invariant i23: i <= 10;\nloop invariant i24: i >= 0;\nloop invariant i25: i <= 9;\nloop invariant i26: i1;\nloop invariant i27: i2;\nloop invariant i28: i3;\nloop invariant i29: i4;\nloop invariant i30: i5;\nloop invariant i31: i6;\nloop invariant i32: i7;\nloop invariant i33: i8;\nloop invariant i34: i9;\nloop invariant i35: i10;\nloop invariant i36: i11;\nloop invariant i37: i12;\nloop invariant i38: i13;\nloop invariant i39: i14;\nloop invariant i40: i15;\nloop invariant i41: i16;\nloop invariant i42: i17;\nloop invariant i43: i18;\nloop invariant i44: i19;\nloop invariant i45: i20;\nloop invariant i46: i21;\nloop invariant i47: i22;\nloop invariant i48: i23;\nloop invariant i49: i24;\nloop invariant i50: i25;\nloop invariant i51: i26;\nloop invariant i52: i27;\nloop invariant i53: i28;\nloop invariant i54: i29;\nloop invariant i55: i30;\nloop invariant i56: i31;\nloop invariant i57: i32;\nloop invariant i58: i33;\nloop invariant i59: i34;\nloop invariant i60: i35;\nloop invariant i61: i36;\nloop invariant i62: i37;\nloop invariant i63: i38;\nloop invariant i64: i39;\nloop invariant i65: i40;\nloop invariant i66: i41;\nloop invariant i67: i42;\nloop invariant i68: i43;\nloop invariant i69: i44;\nloop invariant i70: i45;\nloop invariant i71: i46;\nloop invariant i72: i47;\nloop invariant i73: i48;\nloop invariant i74: i49;\nloop invariant i75: i50;\nloop invariant i76: i51;\nloop invariant i77: i52;\nloop invariant i78: i53;\nloop invariant i79: i54;\nloop invariant i80: i55;\nloop invariant i81: i56;\nloop invariant i82: i57;\nloop invariant i83: i58;\nloop invariant i84: i59;\nloop invariant i85: i60;\nloop invariant i86: i61;\nloop invariant i87: i62;\nloop invariant i88: i63;\nloop invariant i89: i64;\nloop invariant i90: i65;\nloop invariant i91: i66;\nloop invariant i92: i67;\nloop invariant i93: i68;\nloop invariant i94: i69;\nloop invariant i95: i70;\nloop invariant i96: i71;\nloop invariant i97: i72;\nloop invariant i98: i73;\nloop invariant i99: i74;\nloop invariant i100: i75;\nloop invariant i101: i76;\nloop invariant i102: i77;\nloop invariant i103: i78;\nloop invariant i104: i79;\nloop invariant i105: i80;\nloop invariant i106: i81;\nloop invariant i107: i82;\nloop invariant i108: i83;\nloop invariant i109: i84;\nloop invariant i110: i85;\nloop invariant i111: i86;\nloop invariant i112: i87;\nloop invariant i113: i88;\nloop invariant i114: i89;\nloop invariant i115: i90;\nloop invariant i116: i91;\nloop invariant i117: i92;\nloop invariant i118: i93;\nloop invariant i119: i94;\nloop invariant i120: i95;\nloop invariant i121: i96;\nloop invariant i122: i97;\nloop invariant i123: i98;\nloop invariant i124: i99;\nloop invariant i125: i100;\nloop invariant i126: i101;\nloop invariant i127: i102;\nloop invariant i128: i103;\nloop invariant i129: i104;\nloop invariant i130: i105;\nloop invariant i131: i106;\nloop invariant i132: i107;\nloop invariant i133: i108;\nloop invariant i134: i109;\nloop invariant i135: i110;\nloop invariant i136: i111;\nloop invariant i137: i112;\nloop invariant i138: i113;\nloop invariant i139: i114;\nloop invariant i140: i115;\nloop invariant i141: i116;\nloop invariant i142: i117;\nloop invariant i143: i118;\nloop invariant i144: i119;\nloop invariant i145: i120;\nloop invariant i146: i121;\nloop invariant i147: i122;\nloop invariant i148: i123;\nloop invariant i149: i124;\nloop invariant i150: i125;\nloop invariant i151: i126;\nloop invariant i152: i127;\nloop invariant i153: i128;\nloop invariant i154: i129;\nloop invariant i155: i130;\nloop invariant i156: i131;\nloop invariant i157: i132;\nloop invariant i158: i133;\nloop invariant i159: i134;\nloop invariant i160: i135;\nloop invariant i161: i136;\nloop invariant i162: i137;\nloop invariant i163: i138;\nloop invariant i164: i139;\nloop invariant i165: i140;\nloop invariant i166: i141;\nloop invariant i167: i142;\nloop invariant i168: i143;\nloop invariant i169: i144;\nloop invariant i170: i145;\nloop invariant i171: i146;\nloop invariant i172: i147;\nloop invariant i173: i148;\nloop invariant i174: i149;\nloop invariant i175: i150;\nloop invariant i176: i151;\nloop invariant i177: i152;\nloop invariant i178: i153;\nloop invariant i179: i154;\nloop invariant i180: i155;\nloop invariant i181: i156;\nloop invariant i182: i157;\nloop invariant i183: i158;\nloop invariant i184: y >= 0;\nloop invariant i185: x <= 100;\nloop invariant i186: x >= y;\nloop invariant i187: y <= 10;\nloop invariant i188: 1 <= i <= 10;\nloop invariant i189: 0 <= x <= 10;\nloop invariant i190: y == x;\nloop invariant i191: !(y > 2) ==> x >= y;\nloop invariant i192: (y <= 2) ==> x >= 0;\nloop invariant i193: x >= y ==> !(x <= -1);\nloop invariant i194: y >= 0 ==> !(x <= -1);\nloop invariant i195: !(y > 2) ==> !(x <= -1);\nloop invariant i196: !(y > 2) ==> x >= 0;\nloop invariant i197: x >= unknown_uint();\nloop invariant i198: y > 0 ==> x >= unknown_uint();\nloop invariant i199: y <= 2 ==> x >= 0;\nloop invariant i200: y > 0 ==> x >= 0;\nloop invariant i201: y <= 2 ==> i >= 0;\nloop invariant i202: y > 0 ==> i >= 0;\nloop invariant i203: i >= 10 ==> x >= 0;\nloop invariant i204: i >= 10 ==> y > 0;\nloop invariant i205: y <= 2 ==> i >= 10;\nloop invariant i206: y > 0 ==> i >= 10;\nloop invariant i207: i < 10 ==> x >= 0;\nloop invariant i208: i < 10 ==> x <= 10;\nloop invariant i209: i < 10 ==> y <= 2;\nloop invariant i210: i < 10 ==> x >= y;\nloop invariant i211: i < 10 ==> x - y >= 0;\nloop invariant i212: i < 10 ==> x - y <= 10;\nloop invariant i213: i < 10 ==> y - x <= 10;\nloop invariant i214: i < 10 ==> y - x >= -10;\nloop invariant i215: i < 10 ==> y - x <= 2;\nloop invariant i216: i < 10 ==> y - x >= -2;\nloop invariant i217: (x >= 0) ==> (y <= 2) ==> (x >= 0);\nloop invariant i218: i > 10 ==> (x <= 0);\nloop invariant i219: true;\nloop invariant i220: x <= 10;\nloop invariant i221: y >= 2;\nloop invariant i222: !(y > 2);\nloop invariant i223: !(x <= -1);\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 174,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2;\n\nloop invariant i5: 0 <= x;\n\n\n\nloop invariant i9: y == 2 || x >= 0;\n\n\nloop invariant i12: y <= 2 ==> 0 <= i <= 10;\nloop invariant i13: x <= -1 ==> y <= 2;\nloop invariant i14: x <= -1 ==> x <= 0;\n\n\n\n\n\n\n\n\nloop invariant i23: i <= 10;\nloop invariant i24: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i187: y <= 10;\n\n\n\n\nloop invariant i192: (y <= 2) ==> x >= 0;\nloop invariant i193: x >= y ==> !(x <= -1);\nloop invariant i194: y >= 0 ==> !(x <= -1);\nloop invariant i195: !(y > 2) ==> !(x <= -1);\nloop invariant i196: !(y > 2) ==> x >= 0;\n\n\nloop invariant i199: y <= 2 ==> x >= 0;\nloop invariant i200: y > 0 ==> x >= 0;\nloop invariant i201: y <= 2 ==> i >= 0;\nloop invariant i202: y > 0 ==> i >= 0;\nloop invariant i203: i >= 10 ==> x >= 0;\n\n\n\nloop invariant i207: i < 10 ==> x >= 0;\n\nloop invariant i209: i < 10 ==> y <= 2;\n\n\n\nloop invariant i213: i < 10 ==> y - x <= 10;\n\nloop invariant i215: i < 10 ==> y - x <= 2;\n\nloop invariant i217: (x >= 0) ==> (y <= 2) ==> (x >= 0);\nloop invariant i218: i > 10 ==> (x <= 0);\n\n\n\nloop invariant i222: !(y > 2);\nloop invariant i223: !(x <= -1);\n*/\nwhile (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n\n  }\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 15,
        "success_count": 15,
        "failure_count": 0,
        "success_rate": 1.0
    }
}