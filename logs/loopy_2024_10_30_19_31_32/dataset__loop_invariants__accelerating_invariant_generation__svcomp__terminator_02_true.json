{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/terminator_02_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant  x <= 100 ==> x' <= 100;\nloop invariant  x <= 100 ==> z' >= 100;\nloop invariant  x <= 100 ==> z' <= 100;\nloop invariant  x <= 100 ==> x' >= x-1;\nloop invariant  x <= 100 ==> x' <= x+1;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 100 <= z <= 200;\nloop invariant x <= z;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant (x < 100 ==> 100 <= z);\n*/\n```",
            "```\n/*@\nloop invariant 100 <= x <= 100;\nloop invariant y <= z;\nloop invariant y <= 100;\nloop invariant z <= 100;\nloop invariant 100 <= x <= 100 ==> (x == 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\n*/\n```",
            "```\n/*@\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant x = unknown_int();\nloop invariant y = unknown_int();\nloop invariant z = unknown_int();\nloop invariant x < 100;\nloop invariant z < 100;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant x <= 100;\nloop invariant z <= 100;\nloop invariant x == unknown_int() ==> x' == x;\nloop invariant y == unknown_int() ==> y' == y;\nloop invariant z == unknown_int() ==> z' == z;\nloop invariant unknown_int() == x ==> unknown_int()' == x';\nloop invariant unknown_int() == y ==> unknown_int()' == y';\nloop invariant unknown_int() == z ==> unknown_int()' == z';\nloop invariant unknown_bool() ==> unknown_bool()' == unknown_bool();\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x <= z ==> x < 100;\nloop invariant x > z ==> z <= 100;\nloop invariant x <= z ==> x == z + (z + 1) / 2;\nloop invariant x > z ==> x == z + (z + 1) / 2;\nloop invariant x < 100 ==> x == z + (z + 1) / 2;\nloop invariant z <= 100 ==> x == z + (z + 1) / 2;\nloop invariant x <= z ==> z == x - (x + 1) / 2;\nloop invariant x > z ==> z == x - (x + 1) / 2;\nloop invariant x < 100 ==> z == x - (x + 1) / 2;\nloop invariant z <= 100 ==> z == x - (x + 1) / 2;\nloop invariant x <= z ==> x == 100;\nloop invariant x > z ==> z == 100;\nloop invariant x < 100 ==> x == 100;\nloop invariant z <= 100 ==> z == 100;\n*/\n```",
            "```\n/*@\nloop invariant y == 100000;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant x >= 100000;\nloop invariant x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x<=100 ==> z<= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x - y == z - y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x <= 100 ==> z <= x;\nloop invariant x <= 100 ==> z <= x ==> x >= 100 || z <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x <= 100 ==> z >= 100;\nloop invariant x <= 100 ==> x <= z;\nloop invariant x <= z ==> x <= 100;\nloop invariant x <= z ==> z <= 100;\nloop invariant x <= z ==> z >= 100;\nloop invariant x <= z ==> x <= 100 ==> z >= 100;\nloop invariant x <= z ==> x <= 100 ==> x <= z ==> z <= 100;\nloop invariant x <= z ==> x <= 100 ==> x <= z ==> z >= 100;\n*/\n```",
            "```\n/*@\nloop invariant x >= 100 ==> z <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= z;\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant z <= 100;\nloop invariant y <= 100;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant y >= 0;\nloop invariant x <= z;\nloop invariant x >= 100 ==> z <= 100;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant  x <= 100 ==> x' <= 100;\nloop invariant  x <= 100 ==> z' >= 100;\nloop invariant  x <= 100 ==> z' <= 100;\nloop invariant  x <= 100 ==> x' >= x-1;\nloop invariant  x <= 100 ==> x' <= x+1;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\nloop invariant  x <= 100 ==> x' >= x;\nloop invariant  x <= 100 ==> x' <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1:  x <= 100 ==> x' <= 100;\nloop invariant i2:  x <= 100 ==> z' >= 100;\nloop invariant i3:  x <= 100 ==> z' <= 100;\nloop invariant i4:  x <= 100 ==> x' >= x-1;\nloop invariant i5:  x <= 100 ==> x' <= x+1;\nloop invariant i6:  x <= 100 ==> x' >= x;\nloop invariant i7:  x <= 100 ==> x' <= x;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 100 <= z <= 200;\nloop invariant x <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant (x < 100 ==> 100 <= z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 100 <= x <= 100;\nloop invariant y <= z;\nloop invariant y <= 100;\nloop invariant z <= 100;\nloop invariant 100 <= x <= 100 ==> (x == 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant 100 <= x <= 100 ==> (x >= 100 || z <= 100);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\nloop invariant i4: z <= 100;\nloop invariant i5: 100 <= x <= 100 ==> (x == 100 || z == 100);\nloop invariant i6: 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant i7: 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant i8: 100 <= x <= 100 ==> (x == 100 || z <= 100);\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\nloop invariant z >= unknown_int();\nloop invariant x <= 100;\nloop invariant z >= 100;\nloop invariant x >= z;\nloop invariant x >= unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\nloop invariant i3: x <= 100;\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x = unknown_int();\nloop invariant y = unknown_int();\nloop invariant z = unknown_int();\nloop invariant x < 100;\nloop invariant z < 100;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant x <= 100;\nloop invariant z <= 100;\nloop invariant x == unknown_int() ==> x' == x;\nloop invariant y == unknown_int() ==> y' == y;\nloop invariant z == unknown_int() ==> z' == z;\nloop invariant unknown_int() == x ==> unknown_int()' == x';\nloop invariant unknown_int() == y ==> unknown_int()' == y';\nloop invariant unknown_int() == z ==> unknown_int()' == z';\nloop invariant unknown_bool() ==> unknown_bool()' == unknown_bool();\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\nloop invariant unknown_bool() ==> x' == x';\nloop invariant unknown_bool() ==> y == y';\nloop invariant unknown_bool() ==> y' == y';\nloop invariant unknown_bool() ==> z == z';\nloop invariant unknown_bool() ==> z' == z';\nloop invariant unknown_bool() ==> x == x';\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x = unknown_int();\nloop invariant i2: y = unknown_int();\nloop invariant i3: z = unknown_int();\nloop invariant i4: x < 100;\nloop invariant i5: z < 100;\nloop invariant i6: x >= 0;\nloop invariant i7: z >= 0;\nloop invariant i8: x <= 100;\nloop invariant i9: z <= 100;\nloop invariant i10: x == unknown_int() ==> x' == x;\nloop invariant i11: y == unknown_int() ==> y' == y;\nloop invariant i12: z == unknown_int() ==> z' == z;\nloop invariant i13: unknown_int() == x ==> unknown_int()' == x';\nloop invariant i14: unknown_int() == y ==> unknown_int()' == y';\nloop invariant i15: unknown_int() == z ==> unknown_int()' == z';\nloop invariant i16: unknown_bool() ==> unknown_bool()' == unknown_bool();\nloop invariant i17: unknown_bool() ==> x == x';\nloop invariant i18: unknown_bool() ==> x' == x';\nloop invariant i19: unknown_bool() ==> y == y';\nloop invariant i20: unknown_bool() ==> y' == y';\nloop invariant i21: unknown_bool() ==> z == z';\nloop invariant i22: unknown_bool() ==> z' == z';\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x <= z ==> x < 100;\nloop invariant x > z ==> z <= 100;\nloop invariant x <= z ==> x == z + (z + 1) / 2;\nloop invariant x > z ==> x == z + (z + 1) / 2;\nloop invariant x < 100 ==> x == z + (z + 1) / 2;\nloop invariant z <= 100 ==> x == z + (z + 1) / 2;\nloop invariant x <= z ==> z == x - (x + 1) / 2;\nloop invariant x > z ==> z == x - (x + 1) / 2;\nloop invariant x < 100 ==> z == x - (x + 1) / 2;\nloop invariant z <= 100 ==> z == x - (x + 1) / 2;\nloop invariant x <= z ==> x == 100;\nloop invariant x > z ==> z == 100;\nloop invariant x < 100 ==> x == 100;\nloop invariant z <= 100 ==> z == 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\nloop invariant i4: x > z ==> z <= 100;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y == 100000;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant x >= 100000;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x<=100 ==> z<= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\nloop invariant i3: x<=100 ==> z<= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x - y == z - y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x <= 100 ==> z <= x;\nloop invariant x <= 100 ==> z <= x ==> x >= 100 || z <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\nloop invariant i4: x <= 100 ==> z <= x ==> x >= 100 || z <= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= z <= 100;\nloop invariant x <= 100 ==> z >= 100;\nloop invariant x <= 100 ==> x <= z;\nloop invariant x <= z ==> x <= 100;\nloop invariant x <= z ==> z <= 100;\nloop invariant x <= z ==> z >= 100;\nloop invariant x <= z ==> x <= 100 ==> z >= 100;\nloop invariant x <= z ==> x <= 100 ==> x <= z ==> z <= 100;\nloop invariant x <= z ==> x <= 100 ==> x <= z ==> z >= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n\nloop invariant i5: x <= z ==> x <= 100;\nloop invariant i6: x <= z ==> z <= 100;\n\n\nloop invariant i9: x <= z ==> x <= 100 ==> x <= z ==> z <= 100;\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 100 ==> z <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= z;\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant z <= 100;\nloop invariant y <= 100;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant y >= 0;\nloop invariant x <= z;\nloop invariant x >= 100 ==> z <= 100;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\nloop invariant i2: z <= 100;\n\n\n\n\n\nloop invariant i8: x >= 100 ==> z <= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: lexical error, illegal character '",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1:  x <= 100 ==> x' <= 100;\nloop invariant i2:  x <= 100 ==> z' >= 100;\nloop invariant i3:  x <= 100 ==> z' <= 100;\nloop invariant i4:  x <= 100 ==> x' >= x-1;\nloop invariant i5:  x <= 100 ==> x' <= x+1;\nloop invariant i6:  x <= 100 ==> x' >= x;\nloop invariant i7:  x <= 100 ==> x' <= x;\nloop invariant i8: 0 <= x <= 100;\nloop invariant i9: 100 <= z <= 200;\nloop invariant i10: x <= z;\nloop invariant i11: 1 <= x <= 100;\nloop invariant i12: 0 <= z <= 100;\nloop invariant i13: (x < 100 ==> 100 <= z);\nloop invariant i14: 100 <= x <= 100;\nloop invariant i15: y <= z;\nloop invariant i16: y <= 100;\nloop invariant i17: z <= 100;\nloop invariant i18: 100 <= x <= 100 ==> (x == 100 || z == 100);\nloop invariant i19: 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant i20: 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant i21: 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant i22: x >= unknown_int();\nloop invariant i23: z >= unknown_int();\nloop invariant i24: x <= 100;\nloop invariant i25: z >= 100;\nloop invariant i26: x >= z;\nloop invariant i27: x = unknown_int();\nloop invariant i28: y = unknown_int();\nloop invariant i29: z = unknown_int();\nloop invariant i30: x < 100;\nloop invariant i31: z < 100;\nloop invariant i32: x >= 0;\nloop invariant i33: z >= 0;\nloop invariant i34: x == unknown_int() ==> x' == x;\nloop invariant i35: y == unknown_int() ==> y' == y;\nloop invariant i36: z == unknown_int() ==> z' == z;\nloop invariant i37: unknown_int() == x ==> unknown_int()' == x';\nloop invariant i38: unknown_int() == y ==> unknown_int()' == y';\nloop invariant i39: unknown_int() == z ==> unknown_int()' == z';\nloop invariant i40: unknown_bool() ==> unknown_bool()' == unknown_bool();\nloop invariant i41: unknown_bool() ==> x == x';\nloop invariant i42: unknown_bool() ==> x' == x';\nloop invariant i43: unknown_bool() ==> y == y';\nloop invariant i44: unknown_bool() ==> y' == y';\nloop invariant i45: unknown_bool() ==> z == z';\nloop invariant i46: unknown_bool() ==> z' == z';\nloop invariant i47: x <= z ==> x < 100;\nloop invariant i48: x > z ==> z <= 100;\nloop invariant i49: x <= z ==> x == z + (z + 1) / 2;\nloop invariant i50: x > z ==> x == z + (z + 1) / 2;\nloop invariant i51: x < 100 ==> x == z + (z + 1) / 2;\nloop invariant i52: z <= 100 ==> x == z + (z + 1) / 2;\nloop invariant i53: x <= z ==> z == x - (x + 1) / 2;\nloop invariant i54: x > z ==> z == x - (x + 1) / 2;\nloop invariant i55: x < 100 ==> z == x - (x + 1) / 2;\nloop invariant i56: z <= 100 ==> z == x - (x + 1) / 2;\nloop invariant i57: x <= z ==> x == 100;\nloop invariant i58: x > z ==> z == 100;\nloop invariant i59: x < 100 ==> x == 100;\nloop invariant i60: z <= 100 ==> z == 100;\nloop invariant i61: y == 100000;\nloop invariant i62: x >= y;\nloop invariant i63: x >= 100000;\nloop invariant i64: x >= 1;\nloop invariant i65: x<=100 ==> z<= 100;\nloop invariant i66: x - y == z - y;\nloop invariant i67: x <= 100 ==> z <= x;\nloop invariant i68: x <= 100 ==> z <= x ==> x >= 100 || z <= 100;\nloop invariant i69: x <= 100 ==> z >= 100;\nloop invariant i70: x <= 100 ==> x <= z;\nloop invariant i71: x <= z ==> x <= 100;\nloop invariant i72: x <= z ==> z <= 100;\nloop invariant i73: x <= z ==> z >= 100;\nloop invariant i74: x <= z ==> x <= 100 ==> z >= 100;\nloop invariant i75: x <= z ==> x <= 100 ==> x <= z ==> z <= 100;\nloop invariant i76: x <= z ==> x <= 100 ==> x <= z ==> z >= 100;\nloop invariant i77: x >= 100 ==> z <= 100;\nloop invariant i78: 0 <= y <= 100000;\nloop invariant i79: x >= (1 + (y - 1) * y / 2);\nloop invariant i80: y >= x;\nloop invariant i81: y >= 0;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\nloop invariant i2:  x <= 100 ==> z' >= 100;\nloop invariant i3:  x <= 100 ==> z' <= 100;\nloop invariant i4:  x <= 100 ==> x' >= x-1;\nloop invariant i5:  x <= 100 ==> x' <= x+1;\nloop invariant i6:  x <= 100 ==> x' >= x;\nloop invariant i7:  x <= 100 ==> x' <= x;\nloop invariant i8: 0 <= x <= 100;\nloop invariant i9: 100 <= z <= 200;\nloop invariant i10: x <= z;\nloop invariant i11: 1 <= x <= 100;\nloop invariant i12: 0 <= z <= 100;\nloop invariant i13: (x < 100 ==> 100 <= z);\nloop invariant i14: 100 <= x <= 100;\nloop invariant i15: y <= z;\nloop invariant i16: y <= 100;\nloop invariant i17: z <= 100;\nloop invariant i18: 100 <= x <= 100 ==> (x == 100 || z == 100);\nloop invariant i19: 100 <= x <= 100 ==> (x >= 100 || z <= 100);\nloop invariant i20: 100 <= x <= 100 ==> (x >= 100 || z == 100);\nloop invariant i21: 100 <= x <= 100 ==> (x == 100 || z <= 100);\nloop invariant i22: x >= unknown_int();\nloop invariant i23: z >= unknown_int();\nloop invariant i24: x <= 100;\nloop invariant i25: z >= 100;\nloop invariant i26: x >= z;\nloop invariant i27: x = unknown_int();\nloop invariant i28: y = unknown_int();\nloop invariant i29: z = unknown_int();\nloop invariant i30: x < 100;\nloop invariant i31: z < 100;\nloop invariant i32: x >= 0;\nloop invariant i33: z >= 0;\nloop invariant i34: x == unknown_int() ==> x' == x;\nloop invariant i35: y == unknown_int() ==> y' == y;\nloop invariant i36: z == unknown_int() ==> z' == z;\nloop invariant i37: unknown_int() == x ==> unknown_int()' == x';\nloop invariant i38: unknown_int() == y ==> unknown_int()' == y';\nloop invariant i39: unknown_int() == z ==> unknown_int()' == z';\nloop invariant i40: unknown_bool() ==> unknown_bool()' == unknown_bool();\nloop invariant i41: unknown_bool() ==> x == x';\nloop invariant i42: unknown_bool() ==> x' == x';\nloop invariant i43: unknown_bool() ==> y == y';\nloop invariant i44: unknown_bool() ==> y' == y';\nloop invariant i45: unknown_bool() ==> z == z';\nloop invariant i46: unknown_bool() ==> z' == z';\nloop invariant i47: x <= z ==> x < 100;\nloop invariant i48: x > z ==> z <= 100;\nloop invariant i49: x <= z ==> x == z + (z + 1) / 2;\nloop invariant i50: x > z ==> x == z + (z + 1) / 2;\nloop invariant i51: x < 100 ==> x == z + (z + 1) / 2;\nloop invariant i52: z <= 100 ==> x == z + (z + 1) / 2;\nloop invariant i53: x <= z ==> z == x - (x + 1) / 2;\nloop invariant i54: x > z ==> z == x - (x + 1) / 2;\nloop invariant i55: x < 100 ==> z == x - (x + 1) / 2;\nloop invariant i56: z <= 100 ==> z == x - (x + 1) / 2;\nloop invariant i57: x <= z ==> x == 100;\nloop invariant i58: x > z ==> z == 100;\nloop invariant i59: x < 100 ==> x == 100;\nloop invariant i60: z <= 100 ==> z == 100;\nloop invariant i61: y == 100000;\nloop invariant i62: x >= y;\nloop invariant i63: x >= 100000;\nloop invariant i64: x >= 1;\nloop invariant i65: x<=100 ==> z<= 100;\nloop invariant i66: x - y == z - y;\nloop invariant i67: x <= 100 ==> z <= x;\nloop invariant i68: x <= 100 ==> z <= x ==> x >= 100 || z <= 100;\nloop invariant i69: x <= 100 ==> z >= 100;\nloop invariant i70: x <= 100 ==> x <= z;\nloop invariant i71: x <= z ==> x <= 100;\nloop invariant i72: x <= z ==> z <= 100;\nloop invariant i73: x <= z ==> z >= 100;\nloop invariant i74: x <= z ==> x <= 100 ==> z >= 100;\nloop invariant i75: x <= z ==> x <= 100 ==> x <= z ==> z <= 100;\nloop invariant i76: x <= z ==> x <= 100 ==> x <= z ==> z >= 100;\nloop invariant i77: x >= 100 ==> z <= 100;\nloop invariant i78: 0 <= y <= 100000;\nloop invariant i79: x >= (1 + (y - 1) * y / 2);\nloop invariant i80: y >= x;\nloop invariant i81: y >= 0;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/ken-imp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/simple_if.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/up-nested.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/terminator_02_true.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/svcomp/sum01_true.c"
        ],
        "skipped": [],
        "total": 179,
        "success_count": 148,
        "failure_count": 31,
        "success_rate": 0.8268156424581006
    }
}