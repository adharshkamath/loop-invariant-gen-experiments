{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\nloop invariant (m <= x ==> 0 <= m);\nloop invariant (0 <= m ==> 0 <= m);\nloop invariant (0 <= x ==> 0 <= x);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (m <= n ==> m <= n);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (x < n ==> x < n);\nloop invariant (n < 0 ==> n < 0);\nloop invariant (m >= 0 ==> m >= 0);\nloop invariant (0 >= m ==> 0 >= m);\nloop invariant (0 >= x ==> 0 >= x);\nloop invariant (x >= n ==> x >= n);\nloop invariant (n >= x ==> n >= x);\nloop invariant (n >= 0 ==> n >= 0);\nloop invariant (0 >= n ==> 0 >= n);\nloop invariant (n >= m ==> n >= m);\nloop invariant (0 >= m ==> 0 >= m);\nloop invariant (m >= 0 ==> m >= 0);\nloop invariant (m >= x ==> m >= x);\nloop invariant (x >= 0 ==> x >= 0);\nloop invariant (m < n ==> m < n);\nloop invariant (n < m ==> n < m);\nloop invariant (x < n ==> x < n);\nloop invariant (n < x ==> n < x);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= m;\nloop invariant !(__BLAST_NONDET ==> m != x);\nloop invariant !(__BLAST_NONDET ==> m != x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant x >= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= m <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant 0 <= m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant m < n;\nloop invariant 0 <= m <= x;\nloop invariant m < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m = x || m = m;\nloop invariant m = m || m = x;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;loop invariant 0 <= m <= n;loop invariant x <= m;loop invariant x <= n;loop invariant m <= n;loop invariant m <= m;loop invariant m <= x;loop invariant (x < n) ==> (m <= n);loop invariant (x < n) ==> (m <= x);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant (x <= m) == (__BLAST_NONDET ==> m == x);\nloop invariant n <= 0 ==> m <= n;\nloop invariant (x >= n) == (__BLAST_NONDET ==> m == x);\nloop invariant __BLAST_NONDET ==> m <= n;\nloop invariant n <= 0 ==> x <= n;\nloop invariant n <= 0 ==> m >= 0;\nloop invariant m <= n ==> m >= 0;\nloop invariant m <= n ==> x <= n;\nloop invariant n <= 0 ==> m <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant if (n > 0) then (m >= 0);\nloop invariant if (n > 0) then (m < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant 0 <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (if n > 0 then 0 <= m <= n ==> m <= x else true);\nloop invariant (if n > 0 then x < n ==> m <= x else true);\nloop invariant (if n > 0 then x >= 0 ==> m <= x else true);\nloop invariant (if n > 0 then m >= 0 ==> m <= x else true);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\n\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\nloop invariant (m <= x ==> 0 <= m);\nloop invariant (0 <= m ==> 0 <= m);\nloop invariant (0 <= x ==> 0 <= x);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (m <= n ==> m <= n);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (x < n ==> x < n);\nloop invariant (n < 0 ==> n < 0);\nloop invariant (m >= 0 ==> m >= 0);\nloop invariant (0 >= m ==> 0 >= m);\nloop invariant (0 >= x ==> 0 >= x);\nloop invariant (x >= n ==> x >= n);\nloop invariant (n >= x ==> n >= x);\nloop invariant (n >= 0 ==> n >= 0);\nloop invariant (0 >= n ==> 0 >= n);\nloop invariant (n >= m ==> n >= m);\nloop invariant (0 >= m ==> 0 >= m);\nloop invariant (m >= 0 ==> m >= 0);\nloop invariant (m >= x ==> m >= x);\nloop invariant (x >= 0 ==> x >= 0);\nloop invariant (m < n ==> m < n);\nloop invariant (n < m ==> n < m);\nloop invariant (x < n ==> x < n);\nloop invariant (n < x ==> n < x);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\nloop invariant (m < x ==> m < x);\nloop invariant (x < m ==> x < m);\nloop invariant (x <= n ==> x <= n);\nloop invariant (n <= x ==> n <= x);\nloop invariant (n <= 0 ==> n <= 0);\nloop invariant (0 <= n ==> 0 <= n);\nloop invariant (m <= x ==> m <= x);\nloop invariant (x <= m ==> x <= m);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\n\n\nloop invariant i5: (0 <= m ==> 0 <= m);\nloop invariant i6: (0 <= x ==> 0 <= x);\nloop invariant i7: (x <= n ==> x <= n);\nloop invariant i8: (n <= x ==> n <= x);\nloop invariant i9: (m <= n ==> m <= n);\nloop invariant i10: (0 <= n ==> 0 <= n);\nloop invariant i11: (n <= 0 ==> n <= 0);\nloop invariant i12: (x < n ==> x < n);\nloop invariant i13: (n < 0 ==> n < 0);\nloop invariant i14: (m >= 0 ==> m >= 0);\nloop invariant i15: (0 >= m ==> 0 >= m);\nloop invariant i16: (0 >= x ==> 0 >= x);\nloop invariant i17: (x >= n ==> x >= n);\nloop invariant i18: (n >= x ==> n >= x);\nloop invariant i19: (n >= 0 ==> n >= 0);\nloop invariant i20: (0 >= n ==> 0 >= n);\nloop invariant i21: (n >= m ==> n >= m);\nloop invariant i22: (m >= x ==> m >= x);\nloop invariant i23: (x >= 0 ==> x >= 0);\nloop invariant i24: (m < n ==> m < n);\nloop invariant i25: (n < m ==> n < m);\nloop invariant i26: (n < x ==> n < x);\nloop invariant i27: (m <= x ==> m <= x);\nloop invariant i28: (x <= m ==> x <= m);\nloop invariant i29: (m < x ==> m < x);\nloop invariant i30: (x < m ==> x < m);\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= m;\nloop invariant !(__BLAST_NONDET ==> m != x);\nloop invariant !(__BLAST_NONDET ==> m != x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: x >= m;\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant x >= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: m >= 0;\n\nloop invariant i7: x >= m;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= m <= n;\nloop invariant 0 <= m <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant m <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: m >= 0;\n\nloop invariant i6: m <= x;\n\n\n\nloop invariant i10: x >= m;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant 0 <= m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant m < n;\nloop invariant 0 <= m <= x;\nloop invariant m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 0 <= m <= x;\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m = x || m = m;\nloop invariant m = m || m = x;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\nloop invariant m = m || m = m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m >= 0;\n\nloop invariant i5: x >= 0;\n\n\n\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;loop invariant 0 <= m <= n;loop invariant x <= m;loop invariant x <= n;loop invariant m <= n;loop invariant m <= m;loop invariant m <= x;loop invariant (x < n) ==> (m <= n);loop invariant (x < n) ==> (m <= x);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant (x <= m) == (__BLAST_NONDET ==> m == x);\nloop invariant n <= 0 ==> m <= n;\nloop invariant (x >= n) == (__BLAST_NONDET ==> m == x);\nloop invariant __BLAST_NONDET ==> m <= n;\nloop invariant n <= 0 ==> x <= n;\nloop invariant n <= 0 ==> m >= 0;\nloop invariant m <= n ==> m >= 0;\nloop invariant m <= n ==> x <= n;\nloop invariant n <= 0 ==> m <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\n\n\n\nloop invariant i6: __BLAST_NONDET ==> m <= n;\n\n\n\nloop invariant i10: m <= n ==> x <= n;\nloop invariant i11: n <= 0 ==> m <= 0;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant n >= 0;\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\n\nloop invariant i4: m >= 0;\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant m <= x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant if __BLAST_NONDET then m <= x else m <= x;\nloop invariant if __BLAST_NONDET then x <= n else x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant if x < n then 0 <= m <= x else 0 <= m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: x >= 0;\n\n\n\n\n\nloop invariant i9: m <= x;\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant if (n > 0) then (m >= 0);\nloop invariant if (n > 0) then (m < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant 0 <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (if n > 0 then 0 <= m <= n ==> m <= x else true);\nloop invariant (if n > 0 then x < n ==> m <= x else true);\nloop invariant (if n > 0 then x >= 0 ==> m <= x else true);\nloop invariant (if n > 0 then m >= 0 ==> m <= x else true);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\n\nloop invariant i3: m <= x;\n\n\n\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 56: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= x;\nloop invariant i3: x <= n;\nloop invariant i4: m <= n;\nloop invariant i5: 0 <= m <= n;\nloop invariant i6: m <= x <= n;\nloop invariant i7: (m <= x ==> 0 <= m);\nloop invariant i8: (0 <= m ==> 0 <= m);\nloop invariant i9: (0 <= x ==> 0 <= x);\nloop invariant i10: (x <= n ==> x <= n);\nloop invariant i11: (n <= x ==> n <= x);\nloop invariant i12: (m <= n ==> m <= n);\nloop invariant i13: (0 <= n ==> 0 <= n);\nloop invariant i14: (n <= 0 ==> n <= 0);\nloop invariant i15: (x < n ==> x < n);\nloop invariant i16: (n < 0 ==> n < 0);\nloop invariant i17: (m >= 0 ==> m >= 0);\nloop invariant i18: (0 >= m ==> 0 >= m);\nloop invariant i19: (0 >= x ==> 0 >= x);\nloop invariant i20: (x >= n ==> x >= n);\nloop invariant i21: (n >= x ==> n >= x);\nloop invariant i22: (n >= 0 ==> n >= 0);\nloop invariant i23: (0 >= n ==> 0 >= n);\nloop invariant i24: (n >= m ==> n >= m);\nloop invariant i25: (m >= x ==> m >= x);\nloop invariant i26: (x >= 0 ==> x >= 0);\nloop invariant i27: (m < n ==> m < n);\nloop invariant i28: (n < m ==> n < m);\nloop invariant i29: (n < x ==> n < x);\nloop invariant i30: (m <= x ==> m <= x);\nloop invariant i31: (x <= m ==> x <= m);\nloop invariant i32: (m < x ==> m < x);\nloop invariant i33: (x < m ==> x < m);\nloop invariant i34: x >= m;\nloop invariant i35: !(__BLAST_NONDET ==> m != x);\nloop invariant i36: x >= 0;\nloop invariant i37: m >= 0;\nloop invariant i38: 0 <= x <= m <= n;\nloop invariant i39: n >= 0;\nloop invariant i40: 0 <= x < n;\nloop invariant i41: 0 <= m <= x;\nloop invariant i42: m < n;\nloop invariant i43: m = x || m = m;\nloop invariant i44: m = m || m = x;\nloop invariant i45: m = m || m = m;\nloop invariant i46: 0 <= x <= n;loop invariant 0 <= m <= n;loop invariant x <= m;loop invariant x <= n;loop invariant m <= n;loop invariant m <= m;loop invariant m <= x;loop invariant (x < n) ==> (m <= n);loop invariant (x < n) ==> (m <= x);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);loop invariant (x < n) ==> (m <= m);\nloop invariant i47: (x <= m) == (__BLAST_NONDET ==> m == x);\nloop invariant i48: n <= 0 ==> m <= n;\nloop invariant i49: (x >= n) == (__BLAST_NONDET ==> m == x);\nloop invariant i50: __BLAST_NONDET ==> m <= n;\nloop invariant i51: n <= 0 ==> x <= n;\nloop invariant i52: n <= 0 ==> m >= 0;\nloop invariant i53: m <= n ==> m >= 0;\nloop invariant i54: m <= n ==> x <= n;\nloop invariant i55: n <= 0 ==> m <= 0;\nloop invariant i56: if n > 0 then m <= x < n else 0 <= x <= n;\nloop invariant i57: if x < n then 0 <= m <= x else 0 <= m <= n;\nloop invariant i58: if __BLAST_NONDET then m <= x else m <= x;\nloop invariant i59: if __BLAST_NONDET then x <= n else x <= n;\nloop invariant i60: if (n > 0) then (m >= 0);\nloop invariant i61: if (n > 0) then (m < n);\nloop invariant i62: 0 <= n;\nloop invariant i63: 1 <= x <= n;\nloop invariant i64: (if n > 0 then 0 <= m <= n ==> m <= x else true);\nloop invariant i65: (if n > 0 then x < n ==> m <= x else true);\nloop invariant i66: (if n > 0 then x >= 0 ==> m <= x else true);\nloop invariant i67: (if n > 0 then m >= 0 ==> m <= x else true);\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  /*@\n\nloop invariant i2: m <= x;\n\n\n\n\nloop invariant i7: (m <= x ==> 0 <= m);\nloop invariant i8: (0 <= m ==> 0 <= m);\nloop invariant i9: (0 <= x ==> 0 <= x);\nloop invariant i10: (x <= n ==> x <= n);\nloop invariant i11: (n <= x ==> n <= x);\nloop invariant i12: (m <= n ==> m <= n);\nloop invariant i13: (0 <= n ==> 0 <= n);\nloop invariant i14: (n <= 0 ==> n <= 0);\nloop invariant i15: (x < n ==> x < n);\nloop invariant i16: (n < 0 ==> n < 0);\nloop invariant i17: (m >= 0 ==> m >= 0);\nloop invariant i18: (0 >= m ==> 0 >= m);\nloop invariant i19: (0 >= x ==> 0 >= x);\nloop invariant i20: (x >= n ==> x >= n);\nloop invariant i21: (n >= x ==> n >= x);\nloop invariant i22: (n >= 0 ==> n >= 0);\nloop invariant i23: (0 >= n ==> 0 >= n);\nloop invariant i24: (n >= m ==> n >= m);\nloop invariant i25: (m >= x ==> m >= x);\nloop invariant i26: (x >= 0 ==> x >= 0);\nloop invariant i27: (m < n ==> m < n);\nloop invariant i28: (n < m ==> n < m);\nloop invariant i29: (n < x ==> n < x);\nloop invariant i30: (m <= x ==> m <= x);\nloop invariant i31: (x <= m ==> x <= m);\nloop invariant i32: (m < x ==> m < x);\nloop invariant i33: (x < m ==> x < m);\nloop invariant i34: x >= m;\n\nloop invariant i36: x >= 0;\nloop invariant i37: m >= 0;\n\n\n\nloop invariant i41: 0 <= m <= x;\n\n\n\n\n\n\n\n\nloop invariant i50: __BLAST_NONDET ==> m <= n;\n\nloop invariant i52: n <= 0 ==> m >= 0;\nloop invariant i53: m <= n ==> m >= 0;\nloop invariant i54: m <= n ==> x <= n;\nloop invariant i55: n <= 0 ==> m <= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n\n      {;\n//@ assert(m<n);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/07.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/39.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv_simp.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/xy10.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/const_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbr.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/barbrprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bk-nat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/bkley.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/efm.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/ex1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnat.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/lifo.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/seesaw.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/substring1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/swim1.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/05.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/19.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/37.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/gulv.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/gulwani_cegar2.c"
        ],
        "skipped": [],
        "total": 164,
        "success_count": 135,
        "failure_count": 29,
        "success_rate": 0.823170731707317
    }
}