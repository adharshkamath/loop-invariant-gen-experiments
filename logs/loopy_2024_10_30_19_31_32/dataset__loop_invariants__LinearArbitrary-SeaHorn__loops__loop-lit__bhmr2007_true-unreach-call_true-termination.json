{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*i;\nloop invariant 0 <= b <= 3*i;\nloop invariant a + b <= 3*i;\nloop invariant a + b >= 0;\nloop invariant a + b == 3*i ==> i == n;\nloop invariant a + b == 3*i ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*i;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a + b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 2*i;loop invariant a + b <= 3*i;loop invariant a + b >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 3*i;loop invariant i <= n ==> a + 2*b == 3*n;loop invariant n - i <= 1 ==> a + 2*b <= 3*n;loop invariant n - i >= 2 ==> a + b >= 3*n;loop invariant n - i >= 2 ==> a <= 2*n;loop invariant n - i >= 2 ==> b <= 2*n;loop invariant n - i >= 2 ==> a + b >= 3*(n - 2);loop invariant n - i >= 2 ==> a + b <= 3*(n - 1);loop invariant n - i == 1 ==> a + b == 3*(n - 1);loop invariant i == n ==> a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a + b <= 3*n;\nloop invariant i + a + b == n;\nloop invariant a + b <= 3*n;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (-1 <= a) && (a <= 3*n);\nloop invariant (-1 <= b) && (b <= 3*n);\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a - b <= n;\nloop invariant a + b >= 0;\nloop invariant a - b >= -n;\nloop invariant a + b <= 3*i;\nloop invariant a - b <= i;\nloop invariant a + b >= 0;\nloop invariant a - b >= -i;\nloop invariant a + b <= 3*n;\nloop invariant a - b <= n;\nloop invariant a + b >= 0;\nloop invariant a - b >= -n;\nloop invariant a + b <= 3*n;\nloop invariant a - b <= n;\nloop invariant a + b >= 0;\nloop invariant a - b >= -n;\nloop invariant a + b <= 3*n;\nloop invariant a - b <= n;\nloop invariant a + b >= 0;\nloop invariant a - b >= -n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*i;\nloop invariant a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= n * 2;\nloop invariant 0 <= b <= n;\nloop invariant 0 <= i <= n;\nloop invariant a + b <= 3 * i;\nloop invariant a + b >= i;\nloop invariant i + b <= 2 * n;\nloop invariant i + a <= 3 * n;\nloop invariant b + a >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant b == a - (i * 3);\nloop invariant i == n ==> a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b <= 3 * n;\nloop invariant a <= n;\nloop invariant b <= 2 * n;\nloop invariant (If i < n then unknown_int() implies a + b == 3 * i else true);\nloop invariant (If i < n then !unknown_int() implies a + b == 3 * i else true);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;loop invariant i <= n;loop invariant a >= 0;loop invariant b >= 0;loop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*i;\nloop invariant 0 <= b <= 3*i;\nloop invariant a + b <= 3*i;\nloop invariant a + b >= 0;\nloop invariant a + b == 3*i ==> i == n;\nloop invariant a + b == 3*i ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*i;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\nloop invariant a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant a + b == 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a + b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*n;\nloop invariant a + b == 3*n ==> 0 <= i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*i;\nloop invariant i3: 0 <= b <= 3*i;\nloop invariant i4: a + b <= 3*i;\nloop invariant i5: a + b >= 0;\n\n\nloop invariant i8: a + b == 3*n ==> i == n;\nloop invariant i9: a + b == 3*n ==> a + b == 3*i;\nloop invariant i10: a + b == 3*n ==> 0 <= i <= n;\nloop invariant i11: a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant i12: a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant i13: a + b == 3*n ==> a + b <= 3*i;\nloop invariant i14: a + b == 3*n ==> a + b >= 0;\nloop invariant i15: a + b == 3*n ==> a + b == 3*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a + b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 2*n;\nloop invariant b <= 2*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a + b <= 3*n;\nloop invariant i3: a + b == 3*i;\nloop invariant i4: a >= i;\nloop invariant i5: b >= i;\nloop invariant i6: a <= 2*n;\nloop invariant i7: b <= 2*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 2*i;loop invariant a + b <= 3*i;loop invariant a + b >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 2*i;loop invariant a + b <= 3*i;loop invariant a + b >= i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 3*i;loop invariant i <= n ==> a + 2*b == 3*n;loop invariant n - i <= 1 ==> a + 2*b <= 3*n;loop invariant n - i >= 2 ==> a + b >= 3*n;loop invariant n - i >= 2 ==> a <= 2*n;loop invariant n - i >= 2 ==> b <= 2*n;loop invariant n - i >= 2 ==> a + b >= 3*(n - 2);loop invariant n - i >= 2 ==> a + b <= 3*(n - 1);loop invariant n - i == 1 ==> a + b == 3*(n - 1);loop invariant i == n ==> a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 3*i;loop invariant i <= n ==> a + 2*b == 3*n;loop invariant n - i <= 1 ==> a + 2*b <= 3*n;loop invariant n - i >= 2 ==> a + b >= 3*n;loop invariant n - i >= 2 ==> a <= 2*n;loop invariant n - i >= 2 ==> b <= 2*n;loop invariant n - i >= 2 ==> a + b >= 3*(n - 2);loop invariant n - i >= 2 ==> a + b <= 3*(n - 1);loop invariant n - i == 1 ==> a + b == 3*(n - 1);loop invariant i == n ==> a + b == 3*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a + b <= 3*n;\nloop invariant i + a + b == n;\nloop invariant a + b <= 3*n;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b <= 3*n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\nloop invariant i + a + b == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: n >= 0;\nloop invariant i6: n <= LARGE_INT;\nloop invariant i7: a + b >= 0;\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (-1 <= a) && (a <= 3*n);\nloop invariant (-1 <= b) && (b <= 3*n);\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: (-1 <= a) && (a <= 3*n);\nloop invariant i3: (-1 <= b) && (b <= 3*n);\nloop invariant i4: a + b == 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b <= 3*n;\nloop invariant a - b <= n;\nloop invariant a + b >= 0;\nloop invariant a - b >= -n;\nloop invariant a + b <= 3*i;\nloop invariant a - b <= i;\nloop invariant a + b >= 0;\nloop invariant a - b >= -i;\nloop invariant a + b <= 3*n;\nloop invariant a - b <= n;\nloop invariant a + b >= 0;\nloop invariant a - b >= -n;\nloop invariant a + b <= 3*n;\nloop invariant a - b <= n;\nloop invariant a + b >= 0;\nloop invariant a - b >= -n;\nloop invariant a + b <= 3*n;\nloop invariant a - b <= n;\nloop invariant a + b >= 0;\nloop invariant a - b >= -n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b <= 3*n;\nloop invariant i5: a - b <= n;\nloop invariant i6: a + b >= 0;\nloop invariant i7: a - b >= -n;\nloop invariant i8: a + b <= 3*i;\nloop invariant i9: a - b <= i;\nloop invariant i10: a - b >= -i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*i;\nloop invariant a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a >= 0;\nloop invariant i6: b >= 0;\nloop invariant i7: a + b >= 3*i;\nloop invariant i8: a + b <= 3*i;\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= n * 2;\nloop invariant 0 <= b <= n;\nloop invariant 0 <= i <= n;\nloop invariant a + b <= 3 * i;\nloop invariant a + b >= i;\nloop invariant i + b <= 2 * n;\nloop invariant i + a <= 3 * n;\nloop invariant b + a >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: 0 <= i <= n;\nloop invariant i4: a + b <= 3 * i;\nloop invariant i5: a + b >= i;\n\n\nloop invariant i8: b + a >= i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant b == a - (i * 3);\nloop invariant i == n ==> a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b <= 3 * n;\nloop invariant a <= n;\nloop invariant b <= 2 * n;\nloop invariant (If i < n then unknown_int() implies a + b == 3 * i else true);\nloop invariant (If i < n then !unknown_int() implies a + b == 3 * i else true);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;loop invariant i <= n;loop invariant a >= 0;loop invariant b >= 0;loop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: i >= 0;loop invariant i <= n;loop invariant a >= 0;loop invariant b >= 0;loop invariant a + b == 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b >= 3*i;\nloop invariant a + b <= 3*n;\nloop invariant a + b >= 0;\nloop invariant a + b <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b >= 3*i;\n\nloop invariant i6: a + b >= 0;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 69: unexpected token 'i'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*i;\nloop invariant i3: 0 <= b <= 3*i;\nloop invariant i4: a + b <= 3*i;\nloop invariant i5: a + b >= 0;\nloop invariant i6: a + b == 3*i ==> i == n;\nloop invariant i7: a + b == 3*i ==> a + b == 3*n;\nloop invariant i8: a + b == 3*n ==> i == n;\nloop invariant i9: a + b == 3*n ==> a + b == 3*i;\nloop invariant i10: a + b == 3*n ==> 0 <= i <= n;\nloop invariant i11: a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant i12: a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant i13: a + b == 3*n ==> a + b <= 3*i;\nloop invariant i14: a + b == 3*n ==> a + b >= 0;\nloop invariant i15: a + b == 3*n ==> a + b == 3*n;\nloop invariant i16: 0 <= a + b <= 3*n;\nloop invariant i17: a + b == 3*i;\nloop invariant i18: a >= i;\nloop invariant i19: b >= i;\nloop invariant i20: a <= 2*n;\nloop invariant i21: b <= 2*n;\nloop invariant i22: 0 <= a <= 2*n;\nloop invariant i23: 0 <= b <= 2*n;\nloop invariant i24: 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 2*i;loop invariant a + b <= 3*i;loop invariant a + b >= i;\nloop invariant i25: 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 3*i;loop invariant i <= n ==> a + 2*b == 3*n;loop invariant n - i <= 1 ==> a + 2*b <= 3*n;loop invariant n - i >= 2 ==> a + b >= 3*n;loop invariant n - i >= 2 ==> a <= 2*n;loop invariant n - i >= 2 ==> b <= 2*n;loop invariant n - i >= 2 ==> a + b >= 3*(n - 2);loop invariant n - i >= 2 ==> a + b <= 3*(n - 1);loop invariant n - i == 1 ==> a + b == 3*(n - 1);loop invariant i == n ==> a + b == 3*n;\nloop invariant i26: i + a + b == n;\nloop invariant i27: a + b <= 3*n;\nloop invariant i28: n >= 0;\nloop invariant i29: n <= LARGE_INT;\nloop invariant i30: (-1 <= a) && (a <= 3*n);\nloop invariant i31: (-1 <= b) && (b <= 3*n);\nloop invariant i32: 0 <= a <= 3*n;\nloop invariant i33: 0 <= b <= 3*n;\nloop invariant i34: a - b <= n;\nloop invariant i35: a - b >= -n;\nloop invariant i36: a - b <= i;\nloop invariant i37: a - b >= -i;\nloop invariant i38: a >= 0;\nloop invariant i39: b >= 0;\nloop invariant i40: a + b >= 3*i;\nloop invariant i41: a + b == 3*n;\nloop invariant i42: 0 <= a <= n * 2;\nloop invariant i43: 0 <= b <= n;\nloop invariant i44: a + b <= 3 * i;\nloop invariant i45: a + b >= i;\nloop invariant i46: i + b <= 2 * n;\nloop invariant i47: i + a <= 3 * n;\nloop invariant i48: b + a >= i;\nloop invariant i49: b == a - (i * 3);\nloop invariant i50: i == n ==> a + b == 3*n;\nloop invariant i51: a + b <= 3 * n;\nloop invariant i52: a <= n;\nloop invariant i53: b <= 2 * n;\nloop invariant i54: (If i < n then unknown_int() implies a + b == 3 * i else true);\nloop invariant i55: (If i < n then !unknown_int() implies a + b == 3 * i else true);\nloop invariant i56: i >= 0;loop invariant i <= n;loop invariant a >= 0;loop invariant b >= 0;loop invariant a + b == 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*i;\nloop invariant i3: 0 <= b <= 3*i;\nloop invariant i4: a + b <= 3*i;\nloop invariant i5: a + b >= 0;\n\n\nloop invariant i8: a + b == 3*n ==> i == n;\nloop invariant i9: a + b == 3*n ==> a + b == 3*i;\nloop invariant i10: a + b == 3*n ==> 0 <= i <= n;\nloop invariant i11: a + b == 3*n ==> 0 <= a <= 3*i;\nloop invariant i12: a + b == 3*n ==> 0 <= b <= 3*i;\nloop invariant i13: a + b == 3*n ==> a + b <= 3*i;\nloop invariant i14: a + b == 3*n ==> a + b >= 0;\nloop invariant i15: a + b == 3*n ==> a + b == 3*n;\nloop invariant i16: 0 <= a + b <= 3*n;\nloop invariant i17: a + b == 3*i;\nloop invariant i18: a >= i;\nloop invariant i19: b >= i;\nloop invariant i20: a <= 2*n;\nloop invariant i21: b <= 2*n;\nloop invariant i22: 0 <= a <= 2*n;\nloop invariant i23: 0 <= b <= 2*n;\nloop invariant i24: 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 2*i;loop invariant a + b <= 3*i;loop invariant a + b >= i;\nloop invariant i25: 0 <= i <= n;loop invariant 0 <= a <= 3*n;loop invariant 0 <= b <= 3*n;loop invariant a + b == 3*i;loop invariant i <= n ==> a + 2*b == 3*n;loop invariant n - i <= 1 ==> a + 2*b <= 3*n;loop invariant n - i >= 2 ==> a + b >= 3*n;loop invariant n - i >= 2 ==> a <= 2*n;loop invariant n - i >= 2 ==> b <= 2*n;loop invariant n - i >= 2 ==> a + b >= 3*(n - 2);loop invariant n - i >= 2 ==> a + b <= 3*(n - 1);loop invariant n - i == 1 ==> a + b == 3*(n - 1);loop invariant i == n ==> a + b == 3*n;\nloop invariant i26: i + a + b == n;\nloop invariant i27: a + b <= 3*n;\nloop invariant i28: n >= 0;\nloop invariant i29: n <= LARGE_INT;\nloop invariant i30: (-1 <= a) && (a <= 3*n);\nloop invariant i31: (-1 <= b) && (b <= 3*n);\nloop invariant i32: 0 <= a <= 3*n;\nloop invariant i33: 0 <= b <= 3*n;\nloop invariant i34: a - b <= n;\nloop invariant i35: a - b >= -n;\nloop invariant i36: a - b <= i;\nloop invariant i37: a - b >= -i;\nloop invariant i38: a >= 0;\nloop invariant i39: b >= 0;\nloop invariant i40: a + b >= 3*i;\nloop invariant i41: a + b == 3*n;\nloop invariant i42: 0 <= a <= n * 2;\nloop invariant i43: 0 <= b <= n;\nloop invariant i44: a + b <= 3 * i;\nloop invariant i45: a + b >= i;\nloop invariant i46: i + b <= 2 * n;\nloop invariant i47: i + a <= 3 * n;\nloop invariant i48: b + a >= i;\nloop invariant i49: b == a - (i * 3);\nloop invariant i50: i == n ==> a + b == 3*n;\nloop invariant i51: a + b <= 3 * n;\nloop invariant i52: a <= n;\nloop invariant i53: b <= 2 * n;\n\n\nloop invariant i56: i >= 0;loop invariant i <= n;loop invariant a >= 0;loop invariant b >= 0;loop invariant a + b == 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c"
        ],
        "skipped": [],
        "total": 46,
        "success_count": 39,
        "failure_count": 7,
        "success_rate": 0.8478260869565217
    }
}