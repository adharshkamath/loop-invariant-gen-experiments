{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 == 1) ==> (i == j - 1 || i == j + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= b <= 1; loop invariant 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant (i == j) ==> (n % 2 == 0); loop invariant (i == j) ==> (n >= 2*k); loop invariant (i == j) ==> (i == k); loop invariant (i == j) ==> (j == k); loop invariant (i == j) ==> (n == 2*k); loop invariant (i == j) ==> (n == 2*k - 1); loop invariant (i == j) ==> (n == 2*k - 2); loop invariant (i == j) ==> (n == 2*k - 3); loop invariant (i == j) ==> (n == 2*k - 4); loop invariant (i == j) ==> (n == 2*k - 5); loop invariant (i == j) ==> (n == 2*k - 6); loop invariant (i == j) ==> (n == 2*k - 7); loop invariant (i == j) ==> (n == 2*k - 8); loop invariant (i == j) ==> (n == 2*k - 9); loop invariant (i == j) ==> (n == 2*k - 10); loop invariant (i == j) ==> (n == 2*k - 11); loop invariant (i == j) ==> (n == 2*k - 12); loop invariant (i == j) ==> (n == 2*k - 13); loop invariant (i == j) ==> (n == 2*k - 14); loop invariant (i == j) ==> (n == 2*k - 15); loop invariant (i == j) ==> (n == 2*k - 16); loop invariant (i == j) ==> (n == 2*k - 17); loop invariant (i == j) ==> (n == 2*k - 18); loop invariant (i == j) ==> (n == 2*k - 19); loop invariant (i == j) ==> (n == 2*k - 20); loop invariant (i == j) ==> (n == 2*k - 21); loop invariant (i == j) ==> (n == 2*k - 22); loop invariant (i == j) ==> (n == 2*k - 23); loop invariant (i == j) ==> (n == 2*k - 24); loop invariant (i == j) ==> (n == 2*k - 25); loop invariant (i == j) ==> (n == 2*k - 26); loop invariant (i == j) ==> (n == 2*k - 27); loop invariant (i == j) ==> (n == 2*k - 28); loop invariant (i == j) ==> (n == 2*k - 29); loop invariant (i == j) ==> (n == 2*k - 30); loop invariant (i == j) ==> (n == 2*k - 31); loop invariant (i == j) ==> (n == 2*k - 32); loop invariant (i == j) ==> (n == 2*k - 33); loop invariant (i == j) ==> (n == 2*k - 34); loop invariant (i == j) ==> (n == 2*k - 35); loop invariant (i == j) ==> (n == 2*k - 36); loop invariant (i == j) ==> (n == 2*k - 37); loop invariant (i == j) ==> (n == 2*k - 38); loop invariant (i == j) ==> (n == 2*k - 39); loop invariant (i == j) ==> (n == 2*k - 40); loop invariant (i == j) ==> (n == 2*k - 41); loop invariant (i == j) ==> (n == 2*k - 42); loop invariant (i == j) ==> (n == 2*k - 43); loop invariant (i == j) ==> (n == 2*k - 44); loop invariant (i == j) ==> (n == 2*k - 45); loop invariant (i == j) ==> (n == 2*k - 46); loop invariant (i == j) ==> (n == 2*k - 47);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2 * k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= n;\nloop invariant if b == 1 then i + 1 == j;\nloop invariant if b == 0 then j + 1 == i;\nloop invariant if b == 1 then i + 1 == n - j;\nloop invariant if b == 0 then j + 1 == n - i;\nloop invariant if b == 1 then i + 1 == k - j;\nloop invariant if b == 0 then j + 1 == k - i;\nloop invariant if b == 1 then i + 1 == k - j + 1;\nloop invariant if b == 0 then j + 1 == k - i + 1;\nloop invariant if b == 1 then i + 1 == k - j + 2;\nloop invariant if b == 0 then j + 1 == k - i + 2;\nloop invariant if b == 1 then i + 1 == k - j + 3;\nloop invariant if b == 0 then j + 1 == k - i + 3;\nloop invariant if b == 1 then i + 1 == k - j + 4;\nloop invariant if b == 0 then j + 1 == k - i + 4;\nloop invariant if b == 1 then i + 1 == k - j + 5;\nloop invariant if b == 0 then j + 1 == k - i + 5;\nloop invariant if b == 1 then i + 1 == k - j + 6;\nloop invariant if b == 0 then j + 1 == k - i + 6;\nloop invariant if b == 1 then i + 1 == k - j + 7;\nloop invariant if b == 0 then j + 1 == k - i + 7;\nloop invariant if b == 1 then i + 1 == k - j + 8;\nloop invariant if b == 0 then j + 1 == k - i + 8;\nloop invariant if b == 1 then i + 1 == k - j + 9;\nloop invariant if b == 0 then j + 1 == k - i + 9;\nloop invariant if b == 1 then i + 1 == k - j + 10;\nloop invariant if b == 0 then j + 1 == k - i + 10;\nloop invariant if b == 1 then i + 1 == k - j + 11;\nloop invariant if b == 0 then j + 1 == k - i + 11;\nloop invariant if b == 1 then i + 1 == k - j + 12;\nloop invariant if b == 0 then j + 1 == k - i + 12;\nloop invariant if b == 1 then i + 1 == k - j + 13;\nloop invariant if b == 0 then j + 1 == k - i + 13;\nloop invariant if b == 1 then i + 1 == k - j + 14;\nloop invariant if b == 0 then j + 1 == k - i + 14;\nloop invariant if b == 1 then i + 1 == k - j + 15;\nloop invariant if b == 0 then j + 1 == k - i + 15;\nloop invariant if b == 1 then i + 1 == k - j + 16;\nloop invariant if b == 0 then j + 1 == k - i + 16;\nloop invariant if b == 1 then i + 1 == k - j + 17;\nloop invariant if b == 0 then j + 1 == k - i + 17;\nloop invariant if b == 1 then i + 1 == k - j + 18;\nloop invariant if b == 0 then j + 1 == k - i + 18;\nloop invariant if b == 1 then i + 1 == k - j + 19;\nloop invariant if b == 0 then j + 1 == k - i + 19;\nloop invariant if b == 1 then i + 1 == k - j + 20;\nloop invariant if b == 0 then j + 1 == k - i + 20;\nloop invariant if b == 1 then i + 1 == k - j + 21;\nloop invariant if b == 0 then j + 1 == k - i + 21;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == 1 ==> i == j + 1;\nloop invariant b == 0 ==> i == j - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j <= 2*k;\nloop invariant i >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == 2 * k;\nloop invariant i >= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant j <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i >= j;\nloop invariant j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant k == i + j;\nloop invariant 0 <= n <= 2*k;\nloop invariant b == 1 ==> (i == j - 1);\nloop invariant b == 0 ==> (j == i - 1);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n >= 0;\nloop invariant n <= 2*k;\nloop invariant k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i == j;\nloop invariant b == 0 || b == 1;\nloop invariant i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant i + j == k; loop invariant i >= j; loop invariant j >= i; loop invariant i + j == 2*k; loop invariant i + j == 0; loop invariant i + j == 1; loop invariant i + j == 100; loop invariant i + j == 1000; loop invariant i + j == 10000; loop invariant i + j == 100000; loop invariant i + j == 1000000; loop invariant i + j == 10000000; loop invariant i + j == 100000000; loop invariant i + j == 1000000000; loop invariant i + j == 10000000000; loop invariant i + j == 100000000000; loop invariant i + j == 1000000000000; loop invariant i + j == 10000000000000; loop invariant i + j == 100000000000000; loop invariant i + j == 1000000000000000; loop invariant i + j == 10000000000000000; loop invariant i + j == 100000000000000000; loop invariant i + j == 1000000000000000000; loop invariant i + j == 10000000000000000000; loop invariant i + j == 100000000000000000000; loop invariant i + j == 1000000000000000000000; loop invariant i + j == 10000000000000000000000; loop invariant i + j == 100000000000000000000000; loop invariant i + j == 1000000000000000000000000; loop invariant i + j == 10000000000000000000000000; loop invariant i + j == 100000000000000000000000000; loop invariant i + j == 1000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant b == 1 || b == 0;\nloop invariant (b == 1) ==> (i == j);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (j == i + 1);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j);\nloop invariant (b == 0) ==> (i == j + 1);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == n;\nloop invariant (n % 2 == 0) ==> (i == j);\nloop invariant (n % 2 == 1) ==> (i == j - 1 || i == j + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= b <= 1; loop invariant 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant (i == j) ==> (n % 2 == 0); loop invariant (i == j) ==> (n >= 2*k); loop invariant (i == j) ==> (i == k); loop invariant (i == j) ==> (j == k); loop invariant (i == j) ==> (n == 2*k); loop invariant (i == j) ==> (n == 2*k - 1); loop invariant (i == j) ==> (n == 2*k - 2); loop invariant (i == j) ==> (n == 2*k - 3); loop invariant (i == j) ==> (n == 2*k - 4); loop invariant (i == j) ==> (n == 2*k - 5); loop invariant (i == j) ==> (n == 2*k - 6); loop invariant (i == j) ==> (n == 2*k - 7); loop invariant (i == j) ==> (n == 2*k - 8); loop invariant (i == j) ==> (n == 2*k - 9); loop invariant (i == j) ==> (n == 2*k - 10); loop invariant (i == j) ==> (n == 2*k - 11); loop invariant (i == j) ==> (n == 2*k - 12); loop invariant (i == j) ==> (n == 2*k - 13); loop invariant (i == j) ==> (n == 2*k - 14); loop invariant (i == j) ==> (n == 2*k - 15); loop invariant (i == j) ==> (n == 2*k - 16); loop invariant (i == j) ==> (n == 2*k - 17); loop invariant (i == j) ==> (n == 2*k - 18); loop invariant (i == j) ==> (n == 2*k - 19); loop invariant (i == j) ==> (n == 2*k - 20); loop invariant (i == j) ==> (n == 2*k - 21); loop invariant (i == j) ==> (n == 2*k - 22); loop invariant (i == j) ==> (n == 2*k - 23); loop invariant (i == j) ==> (n == 2*k - 24); loop invariant (i == j) ==> (n == 2*k - 25); loop invariant (i == j) ==> (n == 2*k - 26); loop invariant (i == j) ==> (n == 2*k - 27); loop invariant (i == j) ==> (n == 2*k - 28); loop invariant (i == j) ==> (n == 2*k - 29); loop invariant (i == j) ==> (n == 2*k - 30); loop invariant (i == j) ==> (n == 2*k - 31); loop invariant (i == j) ==> (n == 2*k - 32); loop invariant (i == j) ==> (n == 2*k - 33); loop invariant (i == j) ==> (n == 2*k - 34); loop invariant (i == j) ==> (n == 2*k - 35); loop invariant (i == j) ==> (n == 2*k - 36); loop invariant (i == j) ==> (n == 2*k - 37); loop invariant (i == j) ==> (n == 2*k - 38); loop invariant (i == j) ==> (n == 2*k - 39); loop invariant (i == j) ==> (n == 2*k - 40); loop invariant (i == j) ==> (n == 2*k - 41); loop invariant (i == j) ==> (n == 2*k - 42); loop invariant (i == j) ==> (n == 2*k - 43); loop invariant (i == j) ==> (n == 2*k - 44); loop invariant (i == j) ==> (n == 2*k - 45); loop invariant (i == j) ==> (n == 2*k - 46); loop invariant (i == j) ==> (n == 2*k - 47);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= b <= 1; loop invariant 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant (i == j) ==> (n % 2 == 0); loop invariant (i == j) ==> (n >= 2*k); loop invariant (i == j) ==> (i == k); loop invariant (i == j) ==> (j == k); loop invariant (i == j) ==> (n == 2*k); loop invariant (i == j) ==> (n == 2*k - 1); loop invariant (i == j) ==> (n == 2*k - 2); loop invariant (i == j) ==> (n == 2*k - 3); loop invariant (i == j) ==> (n == 2*k - 4); loop invariant (i == j) ==> (n == 2*k - 5); loop invariant (i == j) ==> (n == 2*k - 6); loop invariant (i == j) ==> (n == 2*k - 7); loop invariant (i == j) ==> (n == 2*k - 8); loop invariant (i == j) ==> (n == 2*k - 9); loop invariant (i == j) ==> (n == 2*k - 10); loop invariant (i == j) ==> (n == 2*k - 11); loop invariant (i == j) ==> (n == 2*k - 12); loop invariant (i == j) ==> (n == 2*k - 13); loop invariant (i == j) ==> (n == 2*k - 14); loop invariant (i == j) ==> (n == 2*k - 15); loop invariant (i == j) ==> (n == 2*k - 16); loop invariant (i == j) ==> (n == 2*k - 17); loop invariant (i == j) ==> (n == 2*k - 18); loop invariant (i == j) ==> (n == 2*k - 19); loop invariant (i == j) ==> (n == 2*k - 20); loop invariant (i == j) ==> (n == 2*k - 21); loop invariant (i == j) ==> (n == 2*k - 22); loop invariant (i == j) ==> (n == 2*k - 23); loop invariant (i == j) ==> (n == 2*k - 24); loop invariant (i == j) ==> (n == 2*k - 25); loop invariant (i == j) ==> (n == 2*k - 26); loop invariant (i == j) ==> (n == 2*k - 27); loop invariant (i == j) ==> (n == 2*k - 28); loop invariant (i == j) ==> (n == 2*k - 29); loop invariant (i == j) ==> (n == 2*k - 30); loop invariant (i == j) ==> (n == 2*k - 31); loop invariant (i == j) ==> (n == 2*k - 32); loop invariant (i == j) ==> (n == 2*k - 33); loop invariant (i == j) ==> (n == 2*k - 34); loop invariant (i == j) ==> (n == 2*k - 35); loop invariant (i == j) ==> (n == 2*k - 36); loop invariant (i == j) ==> (n == 2*k - 37); loop invariant (i == j) ==> (n == 2*k - 38); loop invariant (i == j) ==> (n == 2*k - 39); loop invariant (i == j) ==> (n == 2*k - 40); loop invariant (i == j) ==> (n == 2*k - 41); loop invariant (i == j) ==> (n == 2*k - 42); loop invariant (i == j) ==> (n == 2*k - 43); loop invariant (i == j) ==> (n == 2*k - 44); loop invariant (i == j) ==> (n == 2*k - 45); loop invariant (i == j) ==> (n == 2*k - 46); loop invariant (i == j) ==> (n == 2*k - 47);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 50,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2 * k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j <= n;\nloop invariant if b == 1 then i + 1 == j;\nloop invariant if b == 0 then j + 1 == i;\nloop invariant if b == 1 then i + 1 == n - j;\nloop invariant if b == 0 then j + 1 == n - i;\nloop invariant if b == 1 then i + 1 == k - j;\nloop invariant if b == 0 then j + 1 == k - i;\nloop invariant if b == 1 then i + 1 == k - j + 1;\nloop invariant if b == 0 then j + 1 == k - i + 1;\nloop invariant if b == 1 then i + 1 == k - j + 2;\nloop invariant if b == 0 then j + 1 == k - i + 2;\nloop invariant if b == 1 then i + 1 == k - j + 3;\nloop invariant if b == 0 then j + 1 == k - i + 3;\nloop invariant if b == 1 then i + 1 == k - j + 4;\nloop invariant if b == 0 then j + 1 == k - i + 4;\nloop invariant if b == 1 then i + 1 == k - j + 5;\nloop invariant if b == 0 then j + 1 == k - i + 5;\nloop invariant if b == 1 then i + 1 == k - j + 6;\nloop invariant if b == 0 then j + 1 == k - i + 6;\nloop invariant if b == 1 then i + 1 == k - j + 7;\nloop invariant if b == 0 then j + 1 == k - i + 7;\nloop invariant if b == 1 then i + 1 == k - j + 8;\nloop invariant if b == 0 then j + 1 == k - i + 8;\nloop invariant if b == 1 then i + 1 == k - j + 9;\nloop invariant if b == 0 then j + 1 == k - i + 9;\nloop invariant if b == 1 then i + 1 == k - j + 10;\nloop invariant if b == 0 then j + 1 == k - i + 10;\nloop invariant if b == 1 then i + 1 == k - j + 11;\nloop invariant if b == 0 then j + 1 == k - i + 11;\nloop invariant if b == 1 then i + 1 == k - j + 12;\nloop invariant if b == 0 then j + 1 == k - i + 12;\nloop invariant if b == 1 then i + 1 == k - j + 13;\nloop invariant if b == 0 then j + 1 == k - i + 13;\nloop invariant if b == 1 then i + 1 == k - j + 14;\nloop invariant if b == 0 then j + 1 == k - i + 14;\nloop invariant if b == 1 then i + 1 == k - j + 15;\nloop invariant if b == 0 then j + 1 == k - i + 15;\nloop invariant if b == 1 then i + 1 == k - j + 16;\nloop invariant if b == 0 then j + 1 == k - i + 16;\nloop invariant if b == 1 then i + 1 == k - j + 17;\nloop invariant if b == 0 then j + 1 == k - i + 17;\nloop invariant if b == 1 then i + 1 == k - j + 18;\nloop invariant if b == 0 then j + 1 == k - i + 18;\nloop invariant if b == 1 then i + 1 == k - j + 19;\nloop invariant if b == 0 then j + 1 == k - i + 19;\nloop invariant if b == 1 then i + 1 == k - j + 20;\nloop invariant if b == 0 then j + 1 == k - i + 20;\nloop invariant if b == 1 then i + 1 == k - j + 21;\nloop invariant if b == 0 then j + 1 == k - i + 21;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2 * k;\n\n\nloop invariant i4: i + j <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant b == 1 ==> i == j + 1;\nloop invariant b == 0 ==> i == j - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\nloop invariant i <= 100;\nloop invariant j <= 100;\nloop invariant i + j <= 200;\nloop invariant i + j >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i + j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\nloop invariant i4: i + j >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100;\nloop invariant 0 <= j <= 100;\nloop invariant i + j <= 2*k;\nloop invariant i >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == 2 * k;\nloop invariant i >= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\nloop invariant i <= j;\nloop invariant j <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2*k;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i + j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j >= 0;\nloop invariant i + j <= 2*k;\nloop invariant i >= j;\nloop invariant j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: i + j >= 0;\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant k == i + j;\nloop invariant 0 <= n <= 2*k;\nloop invariant b == 1 ==> (i == j - 1);\nloop invariant b == 0 ==> (j == i - 1);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant n >= 0;\nloop invariant n <= 2*k;\nloop invariant k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\nloop invariant i4: 0 <= n <= 2*k;\n\n\nloop invariant i7: i >= 0;\nloop invariant i8: j >= 0;\nloop invariant i9: n >= 0;\nloop invariant i10: n <= 2*k;\nloop invariant i11: k >= 0;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant i == j;\nloop invariant b == 0 || b == 1;\nloop invariant i + j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\n\n\nloop invariant i4: b == 0 || b == 1;\nloop invariant i5: i + j == n;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant i + j == k; loop invariant i >= j; loop invariant j >= i; loop invariant i + j == 2*k; loop invariant i + j == 0; loop invariant i + j == 1; loop invariant i + j == 100; loop invariant i + j == 1000; loop invariant i + j == 10000; loop invariant i + j == 100000; loop invariant i + j == 1000000; loop invariant i + j == 10000000; loop invariant i + j == 100000000; loop invariant i + j == 1000000000; loop invariant i + j == 10000000000; loop invariant i + j == 100000000000; loop invariant i + j == 1000000000000; loop invariant i + j == 10000000000000; loop invariant i + j == 100000000000000; loop invariant i + j == 1000000000000000; loop invariant i + j == 10000000000000000; loop invariant i + j == 100000000000000000; loop invariant i + j == 1000000000000000000; loop invariant i + j == 10000000000000000000; loop invariant i + j == 100000000000000000000; loop invariant i + j == 1000000000000000000000; loop invariant i + j == 10000000000000000000000; loop invariant i + j == 100000000000000000000000; loop invariant i + j == 1000000000000000000000000; loop invariant i + j == 10000000000000000000000000; loop invariant i + j == 100000000000000000000000000; loop invariant i + j == 1000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant i + j == k; loop invariant i >= j; loop invariant j >= i; loop invariant i + j == 2*k; loop invariant i + j == 0; loop invariant i + j == 1; loop invariant i + j == 100; loop invariant i + j == 1000; loop invariant i + j == 10000; loop invariant i + j == 100000; loop invariant i + j == 1000000; loop invariant i + j == 10000000; loop invariant i + j == 100000000; loop invariant i + j == 1000000000; loop invariant i + j == 10000000000; loop invariant i + j == 100000000000; loop invariant i + j == 1000000000000; loop invariant i + j == 10000000000000; loop invariant i + j == 100000000000000; loop invariant i + j == 1000000000000000; loop invariant i + j == 10000000000000000; loop invariant i + j == 100000000000000000; loop invariant i + j == 1000000000000000000; loop invariant i + j == 10000000000000000000; loop invariant i + j == 100000000000000000000; loop invariant i + j == 1000000000000000000000; loop invariant i + j == 10000000000000000000000; loop invariant i + j == 100000000000000000000000; loop invariant i + j == 1000000000000000000000000; loop invariant i + j == 10000000000000000000000000; loop invariant i + j == 100000000000000000000000000; loop invariant i + j == 1000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000000;\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= 2*k;\nloop invariant i + j == n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant b == 1 || b == 0;\nloop invariant (b == 1) ==> (i == j);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (j == i + 1);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j);\nloop invariant (b == 0) ==> (i == j + 1);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\nloop invariant (b == 0) ==> (i == j);\nloop invariant (b == 1) ==> (i == j + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\n\nloop invariant i2: i + j == n;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: b == 1 || b == 0;\n\n\n\n\n\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 32: unexpected token 'b'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: i <= k;\nloop invariant i5: j <= k;\nloop invariant i6: i + j == n;\nloop invariant i7: (n % 2 == 0) ==> (i == j);\nloop invariant i8: (n % 2 == 1) ==> (i == j - 1 || i == j + 1);\nloop invariant i9: 0 <= b <= 1; loop invariant 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant (i == j) ==> (n % 2 == 0); loop invariant (i == j) ==> (n >= 2*k); loop invariant (i == j) ==> (i == k); loop invariant (i == j) ==> (j == k); loop invariant (i == j) ==> (n == 2*k); loop invariant (i == j) ==> (n == 2*k - 1); loop invariant (i == j) ==> (n == 2*k - 2); loop invariant (i == j) ==> (n == 2*k - 3); loop invariant (i == j) ==> (n == 2*k - 4); loop invariant (i == j) ==> (n == 2*k - 5); loop invariant (i == j) ==> (n == 2*k - 6); loop invariant (i == j) ==> (n == 2*k - 7); loop invariant (i == j) ==> (n == 2*k - 8); loop invariant (i == j) ==> (n == 2*k - 9); loop invariant (i == j) ==> (n == 2*k - 10); loop invariant (i == j) ==> (n == 2*k - 11); loop invariant (i == j) ==> (n == 2*k - 12); loop invariant (i == j) ==> (n == 2*k - 13); loop invariant (i == j) ==> (n == 2*k - 14); loop invariant (i == j) ==> (n == 2*k - 15); loop invariant (i == j) ==> (n == 2*k - 16); loop invariant (i == j) ==> (n == 2*k - 17); loop invariant (i == j) ==> (n == 2*k - 18); loop invariant (i == j) ==> (n == 2*k - 19); loop invariant (i == j) ==> (n == 2*k - 20); loop invariant (i == j) ==> (n == 2*k - 21); loop invariant (i == j) ==> (n == 2*k - 22); loop invariant (i == j) ==> (n == 2*k - 23); loop invariant (i == j) ==> (n == 2*k - 24); loop invariant (i == j) ==> (n == 2*k - 25); loop invariant (i == j) ==> (n == 2*k - 26); loop invariant (i == j) ==> (n == 2*k - 27); loop invariant (i == j) ==> (n == 2*k - 28); loop invariant (i == j) ==> (n == 2*k - 29); loop invariant (i == j) ==> (n == 2*k - 30); loop invariant (i == j) ==> (n == 2*k - 31); loop invariant (i == j) ==> (n == 2*k - 32); loop invariant (i == j) ==> (n == 2*k - 33); loop invariant (i == j) ==> (n == 2*k - 34); loop invariant (i == j) ==> (n == 2*k - 35); loop invariant (i == j) ==> (n == 2*k - 36); loop invariant (i == j) ==> (n == 2*k - 37); loop invariant (i == j) ==> (n == 2*k - 38); loop invariant (i == j) ==> (n == 2*k - 39); loop invariant (i == j) ==> (n == 2*k - 40); loop invariant (i == j) ==> (n == 2*k - 41); loop invariant (i == j) ==> (n == 2*k - 42); loop invariant (i == j) ==> (n == 2*k - 43); loop invariant (i == j) ==> (n == 2*k - 44); loop invariant (i == j) ==> (n == 2*k - 45); loop invariant (i == j) ==> (n == 2*k - 46); loop invariant (i == j) ==> (n == 2*k - 47);\nloop invariant i10: 0 <= n <= 2 * k;\nloop invariant i11: 0 <= i <= k;\nloop invariant i12: 0 <= j <= k;\nloop invariant i13: i + j <= n;\nloop invariant i14: if b == 1 then i + 1 == j;\nloop invariant i15: if b == 0 then j + 1 == i;\nloop invariant i16: if b == 1 then i + 1 == n - j;\nloop invariant i17: if b == 0 then j + 1 == n - i;\nloop invariant i18: if b == 1 then i + 1 == k - j;\nloop invariant i19: if b == 0 then j + 1 == k - i;\nloop invariant i20: if b == 1 then i + 1 == k - j + 1;\nloop invariant i21: if b == 0 then j + 1 == k - i + 1;\nloop invariant i22: if b == 1 then i + 1 == k - j + 2;\nloop invariant i23: if b == 0 then j + 1 == k - i + 2;\nloop invariant i24: if b == 1 then i + 1 == k - j + 3;\nloop invariant i25: if b == 0 then j + 1 == k - i + 3;\nloop invariant i26: if b == 1 then i + 1 == k - j + 4;\nloop invariant i27: if b == 0 then j + 1 == k - i + 4;\nloop invariant i28: if b == 1 then i + 1 == k - j + 5;\nloop invariant i29: if b == 0 then j + 1 == k - i + 5;\nloop invariant i30: if b == 1 then i + 1 == k - j + 6;\nloop invariant i31: if b == 0 then j + 1 == k - i + 6;\nloop invariant i32: if b == 1 then i + 1 == k - j + 7;\nloop invariant i33: if b == 0 then j + 1 == k - i + 7;\nloop invariant i34: if b == 1 then i + 1 == k - j + 8;\nloop invariant i35: if b == 0 then j + 1 == k - i + 8;\nloop invariant i36: if b == 1 then i + 1 == k - j + 9;\nloop invariant i37: if b == 0 then j + 1 == k - i + 9;\nloop invariant i38: if b == 1 then i + 1 == k - j + 10;\nloop invariant i39: if b == 0 then j + 1 == k - i + 10;\nloop invariant i40: if b == 1 then i + 1 == k - j + 11;\nloop invariant i41: if b == 0 then j + 1 == k - i + 11;\nloop invariant i42: if b == 1 then i + 1 == k - j + 12;\nloop invariant i43: if b == 0 then j + 1 == k - i + 12;\nloop invariant i44: if b == 1 then i + 1 == k - j + 13;\nloop invariant i45: if b == 0 then j + 1 == k - i + 13;\nloop invariant i46: if b == 1 then i + 1 == k - j + 14;\nloop invariant i47: if b == 0 then j + 1 == k - i + 14;\nloop invariant i48: if b == 1 then i + 1 == k - j + 15;\nloop invariant i49: if b == 0 then j + 1 == k - i + 15;\nloop invariant i50: if b == 1 then i + 1 == k - j + 16;\nloop invariant i51: if b == 0 then j + 1 == k - i + 16;\nloop invariant i52: if b == 1 then i + 1 == k - j + 17;\nloop invariant i53: if b == 0 then j + 1 == k - i + 17;\nloop invariant i54: if b == 1 then i + 1 == k - j + 18;\nloop invariant i55: if b == 0 then j + 1 == k - i + 18;\nloop invariant i56: if b == 1 then i + 1 == k - j + 19;\nloop invariant i57: if b == 0 then j + 1 == k - i + 19;\nloop invariant i58: if b == 1 then i + 1 == k - j + 20;\nloop invariant i59: if b == 0 then j + 1 == k - i + 20;\nloop invariant i60: if b == 1 then i + 1 == k - j + 21;\nloop invariant i61: if b == 0 then j + 1 == k - i + 21;\nloop invariant i62: b == 1 ==> i == j + 1;\nloop invariant i63: b == 0 ==> i == j - 1;\nloop invariant i64: 0 <= i <= 100;\nloop invariant i65: 0 <= j <= 100;\nloop invariant i66: i + j <= 200;\nloop invariant i67: i + j >= 0;\nloop invariant i68: i + j <= 2*k;\nloop invariant i69: i <= 100;\nloop invariant i70: j <= 100;\nloop invariant i71: i >= j;\nloop invariant i72: i + j == 2 * k;\nloop invariant i73: i <= j;\nloop invariant i74: j <= i;\nloop invariant i75: j >= i;\nloop invariant i76: k == i + j;\nloop invariant i77: b == 1 ==> (i == j - 1);\nloop invariant i78: b == 0 ==> (j == i - 1);\nloop invariant i79: n >= 0;\nloop invariant i80: n <= 2*k;\nloop invariant i81: k >= 0;\nloop invariant i82: i == j;\nloop invariant i83: b == 0 || b == 1;\nloop invariant i84: 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant i + j == k; loop invariant i >= j; loop invariant j >= i; loop invariant i + j == 2*k; loop invariant i + j == 0; loop invariant i + j == 1; loop invariant i + j == 100; loop invariant i + j == 1000; loop invariant i + j == 10000; loop invariant i + j == 100000; loop invariant i + j == 1000000; loop invariant i + j == 10000000; loop invariant i + j == 100000000; loop invariant i + j == 1000000000; loop invariant i + j == 10000000000; loop invariant i + j == 100000000000; loop invariant i + j == 1000000000000; loop invariant i + j == 10000000000000; loop invariant i + j == 100000000000000; loop invariant i + j == 1000000000000000; loop invariant i + j == 10000000000000000; loop invariant i + j == 100000000000000000; loop invariant i + j == 1000000000000000000; loop invariant i + j == 10000000000000000000; loop invariant i + j == 100000000000000000000; loop invariant i + j == 1000000000000000000000; loop invariant i + j == 10000000000000000000000; loop invariant i + j == 100000000000000000000000; loop invariant i + j == 1000000000000000000000000; loop invariant i + j == 10000000000000000000000000; loop invariant i + j == 100000000000000000000000000; loop invariant i + j == 1000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000000;\nloop invariant i85: 1 <= n <= 2*k;\nloop invariant i86: b == 1 || b == 0;\nloop invariant i87: (b == 1) ==> (i == j);\nloop invariant i88: (b == 0) ==> (i == j);\nloop invariant i89: (b == 1) ==> (i == j + 1);\nloop invariant i90: (b == 0) ==> (j == i + 1);\nloop invariant i91: (b == 0) ==> (i == j + 1);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "combined_annotation_num_solver_calls": 50,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  /*@\nloop invariant i1: 0 <= n <= 2*k;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: i <= k;\nloop invariant i5: j <= k;\nloop invariant i6: i + j == n;\nloop invariant i7: (n % 2 == 0) ==> (i == j);\nloop invariant i8: (n % 2 == 1) ==> (i == j - 1 || i == j + 1);\nloop invariant i9: 0 <= b <= 1; loop invariant 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant (i == j) ==> (n % 2 == 0); loop invariant (i == j) ==> (n >= 2*k); loop invariant (i == j) ==> (i == k); loop invariant (i == j) ==> (j == k); loop invariant (i == j) ==> (n == 2*k); loop invariant (i == j) ==> (n == 2*k - 1); loop invariant (i == j) ==> (n == 2*k - 2); loop invariant (i == j) ==> (n == 2*k - 3); loop invariant (i == j) ==> (n == 2*k - 4); loop invariant (i == j) ==> (n == 2*k - 5); loop invariant (i == j) ==> (n == 2*k - 6); loop invariant (i == j) ==> (n == 2*k - 7); loop invariant (i == j) ==> (n == 2*k - 8); loop invariant (i == j) ==> (n == 2*k - 9); loop invariant (i == j) ==> (n == 2*k - 10); loop invariant (i == j) ==> (n == 2*k - 11); loop invariant (i == j) ==> (n == 2*k - 12); loop invariant (i == j) ==> (n == 2*k - 13); loop invariant (i == j) ==> (n == 2*k - 14); loop invariant (i == j) ==> (n == 2*k - 15); loop invariant (i == j) ==> (n == 2*k - 16); loop invariant (i == j) ==> (n == 2*k - 17); loop invariant (i == j) ==> (n == 2*k - 18); loop invariant (i == j) ==> (n == 2*k - 19); loop invariant (i == j) ==> (n == 2*k - 20); loop invariant (i == j) ==> (n == 2*k - 21); loop invariant (i == j) ==> (n == 2*k - 22); loop invariant (i == j) ==> (n == 2*k - 23); loop invariant (i == j) ==> (n == 2*k - 24); loop invariant (i == j) ==> (n == 2*k - 25); loop invariant (i == j) ==> (n == 2*k - 26); loop invariant (i == j) ==> (n == 2*k - 27); loop invariant (i == j) ==> (n == 2*k - 28); loop invariant (i == j) ==> (n == 2*k - 29); loop invariant (i == j) ==> (n == 2*k - 30); loop invariant (i == j) ==> (n == 2*k - 31); loop invariant (i == j) ==> (n == 2*k - 32); loop invariant (i == j) ==> (n == 2*k - 33); loop invariant (i == j) ==> (n == 2*k - 34); loop invariant (i == j) ==> (n == 2*k - 35); loop invariant (i == j) ==> (n == 2*k - 36); loop invariant (i == j) ==> (n == 2*k - 37); loop invariant (i == j) ==> (n == 2*k - 38); loop invariant (i == j) ==> (n == 2*k - 39); loop invariant (i == j) ==> (n == 2*k - 40); loop invariant (i == j) ==> (n == 2*k - 41); loop invariant (i == j) ==> (n == 2*k - 42); loop invariant (i == j) ==> (n == 2*k - 43); loop invariant (i == j) ==> (n == 2*k - 44); loop invariant (i == j) ==> (n == 2*k - 45); loop invariant (i == j) ==> (n == 2*k - 46); loop invariant (i == j) ==> (n == 2*k - 47);\nloop invariant i10: 0 <= n <= 2 * k;\nloop invariant i11: 0 <= i <= k;\nloop invariant i12: 0 <= j <= k;\nloop invariant i13: i + j <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i62: b == 1 ==> i == j + 1;\nloop invariant i63: b == 0 ==> i == j - 1;\nloop invariant i64: 0 <= i <= 100;\nloop invariant i65: 0 <= j <= 100;\nloop invariant i66: i + j <= 200;\nloop invariant i67: i + j >= 0;\nloop invariant i68: i + j <= 2*k;\nloop invariant i69: i <= 100;\nloop invariant i70: j <= 100;\nloop invariant i71: i >= j;\nloop invariant i72: i + j == 2 * k;\nloop invariant i73: i <= j;\nloop invariant i74: j <= i;\nloop invariant i75: j >= i;\nloop invariant i76: k == i + j;\nloop invariant i77: b == 1 ==> (i == j - 1);\nloop invariant i78: b == 0 ==> (j == i - 1);\nloop invariant i79: n >= 0;\nloop invariant i80: n <= 2*k;\nloop invariant i81: k >= 0;\nloop invariant i82: i == j;\nloop invariant i83: b == 0 || b == 1;\nloop invariant i84: 0 <= i <= k; loop invariant 0 <= j <= k; loop invariant i + j == k; loop invariant i >= j; loop invariant j >= i; loop invariant i + j == 2*k; loop invariant i + j == 0; loop invariant i + j == 1; loop invariant i + j == 100; loop invariant i + j == 1000; loop invariant i + j == 10000; loop invariant i + j == 100000; loop invariant i + j == 1000000; loop invariant i + j == 10000000; loop invariant i + j == 100000000; loop invariant i + j == 1000000000; loop invariant i + j == 10000000000; loop invariant i + j == 100000000000; loop invariant i + j == 1000000000000; loop invariant i + j == 10000000000000; loop invariant i + j == 100000000000000; loop invariant i + j == 1000000000000000; loop invariant i + j == 10000000000000000; loop invariant i + j == 100000000000000000; loop invariant i + j == 1000000000000000000; loop invariant i + j == 10000000000000000000; loop invariant i + j == 100000000000000000000; loop invariant i + j == 1000000000000000000000; loop invariant i + j == 10000000000000000000000; loop invariant i + j == 100000000000000000000000; loop invariant i + j == 1000000000000000000000000; loop invariant i + j == 10000000000000000000000000; loop invariant i + j == 100000000000000000000000000; loop invariant i + j == 1000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000; loop invariant i + j == 100000000000000000000000000000000; loop invariant i + j == 1000000000000000000000000000000000; loop invariant i + j == 10000000000000000000000000000000000;\nloop invariant i85: 1 <= n <= 2*k;\nloop invariant i86: b == 1 || b == 0;\nloop invariant i87: (b == 1) ==> (i == j);\nloop invariant i88: (b == 0) ==> (i == j);\nloop invariant i89: (b == 1) ==> (i == j + 1);\nloop invariant i90: (b == 0) ==> (j == i + 1);\nloop invariant i91: (b == 0) ==> (i == j + 1);\n*/\nfor( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/30.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/invgen/split.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/32.c"
        ],
        "skipped": [],
        "total": 117,
        "success_count": 98,
        "failure_count": 19,
        "success_rate": 0.8376068376068376
    }
}